
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e880  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800ea20  0800ea20  0001ea20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efcc  0800efcc  0002064c  2**0
                  CONTENTS
  4 .ARM          00000008  0800efcc  0800efcc  0001efcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efd4  0800efd4  0002064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efd4  0800efd4  0001efd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efd8  0800efd8  0001efd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000064c  20000000  0800efdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a4  2000064c  0800f628  0002064c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006bf0  0800f628  00026bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002064c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026851  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005656  00000000  00000000  00046ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002018  00000000  00000000  0004c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df8  00000000  00000000  0004e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c75b  00000000  00000000  00050338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b05  00000000  00000000  0006ca93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e96f  00000000  00000000  00092598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b70  00000000  00000000  00130f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000064c 	.word	0x2000064c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea08 	.word	0x0800ea08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000650 	.word	0x20000650
 80001dc:	0800ea08 	.word	0x0800ea08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fad6 	bl	8002b70 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000668 	.word	0x20000668

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 fbb1 	bl	8002d64 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000668 	.word	0x20000668

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fa93 	bl	8002b70 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 fe8b 	bl	8002370 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000668 	.word	0x20000668

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 fb5f 	bl	8002d64 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 fe5d 	bl	8002370 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000668 	.word	0x20000668

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f001 fded 	bl	8002370 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 f867 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 f862 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fdbd 	bl	8002370 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 f85a 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f001 fdb5 	bl	8002370 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 fd5f 	bl	8002370 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000908:	f242 0393 	movw	r3, #8339	; 0x2093
 800090c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	200e      	movs	r0, #14
 8000912:	f7ff fef8 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000916:	f107 000c 	add.w	r0, r7, #12
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2305      	movs	r3, #5
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	2102      	movs	r1, #2
 8000924:	f7ff ff8a 	bl	800083c <MFRC_TRANSCEIVE>
 8000928:	4603      	mov	r3, r0
 800092a:	2bcc      	cmp	r3, #204	; 0xcc
 800092c:	d001      	beq.n	8000932 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 800092e:	23aa      	movs	r3, #170	; 0xaa
 8000930:	e000      	b.n	8000934 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000932:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000946:	f247 0393 	movw	r3, #28819	; 0x7093
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	3302      	adds	r3, #2
 800095c:	2205      	movs	r2, #5
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f00d fbc7 	bl	800e0f4 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000966:	f107 0208 	add.w	r2, r7, #8
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2107      	movs	r1, #7
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	3307      	adds	r3, #7
 800097c:	893a      	ldrh	r2, [r7, #8]
 800097e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000980:	f107 000c 	add.w	r0, r7, #12
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2303      	movs	r3, #3
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	2109      	movs	r1, #9
 800098e:	f7ff ff55 	bl	800083c <MFRC_TRANSCEIVE>
 8000992:	4603      	mov	r3, r0
 8000994:	2bcc      	cmp	r3, #204	; 0xcc
 8000996:	d001      	beq.n	800099c <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000998:	23aa      	movs	r3, #170	; 0xaa
 800099a:	e000      	b.n	800099e <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 800099c:	23cc      	movs	r3, #204	; 0xcc
	}

}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 80009ae:	f242 0395 	movw	r3, #8341	; 0x2095
 80009b2:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	200e      	movs	r0, #14
 80009b8:	f7ff fea5 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009bc:	f107 000c 	add.w	r0, r7, #12
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2305      	movs	r3, #5
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	2102      	movs	r1, #2
 80009ca:	f7ff ff37 	bl	800083c <MFRC_TRANSCEIVE>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2bcc      	cmp	r3, #204	; 0xcc
 80009d2:	d001      	beq.n	80009d8 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 80009d4:	23aa      	movs	r3, #170	; 0xaa
 80009d6:	e000      	b.n	80009da <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 80009d8:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b088      	sub	sp, #32
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 80009ec:	f247 0395 	movw	r3, #28821	; 0x7095
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	3302      	adds	r3, #2
 8000a02:	2205      	movs	r2, #5
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00d fb74 	bl	800e0f4 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2107      	movs	r1, #7
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe9e 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	3307      	adds	r3, #7
 8000a22:	893a      	ldrh	r2, [r7, #8]
 8000a24:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a26:	f107 000c 	add.w	r0, r7, #12
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2303      	movs	r3, #3
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	2109      	movs	r1, #9
 8000a34:	f7ff ff02 	bl	800083c <MFRC_TRANSCEIVE>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2bcc      	cmp	r3, #204	; 0xcc
 8000a3c:	d001      	beq.n	8000a42 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000a3e:	23aa      	movs	r3, #170	; 0xaa
 8000a40:	e000      	b.n	8000a44 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000a42:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  if (PICC_CHECK() != PCD_OK) {
 8000a52:	f000 f832 	bl	8000aba <PICC_CHECK>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2bcc      	cmp	r3, #204	; 0xcc
 8000a5a:	d001      	beq.n	8000a60 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 8000a5c:	23aa      	movs	r3, #170	; 0xaa
 8000a5e:	e028      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  MFRC_ANTICOL1(ANTICOL1);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff4b 	bl	8000900 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000a6a:	7c3b      	ldrb	r3, [r7, #16]
 8000a6c:	2b88      	cmp	r3, #136	; 0x88
 8000a6e:	d001      	beq.n	8000a74 <PICC_Select+0x28>
		  return(PCD_COMM_ERR);
 8000a70:	23aa      	movs	r3, #170	; 0xaa
 8000a72:	e01e      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  HAL_Delay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f001 fc7b 	bl	8002370 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff59 	bl	800093c <MFRC_SEL1>
	  HAL_Delay(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f001 fc70 	bl	8002370 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff87 	bl	80009a6 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f001 fc69 	bl	8002370 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff9c 	bl	80009e2 <MFRC_SEL2>
	  HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f001 fc60 	bl	8002370 <HAL_Delay>
	  return(PCD_OK);
 8000ab0:	23cc      	movs	r3, #204	; 0xcc
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff feff 	bl	80008c6 <MFRC_REQA>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2bcc      	cmp	r3, #204	; 0xcc
 8000acc:	d001      	beq.n	8000ad2 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000ace:	23aa      	movs	r3, #170	; 0xaa
 8000ad0:	e008      	b.n	8000ae4 <PICC_CHECK+0x2a>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	2b44      	cmp	r3, #68	; 0x44
 8000ad6:	d102      	bne.n	8000ade <PICC_CHECK+0x24>
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 8000ade:	23aa      	movs	r3, #170	; 0xaa
 8000ae0:	e000      	b.n	8000ae4 <PICC_CHECK+0x2a>
		}
		else{
			return(PCD_OK);
 8000ae2:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
	if (PICC_Select() != PCD_OK) {
 8000af8:	f7ff ffa8 	bl	8000a4c <PICC_Select>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2bcc      	cmp	r3, #204	; 0xcc
 8000b00:	d001      	beq.n	8000b06 <UL_READ+0x1a>
		return PCD_COMM_ERR; //No PICC available
 8000b02:	23aa      	movs	r3, #170	; 0xaa
 8000b04:	e021      	b.n	8000b4a <UL_READ+0x5e>
	}
	uint8_t transaction[4]={ULTRA_READ,addr};
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	2330      	movs	r3, #48	; 0x30
 8000b0c:	733b      	strb	r3, [r7, #12]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8000b12:	f107 0208 	add.w	r2, r7, #8
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fe1b 	bl	8000758 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	3302      	adds	r3, #2
 8000b28:	893a      	ldrh	r2, [r7, #8]
 8000b2a:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8000b2c:	f107 000c 	add.w	r0, r7, #12
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2312      	movs	r3, #18
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	2104      	movs	r1, #4
 8000b3a:	f7ff fe7f 	bl	800083c <MFRC_TRANSCEIVE>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2bcc      	cmp	r3, #204	; 0xcc
 8000b42:	d001      	beq.n	8000b48 <UL_READ+0x5c>
		return(PCD_COMM_ERR);
 8000b44:	23aa      	movs	r3, #170	; 0xaa
 8000b46:	e000      	b.n	8000b4a <UL_READ+0x5e>
	}

	else{
		return(PCD_OK);
 8000b48:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b088      	sub	sp, #32
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff ffc3 	bl	8000aec <UL_READ>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2bcc      	cmp	r3, #204	; 0xcc
 8000b6a:	d001      	beq.n	8000b70 <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8000b6c:	23aa      	movs	r3, #170	; 0xaa
 8000b6e:	e007      	b.n	8000b80 <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2207      	movs	r2, #7
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f00d fabb 	bl	800e0f4 <memcpy>
	return PCD_OK;
 8000b7e:	23cc      	movs	r3, #204	; 0xcc
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	uint8_t* uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8000b90:	2007      	movs	r0, #7
 8000b92:	f00d fa9f 	bl	800e0d4 <malloc>
 8000b96:	4603      	mov	r3, r0
 8000b98:	60fb      	str	r3, [r7, #12]

	result->type = "MIFARE Ultralight";
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <UL_readcard+0x58>)
 8000b9e:	60da      	str	r2, [r3, #12]
	result->name = "Test card";
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <UL_readcard+0x5c>)
 8000ba4:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2207      	movs	r2, #7
 8000baa:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	741a      	strb	r2, [r3, #16]

	if ((UL_getuid(uid) != PCD_OK)) {
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff ffca 	bl	8000b52 <UL_getuid>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2bcc      	cmp	r3, #204	; 0xcc
 8000bc2:	d001      	beq.n	8000bc8 <UL_readcard+0x40>
		return PCD_COMM_ERR;
 8000bc4:	23aa      	movs	r3, #170	; 0xaa
 8000bc6:	e006      	b.n	8000bd6 <UL_readcard+0x4e>
	}
	result->uid = uid;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	601a      	str	r2, [r3, #0]
	result->contents = NULL;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
	return PCD_OK;
 8000bd4:	23cc      	movs	r3, #204	; 0xcc
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	0800ea80 	.word	0x0800ea80
 8000be4:	0800ea94 	.word	0x0800ea94

08000be8 <uid_tostring>:

char* uid_tostring(uint8_t* uid, uint8_t size) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f00d fa6a 	bl	800e0d4 <malloc>
 8000c00:	4603      	mov	r3, r0
 8000c02:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e023      	b.n	8000c52 <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d80d      	bhi.n	8000c32 <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1898      	adds	r0, r3, r2
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4912      	ldr	r1, [pc, #72]	; (8000c74 <uid_tostring+0x8c>)
 8000c2c:	f00d fb68 	bl	800e300 <siprintf>
 8000c30:	e00c      	b.n	8000c4c <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	461a      	mov	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1898      	adds	r0, r3, r2
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	490c      	ldr	r1, [pc, #48]	; (8000c78 <uid_tostring+0x90>)
 8000c48:	f00d fb5a 	bl	800e300 <siprintf>
	for (int i = 0; i < size; i++) {
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbd7      	blt.n	8000c0a <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0';
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4413      	add	r3, r2
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
	return result;
 8000c68:	68bb      	ldr	r3, [r7, #8]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	0800eaa0 	.word	0x0800eaa0
 8000c78:	0800eaa4 	.word	0x0800eaa4

08000c7c <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000c82:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000c84:	463b      	mov	r3, r7
 8000c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f00d fa3f 	bl	800e110 <memset>
	OLED_FLUSH(zeros);
 8000c92:	463b      	mov	r3, r7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f87b 	bl	8000d90 <OLED_FLUSH>

}
 8000c9a:	bf00      	nop
 8000c9c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	4815      	ldr	r0, [pc, #84]	; (8000d0c <OLED_cmd+0x68>)
 8000cb8:	f001 fdfc 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <OLED_cmd+0x6c>)
 8000cc2:	f001 fdf7 	bl	80028b4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000cc6:	f107 010f 	add.w	r1, r7, #15
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4810      	ldr	r0, [pc, #64]	; (8000d14 <OLED_cmd+0x70>)
 8000cd2:	f004 fd82 	bl	80057da <HAL_SPI_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d009      	beq.n	8000cf0 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2110      	movs	r1, #16
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <OLED_cmd+0x68>)
 8000ce2:	f001 fde7 	bl	80028b4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f001 fb42 	bl	8002370 <HAL_Delay>
		return(HAL_ERROR);
 8000cec:	2301      	movs	r3, #1
 8000cee:	e008      	b.n	8000d02 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <OLED_cmd+0x68>)
 8000cf6:	f001 fddd 	bl	80028b4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f001 fb38 	bl	8002370 <HAL_Delay>
		return(HAL_OK);
 8000d00:	2300      	movs	r3, #0
	}

}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400
 8000d14:	200006bc 	.word	0x200006bc

08000d18 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	4816      	ldr	r0, [pc, #88]	; (8000d84 <OLED_data+0x6c>)
 8000d2a:	f001 fdc3 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2102      	movs	r1, #2
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <OLED_data+0x70>)
 8000d34:	f001 fdbe 	bl	80028b4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <OLED_data+0x74>)
 8000d44:	f004 fd49 	bl	80057da <HAL_SPI_Transmit>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00b      	beq.n	8000d66 <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <OLED_data+0x70>)
 8000d54:	f001 fdae 	bl	80028b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <OLED_data+0x6c>)
 8000d5e:	f001 fda9 	bl	80028b4 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00a      	b.n	8000d7c <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <OLED_data+0x70>)
 8000d6c:	f001 fda2 	bl	80028b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2110      	movs	r1, #16
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <OLED_data+0x6c>)
 8000d76:	f001 fd9d 	bl	80028b4 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000d7a:	2300      	movs	r3, #0
	}



}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	200006bc 	.word	0x200006bc

08000d90 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e023      	b.n	8000de6 <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	3b50      	subs	r3, #80	; 0x50
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff7c 	bl	8000ca4 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff ff79 	bl	8000ca4 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000db2:	2010      	movs	r0, #16
 8000db4:	f7ff ff76 	bl	8000ca4 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	e00d      	b.n	8000dda <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	01da      	lsls	r2, r3, #7
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffa2 	bl	8000d18 <OLED_data>
		for(int i=0;i<128;i++){
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dde:	ddee      	ble.n	8000dbe <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b07      	cmp	r3, #7
 8000dea:	ddd8      	ble.n	8000d9e <OLED_FLUSH+0xe>
		}


	}
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2110      	movs	r1, #16
 8000e02:	482f      	ldr	r0, [pc, #188]	; (8000ec0 <OLED_INIT+0xc8>)
 8000e04:	f001 fd56 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	482c      	ldr	r0, [pc, #176]	; (8000ec0 <OLED_INIT+0xc8>)
 8000e0e:	f001 fd51 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2102      	movs	r1, #2
 8000e16:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <OLED_INIT+0xcc>)
 8000e18:	f001 fd4c 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f001 faa7 	bl	8002370 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2108      	movs	r1, #8
 8000e26:	4826      	ldr	r0, [pc, #152]	; (8000ec0 <OLED_INIT+0xc8>)
 8000e28:	f001 fd44 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e2c:	2064      	movs	r0, #100	; 0x64
 8000e2e:	f001 fa9f 	bl	8002370 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2108      	movs	r1, #8
 8000e36:	4822      	ldr	r0, [pc, #136]	; (8000ec0 <OLED_INIT+0xc8>)
 8000e38:	f001 fd3c 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e3c:	2064      	movs	r0, #100	; 0x64
 8000e3e:	f001 fa97 	bl	8002370 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <OLED_INIT+0xd0>)
 8000e44:	463c      	mov	r4, r7
 8000e46:	461d      	mov	r5, r3
 8000e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e50:	c403      	stmia	r4!, {r0, r1}
 8000e52:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	e00c      	b.n	8000e74 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000e5a:	463a      	mov	r2, r7
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff1e 	bl	8000ca4 <OLED_cmd>
		HAL_Delay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f001 fa81 	bl	8002370 <HAL_Delay>
	for(int i=0;i<25;i++){
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b18      	cmp	r3, #24
 8000e78:	ddef      	ble.n	8000e5a <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000e7a:	20a7      	movs	r0, #167	; 0xa7
 8000e7c:	f7ff ff12 	bl	8000ca4 <OLED_cmd>
	OLED_FLUSH(HVE);
 8000e80:	4812      	ldr	r0, [pc, #72]	; (8000ecc <OLED_INIT+0xd4>)
 8000e82:	f7ff ff85 	bl	8000d90 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8000e86:	20af      	movs	r0, #175	; 0xaf
 8000e88:	f7ff ff0c 	bl	8000ca4 <OLED_cmd>
	HAL_Delay(1000);
 8000e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e90:	f001 fa6e 	bl	8002370 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8000e94:	20ae      	movs	r0, #174	; 0xae
 8000e96:	f7ff ff05 	bl	8000ca4 <OLED_cmd>
	HAL_Delay(10);
 8000e9a:	200a      	movs	r0, #10
 8000e9c:	f001 fa68 	bl	8002370 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8000ea0:	20a6      	movs	r0, #166	; 0xa6
 8000ea2:	f7ff feff 	bl	8000ca4 <OLED_cmd>
	HAL_Delay(10);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f001 fa62 	bl	8002370 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8000eac:	20af      	movs	r0, #175	; 0xaf
 8000eae:	f7ff fef9 	bl	8000ca4 <OLED_cmd>
	OLED_Clear();
 8000eb2:	f7ff fee3 	bl	8000c7c <OLED_Clear>
	return HAL_OK;
 8000eb6:	2300      	movs	r3, #0

}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	0800eaa8 	.word	0x0800eaa8
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8000edc:	2005      	movs	r0, #5
 8000ede:	f00d f8f9 	bl	800e0d4 <malloc>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e013      	b.n	8000f14 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f1a3 0220 	sub.w	r2, r3, #32
 8000ef2:	4910      	ldr	r1, [pc, #64]	; (8000f34 <OLED_InvChar+0x64>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	18ca      	adds	r2, r1, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	440b      	add	r3, r1
 8000f08:	43d2      	mvns	r2, r2
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	dde8      	ble.n	8000eec <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6838      	ldr	r0, [r7, #0]
 8000f20:	f00d f8e8 	bl	800e0f4 <memcpy>
	free(temp);
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f00d f8dd 	bl	800e0e4 <free>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800ec40 	.word	0x0800ec40

08000f38 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71bb      	strb	r3, [r7, #6]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	717b      	strb	r3, [r7, #5]
 8000f52:	4613      	mov	r3, r2
 8000f54:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	3b50      	subs	r3, #80	; 0x50
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fea1 	bl	8000ca4 <OLED_cmd>
	OLED_cmd(col&0x0F);
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fe9a 	bl	8000ca4 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f043 0310 	orr.w	r3, r3, #16
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fe91 	bl	8000ca4 <OLED_cmd>
	uint8_t* data=malloc(6);
 8000f82:	2006      	movs	r0, #6
 8000f84:	f00d f8a6 	bl	800e0d4 <malloc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8000f8c:	793b      	ldrb	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10d      	bne.n	8000fae <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	f1a3 0220 	sub.w	r2, r3, #32
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <OLED_drawChar+0xa0>)
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f00d f8a4 	bl	800e0f4 <memcpy>
 8000fac:	e004      	b.n	8000fb8 <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8000fae:	797b      	ldrb	r3, [r7, #5]
 8000fb0:	68f9      	ldr	r1, [r7, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff8c 	bl	8000ed0 <OLED_InvChar>
	}

	*(data+5)=0x00;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3305      	adds	r3, #5
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8000fc0:	2106      	movs	r1, #6
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fea8 	bl	8000d18 <OLED_data>
	free(data);
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f00d f88b 	bl	800e0e4 <free>
	}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd90      	pop	{r4, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	0800ec40 	.word	0x0800ec40

08000fdc <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	603a      	str	r2, [r7, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	460b      	mov	r3, r1
 8000fec:	71bb      	strb	r3, [r7, #6]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e014      	b.n	8001022 <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	0052      	lsls	r2, r2, #1
 8001000:	4413      	add	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	4413      	add	r3, r2
 800100a:	b2d9      	uxtb	r1, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	797b      	ldrb	r3, [r7, #5]
 8001016:	79f8      	ldrb	r0, [r7, #7]
 8001018:	f7ff ff8e 	bl	8000f38 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f7ff f8dc 	bl	80001e0 <strlen>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8e3      	bhi.n	8000ff8 <OLED_Printlin+0x1c>


	}
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	6039      	str	r1, [r7, #0]
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	4613      	mov	r3, r2
 8001048:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f7ff f8c8 	bl	80001e0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	0fda      	lsrs	r2, r3, #31
 8001058:	4413      	add	r3, r2
 800105a:	105b      	asrs	r3, r3, #1
 800105c:	425b      	negs	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	3340      	adds	r3, #64	; 0x40
 800106a:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	b2d9      	uxtb	r1, r3
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	79f8      	ldrb	r0, [r7, #7]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	f7ff ffb1 	bl	8000fdc <OLED_Printlin>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001082:	b580      	push	{r7, lr}
 8001084:	b094      	sub	sp, #80	; 0x50
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 800108a:	2320      	movs	r3, #32
 800108c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001090:	2300      	movs	r3, #0
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001094:	2300      	movs	r3, #0
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 8001098:	2300      	movs	r3, #0
 800109a:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 800109c:	2300      	movs	r3, #0
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
 80010a4:	e018      	b.n	80010d8 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80010a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010aa:	4413      	add	r3, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	d10b      	bne.n	80010d0 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 80010b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ba:	b2d9      	uxtb	r1, r3
 80010bc:	f107 020c 	add.w	r2, r7, #12
 80010c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c2:	4413      	add	r3, r2
 80010c4:	460a      	mov	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
	                i++;
 80010c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ca:	3301      	adds	r3, #1
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010ce:	e000      	b.n	80010d2 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 80010d0:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 80010d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d4:	3301      	adds	r3, #1
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
 80010d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010da:	2b15      	cmp	r3, #21
 80010dc:	dde3      	ble.n	80010a6 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 80010de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b20      	cmp	r3, #32
 80010e8:	d102      	bne.n	80010f0 <OLED_Print+0x6e>
	            last_ind++;
 80010ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ec:	3301      	adds	r3, #1
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 80010f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f872 	bl	80001e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b15      	cmp	r3, #21
 8001100:	d828      	bhi.n	8001154 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f869 	bl	80001e0 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	18d1      	adds	r1, r2, r3
 8001118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4618      	mov	r0, r3
 8001120:	f00d f90e 	bl	800e340 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001126:	f107 0220 	add.w	r2, r7, #32
 800112a:	18d0      	adds	r0, r2, r3
 800112c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001132:	f1c3 0315 	rsb	r3, r3, #21
 8001136:	461a      	mov	r2, r3
 8001138:	f00c ffea 	bl	800e110 <memset>
	            thisline[21]=' ';
 800113c:	2320      	movs	r3, #32
 800113e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001144:	b2d8      	uxtb	r0, r3
 8001146:	f107 0220 	add.w	r2, r7, #32
 800114a:	2300      	movs	r3, #0
 800114c:	2102      	movs	r1, #2
 800114e:	f7ff ff45 	bl	8000fdc <OLED_Printlin>




	    }
}
 8001152:	e05e      	b.n	8001212 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001156:	3314      	adds	r3, #20
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b20      	cmp	r3, #32
 8001160:	d03a      	beq.n	80011d8 <OLED_Print+0x156>
 8001162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001164:	3315      	adds	r3, #21
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b20      	cmp	r3, #32
 800116e:	d033      	beq.n	80011d8 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	18d1      	adds	r1, r2, r3
 8001176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001178:	3b01      	subs	r3, #1
 800117a:	3350      	adds	r3, #80	; 0x50
 800117c:	443b      	add	r3, r7
 800117e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001182:	461a      	mov	r2, r3
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f00d f8d9 	bl	800e340 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 800118e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001190:	3b01      	subs	r3, #1
 8001192:	3350      	adds	r3, #80	; 0x50
 8001194:	443b      	add	r3, r7
 8001196:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800119a:	461a      	mov	r2, r3
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	1898      	adds	r0, r3, r2
 80011a2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80011a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a8:	3b01      	subs	r3, #1
 80011aa:	3350      	adds	r3, #80	; 0x50
 80011ac:	443b      	add	r3, r7
 80011ae:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011b2:	f1c3 0315 	rsb	r3, r3, #21
 80011b6:	461a      	mov	r2, r3
 80011b8:	f00c ffaa 	bl	800e110 <memset>
	            thisline[21]=' ';
 80011bc:	2320      	movs	r3, #32
 80011be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 80011c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011c4:	3b01      	subs	r3, #1
 80011c6:	3350      	adds	r3, #80	; 0x50
 80011c8:	443b      	add	r3, r7
 80011ca:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011ce:	461a      	mov	r2, r3
 80011d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011d2:	4413      	add	r3, r2
 80011d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80011d6:	e00e      	b.n	80011f6 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 80011d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	18d1      	adds	r1, r2, r3
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2215      	movs	r2, #21
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00d f8ab 	bl	800e340 <strncpy>
	            thisline[21]=' ';
 80011ea:	2320      	movs	r3, #32
 80011ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 80011f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f2:	3315      	adds	r3, #21
 80011f4:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 80011fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011fc:	b2d8      	uxtb	r0, r3
 80011fe:	f107 0220 	add.w	r2, r7, #32
 8001202:	2300      	movs	r3, #0
 8001204:	2102      	movs	r1, #2
 8001206:	f7ff fee9 	bl	8000fdc <OLED_Printlin>
	        line++;
 800120a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800120c:	3301      	adds	r3, #1
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001210:	e746      	b.n	80010a0 <OLED_Print+0x1e>
}
 8001212:	3750      	adds	r7, #80	; 0x50
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001224:	f7ff fd2a 	bl	8000c7c <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	4619      	mov	r1, r3
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff ff01 	bl	800103a <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e01a      	b.n	8001274 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3301      	adds	r3, #1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	7818      	ldrb	r0, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	7859      	ldrb	r1, [r3, #1]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3301      	adds	r3, #1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	f7ff feb7 	bl	8000fdc <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbde      	blt.n	800123e <OLED_SCREEN+0x26>
	}
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	460b      	mov	r3, r1
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7fe ff9b 	bl	80001e0 <strlen>
 80012aa:	4603      	mov	r3, r0
 80012ac:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	3302      	adds	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	7818      	ldrb	r0, [r3, #0]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	2300      	movs	r3, #0
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	f7ff fe84 	bl	8000fdc <OLED_Printlin>
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	460b      	mov	r3, r1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 80012ea:	4a40      	ldr	r2, [pc, #256]	; (80013ec <OLED_SELECT+0x110>)
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	4611      	mov	r1, r2
 80012f4:	8019      	strh	r1, [r3, #0]
 80012f6:	3302      	adds	r3, #2
 80012f8:	0c12      	lsrs	r2, r2, #16
 80012fa:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d116      	bne.n	8001330 <OLED_SELECT+0x54>
			if(selopt==0){
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10b      	bne.n	8001320 <OLED_SELECT+0x44>
			rest=(char*)screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001314:	3b01      	subs	r3, #1
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	e009      	b.n	8001334 <OLED_SELECT+0x58>
			}
			else{
				rest=(char*)screen->data[selopt];
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	e001      	b.n	8001334 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <OLED_SELECT+0x114>)
 8001332:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d124      	bne.n	8001384 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001346:	3b01      	subs	r3, #1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800135c:	3b01      	subs	r3, #1
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	785b      	ldrb	r3, [r3, #1]
 8001364:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	785b      	ldrb	r3, [r3, #1]
 8001380:	773b      	strb	r3, [r7, #28]
 8001382:	e021      	b.n	80013c8 <OLED_SELECT+0xec>
	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	7afb      	ldrb	r3, [r7, #11]
 800138a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800138e:	3b01      	subs	r3, #1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80013a2:	3b01      	subs	r3, #1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 80013c8:	7fb9      	ldrb	r1, [r7, #30]
 80013ca:	7ff8      	ldrb	r0, [r7, #31]
 80013cc:	2300      	movs	r3, #0
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	f7ff fe04 	bl	8000fdc <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 80013d4:	f107 0214 	add.w	r2, r7, #20
 80013d8:	7f39      	ldrb	r1, [r7, #28]
 80013da:	7f78      	ldrb	r0, [r7, #29]
 80013dc:	2300      	movs	r3, #0
 80013de:	f7ff fdfd 	bl	8000fdc <OLED_Printlin>

}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800eac8 	.word	0x0800eac8
 80013f0:	0800eac4 	.word	0x0800eac4

080013f4 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 80013fe:	230f      	movs	r3, #15
 8001400:	733b      	strb	r3, [r7, #12]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	737b      	strb	r3, [r7, #13]
 8001406:	2300      	movs	r3, #0
 8001408:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <STAT_READ+0x54>)
 8001412:	f001 fa4f 	bl	80028b4 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 8001416:	bf00      	nop
 8001418:	f107 0208 	add.w	r2, r7, #8
 800141c:	f107 010c 	add.w	r1, r7, #12
 8001420:	2364      	movs	r3, #100	; 0x64
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2303      	movs	r3, #3
 8001426:	4809      	ldr	r0, [pc, #36]	; (800144c <STAT_READ+0x58>)
 8001428:	f004 fb13 	bl	8005a52 <HAL_SPI_TransmitReceive>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f2      	bne.n	8001418 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001438:	4803      	ldr	r0, [pc, #12]	; (8001448 <STAT_READ+0x54>)
 800143a:	f001 fa3b 	bl	80028b4 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 800143e:	7abb      	ldrb	r3, [r7, #10]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40020000 	.word	0x40020000
 800144c:	20000714 	.word	0x20000714

08001450 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	460a      	mov	r2, r1
 800145a:	71fb      	strb	r3, [r7, #7]
 800145c:	4613      	mov	r3, r2
 800145e:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 8001460:	231f      	movs	r3, #31
 8001462:	733b      	strb	r3, [r7, #12]
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	737b      	strb	r3, [r7, #13]
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001472:	480a      	ldr	r0, [pc, #40]	; (800149c <STAT_WRITE+0x4c>)
 8001474:	f001 fa1e 	bl	80028b4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 8001478:	f107 010c 	add.w	r1, r7, #12
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	2203      	movs	r2, #3
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <STAT_WRITE+0x50>)
 8001482:	f004 f9aa 	bl	80057da <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <STAT_WRITE+0x4c>)
 800148e:	f001 fa11 	bl	80028b4 <HAL_GPIO_WritePin>

	return(HAL_OK);
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40020000 	.word	0x40020000
 80014a0:	20000714 	.word	0x20000714

080014a4 <WRITE_DIS>:
}

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 80014aa:	2304      	movs	r3, #4
 80014ac:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80014ae:	e011      	b.n	80014d4 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	480e      	ldr	r0, [pc, #56]	; (80014f0 <WRITE_DIS+0x4c>)
 80014b8:	f001 f9fc 	bl	80028b4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 80014bc:	1df9      	adds	r1, r7, #7
 80014be:	2364      	movs	r3, #100	; 0x64
 80014c0:	2201      	movs	r2, #1
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <WRITE_DIS+0x50>)
 80014c4:	f004 f989 	bl	80057da <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ce:	4808      	ldr	r0, [pc, #32]	; (80014f0 <WRITE_DIS+0x4c>)
 80014d0:	f001 f9f0 	bl	80028b4 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80014d4:	20c0      	movs	r0, #192	; 0xc0
 80014d6:	f7ff ff8d 	bl	80013f4 <STAT_READ>
 80014da:	4603      	mov	r3, r0
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d0e5      	beq.n	80014b0 <WRITE_DIS+0xc>
		}
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40020000 	.word	0x40020000
 80014f4:	20000714 	.word	0x20000714

080014f8 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <MEM_INIT+0x34>)
 8001504:	f001 f9d6 	bl	80028b4 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001508:	2100      	movs	r1, #0
 800150a:	20a0      	movs	r0, #160	; 0xa0
 800150c:	f7ff ffa0 	bl	8001450 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8001510:	20a0      	movs	r0, #160	; 0xa0
 8001512:	f7ff ff6f 	bl	80013f4 <STAT_READ>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MEM_INIT+0x28>
		return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e002      	b.n	8001526 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 8001520:	f7ff ffc0 	bl	80014a4 <WRITE_DIS>
	return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020000 	.word	0x40020000

08001530 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001534:	2108      	movs	r1, #8
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <BUZZ+0x20>)
 8001538:	f004 fe86 	bl	8006248 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 800153c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001540:	f000 ff16 	bl	8002370 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001544:	2108      	movs	r1, #8
 8001546:	4802      	ldr	r0, [pc, #8]	; (8001550 <BUZZ+0x20>)
 8001548:	f004 ff2e 	bl	80063a8 <HAL_TIM_PWM_Stop>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000076c 	.word	0x2000076c

08001554 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001562:	2102      	movs	r1, #2
 8001564:	4820      	ldr	r0, [pc, #128]	; (80015e8 <choose+0x94>)
 8001566:	f001 f98d 	bl	8002884 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d136      	bne.n	80015de <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <choose+0x98>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001578:	e012      	b.n	80015a0 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <choose+0x98>)
 800157c:	f004 fd26 	bl	8005fcc <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <choose+0x98>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158a:	4293      	cmp	r3, r2
 800158c:	d108      	bne.n	80015a0 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <choose+0x98>)
 8001590:	f004 fd76 	bl	8006080 <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	e01e      	b.n	80015de <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 80015a0:	2102      	movs	r1, #2
 80015a2:	4811      	ldr	r0, [pc, #68]	; (80015e8 <choose+0x94>)
 80015a4:	f001 f96e 	bl	8002884 <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0e5      	beq.n	800157a <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d102      	bne.n	80015c8 <choose+0x74>
	 	    	*count = 0;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4619      	mov	r1, r3
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff fe82 	bl	80012dc <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <choose+0x98>)
 80015da:	f004 fd51 	bl	8006080 <HAL_TIM_Base_Stop>
	 	}
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40020000 	.word	0x40020000
 80015ec:	200007b4 	.word	0x200007b4

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 fe7a 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f864 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f000 fa2c 	bl	8001a58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001600:	f000 f8ca 	bl	8001798 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001604:	f000 f8f6 	bl	80017f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001608:	f000 f92c 	bl	8001864 <MX_SPI2_Init>
  MX_TIM2_Init();
 800160c:	f000 f960 	bl	80018d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001610:	f000 f9d4 	bl	80019bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001614:	f009 f948 	bl	800a8a8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <main+0x90>)
 800161a:	2104      	movs	r1, #4
 800161c:	2001      	movs	r0, #1
 800161e:	f009 fa3b 	bl	800aa98 <osMessageQueueNew>
 8001622:	4603      	mov	r3, r0
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <main+0x94>)
 8001626:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001628:	4a17      	ldr	r2, [pc, #92]	; (8001688 <main+0x98>)
 800162a:	2100      	movs	r1, #0
 800162c:	4817      	ldr	r0, [pc, #92]	; (800168c <main+0x9c>)
 800162e:	f009 f985 	bl	800a93c <osThreadNew>
 8001632:	4603      	mov	r3, r0
 8001634:	4a16      	ldr	r2, [pc, #88]	; (8001690 <main+0xa0>)
 8001636:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001638:	4a16      	ldr	r2, [pc, #88]	; (8001694 <main+0xa4>)
 800163a:	2100      	movs	r1, #0
 800163c:	4816      	ldr	r0, [pc, #88]	; (8001698 <main+0xa8>)
 800163e:	f009 f97d 	bl	800a93c <osThreadNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a15      	ldr	r2, [pc, #84]	; (800169c <main+0xac>)
 8001646:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001648:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <main+0xb0>)
 800164a:	2100      	movs	r1, #0
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <main+0xb4>)
 800164e:	f009 f975 	bl	800a93c <osThreadNew>
 8001652:	4603      	mov	r3, r0
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <main+0xb8>)
 8001656:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <main+0xbc>)
 800165a:	2100      	movs	r1, #0
 800165c:	4814      	ldr	r0, [pc, #80]	; (80016b0 <main+0xc0>)
 800165e:	f009 f96d 	bl	800a93c <osThreadNew>
 8001662:	4603      	mov	r3, r0
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <main+0xc4>)
 8001666:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <main+0xc8>)
 800166a:	2100      	movs	r1, #0
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <main+0xcc>)
 800166e:	f009 f965 	bl	800a93c <osThreadNew>
 8001672:	4603      	mov	r3, r0
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <main+0xd0>)
 8001676:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001678:	f009 f93a 	bl	800a8f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800167c:	e7fe      	b.n	800167c <main+0x8c>
 800167e:	bf00      	nop
 8001680:	0800eed4 	.word	0x0800eed4
 8001684:	20000810 	.word	0x20000810
 8001688:	0800ee20 	.word	0x0800ee20
 800168c:	08001b41 	.word	0x08001b41
 8001690:	200007fc 	.word	0x200007fc
 8001694:	0800ee44 	.word	0x0800ee44
 8001698:	08001bcd 	.word	0x08001bcd
 800169c:	20000800 	.word	0x20000800
 80016a0:	0800ee68 	.word	0x0800ee68
 80016a4:	08001c51 	.word	0x08001c51
 80016a8:	20000804 	.word	0x20000804
 80016ac:	0800ee8c 	.word	0x0800ee8c
 80016b0:	08001c7d 	.word	0x08001c7d
 80016b4:	20000808 	.word	0x20000808
 80016b8:	0800eeb0 	.word	0x0800eeb0
 80016bc:	08001d09 	.word	0x08001d09
 80016c0:	2000080c 	.word	0x2000080c

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00c fd1c 	bl	800e110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <SystemClock_Config+0xcc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <SystemClock_Config+0xcc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <SystemClock_Config+0xcc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <SystemClock_Config+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001710:	4a20      	ldr	r2, [pc, #128]	; (8001794 <SystemClock_Config+0xd0>)
 8001712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <SystemClock_Config+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001738:	2308      	movs	r3, #8
 800173a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800173c:	23a8      	movs	r3, #168	; 0xa8
 800173e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001740:	2304      	movs	r3, #4
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001744:	2307      	movs	r3, #7
 8001746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fb07 	bl	8004d60 <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001758:	f000 fb4a 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	2302      	movs	r3, #2
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2102      	movs	r1, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fd69 	bl	8005250 <HAL_RCC_ClockConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001784:	f000 fb34 	bl	8001df0 <Error_Handler>
  }
}
 8001788:	bf00      	nop
 800178a:	3750      	adds	r7, #80	; 0x50
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_I2C1_Init+0x50>)
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <MX_I2C1_Init+0x54>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_I2C1_Init+0x58>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017d6:	f001 f887 	bl	80028e8 <HAL_I2C_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017e0:	f000 fb06 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000668 	.word	0x20000668
 80017ec:	40005400 	.word	0x40005400
 80017f0:	000186a0 	.word	0x000186a0

080017f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_SPI1_Init+0x68>)
 80017fa:	4a19      	ldr	r2, [pc, #100]	; (8001860 <MX_SPI1_Init+0x6c>)
 80017fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_SPI1_Init+0x68>)
 8001800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_SPI1_Init+0x68>)
 8001808:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800180c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_SPI1_Init+0x68>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_SPI1_Init+0x68>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <MX_SPI1_Init+0x68>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_SPI1_Init+0x68>)
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_SPI1_Init+0x68>)
 800182a:	2218      	movs	r2, #24
 800182c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_SPI1_Init+0x68>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_SPI1_Init+0x68>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_SPI1_Init+0x68>)
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_SPI1_Init+0x68>)
 8001842:	220a      	movs	r2, #10
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_SPI1_Init+0x68>)
 8001848:	f003 ff3e 	bl	80056c8 <HAL_SPI_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001852:	f000 facd 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200006bc 	.word	0x200006bc
 8001860:	40013000 	.word	0x40013000

08001864 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_SPI2_Init+0x64>)
 800186a:	4a18      	ldr	r2, [pc, #96]	; (80018cc <MX_SPI2_Init+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_SPI2_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_SPI2_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001894:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <MX_SPI2_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_SPI2_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <MX_SPI2_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_SPI2_Init+0x64>)
 80018b0:	220a      	movs	r2, #10
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <MX_SPI2_Init+0x64>)
 80018b6:	f003 ff07 	bl	80056c8 <HAL_SPI_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018c0:	f000 fa96 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000714 	.word	0x20000714
 80018cc:	40003800 	.word	0x40003800

080018d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <MX_TIM2_Init+0xe8>)
 800190a:	f240 12a3 	movw	r2, #419	; 0x1a3
 800190e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001918:	2231      	movs	r2, #49	; 0x31
 800191a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <MX_TIM2_Init+0xe8>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001928:	4823      	ldr	r0, [pc, #140]	; (80019b8 <MX_TIM2_Init+0xe8>)
 800192a:	f004 faff 	bl	8005f2c <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001934:	f000 fa5c 	bl	8001df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001942:	4619      	mov	r1, r3
 8001944:	481c      	ldr	r0, [pc, #112]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001946:	f004 ff5d 	bl	8006804 <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001950:	f000 fa4e 	bl	8001df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001954:	4818      	ldr	r0, [pc, #96]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001956:	f004 fc1d 	bl	8006194 <HAL_TIM_PWM_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001960:	f000 fa46 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4619      	mov	r1, r3
 8001972:	4811      	ldr	r0, [pc, #68]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001974:	f005 fb02 	bl	8006f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800197e:	f000 fa37 	bl	8001df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	; 0x60
 8001984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001986:	2318      	movs	r3, #24
 8001988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2208      	movs	r2, #8
 8001996:	4619      	mov	r1, r3
 8001998:	4807      	ldr	r0, [pc, #28]	; (80019b8 <MX_TIM2_Init+0xe8>)
 800199a:	f004 fe71 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019a4:	f000 fa24 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <MX_TIM2_Init+0xe8>)
 80019aa:	f000 fb4f 	bl	800204c <HAL_TIM_MspPostInit>

}
 80019ae:	bf00      	nop
 80019b0:	3738      	adds	r7, #56	; 0x38
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000076c 	.word	0x2000076c

080019bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	463b      	mov	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <MX_TIM3_Init+0x94>)
 80019da:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <MX_TIM3_Init+0x98>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <MX_TIM3_Init+0x94>)
 80019e0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80019e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_TIM3_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_TIM3_Init+0x94>)
 80019ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_TIM3_Init+0x94>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_TIM3_Init+0x94>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a00:	4813      	ldr	r0, [pc, #76]	; (8001a50 <MX_TIM3_Init+0x94>)
 8001a02:	f004 fa93 	bl	8005f2c <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a0c:	f000 f9f0 	bl	8001df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_TIM3_Init+0x94>)
 8001a1e:	f004 fef1 	bl	8006804 <HAL_TIM_ConfigClockSource>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a28:	f000 f9e2 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a34:	463b      	mov	r3, r7
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_TIM3_Init+0x94>)
 8001a3a:	f005 fa9f 	bl	8006f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a44:	f000 f9d4 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200007b4 	.word	0x200007b4
 8001a54:	40000400 	.word	0x40000400

08001a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ac8:	481b      	ldr	r0, [pc, #108]	; (8001b38 <MX_GPIO_Init+0xe0>)
 8001aca:	f000 fef3 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2122      	movs	r1, #34	; 0x22
 8001ad2:	481a      	ldr	r0, [pc, #104]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001ad4:	f000 feee 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4813      	ldr	r0, [pc, #76]	; (8001b38 <MX_GPIO_Init+0xe0>)
 8001aec:	f000 fd46 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8001af0:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <MX_GPIO_Init+0xe0>)
 8001b0a:	f000 fd37 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8001b0e:	2322      	movs	r3, #34	; 0x22
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001b26:	f000 fd29 	bl	800257c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400

08001b40 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001b48:	f00b fdb0 	bl	800d6ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <Start_Init+0x74>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f009 fff9 	bl	800bb48 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <Start_Init+0x78>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f009 fff4 	bl	800bb48 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <Start_Init+0x7c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f009 ffef 	bl	800bb48 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <Start_Init+0x80>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f009 ffea 	bl	800bb48 <vTaskSuspend>

    MFRC_INIT();
 8001b74:	f7fe fe30 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8001b78:	f7fe fde6 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 8001b7c:	f7ff f93c 	bl	8000df8 <OLED_INIT>
    OLED_Print(TC);
 8001b80:	4810      	ldr	r0, [pc, #64]	; (8001bc4 <Start_Init+0x84>)
 8001b82:	f7ff fa7e 	bl	8001082 <OLED_Print>
    MEM_INIT();
 8001b86:	f7ff fcb7 	bl	80014f8 <MEM_INIT>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8001b8a:	bf00      	nop
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <Start_Init+0x88>)
 8001b90:	f000 fe78 	bl	8002884 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f8      	bne.n	8001b8c <Start_Init+0x4c>
    vTaskResume(HomeHandle);
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <Start_Init+0x7c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00a f87a 	bl	800bc98 <vTaskResume>
    osDelay(10);
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f008 ff5c 	bl	800aa62 <osDelay>
    vTaskSuspend(NULL);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f009 ffcc 	bl	800bb48 <vTaskSuspend>
	vTaskSuspend(ReadCardHandle);
 8001bb0:	e7cc      	b.n	8001b4c <Start_Init+0xc>
 8001bb2:	bf00      	nop
 8001bb4:	20000800 	.word	0x20000800
 8001bb8:	20000804 	.word	0x20000804
 8001bbc:	20000808 	.word	0x20000808
 8001bc0:	2000080c 	.word	0x2000080c
 8001bc4:	20000400 	.word	0x20000400
 8001bc8:	40020000 	.word	0x40020000

08001bcc <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8001bd4:	201c      	movs	r0, #28
 8001bd6:	f00c fa7d 	bl	800e0d4 <malloc>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60fb      	str	r3, [r7, #12]
	int ranonce = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
	MFRC_ANTON();
 8001be6:	f7fe fd75 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d106      	bne.n	8001bfe <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4814      	ldr	r0, [pc, #80]	; (8001c44 <StartReadCard+0x78>)
 8001bf4:	f7ff fb10 	bl	8001218 <OLED_SCREEN>
		ranonce++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
	}
	if(UL_readcard(read_card) == PCD_OK){
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe ffc1 	bl	8000b88 <UL_readcard>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2bcc      	cmp	r3, #204	; 0xcc
 8001c0a:	d10d      	bne.n	8001c28 <StartReadCard+0x5c>
			BUZZ();
 8001c0c:	f7ff fc90 	bl	8001530 <BUZZ>
			MFRC_ANTOFF();
 8001c10:	f7fe fd9a 	bl	8000748 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0); //Send a pointer to our string to the Card Found task to use
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <StartReadCard+0x7c>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	f107 010c 	add.w	r1, r7, #12
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f009 f9d4 	bl	800afcc <xQueueGenericSend>
			suspend = 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
		}
	if (suspend == 1) {
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d1d9      	bne.n	8001be2 <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <StartReadCard+0x80>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00a f830 	bl	800bc98 <vTaskResume>
		ranonce = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f009 ff83 	bl	800bb48 <vTaskSuspend>
  {
 8001c42:	e7ce      	b.n	8001be2 <StartReadCard+0x16>
 8001c44:	0800ef44 	.word	0x0800ef44
 8001c48:	20000810 	.word	0x20000810
 8001c4c:	2000080c 	.word	0x2000080c

08001c50 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8001c62:	2100      	movs	r1, #0
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <StartWriteCard+0x28>)
 8001c66:	f7ff fad7 	bl	8001218 <OLED_SCREEN>
	  	ranonce++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f008 fef6 	bl	800aa62 <osDelay>
	  if (ranonce == 0){
 8001c76:	e7f1      	b.n	8001c5c <StartWriteCard+0xc>
 8001c78:	0800ef6c 	.word	0x0800ef6c

08001c7c <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8001c96:	2100      	movs	r1, #0
 8001c98:	4818      	ldr	r0, [pc, #96]	; (8001cfc <StartHome+0x80>)
 8001c9a:	f7ff fabd 	bl	8001218 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4815      	ldr	r0, [pc, #84]	; (8001cfc <StartHome+0x80>)
 8001ca8:	f7ff fb18 	bl	80012dc <OLED_SELECT>
		  ranonce++;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 8001cb2:	f107 0210 	add.w	r2, r7, #16
 8001cb6:	f107 010c 	add.w	r1, r7, #12
 8001cba:	2301      	movs	r3, #1
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	480e      	ldr	r0, [pc, #56]	; (8001cfc <StartHome+0x80>)
 8001cc2:	f7ff fc47 	bl	8001554 <choose>
	  if (suspend == 1) {
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d1df      	bne.n	8001c8c <StartHome+0x10>
		switch(count) {
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <StartHome+0x5c>
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d006      	beq.n	8001ce4 <StartHome+0x68>
 8001cd6:	e00b      	b.n	8001cf0 <StartHome+0x74>
			case 0:
				vTaskResume(ReadCardHandle);
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <StartHome+0x84>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f009 ffdb 	bl	800bc98 <vTaskResume>
				break;
 8001ce2:	e005      	b.n	8001cf0 <StartHome+0x74>
			case 1:
				vTaskResume(WriteCardHandle);
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <StartHome+0x88>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f009 ffd5 	bl	800bc98 <vTaskResume>
				break;
 8001cee:	bf00      	nop
		}
		ranonce = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f009 ff27 	bl	800bb48 <vTaskSuspend>
  {
 8001cfa:	e7c7      	b.n	8001c8c <StartHome+0x10>
 8001cfc:	0800ef30 	.word	0x0800ef30
 8001d00:	20000800 	.word	0x20000800
 8001d04:	20000804 	.word	0x20000804

08001d08 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
	 int ranonce = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
	 Card* read_card;
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d131      	bne.n	8001d86 <CardFoundStart+0x7e>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 8001d22:	bf00      	nop
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <CardFoundStart+0xb8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f107 0110 	add.w	r1, r7, #16
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f009 fae6 	bl	800b300 <xQueueReceive>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d1f4      	bne.n	8001d24 <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f7fe ff4f 	bl	8000be8 <uid_tostring>
 8001d4a:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	481d      	ldr	r0, [pc, #116]	; (8001dc4 <CardFoundStart+0xbc>)
 8001d50:	f7ff fa62 	bl	8001218 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, UID_LOC, uid_str);
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	2101      	movs	r1, #1
 8001d58:	481a      	ldr	r0, [pc, #104]	; (8001dc4 <CardFoundStart+0xbc>)
 8001d5a:	f7ff fa96 	bl	800128a <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, CARDTYPE_LOC, read_card->type);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	461a      	mov	r2, r3
 8001d64:	2102      	movs	r1, #2
 8001d66:	4817      	ldr	r0, [pc, #92]	; (8001dc4 <CardFoundStart+0xbc>)
 8001d68:	f7ff fa8f 	bl	800128a <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <CardFoundStart+0xbc>)
 8001d76:	f7ff fab1 	bl	80012dc <OLED_SELECT>
		ranonce++;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 8001d80:	69b8      	ldr	r0, [r7, #24]
 8001d82:	f00c f9af 	bl	800e0e4 <free>
	}

	choose(&SCRN_CardFound,&suspend,&count,2,OLED_NORESTORE);
 8001d86:	f107 0214 	add.w	r2, r7, #20
 8001d8a:	f107 010c 	add.w	r1, r7, #12
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2302      	movs	r3, #2
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <CardFoundStart+0xbc>)
 8001d96:	f7ff fbdd 	bl	8001554 <choose>
 	if((suspend == 1) && (count == 1)){
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d1bb      	bne.n	8001d18 <CardFoundStart+0x10>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d1b8      	bne.n	8001d18 <CardFoundStart+0x10>
 		vTaskResume(HomeHandle);
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <CardFoundStart+0xc0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f009 ff74 	bl	800bc98 <vTaskResume>
 		ranonce = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
 		count = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 		vTaskSuspend(NULL);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f009 fec5 	bl	800bb48 <vTaskSuspend>
  {
 8001dbe:	e7ab      	b.n	8001d18 <CardFoundStart+0x10>
 8001dc0:	20000810 	.word	0x20000810
 8001dc4:	0800ef58 	.word	0x0800ef58
 8001dc8:	20000808 	.word	0x20000808

08001dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dde:	f000 faa7 	bl	8002330 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40000c00 	.word	0x40000c00

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <Error_Handler+0x8>
	...

08001dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_MspInit+0x54>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_MspInit+0x54>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_MspInit+0x54>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_MspInit+0x54>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_MspInit+0x54>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_MspInit+0x54>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	210f      	movs	r1, #15
 8001e3e:	f06f 0001 	mvn.w	r0, #1
 8001e42:	f000 fb71 	bl	8002528 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_I2C_MspInit+0x84>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12b      	bne.n	8001ece <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e96:	2312      	movs	r3, #18
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <HAL_I2C_MspInit+0x8c>)
 8001eae:	f000 fb65 	bl	800257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40005400 	.word	0x40005400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020400 	.word	0x40020400

08001ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	; 0x30
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a32      	ldr	r2, [pc, #200]	; (8001fcc <HAL_SPI_MspInit+0xe8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a30      	ldr	r2, [pc, #192]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a29      	ldr	r2, [pc, #164]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f3e:	23a0      	movs	r3, #160	; 0xa0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	481e      	ldr	r0, [pc, #120]	; (8001fd4 <HAL_SPI_MspInit+0xf0>)
 8001f5a:	f000 fb0f 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f5e:	e031      	b.n	8001fc4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_SPI_MspInit+0xf4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12c      	bne.n	8001fc4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001fa2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4807      	ldr	r0, [pc, #28]	; (8001fdc <HAL_SPI_MspInit+0xf8>)
 8001fc0:	f000 fadc 	bl	800257c <HAL_GPIO_Init>
}
 8001fc4:	bf00      	nop
 8001fc6:	3730      	adds	r7, #48	; 0x30
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40013000 	.word	0x40013000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40003800 	.word	0x40003800
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_TIM_Base_MspInit+0x64>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_TIM_Base_MspInit+0x64>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_TIM_Base_MspInit+0x64>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800200e:	e012      	b.n	8002036 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_TIM_Base_MspInit+0x68>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10d      	bne.n	8002036 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_TIM_Base_MspInit+0x64>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_TIM_Base_MspInit+0x64>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_TIM_Base_MspInit+0x64>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40000400 	.word	0x40000400

0800204c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d11d      	bne.n	80020aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_TIM_MspPostInit+0x68>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_TIM_MspPostInit+0x68>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_TIM_MspPostInit+0x68>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800208a:	2304      	movs	r3, #4
 800208c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4619      	mov	r1, r3
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <HAL_TIM_MspPostInit+0x6c>)
 80020a6:	f000 fa69 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000

080020bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	; 0x38
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_InitTick+0xe4>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a32      	ldr	r2, [pc, #200]	; (80021a0 <HAL_InitTick+0xe4>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_InitTick+0xe4>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e8:	f107 0210 	add.w	r2, r7, #16
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fab6 	bl	8005664 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002102:	f003 fa9b 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8002106:	6378      	str	r0, [r7, #52]	; 0x34
 8002108:	e004      	b.n	8002114 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800210a:	f003 fa97 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 800210e:	4603      	mov	r3, r0
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <HAL_InitTick+0xe8>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	0c9b      	lsrs	r3, r3, #18
 800211e:	3b01      	subs	r3, #1
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_InitTick+0xec>)
 8002124:	4a21      	ldr	r2, [pc, #132]	; (80021ac <HAL_InitTick+0xf0>)
 8002126:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <HAL_InitTick+0xec>)
 800212a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800212e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_InitTick+0xec>)
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_InitTick+0xec>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_InitTick+0xec>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_InitTick+0xec>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002148:	4817      	ldr	r0, [pc, #92]	; (80021a8 <HAL_InitTick+0xec>)
 800214a:	f003 feef 	bl	8005f2c <HAL_TIM_Base_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002154:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002158:	2b00      	cmp	r3, #0
 800215a:	d11b      	bne.n	8002194 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800215c:	4812      	ldr	r0, [pc, #72]	; (80021a8 <HAL_InitTick+0xec>)
 800215e:	f003 ffb7 	bl	80060d0 <HAL_TIM_Base_Start_IT>
 8002162:	4603      	mov	r3, r0
 8002164:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002168:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002170:	2032      	movs	r0, #50	; 0x32
 8002172:	f000 f9f5 	bl	8002560 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d808      	bhi.n	800218e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	2032      	movs	r0, #50	; 0x32
 8002182:	f000 f9d1 	bl	8002528 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_InitTick+0xf4>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e002      	b.n	8002194 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002194:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002198:	4618      	mov	r0, r3
 800219a:	3738      	adds	r7, #56	; 0x38
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	431bde83 	.word	0x431bde83
 80021a8:	20000814 	.word	0x20000814
 80021ac:	40000c00 	.word	0x40000c00
 80021b0:	200004ec 	.word	0x200004ec

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <NMI_Handler+0x4>

080021ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <MemManage_Handler+0x4>

080021c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <TIM5_IRQHandler+0x10>)
 80021e6:	f004 f943 	bl	8006470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000814 	.word	0x20000814

080021f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <OTG_FS_IRQHandler+0x10>)
 80021fa:	f001 fc84 	bl	8003b06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200064b4 	.word	0x200064b4

08002208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <_sbrk+0x5c>)
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <_sbrk+0x60>)
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <_sbrk+0x64>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <_sbrk+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002238:	f00b ff22 	bl	800e080 <__errno>
 800223c:	4603      	mov	r3, r0
 800223e:	220c      	movs	r2, #12
 8002240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	e009      	b.n	800225c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <_sbrk+0x64>)
 8002258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20010000 	.word	0x20010000
 8002268:	00000400 	.word	0x00000400
 800226c:	2000085c 	.word	0x2000085c
 8002270:	20006bf0 	.word	0x20006bf0

08002274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <SystemInit+0x20>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <SystemInit+0x20>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800229c:	480d      	ldr	r0, [pc, #52]	; (80022d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800229e:	490e      	ldr	r1, [pc, #56]	; (80022d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b4:	4c0b      	ldr	r4, [pc, #44]	; (80022e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022c2:	f7ff ffd7 	bl	8002274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c6:	f00b fee1 	bl	800e08c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ca:	f7ff f991 	bl	80015f0 <main>
  bx  lr    
 80022ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	2000064c 	.word	0x2000064c
  ldr r2, =_sidata
 80022dc:	0800efdc 	.word	0x0800efdc
  ldr r2, =_sbss
 80022e0:	2000064c 	.word	0x2000064c
  ldr r4, =_ebss
 80022e4:	20006bf0 	.word	0x20006bf0

080022e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_Init+0x40>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_Init+0x40>)
 8002302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_Init+0x40>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 f8fc 	bl	8002512 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231a:	200f      	movs	r0, #15
 800231c:	f7ff fece 	bl	80020bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002320:	f7ff fd6c 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	200004f0 	.word	0x200004f0
 8002354:	20000860 	.word	0x20000860

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000860 	.word	0x20000860

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff ffee 	bl	8002358 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffde 	bl	8002358 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200004f0 	.word	0x200004f0

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff4c 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253a:	f7ff ff61 	bl	8002400 <__NVIC_GetPriorityGrouping>
 800253e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	6978      	ldr	r0, [r7, #20]
 8002546:	f7ff ffb1 	bl	80024ac <NVIC_EncodePriority>
 800254a:	4602      	mov	r2, r0
 800254c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff80 	bl	8002458 <__NVIC_SetPriority>
}
 8002558:	bf00      	nop
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff54 	bl	800241c <__NVIC_EnableIRQ>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e159      	b.n	800284c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f040 8148 	bne.w	8002846 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d005      	beq.n	80025ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d130      	bne.n	8002630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 0201 	and.w	r2, r3, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b03      	cmp	r3, #3
 800263a:	d017      	beq.n	800266c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d123      	bne.n	80026c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	08da      	lsrs	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3208      	adds	r2, #8
 80026ba:	69b9      	ldr	r1, [r7, #24]
 80026bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a2 	beq.w	8002846 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b57      	ldr	r3, [pc, #348]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a56      	ldr	r2, [pc, #344]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 800270c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b54      	ldr	r3, [pc, #336]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271e:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_GPIO_Init+0x2ec>)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a49      	ldr	r2, [pc, #292]	; (800286c <HAL_GPIO_Init+0x2f0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d019      	beq.n	800277e <HAL_GPIO_Init+0x202>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a48      	ldr	r2, [pc, #288]	; (8002870 <HAL_GPIO_Init+0x2f4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x1fe>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a47      	ldr	r2, [pc, #284]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x1fa>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a46      	ldr	r2, [pc, #280]	; (8002878 <HAL_GPIO_Init+0x2fc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x1f6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a45      	ldr	r2, [pc, #276]	; (800287c <HAL_GPIO_Init+0x300>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x1f2>
 800276a:	2304      	movs	r3, #4
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x204>
 800276e:	2307      	movs	r3, #7
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x204>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x204>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x204>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x204>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	; (8002868 <HAL_GPIO_Init+0x2ec>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <HAL_GPIO_Init+0x304>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a2f      	ldr	r2, [pc, #188]	; (8002880 <HAL_GPIO_Init+0x304>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_GPIO_Init+0x304>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a24      	ldr	r2, [pc, #144]	; (8002880 <HAL_GPIO_Init+0x304>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f2:	4b23      	ldr	r3, [pc, #140]	; (8002880 <HAL_GPIO_Init+0x304>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002816:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_GPIO_Init+0x304>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <HAL_GPIO_Init+0x304>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002840:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <HAL_GPIO_Init+0x304>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f aea2 	bls.w	8002598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40013c00 	.word	0x40013c00

08002884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e001      	b.n	80028a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d0:	e003      	b.n	80028da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	041a      	lsls	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e12b      	b.n	8002b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff faa0 	bl	8001e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800294a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800294c:	f002 fe76 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8002950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a81      	ldr	r2, [pc, #516]	; (8002b5c <HAL_I2C_Init+0x274>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d807      	bhi.n	800296c <HAL_I2C_Init+0x84>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a80      	ldr	r2, [pc, #512]	; (8002b60 <HAL_I2C_Init+0x278>)
 8002960:	4293      	cmp	r3, r2
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e006      	b.n	800297a <HAL_I2C_Init+0x92>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a7d      	ldr	r2, [pc, #500]	; (8002b64 <HAL_I2C_Init+0x27c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	bf94      	ite	ls
 8002974:	2301      	movls	r3, #1
 8002976:	2300      	movhi	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0e7      	b.n	8002b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a78      	ldr	r2, [pc, #480]	; (8002b68 <HAL_I2C_Init+0x280>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <HAL_I2C_Init+0x274>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d802      	bhi.n	80029bc <HAL_I2C_Init+0xd4>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	e009      	b.n	80029d0 <HAL_I2C_Init+0xe8>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	4a69      	ldr	r2, [pc, #420]	; (8002b6c <HAL_I2C_Init+0x284>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	3301      	adds	r3, #1
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	495c      	ldr	r1, [pc, #368]	; (8002b5c <HAL_I2C_Init+0x274>)
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d819      	bhi.n	8002a24 <HAL_I2C_Init+0x13c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e59      	subs	r1, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fe:	1c59      	adds	r1, r3, #1
 8002a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a04:	400b      	ands	r3, r1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_I2C_Init+0x138>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e59      	subs	r1, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1e:	e051      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e04f      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <HAL_I2C_Init+0x168>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e012      	b.n	8002a76 <HAL_I2C_Init+0x18e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x196>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e022      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <HAL_I2C_Init+0x1bc>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e58      	subs	r0, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	440b      	add	r3, r1
 8002a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa2:	e00f      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	6809      	ldr	r1, [r1, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6911      	ldr	r1, [r2, #16]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	000186a0 	.word	0x000186a0
 8002b60:	001e847f 	.word	0x001e847f
 8002b64:	003d08ff 	.word	0x003d08ff
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	10624dd3 	.word	0x10624dd3

08002b70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	460b      	mov	r3, r1
 8002b84:	813b      	strh	r3, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b8a:	f7ff fbe5 	bl	8002358 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	f040 80d9 	bne.w	8002d50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2319      	movs	r3, #25
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	496d      	ldr	r1, [pc, #436]	; (8002d5c <HAL_I2C_Mem_Write+0x1ec>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fc7f 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0cc      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Mem_Write+0x56>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0c5      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d007      	beq.n	8002bec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a4d      	ldr	r2, [pc, #308]	; (8002d60 <HAL_I2C_Mem_Write+0x1f0>)
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c2e:	88f8      	ldrh	r0, [r7, #6]
 8002c30:	893a      	ldrh	r2, [r7, #8]
 8002c32:	8979      	ldrh	r1, [r7, #10]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fab6 	bl	80031b0 <I2C_RequestMemoryWrite>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d052      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e081      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fd00 	bl	8003658 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d107      	bne.n	8002c76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d017      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1aa      	bne.n	8002c4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fcec 	bl	80036da <I2C_WaitOnBTFFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d107      	bne.n	8002d20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e016      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	00100002 	.word	0x00100002
 8002d60:	ffff0000 	.word	0xffff0000

08002d64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	; 0x30
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d7e:	f7ff faeb 	bl	8002358 <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	f040 8208 	bne.w	80031a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2319      	movs	r3, #25
 8002d98:	2201      	movs	r2, #1
 8002d9a:	497b      	ldr	r1, [pc, #492]	; (8002f88 <HAL_I2C_Mem_Read+0x224>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fb85 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	e1fb      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_I2C_Mem_Read+0x56>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e1f4      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d007      	beq.n	8002de0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2222      	movs	r2, #34	; 0x22
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a5b      	ldr	r2, [pc, #364]	; (8002f8c <HAL_I2C_Mem_Read+0x228>)
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e22:	88f8      	ldrh	r0, [r7, #6]
 8002e24:	893a      	ldrh	r2, [r7, #8]
 8002e26:	8979      	ldrh	r1, [r7, #10]
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4603      	mov	r3, r0
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fa52 	bl	80032dc <I2C_RequestMemoryRead>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1b0      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	623b      	str	r3, [r7, #32]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e184      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d11b      	bne.n	8002eb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e164      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	e144      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f08:	e138      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	f200 80f1 	bhi.w	80030f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d123      	bne.n	8002f64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fc1b 	bl	800375c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e139      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f62:	e10b      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d14e      	bne.n	800300a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	2200      	movs	r2, #0
 8002f74:	4906      	ldr	r1, [pc, #24]	; (8002f90 <HAL_I2C_Mem_Read+0x22c>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fa98 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e10e      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
 8002f86:	bf00      	nop
 8002f88:	00100002 	.word	0x00100002
 8002f8c:	ffff0000 	.word	0xffff0000
 8002f90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003008:	e0b8      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	2200      	movs	r2, #0
 8003012:	4966      	ldr	r1, [pc, #408]	; (80031ac <HAL_I2C_Mem_Read+0x448>)
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 fa49 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0bf      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	2200      	movs	r2, #0
 800306e:	494f      	ldr	r1, [pc, #316]	; (80031ac <HAL_I2C_Mem_Read+0x448>)
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fa1b 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e091      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030f4:	e042      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fb2e 	bl	800375c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e04c      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b04      	cmp	r3, #4
 8003148:	d118      	bne.n	800317c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f aec2 	bne.w	8002f0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	00010004 	.word	0x00010004

080031b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	460b      	mov	r3, r1
 80031c4:	813b      	strh	r3, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f960 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003200:	d103      	bne.n	800320a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e05f      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800321c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	492d      	ldr	r1, [pc, #180]	; (80032d8 <I2C_RequestMemoryWrite+0x128>)
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f998 	bl	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04c      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa02 	bl	8003658 <I2C_WaitOnTXEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b04      	cmp	r3, #4
 8003260:	d107      	bne.n	8003272 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003270:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e02b      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	e021      	b.n	80032cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003288:	893b      	ldrh	r3, [r7, #8]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	b29b      	uxth	r3, r3
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	6a39      	ldr	r1, [r7, #32]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f9dc 	bl	8003658 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d107      	bne.n	80032be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e005      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c2:	893b      	ldrh	r3, [r7, #8]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	817b      	strh	r3, [r7, #10]
 80032ee:	460b      	mov	r3, r1
 80032f0:	813b      	strh	r3, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003304:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2200      	movs	r2, #0
 800331e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f8c2 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333c:	d103      	bne.n	8003346 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0aa      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	6a3a      	ldr	r2, [r7, #32]
 800335e:	4952      	ldr	r1, [pc, #328]	; (80034a8 <I2C_RequestMemoryRead+0x1cc>)
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f8fa 	bl	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e097      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	6a39      	ldr	r1, [r7, #32]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f964 	bl	8003658 <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b04      	cmp	r3, #4
 800339c:	d107      	bne.n	80033ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e076      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b8:	893b      	ldrh	r3, [r7, #8]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	e021      	b.n	8003408 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033c4:	893b      	ldrh	r3, [r7, #8]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f93e 	bl	8003658 <I2C_WaitOnTXEFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d107      	bne.n	80033fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e050      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033fe:	893b      	ldrh	r3, [r7, #8]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	6a39      	ldr	r1, [r7, #32]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f923 	bl	8003658 <I2C_WaitOnTXEFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	2b04      	cmp	r3, #4
 800341e:	d107      	bne.n	8003430 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e035      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003442:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2200      	movs	r2, #0
 800344c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f82b 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346a:	d103      	bne.n	8003474 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e013      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003478:	897b      	ldrh	r3, [r7, #10]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	4906      	ldr	r1, [pc, #24]	; (80034a8 <I2C_RequestMemoryRead+0x1cc>)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f863 	bl	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	00010002 	.word	0x00010002

080034ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034bc:	e025      	b.n	800350a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d021      	beq.n	800350a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fe ff47 	bl	8002358 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e023      	b.n	8003552 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10d      	bne.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4013      	ands	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf0c      	ite	eq
 8003526:	2301      	moveq	r3, #1
 8003528:	2300      	movne	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	e00c      	b.n	800354a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d0b6      	beq.n	80034be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003568:	e051      	b.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003578:	d123      	bne.n	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003588:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003592:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e046      	b.n	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d021      	beq.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fe fec5 	bl	8002358 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e020      	b.n	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10c      	bne.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4013      	ands	r3, r2
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf14      	ite	ne
 800362a:	2301      	movne	r3, #1
 800362c:	2300      	moveq	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e00b      	b.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	43da      	mvns	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d18d      	bne.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003664:	e02d      	b.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f8ce 	bl	8003808 <I2C_IsAcknowledgeFailed>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e02d      	b.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d021      	beq.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7fe fe6b 	bl	8002358 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d116      	bne.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e007      	b.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d1ca      	bne.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e6:	e02d      	b.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f88d 	bl	8003808 <I2C_IsAcknowledgeFailed>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e02d      	b.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d021      	beq.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003700:	f7fe fe2a 	bl	8002358 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d116      	bne.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e007      	b.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b04      	cmp	r3, #4
 8003750:	d1ca      	bne.n	80036e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003768:	e042      	b.n	80037f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d119      	bne.n	80037ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0210 	mvn.w	r2, #16
 8003780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e029      	b.n	8003800 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ac:	f7fe fdd4 	bl	8002358 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d302      	bcc.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d116      	bne.n	80037f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e007      	b.n	8003800 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d1b5      	bne.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381e:	d11b      	bne.n	8003858 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003828:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f043 0204 	orr.w	r2, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003868:	b08f      	sub	sp, #60	; 0x3c
 800386a:	af0a      	add	r7, sp, #40	; 0x28
 800386c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e10f      	b.n	8003a98 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f00a f8ea 	bl	800da6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f003 fcf7 	bl	80072aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	687e      	ldr	r6, [r7, #4]
 80038c4:	466d      	mov	r5, sp
 80038c6:	f106 0410 	add.w	r4, r6, #16
 80038ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80038da:	1d33      	adds	r3, r6, #4
 80038dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	f003 fbce 	bl	8007080 <USB_CoreInit>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0d0      	b.n	8003a98 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f003 fce5 	bl	80072cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	e04a      	b.n	800399e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	333d      	adds	r3, #61	; 0x3d
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	333c      	adds	r3, #60	; 0x3c
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	b298      	uxth	r0, r3
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	3344      	adds	r3, #68	; 0x44
 8003944:	4602      	mov	r2, r0
 8003946:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3340      	adds	r3, #64	; 0x40
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3348      	adds	r3, #72	; 0x48
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	334c      	adds	r3, #76	; 0x4c
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	3354      	adds	r3, #84	; 0x54
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	3301      	adds	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3af      	bcc.n	8003908 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e044      	b.n	8003a38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	3301      	adds	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d3b5      	bcc.n	80039ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	687e      	ldr	r6, [r7, #4]
 8003a4a:	466d      	mov	r5, sp
 8003a4c:	f106 0410 	add.w	r4, r6, #16
 8003a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a60:	1d33      	adds	r3, r6, #4
 8003a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	f003 fc7d 	bl	8007364 <USB_DevInit>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e00d      	b.n	8003a98 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f004 fdcc 	bl	800862e <USB_DevDisconnect>

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_PCD_Start+0x1c>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e020      	b.n	8003afe <HAL_PCD_Start+0x5e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d109      	bne.n	8003ae0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d005      	beq.n	8003ae0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 fbcf 	bl	8007288 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 fd7c 	bl	80085ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b06:	b590      	push	{r4, r7, lr}
 8003b08:	b08d      	sub	sp, #52	; 0x34
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f004 fe3a 	bl	8008796 <USB_GetMode>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 848a 	bne.w	800443e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f004 fd9e 	bl	8008670 <USB_ReadInterrupts>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8480 	beq.w	800443c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 fd8b 	bl	8008670 <USB_ReadInterrupts>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d107      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f002 0202 	and.w	r2, r2, #2
 8003b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fd79 	bl	8008670 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d161      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0210 	bic.w	r2, r2, #16
 8003b96:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	f003 020f 	and.w	r2, r3, #15
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	0c5b      	lsrs	r3, r3, #17
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d124      	bne.n	8003c0e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d035      	beq.n	8003c3c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	6a38      	ldr	r0, [r7, #32]
 8003be4:	f004 fbb0 	bl	8008348 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bf4:	441a      	add	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c06:	441a      	add	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	621a      	str	r2, [r3, #32]
 8003c0c:	e016      	b.n	8003c3c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	0c5b      	lsrs	r3, r3, #17
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d110      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c20:	2208      	movs	r2, #8
 8003c22:	4619      	mov	r1, r3
 8003c24:	6a38      	ldr	r0, [r7, #32]
 8003c26:	f004 fb8f 	bl	8008348 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	6a1a      	ldr	r2, [r3, #32]
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c36:	441a      	add	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0210 	orr.w	r2, r2, #16
 8003c4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 fd0d 	bl	8008670 <USB_ReadInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c60:	f040 80a7 	bne.w	8003db2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f004 fd12 	bl	8008696 <USB_ReadDevAllOutEpInterrupt>
 8003c72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c74:	e099      	b.n	8003daa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 808e 	beq.w	8003d9e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f004 fd36 	bl	80086fe <USB_ReadDevOutEPInterrupt>
 8003c92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003caa:	461a      	mov	r2, r3
 8003cac:	2301      	movs	r3, #1
 8003cae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fec2 	bl	8004a3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00c      	beq.n	8003cdc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 ff98 	bl	8004c0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d030      	beq.n	8003d64 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d109      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d20:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	78db      	ldrb	r3, [r3, #3]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d108      	bne.n	8003d52 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f009 ff89 	bl	800dc64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2302      	movs	r3, #2
 8003d62:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2320      	movs	r3, #32
 8003d7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d96:	461a      	mov	r2, r3
 8003d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	3301      	adds	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f47f af62 	bne.w	8003c76 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 fc5a 	bl	8008670 <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dc6:	f040 80db 	bne.w	8003f80 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f004 fc7b 	bl	80086ca <USB_ReadDevAllInEpInterrupt>
 8003dd4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003dda:	e0cd      	b.n	8003f78 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80c2 	beq.w	8003f6c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 fca1 	bl	800873a <USB_ReadDevInEPInterrupt>
 8003df8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d057      	beq.n	8003eb4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69f9      	ldr	r1, [r7, #28]
 8003e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e24:	4013      	ands	r3, r2
 8003e26:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	461a      	mov	r2, r3
 8003e36:	2301      	movs	r3, #1
 8003e38:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d132      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	334c      	adds	r3, #76	; 0x4c
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4403      	add	r3, r0
 8003e62:	3348      	adds	r3, #72	; 0x48
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4419      	add	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4403      	add	r3, r0
 8003e76:	334c      	adds	r3, #76	; 0x4c
 8003e78:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d113      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x3a2>
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3354      	adds	r3, #84	; 0x54
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d108      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	f004 fca8 	bl	80087f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f009 fe5d 	bl	800db6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2308      	movs	r3, #8
 8003ece:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2310      	movs	r3, #16
 8003eea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	461a      	mov	r2, r3
 8003f04:	2340      	movs	r3, #64	; 0x40
 8003f06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d023      	beq.n	8003f5a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f14:	6a38      	ldr	r0, [r7, #32]
 8003f16:	f003 fb89 	bl	800762c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3338      	adds	r3, #56	; 0x38
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	78db      	ldrb	r3, [r3, #3]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d108      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f009 fea0 	bl	800dc88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	461a      	mov	r2, r3
 8003f56:	2302      	movs	r3, #2
 8003f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fcdb 	bl	8004922 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	3301      	adds	r3, #1
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f47f af2e 	bne.w	8003ddc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f004 fb73 	bl	8008670 <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f94:	d122      	bne.n	8003fdc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d108      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fec2 	bl	8004d48 <HAL_PCDEx_LPM_Callback>
 8003fc4:	e002      	b.n	8003fcc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f009 fe3e 	bl	800dc48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f004 fb45 	bl	8008670 <USB_ReadInterrupts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff0:	d112      	bne.n	8004018 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d102      	bne.n	8004008 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f009 fdfa 	bl	800dbfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004016:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f004 fb27 	bl	8008670 <USB_ReadInterrupts>
 8004022:	4603      	mov	r3, r0
 8004024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402c:	f040 80b7 	bne.w	800419e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2110      	movs	r1, #16
 800404a:	4618      	mov	r0, r3
 800404c:	f003 faee 	bl	800762c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004054:	e046      	b.n	80040e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	461a      	mov	r2, r3
 8004064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004068:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	440a      	add	r2, r1
 8004080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004088:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	461a      	mov	r2, r3
 8004098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800409c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	3301      	adds	r3, #1
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d3b3      	bcc.n	8004056 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004100:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800411a:	f043 030b 	orr.w	r3, r3, #11
 800411e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004130:	f043 030b 	orr.w	r3, r3, #11
 8004134:	6453      	str	r3, [r2, #68]	; 0x44
 8004136:	e015      	b.n	8004164 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004146:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800414a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800414e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415e:	f043 030b 	orr.w	r3, r3, #11
 8004162:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004172:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004176:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004188:	461a      	mov	r2, r3
 800418a:	f004 fb35 	bl	80087f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800419c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f004 fa64 	bl	8008670 <USB_ReadInterrupts>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b2:	d124      	bne.n	80041fe <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f004 fafa 	bl	80087b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f003 faaf 	bl	8007726 <USB_GetDevSpeed>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681c      	ldr	r4, [r3, #0]
 80041d4:	f001 fa26 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 80041d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	4620      	mov	r0, r4
 80041e4:	f002 ffae 	bl	8007144 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f009 fce8 	bl	800dbbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f004 fa34 	bl	8008670 <USB_ReadInterrupts>
 8004208:	4603      	mov	r3, r0
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b08      	cmp	r3, #8
 8004210:	d10a      	bne.n	8004228 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f009 fcc5 	bl	800dba2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f002 0208 	and.w	r2, r2, #8
 8004226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f004 fa1f 	bl	8008670 <USB_ReadInterrupts>
 8004232:	4603      	mov	r3, r0
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	d122      	bne.n	8004282 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004248:	2301      	movs	r3, #1
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
 800424c:	e014      	b.n	8004278 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	b2db      	uxtb	r3, r3
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb27 	bl	80048c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	3301      	adds	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427e:	429a      	cmp	r2, r3
 8004280:	d3e5      	bcc.n	800424e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f004 f9f2 	bl	8008670 <USB_ReadInterrupts>
 800428c:	4603      	mov	r3, r0
 800428e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004296:	d13b      	bne.n	8004310 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
 800429c:	e02b      	b.n	80042f6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3340      	adds	r3, #64	; 0x40
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d115      	bne.n	80042f0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80042c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da12      	bge.n	80042f0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	333f      	adds	r3, #63	; 0x3f
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fae8 	bl	80048c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	3301      	adds	r3, #1
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d3ce      	bcc.n	800429e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800430e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f004 f9ab 	bl	8008670 <USB_ReadInterrupts>
 800431a:	4603      	mov	r3, r0
 800431c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004324:	d155      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004326:	2301      	movs	r3, #1
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	e045      	b.n	80043b8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d12e      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004354:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004356:	2b00      	cmp	r3, #0
 8004358:	da2b      	bge.n	80043b2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004366:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800436a:	429a      	cmp	r2, r3
 800436c:	d121      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ae:	6053      	str	r3, [r2, #4]
            break;
 80043b0:	e007      	b.n	80043c2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	3301      	adds	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	429a      	cmp	r2, r3
 80043c0:	d3b4      	bcc.n	800432c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80043d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 f94a 	bl	8008670 <USB_ReadInterrupts>
 80043dc:	4603      	mov	r3, r0
 80043de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d10a      	bne.n	80043fe <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f009 fc5f 	bl	800dcac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f004 f934 	bl	8008670 <USB_ReadInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b04      	cmp	r3, #4
 8004410:	d115      	bne.n	800443e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f009 fc4f 	bl	800dcc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	e000      	b.n	800443e <HAL_PCD_IRQHandler+0x938>
      return;
 800443c:	bf00      	nop
    }
  }
}
 800443e:	3734      	adds	r7, #52	; 0x34
 8004440:	46bd      	mov	sp, r7
 8004442:	bd90      	pop	{r4, r7, pc}

08004444 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_PCD_SetAddress+0x1a>
 800445a:	2302      	movs	r3, #2
 800445c:	e013      	b.n	8004486 <HAL_PCD_SetAddress+0x42>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f004 f892 	bl	80085a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	4608      	mov	r0, r1
 8004498:	4611      	mov	r1, r2
 800449a:	461a      	mov	r2, r3
 800449c:	4603      	mov	r3, r0
 800449e:	70fb      	strb	r3, [r7, #3]
 80044a0:	460b      	mov	r3, r1
 80044a2:	803b      	strh	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da0f      	bge.n	80044d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 020f 	and.w	r2, r3, #15
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	3338      	adds	r3, #56	; 0x38
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4413      	add	r3, r2
 80044c8:	3304      	adds	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	705a      	strb	r2, [r3, #1]
 80044d2:	e00f      	b.n	80044f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004500:	883a      	ldrh	r2, [r7, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	78ba      	ldrb	r2, [r7, #2]
 800450a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800451e:	78bb      	ldrb	r3, [r7, #2]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d102      	bne.n	800452a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_PCD_EP_Open+0xaa>
 8004534:	2302      	movs	r3, #2
 8004536:	e00e      	b.n	8004556 <HAL_PCD_EP_Open+0xc8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68f9      	ldr	r1, [r7, #12]
 8004546:	4618      	mov	r0, r3
 8004548:	f003 f912 	bl	8007770 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004554:	7afb      	ldrb	r3, [r7, #11]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800456a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	da0f      	bge.n	8004592 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	3338      	adds	r3, #56	; 0x38
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	3304      	adds	r3, #4
 8004588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	705a      	strb	r2, [r3, #1]
 8004590:	e00f      	b.n	80045b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	f003 020f 	and.w	r2, r3, #15
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4413      	add	r3, r2
 80045a8:	3304      	adds	r3, #4
 80045aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_PCD_EP_Close+0x6e>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e00e      	b.n	80045ea <HAL_PCD_EP_Close+0x8c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	4618      	mov	r0, r3
 80045dc:	f003 f950 	bl	8007880 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
 80045fe:	460b      	mov	r3, r1
 8004600:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004602:	7afb      	ldrb	r3, [r7, #11]
 8004604:	f003 020f 	and.w	r2, r3, #15
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2200      	movs	r2, #0
 800462c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2200      	movs	r2, #0
 8004632:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004634:	7afb      	ldrb	r3, [r7, #11]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	b2da      	uxtb	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d102      	bne.n	800464e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	6979      	ldr	r1, [r7, #20]
 8004666:	f003 fc2f 	bl	8007ec8 <USB_EP0StartXfer>
 800466a:	e008      	b.n	800467e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	f003 f9dd 	bl	8007a38 <USB_EPStartXfer>
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80046aa:	681b      	ldr	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	460b      	mov	r3, r1
 80046c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c8:	7afb      	ldrb	r3, [r7, #11]
 80046ca:	f003 020f 	and.w	r2, r3, #15
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	3338      	adds	r3, #56	; 0x38
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	3304      	adds	r3, #4
 80046de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2201      	movs	r2, #1
 80046f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046f8:	7afb      	ldrb	r3, [r7, #11]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004712:	7afb      	ldrb	r3, [r7, #11]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	6979      	ldr	r1, [r7, #20]
 800472a:	f003 fbcd 	bl	8007ec8 <USB_EP0StartXfer>
 800472e:	e008      	b.n	8004742 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	6979      	ldr	r1, [r7, #20]
 800473e:	f003 f97b 	bl	8007a38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 020f 	and.w	r2, r3, #15
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d901      	bls.n	800476a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e050      	b.n	800480c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800476a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800476e:	2b00      	cmp	r3, #0
 8004770:	da0f      	bge.n	8004792 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	f003 020f 	and.w	r2, r3, #15
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	3338      	adds	r3, #56	; 0x38
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	3304      	adds	r3, #4
 8004788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	705a      	strb	r2, [r3, #1]
 8004790:	e00d      	b.n	80047ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004792:	78fa      	ldrb	r2, [r7, #3]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	3304      	adds	r3, #4
 80047a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_PCD_EP_SetStall+0x82>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e01e      	b.n	800480c <HAL_PCD_EP_SetStall+0xc0>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	4618      	mov	r0, r3
 80047de:	f003 fe0b 	bl	80083f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	b2d9      	uxtb	r1, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047fc:	461a      	mov	r2, r3
 80047fe:	f003 fffb 	bl	80087f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	f003 020f 	and.w	r2, r3, #15
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d901      	bls.n	8004832 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e042      	b.n	80048b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004832:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004836:	2b00      	cmp	r3, #0
 8004838:	da0f      	bge.n	800485a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	3338      	adds	r3, #56	; 0x38
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	3304      	adds	r3, #4
 8004850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	705a      	strb	r2, [r3, #1]
 8004858:	e00f      	b.n	800487a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	f003 020f 	and.w	r2, r3, #15
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4413      	add	r3, r2
 8004870:	3304      	adds	r3, #4
 8004872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_PCD_EP_ClrStall+0x86>
 8004896:	2302      	movs	r3, #2
 8004898:	e00e      	b.n	80048b8 <HAL_PCD_EP_ClrStall+0xa4>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68f9      	ldr	r1, [r7, #12]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f003 fe13 	bl	80084d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	da0c      	bge.n	80048ee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	f003 020f 	and.w	r2, r3, #15
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	3338      	adds	r3, #56	; 0x38
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	3304      	adds	r3, #4
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e00c      	b.n	8004908 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	3304      	adds	r3, #4
 8004906:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	4618      	mov	r0, r3
 8004910:	f003 fc32 	bl	8008178 <USB_EPStopXfer>
 8004914:	4603      	mov	r3, r0
 8004916:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004918:	7afb      	ldrb	r3, [r7, #11]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b08a      	sub	sp, #40	; 0x28
 8004926:	af02      	add	r7, sp, #8
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	3338      	adds	r3, #56	; 0x38
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	3304      	adds	r3, #4
 8004948:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	429a      	cmp	r2, r3
 8004954:	d901      	bls.n	800495a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06c      	b.n	8004a34 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	429a      	cmp	r2, r3
 800496e:	d902      	bls.n	8004976 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3303      	adds	r3, #3
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800497e:	e02b      	b.n	80049d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	429a      	cmp	r2, r3
 8004994:	d902      	bls.n	800499c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3303      	adds	r3, #3
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6919      	ldr	r1, [r3, #16]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	4603      	mov	r3, r0
 80049ba:	6978      	ldr	r0, [r7, #20]
 80049bc:	f003 fc86 	bl	80082cc <USB_WritePacket>

    ep->xfer_buff  += len;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	441a      	add	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d809      	bhi.n	8004a02 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1a      	ldr	r2, [r3, #32]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d203      	bcs.n	8004a02 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1be      	bne.n	8004980 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d811      	bhi.n	8004a32 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	2201      	movs	r2, #1
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	6939      	ldr	r1, [r7, #16]
 8004a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a2e:	4013      	ands	r3, r2
 8004a30:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	333c      	adds	r3, #60	; 0x3c
 8004a54:	3304      	adds	r3, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d17b      	bne.n	8004b6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4a61      	ldr	r2, [pc, #388]	; (8004c04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	f240 80b9 	bls.w	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80b3 	beq.w	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa4:	6093      	str	r3, [r2, #8]
 8004aa6:	e0a7      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	6093      	str	r3, [r2, #8]
 8004ac4:	e098      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f040 8093 	bne.w	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4a4b      	ldr	r2, [pc, #300]	; (8004c04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d90f      	bls.n	8004afa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	6093      	str	r3, [r2, #8]
 8004af8:	e07e      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	0159      	lsls	r1, r3, #5
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d114      	bne.n	8004b5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b44:	461a      	mov	r2, r3
 8004b46:	2101      	movs	r1, #1
 8004b48:	f003 fe56 	bl	80087f8 <USB_EP0_OutStart>
 8004b4c:	e006      	b.n	8004b5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	441a      	add	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f008 ffe8 	bl	800db38 <HAL_PCD_DataOutStageCallback>
 8004b68:	e046      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d124      	bne.n	8004bbc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8e:	6093      	str	r3, [r2, #8]
 8004b90:	e032      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2320      	movs	r3, #32
 8004bac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f008 ffbf 	bl	800db38 <HAL_PCD_DataOutStageCallback>
 8004bba:	e01d      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d114      	bne.n	8004bec <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004be4:	461a      	mov	r2, r3
 8004be6:	2100      	movs	r1, #0
 8004be8:	f003 fe06 	bl	80087f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f008 ffa0 	bl	800db38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	4f54300a 	.word	0x4f54300a
 8004c08:	4f54310a 	.word	0x4f54310a

08004c0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	333c      	adds	r3, #60	; 0x3c
 8004c24:	3304      	adds	r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d90e      	bls.n	8004c60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f008 ff57 	bl	800db14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d90c      	bls.n	8004c88 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d108      	bne.n	8004c88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c80:	461a      	mov	r2, r3
 8004c82:	2101      	movs	r1, #1
 8004c84:	f003 fdb8 	bl	80087f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	4f54300a 	.word	0x4f54300a

08004c98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cb6:	883b      	ldrh	r3, [r7, #0]
 8004cb8:	0419      	lsls	r1, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc4:	e028      	b.n	8004d18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e00d      	b.n	8004cf6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	3340      	adds	r3, #64	; 0x40
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d3ec      	bcc.n	8004cda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d00:	883b      	ldrh	r3, [r7, #0]
 8004d02:	0418      	lsls	r0, r3, #16
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	4302      	orrs	r2, r0
 8004d10:	3340      	adds	r3, #64	; 0x40
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e267      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d075      	beq.n	8004e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7e:	4b88      	ldr	r3, [pc, #544]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d00c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d112      	bne.n	8004dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d96:	4b82      	ldr	r3, [pc, #520]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da2:	d10b      	bne.n	8004dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	4b7e      	ldr	r3, [pc, #504]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d05b      	beq.n	8004e68 <HAL_RCC_OscConfig+0x108>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d157      	bne.n	8004e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e242      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d106      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x74>
 8004dc6:	4b76      	ldr	r3, [pc, #472]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a75      	ldr	r2, [pc, #468]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e01d      	b.n	8004e10 <HAL_RCC_OscConfig+0xb0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCC_OscConfig+0x98>
 8004dde:	4b70      	ldr	r3, [pc, #448]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6f      	ldr	r2, [pc, #444]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	4b6d      	ldr	r3, [pc, #436]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6c      	ldr	r2, [pc, #432]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e00b      	b.n	8004e10 <HAL_RCC_OscConfig+0xb0>
 8004df8:	4b69      	ldr	r3, [pc, #420]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a68      	ldr	r2, [pc, #416]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	4b66      	ldr	r3, [pc, #408]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a65      	ldr	r2, [pc, #404]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d013      	beq.n	8004e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fd fa9e 	bl	8002358 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fd fa9a 	bl	8002358 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	; 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e207      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	4b5b      	ldr	r3, [pc, #364]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0xc0>
 8004e3e:	e014      	b.n	8004e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fa8a 	bl	8002358 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fd fa86 	bl	8002358 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	; 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e1f3      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5a:	4b51      	ldr	r3, [pc, #324]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0xe8>
 8004e66:	e000      	b.n	8004e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d063      	beq.n	8004f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e76:	4b4a      	ldr	r3, [pc, #296]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e82:	4b47      	ldr	r3, [pc, #284]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d11c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8e:	4b44      	ldr	r3, [pc, #272]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d116      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9a:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x152>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e1c7      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb2:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4937      	ldr	r1, [pc, #220]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec6:	e03a      	b.n	8004f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d020      	beq.n	8004f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed0:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <HAL_RCC_OscConfig+0x244>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fd fa3f 	bl	8002358 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ede:	f7fd fa3b 	bl	8002358 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e1a8      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efc:	4b28      	ldr	r3, [pc, #160]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4925      	ldr	r1, [pc, #148]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
 8004f10:	e015      	b.n	8004f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f12:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <HAL_RCC_OscConfig+0x244>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd fa1e 	bl	8002358 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f20:	f7fd fa1a 	bl	8002358 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e187      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f32:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d036      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <HAL_RCC_OscConfig+0x248>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fd f9fe 	bl	8002358 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f60:	f7fd f9fa 	bl	8002358 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e167      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0x200>
 8004f7e:	e01b      	b.n	8004fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_RCC_OscConfig+0x248>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fd f9e7 	bl	8002358 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8c:	e00e      	b.n	8004fac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8e:	f7fd f9e3 	bl	8002358 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d907      	bls.n	8004fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e150      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	42470000 	.word	0x42470000
 8004fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fac:	4b88      	ldr	r3, [pc, #544]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ea      	bne.n	8004f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8097 	beq.w	80050f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fca:	4b81      	ldr	r3, [pc, #516]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	4b7d      	ldr	r3, [pc, #500]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	4a7c      	ldr	r2, [pc, #496]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe6:	4b7a      	ldr	r3, [pc, #488]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff6:	4b77      	ldr	r3, [pc, #476]	; (80051d4 <HAL_RCC_OscConfig+0x474>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d118      	bne.n	8005034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005002:	4b74      	ldr	r3, [pc, #464]	; (80051d4 <HAL_RCC_OscConfig+0x474>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a73      	ldr	r2, [pc, #460]	; (80051d4 <HAL_RCC_OscConfig+0x474>)
 8005008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500e:	f7fd f9a3 	bl	8002358 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005016:	f7fd f99f 	bl	8002358 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e10c      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	4b6a      	ldr	r3, [pc, #424]	; (80051d4 <HAL_RCC_OscConfig+0x474>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d106      	bne.n	800504a <HAL_RCC_OscConfig+0x2ea>
 800503c:	4b64      	ldr	r3, [pc, #400]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	4a63      	ldr	r2, [pc, #396]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6713      	str	r3, [r2, #112]	; 0x70
 8005048:	e01c      	b.n	8005084 <HAL_RCC_OscConfig+0x324>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b05      	cmp	r3, #5
 8005050:	d10c      	bne.n	800506c <HAL_RCC_OscConfig+0x30c>
 8005052:	4b5f      	ldr	r3, [pc, #380]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	4a5e      	ldr	r2, [pc, #376]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005058:	f043 0304 	orr.w	r3, r3, #4
 800505c:	6713      	str	r3, [r2, #112]	; 0x70
 800505e:	4b5c      	ldr	r3, [pc, #368]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	4a5b      	ldr	r2, [pc, #364]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	6713      	str	r3, [r2, #112]	; 0x70
 800506a:	e00b      	b.n	8005084 <HAL_RCC_OscConfig+0x324>
 800506c:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	4a57      	ldr	r2, [pc, #348]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	6713      	str	r3, [r2, #112]	; 0x70
 8005078:	4b55      	ldr	r3, [pc, #340]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	4a54      	ldr	r2, [pc, #336]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 800507e:	f023 0304 	bic.w	r3, r3, #4
 8005082:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d015      	beq.n	80050b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508c:	f7fd f964 	bl	8002358 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005092:	e00a      	b.n	80050aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005094:	f7fd f960 	bl	8002358 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e0cb      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050aa:	4b49      	ldr	r3, [pc, #292]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0ee      	beq.n	8005094 <HAL_RCC_OscConfig+0x334>
 80050b6:	e014      	b.n	80050e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b8:	f7fd f94e 	bl	8002358 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c0:	f7fd f94a 	bl	8002358 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e0b5      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d6:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ee      	bne.n	80050c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d105      	bne.n	80050f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e8:	4b39      	ldr	r3, [pc, #228]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	4a38      	ldr	r2, [pc, #224]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 80050ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80a1 	beq.w	8005240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050fe:	4b34      	ldr	r3, [pc, #208]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b08      	cmp	r3, #8
 8005108:	d05c      	beq.n	80051c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d141      	bne.n	8005196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005112:	4b31      	ldr	r3, [pc, #196]	; (80051d8 <HAL_RCC_OscConfig+0x478>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fd f91e 	bl	8002358 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005120:	f7fd f91a 	bl	8002358 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e087      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005132:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	3b01      	subs	r3, #1
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	491b      	ldr	r1, [pc, #108]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005164:	4313      	orrs	r3, r2
 8005166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_RCC_OscConfig+0x478>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fd f8f3 	bl	8002358 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005176:	f7fd f8ef 	bl	8002358 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e05c      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005188:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x416>
 8005194:	e054      	b.n	8005240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <HAL_RCC_OscConfig+0x478>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519c:	f7fd f8dc 	bl	8002358 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a4:	f7fd f8d8 	bl	8002358 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e045      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <HAL_RCC_OscConfig+0x470>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x444>
 80051c2:	e03d      	b.n	8005240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e038      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40007000 	.word	0x40007000
 80051d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <HAL_RCC_OscConfig+0x4ec>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d028      	beq.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d121      	bne.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d11a      	bne.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800520c:	4013      	ands	r3, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005214:	4293      	cmp	r3, r2
 8005216:	d111      	bne.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	3b01      	subs	r3, #1
 8005226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005228:	429a      	cmp	r2, r3
 800522a:	d107      	bne.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005238:	429a      	cmp	r2, r3
 800523a:	d001      	beq.n	8005240 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800

08005250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0cc      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005264:	4b68      	ldr	r3, [pc, #416]	; (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d90c      	bls.n	800528c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b65      	ldr	r3, [pc, #404]	; (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b63      	ldr	r3, [pc, #396]	; (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0b8      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d020      	beq.n	80052da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a4:	4b59      	ldr	r3, [pc, #356]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4a58      	ldr	r2, [pc, #352]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052bc:	4b53      	ldr	r3, [pc, #332]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4a52      	ldr	r2, [pc, #328]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c8:	4b50      	ldr	r3, [pc, #320]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	494d      	ldr	r1, [pc, #308]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d044      	beq.n	8005370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ee:	4b47      	ldr	r3, [pc, #284]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d119      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e07f      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d003      	beq.n	800530e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800530a:	2b03      	cmp	r3, #3
 800530c:	d107      	bne.n	800531e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530e:	4b3f      	ldr	r3, [pc, #252]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e06f      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531e:	4b3b      	ldr	r3, [pc, #236]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e067      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532e:	4b37      	ldr	r3, [pc, #220]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f023 0203 	bic.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4934      	ldr	r1, [pc, #208]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	4313      	orrs	r3, r2
 800533e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005340:	f7fd f80a 	bl	8002358 <HAL_GetTick>
 8005344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005346:	e00a      	b.n	800535e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005348:	f7fd f806 	bl	8002358 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	; 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e04f      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	4b2b      	ldr	r3, [pc, #172]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 020c 	and.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	429a      	cmp	r2, r3
 800536e:	d1eb      	bne.n	8005348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005370:	4b25      	ldr	r3, [pc, #148]	; (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d20c      	bcs.n	8005398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b22      	ldr	r3, [pc, #136]	; (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b20      	ldr	r3, [pc, #128]	; (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e032      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a4:	4b19      	ldr	r3, [pc, #100]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4916      	ldr	r1, [pc, #88]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	490e      	ldr	r1, [pc, #56]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053d6:	f000 f821 	bl	800541c <HAL_RCC_GetSysClockFreq>
 80053da:	4602      	mov	r2, r0
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	490a      	ldr	r1, [pc, #40]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 80053e8:	5ccb      	ldrb	r3, [r1, r3]
 80053ea:	fa22 f303 	lsr.w	r3, r2, r3
 80053ee:	4a09      	ldr	r2, [pc, #36]	; (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80053f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <HAL_RCC_ClockConfig+0x1c8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fc fe60 	bl	80020bc <HAL_InitTick>

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40023c00 	.word	0x40023c00
 800540c:	40023800 	.word	0x40023800
 8005410:	0800ef80 	.word	0x0800ef80
 8005414:	200004e8 	.word	0x200004e8
 8005418:	200004ec 	.word	0x200004ec

0800541c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800541c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005420:	b094      	sub	sp, #80	; 0x50
 8005422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	647b      	str	r3, [r7, #68]	; 0x44
 8005428:	2300      	movs	r3, #0
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800542c:	2300      	movs	r3, #0
 800542e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005434:	4b79      	ldr	r3, [pc, #484]	; (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b08      	cmp	r3, #8
 800543e:	d00d      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0x40>
 8005440:	2b08      	cmp	r3, #8
 8005442:	f200 80e1 	bhi.w	8005608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x34>
 800544a:	2b04      	cmp	r3, #4
 800544c:	d003      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x3a>
 800544e:	e0db      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005450:	4b73      	ldr	r3, [pc, #460]	; (8005620 <HAL_RCC_GetSysClockFreq+0x204>)
 8005452:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005454:	e0db      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005456:	4b72      	ldr	r3, [pc, #456]	; (8005620 <HAL_RCC_GetSysClockFreq+0x204>)
 8005458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800545a:	e0d8      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800545c:	4b6f      	ldr	r3, [pc, #444]	; (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005464:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005466:	4b6d      	ldr	r3, [pc, #436]	; (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d063      	beq.n	800553a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005472:	4b6a      	ldr	r3, [pc, #424]	; (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	2200      	movs	r2, #0
 800547a:	63bb      	str	r3, [r7, #56]	; 0x38
 800547c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005484:	633b      	str	r3, [r7, #48]	; 0x30
 8005486:	2300      	movs	r3, #0
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
 800548a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800548e:	4622      	mov	r2, r4
 8005490:	462b      	mov	r3, r5
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f04f 0100 	mov.w	r1, #0
 800549a:	0159      	lsls	r1, r3, #5
 800549c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054a0:	0150      	lsls	r0, r2, #5
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4621      	mov	r1, r4
 80054a8:	1a51      	subs	r1, r2, r1
 80054aa:	6139      	str	r1, [r7, #16]
 80054ac:	4629      	mov	r1, r5
 80054ae:	eb63 0301 	sbc.w	r3, r3, r1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054c0:	4659      	mov	r1, fp
 80054c2:	018b      	lsls	r3, r1, #6
 80054c4:	4651      	mov	r1, sl
 80054c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ca:	4651      	mov	r1, sl
 80054cc:	018a      	lsls	r2, r1, #6
 80054ce:	4651      	mov	r1, sl
 80054d0:	ebb2 0801 	subs.w	r8, r2, r1
 80054d4:	4659      	mov	r1, fp
 80054d6:	eb63 0901 	sbc.w	r9, r3, r1
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ee:	4690      	mov	r8, r2
 80054f0:	4699      	mov	r9, r3
 80054f2:	4623      	mov	r3, r4
 80054f4:	eb18 0303 	adds.w	r3, r8, r3
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	462b      	mov	r3, r5
 80054fc:	eb49 0303 	adc.w	r3, r9, r3
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800550e:	4629      	mov	r1, r5
 8005510:	028b      	lsls	r3, r1, #10
 8005512:	4621      	mov	r1, r4
 8005514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005518:	4621      	mov	r1, r4
 800551a:	028a      	lsls	r2, r1, #10
 800551c:	4610      	mov	r0, r2
 800551e:	4619      	mov	r1, r3
 8005520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005522:	2200      	movs	r2, #0
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
 8005526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800552c:	f7fa feb0 	bl	8000290 <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4613      	mov	r3, r2
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005538:	e058      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553a:	4b38      	ldr	r3, [pc, #224]	; (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	2200      	movs	r2, #0
 8005542:	4618      	mov	r0, r3
 8005544:	4611      	mov	r1, r2
 8005546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800554a:	623b      	str	r3, [r7, #32]
 800554c:	2300      	movs	r3, #0
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
 8005550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005554:	4642      	mov	r2, r8
 8005556:	464b      	mov	r3, r9
 8005558:	f04f 0000 	mov.w	r0, #0
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	0159      	lsls	r1, r3, #5
 8005562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005566:	0150      	lsls	r0, r2, #5
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4641      	mov	r1, r8
 800556e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005572:	4649      	mov	r1, r9
 8005574:	eb63 0b01 	sbc.w	fp, r3, r1
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800558c:	ebb2 040a 	subs.w	r4, r2, sl
 8005590:	eb63 050b 	sbc.w	r5, r3, fp
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	00eb      	lsls	r3, r5, #3
 800559e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055a2:	00e2      	lsls	r2, r4, #3
 80055a4:	4614      	mov	r4, r2
 80055a6:	461d      	mov	r5, r3
 80055a8:	4643      	mov	r3, r8
 80055aa:	18e3      	adds	r3, r4, r3
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	464b      	mov	r3, r9
 80055b0:	eb45 0303 	adc.w	r3, r5, r3
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055c2:	4629      	mov	r1, r5
 80055c4:	028b      	lsls	r3, r1, #10
 80055c6:	4621      	mov	r1, r4
 80055c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055cc:	4621      	mov	r1, r4
 80055ce:	028a      	lsls	r2, r1, #10
 80055d0:	4610      	mov	r0, r2
 80055d2:	4619      	mov	r1, r3
 80055d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d6:	2200      	movs	r2, #0
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	61fa      	str	r2, [r7, #28]
 80055dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e0:	f7fa fe56 	bl	8000290 <__aeabi_uldivmod>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4613      	mov	r3, r2
 80055ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055ec:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	3301      	adds	r3, #1
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005606:	e002      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCC_GetSysClockFreq+0x204>)
 800560a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800560c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800560e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005610:	4618      	mov	r0, r3
 8005612:	3750      	adds	r7, #80	; 0x50
 8005614:	46bd      	mov	sp, r7
 8005616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800
 8005620:	00f42400 	.word	0x00f42400

08005624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005628:	4b03      	ldr	r3, [pc, #12]	; (8005638 <HAL_RCC_GetHCLKFreq+0x14>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	200004e8 	.word	0x200004e8

0800563c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005640:	f7ff fff0 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005644:	4602      	mov	r2, r0
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0a9b      	lsrs	r3, r3, #10
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4903      	ldr	r1, [pc, #12]	; (8005660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005652:	5ccb      	ldrb	r3, [r1, r3]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	0800ef90 	.word	0x0800ef90

08005664 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	220f      	movs	r2, #15
 8005672:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005674:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0203 	and.w	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <HAL_RCC_GetClockConfig+0x5c>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005698:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <HAL_RCC_GetClockConfig+0x5c>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <HAL_RCC_GetClockConfig+0x60>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0207 	and.w	r2, r3, #7
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	601a      	str	r2, [r3, #0]
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40023c00 	.word	0x40023c00

080056c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e07b      	b.n	80057d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d108      	bne.n	80056f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ea:	d009      	beq.n	8005700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	61da      	str	r2, [r3, #28]
 80056f2:	e005      	b.n	8005700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fc fbe2 	bl	8001ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005784:	ea42 0103 	orr.w	r1, r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	f003 0104 	and.w	r1, r3, #4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f003 0210 	and.w	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b088      	sub	sp, #32
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_SPI_Transmit+0x22>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e126      	b.n	8005a4a <HAL_SPI_Transmit+0x270>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005804:	f7fc fda8 	bl	8002358 <HAL_GetTick>
 8005808:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	d002      	beq.n	8005820 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800581a:	2302      	movs	r3, #2
 800581c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800581e:	e10b      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_SPI_Transmit+0x52>
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005830:	e102      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2203      	movs	r2, #3
 8005836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	d10f      	bne.n	800589a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d007      	beq.n	80058b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c0:	d14b      	bne.n	800595a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_Transmit+0xf6>
 80058ca:	8afb      	ldrh	r3, [r7, #22]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d13e      	bne.n	800594e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	881a      	ldrh	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	1c9a      	adds	r2, r3, #2
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058f4:	e02b      	b.n	800594e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b02      	cmp	r3, #2
 8005902:	d112      	bne.n	800592a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	881a      	ldrh	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	1c9a      	adds	r2, r3, #2
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	86da      	strh	r2, [r3, #54]	; 0x36
 8005928:	e011      	b.n	800594e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800592a:	f7fc fd15 	bl	8002358 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d803      	bhi.n	8005942 <HAL_SPI_Transmit+0x168>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d102      	bne.n	8005948 <HAL_SPI_Transmit+0x16e>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800594c:	e074      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1ce      	bne.n	80058f6 <HAL_SPI_Transmit+0x11c>
 8005958:	e04c      	b.n	80059f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_SPI_Transmit+0x18e>
 8005962:	8afb      	ldrh	r3, [r7, #22]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d140      	bne.n	80059ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800598e:	e02c      	b.n	80059ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d113      	bne.n	80059c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80059c4:	e011      	b.n	80059ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c6:	f7fc fcc7 	bl	8002358 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d803      	bhi.n	80059de <HAL_SPI_Transmit+0x204>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d102      	bne.n	80059e4 <HAL_SPI_Transmit+0x20a>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059e8:	e026      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1cd      	bne.n	8005990 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fa55 	bl	8005ea8 <SPI_EndRxTxTransaction>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e000      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b08c      	sub	sp, #48	; 0x30
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a60:	2301      	movs	r3, #1
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_SPI_TransmitReceive+0x26>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e18a      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x33c>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a80:	f7fc fc6a 	bl	8002358 <HAL_GetTick>
 8005a84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a96:	887b      	ldrh	r3, [r7, #2]
 8005a98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d00f      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x70>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa8:	d107      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x68>
 8005ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d003      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005aba:	2302      	movs	r3, #2
 8005abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ac0:	e15b      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x82>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x82>
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d103      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ada:	e14e      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d003      	beq.n	8005af0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2205      	movs	r2, #5
 8005aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	887a      	ldrh	r2, [r7, #2]
 8005b12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d007      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d178      	bne.n	8005c40 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0x10a>
 8005b56:	8b7b      	ldrh	r3, [r7, #26]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d166      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b80:	e053      	b.n	8005c2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x176>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d016      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x176>
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d113      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	881a      	ldrh	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	1c9a      	adds	r2, r3, #2
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d119      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x1b8>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d014      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	b292      	uxth	r2, r2
 8005bec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	1c9a      	adds	r2, r3, #2
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c06:	2301      	movs	r3, #1
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c0a:	f7fc fba5 	bl	8002358 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d807      	bhi.n	8005c2a <HAL_SPI_TransmitReceive+0x1d8>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d003      	beq.n	8005c2a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c28:	e0a7      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1a6      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x130>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1a1      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x130>
 8005c3e:	e07c      	b.n	8005d3a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_SPI_TransmitReceive+0x1fc>
 8005c48:	8b7b      	ldrh	r3, [r7, #26]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d16b      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c74:	e057      	b.n	8005d26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d11c      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x26c>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d017      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x26c>
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d114      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d119      	bne.n	8005d00 <HAL_SPI_TransmitReceive+0x2ae>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d014      	beq.n	8005d00 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d00:	f7fc fb2a 	bl	8002358 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d803      	bhi.n	8005d18 <HAL_SPI_TransmitReceive+0x2c6>
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d102      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x2cc>
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d24:	e029      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1a2      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x224>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d19d      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8b2 	bl	8005ea8 <SPI_EndRxTxTransaction>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d006      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d56:	e010      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10b      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	e000      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3730      	adds	r7, #48	; 0x30
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005da8:	f7fc fad6 	bl	8002358 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005db8:	f7fc face 	bl	8002358 <HAL_GetTick>
 8005dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dbe:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	015b      	lsls	r3, r3, #5
 8005dc4:	0d1b      	lsrs	r3, r3, #20
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dce:	e054      	b.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d050      	beq.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dd8:	f7fc fabe 	bl	8002358 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d902      	bls.n	8005dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d13d      	bne.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e06:	d111      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e10:	d004      	beq.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1a:	d107      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e34:	d10f      	bne.n	8005e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e017      	b.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d19b      	bne.n	8005dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200004e8 	.word	0x200004e8

08005ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	; (8005f24 <SPI_EndRxTxTransaction+0x7c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <SPI_EndRxTxTransaction+0x80>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	0d5b      	lsrs	r3, r3, #21
 8005ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d112      	bne.n	8005efa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2200      	movs	r2, #0
 8005edc:	2180      	movs	r1, #128	; 0x80
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff ff5a 	bl	8005d98 <SPI_WaitFlagStateUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d016      	beq.n	8005f18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e00f      	b.n	8005f1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b80      	cmp	r3, #128	; 0x80
 8005f12:	d0f2      	beq.n	8005efa <SPI_EndRxTxTransaction+0x52>
 8005f14:	e000      	b.n	8005f18 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f16:	bf00      	nop
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	200004e8 	.word	0x200004e8
 8005f28:	165e9f81 	.word	0x165e9f81

08005f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e041      	b.n	8005fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fc f844 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 fd3a 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d001      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e03c      	b.n	800605e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1e      	ldr	r2, [pc, #120]	; (800606c <HAL_TIM_Base_Start+0xa0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_TIM_Base_Start+0x5c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffe:	d013      	beq.n	8006028 <HAL_TIM_Base_Start+0x5c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <HAL_TIM_Base_Start+0xa4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_TIM_Base_Start+0x5c>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_TIM_Base_Start+0xa8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_TIM_Base_Start+0x5c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a17      	ldr	r2, [pc, #92]	; (8006078 <HAL_TIM_Base_Start+0xac>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_TIM_Base_Start+0x5c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a16      	ldr	r2, [pc, #88]	; (800607c <HAL_TIM_Base_Start+0xb0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d111      	bne.n	800604c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b06      	cmp	r3, #6
 8006038:	d010      	beq.n	800605c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604a:	e007      	b.n	800605c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40014000 	.word	0x40014000

08006080 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6a1a      	ldr	r2, [r3, #32]
 800608e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10f      	bne.n	80060b8 <HAL_TIM_Base_Stop+0x38>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6a1a      	ldr	r2, [r3, #32]
 800609e:	f240 4344 	movw	r3, #1092	; 0x444
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d107      	bne.n	80060b8 <HAL_TIM_Base_Stop+0x38>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d001      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e044      	b.n	8006172 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <HAL_TIM_Base_Start_IT+0xb0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d018      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d013      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1a      	ldr	r2, [pc, #104]	; (8006184 <HAL_TIM_Base_Start_IT+0xb4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00e      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a19      	ldr	r2, [pc, #100]	; (8006188 <HAL_TIM_Base_Start_IT+0xb8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a17      	ldr	r2, [pc, #92]	; (800618c <HAL_TIM_Base_Start_IT+0xbc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a16      	ldr	r2, [pc, #88]	; (8006190 <HAL_TIM_Base_Start_IT+0xc0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d111      	bne.n	8006160 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b06      	cmp	r3, #6
 800614c:	d010      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	e007      	b.n	8006170 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40010000 	.word	0x40010000
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	40014000 	.word	0x40014000

08006194 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e041      	b.n	800622a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f839 	bl	8006232 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f000 fc06 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
	...

08006248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d109      	bne.n	800626c <HAL_TIM_PWM_Start+0x24>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	bf14      	ite	ne
 8006264:	2301      	movne	r3, #1
 8006266:	2300      	moveq	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	e022      	b.n	80062b2 <HAL_TIM_PWM_Start+0x6a>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d109      	bne.n	8006286 <HAL_TIM_PWM_Start+0x3e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	bf14      	ite	ne
 800627e:	2301      	movne	r3, #1
 8006280:	2300      	moveq	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	e015      	b.n	80062b2 <HAL_TIM_PWM_Start+0x6a>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d109      	bne.n	80062a0 <HAL_TIM_PWM_Start+0x58>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	bf14      	ite	ne
 8006298:	2301      	movne	r3, #1
 800629a:	2300      	moveq	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e008      	b.n	80062b2 <HAL_TIM_PWM_Start+0x6a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	bf14      	ite	ne
 80062ac:	2301      	movne	r3, #1
 80062ae:	2300      	moveq	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e068      	b.n	800638c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <HAL_TIM_PWM_Start+0x82>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c8:	e013      	b.n	80062f2 <HAL_TIM_PWM_Start+0xaa>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d104      	bne.n	80062da <HAL_TIM_PWM_Start+0x92>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d8:	e00b      	b.n	80062f2 <HAL_TIM_PWM_Start+0xaa>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Start+0xa2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e8:	e003      	b.n	80062f2 <HAL_TIM_PWM_Start+0xaa>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2201      	movs	r2, #1
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fe18 	bl	8006f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a23      	ldr	r2, [pc, #140]	; (8006394 <HAL_TIM_PWM_Start+0x14c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d107      	bne.n	800631a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <HAL_TIM_PWM_Start+0x14c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d018      	beq.n	8006356 <HAL_TIM_PWM_Start+0x10e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632c:	d013      	beq.n	8006356 <HAL_TIM_PWM_Start+0x10e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a19      	ldr	r2, [pc, #100]	; (8006398 <HAL_TIM_PWM_Start+0x150>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIM_PWM_Start+0x10e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a17      	ldr	r2, [pc, #92]	; (800639c <HAL_TIM_PWM_Start+0x154>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIM_PWM_Start+0x10e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a16      	ldr	r2, [pc, #88]	; (80063a0 <HAL_TIM_PWM_Start+0x158>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIM_PWM_Start+0x10e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <HAL_TIM_PWM_Start+0x15c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d111      	bne.n	800637a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b06      	cmp	r3, #6
 8006366:	d010      	beq.n	800638a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006378:	e007      	b.n	800638a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0201 	orr.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40010000 	.word	0x40010000
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40014000 	.word	0x40014000

080063a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2200      	movs	r2, #0
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fdb8 	bl	8006f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a29      	ldr	r2, [pc, #164]	; (800646c <HAL_TIM_PWM_Stop+0xc4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d117      	bne.n	80063fa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10f      	bne.n	80063fa <HAL_TIM_PWM_Stop+0x52>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	f240 4344 	movw	r3, #1092	; 0x444
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d107      	bne.n	80063fa <HAL_TIM_PWM_Stop+0x52>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	f241 1311 	movw	r3, #4369	; 0x1111
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <HAL_TIM_PWM_Stop+0x82>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a1a      	ldr	r2, [r3, #32]
 8006410:	f240 4344 	movw	r3, #1092	; 0x444
 8006414:	4013      	ands	r3, r2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d107      	bne.n	800642a <HAL_TIM_PWM_Stop+0x82>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Stop+0x92>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006438:	e013      	b.n	8006462 <HAL_TIM_PWM_Stop+0xba>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b04      	cmp	r3, #4
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Stop+0xa2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006448:	e00b      	b.n	8006462 <HAL_TIM_PWM_Stop+0xba>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Stop+0xb2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006458:	e003      	b.n	8006462 <HAL_TIM_PWM_Stop+0xba>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40010000 	.word	0x40010000

08006470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b02      	cmp	r3, #2
 8006484:	d122      	bne.n	80064cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d11b      	bne.n	80064cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0202 	mvn.w	r2, #2
 800649c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa77 	bl	80069a6 <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa69 	bl	8006992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fa7a 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0204 	mvn.w	r2, #4
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2202      	movs	r2, #2
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa4d 	bl	80069a6 <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa3f 	bl	8006992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fa50 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b08      	cmp	r3, #8
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0208 	mvn.w	r2, #8
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2204      	movs	r2, #4
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa23 	bl	80069a6 <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa15 	bl	8006992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fa26 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b10      	cmp	r3, #16
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b10      	cmp	r3, #16
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0210 	mvn.w	r2, #16
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2208      	movs	r2, #8
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9f9 	bl	80069a6 <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f9eb 	bl	8006992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f9fc 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10e      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0201 	mvn.w	r2, #1
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fb fbec 	bl	8001dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d10e      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	2b80      	cmp	r3, #128	; 0x80
 800660e:	d107      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fd26 	bl	800706c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d10e      	bne.n	800664c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d107      	bne.n	800664c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9c1 	bl	80069ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b20      	cmp	r3, #32
 8006658:	d10e      	bne.n	8006678 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b20      	cmp	r3, #32
 8006666:	d107      	bne.n	8006678 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0220 	mvn.w	r2, #32
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fcf0 	bl	8007058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800669a:	2302      	movs	r3, #2
 800669c:	e0ae      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	f200 809f 	bhi.w	80067ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066e9 	.word	0x080066e9
 80066b8:	080067ed 	.word	0x080067ed
 80066bc:	080067ed 	.word	0x080067ed
 80066c0:	080067ed 	.word	0x080067ed
 80066c4:	08006729 	.word	0x08006729
 80066c8:	080067ed 	.word	0x080067ed
 80066cc:	080067ed 	.word	0x080067ed
 80066d0:	080067ed 	.word	0x080067ed
 80066d4:	0800676b 	.word	0x0800676b
 80066d8:	080067ed 	.word	0x080067ed
 80066dc:	080067ed 	.word	0x080067ed
 80066e0:	080067ed 	.word	0x080067ed
 80066e4:	080067ab 	.word	0x080067ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f9f8 	bl	8006ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0208 	orr.w	r2, r2, #8
 8006702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0204 	bic.w	r2, r2, #4
 8006712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6999      	ldr	r1, [r3, #24]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	619a      	str	r2, [r3, #24]
      break;
 8006726:	e064      	b.n	80067f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fa3e 	bl	8006bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6999      	ldr	r1, [r3, #24]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	021a      	lsls	r2, r3, #8
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	619a      	str	r2, [r3, #24]
      break;
 8006768:	e043      	b.n	80067f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fa89 	bl	8006c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0208 	orr.w	r2, r2, #8
 8006784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0204 	bic.w	r2, r2, #4
 8006794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69d9      	ldr	r1, [r3, #28]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	61da      	str	r2, [r3, #28]
      break;
 80067a8:	e023      	b.n	80067f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fad3 	bl	8006d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	021a      	lsls	r2, r3, #8
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	61da      	str	r2, [r3, #28]
      break;
 80067ea:	e002      	b.n	80067f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	75fb      	strb	r3, [r7, #23]
      break;
 80067f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIM_ConfigClockSource+0x1c>
 800681c:	2302      	movs	r3, #2
 800681e:	e0b4      	b.n	800698a <HAL_TIM_ConfigClockSource+0x186>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800683e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006858:	d03e      	beq.n	80068d8 <HAL_TIM_ConfigClockSource+0xd4>
 800685a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685e:	f200 8087 	bhi.w	8006970 <HAL_TIM_ConfigClockSource+0x16c>
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	f000 8086 	beq.w	8006976 <HAL_TIM_ConfigClockSource+0x172>
 800686a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686e:	d87f      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b70      	cmp	r3, #112	; 0x70
 8006872:	d01a      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0xa6>
 8006874:	2b70      	cmp	r3, #112	; 0x70
 8006876:	d87b      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b60      	cmp	r3, #96	; 0x60
 800687a:	d050      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x11a>
 800687c:	2b60      	cmp	r3, #96	; 0x60
 800687e:	d877      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b50      	cmp	r3, #80	; 0x50
 8006882:	d03c      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0xfa>
 8006884:	2b50      	cmp	r3, #80	; 0x50
 8006886:	d873      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d058      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x13a>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	d86f      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x16c>
 8006890:	2b30      	cmp	r3, #48	; 0x30
 8006892:	d064      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x15a>
 8006894:	2b30      	cmp	r3, #48	; 0x30
 8006896:	d86b      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x16c>
 8006898:	2b20      	cmp	r3, #32
 800689a:	d060      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x15a>
 800689c:	2b20      	cmp	r3, #32
 800689e:	d867      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x16c>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d05c      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x15a>
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d05a      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x15a>
 80068a8:	e062      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6899      	ldr	r1, [r3, #8]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f000 fb19 	bl	8006ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	609a      	str	r2, [r3, #8]
      break;
 80068d6:	e04f      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	6899      	ldr	r1, [r3, #8]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f000 fb02 	bl	8006ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068fa:	609a      	str	r2, [r3, #8]
      break;
 80068fc:	e03c      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6859      	ldr	r1, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	461a      	mov	r2, r3
 800690c:	f000 fa76 	bl	8006dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2150      	movs	r1, #80	; 0x50
 8006916:	4618      	mov	r0, r3
 8006918:	f000 facf 	bl	8006eba <TIM_ITRx_SetConfig>
      break;
 800691c:	e02c      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6859      	ldr	r1, [r3, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	461a      	mov	r2, r3
 800692c:	f000 fa95 	bl	8006e5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2160      	movs	r1, #96	; 0x60
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fabf 	bl	8006eba <TIM_ITRx_SetConfig>
      break;
 800693c:	e01c      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6859      	ldr	r1, [r3, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	461a      	mov	r2, r3
 800694c:	f000 fa56 	bl	8006dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2140      	movs	r1, #64	; 0x40
 8006956:	4618      	mov	r0, r3
 8006958:	f000 faaf 	bl	8006eba <TIM_ITRx_SetConfig>
      break;
 800695c:	e00c      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f000 faa6 	bl	8006eba <TIM_ITRx_SetConfig>
      break;
 800696e:	e003      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      break;
 8006974:	e000      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a34      	ldr	r2, [pc, #208]	; (8006ac8 <TIM_Base_SetConfig+0xe4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00f      	beq.n	8006a1c <TIM_Base_SetConfig+0x38>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d00b      	beq.n	8006a1c <TIM_Base_SetConfig+0x38>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a31      	ldr	r2, [pc, #196]	; (8006acc <TIM_Base_SetConfig+0xe8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_Base_SetConfig+0x38>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a30      	ldr	r2, [pc, #192]	; (8006ad0 <TIM_Base_SetConfig+0xec>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_Base_SetConfig+0x38>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a2f      	ldr	r2, [pc, #188]	; (8006ad4 <TIM_Base_SetConfig+0xf0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a25      	ldr	r2, [pc, #148]	; (8006ac8 <TIM_Base_SetConfig+0xe4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01b      	beq.n	8006a6e <TIM_Base_SetConfig+0x8a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d017      	beq.n	8006a6e <TIM_Base_SetConfig+0x8a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a22      	ldr	r2, [pc, #136]	; (8006acc <TIM_Base_SetConfig+0xe8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <TIM_Base_SetConfig+0x8a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <TIM_Base_SetConfig+0xec>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00f      	beq.n	8006a6e <TIM_Base_SetConfig+0x8a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a20      	ldr	r2, [pc, #128]	; (8006ad4 <TIM_Base_SetConfig+0xf0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00b      	beq.n	8006a6e <TIM_Base_SetConfig+0x8a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a1f      	ldr	r2, [pc, #124]	; (8006ad8 <TIM_Base_SetConfig+0xf4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d007      	beq.n	8006a6e <TIM_Base_SetConfig+0x8a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a1e      	ldr	r2, [pc, #120]	; (8006adc <TIM_Base_SetConfig+0xf8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_Base_SetConfig+0x8a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a1d      	ldr	r2, [pc, #116]	; (8006ae0 <TIM_Base_SetConfig+0xfc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d108      	bne.n	8006a80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a08      	ldr	r2, [pc, #32]	; (8006ac8 <TIM_Base_SetConfig+0xe4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d103      	bne.n	8006ab4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	615a      	str	r2, [r3, #20]
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40014400 	.word	0x40014400
 8006ae0:	40014800 	.word	0x40014800

08006ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 0302 	bic.w	r3, r3, #2
 8006b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a1c      	ldr	r2, [pc, #112]	; (8006bac <TIM_OC1_SetConfig+0xc8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10c      	bne.n	8006b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f023 0308 	bic.w	r3, r3, #8
 8006b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 0304 	bic.w	r3, r3, #4
 8006b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a13      	ldr	r2, [pc, #76]	; (8006bac <TIM_OC1_SetConfig+0xc8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d111      	bne.n	8006b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	621a      	str	r2, [r3, #32]
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	40010000 	.word	0x40010000

08006bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f023 0210 	bic.w	r2, r3, #16
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0320 	bic.w	r3, r3, #32
 8006bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a1e      	ldr	r2, [pc, #120]	; (8006c84 <TIM_OC2_SetConfig+0xd4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d10d      	bne.n	8006c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <TIM_OC2_SetConfig+0xd4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d113      	bne.n	8006c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000

08006c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0303 	bic.w	r3, r3, #3
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <TIM_OC3_SetConfig+0xd0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d10d      	bne.n	8006d02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <TIM_OC3_SetConfig+0xd0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d113      	bne.n	8006d32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	621a      	str	r2, [r3, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	40010000 	.word	0x40010000

08006d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	031b      	lsls	r3, r3, #12
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a10      	ldr	r2, [pc, #64]	; (8006df8 <TIM_OC4_SetConfig+0x9c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d109      	bne.n	8006dd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	019b      	lsls	r3, r3, #6
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	621a      	str	r2, [r3, #32]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40010000 	.word	0x40010000

08006dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0201 	bic.w	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f023 030a 	bic.w	r3, r3, #10
 8006e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b087      	sub	sp, #28
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f023 0210 	bic.w	r2, r3, #16
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	031b      	lsls	r3, r3, #12
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f043 0307 	orr.w	r3, r3, #7
 8006edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	609a      	str	r2, [r3, #8]
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	021a      	lsls	r2, r3, #8
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	609a      	str	r2, [r3, #8]
}
 8006f24:	bf00      	nop
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	2201      	movs	r2, #1
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a1a      	ldr	r2, [r3, #32]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	43db      	mvns	r3, r3
 8006f52:	401a      	ands	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	fa01 f303 	lsl.w	r3, r1, r3
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e050      	b.n	8007036 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1c      	ldr	r2, [pc, #112]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d018      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe0:	d013      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a18      	ldr	r2, [pc, #96]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00e      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a16      	ldr	r2, [pc, #88]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d009      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a15      	ldr	r2, [pc, #84]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d004      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a13      	ldr	r2, [pc, #76]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d10c      	bne.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	4313      	orrs	r3, r2
 800701a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40014000 	.word	0x40014000

08007058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007080:	b084      	sub	sp, #16
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	f107 001c 	add.w	r0, r7, #28
 800708e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2b01      	cmp	r3, #1
 8007096:	d122      	bne.n	80070de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80070ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d105      	bne.n	80070d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 fbee 	bl	80088b4 <USB_CoreReset>
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]
 80070dc:	e01a      	b.n	8007114 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fbe2 	bl	80088b4 <USB_CoreReset>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
 8007106:	e005      	b.n	8007114 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	2b01      	cmp	r3, #1
 8007118:	d10b      	bne.n	8007132 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f043 0206 	orr.w	r2, r3, #6
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800713e:	b004      	add	sp, #16
 8007140:	4770      	bx	lr
	...

08007144 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d165      	bne.n	8007224 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4a41      	ldr	r2, [pc, #260]	; (8007260 <USB_SetTurnaroundTime+0x11c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d906      	bls.n	800716e <USB_SetTurnaroundTime+0x2a>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4a40      	ldr	r2, [pc, #256]	; (8007264 <USB_SetTurnaroundTime+0x120>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d202      	bcs.n	800716e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007168:	230f      	movs	r3, #15
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	e062      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <USB_SetTurnaroundTime+0x120>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d306      	bcc.n	8007184 <USB_SetTurnaroundTime+0x40>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4a3b      	ldr	r2, [pc, #236]	; (8007268 <USB_SetTurnaroundTime+0x124>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d202      	bcs.n	8007184 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800717e:	230e      	movs	r3, #14
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	e057      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4a38      	ldr	r2, [pc, #224]	; (8007268 <USB_SetTurnaroundTime+0x124>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d306      	bcc.n	800719a <USB_SetTurnaroundTime+0x56>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4a37      	ldr	r2, [pc, #220]	; (800726c <USB_SetTurnaroundTime+0x128>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d202      	bcs.n	800719a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007194:	230d      	movs	r3, #13
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e04c      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	4a33      	ldr	r2, [pc, #204]	; (800726c <USB_SetTurnaroundTime+0x128>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d306      	bcc.n	80071b0 <USB_SetTurnaroundTime+0x6c>
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	4a32      	ldr	r2, [pc, #200]	; (8007270 <USB_SetTurnaroundTime+0x12c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d802      	bhi.n	80071b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80071aa:	230c      	movs	r3, #12
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	e041      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4a2f      	ldr	r2, [pc, #188]	; (8007270 <USB_SetTurnaroundTime+0x12c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d906      	bls.n	80071c6 <USB_SetTurnaroundTime+0x82>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4a2e      	ldr	r2, [pc, #184]	; (8007274 <USB_SetTurnaroundTime+0x130>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d802      	bhi.n	80071c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80071c0:	230b      	movs	r3, #11
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	e036      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	4a2a      	ldr	r2, [pc, #168]	; (8007274 <USB_SetTurnaroundTime+0x130>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d906      	bls.n	80071dc <USB_SetTurnaroundTime+0x98>
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	4a29      	ldr	r2, [pc, #164]	; (8007278 <USB_SetTurnaroundTime+0x134>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d802      	bhi.n	80071dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80071d6:	230a      	movs	r3, #10
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e02b      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4a26      	ldr	r2, [pc, #152]	; (8007278 <USB_SetTurnaroundTime+0x134>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d906      	bls.n	80071f2 <USB_SetTurnaroundTime+0xae>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4a25      	ldr	r2, [pc, #148]	; (800727c <USB_SetTurnaroundTime+0x138>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d202      	bcs.n	80071f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80071ec:	2309      	movs	r3, #9
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	e020      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4a21      	ldr	r2, [pc, #132]	; (800727c <USB_SetTurnaroundTime+0x138>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d306      	bcc.n	8007208 <USB_SetTurnaroundTime+0xc4>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	4a20      	ldr	r2, [pc, #128]	; (8007280 <USB_SetTurnaroundTime+0x13c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d802      	bhi.n	8007208 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007202:	2308      	movs	r3, #8
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	e015      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <USB_SetTurnaroundTime+0x13c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d906      	bls.n	800721e <USB_SetTurnaroundTime+0xda>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <USB_SetTurnaroundTime+0x140>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d202      	bcs.n	800721e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007218:	2307      	movs	r3, #7
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e00a      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800721e:	2306      	movs	r3, #6
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	e007      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800722a:	2309      	movs	r3, #9
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	e001      	b.n	8007234 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007230:	2309      	movs	r3, #9
 8007232:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	029b      	lsls	r3, r3, #10
 8007248:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800724c:	431a      	orrs	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	00d8acbf 	.word	0x00d8acbf
 8007264:	00e4e1c0 	.word	0x00e4e1c0
 8007268:	00f42400 	.word	0x00f42400
 800726c:	01067380 	.word	0x01067380
 8007270:	011a499f 	.word	0x011a499f
 8007274:	01312cff 	.word	0x01312cff
 8007278:	014ca43f 	.word	0x014ca43f
 800727c:	016e3600 	.word	0x016e3600
 8007280:	01a6ab1f 	.word	0x01a6ab1f
 8007284:	01e84800 	.word	0x01e84800

08007288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f043 0201 	orr.w	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f023 0201 	bic.w	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d115      	bne.n	800731a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072fa:	2001      	movs	r0, #1
 80072fc:	f7fb f838 	bl	8002370 <HAL_Delay>
      ms++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3301      	adds	r3, #1
 8007304:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 fa45 	bl	8008796 <USB_GetMode>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d01e      	beq.n	8007350 <USB_SetCurrentMode+0x84>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b31      	cmp	r3, #49	; 0x31
 8007316:	d9f0      	bls.n	80072fa <USB_SetCurrentMode+0x2e>
 8007318:	e01a      	b.n	8007350 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d115      	bne.n	800734c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800732c:	2001      	movs	r0, #1
 800732e:	f7fb f81f 	bl	8002370 <HAL_Delay>
      ms++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fa2c 	bl	8008796 <USB_GetMode>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <USB_SetCurrentMode+0x84>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b31      	cmp	r3, #49	; 0x31
 8007348:	d9f0      	bls.n	800732c <USB_SetCurrentMode+0x60>
 800734a:	e001      	b.n	8007350 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e005      	b.n	800735c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b32      	cmp	r3, #50	; 0x32
 8007354:	d101      	bne.n	800735a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007364:	b084      	sub	sp, #16
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	e009      	b.n	8007398 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	3340      	adds	r3, #64	; 0x40
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	2200      	movs	r2, #0
 8007390:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3301      	adds	r3, #1
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b0e      	cmp	r3, #14
 800739c:	d9f2      	bls.n	8007384 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800739e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11c      	bne.n	80073de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073b2:	f043 0302 	orr.w	r3, r3, #2
 80073b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38
 80073dc:	e00b      	b.n	80073f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073fc:	461a      	mov	r2, r3
 80073fe:	2300      	movs	r3, #0
 8007400:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007408:	4619      	mov	r1, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007410:	461a      	mov	r2, r3
 8007412:	680b      	ldr	r3, [r1, #0]
 8007414:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	2b01      	cmp	r3, #1
 800741a:	d10c      	bne.n	8007436 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d104      	bne.n	800742c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007422:	2100      	movs	r1, #0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f965 	bl	80076f4 <USB_SetDevSpeed>
 800742a:	e008      	b.n	800743e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800742c:	2101      	movs	r1, #1
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f960 	bl	80076f4 <USB_SetDevSpeed>
 8007434:	e003      	b.n	800743e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007436:	2103      	movs	r1, #3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f95b 	bl	80076f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800743e:	2110      	movs	r1, #16
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f8f3 	bl	800762c <USB_FlushTxFifo>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f91f 	bl	8007694 <USB_FlushRxFifo>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007466:	461a      	mov	r2, r3
 8007468:	2300      	movs	r3, #0
 800746a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007472:	461a      	mov	r2, r3
 8007474:	2300      	movs	r3, #0
 8007476:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747e:	461a      	mov	r2, r3
 8007480:	2300      	movs	r3, #0
 8007482:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]
 8007488:	e043      	b.n	8007512 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800749c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a0:	d118      	bne.n	80074d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b4:	461a      	mov	r2, r3
 80074b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	e013      	b.n	80074e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	461a      	mov	r2, r3
 80074cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	e008      	b.n	80074e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f2:	461a      	mov	r2, r3
 80074f4:	2300      	movs	r3, #0
 80074f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007504:	461a      	mov	r2, r3
 8007506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800750a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	3301      	adds	r3, #1
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	429a      	cmp	r2, r3
 8007518:	d3b7      	bcc.n	800748a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	e043      	b.n	80075a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007536:	d118      	bne.n	800756a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	461a      	mov	r2, r3
 800754c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	e013      	b.n	800757c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007560:	461a      	mov	r2, r3
 8007562:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e008      	b.n	800757c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007576:	461a      	mov	r2, r3
 8007578:	2300      	movs	r3, #0
 800757a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007588:	461a      	mov	r2, r3
 800758a:	2300      	movs	r3, #0
 800758c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759a:	461a      	mov	r2, r3
 800759c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	3301      	adds	r3, #1
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d3b7      	bcc.n	8007520 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f043 0210 	orr.w	r2, r3, #16
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <USB_DevInit+0x2c4>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	f043 0208 	orr.w	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d107      	bne.n	8007618 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007610:	f043 0304 	orr.w	r3, r3, #4
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007624:	b004      	add	sp, #16
 8007626:	4770      	bx	lr
 8007628:	803c3800 	.word	0x803c3800

0800762c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a13      	ldr	r2, [pc, #76]	; (8007690 <USB_FlushTxFifo+0x64>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d901      	bls.n	800764c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e01b      	b.n	8007684 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	daf2      	bge.n	800763a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	019b      	lsls	r3, r3, #6
 800765c:	f043 0220 	orr.w	r2, r3, #32
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3301      	adds	r3, #1
 8007668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <USB_FlushTxFifo+0x64>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e006      	b.n	8007684 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b20      	cmp	r3, #32
 8007680:	d0f0      	beq.n	8007664 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	00030d40 	.word	0x00030d40

08007694 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4a11      	ldr	r2, [pc, #68]	; (80076f0 <USB_FlushRxFifo+0x5c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d901      	bls.n	80076b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e018      	b.n	80076e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	daf2      	bge.n	80076a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2210      	movs	r2, #16
 80076c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4a08      	ldr	r2, [pc, #32]	; (80076f0 <USB_FlushRxFifo+0x5c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d901      	bls.n	80076d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e006      	b.n	80076e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d0f0      	beq.n	80076c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	00030d40 	.word	0x00030d40

080076f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007714:	4313      	orrs	r3, r2
 8007716:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0306 	and.w	r3, r3, #6
 800773e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d102      	bne.n	800774c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]
 800774a:	e00a      	b.n	8007762 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d002      	beq.n	8007758 <USB_GetDevSpeed+0x32>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b06      	cmp	r3, #6
 8007756:	d102      	bne.n	800775e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007758:	2302      	movs	r3, #2
 800775a:	75fb      	strb	r3, [r7, #23]
 800775c:	e001      	b.n	8007762 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800775e:	230f      	movs	r3, #15
 8007760:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
}
 8007764:	4618      	mov	r0, r3
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d13a      	bne.n	8007802 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	69da      	ldr	r2, [r3, #28]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	2101      	movs	r1, #1
 800779e:	fa01 f303 	lsl.w	r3, r1, r3
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	68f9      	ldr	r1, [r7, #12]
 80077a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077aa:	4313      	orrs	r3, r2
 80077ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d155      	bne.n	8007870 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	059b      	lsls	r3, r3, #22
 80077e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077e8:	4313      	orrs	r3, r2
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	e036      	b.n	8007870 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007808:	69da      	ldr	r2, [r3, #28]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	2101      	movs	r1, #1
 8007814:	fa01 f303 	lsl.w	r3, r1, r3
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	68f9      	ldr	r1, [r7, #12]
 800781c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007820:	4313      	orrs	r3, r2
 8007822:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d11a      	bne.n	8007870 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	791b      	ldrb	r3, [r3, #4]
 8007854:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007856:	430b      	orrs	r3, r1
 8007858:	4313      	orrs	r3, r2
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	0151      	lsls	r1, r2, #5
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	440a      	add	r2, r1
 8007862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800786e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	785b      	ldrb	r3, [r3, #1]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d161      	bne.n	8007960 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b2:	d11f      	bne.n	80078f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	0151      	lsls	r1, r2, #5
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	440a      	add	r2, r1
 80078ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	2101      	movs	r1, #1
 8007906:	fa01 f303 	lsl.w	r3, r1, r3
 800790a:	b29b      	uxth	r3, r3
 800790c:	43db      	mvns	r3, r3
 800790e:	68f9      	ldr	r1, [r7, #12]
 8007910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007914:	4013      	ands	r3, r2
 8007916:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791e:	69da      	ldr	r2, [r3, #28]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	2101      	movs	r1, #1
 800792a:	fa01 f303 	lsl.w	r3, r1, r3
 800792e:	b29b      	uxth	r3, r3
 8007930:	43db      	mvns	r3, r3
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007938:	4013      	ands	r3, r2
 800793a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	0159      	lsls	r1, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	440b      	add	r3, r1
 8007952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007956:	4619      	mov	r1, r3
 8007958:	4b35      	ldr	r3, [pc, #212]	; (8007a30 <USB_DeactivateEndpoint+0x1b0>)
 800795a:	4013      	ands	r3, r2
 800795c:	600b      	str	r3, [r1, #0]
 800795e:	e060      	b.n	8007a22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007976:	d11f      	bne.n	80079b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	440a      	add	r2, r1
 800798e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007996:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	2101      	movs	r1, #1
 80079ca:	fa01 f303 	lsl.w	r3, r1, r3
 80079ce:	041b      	lsls	r3, r3, #16
 80079d0:	43db      	mvns	r3, r3
 80079d2:	68f9      	ldr	r1, [r7, #12]
 80079d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079d8:	4013      	ands	r3, r2
 80079da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	2101      	movs	r1, #1
 80079ee:	fa01 f303 	lsl.w	r3, r1, r3
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	43db      	mvns	r3, r3
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079fc:	4013      	ands	r3, r2
 80079fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	0159      	lsls	r1, r3, #5
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	440b      	add	r3, r1
 8007a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <USB_DeactivateEndpoint+0x1b4>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	ec337800 	.word	0xec337800
 8007a34:	eff37800 	.word	0xeff37800

08007a38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	785b      	ldrb	r3, [r3, #1]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	f040 815c 	bne.w	8007d12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d132      	bne.n	8007ac8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	69fa      	ldr	r2, [r7, #28]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac0:	0cdb      	lsrs	r3, r3, #19
 8007ac2:	04db      	lsls	r3, r3, #19
 8007ac4:	6113      	str	r3, [r2, #16]
 8007ac6:	e074      	b.n	8007bb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae2:	0cdb      	lsrs	r3, r3, #19
 8007ae4:	04db      	lsls	r3, r3, #19
 8007ae6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6999      	ldr	r1, [r3, #24]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	440b      	add	r3, r1
 8007b24:	1e59      	subs	r1, r3, #1
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b30:	4b9d      	ldr	r3, [pc, #628]	; (8007da8 <USB_EPStartXfer+0x370>)
 8007b32:	400b      	ands	r3, r1
 8007b34:	69b9      	ldr	r1, [r7, #24]
 8007b36:	0148      	lsls	r0, r1, #5
 8007b38:	69f9      	ldr	r1, [r7, #28]
 8007b3a:	4401      	add	r1, r0
 8007b3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b40:	4313      	orrs	r3, r2
 8007b42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b5a:	69b9      	ldr	r1, [r7, #24]
 8007b5c:	0148      	lsls	r0, r1, #5
 8007b5e:	69f9      	ldr	r1, [r7, #28]
 8007b60:	4401      	add	r1, r0
 8007b62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b66:	4313      	orrs	r3, r2
 8007b68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	791b      	ldrb	r3, [r3, #4]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d11f      	bne.n	8007bb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	0151      	lsls	r1, r2, #5
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	440a      	add	r2, r1
 8007ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d14b      	bne.n	8007c50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	791b      	ldrb	r3, [r3, #4]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d128      	bne.n	8007c2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d110      	bne.n	8007c0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	e00f      	b.n	8007c2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	e133      	b.n	8007eb8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	791b      	ldrb	r3, [r3, #4]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d015      	beq.n	8007ca4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 811b 	beq.w	8007eb8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	2101      	movs	r1, #1
 8007c94:	fa01 f303 	lsl.w	r3, r1, r3
 8007c98:	69f9      	ldr	r1, [r7, #28]
 8007c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	634b      	str	r3, [r1, #52]	; 0x34
 8007ca2:	e109      	b.n	8007eb8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d110      	bne.n	8007cd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	e00f      	b.n	8007cf6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	0151      	lsls	r1, r2, #5
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	440a      	add	r2, r1
 8007cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cf4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6919      	ldr	r1, [r3, #16]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	b298      	uxth	r0, r3
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	4603      	mov	r3, r0
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fade 	bl	80082cc <USB_WritePacket>
 8007d10:	e0d2      	b.n	8007eb8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	0151      	lsls	r1, r2, #5
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	440a      	add	r2, r1
 8007d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d2c:	0cdb      	lsrs	r3, r3, #19
 8007d2e:	04db      	lsls	r3, r3, #19
 8007d30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d126      	bne.n	8007dac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d74:	69b9      	ldr	r1, [r7, #24]
 8007d76:	0148      	lsls	r0, r1, #5
 8007d78:	69f9      	ldr	r1, [r7, #28]
 8007d7a:	4401      	add	r1, r0
 8007d7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d80:	4313      	orrs	r3, r2
 8007d82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007da2:	6113      	str	r3, [r2, #16]
 8007da4:	e03a      	b.n	8007e1c <USB_EPStartXfer+0x3e4>
 8007da6:	bf00      	nop
 8007da8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	699a      	ldr	r2, [r3, #24]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	1e5a      	subs	r2, r3, #1
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	8afa      	ldrh	r2, [r7, #22]
 8007dc8:	fb03 f202 	mul.w	r2, r3, r2
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ddc:	691a      	ldr	r2, [r3, #16]
 8007dde:	8afb      	ldrh	r3, [r7, #22]
 8007de0:	04d9      	lsls	r1, r3, #19
 8007de2:	4b38      	ldr	r3, [pc, #224]	; (8007ec4 <USB_EPStartXfer+0x48c>)
 8007de4:	400b      	ands	r3, r1
 8007de6:	69b9      	ldr	r1, [r7, #24]
 8007de8:	0148      	lsls	r0, r1, #5
 8007dea:	69f9      	ldr	r1, [r7, #28]
 8007dec:	4401      	add	r1, r0
 8007dee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007df2:	4313      	orrs	r3, r2
 8007df4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e0c:	69b9      	ldr	r1, [r7, #24]
 8007e0e:	0148      	lsls	r0, r1, #5
 8007e10:	69f9      	ldr	r1, [r7, #28]
 8007e12:	4401      	add	r1, r0
 8007e14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d10d      	bne.n	8007e3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	6919      	ldr	r1, [r3, #16]
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	791b      	ldrb	r3, [r3, #4]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d128      	bne.n	8007e98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d110      	bne.n	8007e78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	0151      	lsls	r1, r2, #5
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	440a      	add	r2, r1
 8007e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e00f      	b.n	8007e98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	0151      	lsls	r1, r2, #5
 8007e8a:	69fa      	ldr	r2, [r7, #28]
 8007e8c:	440a      	add	r2, r1
 8007e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3720      	adds	r7, #32
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	1ff80000 	.word	0x1ff80000

08007ec8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	f040 80ce 	bne.w	8008086 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d132      	bne.n	8007f58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	0151      	lsls	r1, r2, #5
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	440a      	add	r2, r1
 8007f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f50:	0cdb      	lsrs	r3, r3, #19
 8007f52:	04db      	lsls	r3, r3, #19
 8007f54:	6113      	str	r3, [r2, #16]
 8007f56:	e04e      	b.n	8007ff6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	0151      	lsls	r1, r2, #5
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f72:	0cdb      	lsrs	r3, r3, #19
 8007f74:	04db      	lsls	r3, r3, #19
 8007f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	699a      	ldr	r2, [r3, #24]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d903      	bls.n	8007fb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fe6:	6939      	ldr	r1, [r7, #16]
 8007fe8:	0148      	lsls	r0, r1, #5
 8007fea:	6979      	ldr	r1, [r7, #20]
 8007fec:	4401      	add	r1, r0
 8007fee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d11e      	bne.n	800803a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d009      	beq.n	8008018 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008010:	461a      	mov	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008032:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	e097      	b.n	800816a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008054:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008058:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8083 	beq.w	800816a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	f003 030f 	and.w	r3, r3, #15
 8008074:	2101      	movs	r1, #1
 8008076:	fa01 f303 	lsl.w	r3, r1, r3
 800807a:	6979      	ldr	r1, [r7, #20]
 800807c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008080:	4313      	orrs	r3, r2
 8008082:	634b      	str	r3, [r1, #52]	; 0x34
 8008084:	e071      	b.n	800816a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	4413      	add	r3, r2
 800808e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	0151      	lsls	r1, r2, #5
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	440a      	add	r2, r1
 800809c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a0:	0cdb      	lsrs	r3, r3, #19
 80080a2:	04db      	lsls	r3, r3, #19
 80080a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008100:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008118:	6939      	ldr	r1, [r7, #16]
 800811a:	0148      	lsls	r0, r1, #5
 800811c:	6979      	ldr	r1, [r7, #20]
 800811e:	4401      	add	r1, r0
 8008120:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008124:	4313      	orrs	r3, r2
 8008126:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d10d      	bne.n	800814a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6919      	ldr	r1, [r3, #16]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008146:	460a      	mov	r2, r1
 8008148:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008168:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d14a      	bne.n	800822c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081ae:	f040 8086 	bne.w	80082be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	7812      	ldrb	r2, [r2, #0]
 80081c6:	0151      	lsls	r1, r2, #5
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	440a      	add	r2, r1
 80081cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f242 7210 	movw	r2, #10000	; 0x2710
 8008206:	4293      	cmp	r3, r2
 8008208:	d902      	bls.n	8008210 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
          break;
 800820e:	e056      	b.n	80082be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008228:	d0e7      	beq.n	80081fa <USB_EPStopXfer+0x82>
 800822a:	e048      	b.n	80082be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008244:	d13b      	bne.n	80082be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	7812      	ldrb	r2, [r2, #0]
 800825a:	0151      	lsls	r1, r2, #5
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	440a      	add	r2, r1
 8008260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008264:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008268:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800828c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f242 7210 	movw	r2, #10000	; 0x2710
 800829a:	4293      	cmp	r3, r2
 800829c:	d902      	bls.n	80082a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	75fb      	strb	r3, [r7, #23]
          break;
 80082a2:	e00c      	b.n	80082be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082bc:	d0e7      	beq.n	800828e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b089      	sub	sp, #36	; 0x24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	460b      	mov	r3, r1
 80082dc:	71fb      	strb	r3, [r7, #7]
 80082de:	4613      	mov	r3, r2
 80082e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d123      	bne.n	800833a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082f2:	88bb      	ldrh	r3, [r7, #4]
 80082f4:	3303      	adds	r3, #3
 80082f6:	089b      	lsrs	r3, r3, #2
 80082f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082fa:	2300      	movs	r3, #0
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	e018      	b.n	8008332 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	031a      	lsls	r2, r3, #12
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	4413      	add	r3, r2
 8008308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830c:	461a      	mov	r2, r3
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	3301      	adds	r3, #1
 8008318:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	3301      	adds	r3, #1
 800831e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	3301      	adds	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	3301      	adds	r3, #1
 800832a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	3301      	adds	r3, #1
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d3e2      	bcc.n	8008300 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3724      	adds	r7, #36	; 0x24
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008348:	b480      	push	{r7}
 800834a:	b08b      	sub	sp, #44	; 0x2c
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800835e:	88fb      	ldrh	r3, [r7, #6]
 8008360:	089b      	lsrs	r3, r3, #2
 8008362:	b29b      	uxth	r3, r3
 8008364:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800836e:	2300      	movs	r3, #0
 8008370:	623b      	str	r3, [r7, #32]
 8008372:	e014      	b.n	800839e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	3301      	adds	r3, #1
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	3301      	adds	r3, #1
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	3301      	adds	r3, #1
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	3301      	adds	r3, #1
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	3301      	adds	r3, #1
 800839c:	623b      	str	r3, [r7, #32]
 800839e:	6a3a      	ldr	r2, [r7, #32]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d3e6      	bcc.n	8008374 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083a6:	8bfb      	ldrh	r3, [r7, #30]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01e      	beq.n	80083ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b6:	461a      	mov	r2, r3
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	fa22 f303 	lsr.w	r3, r2, r3
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	701a      	strb	r2, [r3, #0]
      i++;
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	3301      	adds	r3, #1
 80083d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	3301      	adds	r3, #1
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083de:	8bfb      	ldrh	r3, [r7, #30]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083e4:	8bfb      	ldrh	r3, [r7, #30]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1ea      	bne.n	80083c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	372c      	adds	r7, #44	; 0x2c
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d12c      	bne.n	800846e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	db12      	blt.n	800844c <USB_EPSetStall+0x54>
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00f      	beq.n	800844c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008446:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800844a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	e02b      	b.n	80084c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	db12      	blt.n	80084a6 <USB_EPSetStall+0xae>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00f      	beq.n	80084a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	440a      	add	r2, r1
 800849c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d128      	bne.n	8008542 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	440a      	add	r2, r1
 8008506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800850a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800850e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	791b      	ldrb	r3, [r3, #4]
 8008514:	2b03      	cmp	r3, #3
 8008516:	d003      	beq.n	8008520 <USB_EPClearStall+0x4c>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	791b      	ldrb	r3, [r3, #4]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d138      	bne.n	8008592 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	e027      	b.n	8008592 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008560:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	791b      	ldrb	r3, [r3, #4]
 8008566:	2b03      	cmp	r3, #3
 8008568:	d003      	beq.n	8008572 <USB_EPClearStall+0x9e>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	791b      	ldrb	r3, [r3, #4]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d10f      	bne.n	8008592 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	440a      	add	r2, r1
 8008588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800858c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008590:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085da:	4313      	orrs	r3, r2
 80085dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800861a:	f023 0302 	bic.w	r3, r3, #2
 800861e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008648:	f023 0303 	bic.w	r3, r3, #3
 800864c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800865c:	f043 0302 	orr.w	r3, r3, #2
 8008660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	4013      	ands	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008688:	68fb      	ldr	r3, [r7, #12]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008696:	b480      	push	{r7}
 8008698:	b085      	sub	sp, #20
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	4013      	ands	r3, r2
 80086b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	0c1b      	lsrs	r3, r3, #16
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4013      	ands	r3, r2
 80086ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	b29b      	uxth	r3, r3
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4413      	add	r3, r2
 8008716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	4013      	ands	r3, r2
 800872a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800872c:	68bb      	ldr	r3, [r7, #8]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800873a:	b480      	push	{r7}
 800873c:	b087      	sub	sp, #28
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	fa22 f303 	lsr.w	r3, r2, r3
 800876a:	01db      	lsls	r3, r3, #7
 800876c:	b2db      	uxtb	r3, r3
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4013      	ands	r3, r2
 8008786:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008788:	68bb      	ldr	r3, [r7, #8]
}
 800878a:	4618      	mov	r0, r3
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f003 0301 	and.w	r3, r3, #1
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087d0:	f023 0307 	bic.w	r3, r3, #7
 80087d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	460b      	mov	r3, r1
 8008802:	607a      	str	r2, [r7, #4]
 8008804:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	333c      	adds	r3, #60	; 0x3c
 800880e:	3304      	adds	r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	4a26      	ldr	r2, [pc, #152]	; (80088b0 <USB_EP0_OutStart+0xb8>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d90a      	bls.n	8008832 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800882c:	d101      	bne.n	8008832 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	e037      	b.n	80088a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008838:	461a      	mov	r2, r3
 800883a:	2300      	movs	r3, #0
 800883c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800884c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008860:	f043 0318 	orr.w	r3, r3, #24
 8008864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008874:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008878:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d10f      	bne.n	80088a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800889e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	4f54300a 	.word	0x4f54300a

080088b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3301      	adds	r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4a13      	ldr	r2, [pc, #76]	; (8008918 <USB_CoreReset+0x64>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d901      	bls.n	80088d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e01b      	b.n	800890a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	daf2      	bge.n	80088c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f043 0201 	orr.w	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3301      	adds	r3, #1
 80088ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4a09      	ldr	r2, [pc, #36]	; (8008918 <USB_CoreReset+0x64>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d901      	bls.n	80088fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e006      	b.n	800890a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b01      	cmp	r3, #1
 8008906:	d0f0      	beq.n	80088ea <USB_CoreReset+0x36>

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	00030d40 	.word	0x00030d40

0800891c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008928:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800892c:	f005 fb64 	bl	800dff8 <USBD_static_malloc>
 8008930:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d109      	bne.n	800894c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32b0      	adds	r2, #176	; 0xb0
 8008942:	2100      	movs	r1, #0
 8008944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008948:	2302      	movs	r3, #2
 800894a:	e0d4      	b.n	8008af6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800894c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008950:	2100      	movs	r1, #0
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f005 fbdc 	bl	800e110 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	32b0      	adds	r2, #176	; 0xb0
 8008962:	68f9      	ldr	r1, [r7, #12]
 8008964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	32b0      	adds	r2, #176	; 0xb0
 8008972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	7c1b      	ldrb	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d138      	bne.n	80089f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008984:	4b5e      	ldr	r3, [pc, #376]	; (8008b00 <USBD_CDC_Init+0x1e4>)
 8008986:	7819      	ldrb	r1, [r3, #0]
 8008988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800898c:	2202      	movs	r2, #2
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f005 fa0f 	bl	800ddb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008994:	4b5a      	ldr	r3, [pc, #360]	; (8008b00 <USBD_CDC_Init+0x1e4>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	f003 020f 	and.w	r2, r3, #15
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	3324      	adds	r3, #36	; 0x24
 80089aa:	2201      	movs	r2, #1
 80089ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089ae:	4b55      	ldr	r3, [pc, #340]	; (8008b04 <USBD_CDC_Init+0x1e8>)
 80089b0:	7819      	ldrb	r1, [r3, #0]
 80089b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b6:	2202      	movs	r2, #2
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f005 f9fa 	bl	800ddb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089be:	4b51      	ldr	r3, [pc, #324]	; (8008b04 <USBD_CDC_Init+0x1e8>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 020f 	and.w	r2, r3, #15
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089d6:	2201      	movs	r2, #1
 80089d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089da:	4b4b      	ldr	r3, [pc, #300]	; (8008b08 <USBD_CDC_Init+0x1ec>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f003 020f 	and.w	r2, r3, #15
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	3326      	adds	r3, #38	; 0x26
 80089f0:	2210      	movs	r2, #16
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	e035      	b.n	8008a62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089f6:	4b42      	ldr	r3, [pc, #264]	; (8008b00 <USBD_CDC_Init+0x1e4>)
 80089f8:	7819      	ldrb	r1, [r3, #0]
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	2202      	movs	r2, #2
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f005 f9d7 	bl	800ddb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a04:	4b3e      	ldr	r3, [pc, #248]	; (8008b00 <USBD_CDC_Init+0x1e4>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 020f 	and.w	r2, r3, #15
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	3324      	adds	r3, #36	; 0x24
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a1e:	4b39      	ldr	r3, [pc, #228]	; (8008b04 <USBD_CDC_Init+0x1e8>)
 8008a20:	7819      	ldrb	r1, [r3, #0]
 8008a22:	2340      	movs	r3, #64	; 0x40
 8008a24:	2202      	movs	r2, #2
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f005 f9c3 	bl	800ddb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a2c:	4b35      	ldr	r3, [pc, #212]	; (8008b04 <USBD_CDC_Init+0x1e8>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a44:	2201      	movs	r2, #1
 8008a46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a48:	4b2f      	ldr	r3, [pc, #188]	; (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 020f 	and.w	r2, r3, #15
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	3326      	adds	r3, #38	; 0x26
 8008a5e:	2210      	movs	r2, #16
 8008a60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a62:	4b29      	ldr	r3, [pc, #164]	; (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a64:	7819      	ldrb	r1, [r3, #0]
 8008a66:	2308      	movs	r3, #8
 8008a68:	2203      	movs	r2, #3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f005 f9a1 	bl	800ddb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a70:	4b25      	ldr	r3, [pc, #148]	; (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	3324      	adds	r3, #36	; 0x24
 8008a86:	2201      	movs	r2, #1
 8008a88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	33b0      	adds	r3, #176	; 0xb0
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e018      	b.n	8008af6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7c1b      	ldrb	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008acc:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <USBD_CDC_Init+0x1e8>)
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f005 fa58 	bl	800df90 <USBD_LL_PrepareReceive>
 8008ae0:	e008      	b.n	8008af4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ae2:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <USBD_CDC_Init+0x1e8>)
 8008ae4:	7819      	ldrb	r1, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008aec:	2340      	movs	r3, #64	; 0x40
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f005 fa4e 	bl	800df90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	2000057b 	.word	0x2000057b
 8008b04:	2000057c 	.word	0x2000057c
 8008b08:	2000057d 	.word	0x2000057d

08008b0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008b18:	4b3a      	ldr	r3, [pc, #232]	; (8008c04 <USBD_CDC_DeInit+0xf8>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f005 f96d 	bl	800ddfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008b24:	4b37      	ldr	r3, [pc, #220]	; (8008c04 <USBD_CDC_DeInit+0xf8>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	f003 020f 	and.w	r2, r3, #15
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	440b      	add	r3, r1
 8008b38:	3324      	adds	r3, #36	; 0x24
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b3e:	4b32      	ldr	r3, [pc, #200]	; (8008c08 <USBD_CDC_DeInit+0xfc>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f005 f95a 	bl	800ddfe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b4a:	4b2f      	ldr	r3, [pc, #188]	; (8008c08 <USBD_CDC_DeInit+0xfc>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	f003 020f 	and.w	r2, r3, #15
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b62:	2200      	movs	r2, #0
 8008b64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b66:	4b29      	ldr	r3, [pc, #164]	; (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f005 f946 	bl	800ddfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b72:	4b26      	ldr	r3, [pc, #152]	; (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	f003 020f 	and.w	r2, r3, #15
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	440b      	add	r3, r1
 8008b86:	3324      	adds	r3, #36	; 0x24
 8008b88:	2200      	movs	r2, #0
 8008b8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	; (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 020f 	and.w	r2, r3, #15
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3326      	adds	r3, #38	; 0x26
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	32b0      	adds	r2, #176	; 0xb0
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01f      	beq.n	8008bf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	33b0      	adds	r3, #176	; 0xb0
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32b0      	adds	r2, #176	; 0xb0
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f005 fa1a 	bl	800e014 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32b0      	adds	r2, #176	; 0xb0
 8008bea:	2100      	movs	r1, #0
 8008bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	2000057b 	.word	0x2000057b
 8008c08:	2000057c 	.word	0x2000057c
 8008c0c:	2000057d 	.word	0x2000057d

08008c10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	32b0      	adds	r2, #176	; 0xb0
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e0bf      	b.n	8008dc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d050      	beq.n	8008cee <USBD_CDC_Setup+0xde>
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	f040 80af 	bne.w	8008db0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88db      	ldrh	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d03a      	beq.n	8008cd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b25b      	sxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da1b      	bge.n	8008c9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	33b0      	adds	r3, #176	; 0xb0
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	88d2      	ldrh	r2, [r2, #6]
 8008c80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	88db      	ldrh	r3, [r3, #6]
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	bf28      	it	cs
 8008c8a:	2307      	movcs	r3, #7
 8008c8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	89fa      	ldrh	r2, [r7, #14]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 fd43 	bl	800a720 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c9a:	e090      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	785a      	ldrb	r2, [r3, #1]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	88db      	ldrh	r3, [r3, #6]
 8008caa:	2b3f      	cmp	r3, #63	; 0x3f
 8008cac:	d803      	bhi.n	8008cb6 <USBD_CDC_Setup+0xa6>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	88db      	ldrh	r3, [r3, #6]
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	e000      	b.n	8008cb8 <USBD_CDC_Setup+0xa8>
 8008cb6:	2240      	movs	r2, #64	; 0x40
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008cbe:	6939      	ldr	r1, [r7, #16]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fd55 	bl	800a778 <USBD_CtlPrepareRx>
      break;
 8008cce:	e076      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	33b0      	adds	r3, #176	; 0xb0
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	7850      	ldrb	r0, [r2, #1]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	4798      	blx	r3
      break;
 8008cec:	e067      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b0b      	cmp	r3, #11
 8008cf4:	d851      	bhi.n	8008d9a <USBD_CDC_Setup+0x18a>
 8008cf6:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <USBD_CDC_Setup+0xec>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d2d 	.word	0x08008d2d
 8008d00:	08008da9 	.word	0x08008da9
 8008d04:	08008d9b 	.word	0x08008d9b
 8008d08:	08008d9b 	.word	0x08008d9b
 8008d0c:	08008d9b 	.word	0x08008d9b
 8008d10:	08008d9b 	.word	0x08008d9b
 8008d14:	08008d9b 	.word	0x08008d9b
 8008d18:	08008d9b 	.word	0x08008d9b
 8008d1c:	08008d9b 	.word	0x08008d9b
 8008d20:	08008d9b 	.word	0x08008d9b
 8008d24:	08008d57 	.word	0x08008d57
 8008d28:	08008d81 	.word	0x08008d81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d107      	bne.n	8008d48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d38:	f107 030a 	add.w	r3, r7, #10
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fced 	bl	800a720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d46:	e032      	b.n	8008dae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 fc77 	bl	800a63e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d50:	2303      	movs	r3, #3
 8008d52:	75fb      	strb	r3, [r7, #23]
          break;
 8008d54:	e02b      	b.n	8008dae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d107      	bne.n	8008d72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d62:	f107 030d 	add.w	r3, r7, #13
 8008d66:	2201      	movs	r2, #1
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 fcd8 	bl	800a720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d70:	e01d      	b.n	8008dae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fc62 	bl	800a63e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d7e:	e016      	b.n	8008dae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d00f      	beq.n	8008dac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fc55 	bl	800a63e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d98:	e008      	b.n	8008dac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 fc4e 	bl	800a63e <USBD_CtlError>
          ret = USBD_FAIL;
 8008da2:	2303      	movs	r3, #3
 8008da4:	75fb      	strb	r3, [r7, #23]
          break;
 8008da6:	e002      	b.n	8008dae <USBD_CDC_Setup+0x19e>
          break;
 8008da8:	bf00      	nop
 8008daa:	e008      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
          break;
 8008dac:	bf00      	nop
      }
      break;
 8008dae:	e006      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fc43 	bl	800a63e <USBD_CtlError>
      ret = USBD_FAIL;
 8008db8:	2303      	movs	r3, #3
 8008dba:	75fb      	strb	r3, [r7, #23]
      break;
 8008dbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	32b0      	adds	r2, #176	; 0xb0
 8008de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e065      	b.n	8008ebe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	32b0      	adds	r2, #176	; 0xb0
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	f003 020f 	and.w	r2, r3, #15
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	3318      	adds	r3, #24
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d02f      	beq.n	8008e7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	f003 020f 	and.w	r2, r3, #15
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	3318      	adds	r3, #24
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	f003 010f 	and.w	r1, r3, #15
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	440b      	add	r3, r1
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4403      	add	r3, r0
 8008e44:	3348      	adds	r3, #72	; 0x48
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e4c:	fb01 f303 	mul.w	r3, r1, r3
 8008e50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d112      	bne.n	8008e7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	f003 020f 	and.w	r2, r3, #15
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	440b      	add	r3, r1
 8008e68:	3318      	adds	r3, #24
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e6e:	78f9      	ldrb	r1, [r7, #3]
 8008e70:	2300      	movs	r3, #0
 8008e72:	2200      	movs	r2, #0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f005 f86a 	bl	800df4e <USBD_LL_Transmit>
 8008e7a:	e01f      	b.n	8008ebc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	33b0      	adds	r3, #176	; 0xb0
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d010      	beq.n	8008ebc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	33b0      	adds	r3, #176	; 0xb0
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	32b0      	adds	r2, #176	; 0xb0
 8008edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	32b0      	adds	r2, #176	; 0xb0
 8008eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e01a      	b.n	8008f2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f005 f868 	bl	800dfd2 <USBD_LL_GetRxDataSize>
 8008f02:	4602      	mov	r2, r0
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	33b0      	adds	r3, #176	; 0xb0
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	32b0      	adds	r2, #176	; 0xb0
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e025      	b.n	8008fa4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	33b0      	adds	r3, #176	; 0xb0
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01a      	beq.n	8008fa2 <USBD_CDC_EP0_RxReady+0x6c>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f72:	2bff      	cmp	r3, #255	; 0xff
 8008f74:	d015      	beq.n	8008fa2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	33b0      	adds	r3, #176	; 0xb0
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f96:	b292      	uxth	r2, r2
 8008f98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	22ff      	movs	r2, #255	; 0xff
 8008f9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fb4:	2182      	movs	r1, #130	; 0x82
 8008fb6:	4818      	ldr	r0, [pc, #96]	; (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fb8:	f000 fd09 	bl	80099ce <USBD_GetEpDesc>
 8008fbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4815      	ldr	r0, [pc, #84]	; (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fc2:	f000 fd04 	bl	80099ce <USBD_GetEpDesc>
 8008fc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fc8:	2181      	movs	r1, #129	; 0x81
 8008fca:	4813      	ldr	r0, [pc, #76]	; (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fcc:	f000 fcff 	bl	80099ce <USBD_GetEpDesc>
 8008fd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fec:	711a      	strb	r2, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009000:	711a      	strb	r2, [r3, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2243      	movs	r2, #67	; 0x43
 800900a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800900c:	4b02      	ldr	r3, [pc, #8]	; (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000538 	.word	0x20000538

0800901c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009024:	2182      	movs	r1, #130	; 0x82
 8009026:	4818      	ldr	r0, [pc, #96]	; (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009028:	f000 fcd1 	bl	80099ce <USBD_GetEpDesc>
 800902c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800902e:	2101      	movs	r1, #1
 8009030:	4815      	ldr	r0, [pc, #84]	; (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009032:	f000 fccc 	bl	80099ce <USBD_GetEpDesc>
 8009036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009038:	2181      	movs	r1, #129	; 0x81
 800903a:	4813      	ldr	r0, [pc, #76]	; (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800903c:	f000 fcc7 	bl	80099ce <USBD_GetEpDesc>
 8009040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2210      	movs	r2, #16
 800904c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2200      	movs	r2, #0
 8009058:	711a      	strb	r2, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f042 0202 	orr.w	r2, r2, #2
 8009060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d006      	beq.n	8009076 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	711a      	strb	r2, [r3, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f042 0202 	orr.w	r2, r2, #2
 8009074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2243      	movs	r2, #67	; 0x43
 800907a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000538 	.word	0x20000538

0800908c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009094:	2182      	movs	r1, #130	; 0x82
 8009096:	4818      	ldr	r0, [pc, #96]	; (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009098:	f000 fc99 	bl	80099ce <USBD_GetEpDesc>
 800909c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800909e:	2101      	movs	r1, #1
 80090a0:	4815      	ldr	r0, [pc, #84]	; (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090a2:	f000 fc94 	bl	80099ce <USBD_GetEpDesc>
 80090a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090a8:	2181      	movs	r1, #129	; 0x81
 80090aa:	4813      	ldr	r0, [pc, #76]	; (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090ac:	f000 fc8f 	bl	80099ce <USBD_GetEpDesc>
 80090b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2210      	movs	r2, #16
 80090bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090cc:	711a      	strb	r2, [r3, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d006      	beq.n	80090e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e0:	711a      	strb	r2, [r3, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2243      	movs	r2, #67	; 0x43
 80090ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000538 	.word	0x20000538

080090fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220a      	movs	r2, #10
 8009108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800910a:	4b03      	ldr	r3, [pc, #12]	; (8009118 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	200004f4 	.word	0x200004f4

0800911c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	e009      	b.n	8009144 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	33b0      	adds	r3, #176	; 0xb0
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	32b0      	adds	r2, #176	; 0xb0
 8009166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	e008      	b.n	8009188 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	32b0      	adds	r2, #176	; 0xb0
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e004      	b.n	80091c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	32b0      	adds	r2, #176	; 0xb0
 80091e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	32b0      	adds	r2, #176	; 0xb0
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e018      	b.n	8009230 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7c1b      	ldrb	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009206:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <USBD_CDC_ReceivePacket+0x68>)
 8009208:	7819      	ldrb	r1, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f004 febb 	bl	800df90 <USBD_LL_PrepareReceive>
 800921a:	e008      	b.n	800922e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <USBD_CDC_ReceivePacket+0x68>)
 800921e:	7819      	ldrb	r1, [r3, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009226:	2340      	movs	r3, #64	; 0x40
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f004 feb1 	bl	800df90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	2000057c 	.word	0x2000057c

0800923c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009250:	2303      	movs	r3, #3
 8009252:	e01f      	b.n	8009294 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	79fa      	ldrb	r2, [r7, #7]
 8009286:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f004 fd2b 	bl	800dce4 <USBD_LL_Init>
 800928e:	4603      	mov	r3, r0
 8009290:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009292:	7dfb      	ldrb	r3, [r7, #23]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e025      	b.n	8009300 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	32ae      	adds	r2, #174	; 0xae
 80092c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00f      	beq.n	80092f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	32ae      	adds	r2, #174	; 0xae
 80092da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	f107 020e 	add.w	r2, r7, #14
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	4602      	mov	r2, r0
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f004 fd33 	bl	800dd7c <USBD_LL_Start>
 8009316:	4603      	mov	r3, r0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009328:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934c:	2b00      	cmp	r3, #0
 800934e:	d009      	beq.n	8009364 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	4611      	mov	r1, r2
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009364:	7bfb      	ldrb	r3, [r7, #15]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	4611      	mov	r1, r2
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009394:	2303      	movs	r3, #3
 8009396:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f908 	bl	800a5ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80093c8:	461a      	mov	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d01a      	beq.n	8009414 <USBD_LL_SetupStage+0x72>
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d822      	bhi.n	8009428 <USBD_LL_SetupStage+0x86>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <USBD_LL_SetupStage+0x4a>
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d00a      	beq.n	8009400 <USBD_LL_SetupStage+0x5e>
 80093ea:	e01d      	b.n	8009428 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fb5f 	bl	8009ab8 <USBD_StdDevReq>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
      break;
 80093fe:	e020      	b.n	8009442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fbc7 	bl	8009b9c <USBD_StdItfReq>
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]
      break;
 8009412:	e016      	b.n	8009442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc29 	bl	8009c74 <USBD_StdEPReq>
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
      break;
 8009426:	e00c      	b.n	8009442 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800942e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009432:	b2db      	uxtb	r3, r3
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f004 fd00 	bl	800de3c <USBD_LL_StallEP>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
      break;
 8009440:	bf00      	nop
  }

  return ret;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	460b      	mov	r3, r1
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d16e      	bne.n	8009542 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800946a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009472:	2b03      	cmp	r3, #3
 8009474:	f040 8098 	bne.w	80095a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	429a      	cmp	r2, r3
 8009482:	d913      	bls.n	80094ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	1ad2      	subs	r2, r2, r3
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	4293      	cmp	r3, r2
 800949c:	bf28      	it	cs
 800949e:	4613      	movcs	r3, r2
 80094a0:	461a      	mov	r2, r3
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f001 f984 	bl	800a7b2 <USBD_CtlContinueRx>
 80094aa:	e07d      	b.n	80095a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094b2:	f003 031f 	and.w	r3, r3, #31
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d014      	beq.n	80094e4 <USBD_LL_DataOutStage+0x98>
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d81d      	bhi.n	80094fa <USBD_LL_DataOutStage+0xae>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <USBD_LL_DataOutStage+0x7c>
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d003      	beq.n	80094ce <USBD_LL_DataOutStage+0x82>
 80094c6:	e018      	b.n	80094fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	75bb      	strb	r3, [r7, #22]
            break;
 80094cc:	e018      	b.n	8009500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	4619      	mov	r1, r3
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fa5e 	bl	800999a <USBD_CoreFindIF>
 80094de:	4603      	mov	r3, r0
 80094e0:	75bb      	strb	r3, [r7, #22]
            break;
 80094e2:	e00d      	b.n	8009500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	4619      	mov	r1, r3
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fa60 	bl	80099b4 <USBD_CoreFindEP>
 80094f4:	4603      	mov	r3, r0
 80094f6:	75bb      	strb	r3, [r7, #22]
            break;
 80094f8:	e002      	b.n	8009500 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	75bb      	strb	r3, [r7, #22]
            break;
 80094fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009500:	7dbb      	ldrb	r3, [r7, #22]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d119      	bne.n	800953a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d113      	bne.n	800953a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009512:	7dba      	ldrb	r2, [r7, #22]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	32ae      	adds	r2, #174	; 0xae
 8009518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009522:	7dba      	ldrb	r2, [r7, #22]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800952a:	7dba      	ldrb	r2, [r7, #22]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	32ae      	adds	r2, #174	; 0xae
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f001 f94a 	bl	800a7d4 <USBD_CtlSendStatus>
 8009540:	e032      	b.n	80095a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009542:	7afb      	ldrb	r3, [r7, #11]
 8009544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009548:	b2db      	uxtb	r3, r3
 800954a:	4619      	mov	r1, r3
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fa31 	bl	80099b4 <USBD_CoreFindEP>
 8009552:	4603      	mov	r3, r0
 8009554:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009556:	7dbb      	ldrb	r3, [r7, #22]
 8009558:	2bff      	cmp	r3, #255	; 0xff
 800955a:	d025      	beq.n	80095a8 <USBD_LL_DataOutStage+0x15c>
 800955c:	7dbb      	ldrb	r3, [r7, #22]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d122      	bne.n	80095a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b03      	cmp	r3, #3
 800956c:	d117      	bne.n	800959e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800956e:	7dba      	ldrb	r2, [r7, #22]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	32ae      	adds	r2, #174	; 0xae
 8009574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00f      	beq.n	800959e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800957e:	7dba      	ldrb	r2, [r7, #22]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009586:	7dba      	ldrb	r2, [r7, #22]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	32ae      	adds	r2, #174	; 0xae
 800958c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	7afa      	ldrb	r2, [r7, #11]
 8009594:	4611      	mov	r1, r2
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	4798      	blx	r3
 800959a:	4603      	mov	r3, r0
 800959c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	e000      	b.n	80095aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	460b      	mov	r3, r1
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d16f      	bne.n	80096a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3314      	adds	r3, #20
 80095ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d15a      	bne.n	800968c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	689a      	ldr	r2, [r3, #8]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d914      	bls.n	800960c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	689a      	ldr	r2, [r3, #8]
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	461a      	mov	r2, r3
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f001 f8ac 	bl	800a756 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fe:	2300      	movs	r3, #0
 8009600:	2200      	movs	r2, #0
 8009602:	2100      	movs	r1, #0
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f004 fcc3 	bl	800df90 <USBD_LL_PrepareReceive>
 800960a:	e03f      	b.n	800968c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	429a      	cmp	r2, r3
 8009616:	d11c      	bne.n	8009652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009620:	429a      	cmp	r2, r3
 8009622:	d316      	bcc.n	8009652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800962e:	429a      	cmp	r2, r3
 8009630:	d20f      	bcs.n	8009652 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f001 f88d 	bl	800a756 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009644:	2300      	movs	r3, #0
 8009646:	2200      	movs	r2, #0
 8009648:	2100      	movs	r1, #0
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f004 fca0 	bl	800df90 <USBD_LL_PrepareReceive>
 8009650:	e01c      	b.n	800968c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b03      	cmp	r3, #3
 800965c:	d10f      	bne.n	800967e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800967e:	2180      	movs	r1, #128	; 0x80
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f004 fbdb 	bl	800de3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f001 f8b7 	bl	800a7fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d03a      	beq.n	800970c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff fe42 	bl	8009320 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096a4:	e032      	b.n	800970c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096a6:	7afb      	ldrb	r3, [r7, #11]
 80096a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 f97f 	bl	80099b4 <USBD_CoreFindEP>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	2bff      	cmp	r3, #255	; 0xff
 80096be:	d025      	beq.n	800970c <USBD_LL_DataInStage+0x15a>
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d122      	bne.n	800970c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d11c      	bne.n	800970c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80096d2:	7dfa      	ldrb	r2, [r7, #23]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	32ae      	adds	r2, #174	; 0xae
 80096d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d014      	beq.n	800970c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80096e2:	7dfa      	ldrb	r2, [r7, #23]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80096ea:	7dfa      	ldrb	r2, [r7, #23]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	32ae      	adds	r2, #174	; 0xae
 80096f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	7afa      	ldrb	r2, [r7, #11]
 80096f8:	4611      	mov	r1, r2
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	4798      	blx	r3
 80096fe:	4603      	mov	r3, r0
 8009700:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009702:	7dbb      	ldrb	r3, [r7, #22]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009708:	7dbb      	ldrb	r3, [r7, #22]
 800970a:	e000      	b.n	800970e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d014      	beq.n	800977c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00e      	beq.n	800977c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6852      	ldr	r2, [r2, #4]
 800976a:	b2d2      	uxtb	r2, r2
 800976c:	4611      	mov	r1, r2
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800977c:	2340      	movs	r3, #64	; 0x40
 800977e:	2200      	movs	r2, #0
 8009780:	2100      	movs	r1, #0
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f004 fb15 	bl	800ddb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2240      	movs	r2, #64	; 0x40
 8009794:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009798:	2340      	movs	r3, #64	; 0x40
 800979a:	2200      	movs	r2, #0
 800979c:	2180      	movs	r1, #128	; 0x80
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f004 fb07 	bl	800ddb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2240      	movs	r2, #64	; 0x40
 80097ae:	621a      	str	r2, [r3, #32]

  return ret;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2204      	movs	r2, #4
 80097f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b04      	cmp	r3, #4
 8009818:	d106      	bne.n	8009828 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009820:	b2da      	uxtb	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b03      	cmp	r3, #3
 8009848:	d110      	bne.n	800986c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	32ae      	adds	r2, #174	; 0xae
 800988c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009894:	2303      	movs	r3, #3
 8009896:	e01c      	b.n	80098d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d115      	bne.n	80098d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	32ae      	adds	r2, #174	; 0xae
 80098ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00b      	beq.n	80098d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32ae      	adds	r2, #174	; 0xae
 80098c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	32ae      	adds	r2, #174	; 0xae
 80098f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e01c      	b.n	8009936 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b03      	cmp	r3, #3
 8009906:	d115      	bne.n	8009934 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	32ae      	adds	r2, #174	; 0xae
 8009912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	32ae      	adds	r2, #174	; 0xae
 8009926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	78fa      	ldrb	r2, [r7, #3]
 800992e:	4611      	mov	r1, r2
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00e      	beq.n	8009990 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	6852      	ldr	r2, [r2, #4]
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	4611      	mov	r1, r2
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	4798      	blx	r3
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800998c:	2303      	movs	r3, #3
 800998e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009990:	7bfb      	ldrb	r3, [r7, #15]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b086      	sub	sp, #24
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	460b      	mov	r3, r1
 80099d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	885b      	ldrh	r3, [r3, #2]
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d920      	bls.n	8009a38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80099fe:	e013      	b.n	8009a28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a00:	f107 030a 	add.w	r3, r7, #10
 8009a04:	4619      	mov	r1, r3
 8009a06:	6978      	ldr	r0, [r7, #20]
 8009a08:	f000 f81b 	bl	8009a42 <USBD_GetNextDesc>
 8009a0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b05      	cmp	r3, #5
 8009a14:	d108      	bne.n	8009a28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	789b      	ldrb	r3, [r3, #2]
 8009a1e:	78fa      	ldrb	r2, [r7, #3]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d008      	beq.n	8009a36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	885b      	ldrh	r3, [r3, #2]
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	897b      	ldrh	r3, [r7, #10]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d8e5      	bhi.n	8009a00 <USBD_GetEpDesc+0x32>
 8009a34:	e000      	b.n	8009a38 <USBD_GetEpDesc+0x6a>
          break;
 8009a36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a38:	693b      	ldr	r3, [r7, #16]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b085      	sub	sp, #20
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	881a      	ldrh	r2, [r3, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	3301      	adds	r3, #1
 8009a92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a9a:	8a3b      	ldrh	r3, [r7, #16]
 8009a9c:	021b      	lsls	r3, r3, #8
 8009a9e:	b21a      	sxth	r2, r3
 8009aa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	b21b      	sxth	r3, r3
 8009aa8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009aaa:	89fb      	ldrh	r3, [r7, #14]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	371c      	adds	r7, #28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ace:	2b40      	cmp	r3, #64	; 0x40
 8009ad0:	d005      	beq.n	8009ade <USBD_StdDevReq+0x26>
 8009ad2:	2b40      	cmp	r3, #64	; 0x40
 8009ad4:	d857      	bhi.n	8009b86 <USBD_StdDevReq+0xce>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00f      	beq.n	8009afa <USBD_StdDevReq+0x42>
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	d153      	bne.n	8009b86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	32ae      	adds	r2, #174	; 0xae
 8009ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	4798      	blx	r3
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]
      break;
 8009af8:	e04a      	b.n	8009b90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	785b      	ldrb	r3, [r3, #1]
 8009afe:	2b09      	cmp	r3, #9
 8009b00:	d83b      	bhi.n	8009b7a <USBD_StdDevReq+0xc2>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <USBD_StdDevReq+0x50>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b5d 	.word	0x08009b5d
 8009b0c:	08009b71 	.word	0x08009b71
 8009b10:	08009b7b 	.word	0x08009b7b
 8009b14:	08009b67 	.word	0x08009b67
 8009b18:	08009b7b 	.word	0x08009b7b
 8009b1c:	08009b3b 	.word	0x08009b3b
 8009b20:	08009b31 	.word	0x08009b31
 8009b24:	08009b7b 	.word	0x08009b7b
 8009b28:	08009b53 	.word	0x08009b53
 8009b2c:	08009b45 	.word	0x08009b45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa3c 	bl	8009fb0 <USBD_GetDescriptor>
          break;
 8009b38:	e024      	b.n	8009b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fba1 	bl	800a284 <USBD_SetAddress>
          break;
 8009b42:	e01f      	b.n	8009b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fbe0 	bl	800a30c <USBD_SetConfig>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73fb      	strb	r3, [r7, #15]
          break;
 8009b50:	e018      	b.n	8009b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fc83 	bl	800a460 <USBD_GetConfig>
          break;
 8009b5a:	e013      	b.n	8009b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fcb4 	bl	800a4cc <USBD_GetStatus>
          break;
 8009b64:	e00e      	b.n	8009b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fce3 	bl	800a534 <USBD_SetFeature>
          break;
 8009b6e:	e009      	b.n	8009b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fd07 	bl	800a586 <USBD_ClrFeature>
          break;
 8009b78:	e004      	b.n	8009b84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fd5e 	bl	800a63e <USBD_CtlError>
          break;
 8009b82:	bf00      	nop
      }
      break;
 8009b84:	e004      	b.n	8009b90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fd58 	bl	800a63e <USBD_CtlError>
      break;
 8009b8e:	bf00      	nop
  }

  return ret;
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop

08009b9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bb2:	2b40      	cmp	r3, #64	; 0x40
 8009bb4:	d005      	beq.n	8009bc2 <USBD_StdItfReq+0x26>
 8009bb6:	2b40      	cmp	r3, #64	; 0x40
 8009bb8:	d852      	bhi.n	8009c60 <USBD_StdItfReq+0xc4>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <USBD_StdItfReq+0x26>
 8009bbe:	2b20      	cmp	r3, #32
 8009bc0:	d14e      	bne.n	8009c60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d840      	bhi.n	8009c52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	889b      	ldrh	r3, [r3, #4]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d836      	bhi.n	8009c48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	889b      	ldrh	r3, [r3, #4]
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	4619      	mov	r1, r3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff fed9 	bl	800999a <USBD_CoreFindIF>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2bff      	cmp	r3, #255	; 0xff
 8009bf0:	d01d      	beq.n	8009c2e <USBD_StdItfReq+0x92>
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d11a      	bne.n	8009c2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009bf8:	7bba      	ldrb	r2, [r7, #14]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	32ae      	adds	r2, #174	; 0xae
 8009bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00f      	beq.n	8009c28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c08:	7bba      	ldrb	r2, [r7, #14]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c10:	7bba      	ldrb	r2, [r7, #14]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	32ae      	adds	r2, #174	; 0xae
 8009c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	4798      	blx	r3
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c26:	e004      	b.n	8009c32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c2c:	e001      	b.n	8009c32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	88db      	ldrh	r3, [r3, #6]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d110      	bne.n	8009c5c <USBD_StdItfReq+0xc0>
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10d      	bne.n	8009c5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fdc7 	bl	800a7d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c46:	e009      	b.n	8009c5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fcf7 	bl	800a63e <USBD_CtlError>
          break;
 8009c50:	e004      	b.n	8009c5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fcf2 	bl	800a63e <USBD_CtlError>
          break;
 8009c5a:	e000      	b.n	8009c5e <USBD_StdItfReq+0xc2>
          break;
 8009c5c:	bf00      	nop
      }
      break;
 8009c5e:	e004      	b.n	8009c6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fceb 	bl	800a63e <USBD_CtlError>
      break;
 8009c68:	bf00      	nop
  }

  return ret;
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	889b      	ldrh	r3, [r3, #4]
 8009c86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c90:	2b40      	cmp	r3, #64	; 0x40
 8009c92:	d007      	beq.n	8009ca4 <USBD_StdEPReq+0x30>
 8009c94:	2b40      	cmp	r3, #64	; 0x40
 8009c96:	f200 817f 	bhi.w	8009f98 <USBD_StdEPReq+0x324>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d02a      	beq.n	8009cf4 <USBD_StdEPReq+0x80>
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	f040 817a 	bne.w	8009f98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff fe83 	bl	80099b4 <USBD_CoreFindEP>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cb2:	7b7b      	ldrb	r3, [r7, #13]
 8009cb4:	2bff      	cmp	r3, #255	; 0xff
 8009cb6:	f000 8174 	beq.w	8009fa2 <USBD_StdEPReq+0x32e>
 8009cba:	7b7b      	ldrb	r3, [r7, #13]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f040 8170 	bne.w	8009fa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009cc2:	7b7a      	ldrb	r2, [r7, #13]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009cca:	7b7a      	ldrb	r2, [r7, #13]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	32ae      	adds	r2, #174	; 0xae
 8009cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 8163 	beq.w	8009fa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009cdc:	7b7a      	ldrb	r2, [r7, #13]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	32ae      	adds	r2, #174	; 0xae
 8009ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	4798      	blx	r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cf2:	e156      	b.n	8009fa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	785b      	ldrb	r3, [r3, #1]
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d008      	beq.n	8009d0e <USBD_StdEPReq+0x9a>
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	f300 8145 	bgt.w	8009f8c <USBD_StdEPReq+0x318>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 809b 	beq.w	8009e3e <USBD_StdEPReq+0x1ca>
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d03c      	beq.n	8009d86 <USBD_StdEPReq+0x112>
 8009d0c:	e13e      	b.n	8009f8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d002      	beq.n	8009d20 <USBD_StdEPReq+0xac>
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d016      	beq.n	8009d4c <USBD_StdEPReq+0xd8>
 8009d1e:	e02c      	b.n	8009d7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00d      	beq.n	8009d42 <USBD_StdEPReq+0xce>
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	2b80      	cmp	r3, #128	; 0x80
 8009d2a:	d00a      	beq.n	8009d42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f004 f883 	bl	800de3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d36:	2180      	movs	r1, #128	; 0x80
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f004 f87f 	bl	800de3c <USBD_LL_StallEP>
 8009d3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d40:	e020      	b.n	8009d84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fc7a 	bl	800a63e <USBD_CtlError>
              break;
 8009d4a:	e01b      	b.n	8009d84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	885b      	ldrh	r3, [r3, #2]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10e      	bne.n	8009d72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <USBD_StdEPReq+0xfe>
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b80      	cmp	r3, #128	; 0x80
 8009d5e:	d008      	beq.n	8009d72 <USBD_StdEPReq+0xfe>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	88db      	ldrh	r3, [r3, #6]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d104      	bne.n	8009d72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f004 f865 	bl	800de3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fd2e 	bl	800a7d4 <USBD_CtlSendStatus>

              break;
 8009d78:	e004      	b.n	8009d84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fc5e 	bl	800a63e <USBD_CtlError>
              break;
 8009d82:	bf00      	nop
          }
          break;
 8009d84:	e107      	b.n	8009f96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d002      	beq.n	8009d98 <USBD_StdEPReq+0x124>
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d016      	beq.n	8009dc4 <USBD_StdEPReq+0x150>
 8009d96:	e04b      	b.n	8009e30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00d      	beq.n	8009dba <USBD_StdEPReq+0x146>
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	2b80      	cmp	r3, #128	; 0x80
 8009da2:	d00a      	beq.n	8009dba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f004 f847 	bl	800de3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dae:	2180      	movs	r1, #128	; 0x80
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f004 f843 	bl	800de3c <USBD_LL_StallEP>
 8009db6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009db8:	e040      	b.n	8009e3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fc3e 	bl	800a63e <USBD_CtlError>
              break;
 8009dc2:	e03b      	b.n	8009e3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	885b      	ldrh	r3, [r3, #2]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d136      	bne.n	8009e3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009dcc:	7bbb      	ldrb	r3, [r7, #14]
 8009dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f004 f84d 	bl	800de7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fcf7 	bl	800a7d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff fde2 	bl	80099b4 <USBD_CoreFindEP>
 8009df0:	4603      	mov	r3, r0
 8009df2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009df4:	7b7b      	ldrb	r3, [r7, #13]
 8009df6:	2bff      	cmp	r3, #255	; 0xff
 8009df8:	d01f      	beq.n	8009e3a <USBD_StdEPReq+0x1c6>
 8009dfa:	7b7b      	ldrb	r3, [r7, #13]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d11c      	bne.n	8009e3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e00:	7b7a      	ldrb	r2, [r7, #13]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e08:	7b7a      	ldrb	r2, [r7, #13]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	32ae      	adds	r2, #174	; 0xae
 8009e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d010      	beq.n	8009e3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e18:	7b7a      	ldrb	r2, [r7, #13]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	32ae      	adds	r2, #174	; 0xae
 8009e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e2e:	e004      	b.n	8009e3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fc03 	bl	800a63e <USBD_CtlError>
              break;
 8009e38:	e000      	b.n	8009e3c <USBD_StdEPReq+0x1c8>
              break;
 8009e3a:	bf00      	nop
          }
          break;
 8009e3c:	e0ab      	b.n	8009f96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d002      	beq.n	8009e50 <USBD_StdEPReq+0x1dc>
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d032      	beq.n	8009eb4 <USBD_StdEPReq+0x240>
 8009e4e:	e097      	b.n	8009f80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <USBD_StdEPReq+0x1f2>
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b80      	cmp	r3, #128	; 0x80
 8009e5a:	d004      	beq.n	8009e66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fbed 	bl	800a63e <USBD_CtlError>
                break;
 8009e64:	e091      	b.n	8009f8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da0b      	bge.n	8009e86 <USBD_StdEPReq+0x212>
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e74:	4613      	mov	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	3310      	adds	r3, #16
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	4413      	add	r3, r2
 8009e82:	3304      	adds	r3, #4
 8009e84:	e00b      	b.n	8009e9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fc37 	bl	800a720 <USBD_CtlSendData>
              break;
 8009eb2:	e06a      	b.n	8009f8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da11      	bge.n	8009ee0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	f003 020f 	and.w	r2, r3, #15
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	440b      	add	r3, r1
 8009ece:	3324      	adds	r3, #36	; 0x24
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d117      	bne.n	8009f06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fbb0 	bl	800a63e <USBD_CtlError>
                  break;
 8009ede:	e054      	b.n	8009f8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	f003 020f 	and.w	r2, r3, #15
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d104      	bne.n	8009f06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fb9d 	bl	800a63e <USBD_CtlError>
                  break;
 8009f04:	e041      	b.n	8009f8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	da0b      	bge.n	8009f26 <USBD_StdEPReq+0x2b2>
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	3310      	adds	r3, #16
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	4413      	add	r3, r2
 8009f22:	3304      	adds	r3, #4
 8009f24:	e00b      	b.n	8009f3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f40:	7bbb      	ldrb	r3, [r7, #14]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <USBD_StdEPReq+0x2d8>
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	2b80      	cmp	r3, #128	; 0x80
 8009f4a:	d103      	bne.n	8009f54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	e00e      	b.n	8009f72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f003 ffad 	bl	800deb8 <USBD_LL_IsStallEP>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2201      	movs	r2, #1
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e002      	b.n	8009f72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2202      	movs	r2, #2
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fbd1 	bl	800a720 <USBD_CtlSendData>
              break;
 8009f7e:	e004      	b.n	8009f8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fb5b 	bl	800a63e <USBD_CtlError>
              break;
 8009f88:	bf00      	nop
          }
          break;
 8009f8a:	e004      	b.n	8009f96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fb55 	bl	800a63e <USBD_CtlError>
          break;
 8009f94:	bf00      	nop
      }
      break;
 8009f96:	e005      	b.n	8009fa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fb4f 	bl	800a63e <USBD_CtlError>
      break;
 8009fa0:	e000      	b.n	8009fa4 <USBD_StdEPReq+0x330>
      break;
 8009fa2:	bf00      	nop
  }

  return ret;
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	885b      	ldrh	r3, [r3, #2]
 8009fca:	0a1b      	lsrs	r3, r3, #8
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	2b06      	cmp	r3, #6
 8009fd2:	f200 8128 	bhi.w	800a226 <USBD_GetDescriptor+0x276>
 8009fd6:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <USBD_GetDescriptor+0x2c>)
 8009fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fdc:	08009ff9 	.word	0x08009ff9
 8009fe0:	0800a011 	.word	0x0800a011
 8009fe4:	0800a051 	.word	0x0800a051
 8009fe8:	0800a227 	.word	0x0800a227
 8009fec:	0800a227 	.word	0x0800a227
 8009ff0:	0800a1c7 	.word	0x0800a1c7
 8009ff4:	0800a1f3 	.word	0x0800a1f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	7c12      	ldrb	r2, [r2, #16]
 800a004:	f107 0108 	add.w	r1, r7, #8
 800a008:	4610      	mov	r0, r2
 800a00a:	4798      	blx	r3
 800a00c:	60f8      	str	r0, [r7, #12]
      break;
 800a00e:	e112      	b.n	800a236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7c1b      	ldrb	r3, [r3, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10d      	bne.n	800a034 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	f107 0208 	add.w	r2, r7, #8
 800a024:	4610      	mov	r0, r2
 800a026:	4798      	blx	r3
 800a028:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3301      	adds	r3, #1
 800a02e:	2202      	movs	r2, #2
 800a030:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a032:	e100      	b.n	800a236 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	f107 0208 	add.w	r2, r7, #8
 800a040:	4610      	mov	r0, r2
 800a042:	4798      	blx	r3
 800a044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3301      	adds	r3, #1
 800a04a:	2202      	movs	r2, #2
 800a04c:	701a      	strb	r2, [r3, #0]
      break;
 800a04e:	e0f2      	b.n	800a236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	885b      	ldrh	r3, [r3, #2]
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b05      	cmp	r3, #5
 800a058:	f200 80ac 	bhi.w	800a1b4 <USBD_GetDescriptor+0x204>
 800a05c:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <USBD_GetDescriptor+0xb4>)
 800a05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a062:	bf00      	nop
 800a064:	0800a07d 	.word	0x0800a07d
 800a068:	0800a0b1 	.word	0x0800a0b1
 800a06c:	0800a0e5 	.word	0x0800a0e5
 800a070:	0800a119 	.word	0x0800a119
 800a074:	0800a14d 	.word	0x0800a14d
 800a078:	0800a181 	.word	0x0800a181
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00b      	beq.n	800a0a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	7c12      	ldrb	r2, [r2, #16]
 800a094:	f107 0108 	add.w	r1, r7, #8
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
 800a09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a09e:	e091      	b.n	800a1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 facb 	bl	800a63e <USBD_CtlError>
            err++;
 800a0a8:	7afb      	ldrb	r3, [r7, #11]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ae:	e089      	b.n	800a1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00b      	beq.n	800a0d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	7c12      	ldrb	r2, [r2, #16]
 800a0c8:	f107 0108 	add.w	r1, r7, #8
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	4798      	blx	r3
 800a0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d2:	e077      	b.n	800a1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fab1 	bl	800a63e <USBD_CtlError>
            err++;
 800a0dc:	7afb      	ldrb	r3, [r7, #11]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e2:	e06f      	b.n	800a1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	7c12      	ldrb	r2, [r2, #16]
 800a0fc:	f107 0108 	add.w	r1, r7, #8
 800a100:	4610      	mov	r0, r2
 800a102:	4798      	blx	r3
 800a104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a106:	e05d      	b.n	800a1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fa97 	bl	800a63e <USBD_CtlError>
            err++;
 800a110:	7afb      	ldrb	r3, [r7, #11]
 800a112:	3301      	adds	r3, #1
 800a114:	72fb      	strb	r3, [r7, #11]
          break;
 800a116:	e055      	b.n	800a1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00b      	beq.n	800a13c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	7c12      	ldrb	r2, [r2, #16]
 800a130:	f107 0108 	add.w	r1, r7, #8
 800a134:	4610      	mov	r0, r2
 800a136:	4798      	blx	r3
 800a138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13a:	e043      	b.n	800a1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa7d 	bl	800a63e <USBD_CtlError>
            err++;
 800a144:	7afb      	ldrb	r3, [r7, #11]
 800a146:	3301      	adds	r3, #1
 800a148:	72fb      	strb	r3, [r7, #11]
          break;
 800a14a:	e03b      	b.n	800a1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00b      	beq.n	800a170 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	7c12      	ldrb	r2, [r2, #16]
 800a164:	f107 0108 	add.w	r1, r7, #8
 800a168:	4610      	mov	r0, r2
 800a16a:	4798      	blx	r3
 800a16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a16e:	e029      	b.n	800a1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fa63 	bl	800a63e <USBD_CtlError>
            err++;
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	3301      	adds	r3, #1
 800a17c:	72fb      	strb	r3, [r7, #11]
          break;
 800a17e:	e021      	b.n	800a1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	7c12      	ldrb	r2, [r2, #16]
 800a198:	f107 0108 	add.w	r1, r7, #8
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
 800a1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a2:	e00f      	b.n	800a1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fa49 	bl	800a63e <USBD_CtlError>
            err++;
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b2:	e007      	b.n	800a1c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fa41 	bl	800a63e <USBD_CtlError>
          err++;
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a1c2:	bf00      	nop
      }
      break;
 800a1c4:	e037      	b.n	800a236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	7c1b      	ldrb	r3, [r3, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d109      	bne.n	800a1e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d6:	f107 0208 	add.w	r2, r7, #8
 800a1da:	4610      	mov	r0, r2
 800a1dc:	4798      	blx	r3
 800a1de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1e0:	e029      	b.n	800a236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fa2a 	bl	800a63e <USBD_CtlError>
        err++;
 800a1ea:	7afb      	ldrb	r3, [r7, #11]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f0:	e021      	b.n	800a236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7c1b      	ldrb	r3, [r3, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10d      	bne.n	800a216 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a202:	f107 0208 	add.w	r2, r7, #8
 800a206:	4610      	mov	r0, r2
 800a208:	4798      	blx	r3
 800a20a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3301      	adds	r3, #1
 800a210:	2207      	movs	r2, #7
 800a212:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a214:	e00f      	b.n	800a236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fa10 	bl	800a63e <USBD_CtlError>
        err++;
 800a21e:	7afb      	ldrb	r3, [r7, #11]
 800a220:	3301      	adds	r3, #1
 800a222:	72fb      	strb	r3, [r7, #11]
      break;
 800a224:	e007      	b.n	800a236 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fa08 	bl	800a63e <USBD_CtlError>
      err++;
 800a22e:	7afb      	ldrb	r3, [r7, #11]
 800a230:	3301      	adds	r3, #1
 800a232:	72fb      	strb	r3, [r7, #11]
      break;
 800a234:	bf00      	nop
  }

  if (err != 0U)
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d11e      	bne.n	800a27a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	88db      	ldrh	r3, [r3, #6]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d016      	beq.n	800a272 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a244:	893b      	ldrh	r3, [r7, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00e      	beq.n	800a268 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	88da      	ldrh	r2, [r3, #6]
 800a24e:	893b      	ldrh	r3, [r7, #8]
 800a250:	4293      	cmp	r3, r2
 800a252:	bf28      	it	cs
 800a254:	4613      	movcs	r3, r2
 800a256:	b29b      	uxth	r3, r3
 800a258:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a25a:	893b      	ldrh	r3, [r7, #8]
 800a25c:	461a      	mov	r2, r3
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa5d 	bl	800a720 <USBD_CtlSendData>
 800a266:	e009      	b.n	800a27c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f9e7 	bl	800a63e <USBD_CtlError>
 800a270:	e004      	b.n	800a27c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 faae 	bl	800a7d4 <USBD_CtlSendStatus>
 800a278:	e000      	b.n	800a27c <USBD_GetDescriptor+0x2cc>
    return;
 800a27a:	bf00      	nop
  }
}
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop

0800a284 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	889b      	ldrh	r3, [r3, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d131      	bne.n	800a2fa <USBD_SetAddress+0x76>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	88db      	ldrh	r3, [r3, #6]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d12d      	bne.n	800a2fa <USBD_SetAddress+0x76>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	885b      	ldrh	r3, [r3, #2]
 800a2a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a2a4:	d829      	bhi.n	800a2fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	885b      	ldrh	r3, [r3, #2]
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d104      	bne.n	800a2c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f9bc 	bl	800a63e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c6:	e01d      	b.n	800a304 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	7bfa      	ldrb	r2, [r7, #15]
 800a2cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f003 fe1b 	bl	800df10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fa7a 	bl	800a7d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d004      	beq.n	800a2f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ee:	e009      	b.n	800a304 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f8:	e004      	b.n	800a304 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f99e 	bl	800a63e <USBD_CtlError>
  }
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	885b      	ldrh	r3, [r3, #2]
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	4b4e      	ldr	r3, [pc, #312]	; (800a45c <USBD_SetConfig+0x150>)
 800a322:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a324:	4b4d      	ldr	r3, [pc, #308]	; (800a45c <USBD_SetConfig+0x150>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d905      	bls.n	800a338 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f985 	bl	800a63e <USBD_CtlError>
    return USBD_FAIL;
 800a334:	2303      	movs	r3, #3
 800a336:	e08c      	b.n	800a452 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b02      	cmp	r3, #2
 800a342:	d002      	beq.n	800a34a <USBD_SetConfig+0x3e>
 800a344:	2b03      	cmp	r3, #3
 800a346:	d029      	beq.n	800a39c <USBD_SetConfig+0x90>
 800a348:	e075      	b.n	800a436 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a34a:	4b44      	ldr	r3, [pc, #272]	; (800a45c <USBD_SetConfig+0x150>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d020      	beq.n	800a394 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a352:	4b42      	ldr	r3, [pc, #264]	; (800a45c <USBD_SetConfig+0x150>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	461a      	mov	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a35c:	4b3f      	ldr	r3, [pc, #252]	; (800a45c <USBD_SetConfig+0x150>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	4619      	mov	r1, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7fe ffe7 	bl	8009336 <USBD_SetClassConfig>
 800a368:	4603      	mov	r3, r0
 800a36a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d008      	beq.n	800a384 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f962 	bl	800a63e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2202      	movs	r2, #2
 800a37e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a382:	e065      	b.n	800a450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fa25 	bl	800a7d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2203      	movs	r2, #3
 800a38e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a392:	e05d      	b.n	800a450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fa1d 	bl	800a7d4 <USBD_CtlSendStatus>
      break;
 800a39a:	e059      	b.n	800a450 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a39c:	4b2f      	ldr	r3, [pc, #188]	; (800a45c <USBD_SetConfig+0x150>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d112      	bne.n	800a3ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3ac:	4b2b      	ldr	r3, [pc, #172]	; (800a45c <USBD_SetConfig+0x150>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3b6:	4b29      	ldr	r3, [pc, #164]	; (800a45c <USBD_SetConfig+0x150>)
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fe ffd6 	bl	800936e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fa06 	bl	800a7d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3c8:	e042      	b.n	800a450 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a3ca:	4b24      	ldr	r3, [pc, #144]	; (800a45c <USBD_SetConfig+0x150>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d02a      	beq.n	800a42e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7fe ffc4 	bl	800936e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3e6:	4b1d      	ldr	r3, [pc, #116]	; (800a45c <USBD_SetConfig+0x150>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3f0:	4b1a      	ldr	r3, [pc, #104]	; (800a45c <USBD_SetConfig+0x150>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7fe ff9d 	bl	8009336 <USBD_SetClassConfig>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00f      	beq.n	800a426 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f918 	bl	800a63e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	b2db      	uxtb	r3, r3
 800a414:	4619      	mov	r1, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7fe ffa9 	bl	800936e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2202      	movs	r2, #2
 800a420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a424:	e014      	b.n	800a450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f9d4 	bl	800a7d4 <USBD_CtlSendStatus>
      break;
 800a42c:	e010      	b.n	800a450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f9d0 	bl	800a7d4 <USBD_CtlSendStatus>
      break;
 800a434:	e00c      	b.n	800a450 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f900 	bl	800a63e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a43e:	4b07      	ldr	r3, [pc, #28]	; (800a45c <USBD_SetConfig+0x150>)
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7fe ff92 	bl	800936e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a44a:	2303      	movs	r3, #3
 800a44c:	73fb      	strb	r3, [r7, #15]
      break;
 800a44e:	bf00      	nop
  }

  return ret;
 800a450:	7bfb      	ldrb	r3, [r7, #15]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20000864 	.word	0x20000864

0800a460 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	88db      	ldrh	r3, [r3, #6]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d004      	beq.n	800a47c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f8e2 	bl	800a63e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a47a:	e023      	b.n	800a4c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b02      	cmp	r3, #2
 800a486:	dc02      	bgt.n	800a48e <USBD_GetConfig+0x2e>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	dc03      	bgt.n	800a494 <USBD_GetConfig+0x34>
 800a48c:	e015      	b.n	800a4ba <USBD_GetConfig+0x5a>
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d00b      	beq.n	800a4aa <USBD_GetConfig+0x4a>
 800a492:	e012      	b.n	800a4ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3308      	adds	r3, #8
 800a49e:	2201      	movs	r2, #1
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f93c 	bl	800a720 <USBD_CtlSendData>
        break;
 800a4a8:	e00c      	b.n	800a4c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f934 	bl	800a720 <USBD_CtlSendData>
        break;
 800a4b8:	e004      	b.n	800a4c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f8be 	bl	800a63e <USBD_CtlError>
        break;
 800a4c2:	bf00      	nop
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d81e      	bhi.n	800a522 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	88db      	ldrh	r3, [r3, #6]
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d004      	beq.n	800a4f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f8a5 	bl	800a63e <USBD_CtlError>
        break;
 800a4f4:	e01a      	b.n	800a52c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a502:	2b00      	cmp	r3, #0
 800a504:	d005      	beq.n	800a512 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f043 0202 	orr.w	r2, r3, #2
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	330c      	adds	r3, #12
 800a516:	2202      	movs	r2, #2
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f900 	bl	800a720 <USBD_CtlSendData>
      break;
 800a520:	e004      	b.n	800a52c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f88a 	bl	800a63e <USBD_CtlError>
      break;
 800a52a:	bf00      	nop
  }
}
 800a52c:	bf00      	nop
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	885b      	ldrh	r3, [r3, #2]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d107      	bne.n	800a556 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f940 	bl	800a7d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a554:	e013      	b.n	800a57e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	885b      	ldrh	r3, [r3, #2]
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d10b      	bne.n	800a576 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	889b      	ldrh	r3, [r3, #4]
 800a562:	0a1b      	lsrs	r3, r3, #8
 800a564:	b29b      	uxth	r3, r3
 800a566:	b2da      	uxtb	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f930 	bl	800a7d4 <USBD_CtlSendStatus>
}
 800a574:	e003      	b.n	800a57e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f860 	bl	800a63e <USBD_CtlError>
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a596:	b2db      	uxtb	r3, r3
 800a598:	3b01      	subs	r3, #1
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d80b      	bhi.n	800a5b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	885b      	ldrh	r3, [r3, #2]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d10c      	bne.n	800a5c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f910 	bl	800a7d4 <USBD_CtlSendStatus>
      }
      break;
 800a5b4:	e004      	b.n	800a5c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f840 	bl	800a63e <USBD_CtlError>
      break;
 800a5be:	e000      	b.n	800a5c2 <USBD_ClrFeature+0x3c>
      break;
 800a5c0:	bf00      	nop
  }
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	781a      	ldrb	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	781a      	ldrb	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7ff fa41 	bl	8009a7c <SWAPBYTE>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3301      	adds	r3, #1
 800a606:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3301      	adds	r3, #1
 800a60c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f7ff fa34 	bl	8009a7c <SWAPBYTE>
 800a614:	4603      	mov	r3, r0
 800a616:	461a      	mov	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	3301      	adds	r3, #1
 800a620:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3301      	adds	r3, #1
 800a626:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7ff fa27 	bl	8009a7c <SWAPBYTE>
 800a62e:	4603      	mov	r3, r0
 800a630:	461a      	mov	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	80da      	strh	r2, [r3, #6]
}
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b082      	sub	sp, #8
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a648:	2180      	movs	r1, #128	; 0x80
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f003 fbf6 	bl	800de3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a650:	2100      	movs	r1, #0
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f003 fbf2 	bl	800de3c <USBD_LL_StallEP>
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d036      	beq.n	800a6e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a67a:	6938      	ldr	r0, [r7, #16]
 800a67c:	f000 f836 	bl	800a6ec <USBD_GetLen>
 800a680:	4603      	mov	r3, r0
 800a682:	3301      	adds	r3, #1
 800a684:	b29b      	uxth	r3, r3
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	4413      	add	r3, r2
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	7812      	ldrb	r2, [r2, #0]
 800a698:	701a      	strb	r2, [r3, #0]
  idx++;
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
 800a69c:	3301      	adds	r3, #1
 800a69e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6b0:	e013      	b.n	800a6da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	7812      	ldrb	r2, [r2, #0]
 800a6bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	613b      	str	r3, [r7, #16]
    idx++;
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a6ca:	7dfb      	ldrb	r3, [r7, #23]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e7      	bne.n	800a6b2 <USBD_GetString+0x52>
 800a6e2:	e000      	b.n	800a6e6 <USBD_GetString+0x86>
    return;
 800a6e4:	bf00      	nop
  }
}
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a6fc:	e005      	b.n	800a70a <USBD_GetLen+0x1e>
  {
    len++;
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	3301      	adds	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	3301      	adds	r3, #1
 800a708:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f5      	bne.n	800a6fe <USBD_GetLen+0x12>
  }

  return len;
 800a712:	7bfb      	ldrb	r3, [r7, #15]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2202      	movs	r2, #2
 800a730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	2100      	movs	r1, #0
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f003 fc01 	bl	800df4e <USBD_LL_Transmit>

  return USBD_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	2100      	movs	r1, #0
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f003 fbf0 	bl	800df4e <USBD_LL_Transmit>

  return USBD_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2203      	movs	r2, #3
 800a788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f003 fbf4 	bl	800df90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f003 fbe3 	bl	800df90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2204      	movs	r2, #4
 800a7e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f003 fbaf 	bl	800df4e <USBD_LL_Transmit>

  return USBD_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2205      	movs	r2, #5
 800a806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a80a:	2300      	movs	r3, #0
 800a80c:	2200      	movs	r2, #0
 800a80e:	2100      	movs	r1, #0
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f003 fbbd 	bl	800df90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <__NVIC_SetPriority>:
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	6039      	str	r1, [r7, #0]
 800a82a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a82c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a830:	2b00      	cmp	r3, #0
 800a832:	db0a      	blt.n	800a84a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	b2da      	uxtb	r2, r3
 800a838:	490c      	ldr	r1, [pc, #48]	; (800a86c <__NVIC_SetPriority+0x4c>)
 800a83a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a83e:	0112      	lsls	r2, r2, #4
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	440b      	add	r3, r1
 800a844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a848:	e00a      	b.n	800a860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	4908      	ldr	r1, [pc, #32]	; (800a870 <__NVIC_SetPriority+0x50>)
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	3b04      	subs	r3, #4
 800a858:	0112      	lsls	r2, r2, #4
 800a85a:	b2d2      	uxtb	r2, r2
 800a85c:	440b      	add	r3, r1
 800a85e:	761a      	strb	r2, [r3, #24]
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	e000e100 	.word	0xe000e100
 800a870:	e000ed00 	.word	0xe000ed00

0800a874 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <SysTick_Handler+0x1c>)
 800a87a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a87c:	f001 feb2 	bl	800c5e4 <xTaskGetSchedulerState>
 800a880:	4603      	mov	r3, r0
 800a882:	2b01      	cmp	r3, #1
 800a884:	d001      	beq.n	800a88a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a886:	f002 fc97 	bl	800d1b8 <xPortSysTickHandler>
  }
}
 800a88a:	bf00      	nop
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	e000e010 	.word	0xe000e010

0800a894 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a898:	2100      	movs	r1, #0
 800a89a:	f06f 0004 	mvn.w	r0, #4
 800a89e:	f7ff ffbf 	bl	800a820 <__NVIC_SetPriority>
#endif
}
 800a8a2:	bf00      	nop
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ae:	f3ef 8305 	mrs	r3, IPSR
 800a8b2:	603b      	str	r3, [r7, #0]
  return(result);
 800a8b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a8ba:	f06f 0305 	mvn.w	r3, #5
 800a8be:	607b      	str	r3, [r7, #4]
 800a8c0:	e00c      	b.n	800a8dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a8c2:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <osKernelInitialize+0x44>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d105      	bne.n	800a8d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a8ca:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <osKernelInitialize+0x44>)
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	607b      	str	r3, [r7, #4]
 800a8d4:	e002      	b.n	800a8dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a8dc:	687b      	ldr	r3, [r7, #4]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	20000868 	.word	0x20000868

0800a8f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8f6:	f3ef 8305 	mrs	r3, IPSR
 800a8fa:	603b      	str	r3, [r7, #0]
  return(result);
 800a8fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a902:	f06f 0305 	mvn.w	r3, #5
 800a906:	607b      	str	r3, [r7, #4]
 800a908:	e010      	b.n	800a92c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a90a:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <osKernelStart+0x48>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d109      	bne.n	800a926 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a912:	f7ff ffbf 	bl	800a894 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a916:	4b08      	ldr	r3, [pc, #32]	; (800a938 <osKernelStart+0x48>)
 800a918:	2202      	movs	r2, #2
 800a91a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a91c:	f001 fa1a 	bl	800bd54 <vTaskStartScheduler>
      stat = osOK;
 800a920:	2300      	movs	r3, #0
 800a922:	607b      	str	r3, [r7, #4]
 800a924:	e002      	b.n	800a92c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a926:	f04f 33ff 	mov.w	r3, #4294967295
 800a92a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a92c:	687b      	ldr	r3, [r7, #4]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20000868 	.word	0x20000868

0800a93c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08e      	sub	sp, #56	; 0x38
 800a940:	af04      	add	r7, sp, #16
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a948:	2300      	movs	r3, #0
 800a94a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a94c:	f3ef 8305 	mrs	r3, IPSR
 800a950:	617b      	str	r3, [r7, #20]
  return(result);
 800a952:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a954:	2b00      	cmp	r3, #0
 800a956:	d17f      	bne.n	800aa58 <osThreadNew+0x11c>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d07c      	beq.n	800aa58 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a95e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a962:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a964:	2318      	movs	r3, #24
 800a966:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a968:	2300      	movs	r3, #0
 800a96a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a96c:	f04f 33ff 	mov.w	r3, #4294967295
 800a970:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d045      	beq.n	800aa04 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <osThreadNew+0x4a>
        name = attr->name;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d008      	beq.n	800a9ac <osThreadNew+0x70>
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	2b38      	cmp	r3, #56	; 0x38
 800a99e:	d805      	bhi.n	800a9ac <osThreadNew+0x70>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <osThreadNew+0x74>
        return (NULL);
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e054      	b.n	800aa5a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	089b      	lsrs	r3, r3, #2
 800a9be:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00e      	beq.n	800a9e6 <osThreadNew+0xaa>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	2b6b      	cmp	r3, #107	; 0x6b
 800a9ce:	d90a      	bls.n	800a9e6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d006      	beq.n	800a9e6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <osThreadNew+0xaa>
        mem = 1;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	61bb      	str	r3, [r7, #24]
 800a9e4:	e010      	b.n	800aa08 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10c      	bne.n	800aa08 <osThreadNew+0xcc>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <osThreadNew+0xcc>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d104      	bne.n	800aa08 <osThreadNew+0xcc>
          mem = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61bb      	str	r3, [r7, #24]
 800aa02:	e001      	b.n	800aa08 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d110      	bne.n	800aa30 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa16:	9202      	str	r2, [sp, #8]
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	6a3a      	ldr	r2, [r7, #32]
 800aa22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 feb9 	bl	800b79c <xTaskCreateStatic>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	e013      	b.n	800aa58 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d110      	bne.n	800aa58 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	f107 0310 	add.w	r3, r7, #16
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 ff04 	bl	800b856 <xTaskCreate>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d001      	beq.n	800aa58 <osThreadNew+0x11c>
            hTask = NULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aa58:	693b      	ldr	r3, [r7, #16]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3728      	adds	r7, #40	; 0x28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa6a:	f3ef 8305 	mrs	r3, IPSR
 800aa6e:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <osDelay+0x1c>
    stat = osErrorISR;
 800aa76:	f06f 0305 	mvn.w	r3, #5
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	e007      	b.n	800aa8e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <osDelay+0x2c>
      vTaskDelay(ticks);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 f829 	bl	800bae0 <vTaskDelay>
    }
  }

  return (stat);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08a      	sub	sp, #40	; 0x28
 800aa9c:	af02      	add	r7, sp, #8
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaa8:	f3ef 8305 	mrs	r3, IPSR
 800aaac:	613b      	str	r3, [r7, #16]
  return(result);
 800aaae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d15f      	bne.n	800ab74 <osMessageQueueNew+0xdc>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d05c      	beq.n	800ab74 <osMessageQueueNew+0xdc>
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d059      	beq.n	800ab74 <osMessageQueueNew+0xdc>
    mem = -1;
 800aac0:	f04f 33ff 	mov.w	r3, #4294967295
 800aac4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d029      	beq.n	800ab20 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d012      	beq.n	800aafa <osMessageQueueNew+0x62>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	2b4f      	cmp	r3, #79	; 0x4f
 800aada:	d90e      	bls.n	800aafa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00a      	beq.n	800aafa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	695a      	ldr	r2, [r3, #20]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	fb01 f303 	mul.w	r3, r1, r3
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d302      	bcc.n	800aafa <osMessageQueueNew+0x62>
        mem = 1;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	61bb      	str	r3, [r7, #24]
 800aaf8:	e014      	b.n	800ab24 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d110      	bne.n	800ab24 <osMessageQueueNew+0x8c>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10c      	bne.n	800ab24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d108      	bne.n	800ab24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d104      	bne.n	800ab24 <osMessageQueueNew+0x8c>
          mem = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	61bb      	str	r3, [r7, #24]
 800ab1e:	e001      	b.n	800ab24 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d10b      	bne.n	800ab42 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	691a      	ldr	r2, [r3, #16]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	2100      	movs	r1, #0
 800ab34:	9100      	str	r1, [sp, #0]
 800ab36:	68b9      	ldr	r1, [r7, #8]
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 f971 	bl	800ae20 <xQueueGenericCreateStatic>
 800ab3e:	61f8      	str	r0, [r7, #28]
 800ab40:	e008      	b.n	800ab54 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d105      	bne.n	800ab54 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ab48:	2200      	movs	r2, #0
 800ab4a:	68b9      	ldr	r1, [r7, #8]
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 f9df 	bl	800af10 <xQueueGenericCreate>
 800ab52:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00c      	beq.n	800ab74 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	617b      	str	r3, [r7, #20]
 800ab66:	e001      	b.n	800ab6c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ab6c:	6979      	ldr	r1, [r7, #20]
 800ab6e:	69f8      	ldr	r0, [r7, #28]
 800ab70:	f000 fdb6 	bl	800b6e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ab74:	69fb      	ldr	r3, [r7, #28]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3720      	adds	r7, #32
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	4a07      	ldr	r2, [pc, #28]	; (800abac <vApplicationGetIdleTaskMemory+0x2c>)
 800ab90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	4a06      	ldr	r2, [pc, #24]	; (800abb0 <vApplicationGetIdleTaskMemory+0x30>)
 800ab96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab9e:	601a      	str	r2, [r3, #0]
}
 800aba0:	bf00      	nop
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	2000086c 	.word	0x2000086c
 800abb0:	200008d8 	.word	0x200008d8

0800abb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4a07      	ldr	r2, [pc, #28]	; (800abe0 <vApplicationGetTimerTaskMemory+0x2c>)
 800abc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	4a06      	ldr	r2, [pc, #24]	; (800abe4 <vApplicationGetTimerTaskMemory+0x30>)
 800abca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abd2:	601a      	str	r2, [r3, #0]
}
 800abd4:	bf00      	nop
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	20000cd8 	.word	0x20000cd8
 800abe4:	20000d44 	.word	0x20000d44

0800abe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f103 0208 	add.w	r2, r3, #8
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ac00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f103 0208 	add.w	r2, r3, #8
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f103 0208 	add.w	r2, r3, #8
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac36:	bf00      	nop
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	601a      	str	r2, [r3, #0]
}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca0:	d103      	bne.n	800acaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	e00c      	b.n	800acc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3308      	adds	r3, #8
 800acae:	60fb      	str	r3, [r7, #12]
 800acb0:	e002      	b.n	800acb8 <vListInsert+0x2e>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d2f6      	bcs.n	800acb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	601a      	str	r2, [r3, #0]
}
 800acf0:	bf00      	nop
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	6892      	ldr	r2, [r2, #8]
 800ad12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	6852      	ldr	r2, [r2, #4]
 800ad1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d103      	bne.n	800ad30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689a      	ldr	r2, [r3, #8]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	1e5a      	subs	r2, r3, #1
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad76:	bf00      	nop
 800ad78:	e7fe      	b.n	800ad78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad7a:	f002 f98b 	bl	800d094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad86:	68f9      	ldr	r1, [r7, #12]
 800ad88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad8a:	fb01 f303 	mul.w	r3, r1, r3
 800ad8e:	441a      	add	r2, r3
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adaa:	3b01      	subs	r3, #1
 800adac:	68f9      	ldr	r1, [r7, #12]
 800adae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800adb0:	fb01 f303 	mul.w	r3, r1, r3
 800adb4:	441a      	add	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	22ff      	movs	r2, #255	; 0xff
 800adbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	22ff      	movs	r2, #255	; 0xff
 800adc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d114      	bne.n	800adfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01a      	beq.n	800ae0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3310      	adds	r3, #16
 800addc:	4618      	mov	r0, r3
 800adde:	f001 fa43 	bl	800c268 <xTaskRemoveFromEventList>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d012      	beq.n	800ae0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ade8:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <xQueueGenericReset+0xcc>)
 800adea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	e009      	b.n	800ae0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3310      	adds	r3, #16
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fef2 	bl	800abe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	3324      	adds	r3, #36	; 0x24
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff feed 	bl	800abe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae0e:	f002 f971 	bl	800d0f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae12:	2301      	movs	r3, #1
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	e000ed04 	.word	0xe000ed04

0800ae20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08e      	sub	sp, #56	; 0x38
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d002      	beq.n	800ae72 <xQueueGenericCreateStatic+0x52>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <xQueueGenericCreateStatic+0x56>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e000      	b.n	800ae78 <xQueueGenericCreateStatic+0x58>
 800ae76:	2300      	movs	r3, #0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	623b      	str	r3, [r7, #32]
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d102      	bne.n	800ae9e <xQueueGenericCreateStatic+0x7e>
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <xQueueGenericCreateStatic+0x82>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <xQueueGenericCreateStatic+0x84>
 800aea2:	2300      	movs	r3, #0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10a      	bne.n	800aebe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	61fb      	str	r3, [r7, #28]
}
 800aeba:	bf00      	nop
 800aebc:	e7fe      	b.n	800aebc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aebe:	2350      	movs	r3, #80	; 0x50
 800aec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b50      	cmp	r3, #80	; 0x50
 800aec6:	d00a      	beq.n	800aede <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	61bb      	str	r3, [r7, #24]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aede:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00d      	beq.n	800af06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aef2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	4613      	mov	r3, r2
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	68b9      	ldr	r1, [r7, #8]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 f83f 	bl	800af84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800af08:	4618      	mov	r0, r3
 800af0a:	3730      	adds	r7, #48	; 0x30
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	; 0x28
 800af14:	af02      	add	r7, sp, #8
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10a      	bne.n	800af3a <xQueueGenericCreate+0x2a>
	__asm volatile
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	613b      	str	r3, [r7, #16]
}
 800af36:	bf00      	nop
 800af38:	e7fe      	b.n	800af38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	fb02 f303 	mul.w	r3, r2, r3
 800af42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	3350      	adds	r3, #80	; 0x50
 800af48:	4618      	mov	r0, r3
 800af4a:	f002 f9c5 	bl	800d2d8 <pvPortMalloc>
 800af4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d011      	beq.n	800af7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	3350      	adds	r3, #80	; 0x50
 800af5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af68:	79fa      	ldrb	r2, [r7, #7]
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	4613      	mov	r3, r2
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	68b9      	ldr	r1, [r7, #8]
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 f805 	bl	800af84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af7a:	69bb      	ldr	r3, [r7, #24]
	}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3720      	adds	r7, #32
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d103      	bne.n	800afa0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	e002      	b.n	800afa6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afb2:	2101      	movs	r1, #1
 800afb4:	69b8      	ldr	r0, [r7, #24]
 800afb6:	f7ff fecb 	bl	800ad50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	78fa      	ldrb	r2, [r7, #3]
 800afbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08e      	sub	sp, #56	; 0x38
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800afda:	2300      	movs	r3, #0
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <xQueueGenericSend+0x32>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d103      	bne.n	800b00c <xQueueGenericSend+0x40>
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <xQueueGenericSend+0x44>
 800b00c:	2301      	movs	r3, #1
 800b00e:	e000      	b.n	800b012 <xQueueGenericSend+0x46>
 800b010:	2300      	movs	r3, #0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10a      	bne.n	800b02c <xQueueGenericSend+0x60>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d103      	bne.n	800b03a <xQueueGenericSend+0x6e>
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b036:	2b01      	cmp	r3, #1
 800b038:	d101      	bne.n	800b03e <xQueueGenericSend+0x72>
 800b03a:	2301      	movs	r3, #1
 800b03c:	e000      	b.n	800b040 <xQueueGenericSend+0x74>
 800b03e:	2300      	movs	r3, #0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10a      	bne.n	800b05a <xQueueGenericSend+0x8e>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	623b      	str	r3, [r7, #32]
}
 800b056:	bf00      	nop
 800b058:	e7fe      	b.n	800b058 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b05a:	f001 fac3 	bl	800c5e4 <xTaskGetSchedulerState>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <xQueueGenericSend+0x9e>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d101      	bne.n	800b06e <xQueueGenericSend+0xa2>
 800b06a:	2301      	movs	r3, #1
 800b06c:	e000      	b.n	800b070 <xQueueGenericSend+0xa4>
 800b06e:	2300      	movs	r3, #0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <xQueueGenericSend+0xbe>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	61fb      	str	r3, [r7, #28]
}
 800b086:	bf00      	nop
 800b088:	e7fe      	b.n	800b088 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b08a:	f002 f803 	bl	800d094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b096:	429a      	cmp	r2, r3
 800b098:	d302      	bcc.n	800b0a0 <xQueueGenericSend+0xd4>
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d129      	bne.n	800b0f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	68b9      	ldr	r1, [r7, #8]
 800b0a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0a6:	f000 fa0b 	bl	800b4c0 <prvCopyDataToQueue>
 800b0aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d010      	beq.n	800b0d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b6:	3324      	adds	r3, #36	; 0x24
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f001 f8d5 	bl	800c268 <xTaskRemoveFromEventList>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d013      	beq.n	800b0ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b0c4:	4b3f      	ldr	r3, [pc, #252]	; (800b1c4 <xQueueGenericSend+0x1f8>)
 800b0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	e00a      	b.n	800b0ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d007      	beq.n	800b0ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0dc:	4b39      	ldr	r3, [pc, #228]	; (800b1c4 <xQueueGenericSend+0x1f8>)
 800b0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0ec:	f002 f802 	bl	800d0f4 <vPortExitCritical>
				return pdPASS;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e063      	b.n	800b1bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d103      	bne.n	800b102 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0fa:	f001 fffb 	bl	800d0f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	e05c      	b.n	800b1bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b104:	2b00      	cmp	r3, #0
 800b106:	d106      	bne.n	800b116 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b108:	f107 0314 	add.w	r3, r7, #20
 800b10c:	4618      	mov	r0, r3
 800b10e:	f001 f90f 	bl	800c330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b112:	2301      	movs	r3, #1
 800b114:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b116:	f001 ffed 	bl	800d0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b11a:	f000 fe81 	bl	800be20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b11e:	f001 ffb9 	bl	800d094 <vPortEnterCritical>
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b128:	b25b      	sxtb	r3, r3
 800b12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12e:	d103      	bne.n	800b138 <xQueueGenericSend+0x16c>
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b13e:	b25b      	sxtb	r3, r3
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b144:	d103      	bne.n	800b14e <xQueueGenericSend+0x182>
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b14e:	f001 ffd1 	bl	800d0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b152:	1d3a      	adds	r2, r7, #4
 800b154:	f107 0314 	add.w	r3, r7, #20
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f001 f8fe 	bl	800c35c <xTaskCheckForTimeOut>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d124      	bne.n	800b1b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b168:	f000 faa2 	bl	800b6b0 <prvIsQueueFull>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d018      	beq.n	800b1a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	3310      	adds	r3, #16
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	4611      	mov	r1, r2
 800b17a:	4618      	mov	r0, r3
 800b17c:	f001 f824 	bl	800c1c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b182:	f000 fa2d 	bl	800b5e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b186:	f000 fe59 	bl	800be3c <xTaskResumeAll>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f47f af7c 	bne.w	800b08a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b192:	4b0c      	ldr	r3, [pc, #48]	; (800b1c4 <xQueueGenericSend+0x1f8>)
 800b194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	e772      	b.n	800b08a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1a6:	f000 fa1b 	bl	800b5e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1aa:	f000 fe47 	bl	800be3c <xTaskResumeAll>
 800b1ae:	e76c      	b.n	800b08a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1b2:	f000 fa15 	bl	800b5e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1b6:	f000 fe41 	bl	800be3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3738      	adds	r7, #56	; 0x38
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	e000ed04 	.word	0xe000ed04

0800b1c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b090      	sub	sp, #64	; 0x40
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10a      	bne.n	800b1f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d103      	bne.n	800b204 <xQueueGenericSendFromISR+0x3c>
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <xQueueGenericSendFromISR+0x40>
 800b204:	2301      	movs	r3, #1
 800b206:	e000      	b.n	800b20a <xQueueGenericSendFromISR+0x42>
 800b208:	2300      	movs	r3, #0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10a      	bne.n	800b224 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b220:	bf00      	nop
 800b222:	e7fe      	b.n	800b222 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d103      	bne.n	800b232 <xQueueGenericSendFromISR+0x6a>
 800b22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d101      	bne.n	800b236 <xQueueGenericSendFromISR+0x6e>
 800b232:	2301      	movs	r3, #1
 800b234:	e000      	b.n	800b238 <xQueueGenericSendFromISR+0x70>
 800b236:	2300      	movs	r3, #0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10a      	bne.n	800b252 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	623b      	str	r3, [r7, #32]
}
 800b24e:	bf00      	nop
 800b250:	e7fe      	b.n	800b250 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b252:	f002 f801 	bl	800d258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b256:	f3ef 8211 	mrs	r2, BASEPRI
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	61fa      	str	r2, [r7, #28]
 800b26c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b26e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b270:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d302      	bcc.n	800b284 <xQueueGenericSendFromISR+0xbc>
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2b02      	cmp	r3, #2
 800b282:	d12f      	bne.n	800b2e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	68b9      	ldr	r1, [r7, #8]
 800b298:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b29a:	f000 f911 	bl	800b4c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b29e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a6:	d112      	bne.n	800b2ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d016      	beq.n	800b2de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	3324      	adds	r3, #36	; 0x24
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 ffd7 	bl	800c268 <xTaskRemoveFromEventList>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00e      	beq.n	800b2de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]
 800b2cc:	e007      	b.n	800b2de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	b25a      	sxtb	r2, r3
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b2e2:	e001      	b.n	800b2e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b2f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3740      	adds	r7, #64	; 0x40
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08c      	sub	sp, #48	; 0x30
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b30c:	2300      	movs	r3, #0
 800b30e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10a      	bne.n	800b330 <xQueueReceive+0x30>
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	623b      	str	r3, [r7, #32]
}
 800b32c:	bf00      	nop
 800b32e:	e7fe      	b.n	800b32e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d103      	bne.n	800b33e <xQueueReceive+0x3e>
 800b336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <xQueueReceive+0x42>
 800b33e:	2301      	movs	r3, #1
 800b340:	e000      	b.n	800b344 <xQueueReceive+0x44>
 800b342:	2300      	movs	r3, #0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10a      	bne.n	800b35e <xQueueReceive+0x5e>
	__asm volatile
 800b348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	61fb      	str	r3, [r7, #28]
}
 800b35a:	bf00      	nop
 800b35c:	e7fe      	b.n	800b35c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b35e:	f001 f941 	bl	800c5e4 <xTaskGetSchedulerState>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <xQueueReceive+0x6e>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d101      	bne.n	800b372 <xQueueReceive+0x72>
 800b36e:	2301      	movs	r3, #1
 800b370:	e000      	b.n	800b374 <xQueueReceive+0x74>
 800b372:	2300      	movs	r3, #0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10a      	bne.n	800b38e <xQueueReceive+0x8e>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	61bb      	str	r3, [r7, #24]
}
 800b38a:	bf00      	nop
 800b38c:	e7fe      	b.n	800b38c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b38e:	f001 fe81 	bl	800d094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b396:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d01f      	beq.n	800b3de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b39e:	68b9      	ldr	r1, [r7, #8]
 800b3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3a2:	f000 f8f7 	bl	800b594 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	1e5a      	subs	r2, r3, #1
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00f      	beq.n	800b3d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b8:	3310      	adds	r3, #16
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 ff54 	bl	800c268 <xTaskRemoveFromEventList>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d007      	beq.n	800b3d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3c6:	4b3d      	ldr	r3, [pc, #244]	; (800b4bc <xQueueReceive+0x1bc>)
 800b3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3d6:	f001 fe8d 	bl	800d0f4 <vPortExitCritical>
				return pdPASS;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e069      	b.n	800b4b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d103      	bne.n	800b3ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3e4:	f001 fe86 	bl	800d0f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e062      	b.n	800b4b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3f2:	f107 0310 	add.w	r3, r7, #16
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 ff9a 	bl	800c330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b400:	f001 fe78 	bl	800d0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b404:	f000 fd0c 	bl	800be20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b408:	f001 fe44 	bl	800d094 <vPortEnterCritical>
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b412:	b25b      	sxtb	r3, r3
 800b414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b418:	d103      	bne.n	800b422 <xQueueReceive+0x122>
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b428:	b25b      	sxtb	r3, r3
 800b42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42e:	d103      	bne.n	800b438 <xQueueReceive+0x138>
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b438:	f001 fe5c 	bl	800d0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b43c:	1d3a      	adds	r2, r7, #4
 800b43e:	f107 0310 	add.w	r3, r7, #16
 800b442:	4611      	mov	r1, r2
 800b444:	4618      	mov	r0, r3
 800b446:	f000 ff89 	bl	800c35c <xTaskCheckForTimeOut>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d123      	bne.n	800b498 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b452:	f000 f917 	bl	800b684 <prvIsQueueEmpty>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d017      	beq.n	800b48c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45e:	3324      	adds	r3, #36	; 0x24
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	4611      	mov	r1, r2
 800b464:	4618      	mov	r0, r3
 800b466:	f000 feaf 	bl	800c1c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b46c:	f000 f8b8 	bl	800b5e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b470:	f000 fce4 	bl	800be3c <xTaskResumeAll>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d189      	bne.n	800b38e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b47a:	4b10      	ldr	r3, [pc, #64]	; (800b4bc <xQueueReceive+0x1bc>)
 800b47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	e780      	b.n	800b38e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b48c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b48e:	f000 f8a7 	bl	800b5e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b492:	f000 fcd3 	bl	800be3c <xTaskResumeAll>
 800b496:	e77a      	b.n	800b38e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b49a:	f000 f8a1 	bl	800b5e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b49e:	f000 fccd 	bl	800be3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4a4:	f000 f8ee 	bl	800b684 <prvIsQueueEmpty>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f43f af6f 	beq.w	800b38e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3730      	adds	r7, #48	; 0x30
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	e000ed04 	.word	0xe000ed04

0800b4c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10d      	bne.n	800b4fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d14d      	bne.n	800b582 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f001 f898 	bl	800c620 <xTaskPriorityDisinherit>
 800b4f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	609a      	str	r2, [r3, #8]
 800b4f8:	e043      	b.n	800b582 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d119      	bne.n	800b534 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6858      	ldr	r0, [r3, #4]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b508:	461a      	mov	r2, r3
 800b50a:	68b9      	ldr	r1, [r7, #8]
 800b50c:	f002 fdf2 	bl	800e0f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b518:	441a      	add	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	429a      	cmp	r2, r3
 800b528:	d32b      	bcc.n	800b582 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	605a      	str	r2, [r3, #4]
 800b532:	e026      	b.n	800b582 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	68d8      	ldr	r0, [r3, #12]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53c:	461a      	mov	r2, r3
 800b53e:	68b9      	ldr	r1, [r7, #8]
 800b540:	f002 fdd8 	bl	800e0f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54c:	425b      	negs	r3, r3
 800b54e:	441a      	add	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	68da      	ldr	r2, [r3, #12]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d207      	bcs.n	800b570 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	689a      	ldr	r2, [r3, #8]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b568:	425b      	negs	r3, r3
 800b56a:	441a      	add	r2, r3
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d105      	bne.n	800b582 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d002      	beq.n	800b582 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	3b01      	subs	r3, #1
 800b580:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b58a:	697b      	ldr	r3, [r7, #20]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d018      	beq.n	800b5d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68da      	ldr	r2, [r3, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	441a      	add	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d303      	bcc.n	800b5c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68d9      	ldr	r1, [r3, #12]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	6838      	ldr	r0, [r7, #0]
 800b5d4:	f002 fd8e 	bl	800e0f4 <memcpy>
	}
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5e8:	f001 fd54 	bl	800d094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5f4:	e011      	b.n	800b61a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d012      	beq.n	800b624 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3324      	adds	r3, #36	; 0x24
 800b602:	4618      	mov	r0, r3
 800b604:	f000 fe30 	bl	800c268 <xTaskRemoveFromEventList>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b60e:	f000 ff07 	bl	800c420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	3b01      	subs	r3, #1
 800b616:	b2db      	uxtb	r3, r3
 800b618:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b61a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	dce9      	bgt.n	800b5f6 <prvUnlockQueue+0x16>
 800b622:	e000      	b.n	800b626 <prvUnlockQueue+0x46>
					break;
 800b624:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	22ff      	movs	r2, #255	; 0xff
 800b62a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b62e:	f001 fd61 	bl	800d0f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b632:	f001 fd2f 	bl	800d094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b63c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b63e:	e011      	b.n	800b664 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d012      	beq.n	800b66e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3310      	adds	r3, #16
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fe0b 	bl	800c268 <xTaskRemoveFromEventList>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d001      	beq.n	800b65c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b658:	f000 fee2 	bl	800c420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b65c:	7bbb      	ldrb	r3, [r7, #14]
 800b65e:	3b01      	subs	r3, #1
 800b660:	b2db      	uxtb	r3, r3
 800b662:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dce9      	bgt.n	800b640 <prvUnlockQueue+0x60>
 800b66c:	e000      	b.n	800b670 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b66e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	22ff      	movs	r2, #255	; 0xff
 800b674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b678:	f001 fd3c 	bl	800d0f4 <vPortExitCritical>
}
 800b67c:	bf00      	nop
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b68c:	f001 fd02 	bl	800d094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b698:	2301      	movs	r3, #1
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	e001      	b.n	800b6a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6a2:	f001 fd27 	bl	800d0f4 <vPortExitCritical>

	return xReturn;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6b8:	f001 fcec 	bl	800d094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d102      	bne.n	800b6ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	e001      	b.n	800b6d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6d2:	f001 fd0f 	bl	800d0f4 <vPortExitCritical>

	return xReturn;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60fb      	str	r3, [r7, #12]
 800b6ee:	e014      	b.n	800b71a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b6f0:	4a0f      	ldr	r2, [pc, #60]	; (800b730 <vQueueAddToRegistry+0x50>)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10b      	bne.n	800b714 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b6fc:	490c      	ldr	r1, [pc, #48]	; (800b730 <vQueueAddToRegistry+0x50>)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b706:	4a0a      	ldr	r2, [pc, #40]	; (800b730 <vQueueAddToRegistry+0x50>)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	00db      	lsls	r3, r3, #3
 800b70c:	4413      	add	r3, r2
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b712:	e006      	b.n	800b722 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3301      	adds	r3, #1
 800b718:	60fb      	str	r3, [r7, #12]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b07      	cmp	r3, #7
 800b71e:	d9e7      	bls.n	800b6f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b720:	bf00      	nop
 800b722:	bf00      	nop
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	20001544 	.word	0x20001544

0800b734 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b744:	f001 fca6 	bl	800d094 <vPortEnterCritical>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b74e:	b25b      	sxtb	r3, r3
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b754:	d103      	bne.n	800b75e <vQueueWaitForMessageRestricted+0x2a>
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b764:	b25b      	sxtb	r3, r3
 800b766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76a:	d103      	bne.n	800b774 <vQueueWaitForMessageRestricted+0x40>
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b774:	f001 fcbe 	bl	800d0f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d106      	bne.n	800b78e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	3324      	adds	r3, #36	; 0x24
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	68b9      	ldr	r1, [r7, #8]
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 fd41 	bl	800c210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b78e:	6978      	ldr	r0, [r7, #20]
 800b790:	f7ff ff26 	bl	800b5e0 <prvUnlockQueue>
	}
 800b794:	bf00      	nop
 800b796:	3718      	adds	r7, #24
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08e      	sub	sp, #56	; 0x38
 800b7a0:	af04      	add	r7, sp, #16
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	623b      	str	r3, [r7, #32]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10a      	bne.n	800b7e2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	61fb      	str	r3, [r7, #28]
}
 800b7de:	bf00      	nop
 800b7e0:	e7fe      	b.n	800b7e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7e2:	236c      	movs	r3, #108	; 0x6c
 800b7e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	2b6c      	cmp	r3, #108	; 0x6c
 800b7ea:	d00a      	beq.n	800b802 <xTaskCreateStatic+0x66>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	61bb      	str	r3, [r7, #24]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b802:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	2b00      	cmp	r3, #0
 800b808:	d01e      	beq.n	800b848 <xTaskCreateStatic+0xac>
 800b80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d01b      	beq.n	800b848 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b818:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	2202      	movs	r2, #2
 800b81e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b822:	2300      	movs	r3, #0
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	f107 0314 	add.w	r3, r7, #20
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 f850 	bl	800b8e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b842:	f000 f8dd 	bl	800ba00 <prvAddNewTaskToReadyList>
 800b846:	e001      	b.n	800b84c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b84c:	697b      	ldr	r3, [r7, #20]
	}
 800b84e:	4618      	mov	r0, r3
 800b850:	3728      	adds	r7, #40	; 0x28
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b856:	b580      	push	{r7, lr}
 800b858:	b08c      	sub	sp, #48	; 0x30
 800b85a:	af04      	add	r7, sp, #16
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	603b      	str	r3, [r7, #0]
 800b862:	4613      	mov	r3, r2
 800b864:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b866:	88fb      	ldrh	r3, [r7, #6]
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 fd34 	bl	800d2d8 <pvPortMalloc>
 800b870:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00e      	beq.n	800b896 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b878:	206c      	movs	r0, #108	; 0x6c
 800b87a:	f001 fd2d 	bl	800d2d8 <pvPortMalloc>
 800b87e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d003      	beq.n	800b88e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	631a      	str	r2, [r3, #48]	; 0x30
 800b88c:	e005      	b.n	800b89a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b88e:	6978      	ldr	r0, [r7, #20]
 800b890:	f001 fdee 	bl	800d470 <vPortFree>
 800b894:	e001      	b.n	800b89a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b896:	2300      	movs	r3, #0
 800b898:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d017      	beq.n	800b8d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8a8:	88fa      	ldrh	r2, [r7, #6]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9303      	str	r3, [sp, #12]
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	9302      	str	r3, [sp, #8]
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f000 f80e 	bl	800b8e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c4:	69f8      	ldr	r0, [r7, #28]
 800b8c6:	f000 f89b 	bl	800ba00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	61bb      	str	r3, [r7, #24]
 800b8ce:	e002      	b.n	800b8d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8d6:	69bb      	ldr	r3, [r7, #24]
	}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3720      	adds	r7, #32
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	21a5      	movs	r1, #165	; 0xa5
 800b8fa:	f002 fc09 	bl	800e110 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b908:	3b01      	subs	r3, #1
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	f023 0307 	bic.w	r3, r3, #7
 800b916:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	f003 0307 	and.w	r3, r3, #7
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00a      	beq.n	800b938 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	617b      	str	r3, [r7, #20]
}
 800b934:	bf00      	nop
 800b936:	e7fe      	b.n	800b936 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d01f      	beq.n	800b97e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b93e:	2300      	movs	r3, #0
 800b940:	61fb      	str	r3, [r7, #28]
 800b942:	e012      	b.n	800b96a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	4413      	add	r3, r2
 800b94a:	7819      	ldrb	r1, [r3, #0]
 800b94c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	4413      	add	r3, r2
 800b952:	3334      	adds	r3, #52	; 0x34
 800b954:	460a      	mov	r2, r1
 800b956:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	4413      	add	r3, r2
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d006      	beq.n	800b972 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	3301      	adds	r3, #1
 800b968:	61fb      	str	r3, [r7, #28]
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	2b1d      	cmp	r3, #29
 800b96e:	d9e9      	bls.n	800b944 <prvInitialiseNewTask+0x64>
 800b970:	e000      	b.n	800b974 <prvInitialiseNewTask+0x94>
			{
				break;
 800b972:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b976:	2200      	movs	r2, #0
 800b978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800b97c:	e003      	b.n	800b986 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	2b37      	cmp	r3, #55	; 0x37
 800b98a:	d901      	bls.n	800b990 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b98c:	2337      	movs	r3, #55	; 0x37
 800b98e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b994:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b99a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	2200      	movs	r2, #0
 800b9a0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff f93e 	bl	800ac28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ae:	3318      	adds	r3, #24
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff f939 	bl	800ac28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	68f9      	ldr	r1, [r7, #12]
 800b9de:	69b8      	ldr	r0, [r7, #24]
 800b9e0:	f001 fa2e 	bl	800ce40 <pxPortInitialiseStack>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9f6:	bf00      	nop
 800b9f8:	3720      	adds	r7, #32
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
	...

0800ba00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba08:	f001 fb44 	bl	800d094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba0c:	4b2d      	ldr	r3, [pc, #180]	; (800bac4 <prvAddNewTaskToReadyList+0xc4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3301      	adds	r3, #1
 800ba12:	4a2c      	ldr	r2, [pc, #176]	; (800bac4 <prvAddNewTaskToReadyList+0xc4>)
 800ba14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba16:	4b2c      	ldr	r3, [pc, #176]	; (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d109      	bne.n	800ba32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba1e:	4a2a      	ldr	r2, [pc, #168]	; (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba24:	4b27      	ldr	r3, [pc, #156]	; (800bac4 <prvAddNewTaskToReadyList+0xc4>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d110      	bne.n	800ba4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba2c:	f000 fd1c 	bl	800c468 <prvInitialiseTaskLists>
 800ba30:	e00d      	b.n	800ba4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba32:	4b26      	ldr	r3, [pc, #152]	; (800bacc <prvAddNewTaskToReadyList+0xcc>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d109      	bne.n	800ba4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba3a:	4b23      	ldr	r3, [pc, #140]	; (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d802      	bhi.n	800ba4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba48:	4a1f      	ldr	r2, [pc, #124]	; (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba4e:	4b20      	ldr	r3, [pc, #128]	; (800bad0 <prvAddNewTaskToReadyList+0xd0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3301      	adds	r3, #1
 800ba54:	4a1e      	ldr	r2, [pc, #120]	; (800bad0 <prvAddNewTaskToReadyList+0xd0>)
 800ba56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba58:	4b1d      	ldr	r3, [pc, #116]	; (800bad0 <prvAddNewTaskToReadyList+0xd0>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	4b1b      	ldr	r3, [pc, #108]	; (800bad4 <prvAddNewTaskToReadyList+0xd4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d903      	bls.n	800ba74 <prvAddNewTaskToReadyList+0x74>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba70:	4a18      	ldr	r2, [pc, #96]	; (800bad4 <prvAddNewTaskToReadyList+0xd4>)
 800ba72:	6013      	str	r3, [r2, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4a15      	ldr	r2, [pc, #84]	; (800bad8 <prvAddNewTaskToReadyList+0xd8>)
 800ba82:	441a      	add	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	3304      	adds	r3, #4
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4610      	mov	r0, r2
 800ba8c:	f7ff f8d9 	bl	800ac42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba90:	f001 fb30 	bl	800d0f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba94:	4b0d      	ldr	r3, [pc, #52]	; (800bacc <prvAddNewTaskToReadyList+0xcc>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00e      	beq.n	800baba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba9c:	4b0a      	ldr	r3, [pc, #40]	; (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d207      	bcs.n	800baba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800baaa:	4b0c      	ldr	r3, [pc, #48]	; (800badc <prvAddNewTaskToReadyList+0xdc>)
 800baac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baba:	bf00      	nop
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20001a58 	.word	0x20001a58
 800bac8:	20001584 	.word	0x20001584
 800bacc:	20001a64 	.word	0x20001a64
 800bad0:	20001a74 	.word	0x20001a74
 800bad4:	20001a60 	.word	0x20001a60
 800bad8:	20001588 	.word	0x20001588
 800badc:	e000ed04 	.word	0xe000ed04

0800bae0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d017      	beq.n	800bb22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800baf2:	4b13      	ldr	r3, [pc, #76]	; (800bb40 <vTaskDelay+0x60>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <vTaskDelay+0x30>
	__asm volatile
 800bafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	60bb      	str	r3, [r7, #8]
}
 800bb0c:	bf00      	nop
 800bb0e:	e7fe      	b.n	800bb0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb10:	f000 f986 	bl	800be20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb14:	2100      	movs	r1, #0
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fdf0 	bl	800c6fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb1c:	f000 f98e 	bl	800be3c <xTaskResumeAll>
 800bb20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d107      	bne.n	800bb38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bb28:	4b06      	ldr	r3, [pc, #24]	; (800bb44 <vTaskDelay+0x64>)
 800bb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb38:	bf00      	nop
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	20001a80 	.word	0x20001a80
 800bb44:	e000ed04 	.word	0xe000ed04

0800bb48 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bb50:	f001 faa0 	bl	800d094 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d102      	bne.n	800bb60 <vTaskSuspend+0x18>
 800bb5a:	4b30      	ldr	r3, [pc, #192]	; (800bc1c <vTaskSuspend+0xd4>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	e000      	b.n	800bb62 <vTaskSuspend+0x1a>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3304      	adds	r3, #4
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff f8c7 	bl	800acfc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3318      	adds	r3, #24
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff f8be 	bl	800acfc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	3304      	adds	r3, #4
 800bb84:	4619      	mov	r1, r3
 800bb86:	4826      	ldr	r0, [pc, #152]	; (800bc20 <vTaskSuspend+0xd8>)
 800bb88:	f7ff f85b 	bl	800ac42 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d103      	bne.n	800bba0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800bba0:	f001 faa8 	bl	800d0f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800bba4:	4b1f      	ldr	r3, [pc, #124]	; (800bc24 <vTaskSuspend+0xdc>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d005      	beq.n	800bbb8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800bbac:	f001 fa72 	bl	800d094 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800bbb0:	f000 fcf8 	bl	800c5a4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800bbb4:	f001 fa9e 	bl	800d0f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800bbb8:	4b18      	ldr	r3, [pc, #96]	; (800bc1c <vTaskSuspend+0xd4>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d127      	bne.n	800bc12 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800bbc2:	4b18      	ldr	r3, [pc, #96]	; (800bc24 <vTaskSuspend+0xdc>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d017      	beq.n	800bbfa <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800bbca:	4b17      	ldr	r3, [pc, #92]	; (800bc28 <vTaskSuspend+0xe0>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00a      	beq.n	800bbe8 <vTaskSuspend+0xa0>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60bb      	str	r3, [r7, #8]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800bbe8:	4b10      	ldr	r3, [pc, #64]	; (800bc2c <vTaskSuspend+0xe4>)
 800bbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbf8:	e00b      	b.n	800bc12 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800bbfa:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <vTaskSuspend+0xd8>)
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <vTaskSuspend+0xe8>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d103      	bne.n	800bc0e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800bc06:	4b05      	ldr	r3, [pc, #20]	; (800bc1c <vTaskSuspend+0xd4>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]
	}
 800bc0c:	e001      	b.n	800bc12 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800bc0e:	f000 fa7d 	bl	800c10c <vTaskSwitchContext>
	}
 800bc12:	bf00      	nop
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20001584 	.word	0x20001584
 800bc20:	20001a44 	.word	0x20001a44
 800bc24:	20001a64 	.word	0x20001a64
 800bc28:	20001a80 	.word	0x20001a80
 800bc2c:	e000ed04 	.word	0xe000ed04
 800bc30:	20001a58 	.word	0x20001a58

0800bc34 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800bc34:	b480      	push	{r7}
 800bc36:	b087      	sub	sp, #28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	60fb      	str	r3, [r7, #12]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	4a0a      	ldr	r2, [pc, #40]	; (800bc90 <prvTaskIsTaskSuspended+0x5c>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d10a      	bne.n	800bc80 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6e:	4a09      	ldr	r2, [pc, #36]	; (800bc94 <prvTaskIsTaskSuspended+0x60>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d005      	beq.n	800bc80 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d101      	bne.n	800bc80 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc80:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bc82:	4618      	mov	r0, r3
 800bc84:	371c      	adds	r7, #28
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	20001a44 	.word	0x20001a44
 800bc94:	20001a18 	.word	0x20001a18

0800bc98 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10a      	bne.n	800bcc0 <vTaskResume+0x28>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	60bb      	str	r3, [r7, #8]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800bcc0:	4b20      	ldr	r3, [pc, #128]	; (800bd44 <vTaskResume+0xac>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d038      	beq.n	800bd3c <vTaskResume+0xa4>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d035      	beq.n	800bd3c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800bcd0:	f001 f9e0 	bl	800d094 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f7ff ffad 	bl	800bc34 <prvTaskIsTaskSuspended>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d02b      	beq.n	800bd38 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3304      	adds	r3, #4
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff f809 	bl	800acfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcee:	4b16      	ldr	r3, [pc, #88]	; (800bd48 <vTaskResume+0xb0>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d903      	bls.n	800bcfe <vTaskResume+0x66>
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfa:	4a13      	ldr	r2, [pc, #76]	; (800bd48 <vTaskResume+0xb0>)
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd02:	4613      	mov	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4a10      	ldr	r2, [pc, #64]	; (800bd4c <vTaskResume+0xb4>)
 800bd0c:	441a      	add	r2, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3304      	adds	r3, #4
 800bd12:	4619      	mov	r1, r3
 800bd14:	4610      	mov	r0, r2
 800bd16:	f7fe ff94 	bl	800ac42 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1e:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <vTaskResume+0xac>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d307      	bcc.n	800bd38 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bd28:	4b09      	ldr	r3, [pc, #36]	; (800bd50 <vTaskResume+0xb8>)
 800bd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800bd38:	f001 f9dc 	bl	800d0f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd3c:	bf00      	nop
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	20001584 	.word	0x20001584
 800bd48:	20001a60 	.word	0x20001a60
 800bd4c:	20001588 	.word	0x20001588
 800bd50:	e000ed04 	.word	0xe000ed04

0800bd54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b08a      	sub	sp, #40	; 0x28
 800bd58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd62:	463a      	mov	r2, r7
 800bd64:	1d39      	adds	r1, r7, #4
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fe ff08 	bl	800ab80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd70:	6839      	ldr	r1, [r7, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	9202      	str	r2, [sp, #8]
 800bd78:	9301      	str	r3, [sp, #4]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	2300      	movs	r3, #0
 800bd80:	460a      	mov	r2, r1
 800bd82:	4921      	ldr	r1, [pc, #132]	; (800be08 <vTaskStartScheduler+0xb4>)
 800bd84:	4821      	ldr	r0, [pc, #132]	; (800be0c <vTaskStartScheduler+0xb8>)
 800bd86:	f7ff fd09 	bl	800b79c <xTaskCreateStatic>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	4a20      	ldr	r2, [pc, #128]	; (800be10 <vTaskStartScheduler+0xbc>)
 800bd8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd90:	4b1f      	ldr	r3, [pc, #124]	; (800be10 <vTaskStartScheduler+0xbc>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	617b      	str	r3, [r7, #20]
 800bd9c:	e001      	b.n	800bda2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d102      	bne.n	800bdae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bda8:	f000 fcfc 	bl	800c7a4 <xTimerCreateTimerTask>
 800bdac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d116      	bne.n	800bde2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	613b      	str	r3, [r7, #16]
}
 800bdc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bdc8:	4b12      	ldr	r3, [pc, #72]	; (800be14 <vTaskStartScheduler+0xc0>)
 800bdca:	f04f 32ff 	mov.w	r2, #4294967295
 800bdce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bdd0:	4b11      	ldr	r3, [pc, #68]	; (800be18 <vTaskStartScheduler+0xc4>)
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bdd6:	4b11      	ldr	r3, [pc, #68]	; (800be1c <vTaskStartScheduler+0xc8>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bddc:	f001 f8b8 	bl	800cf50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bde0:	e00e      	b.n	800be00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde8:	d10a      	bne.n	800be00 <vTaskStartScheduler+0xac>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	60fb      	str	r3, [r7, #12]
}
 800bdfc:	bf00      	nop
 800bdfe:	e7fe      	b.n	800bdfe <vTaskStartScheduler+0xaa>
}
 800be00:	bf00      	nop
 800be02:	3718      	adds	r7, #24
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	0800ebe0 	.word	0x0800ebe0
 800be0c:	0800c439 	.word	0x0800c439
 800be10:	20001a7c 	.word	0x20001a7c
 800be14:	20001a78 	.word	0x20001a78
 800be18:	20001a64 	.word	0x20001a64
 800be1c:	20001a5c 	.word	0x20001a5c

0800be20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800be20:	b480      	push	{r7}
 800be22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800be24:	4b04      	ldr	r3, [pc, #16]	; (800be38 <vTaskSuspendAll+0x18>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	4a03      	ldr	r2, [pc, #12]	; (800be38 <vTaskSuspendAll+0x18>)
 800be2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800be2e:	bf00      	nop
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	20001a80 	.word	0x20001a80

0800be3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be46:	2300      	movs	r3, #0
 800be48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be4a:	4b42      	ldr	r3, [pc, #264]	; (800bf54 <xTaskResumeAll+0x118>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10a      	bne.n	800be68 <xTaskResumeAll+0x2c>
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	603b      	str	r3, [r7, #0]
}
 800be64:	bf00      	nop
 800be66:	e7fe      	b.n	800be66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be68:	f001 f914 	bl	800d094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be6c:	4b39      	ldr	r3, [pc, #228]	; (800bf54 <xTaskResumeAll+0x118>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3b01      	subs	r3, #1
 800be72:	4a38      	ldr	r2, [pc, #224]	; (800bf54 <xTaskResumeAll+0x118>)
 800be74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be76:	4b37      	ldr	r3, [pc, #220]	; (800bf54 <xTaskResumeAll+0x118>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d162      	bne.n	800bf44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be7e:	4b36      	ldr	r3, [pc, #216]	; (800bf58 <xTaskResumeAll+0x11c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d05e      	beq.n	800bf44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be86:	e02f      	b.n	800bee8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be88:	4b34      	ldr	r3, [pc, #208]	; (800bf5c <xTaskResumeAll+0x120>)
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3318      	adds	r3, #24
 800be94:	4618      	mov	r0, r3
 800be96:	f7fe ff31 	bl	800acfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3304      	adds	r3, #4
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fe ff2c 	bl	800acfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	4b2d      	ldr	r3, [pc, #180]	; (800bf60 <xTaskResumeAll+0x124>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d903      	bls.n	800beb8 <xTaskResumeAll+0x7c>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	4a2a      	ldr	r2, [pc, #168]	; (800bf60 <xTaskResumeAll+0x124>)
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bebc:	4613      	mov	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4a27      	ldr	r2, [pc, #156]	; (800bf64 <xTaskResumeAll+0x128>)
 800bec6:	441a      	add	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3304      	adds	r3, #4
 800becc:	4619      	mov	r1, r3
 800bece:	4610      	mov	r0, r2
 800bed0:	f7fe feb7 	bl	800ac42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed8:	4b23      	ldr	r3, [pc, #140]	; (800bf68 <xTaskResumeAll+0x12c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bede:	429a      	cmp	r2, r3
 800bee0:	d302      	bcc.n	800bee8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bee2:	4b22      	ldr	r3, [pc, #136]	; (800bf6c <xTaskResumeAll+0x130>)
 800bee4:	2201      	movs	r2, #1
 800bee6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bee8:	4b1c      	ldr	r3, [pc, #112]	; (800bf5c <xTaskResumeAll+0x120>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1cb      	bne.n	800be88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bef6:	f000 fb55 	bl	800c5a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800befa:	4b1d      	ldr	r3, [pc, #116]	; (800bf70 <xTaskResumeAll+0x134>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d010      	beq.n	800bf28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf06:	f000 f847 	bl	800bf98 <xTaskIncrementTick>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bf10:	4b16      	ldr	r3, [pc, #88]	; (800bf6c <xTaskResumeAll+0x130>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1f1      	bne.n	800bf06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bf22:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <xTaskResumeAll+0x134>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf28:	4b10      	ldr	r3, [pc, #64]	; (800bf6c <xTaskResumeAll+0x130>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d009      	beq.n	800bf44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf30:	2301      	movs	r3, #1
 800bf32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf34:	4b0f      	ldr	r3, [pc, #60]	; (800bf74 <xTaskResumeAll+0x138>)
 800bf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf44:	f001 f8d6 	bl	800d0f4 <vPortExitCritical>

	return xAlreadyYielded;
 800bf48:	68bb      	ldr	r3, [r7, #8]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	20001a80 	.word	0x20001a80
 800bf58:	20001a58 	.word	0x20001a58
 800bf5c:	20001a18 	.word	0x20001a18
 800bf60:	20001a60 	.word	0x20001a60
 800bf64:	20001588 	.word	0x20001588
 800bf68:	20001584 	.word	0x20001584
 800bf6c:	20001a6c 	.word	0x20001a6c
 800bf70:	20001a68 	.word	0x20001a68
 800bf74:	e000ed04 	.word	0xe000ed04

0800bf78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf7e:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <xTaskGetTickCount+0x1c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf84:	687b      	ldr	r3, [r7, #4]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20001a5c 	.word	0x20001a5c

0800bf98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfa2:	4b4f      	ldr	r3, [pc, #316]	; (800c0e0 <xTaskIncrementTick+0x148>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f040 808f 	bne.w	800c0ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bfac:	4b4d      	ldr	r3, [pc, #308]	; (800c0e4 <xTaskIncrementTick+0x14c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bfb4:	4a4b      	ldr	r2, [pc, #300]	; (800c0e4 <xTaskIncrementTick+0x14c>)
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d120      	bne.n	800c002 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bfc0:	4b49      	ldr	r3, [pc, #292]	; (800c0e8 <xTaskIncrementTick+0x150>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00a      	beq.n	800bfe0 <xTaskIncrementTick+0x48>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	603b      	str	r3, [r7, #0]
}
 800bfdc:	bf00      	nop
 800bfde:	e7fe      	b.n	800bfde <xTaskIncrementTick+0x46>
 800bfe0:	4b41      	ldr	r3, [pc, #260]	; (800c0e8 <xTaskIncrementTick+0x150>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	4b41      	ldr	r3, [pc, #260]	; (800c0ec <xTaskIncrementTick+0x154>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a3f      	ldr	r2, [pc, #252]	; (800c0e8 <xTaskIncrementTick+0x150>)
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	4a3f      	ldr	r2, [pc, #252]	; (800c0ec <xTaskIncrementTick+0x154>)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6013      	str	r3, [r2, #0]
 800bff4:	4b3e      	ldr	r3, [pc, #248]	; (800c0f0 <xTaskIncrementTick+0x158>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3301      	adds	r3, #1
 800bffa:	4a3d      	ldr	r2, [pc, #244]	; (800c0f0 <xTaskIncrementTick+0x158>)
 800bffc:	6013      	str	r3, [r2, #0]
 800bffe:	f000 fad1 	bl	800c5a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c002:	4b3c      	ldr	r3, [pc, #240]	; (800c0f4 <xTaskIncrementTick+0x15c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d349      	bcc.n	800c0a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c00c:	4b36      	ldr	r3, [pc, #216]	; (800c0e8 <xTaskIncrementTick+0x150>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d104      	bne.n	800c020 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c016:	4b37      	ldr	r3, [pc, #220]	; (800c0f4 <xTaskIncrementTick+0x15c>)
 800c018:	f04f 32ff 	mov.w	r2, #4294967295
 800c01c:	601a      	str	r2, [r3, #0]
					break;
 800c01e:	e03f      	b.n	800c0a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c020:	4b31      	ldr	r3, [pc, #196]	; (800c0e8 <xTaskIncrementTick+0x150>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d203      	bcs.n	800c040 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c038:	4a2e      	ldr	r2, [pc, #184]	; (800c0f4 <xTaskIncrementTick+0x15c>)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c03e:	e02f      	b.n	800c0a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	3304      	adds	r3, #4
 800c044:	4618      	mov	r0, r3
 800c046:	f7fe fe59 	bl	800acfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d004      	beq.n	800c05c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	3318      	adds	r3, #24
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe fe50 	bl	800acfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c060:	4b25      	ldr	r3, [pc, #148]	; (800c0f8 <xTaskIncrementTick+0x160>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	429a      	cmp	r2, r3
 800c066:	d903      	bls.n	800c070 <xTaskIncrementTick+0xd8>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	4a22      	ldr	r2, [pc, #136]	; (800c0f8 <xTaskIncrementTick+0x160>)
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c074:	4613      	mov	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4a1f      	ldr	r2, [pc, #124]	; (800c0fc <xTaskIncrementTick+0x164>)
 800c07e:	441a      	add	r2, r3
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	3304      	adds	r3, #4
 800c084:	4619      	mov	r1, r3
 800c086:	4610      	mov	r0, r2
 800c088:	f7fe fddb 	bl	800ac42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c090:	4b1b      	ldr	r3, [pc, #108]	; (800c100 <xTaskIncrementTick+0x168>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c096:	429a      	cmp	r2, r3
 800c098:	d3b8      	bcc.n	800c00c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c09a:	2301      	movs	r3, #1
 800c09c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c09e:	e7b5      	b.n	800c00c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c0a0:	4b17      	ldr	r3, [pc, #92]	; (800c100 <xTaskIncrementTick+0x168>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a6:	4915      	ldr	r1, [pc, #84]	; (800c0fc <xTaskIncrementTick+0x164>)
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	440b      	add	r3, r1
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d901      	bls.n	800c0bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c0bc:	4b11      	ldr	r3, [pc, #68]	; (800c104 <xTaskIncrementTick+0x16c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d007      	beq.n	800c0d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	617b      	str	r3, [r7, #20]
 800c0c8:	e004      	b.n	800c0d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c0ca:	4b0f      	ldr	r3, [pc, #60]	; (800c108 <xTaskIncrementTick+0x170>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	4a0d      	ldr	r2, [pc, #52]	; (800c108 <xTaskIncrementTick+0x170>)
 800c0d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c0d4:	697b      	ldr	r3, [r7, #20]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20001a80 	.word	0x20001a80
 800c0e4:	20001a5c 	.word	0x20001a5c
 800c0e8:	20001a10 	.word	0x20001a10
 800c0ec:	20001a14 	.word	0x20001a14
 800c0f0:	20001a70 	.word	0x20001a70
 800c0f4:	20001a78 	.word	0x20001a78
 800c0f8:	20001a60 	.word	0x20001a60
 800c0fc:	20001588 	.word	0x20001588
 800c100:	20001584 	.word	0x20001584
 800c104:	20001a6c 	.word	0x20001a6c
 800c108:	20001a68 	.word	0x20001a68

0800c10c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c112:	4b28      	ldr	r3, [pc, #160]	; (800c1b4 <vTaskSwitchContext+0xa8>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c11a:	4b27      	ldr	r3, [pc, #156]	; (800c1b8 <vTaskSwitchContext+0xac>)
 800c11c:	2201      	movs	r2, #1
 800c11e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c120:	e041      	b.n	800c1a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c122:	4b25      	ldr	r3, [pc, #148]	; (800c1b8 <vTaskSwitchContext+0xac>)
 800c124:	2200      	movs	r2, #0
 800c126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c128:	4b24      	ldr	r3, [pc, #144]	; (800c1bc <vTaskSwitchContext+0xb0>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	e010      	b.n	800c152 <vTaskSwitchContext+0x46>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10a      	bne.n	800c14c <vTaskSwitchContext+0x40>
	__asm volatile
 800c136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	607b      	str	r3, [r7, #4]
}
 800c148:	bf00      	nop
 800c14a:	e7fe      	b.n	800c14a <vTaskSwitchContext+0x3e>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	3b01      	subs	r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	491b      	ldr	r1, [pc, #108]	; (800c1c0 <vTaskSwitchContext+0xb4>)
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	4613      	mov	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	440b      	add	r3, r1
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0e4      	beq.n	800c130 <vTaskSwitchContext+0x24>
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4a13      	ldr	r2, [pc, #76]	; (800c1c0 <vTaskSwitchContext+0xb4>)
 800c172:	4413      	add	r3, r2
 800c174:	60bb      	str	r3, [r7, #8]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	605a      	str	r2, [r3, #4]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	685a      	ldr	r2, [r3, #4]
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	3308      	adds	r3, #8
 800c188:	429a      	cmp	r2, r3
 800c18a:	d104      	bne.n	800c196 <vTaskSwitchContext+0x8a>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	685a      	ldr	r2, [r3, #4]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	605a      	str	r2, [r3, #4]
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	4a09      	ldr	r2, [pc, #36]	; (800c1c4 <vTaskSwitchContext+0xb8>)
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	4a06      	ldr	r2, [pc, #24]	; (800c1bc <vTaskSwitchContext+0xb0>)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6013      	str	r3, [r2, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	20001a80 	.word	0x20001a80
 800c1b8:	20001a6c 	.word	0x20001a6c
 800c1bc:	20001a60 	.word	0x20001a60
 800c1c0:	20001588 	.word	0x20001588
 800c1c4:	20001584 	.word	0x20001584

0800c1c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	60fb      	str	r3, [r7, #12]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1ee:	4b07      	ldr	r3, [pc, #28]	; (800c20c <vTaskPlaceOnEventList+0x44>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3318      	adds	r3, #24
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7fe fd47 	bl	800ac8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	6838      	ldr	r0, [r7, #0]
 800c200:	f000 fa7c 	bl	800c6fc <prvAddCurrentTaskToDelayedList>
}
 800c204:	bf00      	nop
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	20001584 	.word	0x20001584

0800c210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10a      	bne.n	800c238 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	617b      	str	r3, [r7, #20]
}
 800c234:	bf00      	nop
 800c236:	e7fe      	b.n	800c236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <vTaskPlaceOnEventListRestricted+0x54>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3318      	adds	r3, #24
 800c23e:	4619      	mov	r1, r3
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f7fe fcfe 	bl	800ac42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c24c:	f04f 33ff 	mov.w	r3, #4294967295
 800c250:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c252:	6879      	ldr	r1, [r7, #4]
 800c254:	68b8      	ldr	r0, [r7, #8]
 800c256:	f000 fa51 	bl	800c6fc <prvAddCurrentTaskToDelayedList>
	}
 800c25a:	bf00      	nop
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20001584 	.word	0x20001584

0800c268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b086      	sub	sp, #24
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	60fb      	str	r3, [r7, #12]
}
 800c290:	bf00      	nop
 800c292:	e7fe      	b.n	800c292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	3318      	adds	r3, #24
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fe fd2f 	bl	800acfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c29e:	4b1e      	ldr	r3, [pc, #120]	; (800c318 <xTaskRemoveFromEventList+0xb0>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d11d      	bne.n	800c2e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe fd26 	bl	800acfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b4:	4b19      	ldr	r3, [pc, #100]	; (800c31c <xTaskRemoveFromEventList+0xb4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d903      	bls.n	800c2c4 <xTaskRemoveFromEventList+0x5c>
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	4a16      	ldr	r2, [pc, #88]	; (800c31c <xTaskRemoveFromEventList+0xb4>)
 800c2c2:	6013      	str	r3, [r2, #0]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4a13      	ldr	r2, [pc, #76]	; (800c320 <xTaskRemoveFromEventList+0xb8>)
 800c2d2:	441a      	add	r2, r3
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	4619      	mov	r1, r3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	f7fe fcb1 	bl	800ac42 <vListInsertEnd>
 800c2e0:	e005      	b.n	800c2ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	3318      	adds	r3, #24
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	480e      	ldr	r0, [pc, #56]	; (800c324 <xTaskRemoveFromEventList+0xbc>)
 800c2ea:	f7fe fcaa 	bl	800ac42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	; (800c328 <xTaskRemoveFromEventList+0xc0>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d905      	bls.n	800c308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c300:	4b0a      	ldr	r3, [pc, #40]	; (800c32c <xTaskRemoveFromEventList+0xc4>)
 800c302:	2201      	movs	r2, #1
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	e001      	b.n	800c30c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c308:	2300      	movs	r3, #0
 800c30a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c30c:	697b      	ldr	r3, [r7, #20]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20001a80 	.word	0x20001a80
 800c31c:	20001a60 	.word	0x20001a60
 800c320:	20001588 	.word	0x20001588
 800c324:	20001a18 	.word	0x20001a18
 800c328:	20001584 	.word	0x20001584
 800c32c:	20001a6c 	.word	0x20001a6c

0800c330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c338:	4b06      	ldr	r3, [pc, #24]	; (800c354 <vTaskInternalSetTimeOutState+0x24>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c340:	4b05      	ldr	r3, [pc, #20]	; (800c358 <vTaskInternalSetTimeOutState+0x28>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	605a      	str	r2, [r3, #4]
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	20001a70 	.word	0x20001a70
 800c358:	20001a5c 	.word	0x20001a5c

0800c35c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	613b      	str	r3, [r7, #16]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10a      	bne.n	800c39e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	60fb      	str	r3, [r7, #12]
}
 800c39a:	bf00      	nop
 800c39c:	e7fe      	b.n	800c39c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c39e:	f000 fe79 	bl	800d094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c3a2:	4b1d      	ldr	r3, [pc, #116]	; (800c418 <xTaskCheckForTimeOut+0xbc>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	69ba      	ldr	r2, [r7, #24]
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ba:	d102      	bne.n	800c3c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	61fb      	str	r3, [r7, #28]
 800c3c0:	e023      	b.n	800c40a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	4b15      	ldr	r3, [pc, #84]	; (800c41c <xTaskCheckForTimeOut+0xc0>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d007      	beq.n	800c3de <xTaskCheckForTimeOut+0x82>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	69ba      	ldr	r2, [r7, #24]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d302      	bcc.n	800c3de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	61fb      	str	r3, [r7, #28]
 800c3dc:	e015      	b.n	800c40a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	697a      	ldr	r2, [r7, #20]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d20b      	bcs.n	800c400 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	1ad2      	subs	r2, r2, r3
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff ff9b 	bl	800c330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	e004      	b.n	800c40a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c406:	2301      	movs	r3, #1
 800c408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c40a:	f000 fe73 	bl	800d0f4 <vPortExitCritical>

	return xReturn;
 800c40e:	69fb      	ldr	r3, [r7, #28]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3720      	adds	r7, #32
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	20001a5c 	.word	0x20001a5c
 800c41c:	20001a70 	.word	0x20001a70

0800c420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c420:	b480      	push	{r7}
 800c422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c424:	4b03      	ldr	r3, [pc, #12]	; (800c434 <vTaskMissedYield+0x14>)
 800c426:	2201      	movs	r2, #1
 800c428:	601a      	str	r2, [r3, #0]
}
 800c42a:	bf00      	nop
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	20001a6c 	.word	0x20001a6c

0800c438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c440:	f000 f852 	bl	800c4e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c444:	4b06      	ldr	r3, [pc, #24]	; (800c460 <prvIdleTask+0x28>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d9f9      	bls.n	800c440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c44c:	4b05      	ldr	r3, [pc, #20]	; (800c464 <prvIdleTask+0x2c>)
 800c44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c45c:	e7f0      	b.n	800c440 <prvIdleTask+0x8>
 800c45e:	bf00      	nop
 800c460:	20001588 	.word	0x20001588
 800c464:	e000ed04 	.word	0xe000ed04

0800c468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c46e:	2300      	movs	r3, #0
 800c470:	607b      	str	r3, [r7, #4]
 800c472:	e00c      	b.n	800c48e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4a12      	ldr	r2, [pc, #72]	; (800c4c8 <prvInitialiseTaskLists+0x60>)
 800c480:	4413      	add	r3, r2
 800c482:	4618      	mov	r0, r3
 800c484:	f7fe fbb0 	bl	800abe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3301      	adds	r3, #1
 800c48c:	607b      	str	r3, [r7, #4]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b37      	cmp	r3, #55	; 0x37
 800c492:	d9ef      	bls.n	800c474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c494:	480d      	ldr	r0, [pc, #52]	; (800c4cc <prvInitialiseTaskLists+0x64>)
 800c496:	f7fe fba7 	bl	800abe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c49a:	480d      	ldr	r0, [pc, #52]	; (800c4d0 <prvInitialiseTaskLists+0x68>)
 800c49c:	f7fe fba4 	bl	800abe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4a0:	480c      	ldr	r0, [pc, #48]	; (800c4d4 <prvInitialiseTaskLists+0x6c>)
 800c4a2:	f7fe fba1 	bl	800abe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4a6:	480c      	ldr	r0, [pc, #48]	; (800c4d8 <prvInitialiseTaskLists+0x70>)
 800c4a8:	f7fe fb9e 	bl	800abe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c4ac:	480b      	ldr	r0, [pc, #44]	; (800c4dc <prvInitialiseTaskLists+0x74>)
 800c4ae:	f7fe fb9b 	bl	800abe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4b2:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <prvInitialiseTaskLists+0x78>)
 800c4b4:	4a05      	ldr	r2, [pc, #20]	; (800c4cc <prvInitialiseTaskLists+0x64>)
 800c4b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4b8:	4b0a      	ldr	r3, [pc, #40]	; (800c4e4 <prvInitialiseTaskLists+0x7c>)
 800c4ba:	4a05      	ldr	r2, [pc, #20]	; (800c4d0 <prvInitialiseTaskLists+0x68>)
 800c4bc:	601a      	str	r2, [r3, #0]
}
 800c4be:	bf00      	nop
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20001588 	.word	0x20001588
 800c4cc:	200019e8 	.word	0x200019e8
 800c4d0:	200019fc 	.word	0x200019fc
 800c4d4:	20001a18 	.word	0x20001a18
 800c4d8:	20001a2c 	.word	0x20001a2c
 800c4dc:	20001a44 	.word	0x20001a44
 800c4e0:	20001a10 	.word	0x20001a10
 800c4e4:	20001a14 	.word	0x20001a14

0800c4e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4ee:	e019      	b.n	800c524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c4f0:	f000 fdd0 	bl	800d094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f4:	4b10      	ldr	r3, [pc, #64]	; (800c538 <prvCheckTasksWaitingTermination+0x50>)
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3304      	adds	r3, #4
 800c500:	4618      	mov	r0, r3
 800c502:	f7fe fbfb 	bl	800acfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c506:	4b0d      	ldr	r3, [pc, #52]	; (800c53c <prvCheckTasksWaitingTermination+0x54>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3b01      	subs	r3, #1
 800c50c:	4a0b      	ldr	r2, [pc, #44]	; (800c53c <prvCheckTasksWaitingTermination+0x54>)
 800c50e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c510:	4b0b      	ldr	r3, [pc, #44]	; (800c540 <prvCheckTasksWaitingTermination+0x58>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3b01      	subs	r3, #1
 800c516:	4a0a      	ldr	r2, [pc, #40]	; (800c540 <prvCheckTasksWaitingTermination+0x58>)
 800c518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c51a:	f000 fdeb 	bl	800d0f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f810 	bl	800c544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c524:	4b06      	ldr	r3, [pc, #24]	; (800c540 <prvCheckTasksWaitingTermination+0x58>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e1      	bne.n	800c4f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c52c:	bf00      	nop
 800c52e:	bf00      	nop
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20001a2c 	.word	0x20001a2c
 800c53c:	20001a58 	.word	0x20001a58
 800c540:	20001a40 	.word	0x20001a40

0800c544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c552:	2b00      	cmp	r3, #0
 800c554:	d108      	bne.n	800c568 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 ff88 	bl	800d470 <vPortFree>
				vPortFree( pxTCB );
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 ff85 	bl	800d470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c566:	e018      	b.n	800c59a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d103      	bne.n	800c57a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 ff7c 	bl	800d470 <vPortFree>
	}
 800c578:	e00f      	b.n	800c59a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c580:	2b02      	cmp	r3, #2
 800c582:	d00a      	beq.n	800c59a <prvDeleteTCB+0x56>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	60fb      	str	r3, [r7, #12]
}
 800c596:	bf00      	nop
 800c598:	e7fe      	b.n	800c598 <prvDeleteTCB+0x54>
	}
 800c59a:	bf00      	nop
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5aa:	4b0c      	ldr	r3, [pc, #48]	; (800c5dc <prvResetNextTaskUnblockTime+0x38>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d104      	bne.n	800c5be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5b4:	4b0a      	ldr	r3, [pc, #40]	; (800c5e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c5bc:	e008      	b.n	800c5d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5be:	4b07      	ldr	r3, [pc, #28]	; (800c5dc <prvResetNextTaskUnblockTime+0x38>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	4a04      	ldr	r2, [pc, #16]	; (800c5e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c5ce:	6013      	str	r3, [r2, #0]
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	20001a10 	.word	0x20001a10
 800c5e0:	20001a78 	.word	0x20001a78

0800c5e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <xTaskGetSchedulerState+0x34>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d102      	bne.n	800c5f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	607b      	str	r3, [r7, #4]
 800c5f6:	e008      	b.n	800c60a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5f8:	4b08      	ldr	r3, [pc, #32]	; (800c61c <xTaskGetSchedulerState+0x38>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c600:	2302      	movs	r3, #2
 800c602:	607b      	str	r3, [r7, #4]
 800c604:	e001      	b.n	800c60a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c606:	2300      	movs	r3, #0
 800c608:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c60a:	687b      	ldr	r3, [r7, #4]
	}
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr
 800c618:	20001a64 	.word	0x20001a64
 800c61c:	20001a80 	.word	0x20001a80

0800c620 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c62c:	2300      	movs	r3, #0
 800c62e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d056      	beq.n	800c6e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c636:	4b2e      	ldr	r3, [pc, #184]	; (800c6f0 <xTaskPriorityDisinherit+0xd0>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d00a      	beq.n	800c656 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	60fb      	str	r3, [r7, #12]
}
 800c652:	bf00      	nop
 800c654:	e7fe      	b.n	800c654 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	60bb      	str	r3, [r7, #8]
}
 800c670:	bf00      	nop
 800c672:	e7fe      	b.n	800c672 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c678:	1e5a      	subs	r2, r3, #1
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c686:	429a      	cmp	r2, r3
 800c688:	d02c      	beq.n	800c6e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d128      	bne.n	800c6e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	3304      	adds	r3, #4
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fb30 	bl	800acfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b4:	4b0f      	ldr	r3, [pc, #60]	; (800c6f4 <xTaskPriorityDisinherit+0xd4>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d903      	bls.n	800c6c4 <xTaskPriorityDisinherit+0xa4>
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c0:	4a0c      	ldr	r2, [pc, #48]	; (800c6f4 <xTaskPriorityDisinherit+0xd4>)
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4a09      	ldr	r2, [pc, #36]	; (800c6f8 <xTaskPriorityDisinherit+0xd8>)
 800c6d2:	441a      	add	r2, r3
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	4619      	mov	r1, r3
 800c6da:	4610      	mov	r0, r2
 800c6dc:	f7fe fab1 	bl	800ac42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6e4:	697b      	ldr	r3, [r7, #20]
	}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20001584 	.word	0x20001584
 800c6f4:	20001a60 	.word	0x20001a60
 800c6f8:	20001588 	.word	0x20001588

0800c6fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c706:	4b21      	ldr	r3, [pc, #132]	; (800c78c <prvAddCurrentTaskToDelayedList+0x90>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c70c:	4b20      	ldr	r3, [pc, #128]	; (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3304      	adds	r3, #4
 800c712:	4618      	mov	r0, r3
 800c714:	f7fe faf2 	bl	800acfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71e:	d10a      	bne.n	800c736 <prvAddCurrentTaskToDelayedList+0x3a>
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d007      	beq.n	800c736 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c726:	4b1a      	ldr	r3, [pc, #104]	; (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3304      	adds	r3, #4
 800c72c:	4619      	mov	r1, r3
 800c72e:	4819      	ldr	r0, [pc, #100]	; (800c794 <prvAddCurrentTaskToDelayedList+0x98>)
 800c730:	f7fe fa87 	bl	800ac42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c734:	e026      	b.n	800c784 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4413      	add	r3, r2
 800c73c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c73e:	4b14      	ldr	r3, [pc, #80]	; (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c746:	68ba      	ldr	r2, [r7, #8]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d209      	bcs.n	800c762 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c74e:	4b12      	ldr	r3, [pc, #72]	; (800c798 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	4b0f      	ldr	r3, [pc, #60]	; (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3304      	adds	r3, #4
 800c758:	4619      	mov	r1, r3
 800c75a:	4610      	mov	r0, r2
 800c75c:	f7fe fa95 	bl	800ac8a <vListInsert>
}
 800c760:	e010      	b.n	800c784 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c762:	4b0e      	ldr	r3, [pc, #56]	; (800c79c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	4b0a      	ldr	r3, [pc, #40]	; (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3304      	adds	r3, #4
 800c76c:	4619      	mov	r1, r3
 800c76e:	4610      	mov	r0, r2
 800c770:	f7fe fa8b 	bl	800ac8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c774:	4b0a      	ldr	r3, [pc, #40]	; (800c7a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d202      	bcs.n	800c784 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c77e:	4a08      	ldr	r2, [pc, #32]	; (800c7a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	6013      	str	r3, [r2, #0]
}
 800c784:	bf00      	nop
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20001a5c 	.word	0x20001a5c
 800c790:	20001584 	.word	0x20001584
 800c794:	20001a44 	.word	0x20001a44
 800c798:	20001a14 	.word	0x20001a14
 800c79c:	20001a10 	.word	0x20001a10
 800c7a0:	20001a78 	.word	0x20001a78

0800c7a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08a      	sub	sp, #40	; 0x28
 800c7a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c7ae:	f000 fb07 	bl	800cdc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c7b2:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <xTimerCreateTimerTask+0x80>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d021      	beq.n	800c7fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c7c2:	1d3a      	adds	r2, r7, #4
 800c7c4:	f107 0108 	add.w	r1, r7, #8
 800c7c8:	f107 030c 	add.w	r3, r7, #12
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fe f9f1 	bl	800abb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c7d2:	6879      	ldr	r1, [r7, #4]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	9202      	str	r2, [sp, #8]
 800c7da:	9301      	str	r3, [sp, #4]
 800c7dc:	2302      	movs	r3, #2
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	460a      	mov	r2, r1
 800c7e4:	4910      	ldr	r1, [pc, #64]	; (800c828 <xTimerCreateTimerTask+0x84>)
 800c7e6:	4811      	ldr	r0, [pc, #68]	; (800c82c <xTimerCreateTimerTask+0x88>)
 800c7e8:	f7fe ffd8 	bl	800b79c <xTaskCreateStatic>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	4a10      	ldr	r2, [pc, #64]	; (800c830 <xTimerCreateTimerTask+0x8c>)
 800c7f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c7f2:	4b0f      	ldr	r3, [pc, #60]	; (800c830 <xTimerCreateTimerTask+0x8c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10a      	bne.n	800c81a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	613b      	str	r3, [r7, #16]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c81a:	697b      	ldr	r3, [r7, #20]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	20001ab4 	.word	0x20001ab4
 800c828:	0800ebe8 	.word	0x0800ebe8
 800c82c:	0800c969 	.word	0x0800c969
 800c830:	20001ab8 	.word	0x20001ab8

0800c834 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b08a      	sub	sp, #40	; 0x28
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
 800c840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c842:	2300      	movs	r3, #0
 800c844:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d10a      	bne.n	800c862 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	623b      	str	r3, [r7, #32]
}
 800c85e:	bf00      	nop
 800c860:	e7fe      	b.n	800c860 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c862:	4b1a      	ldr	r3, [pc, #104]	; (800c8cc <xTimerGenericCommand+0x98>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d02a      	beq.n	800c8c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b05      	cmp	r3, #5
 800c87a:	dc18      	bgt.n	800c8ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c87c:	f7ff feb2 	bl	800c5e4 <xTaskGetSchedulerState>
 800c880:	4603      	mov	r3, r0
 800c882:	2b02      	cmp	r3, #2
 800c884:	d109      	bne.n	800c89a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c886:	4b11      	ldr	r3, [pc, #68]	; (800c8cc <xTimerGenericCommand+0x98>)
 800c888:	6818      	ldr	r0, [r3, #0]
 800c88a:	f107 0110 	add.w	r1, r7, #16
 800c88e:	2300      	movs	r3, #0
 800c890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c892:	f7fe fb9b 	bl	800afcc <xQueueGenericSend>
 800c896:	6278      	str	r0, [r7, #36]	; 0x24
 800c898:	e012      	b.n	800c8c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c89a:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <xTimerGenericCommand+0x98>)
 800c89c:	6818      	ldr	r0, [r3, #0]
 800c89e:	f107 0110 	add.w	r1, r7, #16
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f7fe fb91 	bl	800afcc <xQueueGenericSend>
 800c8aa:	6278      	str	r0, [r7, #36]	; 0x24
 800c8ac:	e008      	b.n	800c8c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c8ae:	4b07      	ldr	r3, [pc, #28]	; (800c8cc <xTimerGenericCommand+0x98>)
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	f107 0110 	add.w	r1, r7, #16
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	f7fe fc85 	bl	800b1c8 <xQueueGenericSendFromISR>
 800c8be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3728      	adds	r7, #40	; 0x28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20001ab4 	.word	0x20001ab4

0800c8d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b088      	sub	sp, #32
 800c8d4:	af02      	add	r7, sp, #8
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8da:	4b22      	ldr	r3, [pc, #136]	; (800c964 <prvProcessExpiredTimer+0x94>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fe fa07 	bl	800acfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8f4:	f003 0304 	and.w	r3, r3, #4
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d022      	beq.n	800c942 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	699a      	ldr	r2, [r3, #24]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	18d1      	adds	r1, r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	6978      	ldr	r0, [r7, #20]
 800c90a:	f000 f8d1 	bl	800cab0 <prvInsertTimerInActiveList>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d01f      	beq.n	800c954 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c914:	2300      	movs	r3, #0
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	2300      	movs	r3, #0
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	2100      	movs	r1, #0
 800c91e:	6978      	ldr	r0, [r7, #20]
 800c920:	f7ff ff88 	bl	800c834 <xTimerGenericCommand>
 800c924:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d113      	bne.n	800c954 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	60fb      	str	r3, [r7, #12]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c948:	f023 0301 	bic.w	r3, r3, #1
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	6a1b      	ldr	r3, [r3, #32]
 800c958:	6978      	ldr	r0, [r7, #20]
 800c95a:	4798      	blx	r3
}
 800c95c:	bf00      	nop
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20001aac 	.word	0x20001aac

0800c968 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c970:	f107 0308 	add.w	r3, r7, #8
 800c974:	4618      	mov	r0, r3
 800c976:	f000 f857 	bl	800ca28 <prvGetNextExpireTime>
 800c97a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	4619      	mov	r1, r3
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f000 f803 	bl	800c98c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c986:	f000 f8d5 	bl	800cb34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c98a:	e7f1      	b.n	800c970 <prvTimerTask+0x8>

0800c98c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c996:	f7ff fa43 	bl	800be20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c99a:	f107 0308 	add.w	r3, r7, #8
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f866 	bl	800ca70 <prvSampleTimeNow>
 800c9a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d130      	bne.n	800ca0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10a      	bne.n	800c9c8 <prvProcessTimerOrBlockTask+0x3c>
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d806      	bhi.n	800c9c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c9ba:	f7ff fa3f 	bl	800be3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c9be:	68f9      	ldr	r1, [r7, #12]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff ff85 	bl	800c8d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c9c6:	e024      	b.n	800ca12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d008      	beq.n	800c9e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c9ce:	4b13      	ldr	r3, [pc, #76]	; (800ca1c <prvProcessTimerOrBlockTask+0x90>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d101      	bne.n	800c9dc <prvProcessTimerOrBlockTask+0x50>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e000      	b.n	800c9de <prvProcessTimerOrBlockTask+0x52>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c9e0:	4b0f      	ldr	r3, [pc, #60]	; (800ca20 <prvProcessTimerOrBlockTask+0x94>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	f7fe fea1 	bl	800b734 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c9f2:	f7ff fa23 	bl	800be3c <xTaskResumeAll>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10a      	bne.n	800ca12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c9fc:	4b09      	ldr	r3, [pc, #36]	; (800ca24 <prvProcessTimerOrBlockTask+0x98>)
 800c9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	f3bf 8f6f 	isb	sy
}
 800ca0c:	e001      	b.n	800ca12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca0e:	f7ff fa15 	bl	800be3c <xTaskResumeAll>
}
 800ca12:	bf00      	nop
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20001ab0 	.word	0x20001ab0
 800ca20:	20001ab4 	.word	0x20001ab4
 800ca24:	e000ed04 	.word	0xe000ed04

0800ca28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ca30:	4b0e      	ldr	r3, [pc, #56]	; (800ca6c <prvGetNextExpireTime+0x44>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <prvGetNextExpireTime+0x16>
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	e000      	b.n	800ca40 <prvGetNextExpireTime+0x18>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d105      	bne.n	800ca58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca4c:	4b07      	ldr	r3, [pc, #28]	; (800ca6c <prvGetNextExpireTime+0x44>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	e001      	b.n	800ca5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3714      	adds	r7, #20
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	20001aac 	.word	0x20001aac

0800ca70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ca78:	f7ff fa7e 	bl	800bf78 <xTaskGetTickCount>
 800ca7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ca7e:	4b0b      	ldr	r3, [pc, #44]	; (800caac <prvSampleTimeNow+0x3c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d205      	bcs.n	800ca94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca88:	f000 f936 	bl	800ccf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	601a      	str	r2, [r3, #0]
 800ca92:	e002      	b.n	800ca9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ca9a:	4a04      	ldr	r2, [pc, #16]	; (800caac <prvSampleTimeNow+0x3c>)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800caa0:	68fb      	ldr	r3, [r7, #12]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20001abc 	.word	0x20001abc

0800cab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b086      	sub	sp, #24
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
 800cabc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cabe:	2300      	movs	r3, #0
 800cac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d812      	bhi.n	800cafc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	1ad2      	subs	r2, r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	699b      	ldr	r3, [r3, #24]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d302      	bcc.n	800caea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cae4:	2301      	movs	r3, #1
 800cae6:	617b      	str	r3, [r7, #20]
 800cae8:	e01b      	b.n	800cb22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800caea:	4b10      	ldr	r3, [pc, #64]	; (800cb2c <prvInsertTimerInActiveList+0x7c>)
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3304      	adds	r3, #4
 800caf2:	4619      	mov	r1, r3
 800caf4:	4610      	mov	r0, r2
 800caf6:	f7fe f8c8 	bl	800ac8a <vListInsert>
 800cafa:	e012      	b.n	800cb22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d206      	bcs.n	800cb12 <prvInsertTimerInActiveList+0x62>
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d302      	bcc.n	800cb12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	617b      	str	r3, [r7, #20]
 800cb10:	e007      	b.n	800cb22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <prvInsertTimerInActiveList+0x80>)
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3304      	adds	r3, #4
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	4610      	mov	r0, r2
 800cb1e:	f7fe f8b4 	bl	800ac8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cb22:	697b      	ldr	r3, [r7, #20]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	20001ab0 	.word	0x20001ab0
 800cb30:	20001aac 	.word	0x20001aac

0800cb34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08e      	sub	sp, #56	; 0x38
 800cb38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb3a:	e0ca      	b.n	800ccd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	da18      	bge.n	800cb74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb42:	1d3b      	adds	r3, r7, #4
 800cb44:	3304      	adds	r3, #4
 800cb46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10a      	bne.n	800cb64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	61fb      	str	r3, [r7, #28]
}
 800cb60:	bf00      	nop
 800cb62:	e7fe      	b.n	800cb62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb6a:	6850      	ldr	r0, [r2, #4]
 800cb6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb6e:	6892      	ldr	r2, [r2, #8]
 800cb70:	4611      	mov	r1, r2
 800cb72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f2c0 80aa 	blt.w	800ccd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb82:	695b      	ldr	r3, [r3, #20]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d004      	beq.n	800cb92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe f8b5 	bl	800acfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb92:	463b      	mov	r3, r7
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff ff6b 	bl	800ca70 <prvSampleTimeNow>
 800cb9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b09      	cmp	r3, #9
 800cba0:	f200 8097 	bhi.w	800ccd2 <prvProcessReceivedCommands+0x19e>
 800cba4:	a201      	add	r2, pc, #4	; (adr r2, 800cbac <prvProcessReceivedCommands+0x78>)
 800cba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbaa:	bf00      	nop
 800cbac:	0800cbd5 	.word	0x0800cbd5
 800cbb0:	0800cbd5 	.word	0x0800cbd5
 800cbb4:	0800cbd5 	.word	0x0800cbd5
 800cbb8:	0800cc49 	.word	0x0800cc49
 800cbbc:	0800cc5d 	.word	0x0800cc5d
 800cbc0:	0800cca7 	.word	0x0800cca7
 800cbc4:	0800cbd5 	.word	0x0800cbd5
 800cbc8:	0800cbd5 	.word	0x0800cbd5
 800cbcc:	0800cc49 	.word	0x0800cc49
 800cbd0:	0800cc5d 	.word	0x0800cc5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbda:	f043 0301 	orr.w	r3, r3, #1
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	18d1      	adds	r1, r2, r3
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf4:	f7ff ff5c 	bl	800cab0 <prvInsertTimerInActiveList>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d069      	beq.n	800ccd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc0c:	f003 0304 	and.w	r3, r3, #4
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d05e      	beq.n	800ccd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	441a      	add	r2, r3
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	2300      	movs	r3, #0
 800cc22:	2100      	movs	r1, #0
 800cc24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc26:	f7ff fe05 	bl	800c834 <xTimerGenericCommand>
 800cc2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d14f      	bne.n	800ccd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	61bb      	str	r3, [r7, #24]
}
 800cc44:	bf00      	nop
 800cc46:	e7fe      	b.n	800cc46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc4e:	f023 0301 	bic.w	r3, r3, #1
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cc5a:	e03a      	b.n	800ccd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc62:	f043 0301 	orr.w	r3, r3, #1
 800cc66:	b2da      	uxtb	r2, r3
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc76:	699b      	ldr	r3, [r3, #24]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10a      	bne.n	800cc92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	617b      	str	r3, [r7, #20]
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	699a      	ldr	r2, [r3, #24]
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	18d1      	adds	r1, r2, r3
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cca0:	f7ff ff06 	bl	800cab0 <prvInsertTimerInActiveList>
					break;
 800cca4:	e015      	b.n	800ccd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccac:	f003 0302 	and.w	r3, r3, #2
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d103      	bne.n	800ccbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ccb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccb6:	f000 fbdb 	bl	800d470 <vPortFree>
 800ccba:	e00a      	b.n	800ccd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccc2:	f023 0301 	bic.w	r3, r3, #1
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ccce:	e000      	b.n	800ccd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ccd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ccd2:	4b08      	ldr	r3, [pc, #32]	; (800ccf4 <prvProcessReceivedCommands+0x1c0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	1d39      	adds	r1, r7, #4
 800ccd8:	2200      	movs	r2, #0
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe fb10 	bl	800b300 <xQueueReceive>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f47f af2a 	bne.w	800cb3c <prvProcessReceivedCommands+0x8>
	}
}
 800cce8:	bf00      	nop
 800ccea:	bf00      	nop
 800ccec:	3730      	adds	r7, #48	; 0x30
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20001ab4 	.word	0x20001ab4

0800ccf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ccfe:	e048      	b.n	800cd92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd00:	4b2d      	ldr	r3, [pc, #180]	; (800cdb8 <prvSwitchTimerLists+0xc0>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd0a:	4b2b      	ldr	r3, [pc, #172]	; (800cdb8 <prvSwitchTimerLists+0xc0>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	3304      	adds	r3, #4
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fd ffef 	bl	800acfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd2c:	f003 0304 	and.w	r3, r3, #4
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d02e      	beq.n	800cd92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d90e      	bls.n	800cd64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd52:	4b19      	ldr	r3, [pc, #100]	; (800cdb8 <prvSwitchTimerLists+0xc0>)
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	3304      	adds	r3, #4
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	f7fd ff94 	bl	800ac8a <vListInsert>
 800cd62:	e016      	b.n	800cd92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd64:	2300      	movs	r3, #0
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	693a      	ldr	r2, [r7, #16]
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f7ff fd60 	bl	800c834 <xTimerGenericCommand>
 800cd74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10a      	bne.n	800cd92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	603b      	str	r3, [r7, #0]
}
 800cd8e:	bf00      	nop
 800cd90:	e7fe      	b.n	800cd90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd92:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <prvSwitchTimerLists+0xc0>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1b1      	bne.n	800cd00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <prvSwitchTimerLists+0xc0>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cda2:	4b06      	ldr	r3, [pc, #24]	; (800cdbc <prvSwitchTimerLists+0xc4>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a04      	ldr	r2, [pc, #16]	; (800cdb8 <prvSwitchTimerLists+0xc0>)
 800cda8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cdaa:	4a04      	ldr	r2, [pc, #16]	; (800cdbc <prvSwitchTimerLists+0xc4>)
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	6013      	str	r3, [r2, #0]
}
 800cdb0:	bf00      	nop
 800cdb2:	3718      	adds	r7, #24
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	20001aac 	.word	0x20001aac
 800cdbc:	20001ab0 	.word	0x20001ab0

0800cdc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cdc6:	f000 f965 	bl	800d094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cdca:	4b15      	ldr	r3, [pc, #84]	; (800ce20 <prvCheckForValidListAndQueue+0x60>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d120      	bne.n	800ce14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cdd2:	4814      	ldr	r0, [pc, #80]	; (800ce24 <prvCheckForValidListAndQueue+0x64>)
 800cdd4:	f7fd ff08 	bl	800abe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cdd8:	4813      	ldr	r0, [pc, #76]	; (800ce28 <prvCheckForValidListAndQueue+0x68>)
 800cdda:	f7fd ff05 	bl	800abe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cdde:	4b13      	ldr	r3, [pc, #76]	; (800ce2c <prvCheckForValidListAndQueue+0x6c>)
 800cde0:	4a10      	ldr	r2, [pc, #64]	; (800ce24 <prvCheckForValidListAndQueue+0x64>)
 800cde2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cde4:	4b12      	ldr	r3, [pc, #72]	; (800ce30 <prvCheckForValidListAndQueue+0x70>)
 800cde6:	4a10      	ldr	r2, [pc, #64]	; (800ce28 <prvCheckForValidListAndQueue+0x68>)
 800cde8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cdea:	2300      	movs	r3, #0
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	4b11      	ldr	r3, [pc, #68]	; (800ce34 <prvCheckForValidListAndQueue+0x74>)
 800cdf0:	4a11      	ldr	r2, [pc, #68]	; (800ce38 <prvCheckForValidListAndQueue+0x78>)
 800cdf2:	2110      	movs	r1, #16
 800cdf4:	200a      	movs	r0, #10
 800cdf6:	f7fe f813 	bl	800ae20 <xQueueGenericCreateStatic>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	4a08      	ldr	r2, [pc, #32]	; (800ce20 <prvCheckForValidListAndQueue+0x60>)
 800cdfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <prvCheckForValidListAndQueue+0x60>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce08:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <prvCheckForValidListAndQueue+0x60>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	490b      	ldr	r1, [pc, #44]	; (800ce3c <prvCheckForValidListAndQueue+0x7c>)
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fe fc66 	bl	800b6e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce14:	f000 f96e 	bl	800d0f4 <vPortExitCritical>
}
 800ce18:	bf00      	nop
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20001ab4 	.word	0x20001ab4
 800ce24:	20001a84 	.word	0x20001a84
 800ce28:	20001a98 	.word	0x20001a98
 800ce2c:	20001aac 	.word	0x20001aac
 800ce30:	20001ab0 	.word	0x20001ab0
 800ce34:	20001b60 	.word	0x20001b60
 800ce38:	20001ac0 	.word	0x20001ac0
 800ce3c:	0800ebf0 	.word	0x0800ebf0

0800ce40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3b04      	subs	r3, #4
 800ce50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	3b04      	subs	r3, #4
 800ce5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	f023 0201 	bic.w	r2, r3, #1
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	3b04      	subs	r3, #4
 800ce6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce70:	4a0c      	ldr	r2, [pc, #48]	; (800cea4 <pxPortInitialiseStack+0x64>)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3b14      	subs	r3, #20
 800ce7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	3b04      	subs	r3, #4
 800ce86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f06f 0202 	mvn.w	r2, #2
 800ce8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	3b20      	subs	r3, #32
 800ce94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce96:	68fb      	ldr	r3, [r7, #12]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3714      	adds	r7, #20
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	0800cea9 	.word	0x0800cea9

0800cea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ceb2:	4b12      	ldr	r3, [pc, #72]	; (800cefc <prvTaskExitError+0x54>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceba:	d00a      	beq.n	800ced2 <prvTaskExitError+0x2a>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	60fb      	str	r3, [r7, #12]
}
 800cece:	bf00      	nop
 800ced0:	e7fe      	b.n	800ced0 <prvTaskExitError+0x28>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	60bb      	str	r3, [r7, #8]
}
 800cee4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cee6:	bf00      	nop
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0fc      	beq.n	800cee8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ceee:	bf00      	nop
 800cef0:	bf00      	nop
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	20000580 	.word	0x20000580

0800cf00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf00:	4b07      	ldr	r3, [pc, #28]	; (800cf20 <pxCurrentTCBConst2>)
 800cf02:	6819      	ldr	r1, [r3, #0]
 800cf04:	6808      	ldr	r0, [r1, #0]
 800cf06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0a:	f380 8809 	msr	PSP, r0
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f04f 0000 	mov.w	r0, #0
 800cf16:	f380 8811 	msr	BASEPRI, r0
 800cf1a:	4770      	bx	lr
 800cf1c:	f3af 8000 	nop.w

0800cf20 <pxCurrentTCBConst2>:
 800cf20:	20001584 	.word	0x20001584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop

0800cf28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf28:	4808      	ldr	r0, [pc, #32]	; (800cf4c <prvPortStartFirstTask+0x24>)
 800cf2a:	6800      	ldr	r0, [r0, #0]
 800cf2c:	6800      	ldr	r0, [r0, #0]
 800cf2e:	f380 8808 	msr	MSP, r0
 800cf32:	f04f 0000 	mov.w	r0, #0
 800cf36:	f380 8814 	msr	CONTROL, r0
 800cf3a:	b662      	cpsie	i
 800cf3c:	b661      	cpsie	f
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	df00      	svc	0
 800cf48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf4a:	bf00      	nop
 800cf4c:	e000ed08 	.word	0xe000ed08

0800cf50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf56:	4b46      	ldr	r3, [pc, #280]	; (800d070 <xPortStartScheduler+0x120>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a46      	ldr	r2, [pc, #280]	; (800d074 <xPortStartScheduler+0x124>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d10a      	bne.n	800cf76 <xPortStartScheduler+0x26>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	613b      	str	r3, [r7, #16]
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf76:	4b3e      	ldr	r3, [pc, #248]	; (800d070 <xPortStartScheduler+0x120>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a3f      	ldr	r2, [pc, #252]	; (800d078 <xPortStartScheduler+0x128>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d10a      	bne.n	800cf96 <xPortStartScheduler+0x46>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	60fb      	str	r3, [r7, #12]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf96:	4b39      	ldr	r3, [pc, #228]	; (800d07c <xPortStartScheduler+0x12c>)
 800cf98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	22ff      	movs	r2, #255	; 0xff
 800cfa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cfb0:	78fb      	ldrb	r3, [r7, #3]
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	4b31      	ldr	r3, [pc, #196]	; (800d080 <xPortStartScheduler+0x130>)
 800cfbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cfbe:	4b31      	ldr	r3, [pc, #196]	; (800d084 <xPortStartScheduler+0x134>)
 800cfc0:	2207      	movs	r2, #7
 800cfc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfc4:	e009      	b.n	800cfda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cfc6:	4b2f      	ldr	r3, [pc, #188]	; (800d084 <xPortStartScheduler+0x134>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	4a2d      	ldr	r2, [pc, #180]	; (800d084 <xPortStartScheduler+0x134>)
 800cfce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cfd0:	78fb      	ldrb	r3, [r7, #3]
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfe2:	2b80      	cmp	r3, #128	; 0x80
 800cfe4:	d0ef      	beq.n	800cfc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cfe6:	4b27      	ldr	r3, [pc, #156]	; (800d084 <xPortStartScheduler+0x134>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f1c3 0307 	rsb	r3, r3, #7
 800cfee:	2b04      	cmp	r3, #4
 800cff0:	d00a      	beq.n	800d008 <xPortStartScheduler+0xb8>
	__asm volatile
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	f383 8811 	msr	BASEPRI, r3
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	60bb      	str	r3, [r7, #8]
}
 800d004:	bf00      	nop
 800d006:	e7fe      	b.n	800d006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d008:	4b1e      	ldr	r3, [pc, #120]	; (800d084 <xPortStartScheduler+0x134>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	021b      	lsls	r3, r3, #8
 800d00e:	4a1d      	ldr	r2, [pc, #116]	; (800d084 <xPortStartScheduler+0x134>)
 800d010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d012:	4b1c      	ldr	r3, [pc, #112]	; (800d084 <xPortStartScheduler+0x134>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d01a:	4a1a      	ldr	r2, [pc, #104]	; (800d084 <xPortStartScheduler+0x134>)
 800d01c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	b2da      	uxtb	r2, r3
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d026:	4b18      	ldr	r3, [pc, #96]	; (800d088 <xPortStartScheduler+0x138>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a17      	ldr	r2, [pc, #92]	; (800d088 <xPortStartScheduler+0x138>)
 800d02c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d032:	4b15      	ldr	r3, [pc, #84]	; (800d088 <xPortStartScheduler+0x138>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a14      	ldr	r2, [pc, #80]	; (800d088 <xPortStartScheduler+0x138>)
 800d038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d03c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d03e:	f000 f8dd 	bl	800d1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d042:	4b12      	ldr	r3, [pc, #72]	; (800d08c <xPortStartScheduler+0x13c>)
 800d044:	2200      	movs	r2, #0
 800d046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d048:	f000 f8fc 	bl	800d244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d04c:	4b10      	ldr	r3, [pc, #64]	; (800d090 <xPortStartScheduler+0x140>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a0f      	ldr	r2, [pc, #60]	; (800d090 <xPortStartScheduler+0x140>)
 800d052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d058:	f7ff ff66 	bl	800cf28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d05c:	f7ff f856 	bl	800c10c <vTaskSwitchContext>
	prvTaskExitError();
 800d060:	f7ff ff22 	bl	800cea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	e000ed00 	.word	0xe000ed00
 800d074:	410fc271 	.word	0x410fc271
 800d078:	410fc270 	.word	0x410fc270
 800d07c:	e000e400 	.word	0xe000e400
 800d080:	20001bb0 	.word	0x20001bb0
 800d084:	20001bb4 	.word	0x20001bb4
 800d088:	e000ed20 	.word	0xe000ed20
 800d08c:	20000580 	.word	0x20000580
 800d090:	e000ef34 	.word	0xe000ef34

0800d094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
	__asm volatile
 800d09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09e:	f383 8811 	msr	BASEPRI, r3
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	607b      	str	r3, [r7, #4]
}
 800d0ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d0ae:	4b0f      	ldr	r3, [pc, #60]	; (800d0ec <vPortEnterCritical+0x58>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	4a0d      	ldr	r2, [pc, #52]	; (800d0ec <vPortEnterCritical+0x58>)
 800d0b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d0b8:	4b0c      	ldr	r3, [pc, #48]	; (800d0ec <vPortEnterCritical+0x58>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d10f      	bne.n	800d0e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0c0:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <vPortEnterCritical+0x5c>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00a      	beq.n	800d0e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	603b      	str	r3, [r7, #0]
}
 800d0dc:	bf00      	nop
 800d0de:	e7fe      	b.n	800d0de <vPortEnterCritical+0x4a>
	}
}
 800d0e0:	bf00      	nop
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	20000580 	.word	0x20000580
 800d0f0:	e000ed04 	.word	0xe000ed04

0800d0f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d0fa:	4b12      	ldr	r3, [pc, #72]	; (800d144 <vPortExitCritical+0x50>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d10a      	bne.n	800d118 <vPortExitCritical+0x24>
	__asm volatile
 800d102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	607b      	str	r3, [r7, #4]
}
 800d114:	bf00      	nop
 800d116:	e7fe      	b.n	800d116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d118:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <vPortExitCritical+0x50>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	3b01      	subs	r3, #1
 800d11e:	4a09      	ldr	r2, [pc, #36]	; (800d144 <vPortExitCritical+0x50>)
 800d120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d122:	4b08      	ldr	r3, [pc, #32]	; (800d144 <vPortExitCritical+0x50>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d105      	bne.n	800d136 <vPortExitCritical+0x42>
 800d12a:	2300      	movs	r3, #0
 800d12c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	f383 8811 	msr	BASEPRI, r3
}
 800d134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d136:	bf00      	nop
 800d138:	370c      	adds	r7, #12
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop
 800d144:	20000580 	.word	0x20000580
	...

0800d150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d150:	f3ef 8009 	mrs	r0, PSP
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	4b15      	ldr	r3, [pc, #84]	; (800d1b0 <pxCurrentTCBConst>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	f01e 0f10 	tst.w	lr, #16
 800d160:	bf08      	it	eq
 800d162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16a:	6010      	str	r0, [r2, #0]
 800d16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d170:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d174:	f380 8811 	msr	BASEPRI, r0
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f7fe ffc4 	bl	800c10c <vTaskSwitchContext>
 800d184:	f04f 0000 	mov.w	r0, #0
 800d188:	f380 8811 	msr	BASEPRI, r0
 800d18c:	bc09      	pop	{r0, r3}
 800d18e:	6819      	ldr	r1, [r3, #0]
 800d190:	6808      	ldr	r0, [r1, #0]
 800d192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d196:	f01e 0f10 	tst.w	lr, #16
 800d19a:	bf08      	it	eq
 800d19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d1a0:	f380 8809 	msr	PSP, r0
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	f3af 8000 	nop.w

0800d1b0 <pxCurrentTCBConst>:
 800d1b0:	20001584 	.word	0x20001584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d1b4:	bf00      	nop
 800d1b6:	bf00      	nop

0800d1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	607b      	str	r3, [r7, #4]
}
 800d1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d1d2:	f7fe fee1 	bl	800bf98 <xTaskIncrementTick>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d1dc:	4b06      	ldr	r3, [pc, #24]	; (800d1f8 <xPortSysTickHandler+0x40>)
 800d1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	f383 8811 	msr	BASEPRI, r3
}
 800d1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d1f0:	bf00      	nop
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	e000ed04 	.word	0xe000ed04

0800d1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d200:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <vPortSetupTimerInterrupt+0x34>)
 800d202:	2200      	movs	r2, #0
 800d204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d206:	4b0b      	ldr	r3, [pc, #44]	; (800d234 <vPortSetupTimerInterrupt+0x38>)
 800d208:	2200      	movs	r2, #0
 800d20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d20c:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <vPortSetupTimerInterrupt+0x3c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a0a      	ldr	r2, [pc, #40]	; (800d23c <vPortSetupTimerInterrupt+0x40>)
 800d212:	fba2 2303 	umull	r2, r3, r2, r3
 800d216:	099b      	lsrs	r3, r3, #6
 800d218:	4a09      	ldr	r2, [pc, #36]	; (800d240 <vPortSetupTimerInterrupt+0x44>)
 800d21a:	3b01      	subs	r3, #1
 800d21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d21e:	4b04      	ldr	r3, [pc, #16]	; (800d230 <vPortSetupTimerInterrupt+0x34>)
 800d220:	2207      	movs	r2, #7
 800d222:	601a      	str	r2, [r3, #0]
}
 800d224:	bf00      	nop
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop
 800d230:	e000e010 	.word	0xe000e010
 800d234:	e000e018 	.word	0xe000e018
 800d238:	200004e8 	.word	0x200004e8
 800d23c:	10624dd3 	.word	0x10624dd3
 800d240:	e000e014 	.word	0xe000e014

0800d244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d254 <vPortEnableVFP+0x10>
 800d248:	6801      	ldr	r1, [r0, #0]
 800d24a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d24e:	6001      	str	r1, [r0, #0]
 800d250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d252:	bf00      	nop
 800d254:	e000ed88 	.word	0xe000ed88

0800d258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d258:	b480      	push	{r7}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d25e:	f3ef 8305 	mrs	r3, IPSR
 800d262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2b0f      	cmp	r3, #15
 800d268:	d914      	bls.n	800d294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d26a:	4a17      	ldr	r2, [pc, #92]	; (800d2c8 <vPortValidateInterruptPriority+0x70>)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	4413      	add	r3, r2
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d274:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <vPortValidateInterruptPriority+0x74>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	7afa      	ldrb	r2, [r7, #11]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d20a      	bcs.n	800d294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	607b      	str	r3, [r7, #4]
}
 800d290:	bf00      	nop
 800d292:	e7fe      	b.n	800d292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d294:	4b0e      	ldr	r3, [pc, #56]	; (800d2d0 <vPortValidateInterruptPriority+0x78>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d29c:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <vPortValidateInterruptPriority+0x7c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d90a      	bls.n	800d2ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	603b      	str	r3, [r7, #0]
}
 800d2b6:	bf00      	nop
 800d2b8:	e7fe      	b.n	800d2b8 <vPortValidateInterruptPriority+0x60>
	}
 800d2ba:	bf00      	nop
 800d2bc:	3714      	adds	r7, #20
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	e000e3f0 	.word	0xe000e3f0
 800d2cc:	20001bb0 	.word	0x20001bb0
 800d2d0:	e000ed0c 	.word	0xe000ed0c
 800d2d4:	20001bb4 	.word	0x20001bb4

0800d2d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b08a      	sub	sp, #40	; 0x28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2e4:	f7fe fd9c 	bl	800be20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2e8:	4b5b      	ldr	r3, [pc, #364]	; (800d458 <pvPortMalloc+0x180>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d2f0:	f000 f920 	bl	800d534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2f4:	4b59      	ldr	r3, [pc, #356]	; (800d45c <pvPortMalloc+0x184>)
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f040 8093 	bne.w	800d428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d01d      	beq.n	800d344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d308:	2208      	movs	r2, #8
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4413      	add	r3, r2
 800d30e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f003 0307 	and.w	r3, r3, #7
 800d316:	2b00      	cmp	r3, #0
 800d318:	d014      	beq.n	800d344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f023 0307 	bic.w	r3, r3, #7
 800d320:	3308      	adds	r3, #8
 800d322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f003 0307 	and.w	r3, r3, #7
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00a      	beq.n	800d344 <pvPortMalloc+0x6c>
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	617b      	str	r3, [r7, #20]
}
 800d340:	bf00      	nop
 800d342:	e7fe      	b.n	800d342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d06e      	beq.n	800d428 <pvPortMalloc+0x150>
 800d34a:	4b45      	ldr	r3, [pc, #276]	; (800d460 <pvPortMalloc+0x188>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	429a      	cmp	r2, r3
 800d352:	d869      	bhi.n	800d428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d354:	4b43      	ldr	r3, [pc, #268]	; (800d464 <pvPortMalloc+0x18c>)
 800d356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d358:	4b42      	ldr	r3, [pc, #264]	; (800d464 <pvPortMalloc+0x18c>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d35e:	e004      	b.n	800d36a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	429a      	cmp	r2, r3
 800d372:	d903      	bls.n	800d37c <pvPortMalloc+0xa4>
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1f1      	bne.n	800d360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d37c:	4b36      	ldr	r3, [pc, #216]	; (800d458 <pvPortMalloc+0x180>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d382:	429a      	cmp	r2, r3
 800d384:	d050      	beq.n	800d428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2208      	movs	r2, #8
 800d38c:	4413      	add	r3, r2
 800d38e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	6a3b      	ldr	r3, [r7, #32]
 800d396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	1ad2      	subs	r2, r2, r3
 800d3a0:	2308      	movs	r3, #8
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d91f      	bls.n	800d3e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	f003 0307 	and.w	r3, r3, #7
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00a      	beq.n	800d3d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3be:	f383 8811 	msr	BASEPRI, r3
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	613b      	str	r3, [r7, #16]
}
 800d3cc:	bf00      	nop
 800d3ce:	e7fe      	b.n	800d3ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	1ad2      	subs	r2, r2, r3
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3e2:	69b8      	ldr	r0, [r7, #24]
 800d3e4:	f000 f908 	bl	800d5f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3e8:	4b1d      	ldr	r3, [pc, #116]	; (800d460 <pvPortMalloc+0x188>)
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	4a1b      	ldr	r2, [pc, #108]	; (800d460 <pvPortMalloc+0x188>)
 800d3f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3f6:	4b1a      	ldr	r3, [pc, #104]	; (800d460 <pvPortMalloc+0x188>)
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	4b1b      	ldr	r3, [pc, #108]	; (800d468 <pvPortMalloc+0x190>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d203      	bcs.n	800d40a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d402:	4b17      	ldr	r3, [pc, #92]	; (800d460 <pvPortMalloc+0x188>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a18      	ldr	r2, [pc, #96]	; (800d468 <pvPortMalloc+0x190>)
 800d408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	4b13      	ldr	r3, [pc, #76]	; (800d45c <pvPortMalloc+0x184>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	431a      	orrs	r2, r3
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	2200      	movs	r2, #0
 800d41c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d41e:	4b13      	ldr	r3, [pc, #76]	; (800d46c <pvPortMalloc+0x194>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3301      	adds	r3, #1
 800d424:	4a11      	ldr	r2, [pc, #68]	; (800d46c <pvPortMalloc+0x194>)
 800d426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d428:	f7fe fd08 	bl	800be3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	f003 0307 	and.w	r3, r3, #7
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00a      	beq.n	800d44c <pvPortMalloc+0x174>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	60fb      	str	r3, [r7, #12]
}
 800d448:	bf00      	nop
 800d44a:	e7fe      	b.n	800d44a <pvPortMalloc+0x172>
	return pvReturn;
 800d44c:	69fb      	ldr	r3, [r7, #28]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3728      	adds	r7, #40	; 0x28
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	200057c0 	.word	0x200057c0
 800d45c:	200057d4 	.word	0x200057d4
 800d460:	200057c4 	.word	0x200057c4
 800d464:	200057b8 	.word	0x200057b8
 800d468:	200057c8 	.word	0x200057c8
 800d46c:	200057cc 	.word	0x200057cc

0800d470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d04d      	beq.n	800d51e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d482:	2308      	movs	r3, #8
 800d484:	425b      	negs	r3, r3
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	4413      	add	r3, r2
 800d48a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	685a      	ldr	r2, [r3, #4]
 800d494:	4b24      	ldr	r3, [pc, #144]	; (800d528 <vPortFree+0xb8>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4013      	ands	r3, r2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d10a      	bne.n	800d4b4 <vPortFree+0x44>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	60fb      	str	r3, [r7, #12]
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00a      	beq.n	800d4d2 <vPortFree+0x62>
	__asm volatile
 800d4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	60bb      	str	r3, [r7, #8]
}
 800d4ce:	bf00      	nop
 800d4d0:	e7fe      	b.n	800d4d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	685a      	ldr	r2, [r3, #4]
 800d4d6:	4b14      	ldr	r3, [pc, #80]	; (800d528 <vPortFree+0xb8>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4013      	ands	r3, r2
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d01e      	beq.n	800d51e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d11a      	bne.n	800d51e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	4b0e      	ldr	r3, [pc, #56]	; (800d528 <vPortFree+0xb8>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	43db      	mvns	r3, r3
 800d4f2:	401a      	ands	r2, r3
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d4f8:	f7fe fc92 	bl	800be20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <vPortFree+0xbc>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4413      	add	r3, r2
 800d506:	4a09      	ldr	r2, [pc, #36]	; (800d52c <vPortFree+0xbc>)
 800d508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d50a:	6938      	ldr	r0, [r7, #16]
 800d50c:	f000 f874 	bl	800d5f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d510:	4b07      	ldr	r3, [pc, #28]	; (800d530 <vPortFree+0xc0>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	3301      	adds	r3, #1
 800d516:	4a06      	ldr	r2, [pc, #24]	; (800d530 <vPortFree+0xc0>)
 800d518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d51a:	f7fe fc8f 	bl	800be3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d51e:	bf00      	nop
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	200057d4 	.word	0x200057d4
 800d52c:	200057c4 	.word	0x200057c4
 800d530:	200057d0 	.word	0x200057d0

0800d534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d53a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d53e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d540:	4b27      	ldr	r3, [pc, #156]	; (800d5e0 <prvHeapInit+0xac>)
 800d542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00c      	beq.n	800d568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	3307      	adds	r3, #7
 800d552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f023 0307 	bic.w	r3, r3, #7
 800d55a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	4a1f      	ldr	r2, [pc, #124]	; (800d5e0 <prvHeapInit+0xac>)
 800d564:	4413      	add	r3, r2
 800d566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d56c:	4a1d      	ldr	r2, [pc, #116]	; (800d5e4 <prvHeapInit+0xb0>)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d572:	4b1c      	ldr	r3, [pc, #112]	; (800d5e4 <prvHeapInit+0xb0>)
 800d574:	2200      	movs	r2, #0
 800d576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	4413      	add	r3, r2
 800d57e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d580:	2208      	movs	r2, #8
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	1a9b      	subs	r3, r3, r2
 800d586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f023 0307 	bic.w	r3, r3, #7
 800d58e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	4a15      	ldr	r2, [pc, #84]	; (800d5e8 <prvHeapInit+0xb4>)
 800d594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d596:	4b14      	ldr	r3, [pc, #80]	; (800d5e8 <prvHeapInit+0xb4>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2200      	movs	r2, #0
 800d59c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d59e:	4b12      	ldr	r3, [pc, #72]	; (800d5e8 <prvHeapInit+0xb4>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	68fa      	ldr	r2, [r7, #12]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5b4:	4b0c      	ldr	r3, [pc, #48]	; (800d5e8 <prvHeapInit+0xb4>)
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	4a0a      	ldr	r2, [pc, #40]	; (800d5ec <prvHeapInit+0xb8>)
 800d5c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	4a09      	ldr	r2, [pc, #36]	; (800d5f0 <prvHeapInit+0xbc>)
 800d5ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5cc:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <prvHeapInit+0xc0>)
 800d5ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d5d2:	601a      	str	r2, [r3, #0]
}
 800d5d4:	bf00      	nop
 800d5d6:	3714      	adds	r7, #20
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	20001bb8 	.word	0x20001bb8
 800d5e4:	200057b8 	.word	0x200057b8
 800d5e8:	200057c0 	.word	0x200057c0
 800d5ec:	200057c8 	.word	0x200057c8
 800d5f0:	200057c4 	.word	0x200057c4
 800d5f4:	200057d4 	.word	0x200057d4

0800d5f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d600:	4b28      	ldr	r3, [pc, #160]	; (800d6a4 <prvInsertBlockIntoFreeList+0xac>)
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	e002      	b.n	800d60c <prvInsertBlockIntoFreeList+0x14>
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	429a      	cmp	r2, r3
 800d614:	d8f7      	bhi.n	800d606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	4413      	add	r3, r2
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	429a      	cmp	r2, r3
 800d626:	d108      	bne.n	800d63a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	441a      	add	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	441a      	add	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d118      	bne.n	800d680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	4b15      	ldr	r3, [pc, #84]	; (800d6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	429a      	cmp	r2, r3
 800d658:	d00d      	beq.n	800d676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685a      	ldr	r2, [r3, #4]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	441a      	add	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	601a      	str	r2, [r3, #0]
 800d674:	e008      	b.n	800d688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d676:	4b0c      	ldr	r3, [pc, #48]	; (800d6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	601a      	str	r2, [r3, #0]
 800d67e:	e003      	b.n	800d688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d002      	beq.n	800d696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d696:	bf00      	nop
 800d698:	3714      	adds	r7, #20
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	200057b8 	.word	0x200057b8
 800d6a8:	200057c0 	.word	0x200057c0

0800d6ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	4912      	ldr	r1, [pc, #72]	; (800d6fc <MX_USB_DEVICE_Init+0x50>)
 800d6b4:	4812      	ldr	r0, [pc, #72]	; (800d700 <MX_USB_DEVICE_Init+0x54>)
 800d6b6:	f7fb fdc1 	bl	800923c <USBD_Init>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d6c0:	f7f4 fb96 	bl	8001df0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d6c4:	490f      	ldr	r1, [pc, #60]	; (800d704 <MX_USB_DEVICE_Init+0x58>)
 800d6c6:	480e      	ldr	r0, [pc, #56]	; (800d700 <MX_USB_DEVICE_Init+0x54>)
 800d6c8:	f7fb fde8 	bl	800929c <USBD_RegisterClass>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d6d2:	f7f4 fb8d 	bl	8001df0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d6d6:	490c      	ldr	r1, [pc, #48]	; (800d708 <MX_USB_DEVICE_Init+0x5c>)
 800d6d8:	4809      	ldr	r0, [pc, #36]	; (800d700 <MX_USB_DEVICE_Init+0x54>)
 800d6da:	f7fb fd1f 	bl	800911c <USBD_CDC_RegisterInterface>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d6e4:	f7f4 fb84 	bl	8001df0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d6e8:	4805      	ldr	r0, [pc, #20]	; (800d700 <MX_USB_DEVICE_Init+0x54>)
 800d6ea:	f7fb fe0d 	bl	8009308 <USBD_Start>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d6f4:	f7f4 fb7c 	bl	8001df0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d6f8:	bf00      	nop
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	20000598 	.word	0x20000598
 800d700:	200057d8 	.word	0x200057d8
 800d704:	20000500 	.word	0x20000500
 800d708:	20000584 	.word	0x20000584

0800d70c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d710:	2200      	movs	r2, #0
 800d712:	4905      	ldr	r1, [pc, #20]	; (800d728 <CDC_Init_FS+0x1c>)
 800d714:	4805      	ldr	r0, [pc, #20]	; (800d72c <CDC_Init_FS+0x20>)
 800d716:	f7fb fd1b 	bl	8009150 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d71a:	4905      	ldr	r1, [pc, #20]	; (800d730 <CDC_Init_FS+0x24>)
 800d71c:	4803      	ldr	r0, [pc, #12]	; (800d72c <CDC_Init_FS+0x20>)
 800d71e:	f7fb fd39 	bl	8009194 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d722:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d724:	4618      	mov	r0, r3
 800d726:	bd80      	pop	{r7, pc}
 800d728:	20005eb4 	.word	0x20005eb4
 800d72c:	200057d8 	.word	0x200057d8
 800d730:	20005ab4 	.word	0x20005ab4

0800d734 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d734:	b480      	push	{r7}
 800d736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d738:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	4603      	mov	r3, r0
 800d74c:	6039      	str	r1, [r7, #0]
 800d74e:	71fb      	strb	r3, [r7, #7]
 800d750:	4613      	mov	r3, r2
 800d752:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	2b23      	cmp	r3, #35	; 0x23
 800d758:	d84a      	bhi.n	800d7f0 <CDC_Control_FS+0xac>
 800d75a:	a201      	add	r2, pc, #4	; (adr r2, 800d760 <CDC_Control_FS+0x1c>)
 800d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d760:	0800d7f1 	.word	0x0800d7f1
 800d764:	0800d7f1 	.word	0x0800d7f1
 800d768:	0800d7f1 	.word	0x0800d7f1
 800d76c:	0800d7f1 	.word	0x0800d7f1
 800d770:	0800d7f1 	.word	0x0800d7f1
 800d774:	0800d7f1 	.word	0x0800d7f1
 800d778:	0800d7f1 	.word	0x0800d7f1
 800d77c:	0800d7f1 	.word	0x0800d7f1
 800d780:	0800d7f1 	.word	0x0800d7f1
 800d784:	0800d7f1 	.word	0x0800d7f1
 800d788:	0800d7f1 	.word	0x0800d7f1
 800d78c:	0800d7f1 	.word	0x0800d7f1
 800d790:	0800d7f1 	.word	0x0800d7f1
 800d794:	0800d7f1 	.word	0x0800d7f1
 800d798:	0800d7f1 	.word	0x0800d7f1
 800d79c:	0800d7f1 	.word	0x0800d7f1
 800d7a0:	0800d7f1 	.word	0x0800d7f1
 800d7a4:	0800d7f1 	.word	0x0800d7f1
 800d7a8:	0800d7f1 	.word	0x0800d7f1
 800d7ac:	0800d7f1 	.word	0x0800d7f1
 800d7b0:	0800d7f1 	.word	0x0800d7f1
 800d7b4:	0800d7f1 	.word	0x0800d7f1
 800d7b8:	0800d7f1 	.word	0x0800d7f1
 800d7bc:	0800d7f1 	.word	0x0800d7f1
 800d7c0:	0800d7f1 	.word	0x0800d7f1
 800d7c4:	0800d7f1 	.word	0x0800d7f1
 800d7c8:	0800d7f1 	.word	0x0800d7f1
 800d7cc:	0800d7f1 	.word	0x0800d7f1
 800d7d0:	0800d7f1 	.word	0x0800d7f1
 800d7d4:	0800d7f1 	.word	0x0800d7f1
 800d7d8:	0800d7f1 	.word	0x0800d7f1
 800d7dc:	0800d7f1 	.word	0x0800d7f1
 800d7e0:	0800d7f1 	.word	0x0800d7f1
 800d7e4:	0800d7f1 	.word	0x0800d7f1
 800d7e8:	0800d7f1 	.word	0x0800d7f1
 800d7ec:	0800d7f1 	.word	0x0800d7f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d7f0:	bf00      	nop
  }

  return (USBD_OK);
 800d7f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d80a:	6879      	ldr	r1, [r7, #4]
 800d80c:	4805      	ldr	r0, [pc, #20]	; (800d824 <CDC_Receive_FS+0x24>)
 800d80e:	f7fb fcc1 	bl	8009194 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d812:	4804      	ldr	r0, [pc, #16]	; (800d824 <CDC_Receive_FS+0x24>)
 800d814:	f7fb fcdc 	bl	80091d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d818:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	200057d8 	.word	0x200057d8

0800d828 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d828:	b480      	push	{r7}
 800d82a:	b087      	sub	sp, #28
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	4613      	mov	r3, r2
 800d834:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d83a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
	...

0800d84c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	6039      	str	r1, [r7, #0]
 800d856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2212      	movs	r2, #18
 800d85c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d85e:	4b03      	ldr	r3, [pc, #12]	; (800d86c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d860:	4618      	mov	r0, r3
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	200005b4 	.word	0x200005b4

0800d870 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	6039      	str	r1, [r7, #0]
 800d87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2204      	movs	r2, #4
 800d880:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d882:	4b03      	ldr	r3, [pc, #12]	; (800d890 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d884:	4618      	mov	r0, r3
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	200005c8 	.word	0x200005c8

0800d894 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	4603      	mov	r3, r0
 800d89c:	6039      	str	r1, [r7, #0]
 800d89e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d105      	bne.n	800d8b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	4907      	ldr	r1, [pc, #28]	; (800d8c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d8aa:	4808      	ldr	r0, [pc, #32]	; (800d8cc <USBD_FS_ProductStrDescriptor+0x38>)
 800d8ac:	f7fc fed8 	bl	800a660 <USBD_GetString>
 800d8b0:	e004      	b.n	800d8bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	4904      	ldr	r1, [pc, #16]	; (800d8c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d8b6:	4805      	ldr	r0, [pc, #20]	; (800d8cc <USBD_FS_ProductStrDescriptor+0x38>)
 800d8b8:	f7fc fed2 	bl	800a660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8bc:	4b02      	ldr	r3, [pc, #8]	; (800d8c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	200062b4 	.word	0x200062b4
 800d8cc:	0800ebf8 	.word	0x0800ebf8

0800d8d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	6039      	str	r1, [r7, #0]
 800d8da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	4904      	ldr	r1, [pc, #16]	; (800d8f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d8e0:	4804      	ldr	r0, [pc, #16]	; (800d8f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d8e2:	f7fc febd 	bl	800a660 <USBD_GetString>
  return USBD_StrDesc;
 800d8e6:	4b02      	ldr	r3, [pc, #8]	; (800d8f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	200062b4 	.word	0x200062b4
 800d8f4:	0800ec10 	.word	0x0800ec10

0800d8f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	4603      	mov	r3, r0
 800d900:	6039      	str	r1, [r7, #0]
 800d902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	221a      	movs	r2, #26
 800d908:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d90a:	f000 f843 	bl	800d994 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d90e:	4b02      	ldr	r3, [pc, #8]	; (800d918 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d910:	4618      	mov	r0, r3
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	200005cc 	.word	0x200005cc

0800d91c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	4603      	mov	r3, r0
 800d924:	6039      	str	r1, [r7, #0]
 800d926:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d105      	bne.n	800d93a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d92e:	683a      	ldr	r2, [r7, #0]
 800d930:	4907      	ldr	r1, [pc, #28]	; (800d950 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d932:	4808      	ldr	r0, [pc, #32]	; (800d954 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d934:	f7fc fe94 	bl	800a660 <USBD_GetString>
 800d938:	e004      	b.n	800d944 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	4904      	ldr	r1, [pc, #16]	; (800d950 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d93e:	4805      	ldr	r0, [pc, #20]	; (800d954 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d940:	f7fc fe8e 	bl	800a660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d944:	4b02      	ldr	r3, [pc, #8]	; (800d950 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	200062b4 	.word	0x200062b4
 800d954:	0800ec24 	.word	0x0800ec24

0800d958 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	6039      	str	r1, [r7, #0]
 800d962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d964:	79fb      	ldrb	r3, [r7, #7]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d105      	bne.n	800d976 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	4907      	ldr	r1, [pc, #28]	; (800d98c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d96e:	4808      	ldr	r0, [pc, #32]	; (800d990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d970:	f7fc fe76 	bl	800a660 <USBD_GetString>
 800d974:	e004      	b.n	800d980 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d976:	683a      	ldr	r2, [r7, #0]
 800d978:	4904      	ldr	r1, [pc, #16]	; (800d98c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d97a:	4805      	ldr	r0, [pc, #20]	; (800d990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d97c:	f7fc fe70 	bl	800a660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d980:	4b02      	ldr	r3, [pc, #8]	; (800d98c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	200062b4 	.word	0x200062b4
 800d990:	0800ec30 	.word	0x0800ec30

0800d994 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d99a:	4b0f      	ldr	r3, [pc, #60]	; (800d9d8 <Get_SerialNum+0x44>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d9a0:	4b0e      	ldr	r3, [pc, #56]	; (800d9dc <Get_SerialNum+0x48>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d9a6:	4b0e      	ldr	r3, [pc, #56]	; (800d9e0 <Get_SerialNum+0x4c>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d009      	beq.n	800d9ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d9ba:	2208      	movs	r2, #8
 800d9bc:	4909      	ldr	r1, [pc, #36]	; (800d9e4 <Get_SerialNum+0x50>)
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f000 f814 	bl	800d9ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d9c4:	2204      	movs	r2, #4
 800d9c6:	4908      	ldr	r1, [pc, #32]	; (800d9e8 <Get_SerialNum+0x54>)
 800d9c8:	68b8      	ldr	r0, [r7, #8]
 800d9ca:	f000 f80f 	bl	800d9ec <IntToUnicode>
  }
}
 800d9ce:	bf00      	nop
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	1fff7a10 	.word	0x1fff7a10
 800d9dc:	1fff7a14 	.word	0x1fff7a14
 800d9e0:	1fff7a18 	.word	0x1fff7a18
 800d9e4:	200005ce 	.word	0x200005ce
 800d9e8:	200005de 	.word	0x200005de

0800d9ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d9fe:	2300      	movs	r3, #0
 800da00:	75fb      	strb	r3, [r7, #23]
 800da02:	e027      	b.n	800da54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	0f1b      	lsrs	r3, r3, #28
 800da08:	2b09      	cmp	r3, #9
 800da0a:	d80b      	bhi.n	800da24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	0f1b      	lsrs	r3, r3, #28
 800da10:	b2da      	uxtb	r2, r3
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	4619      	mov	r1, r3
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	440b      	add	r3, r1
 800da1c:	3230      	adds	r2, #48	; 0x30
 800da1e:	b2d2      	uxtb	r2, r2
 800da20:	701a      	strb	r2, [r3, #0]
 800da22:	e00a      	b.n	800da3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	0f1b      	lsrs	r3, r3, #28
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	7dfb      	ldrb	r3, [r7, #23]
 800da2c:	005b      	lsls	r3, r3, #1
 800da2e:	4619      	mov	r1, r3
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	440b      	add	r3, r1
 800da34:	3237      	adds	r2, #55	; 0x37
 800da36:	b2d2      	uxtb	r2, r2
 800da38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	011b      	lsls	r3, r3, #4
 800da3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	3301      	adds	r3, #1
 800da46:	68ba      	ldr	r2, [r7, #8]
 800da48:	4413      	add	r3, r2
 800da4a:	2200      	movs	r2, #0
 800da4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
 800da50:	3301      	adds	r3, #1
 800da52:	75fb      	strb	r3, [r7, #23]
 800da54:	7dfa      	ldrb	r2, [r7, #23]
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d3d3      	bcc.n	800da04 <IntToUnicode+0x18>
  }
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	371c      	adds	r7, #28
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
	...

0800da6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08a      	sub	sp, #40	; 0x28
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da74:	f107 0314 	add.w	r3, r7, #20
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]
 800da7c:	605a      	str	r2, [r3, #4]
 800da7e:	609a      	str	r2, [r3, #8]
 800da80:	60da      	str	r2, [r3, #12]
 800da82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da8c:	d13a      	bne.n	800db04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da8e:	2300      	movs	r3, #0
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	4b1e      	ldr	r3, [pc, #120]	; (800db0c <HAL_PCD_MspInit+0xa0>)
 800da94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da96:	4a1d      	ldr	r2, [pc, #116]	; (800db0c <HAL_PCD_MspInit+0xa0>)
 800da98:	f043 0301 	orr.w	r3, r3, #1
 800da9c:	6313      	str	r3, [r2, #48]	; 0x30
 800da9e:	4b1b      	ldr	r3, [pc, #108]	; (800db0c <HAL_PCD_MspInit+0xa0>)
 800daa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa2:	f003 0301 	and.w	r3, r3, #1
 800daa6:	613b      	str	r3, [r7, #16]
 800daa8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800daaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800daae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dab0:	2302      	movs	r3, #2
 800dab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dab4:	2300      	movs	r3, #0
 800dab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dab8:	2303      	movs	r3, #3
 800daba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dabc:	230a      	movs	r3, #10
 800dabe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dac0:	f107 0314 	add.w	r3, r7, #20
 800dac4:	4619      	mov	r1, r3
 800dac6:	4812      	ldr	r0, [pc, #72]	; (800db10 <HAL_PCD_MspInit+0xa4>)
 800dac8:	f7f4 fd58 	bl	800257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dacc:	4b0f      	ldr	r3, [pc, #60]	; (800db0c <HAL_PCD_MspInit+0xa0>)
 800dace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad0:	4a0e      	ldr	r2, [pc, #56]	; (800db0c <HAL_PCD_MspInit+0xa0>)
 800dad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dad6:	6353      	str	r3, [r2, #52]	; 0x34
 800dad8:	2300      	movs	r3, #0
 800dada:	60fb      	str	r3, [r7, #12]
 800dadc:	4b0b      	ldr	r3, [pc, #44]	; (800db0c <HAL_PCD_MspInit+0xa0>)
 800dade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dae0:	4a0a      	ldr	r2, [pc, #40]	; (800db0c <HAL_PCD_MspInit+0xa0>)
 800dae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dae6:	6453      	str	r3, [r2, #68]	; 0x44
 800dae8:	4b08      	ldr	r3, [pc, #32]	; (800db0c <HAL_PCD_MspInit+0xa0>)
 800daea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daf0:	60fb      	str	r3, [r7, #12]
 800daf2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800daf4:	2200      	movs	r2, #0
 800daf6:	2105      	movs	r1, #5
 800daf8:	2043      	movs	r0, #67	; 0x43
 800dafa:	f7f4 fd15 	bl	8002528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dafe:	2043      	movs	r0, #67	; 0x43
 800db00:	f7f4 fd2e 	bl	8002560 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db04:	bf00      	nop
 800db06:	3728      	adds	r7, #40	; 0x28
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	40023800 	.word	0x40023800
 800db10:	40020000 	.word	0x40020000

0800db14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800db28:	4619      	mov	r1, r3
 800db2a:	4610      	mov	r0, r2
 800db2c:	f7fb fc39 	bl	80093a2 <USBD_LL_SetupStage>
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800db4a:	78fa      	ldrb	r2, [r7, #3]
 800db4c:	6879      	ldr	r1, [r7, #4]
 800db4e:	4613      	mov	r3, r2
 800db50:	00db      	lsls	r3, r3, #3
 800db52:	4413      	add	r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	440b      	add	r3, r1
 800db58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	78fb      	ldrb	r3, [r7, #3]
 800db60:	4619      	mov	r1, r3
 800db62:	f7fb fc73 	bl	800944c <USBD_LL_DataOutStage>
}
 800db66:	bf00      	nop
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	460b      	mov	r3, r1
 800db78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800db80:	78fa      	ldrb	r2, [r7, #3]
 800db82:	6879      	ldr	r1, [r7, #4]
 800db84:	4613      	mov	r3, r2
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	4413      	add	r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	440b      	add	r3, r1
 800db8e:	334c      	adds	r3, #76	; 0x4c
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	78fb      	ldrb	r3, [r7, #3]
 800db94:	4619      	mov	r1, r3
 800db96:	f7fb fd0c 	bl	80095b2 <USBD_LL_DataInStage>
}
 800db9a:	bf00      	nop
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b082      	sub	sp, #8
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fb fe40 	bl	8009836 <USBD_LL_SOF>
}
 800dbb6:	bf00      	nop
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	2b02      	cmp	r3, #2
 800dbd0:	d001      	beq.n	800dbd6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dbd2:	f7f4 f90d 	bl	8001df0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dbdc:	7bfa      	ldrb	r2, [r7, #15]
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fb fdea 	bl	80097ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fb fd92 	bl	8009716 <USBD_LL_Reset>
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fb fde5 	bl	80097da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	6812      	ldr	r2, [r2, #0]
 800dc1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a1b      	ldr	r3, [r3, #32]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d005      	beq.n	800dc3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc30:	4b04      	ldr	r3, [pc, #16]	; (800dc44 <HAL_PCD_SuspendCallback+0x48>)
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	4a03      	ldr	r2, [pc, #12]	; (800dc44 <HAL_PCD_SuspendCallback+0x48>)
 800dc36:	f043 0306 	orr.w	r3, r3, #6
 800dc3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	e000ed00 	.word	0xe000ed00

0800dc48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fb fdd5 	bl	8009806 <USBD_LL_Resume>
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc76:	78fa      	ldrb	r2, [r7, #3]
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fb fe2d 	bl	80098da <USBD_LL_IsoOUTIncomplete>
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc9a:	78fa      	ldrb	r2, [r7, #3]
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fb fde9 	bl	8009876 <USBD_LL_IsoINIncomplete>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fb fe3f 	bl	800993e <USBD_LL_DevConnected>
}
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fb fe3c 	bl	8009954 <USBD_LL_DevDisconnected>
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d13c      	bne.n	800dd6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dcf4:	4a20      	ldr	r2, [pc, #128]	; (800dd78 <USBD_LL_Init+0x94>)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a1e      	ldr	r2, [pc, #120]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd04:	4b1c      	ldr	r3, [pc, #112]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dd0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dd0c:	4b1a      	ldr	r3, [pc, #104]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd0e:	2204      	movs	r2, #4
 800dd10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dd12:	4b19      	ldr	r3, [pc, #100]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd14:	2202      	movs	r2, #2
 800dd16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dd18:	4b17      	ldr	r3, [pc, #92]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dd1e:	4b16      	ldr	r3, [pc, #88]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd20:	2202      	movs	r2, #2
 800dd22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dd24:	4b14      	ldr	r3, [pc, #80]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dd2a:	4b13      	ldr	r3, [pc, #76]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dd30:	4b11      	ldr	r3, [pc, #68]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dd36:	4b10      	ldr	r3, [pc, #64]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dd3c:	4b0e      	ldr	r3, [pc, #56]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dd42:	480d      	ldr	r0, [pc, #52]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd44:	f7f5 fd8f 	bl	8003866 <HAL_PCD_Init>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d001      	beq.n	800dd52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dd4e:	f7f4 f84f 	bl	8001df0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dd52:	2180      	movs	r1, #128	; 0x80
 800dd54:	4808      	ldr	r0, [pc, #32]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd56:	f7f6 ffe6 	bl	8004d26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dd5a:	2240      	movs	r2, #64	; 0x40
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	4806      	ldr	r0, [pc, #24]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd60:	f7f6 ff9a 	bl	8004c98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dd64:	2280      	movs	r2, #128	; 0x80
 800dd66:	2101      	movs	r1, #1
 800dd68:	4803      	ldr	r0, [pc, #12]	; (800dd78 <USBD_LL_Init+0x94>)
 800dd6a:	f7f6 ff95 	bl	8004c98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	200064b4 	.word	0x200064b4

0800dd7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd84:	2300      	movs	r3, #0
 800dd86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7f5 fe84 	bl	8003aa0 <HAL_PCD_Start>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 f942 	bl	800e028 <USBD_Get_USB_Status>
 800dda4:	4603      	mov	r3, r0
 800dda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	70fb      	strb	r3, [r7, #3]
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	70bb      	strb	r3, [r7, #2]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ddda:	78bb      	ldrb	r3, [r7, #2]
 800dddc:	883a      	ldrh	r2, [r7, #0]
 800ddde:	78f9      	ldrb	r1, [r7, #3]
 800dde0:	f7f6 fb55 	bl	800448e <HAL_PCD_EP_Open>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 f91c 	bl	800e028 <USBD_Get_USB_Status>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de0e:	2300      	movs	r3, #0
 800de10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de18:	78fa      	ldrb	r2, [r7, #3]
 800de1a:	4611      	mov	r1, r2
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7f6 fb9e 	bl	800455e <HAL_PCD_EP_Close>
 800de22:	4603      	mov	r3, r0
 800de24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de26:	7bfb      	ldrb	r3, [r7, #15]
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 f8fd 	bl	800e028 <USBD_Get_USB_Status>
 800de2e:	4603      	mov	r3, r0
 800de30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de32:	7bbb      	ldrb	r3, [r7, #14]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	4611      	mov	r1, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f6 fc76 	bl	800474c <HAL_PCD_EP_SetStall>
 800de60:	4603      	mov	r3, r0
 800de62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de64:	7bfb      	ldrb	r3, [r7, #15]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f8de 	bl	800e028 <USBD_Get_USB_Status>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de70:	7bbb      	ldrb	r3, [r7, #14]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	460b      	mov	r3, r1
 800de84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de94:	78fa      	ldrb	r2, [r7, #3]
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f6 fcbb 	bl	8004814 <HAL_PCD_EP_ClrStall>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f8bf 	bl	800e028 <USBD_Get_USB_Status>
 800deaa:	4603      	mov	r3, r0
 800deac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deae:	7bbb      	ldrb	r3, [r7, #14]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800deca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800decc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	da0b      	bge.n	800deec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ded4:	78fb      	ldrb	r3, [r7, #3]
 800ded6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800deda:	68f9      	ldr	r1, [r7, #12]
 800dedc:	4613      	mov	r3, r2
 800dede:	00db      	lsls	r3, r3, #3
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	440b      	add	r3, r1
 800dee6:	333e      	adds	r3, #62	; 0x3e
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	e00b      	b.n	800df04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800deec:	78fb      	ldrb	r3, [r7, #3]
 800deee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800def2:	68f9      	ldr	r1, [r7, #12]
 800def4:	4613      	mov	r3, r2
 800def6:	00db      	lsls	r3, r3, #3
 800def8:	4413      	add	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	440b      	add	r3, r1
 800defe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800df02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df04:	4618      	mov	r0, r3
 800df06:	3714      	adds	r7, #20
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df20:	2300      	movs	r3, #0
 800df22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df2a:	78fa      	ldrb	r2, [r7, #3]
 800df2c:	4611      	mov	r1, r2
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f6 fa88 	bl	8004444 <HAL_PCD_SetAddress>
 800df34:	4603      	mov	r3, r0
 800df36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df38:	7bfb      	ldrb	r3, [r7, #15]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 f874 	bl	800e028 <USBD_Get_USB_Status>
 800df40:	4603      	mov	r3, r0
 800df42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df44:	7bbb      	ldrb	r3, [r7, #14]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b086      	sub	sp, #24
 800df52:	af00      	add	r7, sp, #0
 800df54:	60f8      	str	r0, [r7, #12]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
 800df5a:	460b      	mov	r3, r1
 800df5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df5e:	2300      	movs	r3, #0
 800df60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df6c:	7af9      	ldrb	r1, [r7, #11]
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	f7f6 fba1 	bl	80046b8 <HAL_PCD_EP_Transmit>
 800df76:	4603      	mov	r3, r0
 800df78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df7a:	7dfb      	ldrb	r3, [r7, #23]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 f853 	bl	800e028 <USBD_Get_USB_Status>
 800df82:	4603      	mov	r3, r0
 800df84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df86:	7dbb      	ldrb	r3, [r7, #22]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3718      	adds	r7, #24
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	607a      	str	r2, [r7, #4]
 800df9a:	603b      	str	r3, [r7, #0]
 800df9c:	460b      	mov	r3, r1
 800df9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dfae:	7af9      	ldrb	r1, [r7, #11]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	f7f6 fb1d 	bl	80045f2 <HAL_PCD_EP_Receive>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfbc:	7dfb      	ldrb	r3, [r7, #23]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 f832 	bl	800e028 <USBD_Get_USB_Status>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dfc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3718      	adds	r7, #24
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	460b      	mov	r3, r1
 800dfdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dfe4:	78fa      	ldrb	r2, [r7, #3]
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7f6 fb4d 	bl	8004688 <HAL_PCD_EP_GetRxCount>
 800dfee:	4603      	mov	r3, r0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e000:	4b03      	ldr	r3, [pc, #12]	; (800e010 <USBD_static_malloc+0x18>)
}
 800e002:	4618      	mov	r0, r3
 800e004:	370c      	adds	r7, #12
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	200069c0 	.word	0x200069c0

0800e014 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]

}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e032:	2300      	movs	r3, #0
 800e034:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e036:	79fb      	ldrb	r3, [r7, #7]
 800e038:	2b03      	cmp	r3, #3
 800e03a:	d817      	bhi.n	800e06c <USBD_Get_USB_Status+0x44>
 800e03c:	a201      	add	r2, pc, #4	; (adr r2, 800e044 <USBD_Get_USB_Status+0x1c>)
 800e03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e042:	bf00      	nop
 800e044:	0800e055 	.word	0x0800e055
 800e048:	0800e05b 	.word	0x0800e05b
 800e04c:	0800e061 	.word	0x0800e061
 800e050:	0800e067 	.word	0x0800e067
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]
    break;
 800e058:	e00b      	b.n	800e072 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e05a:	2303      	movs	r3, #3
 800e05c:	73fb      	strb	r3, [r7, #15]
    break;
 800e05e:	e008      	b.n	800e072 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e060:	2301      	movs	r3, #1
 800e062:	73fb      	strb	r3, [r7, #15]
    break;
 800e064:	e005      	b.n	800e072 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e066:	2303      	movs	r3, #3
 800e068:	73fb      	strb	r3, [r7, #15]
    break;
 800e06a:	e002      	b.n	800e072 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e06c:	2303      	movs	r3, #3
 800e06e:	73fb      	strb	r3, [r7, #15]
    break;
 800e070:	bf00      	nop
  }
  return usb_status;
 800e072:	7bfb      	ldrb	r3, [r7, #15]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <__errno>:
 800e080:	4b01      	ldr	r3, [pc, #4]	; (800e088 <__errno+0x8>)
 800e082:	6818      	ldr	r0, [r3, #0]
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	200005e8 	.word	0x200005e8

0800e08c <__libc_init_array>:
 800e08c:	b570      	push	{r4, r5, r6, lr}
 800e08e:	4d0d      	ldr	r5, [pc, #52]	; (800e0c4 <__libc_init_array+0x38>)
 800e090:	4c0d      	ldr	r4, [pc, #52]	; (800e0c8 <__libc_init_array+0x3c>)
 800e092:	1b64      	subs	r4, r4, r5
 800e094:	10a4      	asrs	r4, r4, #2
 800e096:	2600      	movs	r6, #0
 800e098:	42a6      	cmp	r6, r4
 800e09a:	d109      	bne.n	800e0b0 <__libc_init_array+0x24>
 800e09c:	4d0b      	ldr	r5, [pc, #44]	; (800e0cc <__libc_init_array+0x40>)
 800e09e:	4c0c      	ldr	r4, [pc, #48]	; (800e0d0 <__libc_init_array+0x44>)
 800e0a0:	f000 fcb2 	bl	800ea08 <_init>
 800e0a4:	1b64      	subs	r4, r4, r5
 800e0a6:	10a4      	asrs	r4, r4, #2
 800e0a8:	2600      	movs	r6, #0
 800e0aa:	42a6      	cmp	r6, r4
 800e0ac:	d105      	bne.n	800e0ba <__libc_init_array+0x2e>
 800e0ae:	bd70      	pop	{r4, r5, r6, pc}
 800e0b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0b4:	4798      	blx	r3
 800e0b6:	3601      	adds	r6, #1
 800e0b8:	e7ee      	b.n	800e098 <__libc_init_array+0xc>
 800e0ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0be:	4798      	blx	r3
 800e0c0:	3601      	adds	r6, #1
 800e0c2:	e7f2      	b.n	800e0aa <__libc_init_array+0x1e>
 800e0c4:	0800efd4 	.word	0x0800efd4
 800e0c8:	0800efd4 	.word	0x0800efd4
 800e0cc:	0800efd4 	.word	0x0800efd4
 800e0d0:	0800efd8 	.word	0x0800efd8

0800e0d4 <malloc>:
 800e0d4:	4b02      	ldr	r3, [pc, #8]	; (800e0e0 <malloc+0xc>)
 800e0d6:	4601      	mov	r1, r0
 800e0d8:	6818      	ldr	r0, [r3, #0]
 800e0da:	f000 b88d 	b.w	800e1f8 <_malloc_r>
 800e0de:	bf00      	nop
 800e0e0:	200005e8 	.word	0x200005e8

0800e0e4 <free>:
 800e0e4:	4b02      	ldr	r3, [pc, #8]	; (800e0f0 <free+0xc>)
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	6818      	ldr	r0, [r3, #0]
 800e0ea:	f000 b819 	b.w	800e120 <_free_r>
 800e0ee:	bf00      	nop
 800e0f0:	200005e8 	.word	0x200005e8

0800e0f4 <memcpy>:
 800e0f4:	440a      	add	r2, r1
 800e0f6:	4291      	cmp	r1, r2
 800e0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0fc:	d100      	bne.n	800e100 <memcpy+0xc>
 800e0fe:	4770      	bx	lr
 800e100:	b510      	push	{r4, lr}
 800e102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e10a:	4291      	cmp	r1, r2
 800e10c:	d1f9      	bne.n	800e102 <memcpy+0xe>
 800e10e:	bd10      	pop	{r4, pc}

0800e110 <memset>:
 800e110:	4402      	add	r2, r0
 800e112:	4603      	mov	r3, r0
 800e114:	4293      	cmp	r3, r2
 800e116:	d100      	bne.n	800e11a <memset+0xa>
 800e118:	4770      	bx	lr
 800e11a:	f803 1b01 	strb.w	r1, [r3], #1
 800e11e:	e7f9      	b.n	800e114 <memset+0x4>

0800e120 <_free_r>:
 800e120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e122:	2900      	cmp	r1, #0
 800e124:	d044      	beq.n	800e1b0 <_free_r+0x90>
 800e126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e12a:	9001      	str	r0, [sp, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f1a1 0404 	sub.w	r4, r1, #4
 800e132:	bfb8      	it	lt
 800e134:	18e4      	addlt	r4, r4, r3
 800e136:	f000 f917 	bl	800e368 <__malloc_lock>
 800e13a:	4a1e      	ldr	r2, [pc, #120]	; (800e1b4 <_free_r+0x94>)
 800e13c:	9801      	ldr	r0, [sp, #4]
 800e13e:	6813      	ldr	r3, [r2, #0]
 800e140:	b933      	cbnz	r3, 800e150 <_free_r+0x30>
 800e142:	6063      	str	r3, [r4, #4]
 800e144:	6014      	str	r4, [r2, #0]
 800e146:	b003      	add	sp, #12
 800e148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e14c:	f000 b912 	b.w	800e374 <__malloc_unlock>
 800e150:	42a3      	cmp	r3, r4
 800e152:	d908      	bls.n	800e166 <_free_r+0x46>
 800e154:	6825      	ldr	r5, [r4, #0]
 800e156:	1961      	adds	r1, r4, r5
 800e158:	428b      	cmp	r3, r1
 800e15a:	bf01      	itttt	eq
 800e15c:	6819      	ldreq	r1, [r3, #0]
 800e15e:	685b      	ldreq	r3, [r3, #4]
 800e160:	1949      	addeq	r1, r1, r5
 800e162:	6021      	streq	r1, [r4, #0]
 800e164:	e7ed      	b.n	800e142 <_free_r+0x22>
 800e166:	461a      	mov	r2, r3
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	b10b      	cbz	r3, 800e170 <_free_r+0x50>
 800e16c:	42a3      	cmp	r3, r4
 800e16e:	d9fa      	bls.n	800e166 <_free_r+0x46>
 800e170:	6811      	ldr	r1, [r2, #0]
 800e172:	1855      	adds	r5, r2, r1
 800e174:	42a5      	cmp	r5, r4
 800e176:	d10b      	bne.n	800e190 <_free_r+0x70>
 800e178:	6824      	ldr	r4, [r4, #0]
 800e17a:	4421      	add	r1, r4
 800e17c:	1854      	adds	r4, r2, r1
 800e17e:	42a3      	cmp	r3, r4
 800e180:	6011      	str	r1, [r2, #0]
 800e182:	d1e0      	bne.n	800e146 <_free_r+0x26>
 800e184:	681c      	ldr	r4, [r3, #0]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	6053      	str	r3, [r2, #4]
 800e18a:	4421      	add	r1, r4
 800e18c:	6011      	str	r1, [r2, #0]
 800e18e:	e7da      	b.n	800e146 <_free_r+0x26>
 800e190:	d902      	bls.n	800e198 <_free_r+0x78>
 800e192:	230c      	movs	r3, #12
 800e194:	6003      	str	r3, [r0, #0]
 800e196:	e7d6      	b.n	800e146 <_free_r+0x26>
 800e198:	6825      	ldr	r5, [r4, #0]
 800e19a:	1961      	adds	r1, r4, r5
 800e19c:	428b      	cmp	r3, r1
 800e19e:	bf04      	itt	eq
 800e1a0:	6819      	ldreq	r1, [r3, #0]
 800e1a2:	685b      	ldreq	r3, [r3, #4]
 800e1a4:	6063      	str	r3, [r4, #4]
 800e1a6:	bf04      	itt	eq
 800e1a8:	1949      	addeq	r1, r1, r5
 800e1aa:	6021      	streq	r1, [r4, #0]
 800e1ac:	6054      	str	r4, [r2, #4]
 800e1ae:	e7ca      	b.n	800e146 <_free_r+0x26>
 800e1b0:	b003      	add	sp, #12
 800e1b2:	bd30      	pop	{r4, r5, pc}
 800e1b4:	20006be0 	.word	0x20006be0

0800e1b8 <sbrk_aligned>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	4e0e      	ldr	r6, [pc, #56]	; (800e1f4 <sbrk_aligned+0x3c>)
 800e1bc:	460c      	mov	r4, r1
 800e1be:	6831      	ldr	r1, [r6, #0]
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	b911      	cbnz	r1, 800e1ca <sbrk_aligned+0x12>
 800e1c4:	f000 f88c 	bl	800e2e0 <_sbrk_r>
 800e1c8:	6030      	str	r0, [r6, #0]
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f000 f887 	bl	800e2e0 <_sbrk_r>
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	d00a      	beq.n	800e1ec <sbrk_aligned+0x34>
 800e1d6:	1cc4      	adds	r4, r0, #3
 800e1d8:	f024 0403 	bic.w	r4, r4, #3
 800e1dc:	42a0      	cmp	r0, r4
 800e1de:	d007      	beq.n	800e1f0 <sbrk_aligned+0x38>
 800e1e0:	1a21      	subs	r1, r4, r0
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f000 f87c 	bl	800e2e0 <_sbrk_r>
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	d101      	bne.n	800e1f0 <sbrk_aligned+0x38>
 800e1ec:	f04f 34ff 	mov.w	r4, #4294967295
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	20006be4 	.word	0x20006be4

0800e1f8 <_malloc_r>:
 800e1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1fc:	1ccd      	adds	r5, r1, #3
 800e1fe:	f025 0503 	bic.w	r5, r5, #3
 800e202:	3508      	adds	r5, #8
 800e204:	2d0c      	cmp	r5, #12
 800e206:	bf38      	it	cc
 800e208:	250c      	movcc	r5, #12
 800e20a:	2d00      	cmp	r5, #0
 800e20c:	4607      	mov	r7, r0
 800e20e:	db01      	blt.n	800e214 <_malloc_r+0x1c>
 800e210:	42a9      	cmp	r1, r5
 800e212:	d905      	bls.n	800e220 <_malloc_r+0x28>
 800e214:	230c      	movs	r3, #12
 800e216:	603b      	str	r3, [r7, #0]
 800e218:	2600      	movs	r6, #0
 800e21a:	4630      	mov	r0, r6
 800e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e220:	4e2e      	ldr	r6, [pc, #184]	; (800e2dc <_malloc_r+0xe4>)
 800e222:	f000 f8a1 	bl	800e368 <__malloc_lock>
 800e226:	6833      	ldr	r3, [r6, #0]
 800e228:	461c      	mov	r4, r3
 800e22a:	bb34      	cbnz	r4, 800e27a <_malloc_r+0x82>
 800e22c:	4629      	mov	r1, r5
 800e22e:	4638      	mov	r0, r7
 800e230:	f7ff ffc2 	bl	800e1b8 <sbrk_aligned>
 800e234:	1c43      	adds	r3, r0, #1
 800e236:	4604      	mov	r4, r0
 800e238:	d14d      	bne.n	800e2d6 <_malloc_r+0xde>
 800e23a:	6834      	ldr	r4, [r6, #0]
 800e23c:	4626      	mov	r6, r4
 800e23e:	2e00      	cmp	r6, #0
 800e240:	d140      	bne.n	800e2c4 <_malloc_r+0xcc>
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	4631      	mov	r1, r6
 800e246:	4638      	mov	r0, r7
 800e248:	eb04 0803 	add.w	r8, r4, r3
 800e24c:	f000 f848 	bl	800e2e0 <_sbrk_r>
 800e250:	4580      	cmp	r8, r0
 800e252:	d13a      	bne.n	800e2ca <_malloc_r+0xd2>
 800e254:	6821      	ldr	r1, [r4, #0]
 800e256:	3503      	adds	r5, #3
 800e258:	1a6d      	subs	r5, r5, r1
 800e25a:	f025 0503 	bic.w	r5, r5, #3
 800e25e:	3508      	adds	r5, #8
 800e260:	2d0c      	cmp	r5, #12
 800e262:	bf38      	it	cc
 800e264:	250c      	movcc	r5, #12
 800e266:	4629      	mov	r1, r5
 800e268:	4638      	mov	r0, r7
 800e26a:	f7ff ffa5 	bl	800e1b8 <sbrk_aligned>
 800e26e:	3001      	adds	r0, #1
 800e270:	d02b      	beq.n	800e2ca <_malloc_r+0xd2>
 800e272:	6823      	ldr	r3, [r4, #0]
 800e274:	442b      	add	r3, r5
 800e276:	6023      	str	r3, [r4, #0]
 800e278:	e00e      	b.n	800e298 <_malloc_r+0xa0>
 800e27a:	6822      	ldr	r2, [r4, #0]
 800e27c:	1b52      	subs	r2, r2, r5
 800e27e:	d41e      	bmi.n	800e2be <_malloc_r+0xc6>
 800e280:	2a0b      	cmp	r2, #11
 800e282:	d916      	bls.n	800e2b2 <_malloc_r+0xba>
 800e284:	1961      	adds	r1, r4, r5
 800e286:	42a3      	cmp	r3, r4
 800e288:	6025      	str	r5, [r4, #0]
 800e28a:	bf18      	it	ne
 800e28c:	6059      	strne	r1, [r3, #4]
 800e28e:	6863      	ldr	r3, [r4, #4]
 800e290:	bf08      	it	eq
 800e292:	6031      	streq	r1, [r6, #0]
 800e294:	5162      	str	r2, [r4, r5]
 800e296:	604b      	str	r3, [r1, #4]
 800e298:	4638      	mov	r0, r7
 800e29a:	f104 060b 	add.w	r6, r4, #11
 800e29e:	f000 f869 	bl	800e374 <__malloc_unlock>
 800e2a2:	f026 0607 	bic.w	r6, r6, #7
 800e2a6:	1d23      	adds	r3, r4, #4
 800e2a8:	1af2      	subs	r2, r6, r3
 800e2aa:	d0b6      	beq.n	800e21a <_malloc_r+0x22>
 800e2ac:	1b9b      	subs	r3, r3, r6
 800e2ae:	50a3      	str	r3, [r4, r2]
 800e2b0:	e7b3      	b.n	800e21a <_malloc_r+0x22>
 800e2b2:	6862      	ldr	r2, [r4, #4]
 800e2b4:	42a3      	cmp	r3, r4
 800e2b6:	bf0c      	ite	eq
 800e2b8:	6032      	streq	r2, [r6, #0]
 800e2ba:	605a      	strne	r2, [r3, #4]
 800e2bc:	e7ec      	b.n	800e298 <_malloc_r+0xa0>
 800e2be:	4623      	mov	r3, r4
 800e2c0:	6864      	ldr	r4, [r4, #4]
 800e2c2:	e7b2      	b.n	800e22a <_malloc_r+0x32>
 800e2c4:	4634      	mov	r4, r6
 800e2c6:	6876      	ldr	r6, [r6, #4]
 800e2c8:	e7b9      	b.n	800e23e <_malloc_r+0x46>
 800e2ca:	230c      	movs	r3, #12
 800e2cc:	603b      	str	r3, [r7, #0]
 800e2ce:	4638      	mov	r0, r7
 800e2d0:	f000 f850 	bl	800e374 <__malloc_unlock>
 800e2d4:	e7a1      	b.n	800e21a <_malloc_r+0x22>
 800e2d6:	6025      	str	r5, [r4, #0]
 800e2d8:	e7de      	b.n	800e298 <_malloc_r+0xa0>
 800e2da:	bf00      	nop
 800e2dc:	20006be0 	.word	0x20006be0

0800e2e0 <_sbrk_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4d06      	ldr	r5, [pc, #24]	; (800e2fc <_sbrk_r+0x1c>)
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4608      	mov	r0, r1
 800e2ea:	602b      	str	r3, [r5, #0]
 800e2ec:	f7f3 ff8c 	bl	8002208 <_sbrk>
 800e2f0:	1c43      	adds	r3, r0, #1
 800e2f2:	d102      	bne.n	800e2fa <_sbrk_r+0x1a>
 800e2f4:	682b      	ldr	r3, [r5, #0]
 800e2f6:	b103      	cbz	r3, 800e2fa <_sbrk_r+0x1a>
 800e2f8:	6023      	str	r3, [r4, #0]
 800e2fa:	bd38      	pop	{r3, r4, r5, pc}
 800e2fc:	20006be8 	.word	0x20006be8

0800e300 <siprintf>:
 800e300:	b40e      	push	{r1, r2, r3}
 800e302:	b500      	push	{lr}
 800e304:	b09c      	sub	sp, #112	; 0x70
 800e306:	ab1d      	add	r3, sp, #116	; 0x74
 800e308:	9002      	str	r0, [sp, #8]
 800e30a:	9006      	str	r0, [sp, #24]
 800e30c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e310:	4809      	ldr	r0, [pc, #36]	; (800e338 <siprintf+0x38>)
 800e312:	9107      	str	r1, [sp, #28]
 800e314:	9104      	str	r1, [sp, #16]
 800e316:	4909      	ldr	r1, [pc, #36]	; (800e33c <siprintf+0x3c>)
 800e318:	f853 2b04 	ldr.w	r2, [r3], #4
 800e31c:	9105      	str	r1, [sp, #20]
 800e31e:	6800      	ldr	r0, [r0, #0]
 800e320:	9301      	str	r3, [sp, #4]
 800e322:	a902      	add	r1, sp, #8
 800e324:	f000 f888 	bl	800e438 <_svfiprintf_r>
 800e328:	9b02      	ldr	r3, [sp, #8]
 800e32a:	2200      	movs	r2, #0
 800e32c:	701a      	strb	r2, [r3, #0]
 800e32e:	b01c      	add	sp, #112	; 0x70
 800e330:	f85d eb04 	ldr.w	lr, [sp], #4
 800e334:	b003      	add	sp, #12
 800e336:	4770      	bx	lr
 800e338:	200005e8 	.word	0x200005e8
 800e33c:	ffff0208 	.word	0xffff0208

0800e340 <strncpy>:
 800e340:	b510      	push	{r4, lr}
 800e342:	3901      	subs	r1, #1
 800e344:	4603      	mov	r3, r0
 800e346:	b132      	cbz	r2, 800e356 <strncpy+0x16>
 800e348:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e34c:	f803 4b01 	strb.w	r4, [r3], #1
 800e350:	3a01      	subs	r2, #1
 800e352:	2c00      	cmp	r4, #0
 800e354:	d1f7      	bne.n	800e346 <strncpy+0x6>
 800e356:	441a      	add	r2, r3
 800e358:	2100      	movs	r1, #0
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d100      	bne.n	800e360 <strncpy+0x20>
 800e35e:	bd10      	pop	{r4, pc}
 800e360:	f803 1b01 	strb.w	r1, [r3], #1
 800e364:	e7f9      	b.n	800e35a <strncpy+0x1a>
	...

0800e368 <__malloc_lock>:
 800e368:	4801      	ldr	r0, [pc, #4]	; (800e370 <__malloc_lock+0x8>)
 800e36a:	f000 baf9 	b.w	800e960 <__retarget_lock_acquire_recursive>
 800e36e:	bf00      	nop
 800e370:	20006bec 	.word	0x20006bec

0800e374 <__malloc_unlock>:
 800e374:	4801      	ldr	r0, [pc, #4]	; (800e37c <__malloc_unlock+0x8>)
 800e376:	f000 baf4 	b.w	800e962 <__retarget_lock_release_recursive>
 800e37a:	bf00      	nop
 800e37c:	20006bec 	.word	0x20006bec

0800e380 <__ssputs_r>:
 800e380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e384:	688e      	ldr	r6, [r1, #8]
 800e386:	429e      	cmp	r6, r3
 800e388:	4682      	mov	sl, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	4690      	mov	r8, r2
 800e38e:	461f      	mov	r7, r3
 800e390:	d838      	bhi.n	800e404 <__ssputs_r+0x84>
 800e392:	898a      	ldrh	r2, [r1, #12]
 800e394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e398:	d032      	beq.n	800e400 <__ssputs_r+0x80>
 800e39a:	6825      	ldr	r5, [r4, #0]
 800e39c:	6909      	ldr	r1, [r1, #16]
 800e39e:	eba5 0901 	sub.w	r9, r5, r1
 800e3a2:	6965      	ldr	r5, [r4, #20]
 800e3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	444b      	add	r3, r9
 800e3b0:	106d      	asrs	r5, r5, #1
 800e3b2:	429d      	cmp	r5, r3
 800e3b4:	bf38      	it	cc
 800e3b6:	461d      	movcc	r5, r3
 800e3b8:	0553      	lsls	r3, r2, #21
 800e3ba:	d531      	bpl.n	800e420 <__ssputs_r+0xa0>
 800e3bc:	4629      	mov	r1, r5
 800e3be:	f7ff ff1b 	bl	800e1f8 <_malloc_r>
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	b950      	cbnz	r0, 800e3dc <__ssputs_r+0x5c>
 800e3c6:	230c      	movs	r3, #12
 800e3c8:	f8ca 3000 	str.w	r3, [sl]
 800e3cc:	89a3      	ldrh	r3, [r4, #12]
 800e3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3d2:	81a3      	strh	r3, [r4, #12]
 800e3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3dc:	6921      	ldr	r1, [r4, #16]
 800e3de:	464a      	mov	r2, r9
 800e3e0:	f7ff fe88 	bl	800e0f4 <memcpy>
 800e3e4:	89a3      	ldrh	r3, [r4, #12]
 800e3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3ee:	81a3      	strh	r3, [r4, #12]
 800e3f0:	6126      	str	r6, [r4, #16]
 800e3f2:	6165      	str	r5, [r4, #20]
 800e3f4:	444e      	add	r6, r9
 800e3f6:	eba5 0509 	sub.w	r5, r5, r9
 800e3fa:	6026      	str	r6, [r4, #0]
 800e3fc:	60a5      	str	r5, [r4, #8]
 800e3fe:	463e      	mov	r6, r7
 800e400:	42be      	cmp	r6, r7
 800e402:	d900      	bls.n	800e406 <__ssputs_r+0x86>
 800e404:	463e      	mov	r6, r7
 800e406:	6820      	ldr	r0, [r4, #0]
 800e408:	4632      	mov	r2, r6
 800e40a:	4641      	mov	r1, r8
 800e40c:	f000 faaa 	bl	800e964 <memmove>
 800e410:	68a3      	ldr	r3, [r4, #8]
 800e412:	1b9b      	subs	r3, r3, r6
 800e414:	60a3      	str	r3, [r4, #8]
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	4433      	add	r3, r6
 800e41a:	6023      	str	r3, [r4, #0]
 800e41c:	2000      	movs	r0, #0
 800e41e:	e7db      	b.n	800e3d8 <__ssputs_r+0x58>
 800e420:	462a      	mov	r2, r5
 800e422:	f000 fab9 	bl	800e998 <_realloc_r>
 800e426:	4606      	mov	r6, r0
 800e428:	2800      	cmp	r0, #0
 800e42a:	d1e1      	bne.n	800e3f0 <__ssputs_r+0x70>
 800e42c:	6921      	ldr	r1, [r4, #16]
 800e42e:	4650      	mov	r0, sl
 800e430:	f7ff fe76 	bl	800e120 <_free_r>
 800e434:	e7c7      	b.n	800e3c6 <__ssputs_r+0x46>
	...

0800e438 <_svfiprintf_r>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	4698      	mov	r8, r3
 800e43e:	898b      	ldrh	r3, [r1, #12]
 800e440:	061b      	lsls	r3, r3, #24
 800e442:	b09d      	sub	sp, #116	; 0x74
 800e444:	4607      	mov	r7, r0
 800e446:	460d      	mov	r5, r1
 800e448:	4614      	mov	r4, r2
 800e44a:	d50e      	bpl.n	800e46a <_svfiprintf_r+0x32>
 800e44c:	690b      	ldr	r3, [r1, #16]
 800e44e:	b963      	cbnz	r3, 800e46a <_svfiprintf_r+0x32>
 800e450:	2140      	movs	r1, #64	; 0x40
 800e452:	f7ff fed1 	bl	800e1f8 <_malloc_r>
 800e456:	6028      	str	r0, [r5, #0]
 800e458:	6128      	str	r0, [r5, #16]
 800e45a:	b920      	cbnz	r0, 800e466 <_svfiprintf_r+0x2e>
 800e45c:	230c      	movs	r3, #12
 800e45e:	603b      	str	r3, [r7, #0]
 800e460:	f04f 30ff 	mov.w	r0, #4294967295
 800e464:	e0d1      	b.n	800e60a <_svfiprintf_r+0x1d2>
 800e466:	2340      	movs	r3, #64	; 0x40
 800e468:	616b      	str	r3, [r5, #20]
 800e46a:	2300      	movs	r3, #0
 800e46c:	9309      	str	r3, [sp, #36]	; 0x24
 800e46e:	2320      	movs	r3, #32
 800e470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e474:	f8cd 800c 	str.w	r8, [sp, #12]
 800e478:	2330      	movs	r3, #48	; 0x30
 800e47a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e624 <_svfiprintf_r+0x1ec>
 800e47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e482:	f04f 0901 	mov.w	r9, #1
 800e486:	4623      	mov	r3, r4
 800e488:	469a      	mov	sl, r3
 800e48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e48e:	b10a      	cbz	r2, 800e494 <_svfiprintf_r+0x5c>
 800e490:	2a25      	cmp	r2, #37	; 0x25
 800e492:	d1f9      	bne.n	800e488 <_svfiprintf_r+0x50>
 800e494:	ebba 0b04 	subs.w	fp, sl, r4
 800e498:	d00b      	beq.n	800e4b2 <_svfiprintf_r+0x7a>
 800e49a:	465b      	mov	r3, fp
 800e49c:	4622      	mov	r2, r4
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f7ff ff6d 	bl	800e380 <__ssputs_r>
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	f000 80aa 	beq.w	800e600 <_svfiprintf_r+0x1c8>
 800e4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4ae:	445a      	add	r2, fp
 800e4b0:	9209      	str	r2, [sp, #36]	; 0x24
 800e4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f000 80a2 	beq.w	800e600 <_svfiprintf_r+0x1c8>
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4c6:	f10a 0a01 	add.w	sl, sl, #1
 800e4ca:	9304      	str	r3, [sp, #16]
 800e4cc:	9307      	str	r3, [sp, #28]
 800e4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800e4d4:	4654      	mov	r4, sl
 800e4d6:	2205      	movs	r2, #5
 800e4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4dc:	4851      	ldr	r0, [pc, #324]	; (800e624 <_svfiprintf_r+0x1ec>)
 800e4de:	f7f1 fe87 	bl	80001f0 <memchr>
 800e4e2:	9a04      	ldr	r2, [sp, #16]
 800e4e4:	b9d8      	cbnz	r0, 800e51e <_svfiprintf_r+0xe6>
 800e4e6:	06d0      	lsls	r0, r2, #27
 800e4e8:	bf44      	itt	mi
 800e4ea:	2320      	movmi	r3, #32
 800e4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4f0:	0711      	lsls	r1, r2, #28
 800e4f2:	bf44      	itt	mi
 800e4f4:	232b      	movmi	r3, #43	; 0x2b
 800e4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800e500:	d015      	beq.n	800e52e <_svfiprintf_r+0xf6>
 800e502:	9a07      	ldr	r2, [sp, #28]
 800e504:	4654      	mov	r4, sl
 800e506:	2000      	movs	r0, #0
 800e508:	f04f 0c0a 	mov.w	ip, #10
 800e50c:	4621      	mov	r1, r4
 800e50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e512:	3b30      	subs	r3, #48	; 0x30
 800e514:	2b09      	cmp	r3, #9
 800e516:	d94e      	bls.n	800e5b6 <_svfiprintf_r+0x17e>
 800e518:	b1b0      	cbz	r0, 800e548 <_svfiprintf_r+0x110>
 800e51a:	9207      	str	r2, [sp, #28]
 800e51c:	e014      	b.n	800e548 <_svfiprintf_r+0x110>
 800e51e:	eba0 0308 	sub.w	r3, r0, r8
 800e522:	fa09 f303 	lsl.w	r3, r9, r3
 800e526:	4313      	orrs	r3, r2
 800e528:	9304      	str	r3, [sp, #16]
 800e52a:	46a2      	mov	sl, r4
 800e52c:	e7d2      	b.n	800e4d4 <_svfiprintf_r+0x9c>
 800e52e:	9b03      	ldr	r3, [sp, #12]
 800e530:	1d19      	adds	r1, r3, #4
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	9103      	str	r1, [sp, #12]
 800e536:	2b00      	cmp	r3, #0
 800e538:	bfbb      	ittet	lt
 800e53a:	425b      	neglt	r3, r3
 800e53c:	f042 0202 	orrlt.w	r2, r2, #2
 800e540:	9307      	strge	r3, [sp, #28]
 800e542:	9307      	strlt	r3, [sp, #28]
 800e544:	bfb8      	it	lt
 800e546:	9204      	strlt	r2, [sp, #16]
 800e548:	7823      	ldrb	r3, [r4, #0]
 800e54a:	2b2e      	cmp	r3, #46	; 0x2e
 800e54c:	d10c      	bne.n	800e568 <_svfiprintf_r+0x130>
 800e54e:	7863      	ldrb	r3, [r4, #1]
 800e550:	2b2a      	cmp	r3, #42	; 0x2a
 800e552:	d135      	bne.n	800e5c0 <_svfiprintf_r+0x188>
 800e554:	9b03      	ldr	r3, [sp, #12]
 800e556:	1d1a      	adds	r2, r3, #4
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	9203      	str	r2, [sp, #12]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bfb8      	it	lt
 800e560:	f04f 33ff 	movlt.w	r3, #4294967295
 800e564:	3402      	adds	r4, #2
 800e566:	9305      	str	r3, [sp, #20]
 800e568:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e634 <_svfiprintf_r+0x1fc>
 800e56c:	7821      	ldrb	r1, [r4, #0]
 800e56e:	2203      	movs	r2, #3
 800e570:	4650      	mov	r0, sl
 800e572:	f7f1 fe3d 	bl	80001f0 <memchr>
 800e576:	b140      	cbz	r0, 800e58a <_svfiprintf_r+0x152>
 800e578:	2340      	movs	r3, #64	; 0x40
 800e57a:	eba0 000a 	sub.w	r0, r0, sl
 800e57e:	fa03 f000 	lsl.w	r0, r3, r0
 800e582:	9b04      	ldr	r3, [sp, #16]
 800e584:	4303      	orrs	r3, r0
 800e586:	3401      	adds	r4, #1
 800e588:	9304      	str	r3, [sp, #16]
 800e58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e58e:	4826      	ldr	r0, [pc, #152]	; (800e628 <_svfiprintf_r+0x1f0>)
 800e590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e594:	2206      	movs	r2, #6
 800e596:	f7f1 fe2b 	bl	80001f0 <memchr>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d038      	beq.n	800e610 <_svfiprintf_r+0x1d8>
 800e59e:	4b23      	ldr	r3, [pc, #140]	; (800e62c <_svfiprintf_r+0x1f4>)
 800e5a0:	bb1b      	cbnz	r3, 800e5ea <_svfiprintf_r+0x1b2>
 800e5a2:	9b03      	ldr	r3, [sp, #12]
 800e5a4:	3307      	adds	r3, #7
 800e5a6:	f023 0307 	bic.w	r3, r3, #7
 800e5aa:	3308      	adds	r3, #8
 800e5ac:	9303      	str	r3, [sp, #12]
 800e5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5b0:	4433      	add	r3, r6
 800e5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e5b4:	e767      	b.n	800e486 <_svfiprintf_r+0x4e>
 800e5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	2001      	movs	r0, #1
 800e5be:	e7a5      	b.n	800e50c <_svfiprintf_r+0xd4>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	3401      	adds	r4, #1
 800e5c4:	9305      	str	r3, [sp, #20]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	f04f 0c0a 	mov.w	ip, #10
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5d2:	3a30      	subs	r2, #48	; 0x30
 800e5d4:	2a09      	cmp	r2, #9
 800e5d6:	d903      	bls.n	800e5e0 <_svfiprintf_r+0x1a8>
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d0c5      	beq.n	800e568 <_svfiprintf_r+0x130>
 800e5dc:	9105      	str	r1, [sp, #20]
 800e5de:	e7c3      	b.n	800e568 <_svfiprintf_r+0x130>
 800e5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e7f0      	b.n	800e5cc <_svfiprintf_r+0x194>
 800e5ea:	ab03      	add	r3, sp, #12
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	462a      	mov	r2, r5
 800e5f0:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <_svfiprintf_r+0x1f8>)
 800e5f2:	a904      	add	r1, sp, #16
 800e5f4:	4638      	mov	r0, r7
 800e5f6:	f3af 8000 	nop.w
 800e5fa:	1c42      	adds	r2, r0, #1
 800e5fc:	4606      	mov	r6, r0
 800e5fe:	d1d6      	bne.n	800e5ae <_svfiprintf_r+0x176>
 800e600:	89ab      	ldrh	r3, [r5, #12]
 800e602:	065b      	lsls	r3, r3, #25
 800e604:	f53f af2c 	bmi.w	800e460 <_svfiprintf_r+0x28>
 800e608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e60a:	b01d      	add	sp, #116	; 0x74
 800e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e610:	ab03      	add	r3, sp, #12
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	462a      	mov	r2, r5
 800e616:	4b06      	ldr	r3, [pc, #24]	; (800e630 <_svfiprintf_r+0x1f8>)
 800e618:	a904      	add	r1, sp, #16
 800e61a:	4638      	mov	r0, r7
 800e61c:	f000 f87a 	bl	800e714 <_printf_i>
 800e620:	e7eb      	b.n	800e5fa <_svfiprintf_r+0x1c2>
 800e622:	bf00      	nop
 800e624:	0800ef98 	.word	0x0800ef98
 800e628:	0800efa2 	.word	0x0800efa2
 800e62c:	00000000 	.word	0x00000000
 800e630:	0800e381 	.word	0x0800e381
 800e634:	0800ef9e 	.word	0x0800ef9e

0800e638 <_printf_common>:
 800e638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e63c:	4616      	mov	r6, r2
 800e63e:	4699      	mov	r9, r3
 800e640:	688a      	ldr	r2, [r1, #8]
 800e642:	690b      	ldr	r3, [r1, #16]
 800e644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e648:	4293      	cmp	r3, r2
 800e64a:	bfb8      	it	lt
 800e64c:	4613      	movlt	r3, r2
 800e64e:	6033      	str	r3, [r6, #0]
 800e650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e654:	4607      	mov	r7, r0
 800e656:	460c      	mov	r4, r1
 800e658:	b10a      	cbz	r2, 800e65e <_printf_common+0x26>
 800e65a:	3301      	adds	r3, #1
 800e65c:	6033      	str	r3, [r6, #0]
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	0699      	lsls	r1, r3, #26
 800e662:	bf42      	ittt	mi
 800e664:	6833      	ldrmi	r3, [r6, #0]
 800e666:	3302      	addmi	r3, #2
 800e668:	6033      	strmi	r3, [r6, #0]
 800e66a:	6825      	ldr	r5, [r4, #0]
 800e66c:	f015 0506 	ands.w	r5, r5, #6
 800e670:	d106      	bne.n	800e680 <_printf_common+0x48>
 800e672:	f104 0a19 	add.w	sl, r4, #25
 800e676:	68e3      	ldr	r3, [r4, #12]
 800e678:	6832      	ldr	r2, [r6, #0]
 800e67a:	1a9b      	subs	r3, r3, r2
 800e67c:	42ab      	cmp	r3, r5
 800e67e:	dc26      	bgt.n	800e6ce <_printf_common+0x96>
 800e680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e684:	1e13      	subs	r3, r2, #0
 800e686:	6822      	ldr	r2, [r4, #0]
 800e688:	bf18      	it	ne
 800e68a:	2301      	movne	r3, #1
 800e68c:	0692      	lsls	r2, r2, #26
 800e68e:	d42b      	bmi.n	800e6e8 <_printf_common+0xb0>
 800e690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e694:	4649      	mov	r1, r9
 800e696:	4638      	mov	r0, r7
 800e698:	47c0      	blx	r8
 800e69a:	3001      	adds	r0, #1
 800e69c:	d01e      	beq.n	800e6dc <_printf_common+0xa4>
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	68e5      	ldr	r5, [r4, #12]
 800e6a2:	6832      	ldr	r2, [r6, #0]
 800e6a4:	f003 0306 	and.w	r3, r3, #6
 800e6a8:	2b04      	cmp	r3, #4
 800e6aa:	bf08      	it	eq
 800e6ac:	1aad      	subeq	r5, r5, r2
 800e6ae:	68a3      	ldr	r3, [r4, #8]
 800e6b0:	6922      	ldr	r2, [r4, #16]
 800e6b2:	bf0c      	ite	eq
 800e6b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6b8:	2500      	movne	r5, #0
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	bfc4      	itt	gt
 800e6be:	1a9b      	subgt	r3, r3, r2
 800e6c0:	18ed      	addgt	r5, r5, r3
 800e6c2:	2600      	movs	r6, #0
 800e6c4:	341a      	adds	r4, #26
 800e6c6:	42b5      	cmp	r5, r6
 800e6c8:	d11a      	bne.n	800e700 <_printf_common+0xc8>
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	e008      	b.n	800e6e0 <_printf_common+0xa8>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	4652      	mov	r2, sl
 800e6d2:	4649      	mov	r1, r9
 800e6d4:	4638      	mov	r0, r7
 800e6d6:	47c0      	blx	r8
 800e6d8:	3001      	adds	r0, #1
 800e6da:	d103      	bne.n	800e6e4 <_printf_common+0xac>
 800e6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e4:	3501      	adds	r5, #1
 800e6e6:	e7c6      	b.n	800e676 <_printf_common+0x3e>
 800e6e8:	18e1      	adds	r1, r4, r3
 800e6ea:	1c5a      	adds	r2, r3, #1
 800e6ec:	2030      	movs	r0, #48	; 0x30
 800e6ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6f2:	4422      	add	r2, r4
 800e6f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6fc:	3302      	adds	r3, #2
 800e6fe:	e7c7      	b.n	800e690 <_printf_common+0x58>
 800e700:	2301      	movs	r3, #1
 800e702:	4622      	mov	r2, r4
 800e704:	4649      	mov	r1, r9
 800e706:	4638      	mov	r0, r7
 800e708:	47c0      	blx	r8
 800e70a:	3001      	adds	r0, #1
 800e70c:	d0e6      	beq.n	800e6dc <_printf_common+0xa4>
 800e70e:	3601      	adds	r6, #1
 800e710:	e7d9      	b.n	800e6c6 <_printf_common+0x8e>
	...

0800e714 <_printf_i>:
 800e714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e718:	7e0f      	ldrb	r7, [r1, #24]
 800e71a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e71c:	2f78      	cmp	r7, #120	; 0x78
 800e71e:	4691      	mov	r9, r2
 800e720:	4680      	mov	r8, r0
 800e722:	460c      	mov	r4, r1
 800e724:	469a      	mov	sl, r3
 800e726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e72a:	d807      	bhi.n	800e73c <_printf_i+0x28>
 800e72c:	2f62      	cmp	r7, #98	; 0x62
 800e72e:	d80a      	bhi.n	800e746 <_printf_i+0x32>
 800e730:	2f00      	cmp	r7, #0
 800e732:	f000 80d8 	beq.w	800e8e6 <_printf_i+0x1d2>
 800e736:	2f58      	cmp	r7, #88	; 0x58
 800e738:	f000 80a3 	beq.w	800e882 <_printf_i+0x16e>
 800e73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e744:	e03a      	b.n	800e7bc <_printf_i+0xa8>
 800e746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e74a:	2b15      	cmp	r3, #21
 800e74c:	d8f6      	bhi.n	800e73c <_printf_i+0x28>
 800e74e:	a101      	add	r1, pc, #4	; (adr r1, 800e754 <_printf_i+0x40>)
 800e750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e754:	0800e7ad 	.word	0x0800e7ad
 800e758:	0800e7c1 	.word	0x0800e7c1
 800e75c:	0800e73d 	.word	0x0800e73d
 800e760:	0800e73d 	.word	0x0800e73d
 800e764:	0800e73d 	.word	0x0800e73d
 800e768:	0800e73d 	.word	0x0800e73d
 800e76c:	0800e7c1 	.word	0x0800e7c1
 800e770:	0800e73d 	.word	0x0800e73d
 800e774:	0800e73d 	.word	0x0800e73d
 800e778:	0800e73d 	.word	0x0800e73d
 800e77c:	0800e73d 	.word	0x0800e73d
 800e780:	0800e8cd 	.word	0x0800e8cd
 800e784:	0800e7f1 	.word	0x0800e7f1
 800e788:	0800e8af 	.word	0x0800e8af
 800e78c:	0800e73d 	.word	0x0800e73d
 800e790:	0800e73d 	.word	0x0800e73d
 800e794:	0800e8ef 	.word	0x0800e8ef
 800e798:	0800e73d 	.word	0x0800e73d
 800e79c:	0800e7f1 	.word	0x0800e7f1
 800e7a0:	0800e73d 	.word	0x0800e73d
 800e7a4:	0800e73d 	.word	0x0800e73d
 800e7a8:	0800e8b7 	.word	0x0800e8b7
 800e7ac:	682b      	ldr	r3, [r5, #0]
 800e7ae:	1d1a      	adds	r2, r3, #4
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	602a      	str	r2, [r5, #0]
 800e7b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e0a3      	b.n	800e908 <_printf_i+0x1f4>
 800e7c0:	6820      	ldr	r0, [r4, #0]
 800e7c2:	6829      	ldr	r1, [r5, #0]
 800e7c4:	0606      	lsls	r6, r0, #24
 800e7c6:	f101 0304 	add.w	r3, r1, #4
 800e7ca:	d50a      	bpl.n	800e7e2 <_printf_i+0xce>
 800e7cc:	680e      	ldr	r6, [r1, #0]
 800e7ce:	602b      	str	r3, [r5, #0]
 800e7d0:	2e00      	cmp	r6, #0
 800e7d2:	da03      	bge.n	800e7dc <_printf_i+0xc8>
 800e7d4:	232d      	movs	r3, #45	; 0x2d
 800e7d6:	4276      	negs	r6, r6
 800e7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7dc:	485e      	ldr	r0, [pc, #376]	; (800e958 <_printf_i+0x244>)
 800e7de:	230a      	movs	r3, #10
 800e7e0:	e019      	b.n	800e816 <_printf_i+0x102>
 800e7e2:	680e      	ldr	r6, [r1, #0]
 800e7e4:	602b      	str	r3, [r5, #0]
 800e7e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e7ea:	bf18      	it	ne
 800e7ec:	b236      	sxthne	r6, r6
 800e7ee:	e7ef      	b.n	800e7d0 <_printf_i+0xbc>
 800e7f0:	682b      	ldr	r3, [r5, #0]
 800e7f2:	6820      	ldr	r0, [r4, #0]
 800e7f4:	1d19      	adds	r1, r3, #4
 800e7f6:	6029      	str	r1, [r5, #0]
 800e7f8:	0601      	lsls	r1, r0, #24
 800e7fa:	d501      	bpl.n	800e800 <_printf_i+0xec>
 800e7fc:	681e      	ldr	r6, [r3, #0]
 800e7fe:	e002      	b.n	800e806 <_printf_i+0xf2>
 800e800:	0646      	lsls	r6, r0, #25
 800e802:	d5fb      	bpl.n	800e7fc <_printf_i+0xe8>
 800e804:	881e      	ldrh	r6, [r3, #0]
 800e806:	4854      	ldr	r0, [pc, #336]	; (800e958 <_printf_i+0x244>)
 800e808:	2f6f      	cmp	r7, #111	; 0x6f
 800e80a:	bf0c      	ite	eq
 800e80c:	2308      	moveq	r3, #8
 800e80e:	230a      	movne	r3, #10
 800e810:	2100      	movs	r1, #0
 800e812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e816:	6865      	ldr	r5, [r4, #4]
 800e818:	60a5      	str	r5, [r4, #8]
 800e81a:	2d00      	cmp	r5, #0
 800e81c:	bfa2      	ittt	ge
 800e81e:	6821      	ldrge	r1, [r4, #0]
 800e820:	f021 0104 	bicge.w	r1, r1, #4
 800e824:	6021      	strge	r1, [r4, #0]
 800e826:	b90e      	cbnz	r6, 800e82c <_printf_i+0x118>
 800e828:	2d00      	cmp	r5, #0
 800e82a:	d04d      	beq.n	800e8c8 <_printf_i+0x1b4>
 800e82c:	4615      	mov	r5, r2
 800e82e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e832:	fb03 6711 	mls	r7, r3, r1, r6
 800e836:	5dc7      	ldrb	r7, [r0, r7]
 800e838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e83c:	4637      	mov	r7, r6
 800e83e:	42bb      	cmp	r3, r7
 800e840:	460e      	mov	r6, r1
 800e842:	d9f4      	bls.n	800e82e <_printf_i+0x11a>
 800e844:	2b08      	cmp	r3, #8
 800e846:	d10b      	bne.n	800e860 <_printf_i+0x14c>
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	07de      	lsls	r6, r3, #31
 800e84c:	d508      	bpl.n	800e860 <_printf_i+0x14c>
 800e84e:	6923      	ldr	r3, [r4, #16]
 800e850:	6861      	ldr	r1, [r4, #4]
 800e852:	4299      	cmp	r1, r3
 800e854:	bfde      	ittt	le
 800e856:	2330      	movle	r3, #48	; 0x30
 800e858:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e85c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e860:	1b52      	subs	r2, r2, r5
 800e862:	6122      	str	r2, [r4, #16]
 800e864:	f8cd a000 	str.w	sl, [sp]
 800e868:	464b      	mov	r3, r9
 800e86a:	aa03      	add	r2, sp, #12
 800e86c:	4621      	mov	r1, r4
 800e86e:	4640      	mov	r0, r8
 800e870:	f7ff fee2 	bl	800e638 <_printf_common>
 800e874:	3001      	adds	r0, #1
 800e876:	d14c      	bne.n	800e912 <_printf_i+0x1fe>
 800e878:	f04f 30ff 	mov.w	r0, #4294967295
 800e87c:	b004      	add	sp, #16
 800e87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e882:	4835      	ldr	r0, [pc, #212]	; (800e958 <_printf_i+0x244>)
 800e884:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e888:	6829      	ldr	r1, [r5, #0]
 800e88a:	6823      	ldr	r3, [r4, #0]
 800e88c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e890:	6029      	str	r1, [r5, #0]
 800e892:	061d      	lsls	r5, r3, #24
 800e894:	d514      	bpl.n	800e8c0 <_printf_i+0x1ac>
 800e896:	07df      	lsls	r7, r3, #31
 800e898:	bf44      	itt	mi
 800e89a:	f043 0320 	orrmi.w	r3, r3, #32
 800e89e:	6023      	strmi	r3, [r4, #0]
 800e8a0:	b91e      	cbnz	r6, 800e8aa <_printf_i+0x196>
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	f023 0320 	bic.w	r3, r3, #32
 800e8a8:	6023      	str	r3, [r4, #0]
 800e8aa:	2310      	movs	r3, #16
 800e8ac:	e7b0      	b.n	800e810 <_printf_i+0xfc>
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	f043 0320 	orr.w	r3, r3, #32
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	2378      	movs	r3, #120	; 0x78
 800e8b8:	4828      	ldr	r0, [pc, #160]	; (800e95c <_printf_i+0x248>)
 800e8ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e8be:	e7e3      	b.n	800e888 <_printf_i+0x174>
 800e8c0:	0659      	lsls	r1, r3, #25
 800e8c2:	bf48      	it	mi
 800e8c4:	b2b6      	uxthmi	r6, r6
 800e8c6:	e7e6      	b.n	800e896 <_printf_i+0x182>
 800e8c8:	4615      	mov	r5, r2
 800e8ca:	e7bb      	b.n	800e844 <_printf_i+0x130>
 800e8cc:	682b      	ldr	r3, [r5, #0]
 800e8ce:	6826      	ldr	r6, [r4, #0]
 800e8d0:	6961      	ldr	r1, [r4, #20]
 800e8d2:	1d18      	adds	r0, r3, #4
 800e8d4:	6028      	str	r0, [r5, #0]
 800e8d6:	0635      	lsls	r5, r6, #24
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	d501      	bpl.n	800e8e0 <_printf_i+0x1cc>
 800e8dc:	6019      	str	r1, [r3, #0]
 800e8de:	e002      	b.n	800e8e6 <_printf_i+0x1d2>
 800e8e0:	0670      	lsls	r0, r6, #25
 800e8e2:	d5fb      	bpl.n	800e8dc <_printf_i+0x1c8>
 800e8e4:	8019      	strh	r1, [r3, #0]
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	6123      	str	r3, [r4, #16]
 800e8ea:	4615      	mov	r5, r2
 800e8ec:	e7ba      	b.n	800e864 <_printf_i+0x150>
 800e8ee:	682b      	ldr	r3, [r5, #0]
 800e8f0:	1d1a      	adds	r2, r3, #4
 800e8f2:	602a      	str	r2, [r5, #0]
 800e8f4:	681d      	ldr	r5, [r3, #0]
 800e8f6:	6862      	ldr	r2, [r4, #4]
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f7f1 fc78 	bl	80001f0 <memchr>
 800e900:	b108      	cbz	r0, 800e906 <_printf_i+0x1f2>
 800e902:	1b40      	subs	r0, r0, r5
 800e904:	6060      	str	r0, [r4, #4]
 800e906:	6863      	ldr	r3, [r4, #4]
 800e908:	6123      	str	r3, [r4, #16]
 800e90a:	2300      	movs	r3, #0
 800e90c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e910:	e7a8      	b.n	800e864 <_printf_i+0x150>
 800e912:	6923      	ldr	r3, [r4, #16]
 800e914:	462a      	mov	r2, r5
 800e916:	4649      	mov	r1, r9
 800e918:	4640      	mov	r0, r8
 800e91a:	47d0      	blx	sl
 800e91c:	3001      	adds	r0, #1
 800e91e:	d0ab      	beq.n	800e878 <_printf_i+0x164>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	079b      	lsls	r3, r3, #30
 800e924:	d413      	bmi.n	800e94e <_printf_i+0x23a>
 800e926:	68e0      	ldr	r0, [r4, #12]
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	4298      	cmp	r0, r3
 800e92c:	bfb8      	it	lt
 800e92e:	4618      	movlt	r0, r3
 800e930:	e7a4      	b.n	800e87c <_printf_i+0x168>
 800e932:	2301      	movs	r3, #1
 800e934:	4632      	mov	r2, r6
 800e936:	4649      	mov	r1, r9
 800e938:	4640      	mov	r0, r8
 800e93a:	47d0      	blx	sl
 800e93c:	3001      	adds	r0, #1
 800e93e:	d09b      	beq.n	800e878 <_printf_i+0x164>
 800e940:	3501      	adds	r5, #1
 800e942:	68e3      	ldr	r3, [r4, #12]
 800e944:	9903      	ldr	r1, [sp, #12]
 800e946:	1a5b      	subs	r3, r3, r1
 800e948:	42ab      	cmp	r3, r5
 800e94a:	dcf2      	bgt.n	800e932 <_printf_i+0x21e>
 800e94c:	e7eb      	b.n	800e926 <_printf_i+0x212>
 800e94e:	2500      	movs	r5, #0
 800e950:	f104 0619 	add.w	r6, r4, #25
 800e954:	e7f5      	b.n	800e942 <_printf_i+0x22e>
 800e956:	bf00      	nop
 800e958:	0800efa9 	.word	0x0800efa9
 800e95c:	0800efba 	.word	0x0800efba

0800e960 <__retarget_lock_acquire_recursive>:
 800e960:	4770      	bx	lr

0800e962 <__retarget_lock_release_recursive>:
 800e962:	4770      	bx	lr

0800e964 <memmove>:
 800e964:	4288      	cmp	r0, r1
 800e966:	b510      	push	{r4, lr}
 800e968:	eb01 0402 	add.w	r4, r1, r2
 800e96c:	d902      	bls.n	800e974 <memmove+0x10>
 800e96e:	4284      	cmp	r4, r0
 800e970:	4623      	mov	r3, r4
 800e972:	d807      	bhi.n	800e984 <memmove+0x20>
 800e974:	1e43      	subs	r3, r0, #1
 800e976:	42a1      	cmp	r1, r4
 800e978:	d008      	beq.n	800e98c <memmove+0x28>
 800e97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e97e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e982:	e7f8      	b.n	800e976 <memmove+0x12>
 800e984:	4402      	add	r2, r0
 800e986:	4601      	mov	r1, r0
 800e988:	428a      	cmp	r2, r1
 800e98a:	d100      	bne.n	800e98e <memmove+0x2a>
 800e98c:	bd10      	pop	{r4, pc}
 800e98e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e996:	e7f7      	b.n	800e988 <memmove+0x24>

0800e998 <_realloc_r>:
 800e998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	4680      	mov	r8, r0
 800e99e:	4614      	mov	r4, r2
 800e9a0:	460e      	mov	r6, r1
 800e9a2:	b921      	cbnz	r1, 800e9ae <_realloc_r+0x16>
 800e9a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	f7ff bc25 	b.w	800e1f8 <_malloc_r>
 800e9ae:	b92a      	cbnz	r2, 800e9bc <_realloc_r+0x24>
 800e9b0:	f7ff fbb6 	bl	800e120 <_free_r>
 800e9b4:	4625      	mov	r5, r4
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9bc:	f000 f81b 	bl	800e9f6 <_malloc_usable_size_r>
 800e9c0:	4284      	cmp	r4, r0
 800e9c2:	4607      	mov	r7, r0
 800e9c4:	d802      	bhi.n	800e9cc <_realloc_r+0x34>
 800e9c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9ca:	d812      	bhi.n	800e9f2 <_realloc_r+0x5a>
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	f7ff fc12 	bl	800e1f8 <_malloc_r>
 800e9d4:	4605      	mov	r5, r0
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d0ed      	beq.n	800e9b6 <_realloc_r+0x1e>
 800e9da:	42bc      	cmp	r4, r7
 800e9dc:	4622      	mov	r2, r4
 800e9de:	4631      	mov	r1, r6
 800e9e0:	bf28      	it	cs
 800e9e2:	463a      	movcs	r2, r7
 800e9e4:	f7ff fb86 	bl	800e0f4 <memcpy>
 800e9e8:	4631      	mov	r1, r6
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	f7ff fb98 	bl	800e120 <_free_r>
 800e9f0:	e7e1      	b.n	800e9b6 <_realloc_r+0x1e>
 800e9f2:	4635      	mov	r5, r6
 800e9f4:	e7df      	b.n	800e9b6 <_realloc_r+0x1e>

0800e9f6 <_malloc_usable_size_r>:
 800e9f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9fa:	1f18      	subs	r0, r3, #4
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	bfbc      	itt	lt
 800ea00:	580b      	ldrlt	r3, [r1, r0]
 800ea02:	18c0      	addlt	r0, r0, r3
 800ea04:	4770      	bx	lr
	...

0800ea08 <_init>:
 800ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0a:	bf00      	nop
 800ea0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea0e:	bc08      	pop	{r3}
 800ea10:	469e      	mov	lr, r3
 800ea12:	4770      	bx	lr

0800ea14 <_fini>:
 800ea14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea16:	bf00      	nop
 800ea18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea1a:	bc08      	pop	{r3}
 800ea1c:	469e      	mov	lr, r3
 800ea1e:	4770      	bx	lr
