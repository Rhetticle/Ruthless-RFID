
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e74c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800e8ec  0800e8ec  0001e8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efcc  0800efcc  0002064c  2**0
                  CONTENTS
  4 .ARM          00000008  0800efcc  0800efcc  0001efcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efd4  0800efd4  0002064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efd4  0800efd4  0001efd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efd8  0800efd8  0001efd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000064c  20000000  0800efdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a8  2000064c  0800f628  0002064c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006bf4  0800f628  00026bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002064c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e12  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005320  00000000  00000000  0004648e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f78  00000000  00000000  0004b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d80  00000000  00000000  0004d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c447  00000000  00000000  0004f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024a86  00000000  00000000  0006b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e6ba  00000000  00000000  00090375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ea2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008970  00000000  00000000  0012ea80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000064c 	.word	0x2000064c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8d4 	.word	0x0800e8d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000650 	.word	0x20000650
 80001dc:	0800e8d4 	.word	0x0800e8d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fb72 	bl	8002ca8 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000066c 	.word	0x2000066c

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 fc4d 	bl	8002e9c <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000066c 	.word	0x2000066c

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fb2f 	bl	8002ca8 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 ff27 	bl	80024a8 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000066c 	.word	0x2000066c

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 fbfb 	bl	8002e9c <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 fef9 	bl	80024a8 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000066c 	.word	0x2000066c

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f001 fe89 	bl	80024a8 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 f903 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 f8fe 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fe59 	bl	80024a8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 f8f6 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f001 fe51 	bl	80024a8 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);


	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 fdfb 	bl	80024a8 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d fae6 	bl	800dfc0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00d fa93 	bl	800dfc0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 fcd7 	bl	80024a8 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 fccc 	bl	80024a8 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 fcc5 	bl	80024a8 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 fcbc 	bl	80024a8 <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f00d f9ca 	bl	800dfc0 <memcpy>
	CDC_Transmit_FS(send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f00c fd35 	bl	800d6a8 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 fc32 	bl	80024a8 <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b090      	sub	sp, #64	; 0x40
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 fc14 	bl	80024a8 <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[10];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0018 	add.w	r0, r7, #24
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f00d fa70 	bl	800e1cc <siprintf>
						Print(mess);
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8000d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 fbb6 	bl	80024a8 <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fbb1 	bl	80024a8 <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[10];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f00d fa0d 	bl	800e1cc <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3738      	adds	r7, #56	; 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000668 	.word	0x20000668
 8000dec:	0800e9b8 	.word	0x0800e9b8
 8000df0:	0800e9d0 	.word	0x0800e9d0
 8000df4:	0800e9dc 	.word	0x0800e9dc
 8000df8:	0800e9e8 	.word	0x0800e9e8
 8000dfc:	0800e9f4 	.word	0x0800e9f4

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00d f8e3 	bl	800dfdc <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f001 fdd6 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f001 fdd1 	bl	80029ec <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f004 fd5c 	bl	8005912 <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f001 fdc1 	bl	80029ec <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fb1c 	bl	80024a8 <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f001 fdb7 	bl	80029ec <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fb12 	bl	80024a8 <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200006c0 	.word	0x200006c0

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f001 fd9d 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f001 fd98 	bl	80029ec <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 fd23 	bl	8005912 <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f001 fd88 	bl	80029ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f001 fd83 	bl	80029ec <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f001 fd7c 	bl	80029ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f001 fd77 	bl	80029ec <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200006c0 	.word	0x200006c0

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SCREEN_INIT>:
 * @param data: Array of strings that form the basis of the screen
 *
 * @param seldata: Array of data on where to place select arrow "->"
 * */

void SCREEN_INIT(Screen* screen,int datasize,int selsize,char** data,uint8_t (*dataloc)[2],uint8_t (*seldata)[2]){
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]

    screen->datsize=datasize;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	601a      	str	r2, [r3, #0]
    screen->selsize=selsize;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]
    screen->data=data;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	609a      	str	r2, [r3, #8]
    screen->dataloc=dataloc;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	60da      	str	r2, [r3, #12]
    screen->seldata=seldata;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	611a      	str	r2, [r3, #16]



}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	482f      	ldr	r0, [pc, #188]	; (800107c <OLED_INIT+0xc8>)
 8000fc0:	f001 fd14 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	482c      	ldr	r0, [pc, #176]	; (800107c <OLED_INIT+0xc8>)
 8000fca:	f001 fd0f 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	482b      	ldr	r0, [pc, #172]	; (8001080 <OLED_INIT+0xcc>)
 8000fd4:	f001 fd0a 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f001 fa65 	bl	80024a8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4826      	ldr	r0, [pc, #152]	; (800107c <OLED_INIT+0xc8>)
 8000fe4:	f001 fd02 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fe8:	2064      	movs	r0, #100	; 0x64
 8000fea:	f001 fa5d 	bl	80024a8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4822      	ldr	r0, [pc, #136]	; (800107c <OLED_INIT+0xc8>)
 8000ff4:	f001 fcfa 	bl	80029ec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	f001 fa55 	bl	80024a8 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <OLED_INIT+0xd0>)
 8001000:	463c      	mov	r4, r7
 8001002:	461d      	mov	r5, r3
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001008:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800100c:	c403      	stmia	r4!, {r0, r1}
 800100e:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	e00c      	b.n	8001030 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8001016:	463a      	mov	r2, r7
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff02 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f001 fa3f 	bl	80024a8 <HAL_Delay>
	for(int i=0;i<25;i++){
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b18      	cmp	r3, #24
 8001034:	ddef      	ble.n	8001016 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8001036:	20a7      	movs	r0, #167	; 0xa7
 8001038:	f7ff fef6 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 800103c:	4812      	ldr	r0, [pc, #72]	; (8001088 <OLED_INIT+0xd4>)
 800103e:	f7ff ff69 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8001042:	20af      	movs	r0, #175	; 0xaf
 8001044:	f7ff fef0 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 8001048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104c:	f001 fa2c 	bl	80024a8 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001050:	20ae      	movs	r0, #174	; 0xae
 8001052:	f7ff fee9 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 8001056:	200a      	movs	r0, #10
 8001058:	f001 fa26 	bl	80024a8 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 800105c:	20a6      	movs	r0, #166	; 0xa6
 800105e:	f7ff fee3 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 8001062:	200a      	movs	r0, #10
 8001064:	f001 fa20 	bl	80024a8 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001068:	20af      	movs	r0, #175	; 0xaf
 800106a:	f7ff fedd 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 800106e:	f7ff fec7 	bl	8000e00 <OLED_Clear>


}
 8001072:	bf00      	nop
 8001074:	4618      	mov	r0, r3
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	0800ead4 	.word	0x0800ead4
 8001088:	20000000 	.word	0x20000000

0800108c <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001098:	2005      	movs	r0, #5
 800109a:	f00c ff81 	bl	800dfa0 <malloc>
 800109e:	4603      	mov	r3, r0
 80010a0:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	e013      	b.n	80010d0 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f1a3 0220 	sub.w	r2, r3, #32
 80010ae:	4910      	ldr	r1, [pc, #64]	; (80010f0 <OLED_InvChar+0x64>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	18ca      	adds	r2, r1, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	440b      	add	r3, r1
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	dde8      	ble.n	80010a8 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 80010d6:	2205      	movs	r2, #5
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f00c ff70 	bl	800dfc0 <memcpy>
	free(temp);
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f00c ff65 	bl	800dfb0 <free>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800ec90 	.word	0x0800ec90

080010f4 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4623      	mov	r3, r4
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4603      	mov	r3, r0
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	460b      	mov	r3, r1
 800110c:	717b      	strb	r3, [r7, #5]
 800110e:	4613      	mov	r3, r2
 8001110:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3b50      	subs	r3, #80	; 0x50
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fe85 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe7e 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fe75 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 800113e:	2006      	movs	r0, #6
 8001140:	f00c ff2e 	bl	800dfa0 <malloc>
 8001144:	4603      	mov	r3, r0
 8001146:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8001148:	793b      	ldrb	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10d      	bne.n	800116a <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	f1a3 0220 	sub.w	r2, r3, #32
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <OLED_drawChar+0xa0>)
 800115c:	4413      	add	r3, r2
 800115e:	2205      	movs	r2, #5
 8001160:	4619      	mov	r1, r3
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f00c ff2c 	bl	800dfc0 <memcpy>
 8001168:	e004      	b.n	8001174 <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 800116a:	797b      	ldrb	r3, [r7, #5]
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff8c 	bl	800108c <OLED_InvChar>
	}

	*(data+5)=0x00;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3305      	adds	r3, #5
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 800117c:	2106      	movs	r1, #6
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff fe8c 	bl	8000e9c <OLED_data>
	free(data);
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f00c ff13 	bl	800dfb0 <free>
	}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	0800ec90 	.word	0x0800ec90

08001198 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	603a      	str	r2, [r7, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	460b      	mov	r3, r1
 80011a8:	71bb      	strb	r3, [r7, #6]
 80011aa:	4613      	mov	r3, r2
 80011ac:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	e014      	b.n	80011de <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	0052      	lsls	r2, r2, #1
 80011bc:	4413      	add	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	4413      	add	r3, r2
 80011c6:	b2d9      	uxtb	r1, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	797b      	ldrb	r3, [r7, #5]
 80011d2:	79f8      	ldrb	r0, [r7, #7]
 80011d4:	f7ff ff8e 	bl	80010f4 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f7fe fffe 	bl	80001e0 <strlen>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8e3      	bhi.n	80011b4 <OLED_Printlin+0x1c>


	}
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	6039      	str	r1, [r7, #0]
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	4613      	mov	r3, r2
 8001204:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 8001206:	6838      	ldr	r0, [r7, #0]
 8001208:	f7fe ffea 	bl	80001e0 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	0fda      	lsrs	r2, r3, #31
 8001214:	4413      	add	r3, r2
 8001216:	105b      	asrs	r3, r3, #1
 8001218:	425b      	negs	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	3340      	adds	r3, #64	; 0x40
 8001226:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	b2d9      	uxtb	r1, r3
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	79f8      	ldrb	r0, [r7, #7]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	f7ff ffb1 	bl	8001198 <OLED_Printlin>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 800123e:	b580      	push	{r7, lr}
 8001240:	b094      	sub	sp, #80	; 0x50
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 8001246:	2320      	movs	r3, #32
 8001248:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 800124c:	2300      	movs	r3, #0
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001250:	2300      	movs	r3, #0
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 8001254:	2300      	movs	r3, #0
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001258:	2300      	movs	r3, #0
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 800125c:	2300      	movs	r3, #0
 800125e:	643b      	str	r3, [r7, #64]	; 0x40
 8001260:	e018      	b.n	8001294 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 8001262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b20      	cmp	r3, #32
 8001272:	d10b      	bne.n	800128c <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001276:	b2d9      	uxtb	r1, r3
 8001278:	f107 020c 	add.w	r2, r7, #12
 800127c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127e:	4413      	add	r3, r2
 8001280:	460a      	mov	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
	                i++;
 8001284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001286:	3301      	adds	r3, #1
 8001288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800128a:	e000      	b.n	800128e <OLED_Print+0x50>
	            }
	            else{
	                continue;
 800128c:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 800128e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001290:	3301      	adds	r3, #1
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
 8001294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001296:	2b15      	cmp	r3, #21
 8001298:	dde3      	ble.n	8001262 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 800129a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	d102      	bne.n	80012ac <OLED_Print+0x6e>
	            last_ind++;
 80012a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a8:	3301      	adds	r3, #1
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 80012ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff94 	bl	80001e0 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b15      	cmp	r3, #21
 80012bc:	d828      	bhi.n	8001310 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 80012be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe ff8b 	bl	80001e0 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80012ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	18d1      	adds	r1, r2, r3
 80012d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	4618      	mov	r0, r3
 80012dc:	f00c ff96 	bl	800e20c <strncpy>
	            memset(thisline+linend,fill,21-linend);
 80012e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e2:	f107 0220 	add.w	r2, r7, #32
 80012e6:	18d0      	adds	r0, r2, r3
 80012e8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80012ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ee:	f1c3 0315 	rsb	r3, r3, #21
 80012f2:	461a      	mov	r2, r3
 80012f4:	f00c fe72 	bl	800dfdc <memset>
	            thisline[21]=' ';
 80012f8:	2320      	movs	r3, #32
 80012fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 80012fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001300:	b2d8      	uxtb	r0, r3
 8001302:	f107 0220 	add.w	r2, r7, #32
 8001306:	2300      	movs	r3, #0
 8001308:	2102      	movs	r1, #2
 800130a:	f7ff ff45 	bl	8001198 <OLED_Printlin>




	    }
}
 800130e:	e05e      	b.n	80013ce <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001312:	3314      	adds	r3, #20
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b20      	cmp	r3, #32
 800131c:	d03a      	beq.n	8001394 <OLED_Print+0x156>
 800131e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001320:	3315      	adds	r3, #21
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b20      	cmp	r3, #32
 800132a:	d033      	beq.n	8001394 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 800132c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	18d1      	adds	r1, r2, r3
 8001332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001334:	3b01      	subs	r3, #1
 8001336:	3350      	adds	r3, #80	; 0x50
 8001338:	443b      	add	r3, r7
 800133a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800133e:	461a      	mov	r2, r3
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	4618      	mov	r0, r3
 8001346:	f00c ff61 	bl	800e20c <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 800134a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800134c:	3b01      	subs	r3, #1
 800134e:	3350      	adds	r3, #80	; 0x50
 8001350:	443b      	add	r3, r7
 8001352:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001356:	461a      	mov	r2, r3
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	1898      	adds	r0, r3, r2
 800135e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001364:	3b01      	subs	r3, #1
 8001366:	3350      	adds	r3, #80	; 0x50
 8001368:	443b      	add	r3, r7
 800136a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800136e:	f1c3 0315 	rsb	r3, r3, #21
 8001372:	461a      	mov	r2, r3
 8001374:	f00c fe32 	bl	800dfdc <memset>
	            thisline[21]=' ';
 8001378:	2320      	movs	r3, #32
 800137a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 800137e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001380:	3b01      	subs	r3, #1
 8001382:	3350      	adds	r3, #80	; 0x50
 8001384:	443b      	add	r3, r7
 8001386:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800138a:	461a      	mov	r2, r3
 800138c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800138e:	4413      	add	r3, r2
 8001390:	64bb      	str	r3, [r7, #72]	; 0x48
 8001392:	e00e      	b.n	80013b2 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	18d1      	adds	r1, r2, r3
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2215      	movs	r2, #21
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00c ff33 	bl	800e20c <strncpy>
	            thisline[21]=' ';
 80013a6:	2320      	movs	r3, #32
 80013a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 80013ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ae:	3315      	adds	r3, #21
 80013b0:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 80013b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	f107 0220 	add.w	r2, r7, #32
 80013be:	2300      	movs	r3, #0
 80013c0:	2102      	movs	r1, #2
 80013c2:	f7ff fee9 	bl	8001198 <OLED_Printlin>
	        line++;
 80013c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c8:	3301      	adds	r3, #1
 80013ca:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 80013cc:	e746      	b.n	800125c <OLED_Print+0x1e>
}
 80013ce:	3750      	adds	r7, #80	; 0x50
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(Screen* screen,uint8_t invert){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 80013e0:	f7ff fd0e 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, screen->data[0], invert);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	78fa      	ldrb	r2, [r7, #3]
 80013ec:	4619      	mov	r1, r3
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff ff01 	bl	80011f6 <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e01a      	b.n	8001430 <OLED_SCREEN+0x5c>
		OLED_Printlin(screen->dataloc[i+1][0], screen->dataloc[i+1][1], screen->data[i+1], invert);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3301      	adds	r3, #1
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	7818      	ldrb	r0, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	7859      	ldrb	r1, [r3, #1]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	f7ff feb7 	bl	8001198 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3301      	adds	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbde      	blt.n	80013fa <OLED_SCREEN+0x26>
	}
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(Screen* screen,uint8_t dataindx,char* data){
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	460b      	mov	r3, r1
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe febd 	bl	80001e0 <strlen>
 8001466:	4603      	mov	r3, r0
 8001468:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	3302      	adds	r3, #2
 8001476:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	7afb      	ldrb	r3, [r7, #11]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	7818      	ldrb	r0, [r3, #0]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	b2d9      	uxtb	r1, r3
 8001488:	2300      	movs	r3, #0
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	f7ff fe84 	bl	8001198 <OLED_Printlin>
}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(Screen* screen,uint8_t selopt, int restore){
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	460b      	mov	r3, r1
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 80014a6:	4a40      	ldr	r2, [pc, #256]	; (80015a8 <OLED_SELECT+0x110>)
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	4611      	mov	r1, r2
 80014b0:	8019      	strh	r1, [r3, #0]
 80014b2:	3302      	adds	r3, #2
 80014b4:	0c12      	lsrs	r2, r2, #16
 80014b6:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d116      	bne.n	80014ec <OLED_SELECT+0x54>
			if(selopt==0){
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10b      	bne.n	80014dc <OLED_SELECT+0x44>
			rest=screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014d0:	3b01      	subs	r3, #1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	e009      	b.n	80014f0 <OLED_SELECT+0x58>
			}
			else{
				rest=screen->data[selopt];
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	e001      	b.n	80014f0 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 80014ec:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <OLED_SELECT+0x114>)
 80014ee:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 80014f0:	7afb      	ldrb	r3, [r7, #11]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d124      	bne.n	8001540 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001502:	3b01      	subs	r3, #1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001518:	3b01      	subs	r3, #1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	7afb      	ldrb	r3, [r7, #11]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	773b      	strb	r3, [r7, #28]
 800153e:	e021      	b.n	8001584 <OLED_SELECT+0xec>



	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800154a:	3b01      	subs	r3, #1
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800155e:	3b01      	subs	r3, #1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001584:	7fb9      	ldrb	r1, [r7, #30]
 8001586:	7ff8      	ldrb	r0, [r7, #31]
 8001588:	2300      	movs	r3, #0
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	f7ff fe04 	bl	8001198 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001590:	f107 0214 	add.w	r2, r7, #20
 8001594:	7f39      	ldrb	r1, [r7, #28]
 8001596:	7f78      	ldrb	r0, [r7, #29]
 8001598:	2300      	movs	r3, #0
 800159a:	f7ff fdfd 	bl	8001198 <OLED_Printlin>

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0800eaf4 	.word	0x0800eaf4
 80015ac:	0800eaf0 	.word	0x0800eaf0

080015b0 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80015b4:	2108      	movs	r1, #8
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <BUZZ+0x20>)
 80015b8:	f004 fd40 	bl	800603c <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80015bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c0:	f000 ff72 	bl	80024a8 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80015c4:	2108      	movs	r1, #8
 80015c6:	4802      	ldr	r0, [pc, #8]	; (80015d0 <BUZZ+0x20>)
 80015c8:	f004 fde8 	bl	800619c <HAL_TIM_PWM_Stop>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000770 	.word	0x20000770

080015d4 <choose>:

int choose (Screen* screen,int* flag, int* count, int max, int restopt) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 80015e2:	2102      	movs	r1, #2
 80015e4:	4820      	ldr	r0, [pc, #128]	; (8001668 <choose+0x94>)
 80015e6:	f001 f9e9 	bl	80029bc <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d136      	bne.n	800165e <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <choose+0x98>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 80015f8:	e012      	b.n	8001620 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 80015fa:	481c      	ldr	r0, [pc, #112]	; (800166c <choose+0x98>)
 80015fc:	f004 fbe0 	bl	8005dc0 <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <choose+0x98>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160a:	4293      	cmp	r3, r2
 800160c:	d108      	bne.n	8001620 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 800160e:	4817      	ldr	r0, [pc, #92]	; (800166c <choose+0x98>)
 8001610:	f004 fc30 	bl	8005e74 <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e01e      	b.n	800165e <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001620:	2102      	movs	r1, #2
 8001622:	4811      	ldr	r0, [pc, #68]	; (8001668 <choose+0x94>)
 8001624:	f001 f9ca 	bl	80029bc <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0e5      	beq.n	80015fa <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d102      	bne.n	8001648 <choose+0x74>
	 	    	*count = 0;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4619      	mov	r1, r3
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff ff20 	bl	8001498 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <choose+0x98>)
 800165a:	f004 fc0b 	bl	8005e74 <HAL_TIM_Base_Stop>
	 	}
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40020000 	.word	0x40020000
 800166c:	200007b8 	.word	0x200007b8

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001674:	f000 fed6 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001678:	f000 f864 	bl	8001744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167c:	f000 fa2c 	bl	8001ad8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001680:	f000 f8ca 	bl	8001818 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001684:	f000 f8f6 	bl	8001874 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001688:	f000 f92c 	bl	80018e4 <MX_SPI2_Init>
  MX_TIM2_Init();
 800168c:	f000 f960 	bl	8001950 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001690:	f000 f9d4 	bl	8001a3c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001694:	f009 f848 	bl	800a728 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(uint8_t*), &UidtoFound_attributes);
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <main+0x90>)
 800169a:	2104      	movs	r1, #4
 800169c:	2001      	movs	r0, #1
 800169e:	f009 f93b 	bl	800a918 <osMessageQueueNew>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <main+0x94>)
 80016a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <main+0x98>)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4817      	ldr	r0, [pc, #92]	; (800170c <main+0x9c>)
 80016ae:	f009 f885 	bl	800a7bc <osThreadNew>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a16      	ldr	r2, [pc, #88]	; (8001710 <main+0xa0>)
 80016b6:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 80016b8:	4a16      	ldr	r2, [pc, #88]	; (8001714 <main+0xa4>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	4816      	ldr	r0, [pc, #88]	; (8001718 <main+0xa8>)
 80016be:	f009 f87d 	bl	800a7bc <osThreadNew>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a15      	ldr	r2, [pc, #84]	; (800171c <main+0xac>)
 80016c6:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <main+0xb0>)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4815      	ldr	r0, [pc, #84]	; (8001724 <main+0xb4>)
 80016ce:	f009 f875 	bl	800a7bc <osThreadNew>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <main+0xb8>)
 80016d6:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <main+0xbc>)
 80016da:	2100      	movs	r1, #0
 80016dc:	4814      	ldr	r0, [pc, #80]	; (8001730 <main+0xc0>)
 80016de:	f009 f86d 	bl	800a7bc <osThreadNew>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a13      	ldr	r2, [pc, #76]	; (8001734 <main+0xc4>)
 80016e6:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <main+0xc8>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <main+0xcc>)
 80016ee:	f009 f865 	bl	800a7bc <osThreadNew>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <main+0xd0>)
 80016f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016f8:	f009 f83a 	bl	800a770 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <main+0x8c>
 80016fe:	bf00      	nop
 8001700:	0800ef68 	.word	0x0800ef68
 8001704:	20000814 	.word	0x20000814
 8001708:	0800eeb4 	.word	0x0800eeb4
 800170c:	08001bc1 	.word	0x08001bc1
 8001710:	20000800 	.word	0x20000800
 8001714:	0800eed8 	.word	0x0800eed8
 8001718:	08001c49 	.word	0x08001c49
 800171c:	20000804 	.word	0x20000804
 8001720:	0800eefc 	.word	0x0800eefc
 8001724:	08001d1d 	.word	0x08001d1d
 8001728:	20000808 	.word	0x20000808
 800172c:	0800ef20 	.word	0x0800ef20
 8001730:	08001d6d 	.word	0x08001d6d
 8001734:	2000080c 	.word	0x2000080c
 8001738:	0800ef44 	.word	0x0800ef44
 800173c:	08001e21 	.word	0x08001e21
 8001740:	20000810 	.word	0x20000810

08001744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b094      	sub	sp, #80	; 0x50
 8001748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	f107 0320 	add.w	r3, r7, #32
 800174e:	2230      	movs	r2, #48	; 0x30
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f00c fc42 	bl	800dfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <SystemClock_Config+0xcc>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a27      	ldr	r2, [pc, #156]	; (8001810 <SystemClock_Config+0xcc>)
 8001772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <SystemClock_Config+0xcc>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <SystemClock_Config+0xd0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <SystemClock_Config+0xd0>)
 8001792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <SystemClock_Config+0xd0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ae:	2302      	movs	r3, #2
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017b8:	2308      	movs	r3, #8
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017bc:	23a8      	movs	r3, #168	; 0xa8
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017c4:	2307      	movs	r3, #7
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 fb63 	bl	8004e98 <HAL_RCC_OscConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017d8:	f000 fba6 	bl	8001f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
 80017de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e0:	2302      	movs	r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2102      	movs	r1, #2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fdc5 	bl	8005388 <HAL_RCC_ClockConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001804:	f000 fb90 	bl	8001f28 <Error_Handler>
  }
}
 8001808:	bf00      	nop
 800180a:	3750      	adds	r7, #80	; 0x50
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	40007000 	.word	0x40007000

08001818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_I2C1_Init+0x50>)
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <MX_I2C1_Init+0x54>)
 8001820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_I2C1_Init+0x50>)
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <MX_I2C1_Init+0x58>)
 8001826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_I2C1_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_I2C1_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_I2C1_Init+0x50>)
 8001836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_I2C1_Init+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_I2C1_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_I2C1_Init+0x50>)
 8001856:	f001 f8e3 	bl	8002a20 <HAL_I2C_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001860:	f000 fb62 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000066c 	.word	0x2000066c
 800186c:	40005400 	.word	0x40005400
 8001870:	000186a0 	.word	0x000186a0

08001874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_SPI1_Init+0x68>)
 800187a:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <MX_SPI1_Init+0x6c>)
 800187c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_SPI1_Init+0x68>)
 8001880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_SPI1_Init+0x68>)
 8001888:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800188c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_SPI1_Init+0x68>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_SPI1_Init+0x68>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <MX_SPI1_Init+0x68>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_SPI1_Init+0x68>)
 80018a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_SPI1_Init+0x68>)
 80018aa:	2218      	movs	r2, #24
 80018ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_SPI1_Init+0x68>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_SPI1_Init+0x68>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_SPI1_Init+0x68>)
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_SPI1_Init+0x68>)
 80018c2:	220a      	movs	r2, #10
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_SPI1_Init+0x68>)
 80018c8:	f003 ff9a 	bl	8005800 <HAL_SPI_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018d2:	f000 fb29 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200006c0 	.word	0x200006c0
 80018e0:	40013000 	.word	0x40013000

080018e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_SPI2_Init+0x64>)
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <MX_SPI2_Init+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MX_SPI2_Init+0x64>)
 80018f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_SPI2_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_SPI2_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_SPI2_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_SPI2_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_SPI2_Init+0x64>)
 8001910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001914:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_SPI2_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_SPI2_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_SPI2_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_SPI2_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_SPI2_Init+0x64>)
 8001930:	220a      	movs	r2, #10
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_SPI2_Init+0x64>)
 8001936:	f003 ff63 	bl	8005800 <HAL_SPI_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001940:	f000 faf2 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000718 	.word	0x20000718
 800194c:	40003800 	.word	0x40003800

08001950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
 800197c:	615a      	str	r2, [r3, #20]
 800197e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <MX_TIM2_Init+0xe8>)
 800198a:	f240 12a3 	movw	r2, #419	; 0x1a3
 800198e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001998:	2231      	movs	r2, #49	; 0x31
 800199a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <MX_TIM2_Init+0xe8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a8:	4823      	ldr	r0, [pc, #140]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019aa:	f004 f9b9 	bl	8005d20 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019b4:	f000 fab8 	bl	8001f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c2:	4619      	mov	r1, r3
 80019c4:	481c      	ldr	r0, [pc, #112]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019c6:	f004 fe17 	bl	80065f8 <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019d0:	f000 faaa 	bl	8001f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019d4:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019d6:	f004 fad7 	bl	8005f88 <HAL_TIM_PWM_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019e0:	f000 faa2 	bl	8001f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	4619      	mov	r1, r3
 80019f2:	4811      	ldr	r0, [pc, #68]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019f4:	f005 f9bc 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019fe:	f000 fa93 	bl	8001f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a02:	2360      	movs	r3, #96	; 0x60
 8001a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001a06:	2318      	movs	r3, #24
 8001a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2208      	movs	r2, #8
 8001a16:	4619      	mov	r1, r3
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001a1a:	f004 fd2b 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a24:	f000 fa80 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001a2a:	f000 fbab 	bl	8002184 <HAL_TIM_MspPostInit>

}
 8001a2e:	bf00      	nop
 8001a30:	3738      	adds	r7, #56	; 0x38
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000770 	.word	0x20000770

08001a3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	463b      	mov	r3, r7
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001a60:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001a64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001a6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a80:	4813      	ldr	r0, [pc, #76]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001a82:	f004 f94d 	bl	8005d20 <HAL_TIM_Base_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a8c:	f000 fa4c 	bl	8001f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001a9e:	f004 fdab 	bl	80065f8 <HAL_TIM_ConfigClockSource>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001aa8:	f000 fa3e 	bl	8001f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_TIM3_Init+0x94>)
 8001aba:	f005 f959 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ac4:	f000 fa30 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200007b8 	.word	0x200007b8
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_GPIO_Init+0xdc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b48:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0xe0>)
 8001b4a:	f000 ff4f 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2122      	movs	r1, #34	; 0x22
 8001b52:	481a      	ldr	r0, [pc, #104]	; (8001bbc <MX_GPIO_Init+0xe4>)
 8001b54:	f000 ff4a 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <MX_GPIO_Init+0xe0>)
 8001b6c:	f000 fda2 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8001b70:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001b74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	4619      	mov	r1, r3
 8001b88:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <MX_GPIO_Init+0xe0>)
 8001b8a:	f000 fd93 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8001b8e:	2322      	movs	r3, #34	; 0x22
 8001b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_GPIO_Init+0xe4>)
 8001ba6:	f000 fd85 	bl	80026b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001baa:	bf00      	nop
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001bc8:	f00b fcb0 	bl	800d52c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <Start_Init+0x70>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f009 fef9 	bl	800b9c8 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <Start_Init+0x74>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f009 fef4 	bl	800b9c8 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <Start_Init+0x78>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f009 feef 	bl	800b9c8 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <Start_Init+0x7c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f009 feea 	bl	800b9c8 <vTaskSuspend>
    MFRC_INIT();
 8001bf4:	f7fe fdf0 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8001bf8:	f7fe fda6 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 8001bfc:	f7ff f9da 	bl	8000fb4 <OLED_INIT>
    OLED_Print(TC);
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <Start_Init+0x80>)
 8001c02:	f7ff fb1c 	bl	800123e <OLED_Print>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)!=0);
 8001c06:	bf00      	nop
 8001c08:	2102      	movs	r1, #2
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <Start_Init+0x84>)
 8001c0c:	f000 fed6 	bl	80029bc <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f8      	bne.n	8001c08 <Start_Init+0x48>
    vTaskResume(HomeHandle);
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <Start_Init+0x78>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f009 ff7c 	bl	800bb18 <vTaskResume>
    osDelay(100);
 8001c20:	2064      	movs	r0, #100	; 0x64
 8001c22:	f008 fe5e 	bl	800a8e2 <osDelay>
    vTaskSuspend(NULL);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f009 fece 	bl	800b9c8 <vTaskSuspend>
	vTaskSuspend(ReadCardHandle);
 8001c2c:	e7ce      	b.n	8001bcc <Start_Init+0xc>
 8001c2e:	bf00      	nop
 8001c30:	20000804 	.word	0x20000804
 8001c34:	20000808 	.word	0x20000808
 8001c38:	2000080c 	.word	0x2000080c
 8001c3c:	20000810 	.word	0x20000810
 8001c40:	2000044c 	.word	0x2000044c
 8001c44:	40020000 	.word	0x40020000

08001c48 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	b097      	sub	sp, #92	; 0x5c
 8001c4c:	af06      	add	r7, sp, #24
 8001c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Screen read;
	SCREEN_INIT(&read, 3, 1, READ_SCREEN, READ_DATLOC, READ_SEL);
 8001c50:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <StartReadCard+0xbc>)
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <StartReadCard+0xc0>)
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <StartReadCard+0xc4>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2103      	movs	r1, #3
 8001c62:	f7ff f98a 	bl	8000f7a <SCREEN_INIT>
	uint8_t cardinf[18];
	char* toSend = malloc(26*sizeof(char));
 8001c66:	201a      	movs	r0, #26
 8001c68:	f00c f99a 	bl	800dfa0 <malloc>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60fb      	str	r3, [r7, #12]
	int ranonce = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
	MFRC_ANTON();
 8001c78:	f7fe fd2c 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 8001c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <StartReadCard+0x4c>
		OLED_SCREEN(&read, NORMAL);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fba3 	bl	80013d4 <OLED_SCREEN>
		ranonce++;
 8001c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c90:	3301      	adds	r3, #1
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	if(DumpINFO(cardinf)==PCD_OK){
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ffd9 	bl	8000c50 <DumpINFO>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2bcc      	cmp	r3, #204	; 0xcc
 8001ca2:	d121      	bne.n	8001ce8 <StartReadCard+0xa0>
			BUZZ();
 8001ca4:	f7ff fc84 	bl	80015b0 <BUZZ>
			MFRC_ANTOFF();
 8001ca8:	f7fe fd4e 	bl	8000748 <MFRC_ANTOFF>
			sprintf(toSend,"%X%X%X%X%X%X%X", cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	7c3b      	ldrb	r3, [r7, #16]
 8001cb0:	461e      	mov	r6, r3
 8001cb2:	7c7b      	ldrb	r3, [r7, #17]
 8001cb4:	469c      	mov	ip, r3
 8001cb6:	7cbb      	ldrb	r3, [r7, #18]
 8001cb8:	7cfa      	ldrb	r2, [r7, #19]
 8001cba:	7d39      	ldrb	r1, [r7, #20]
 8001cbc:	7d7c      	ldrb	r4, [r7, #21]
 8001cbe:	7dbd      	ldrb	r5, [r7, #22]
 8001cc0:	9504      	str	r5, [sp, #16]
 8001cc2:	9403      	str	r4, [sp, #12]
 8001cc4:	9102      	str	r1, [sp, #8]
 8001cc6:	9201      	str	r2, [sp, #4]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4663      	mov	r3, ip
 8001ccc:	4632      	mov	r2, r6
 8001cce:	4910      	ldr	r1, [pc, #64]	; (8001d10 <StartReadCard+0xc8>)
 8001cd0:	f00c fa7c 	bl	800e1cc <siprintf>
			xQueueSend(UidtoFoundHandle,&toSend,0);
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <StartReadCard+0xcc>)
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	f107 010c 	add.w	r1, r7, #12
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f009 f8b4 	bl	800ae4c <xQueueGenericSend>
			suspend = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	if (suspend == 1) {
 8001ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d1c2      	bne.n	8001c74 <StartReadCard+0x2c>
		vTaskResume(CardFoundHandle);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <StartReadCard+0xd0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f009 ff10 	bl	800bb18 <vTaskResume>
		ranonce = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
		vTaskSuspend(NULL);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f009 fe63 	bl	800b9c8 <vTaskSuspend>
  {
 8001d02:	e7b7      	b.n	8001c74 <StartReadCard+0x2c>
 8001d04:	0800ee94 	.word	0x0800ee94
 8001d08:	0800ee8c 	.word	0x0800ee8c
 8001d0c:	2000041c 	.word	0x2000041c
 8001d10:	0800ec0c 	.word	0x0800ec0c
 8001d14:	20000814 	.word	0x20000814
 8001d18:	20000810 	.word	0x20000810

08001d1c <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  Screen write;
  SCREEN_INIT(&write, 4, 1, WRITE_SCREEN, WRITE_DATLOC, WRITE_SEL);
 8001d24:	f107 0008 	add.w	r0, r7, #8
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <StartWriteCard+0x44>)
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <StartWriteCard+0x48>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <StartWriteCard+0x4c>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	2104      	movs	r1, #4
 8001d36:	f7ff f920 	bl	8000f7a <SCREEN_INIT>
  int ranonce = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d108      	bne.n	8001d56 <StartWriteCard+0x3a>
	  	OLED_SCREEN(&write, NORMAL);
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fb42 	bl	80013d4 <OLED_SCREEN>
	  	ranonce++;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	3301      	adds	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
	  }
	  osDelay(1);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f008 fdc3 	bl	800a8e2 <osDelay>
	  if (ranonce == 0){
 8001d5c:	e7ef      	b.n	8001d3e <StartWriteCard+0x22>
 8001d5e:	bf00      	nop
 8001d60:	0800eeb0 	.word	0x0800eeb0
 8001d64:	0800eea8 	.word	0x0800eea8
 8001d68:	2000043c 	.word	0x2000043c

08001d6c <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	Screen HOME;
	uint32_t count = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
	SCREEN_INIT(&HOME,7,6,(char**)HOME_SCREEN,HOME_DATLOC,HOME_SEL);
 8001d78:	f107 0010 	add.w	r0, r7, #16
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <StartHome+0xa0>)
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <StartHome+0xa4>)
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <StartHome+0xa8>)
 8001d86:	2206      	movs	r2, #6
 8001d88:	2107      	movs	r1, #7
 8001d8a:	f7ff f8f6 	bl	8000f7a <SCREEN_INIT>
	int ranonce = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
	  if (ranonce == 0) {
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d110      	bne.n	8001dbe <StartHome+0x52>
		  OLED_SCREEN(&HOME, NORMAL);
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fb16 	bl	80013d4 <OLED_SCREEN>
		  OLED_SELECT(&HOME, count, OLED_RESTORE);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	b2d9      	uxtb	r1, r3
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2201      	movs	r2, #1
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fb70 	bl	8001498 <OLED_SELECT>
		  ranonce++;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	3301      	adds	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
	  }
	  choose(&HOME,&suspend,&count,6,OLED_RESTORE);
 8001dbe:	f107 020c 	add.w	r2, r7, #12
 8001dc2:	f107 0108 	add.w	r1, r7, #8
 8001dc6:	f107 0010 	add.w	r0, r7, #16
 8001dca:	2301      	movs	r3, #1
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2306      	movs	r3, #6
 8001dd0:	f7ff fc00 	bl	80015d4 <choose>
	  if (suspend == 1) {
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d1db      	bne.n	8001d92 <StartHome+0x26>
		switch(count) {
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <StartHome+0x7a>
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d006      	beq.n	8001df2 <StartHome+0x86>
 8001de4:	e00b      	b.n	8001dfe <StartHome+0x92>
			case 0:
				vTaskResume(ReadCardHandle);
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <StartHome+0xac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f009 fe94 	bl	800bb18 <vTaskResume>
				break;
 8001df0:	e005      	b.n	8001dfe <StartHome+0x92>
			case 1:
				vTaskResume(WriteCardHandle);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <StartHome+0xb0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f009 fe8e 	bl	800bb18 <vTaskResume>
				break;
 8001dfc:	bf00      	nop
		}
		ranonce = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
		vTaskSuspend(NULL);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f009 fde0 	bl	800b9c8 <vTaskSuspend>
  {
 8001e08:	e7c3      	b.n	8001d92 <StartHome+0x26>
 8001e0a:	bf00      	nop
 8001e0c:	0800ee80 	.word	0x0800ee80
 8001e10:	0800ee70 	.word	0x0800ee70
 8001e14:	20000400 	.word	0x20000400
 8001e18:	20000804 	.word	0x20000804
 8001e1c:	20000808 	.word	0x20000808

08001e20 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b092      	sub	sp, #72	; 0x48
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 Screen found;
	 int count = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
	 int ranonce = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	 char* cardinf;
	 char type[]="MIFARE ULTRALIGHT";
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <CardFoundStart+0xcc>)
 8001e32:	f107 040c 	add.w	r4, r7, #12
 8001e36:	461d      	mov	r5, r3
 8001e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	8023      	strh	r3, [r4, #0]
	 SCREEN_INIT(&found, 5, 2, (char**)CARD_FOUNDSCREEN, CARD_FOUNDATLOC, CARD_FOUNDSEL);
 8001e40:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <CardFoundStart+0xd0>)
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <CardFoundStart+0xd4>)
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <CardFoundStart+0xd8>)
 8001e4e:	2202      	movs	r2, #2
 8001e50:	2105      	movs	r1, #5
 8001e52:	f7ff f892 	bl	8000f7a <SCREEN_INIT>
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
	if (ranonce == 0) {
 8001e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d12b      	bne.n	8001eb8 <CardFoundStart+0x98>
		while(xQueueReceive(UidtoFoundHandle, &cardinf, 0)!=pdTRUE);
 8001e60:	bf00      	nop
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <CardFoundStart+0xdc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f107 0120 	add.w	r1, r7, #32
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f009 f987 	bl	800b180 <xQueueReceive>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d1f4      	bne.n	8001e62 <CardFoundStart+0x42>
		OLED_SCREEN(&found, NORMAL);
 8001e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff faa8 	bl	80013d4 <OLED_SCREEN>
		OLED_SCRNREF(&found, 1, cardinf);
 8001e84:	6a3a      	ldr	r2, [r7, #32]
 8001e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fada 	bl	8001446 <OLED_SCRNREF>
		OLED_SCRNREF(&found, 2, type);
 8001e92:	f107 020c 	add.w	r2, r7, #12
 8001e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fad2 	bl	8001446 <OLED_SCRNREF>
		OLED_SELECT(&found, count, OLED_NORESTORE);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	b2d9      	uxtb	r1, r3
 8001ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff faf3 	bl	8001498 <OLED_SELECT>
		ranonce++;
 8001eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	choose(&found,&suspend,&count,2,OLED_NORESTORE);
 8001eb8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ebc:	f107 0108 	add.w	r1, r7, #8
 8001ec0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f7ff fb83 	bl	80015d4 <choose>
 	if(suspend==1){
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d1c0      	bne.n	8001e56 <CardFoundStart+0x36>
 		vTaskResume(HomeHandle);
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <CardFoundStart+0xe0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f009 fe1d 	bl	800bb18 <vTaskResume>
 		ranonce = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 		vTaskSuspend(NULL);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f009 fd70 	bl	800b9c8 <vTaskSuspend>
  {
 8001ee8:	e7b5      	b.n	8001e56 <CardFoundStart+0x36>
 8001eea:	bf00      	nop
 8001eec:	0800ec1c 	.word	0x0800ec1c
 8001ef0:	0800eea4 	.word	0x0800eea4
 8001ef4:	0800ee98 	.word	0x0800ee98
 8001ef8:	20000428 	.word	0x20000428
 8001efc:	20000814 	.word	0x20000814
 8001f00:	2000080c 	.word	0x2000080c

08001f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f16:	f000 faa7 	bl	8002468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40000c00 	.word	0x40000c00

08001f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2c:	b672      	cpsid	i
}
 8001f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <Error_Handler+0x8>
	...

08001f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_MspInit+0x54>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_MspInit+0x54>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_MspInit+0x54>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_MspInit+0x54>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_MspInit+0x54>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_MspInit+0x54>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	210f      	movs	r1, #15
 8001f76:	f06f 0001 	mvn.w	r0, #1
 8001f7a:	f000 fb71 	bl	8002660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_I2C_MspInit+0x84>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d12b      	bne.n	8002006 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_I2C_MspInit+0x88>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_I2C_MspInit+0x88>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_I2C_MspInit+0x88>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fca:	23c0      	movs	r3, #192	; 0xc0
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fce:	2312      	movs	r3, #18
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <HAL_I2C_MspInit+0x8c>)
 8001fe6:	f000 fb65 	bl	80026b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_I2C_MspInit+0x88>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_I2C_MspInit+0x88>)
 8001ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_I2C_MspInit+0x88>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	; 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40005400 	.word	0x40005400
 8002014:	40023800 	.word	0x40023800
 8002018:	40020400 	.word	0x40020400

0800201c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_SPI_MspInit+0xe8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d12c      	bne.n	8002098 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_SPI_MspInit+0xec>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a30      	ldr	r2, [pc, #192]	; (8002108 <HAL_SPI_MspInit+0xec>)
 8002048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_SPI_MspInit+0xec>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_SPI_MspInit+0xec>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a29      	ldr	r2, [pc, #164]	; (8002108 <HAL_SPI_MspInit+0xec>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_SPI_MspInit+0xec>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002076:	23a0      	movs	r3, #160	; 0xa0
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002086:	2305      	movs	r3, #5
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	481e      	ldr	r0, [pc, #120]	; (800210c <HAL_SPI_MspInit+0xf0>)
 8002092:	f000 fb0f 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002096:	e031      	b.n	80020fc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_SPI_MspInit+0xf4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d12c      	bne.n	80020fc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_SPI_MspInit+0xec>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_SPI_MspInit+0xec>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_SPI_MspInit+0xec>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_SPI_MspInit+0xec>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_SPI_MspInit+0xec>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_SPI_MspInit+0xec>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020ec:	2305      	movs	r3, #5
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4807      	ldr	r0, [pc, #28]	; (8002114 <HAL_SPI_MspInit+0xf8>)
 80020f8:	f000 fadc 	bl	80026b4 <HAL_GPIO_Init>
}
 80020fc:	bf00      	nop
 80020fe:	3730      	adds	r7, #48	; 0x30
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40013000 	.word	0x40013000
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000
 8002110:	40003800 	.word	0x40003800
 8002114:	40020400 	.word	0x40020400

08002118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_TIM_Base_MspInit+0x64>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <HAL_TIM_Base_MspInit+0x64>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_TIM_Base_MspInit+0x64>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002146:	e012      	b.n	800216e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_TIM_Base_MspInit+0x68>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d10d      	bne.n	800216e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_TIM_Base_MspInit+0x64>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_TIM_Base_MspInit+0x64>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_TIM_Base_MspInit+0x64>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40000400 	.word	0x40000400

08002184 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d11d      	bne.n	80021e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_TIM_MspPostInit+0x68>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_TIM_MspPostInit+0x68>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_TIM_MspPostInit+0x68>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c2:	2304      	movs	r3, #4
 80021c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021d2:	2301      	movs	r3, #1
 80021d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <HAL_TIM_MspPostInit+0x6c>)
 80021de:	f000 fa69 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000

080021f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08e      	sub	sp, #56	; 0x38
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <HAL_InitTick+0xe4>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4a32      	ldr	r2, [pc, #200]	; (80022d8 <HAL_InitTick+0xe4>)
 800220e:	f043 0308 	orr.w	r3, r3, #8
 8002212:	6413      	str	r3, [r2, #64]	; 0x40
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_InitTick+0xe4>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002220:	f107 0210 	add.w	r2, r7, #16
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fab6 	bl	800579c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800223a:	f003 fa9b 	bl	8005774 <HAL_RCC_GetPCLK1Freq>
 800223e:	6378      	str	r0, [r7, #52]	; 0x34
 8002240:	e004      	b.n	800224c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002242:	f003 fa97 	bl	8005774 <HAL_RCC_GetPCLK1Freq>
 8002246:	4603      	mov	r3, r0
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800224c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_InitTick+0xe8>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	0c9b      	lsrs	r3, r3, #18
 8002256:	3b01      	subs	r3, #1
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_InitTick+0xec>)
 800225c:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_InitTick+0xf0>)
 800225e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_InitTick+0xec>)
 8002262:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002266:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_InitTick+0xec>)
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_InitTick+0xec>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_InitTick+0xec>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_InitTick+0xec>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002280:	4817      	ldr	r0, [pc, #92]	; (80022e0 <HAL_InitTick+0xec>)
 8002282:	f003 fd4d 	bl	8005d20 <HAL_TIM_Base_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800228c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11b      	bne.n	80022cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002294:	4812      	ldr	r0, [pc, #72]	; (80022e0 <HAL_InitTick+0xec>)
 8002296:	f003 fe15 	bl	8005ec4 <HAL_TIM_Base_Start_IT>
 800229a:	4603      	mov	r3, r0
 800229c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80022a8:	2032      	movs	r0, #50	; 0x32
 80022aa:	f000 f9f5 	bl	8002698 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d808      	bhi.n	80022c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	2032      	movs	r0, #50	; 0x32
 80022ba:	f000 f9d1 	bl	8002660 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_InitTick+0xf4>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e002      	b.n	80022cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3738      	adds	r7, #56	; 0x38
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	20000818 	.word	0x20000818
 80022e4:	40000c00 	.word	0x40000c00
 80022e8:	200004ec 	.word	0x200004ec

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler+0x4>

080022f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <UsageFault_Handler+0x4>

0800230a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <TIM5_IRQHandler+0x10>)
 800231e:	f003 ffa1 	bl	8006264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000818 	.word	0x20000818

0800232c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <OTG_FS_IRQHandler+0x10>)
 8002332:	f001 fc84 	bl	8003c3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200064b8 	.word	0x200064b8

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f00b fdec 	bl	800df4c <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20010000 	.word	0x20010000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	20000860 	.word	0x20000860
 80023a8:	20006bf8 	.word	0x20006bf8

080023ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <SystemInit+0x20>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <SystemInit+0x20>)
 80023b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d4:	480d      	ldr	r0, [pc, #52]	; (800240c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d6:	490e      	ldr	r1, [pc, #56]	; (8002410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d8:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023ec:	4c0b      	ldr	r4, [pc, #44]	; (800241c <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023fa:	f7ff ffd7 	bl	80023ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fe:	f00b fdab 	bl	800df58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002402:	f7ff f935 	bl	8001670 <main>
  bx  lr    
 8002406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002408:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	2000064c 	.word	0x2000064c
  ldr r2, =_sidata
 8002414:	0800efdc 	.word	0x0800efdc
  ldr r2, =_sbss
 8002418:	2000064c 	.word	0x2000064c
  ldr r4, =_ebss
 800241c:	20006bf4 	.word	0x20006bf4

08002420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC_IRQHandler>
	...

08002424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <HAL_Init+0x40>)
 800242e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_Init+0x40>)
 800243a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_Init+0x40>)
 8002446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f000 f8fc 	bl	800264a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002452:	200f      	movs	r0, #15
 8002454:	f7ff fece 	bl	80021f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002458:	f7ff fd6c 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200004f0 	.word	0x200004f0
 800248c:	20000864 	.word	0x20000864

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000864 	.word	0x20000864

080024a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d005      	beq.n	80024ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_Delay+0x44>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ce:	bf00      	nop
 80024d0:	f7ff ffde 	bl	8002490 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d8f7      	bhi.n	80024d0 <HAL_Delay+0x28>
  {
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200004f0 	.word	0x200004f0

080024f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800250c:	4013      	ands	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800251c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002522:	4a04      	ldr	r2, [pc, #16]	; (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	60d3      	str	r3, [r2, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <__NVIC_GetPriorityGrouping+0x18>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 0307 	and.w	r3, r3, #7
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db0b      	blt.n	800257e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <__NVIC_EnableIRQ+0x38>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	; (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	; (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ff4c 	bl	80024f0 <__NVIC_SetPriorityGrouping>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002672:	f7ff ff61 	bl	8002538 <__NVIC_GetPriorityGrouping>
 8002676:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f7ff ffb1 	bl	80025e4 <NVIC_EncodePriority>
 8002682:	4602      	mov	r2, r0
 8002684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff80 	bl	8002590 <__NVIC_SetPriority>
}
 8002690:	bf00      	nop
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff54 	bl	8002554 <__NVIC_EnableIRQ>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e159      	b.n	8002984 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	f040 8148 	bne.w	800297e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d005      	beq.n	8002706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	2b02      	cmp	r3, #2
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a2 	beq.w	800297e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_GPIO_Init+0x2e8>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002856:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a49      	ldr	r2, [pc, #292]	; (80029a4 <HAL_GPIO_Init+0x2f0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x202>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a48      	ldr	r2, [pc, #288]	; (80029a8 <HAL_GPIO_Init+0x2f4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x1fe>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a47      	ldr	r2, [pc, #284]	; (80029ac <HAL_GPIO_Init+0x2f8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x1fa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a46      	ldr	r2, [pc, #280]	; (80029b0 <HAL_GPIO_Init+0x2fc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x1f6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a45      	ldr	r2, [pc, #276]	; (80029b4 <HAL_GPIO_Init+0x300>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x1f2>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028a6:	2307      	movs	r3, #7
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_GPIO_Init+0x304>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <HAL_GPIO_Init+0x304>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a24      	ldr	r2, [pc, #144]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_GPIO_Init+0x304>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_GPIO_Init+0x304>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f aea2 	bls.w	80026d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	e001      	b.n	80029de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
 80029f8:	4613      	mov	r3, r2
 80029fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029fc:	787b      	ldrb	r3, [r7, #1]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a08:	e003      	b.n	8002a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	619a      	str	r2, [r3, #24]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e12b      	b.n	8002c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff faa0 	bl	8001f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2224      	movs	r2, #36	; 0x24
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a84:	f002 fe76 	bl	8005774 <HAL_RCC_GetPCLK1Freq>
 8002a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4a81      	ldr	r2, [pc, #516]	; (8002c94 <HAL_I2C_Init+0x274>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d807      	bhi.n	8002aa4 <HAL_I2C_Init+0x84>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a80      	ldr	r2, [pc, #512]	; (8002c98 <HAL_I2C_Init+0x278>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	bf94      	ite	ls
 8002a9c:	2301      	movls	r3, #1
 8002a9e:	2300      	movhi	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e006      	b.n	8002ab2 <HAL_I2C_Init+0x92>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a7d      	ldr	r2, [pc, #500]	; (8002c9c <HAL_I2C_Init+0x27c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0e7      	b.n	8002c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a78      	ldr	r2, [pc, #480]	; (8002ca0 <HAL_I2C_Init+0x280>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	0c9b      	lsrs	r3, r3, #18
 8002ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a6a      	ldr	r2, [pc, #424]	; (8002c94 <HAL_I2C_Init+0x274>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d802      	bhi.n	8002af4 <HAL_I2C_Init+0xd4>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3301      	adds	r3, #1
 8002af2:	e009      	b.n	8002b08 <HAL_I2C_Init+0xe8>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	4a69      	ldr	r2, [pc, #420]	; (8002ca4 <HAL_I2C_Init+0x284>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	3301      	adds	r3, #1
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	495c      	ldr	r1, [pc, #368]	; (8002c94 <HAL_I2C_Init+0x274>)
 8002b24:	428b      	cmp	r3, r1
 8002b26:	d819      	bhi.n	8002b5c <HAL_I2C_Init+0x13c>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e59      	subs	r1, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b36:	1c59      	adds	r1, r3, #1
 8002b38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b3c:	400b      	ands	r3, r1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_I2C_Init+0x138>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1e59      	subs	r1, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b56:	e051      	b.n	8002bfc <HAL_I2C_Init+0x1dc>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	e04f      	b.n	8002bfc <HAL_I2C_Init+0x1dc>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d111      	bne.n	8002b88 <HAL_I2C_Init+0x168>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1e58      	subs	r0, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	440b      	add	r3, r1
 8002b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e012      	b.n	8002bae <HAL_I2C_Init+0x18e>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1e58      	subs	r0, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	0099      	lsls	r1, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2301      	moveq	r3, #1
 8002baa:	2300      	movne	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Init+0x196>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e022      	b.n	8002bfc <HAL_I2C_Init+0x1dc>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10e      	bne.n	8002bdc <HAL_I2C_Init+0x1bc>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1e58      	subs	r0, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	440b      	add	r3, r1
 8002bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bda:	e00f      	b.n	8002bfc <HAL_I2C_Init+0x1dc>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	0099      	lsls	r1, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	6809      	ldr	r1, [r1, #0]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6911      	ldr	r1, [r2, #16]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68d2      	ldr	r2, [r2, #12]
 8002c36:	4311      	orrs	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	000186a0 	.word	0x000186a0
 8002c98:	001e847f 	.word	0x001e847f
 8002c9c:	003d08ff 	.word	0x003d08ff
 8002ca0:	431bde83 	.word	0x431bde83
 8002ca4:	10624dd3 	.word	0x10624dd3

08002ca8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	813b      	strh	r3, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc2:	f7ff fbe5 	bl	8002490 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	f040 80d9 	bne.w	8002e88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2319      	movs	r3, #25
 8002cdc:	2201      	movs	r2, #1
 8002cde:	496d      	ldr	r1, [pc, #436]	; (8002e94 <HAL_I2C_Mem_Write+0x1ec>)
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fc7f 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0cc      	b.n	8002e8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_I2C_Mem_Write+0x56>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0c5      	b.n	8002e8a <HAL_I2C_Mem_Write+0x1e2>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d007      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2221      	movs	r2, #33	; 0x21
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2240      	movs	r2, #64	; 0x40
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_I2C_Mem_Write+0x1f0>)
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d66:	88f8      	ldrh	r0, [r7, #6]
 8002d68:	893a      	ldrh	r2, [r7, #8]
 8002d6a:	8979      	ldrh	r1, [r7, #10]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4603      	mov	r3, r0
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fab6 	bl	80032e8 <I2C_RequestMemoryWrite>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d052      	beq.n	8002e28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e081      	b.n	8002e8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fd00 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d107      	bne.n	8002dae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06b      	b.n	8002e8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d11b      	bne.n	8002e28 <HAL_I2C_Mem_Write+0x180>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1aa      	bne.n	8002d86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fcec 	bl	8003812 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d107      	bne.n	8002e58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e016      	b.n	8002e8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	00100002 	.word	0x00100002
 8002e98:	ffff0000 	.word	0xffff0000

08002e9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	; 0x30
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	817b      	strh	r3, [r7, #10]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	813b      	strh	r3, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eb6:	f7ff faeb 	bl	8002490 <HAL_GetTick>
 8002eba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	f040 8208 	bne.w	80032da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2319      	movs	r3, #25
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	497b      	ldr	r1, [pc, #492]	; (80030c0 <HAL_I2C_Mem_Read+0x224>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fb85 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e1fb      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2C_Mem_Read+0x56>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e1f4      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d007      	beq.n	8002f18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2222      	movs	r2, #34	; 0x22
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a5b      	ldr	r2, [pc, #364]	; (80030c4 <HAL_I2C_Mem_Read+0x228>)
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f5a:	88f8      	ldrh	r0, [r7, #6]
 8002f5c:	893a      	ldrh	r2, [r7, #8]
 8002f5e:	8979      	ldrh	r1, [r7, #10]
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	4603      	mov	r3, r0
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa52 	bl	8003414 <I2C_RequestMemoryRead>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1b0      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d113      	bne.n	8002faa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e184      	b.n	80032b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d11b      	bne.n	8002fea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e164      	b.n	80032b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d11b      	bne.n	800302a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003000:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	e144      	b.n	80032b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003040:	e138      	b.n	80032b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	2b03      	cmp	r3, #3
 8003048:	f200 80f1 	bhi.w	800322e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b01      	cmp	r3, #1
 8003052:	d123      	bne.n	800309c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fc1b 	bl	8003894 <I2C_WaitOnRXNEFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e139      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	855a      	strh	r2, [r3, #42]	; 0x2a
 800309a:	e10b      	b.n	80032b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d14e      	bne.n	8003142 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	2200      	movs	r2, #0
 80030ac:	4906      	ldr	r1, [pc, #24]	; (80030c8 <HAL_I2C_Mem_Read+0x22c>)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fa98 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e10e      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
 80030be:	bf00      	nop
 80030c0:	00100002 	.word	0x00100002
 80030c4:	ffff0000 	.word	0xffff0000
 80030c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003140:	e0b8      	b.n	80032b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	2200      	movs	r2, #0
 800314a:	4966      	ldr	r1, [pc, #408]	; (80032e4 <HAL_I2C_Mem_Read+0x448>)
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fa49 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0bf      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	2200      	movs	r2, #0
 80031a6:	494f      	ldr	r1, [pc, #316]	; (80032e4 <HAL_I2C_Mem_Read+0x448>)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fa1b 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e091      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800322c:	e042      	b.n	80032b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003230:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fb2e 	bl	8003894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e04c      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b04      	cmp	r3, #4
 8003280:	d118      	bne.n	80032b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f47f aec2 	bne.w	8003042 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	; 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	00010004 	.word	0x00010004

080032e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	817b      	strh	r3, [r7, #10]
 80032fa:	460b      	mov	r3, r1
 80032fc:	813b      	strh	r3, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003310:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	2200      	movs	r2, #0
 800331a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f960 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003338:	d103      	bne.n	8003342 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003340:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e05f      	b.n	8003406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003354:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	492d      	ldr	r1, [pc, #180]	; (8003410 <I2C_RequestMemoryWrite+0x128>)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f998 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e04c      	b.n	8003406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	6a39      	ldr	r1, [r7, #32]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa02 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b04      	cmp	r3, #4
 8003398:	d107      	bne.n	80033aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e02b      	b.n	8003406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b4:	893b      	ldrh	r3, [r7, #8]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	e021      	b.n	8003404 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033c0:	893b      	ldrh	r3, [r7, #8]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	6a39      	ldr	r1, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f9dc 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d107      	bne.n	80033f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e005      	b.n	8003406 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033fa:	893b      	ldrh	r3, [r7, #8]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00010002 	.word	0x00010002

08003414 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800343c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	2200      	movs	r2, #0
 8003456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f8c2 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003474:	d103      	bne.n	800347e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0aa      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003490:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	4952      	ldr	r1, [pc, #328]	; (80035e0 <I2C_RequestMemoryRead+0x1cc>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f8fa 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e097      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	6a39      	ldr	r1, [r7, #32]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f964 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d107      	bne.n	80034e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e076      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f0:	893b      	ldrh	r3, [r7, #8]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	611a      	str	r2, [r3, #16]
 80034fa:	e021      	b.n	8003540 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034fc:	893b      	ldrh	r3, [r7, #8]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	b29b      	uxth	r3, r3
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350c:	6a39      	ldr	r1, [r7, #32]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f93e 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b04      	cmp	r3, #4
 8003520:	d107      	bne.n	8003532 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003530:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e050      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003536:	893b      	ldrh	r3, [r7, #8]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	6a39      	ldr	r1, [r7, #32]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f923 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2b04      	cmp	r3, #4
 8003556:	d107      	bne.n	8003568 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003566:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e035      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800357a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2200      	movs	r2, #0
 8003584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f82b 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a2:	d103      	bne.n	80035ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e013      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035b0:	897b      	ldrh	r3, [r7, #10]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	6a3a      	ldr	r2, [r7, #32]
 80035c4:	4906      	ldr	r1, [pc, #24]	; (80035e0 <I2C_RequestMemoryRead+0x1cc>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f863 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00010002 	.word	0x00010002

080035e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	e025      	b.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d021      	beq.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe ff47 	bl	8002490 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e023      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d10d      	bne.n	8003668 <I2C_WaitOnFlagUntilTimeout+0x84>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	43da      	mvns	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	e00c      	b.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d0b6      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a0:	e051      	b.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d123      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e046      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fec5 	bl	8002490 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e020      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10c      	bne.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e00b      	b.n	8003782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d18d      	bne.n	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379c:	e02d      	b.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8ce 	bl	8003940 <I2C_IsAcknowledgeFailed>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e02d      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d021      	beq.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fe fe6b 	bl	8002490 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d116      	bne.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e007      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d1ca      	bne.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381e:	e02d      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f88d 	bl	8003940 <I2C_IsAcknowledgeFailed>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e02d      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d021      	beq.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fe fe2a 	bl	8002490 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e007      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d1ca      	bne.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a0:	e042      	b.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d119      	bne.n	80038e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0210 	mvn.w	r2, #16
 80038b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e029      	b.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e4:	f7fe fdd4 	bl	8002490 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d1b5      	bne.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d11b      	bne.n	8003990 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003960:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800399e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a0:	b08f      	sub	sp, #60	; 0x3c
 80039a2:	af0a      	add	r7, sp, #40	; 0x28
 80039a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e10f      	b.n	8003bd0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f009 ffb4 	bl	800d938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2203      	movs	r2, #3
 80039d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 fb55 	bl	800709e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	687e      	ldr	r6, [r7, #4]
 80039fc:	466d      	mov	r5, sp
 80039fe:	f106 0410 	add.w	r4, r6, #16
 8003a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a12:	1d33      	adds	r3, r6, #4
 8003a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a16:	6838      	ldr	r0, [r7, #0]
 8003a18:	f003 fa2c 	bl	8006e74 <USB_CoreInit>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0d0      	b.n	8003bd0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 fb43 	bl	80070c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e04a      	b.n	8003ad6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	333d      	adds	r3, #61	; 0x3d
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	333c      	adds	r3, #60	; 0x3c
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	b298      	uxth	r0, r3
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3344      	adds	r3, #68	; 0x44
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3340      	adds	r3, #64	; 0x40
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3348      	adds	r3, #72	; 0x48
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	334c      	adds	r3, #76	; 0x4c
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3354      	adds	r3, #84	; 0x54
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3af      	bcc.n	8003a40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e044      	b.n	8003b70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b3e:	7bfa      	ldrb	r2, [r7, #15]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d3b5      	bcc.n	8003ae6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	687e      	ldr	r6, [r7, #4]
 8003b82:	466d      	mov	r5, sp
 8003b84:	f106 0410 	add.w	r4, r6, #16
 8003b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b94:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b98:	1d33      	adds	r3, r6, #4
 8003b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b9c:	6838      	ldr	r0, [r7, #0]
 8003b9e:	f003 fadb 	bl	8007158 <USB_DevInit>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e00d      	b.n	8003bd0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f004 fc2a 	bl	8008422 <USB_DevDisconnect>

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_PCD_Start+0x1c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e020      	b.n	8003c36 <HAL_PCD_Start+0x5e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d109      	bne.n	8003c18 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d005      	beq.n	8003c18 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f003 fa2d 	bl	800707c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f004 fbda 	bl	80083e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c3e:	b590      	push	{r4, r7, lr}
 8003c40:	b08d      	sub	sp, #52	; 0x34
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 fc98 	bl	800858a <USB_GetMode>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 848a 	bne.w	8004576 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f004 fbfc 	bl	8008464 <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8480 	beq.w	8004574 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f004 fbe9 	bl	8008464 <USB_ReadInterrupts>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d107      	bne.n	8003cac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f002 0202 	and.w	r2, r2, #2
 8003caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f004 fbd7 	bl	8008464 <USB_ReadInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d161      	bne.n	8003d84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0210 	bic.w	r2, r2, #16
 8003cce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	0c5b      	lsrs	r3, r3, #17
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d124      	bne.n	8003d46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d035      	beq.n	8003d74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6a38      	ldr	r0, [r7, #32]
 8003d1c:	f004 fa0e 	bl	800813c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d2c:	441a      	add	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3e:	441a      	add	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	621a      	str	r2, [r3, #32]
 8003d44:	e016      	b.n	8003d74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	0c5b      	lsrs	r3, r3, #17
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d110      	bne.n	8003d74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d58:	2208      	movs	r2, #8
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6a38      	ldr	r0, [r7, #32]
 8003d5e:	f004 f9ed 	bl	800813c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d6e:	441a      	add	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0210 	orr.w	r2, r2, #16
 8003d82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 fb6b 	bl	8008464 <USB_ReadInterrupts>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d98:	f040 80a7 	bne.w	8003eea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f004 fb70 	bl	800848a <USB_ReadDevAllOutEpInterrupt>
 8003daa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003dac:	e099      	b.n	8003ee2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 808e 	beq.w	8003ed6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f004 fb94 	bl	80084f2 <USB_ReadDevOutEPInterrupt>
 8003dca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00c      	beq.n	8003df0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	461a      	mov	r2, r3
 8003de4:	2301      	movs	r3, #1
 8003de6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fec2 	bl	8004b74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e06:	461a      	mov	r2, r3
 8003e08:	2308      	movs	r3, #8
 8003e0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 ff98 	bl	8004d44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d030      	beq.n	8003e9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e42:	2b80      	cmp	r3, #128	; 0x80
 8003e44:	d109      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	78db      	ldrb	r3, [r3, #3]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d108      	bne.n	8003e8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	4619      	mov	r1, r3
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f009 fe53 	bl	800db30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	461a      	mov	r2, r3
 8003e98:	2302      	movs	r3, #2
 8003e9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2320      	movs	r3, #32
 8003eb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	3301      	adds	r3, #1
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af62 	bne.w	8003dae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f004 fab8 	bl	8008464 <USB_ReadInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003efe:	f040 80db 	bne.w	80040b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f004 fad9 	bl	80084be <USB_ReadDevAllInEpInterrupt>
 8003f0c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f12:	e0cd      	b.n	80040b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80c2 	beq.w	80040a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f004 faff 	bl	800852e <USB_ReadDevInEPInterrupt>
 8003f30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d057      	beq.n	8003fec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	2201      	movs	r2, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69f9      	ldr	r1, [r7, #28]
 8003f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2301      	movs	r3, #1
 8003f70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d132      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	334c      	adds	r3, #76	; 0x4c
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4403      	add	r3, r0
 8003f9a:	3348      	adds	r3, #72	; 0x48
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4419      	add	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4403      	add	r3, r0
 8003fae:	334c      	adds	r3, #76	; 0x4c
 8003fb0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d113      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x3a2>
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3354      	adds	r3, #84	; 0x54
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d108      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2101      	movs	r1, #1
 8003fdc:	f004 fb06 	bl	80085ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f009 fd27 	bl	800da3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	461a      	mov	r2, r3
 8004004:	2308      	movs	r3, #8
 8004006:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401e:	461a      	mov	r2, r3
 8004020:	2310      	movs	r3, #16
 8004022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403a:	461a      	mov	r2, r3
 800403c:	2340      	movs	r3, #64	; 0x40
 800403e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d023      	beq.n	8004092 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800404a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800404c:	6a38      	ldr	r0, [r7, #32]
 800404e:	f003 f9e7 	bl	8007420 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	3338      	adds	r3, #56	; 0x38
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	3304      	adds	r3, #4
 8004064:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	78db      	ldrb	r3, [r3, #3]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d108      	bne.n	8004080 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f009 fd6a 	bl	800db54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	461a      	mov	r2, r3
 800408e:	2302      	movs	r3, #2
 8004090:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800409c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fcdb 	bl	8004a5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	3301      	adds	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f47f af2e 	bne.w	8003f14 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f004 f9d1 	bl	8008464 <USB_ReadInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040cc:	d122      	bne.n	8004114 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d108      	bne.n	80040fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040f4:	2100      	movs	r1, #0
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fec2 	bl	8004e80 <HAL_PCDEx_LPM_Callback>
 80040fc:	e002      	b.n	8004104 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f009 fd08 	bl	800db14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f004 f9a3 	bl	8008464 <USB_ReadInterrupts>
 800411e:	4603      	mov	r3, r0
 8004120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004128:	d112      	bne.n	8004150 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d102      	bne.n	8004140 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f009 fcc4 	bl	800dac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800414e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f004 f985 	bl	8008464 <USB_ReadInterrupts>
 800415a:	4603      	mov	r3, r0
 800415c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	f040 80b7 	bne.w	80042d6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2110      	movs	r1, #16
 8004182:	4618      	mov	r0, r3
 8004184:	f003 f94c 	bl	8007420 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004188:	2300      	movs	r3, #0
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800418c:	e046      	b.n	800421c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	461a      	mov	r2, r3
 800419c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ce:	461a      	mov	r2, r3
 80041d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	440a      	add	r2, r1
 800420c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004214:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	3301      	adds	r3, #1
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004222:	429a      	cmp	r2, r3
 8004224:	d3b3      	bcc.n	800418e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004234:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004238:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004252:	f043 030b 	orr.w	r3, r3, #11
 8004256:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004268:	f043 030b 	orr.w	r3, r3, #11
 800426c:	6453      	str	r3, [r2, #68]	; 0x44
 800426e:	e015      	b.n	800429c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800427e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004282:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004286:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004296:	f043 030b 	orr.w	r3, r3, #11
 800429a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042c0:	461a      	mov	r2, r3
 80042c2:	f004 f993 	bl	80085ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f004 f8c2 	bl	8008464 <USB_ReadInterrupts>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	d124      	bne.n	8004336 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f004 f958 	bl	80085a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f003 f90d 	bl	800751a <USB_GetDevSpeed>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681c      	ldr	r4, [r3, #0]
 800430c:	f001 fa26 	bl	800575c <HAL_RCC_GetHCLKFreq>
 8004310:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	4620      	mov	r0, r4
 800431c:	f002 fe0c 	bl	8006f38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f009 fbb2 	bl	800da8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004334:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f004 f892 	bl	8008464 <USB_ReadInterrupts>
 8004340:	4603      	mov	r3, r0
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b08      	cmp	r3, #8
 8004348:	d10a      	bne.n	8004360 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f009 fb8f 	bl	800da6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f002 0208 	and.w	r2, r2, #8
 800435e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f004 f87d 	bl	8008464 <USB_ReadInterrupts>
 800436a:	4603      	mov	r3, r0
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d122      	bne.n	80043ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004380:	2301      	movs	r3, #1
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
 8004384:	e014      	b.n	80043b0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	4613      	mov	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d105      	bne.n	80043aa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fb27 	bl	80049f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	3301      	adds	r3, #1
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d3e5      	bcc.n	8004386 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f004 f850 	bl	8008464 <USB_ReadInterrupts>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ce:	d13b      	bne.n	8004448 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043d0:	2301      	movs	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	e02b      	b.n	800442e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	3340      	adds	r3, #64	; 0x40
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d115      	bne.n	8004428 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043fe:	2b00      	cmp	r3, #0
 8004400:	da12      	bge.n	8004428 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	333f      	adds	r3, #63	; 0x3f
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800441e:	b2db      	uxtb	r3, r3
 8004420:	4619      	mov	r1, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fae8 	bl	80049f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	3301      	adds	r3, #1
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	429a      	cmp	r2, r3
 8004436:	d3ce      	bcc.n	80043d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f004 f809 	bl	8008464 <USB_ReadInterrupts>
 8004452:	4603      	mov	r3, r0
 8004454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800445c:	d155      	bne.n	800450a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800445e:	2301      	movs	r3, #1
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	e045      	b.n	80044f0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d12e      	bne.n	80044ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800448c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800448e:	2b00      	cmp	r3, #0
 8004490:	da2b      	bge.n	80044ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800449e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d121      	bne.n	80044ea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044b8:	2201      	movs	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e6:	6053      	str	r3, [r2, #4]
            break;
 80044e8:	e007      	b.n	80044fa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	3301      	adds	r3, #1
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d3b4      	bcc.n	8004464 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f003 ffa8 	bl	8008464 <USB_ReadInterrupts>
 8004514:	4603      	mov	r3, r0
 8004516:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451e:	d10a      	bne.n	8004536 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f009 fb29 	bl	800db78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f003 ff92 	bl	8008464 <USB_ReadInterrupts>
 8004540:	4603      	mov	r3, r0
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d115      	bne.n	8004576 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f009 fb19 	bl	800db94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	e000      	b.n	8004576 <HAL_PCD_IRQHandler+0x938>
      return;
 8004574:	bf00      	nop
    }
  }
}
 8004576:	3734      	adds	r7, #52	; 0x34
 8004578:	46bd      	mov	sp, r7
 800457a:	bd90      	pop	{r4, r7, pc}

0800457c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_PCD_SetAddress+0x1a>
 8004592:	2302      	movs	r3, #2
 8004594:	e013      	b.n	80045be <HAL_PCD_SetAddress+0x42>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 fef0 	bl	8008394 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	4608      	mov	r0, r1
 80045d0:	4611      	mov	r1, r2
 80045d2:	461a      	mov	r2, r3
 80045d4:	4603      	mov	r3, r0
 80045d6:	70fb      	strb	r3, [r7, #3]
 80045d8:	460b      	mov	r3, r1
 80045da:	803b      	strh	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da0f      	bge.n	800460c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	f003 020f 	and.w	r2, r3, #15
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	3338      	adds	r3, #56	; 0x38
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	3304      	adds	r3, #4
 8004602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	705a      	strb	r2, [r3, #1]
 800460a:	e00f      	b.n	800462c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4413      	add	r3, r2
 8004622:	3304      	adds	r3, #4
 8004624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004638:	883a      	ldrh	r2, [r7, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	78ba      	ldrb	r2, [r7, #2]
 8004642:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004656:	78bb      	ldrb	r3, [r7, #2]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d102      	bne.n	8004662 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_PCD_EP_Open+0xaa>
 800466c:	2302      	movs	r3, #2
 800466e:	e00e      	b.n	800468e <HAL_PCD_EP_Open+0xc8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	f002 ff70 	bl	8007564 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800468c:	7afb      	ldrb	r3, [r7, #11]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da0f      	bge.n	80046ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	f003 020f 	and.w	r2, r3, #15
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	3338      	adds	r3, #56	; 0x38
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	3304      	adds	r3, #4
 80046c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	705a      	strb	r2, [r3, #1]
 80046c8:	e00f      	b.n	80046ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	f003 020f 	and.w	r2, r3, #15
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	3304      	adds	r3, #4
 80046e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_PCD_EP_Close+0x6e>
 8004700:	2302      	movs	r3, #2
 8004702:	e00e      	b.n	8004722 <HAL_PCD_EP_Close+0x8c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68f9      	ldr	r1, [r7, #12]
 8004712:	4618      	mov	r0, r3
 8004714:	f002 ffae 	bl	8007674 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	460b      	mov	r3, r1
 8004738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800473a:	7afb      	ldrb	r3, [r7, #11]
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	3304      	adds	r3, #4
 8004752:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800476c:	7afb      	ldrb	r3, [r7, #11]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	b2da      	uxtb	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d102      	bne.n	8004786 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004786:	7afb      	ldrb	r3, [r7, #11]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	6979      	ldr	r1, [r7, #20]
 800479e:	f003 fa8d 	bl	8007cbc <USB_EP0StartXfer>
 80047a2:	e008      	b.n	80047b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	6979      	ldr	r1, [r7, #20]
 80047b2:	f003 f83b 	bl	800782c <USB_EPStartXfer>
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	460b      	mov	r3, r1
 80047fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004800:	7afb      	ldrb	r3, [r7, #11]
 8004802:	f003 020f 	and.w	r2, r3, #15
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	3338      	adds	r3, #56	; 0x38
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	3304      	adds	r3, #4
 8004816:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2200      	movs	r2, #0
 8004828:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2201      	movs	r2, #1
 800482e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004830:	7afb      	ldrb	r3, [r7, #11]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	b2da      	uxtb	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800484a:	7afb      	ldrb	r3, [r7, #11]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	f003 fa2b 	bl	8007cbc <USB_EP0StartXfer>
 8004866:	e008      	b.n	800487a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	f002 ffd9 	bl	800782c <USB_EPStartXfer>
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	429a      	cmp	r2, r3
 800489c:	d901      	bls.n	80048a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e050      	b.n	8004944 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	da0f      	bge.n	80048ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	f003 020f 	and.w	r2, r3, #15
 80048b0:	4613      	mov	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	3338      	adds	r3, #56	; 0x38
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	3304      	adds	r3, #4
 80048c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	705a      	strb	r2, [r3, #1]
 80048c8:	e00d      	b.n	80048e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048ca:	78fa      	ldrb	r2, [r7, #3]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	3304      	adds	r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_PCD_EP_SetStall+0x82>
 8004902:	2302      	movs	r3, #2
 8004904:	e01e      	b.n	8004944 <HAL_PCD_EP_SetStall+0xc0>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	4618      	mov	r0, r3
 8004916:	f003 fc69 	bl	80081ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	b2d9      	uxtb	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004934:	461a      	mov	r2, r3
 8004936:	f003 fe59 	bl	80085ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 020f 	and.w	r2, r3, #15
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d901      	bls.n	800496a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e042      	b.n	80049f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800496a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800496e:	2b00      	cmp	r3, #0
 8004970:	da0f      	bge.n	8004992 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	f003 020f 	and.w	r2, r3, #15
 8004978:	4613      	mov	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	3338      	adds	r3, #56	; 0x38
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4413      	add	r3, r2
 8004986:	3304      	adds	r3, #4
 8004988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	705a      	strb	r2, [r3, #1]
 8004990:	e00f      	b.n	80049b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	f003 020f 	and.w	r2, r3, #15
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	3304      	adds	r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_PCD_EP_ClrStall+0x86>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e00e      	b.n	80049f0 <HAL_PCD_EP_ClrStall+0xa4>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f003 fc71 	bl	80082c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da0c      	bge.n	8004a26 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	f003 020f 	and.w	r2, r3, #15
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	3338      	adds	r3, #56	; 0x38
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4413      	add	r3, r2
 8004a20:	3304      	adds	r3, #4
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e00c      	b.n	8004a40 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	f003 020f 	and.w	r2, r3, #15
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68f9      	ldr	r1, [r7, #12]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f003 fa90 	bl	8007f6c <USB_EPStopXfer>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a50:	7afb      	ldrb	r3, [r7, #11]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b08a      	sub	sp, #40	; 0x28
 8004a5e:	af02      	add	r7, sp, #8
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	3338      	adds	r3, #56	; 0x38
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3304      	adds	r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a1a      	ldr	r2, [r3, #32]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d901      	bls.n	8004a92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06c      	b.n	8004b6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d902      	bls.n	8004aae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	3303      	adds	r3, #3
 8004ab2:	089b      	lsrs	r3, r3, #2
 8004ab4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ab6:	e02b      	b.n	8004b10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d902      	bls.n	8004ad4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3303      	adds	r3, #3
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6919      	ldr	r1, [r3, #16]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4603      	mov	r3, r0
 8004af2:	6978      	ldr	r0, [r7, #20]
 8004af4:	f003 fae4 	bl	80080c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	441a      	add	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1a      	ldr	r2, [r3, #32]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	441a      	add	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d809      	bhi.n	8004b3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1a      	ldr	r2, [r3, #32]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d203      	bcs.n	8004b3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1be      	bne.n	8004ab8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d811      	bhi.n	8004b6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	6939      	ldr	r1, [r7, #16]
 8004b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b66:	4013      	ands	r3, r2
 8004b68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	333c      	adds	r3, #60	; 0x3c
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d17b      	bne.n	8004ca2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d015      	beq.n	8004be0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	4a61      	ldr	r2, [pc, #388]	; (8004d3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	f240 80b9 	bls.w	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80b3 	beq.w	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bdc:	6093      	str	r3, [r2, #8]
 8004bde:	e0a7      	b.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	e098      	b.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 8093 	bne.w	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4a4b      	ldr	r2, [pc, #300]	; (8004d3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d90f      	bls.n	8004c32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2e:	6093      	str	r3, [r2, #8]
 8004c30:	e07e      	b.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4413      	add	r3, r2
 8004c44:	3304      	adds	r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	440b      	add	r3, r1
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5e:	1ad2      	subs	r2, r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d114      	bne.n	8004c94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2101      	movs	r1, #1
 8004c80:	f003 fcb4 	bl	80085ec <USB_EP0_OutStart>
 8004c84:	e006      	b.n	8004c94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	441a      	add	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f008 feb2 	bl	800da04 <HAL_PCD_DataOutStageCallback>
 8004ca0:	e046      	b.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d124      	bne.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc6:	6093      	str	r3, [r2, #8]
 8004cc8:	e032      	b.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f008 fe89 	bl	800da04 <HAL_PCD_DataOutStageCallback>
 8004cf2:	e01d      	b.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d114      	bne.n	8004d24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2100      	movs	r1, #0
 8004d20:	f003 fc64 	bl	80085ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f008 fe6a 	bl	800da04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	4f54300a 	.word	0x4f54300a
 8004d40:	4f54310a 	.word	0x4f54310a

08004d44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	333c      	adds	r3, #60	; 0x3c
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <PCD_EP_OutSetupPacket_int+0x88>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d90e      	bls.n	8004d98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	461a      	mov	r2, r3
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f008 fe21 	bl	800d9e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <PCD_EP_OutSetupPacket_int+0x88>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d90c      	bls.n	8004dc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d108      	bne.n	8004dc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004db8:	461a      	mov	r2, r3
 8004dba:	2101      	movs	r1, #1
 8004dbc:	f003 fc16 	bl	80085ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	4f54300a 	.word	0x4f54300a

08004dd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d107      	bne.n	8004dfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dee:	883b      	ldrh	r3, [r7, #0]
 8004df0:	0419      	lsls	r1, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8004dfc:	e028      	b.n	8004e50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	4413      	add	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	e00d      	b.n	8004e2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	3340      	adds	r3, #64	; 0x40
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	4413      	add	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
 8004e2e:	7bfa      	ldrb	r2, [r7, #15]
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d3ec      	bcc.n	8004e12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e38:	883b      	ldrh	r3, [r7, #0]
 8004e3a:	0418      	lsls	r0, r3, #16
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4302      	orrs	r2, r0
 8004e48:	3340      	adds	r3, #64	; 0x40
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e267      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d075      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eb6:	4b88      	ldr	r3, [pc, #544]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d00c      	beq.n	8004edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec2:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d112      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ece:	4b82      	ldr	r3, [pc, #520]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	4b7e      	ldr	r3, [pc, #504]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05b      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x108>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d157      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e242      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d106      	bne.n	8004f0c <HAL_RCC_OscConfig+0x74>
 8004efe:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a75      	ldr	r2, [pc, #468]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e01d      	b.n	8004f48 <HAL_RCC_OscConfig+0xb0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x98>
 8004f16:	4b70      	ldr	r3, [pc, #448]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a6f      	ldr	r2, [pc, #444]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b6d      	ldr	r3, [pc, #436]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a6c      	ldr	r2, [pc, #432]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0xb0>
 8004f30:	4b69      	ldr	r3, [pc, #420]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a68      	ldr	r2, [pc, #416]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b66      	ldr	r3, [pc, #408]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a65      	ldr	r2, [pc, #404]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fd fa9e 	bl	8002490 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fd fa9a 	bl	8002490 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	; 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e207      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0xc0>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7fd fa8a 	bl	8002490 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fd fa86 	bl	8002490 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1f3      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	4b51      	ldr	r3, [pc, #324]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0xe8>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d063      	beq.n	8005076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fae:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d11c      	bne.n	8005000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc6:	4b44      	ldr	r3, [pc, #272]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_RCC_OscConfig+0x152>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1c7      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fea:	4b3b      	ldr	r3, [pc, #236]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4937      	ldr	r1, [pc, #220]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	e03a      	b.n	8005076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d020      	beq.n	800504a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b34      	ldr	r3, [pc, #208]	; (80050dc <HAL_RCC_OscConfig+0x244>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fd fa3f 	bl	8002490 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005016:	f7fd fa3b 	bl	8002490 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e1a8      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005028:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005034:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4925      	ldr	r1, [pc, #148]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
 8005048:	e015      	b.n	8005076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <HAL_RCC_OscConfig+0x244>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fd fa1e 	bl	8002490 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005058:	f7fd fa1a 	bl	8002490 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e187      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506a:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d036      	beq.n	80050f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_RCC_OscConfig+0x248>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fd f9fe 	bl	8002490 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005098:	f7fd f9fa 	bl	8002490 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e167      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 80050ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x200>
 80050b6:	e01b      	b.n	80050f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <HAL_RCC_OscConfig+0x248>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050be:	f7fd f9e7 	bl	8002490 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	e00e      	b.n	80050e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c6:	f7fd f9e3 	bl	8002490 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d907      	bls.n	80050e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e150      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
 80050d8:	40023800 	.word	0x40023800
 80050dc:	42470000 	.word	0x42470000
 80050e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e4:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1ea      	bne.n	80050c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8097 	beq.w	800522c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005102:	4b81      	ldr	r3, [pc, #516]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	4b7d      	ldr	r3, [pc, #500]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	4a7c      	ldr	r2, [pc, #496]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511c:	6413      	str	r3, [r2, #64]	; 0x40
 800511e:	4b7a      	ldr	r3, [pc, #488]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512e:	4b77      	ldr	r3, [pc, #476]	; (800530c <HAL_RCC_OscConfig+0x474>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d118      	bne.n	800516c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513a:	4b74      	ldr	r3, [pc, #464]	; (800530c <HAL_RCC_OscConfig+0x474>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a73      	ldr	r2, [pc, #460]	; (800530c <HAL_RCC_OscConfig+0x474>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005146:	f7fd f9a3 	bl	8002490 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514e:	f7fd f99f 	bl	8002490 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e10c      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005160:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCC_OscConfig+0x474>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d106      	bne.n	8005182 <HAL_RCC_OscConfig+0x2ea>
 8005174:	4b64      	ldr	r3, [pc, #400]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a63      	ldr	r2, [pc, #396]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	e01c      	b.n	80051bc <HAL_RCC_OscConfig+0x324>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d10c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x30c>
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a5e      	ldr	r2, [pc, #376]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005190:	f043 0304 	orr.w	r3, r3, #4
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a5b      	ldr	r2, [pc, #364]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70
 80051a2:	e00b      	b.n	80051bc <HAL_RCC_OscConfig+0x324>
 80051a4:	4b58      	ldr	r3, [pc, #352]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	4a57      	ldr	r2, [pc, #348]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	; 0x70
 80051b0:	4b55      	ldr	r3, [pc, #340]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	4a54      	ldr	r2, [pc, #336]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051b6:	f023 0304 	bic.w	r3, r3, #4
 80051ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fd f964 	bl	8002490 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7fd f960 	bl	8002490 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e0cb      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e2:	4b49      	ldr	r3, [pc, #292]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0ee      	beq.n	80051cc <HAL_RCC_OscConfig+0x334>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f0:	f7fd f94e 	bl	8002490 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f6:	e00a      	b.n	800520e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fd f94a 	bl	8002490 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	; 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0b5      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520e:	4b3e      	ldr	r3, [pc, #248]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1ee      	bne.n	80051f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d105      	bne.n	800522c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005220:	4b39      	ldr	r3, [pc, #228]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	4a38      	ldr	r2, [pc, #224]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80a1 	beq.w	8005378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005236:	4b34      	ldr	r3, [pc, #208]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b08      	cmp	r3, #8
 8005240:	d05c      	beq.n	80052fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d141      	bne.n	80052ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524a:	4b31      	ldr	r3, [pc, #196]	; (8005310 <HAL_RCC_OscConfig+0x478>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fd f91e 	bl	8002490 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005258:	f7fd f91a 	bl	8002490 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e087      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	4b27      	ldr	r3, [pc, #156]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	019b      	lsls	r3, r3, #6
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	085b      	lsrs	r3, r3, #1
 800528e:	3b01      	subs	r3, #1
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	491b      	ldr	r1, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_RCC_OscConfig+0x478>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a6:	f7fd f8f3 	bl	8002490 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ae:	f7fd f8ef 	bl	8002490 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e05c      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x416>
 80052cc:	e054      	b.n	8005378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ce:	4b10      	ldr	r3, [pc, #64]	; (8005310 <HAL_RCC_OscConfig+0x478>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7fd f8dc 	bl	8002490 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fd f8d8 	bl	8002490 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e045      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x444>
 80052fa:	e03d      	b.n	8005378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d107      	bne.n	8005314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e038      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
 8005308:	40023800 	.word	0x40023800
 800530c:	40007000 	.word	0x40007000
 8005310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005314:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_RCC_OscConfig+0x4ec>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d028      	beq.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d121      	bne.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d11a      	bne.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005344:	4013      	ands	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800534a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800534c:	4293      	cmp	r3, r2
 800534e:	d111      	bne.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	3b01      	subs	r3, #1
 800535e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d107      	bne.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800

08005388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0cc      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800539c:	4b68      	ldr	r3, [pc, #416]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d90c      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053aa:	4b65      	ldr	r3, [pc, #404]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0b8      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a58      	ldr	r2, [pc, #352]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f4:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	494d      	ldr	r1, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d044      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b47      	ldr	r3, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d119      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d003      	beq.n	8005446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005442:	2b03      	cmp	r3, #3
 8005444:	d107      	bne.n	8005456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005446:	4b3f      	ldr	r3, [pc, #252]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e06f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005456:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e067      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 0203 	bic.w	r2, r3, #3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4934      	ldr	r1, [pc, #208]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005478:	f7fd f80a 	bl	8002490 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547e:	e00a      	b.n	8005496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005480:	f7fd f806 	bl	8002490 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f241 3288 	movw	r2, #5000	; 0x1388
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e04f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 020c 	and.w	r2, r3, #12
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d1eb      	bne.n	8005480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a8:	4b25      	ldr	r3, [pc, #148]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d20c      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e032      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4916      	ldr	r1, [pc, #88]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800550e:	f000 f821 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8005512:	4602      	mov	r2, r0
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	490a      	ldr	r1, [pc, #40]	; (8005548 <HAL_RCC_ClockConfig+0x1c0>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1c4>)
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_ClockConfig+0x1c8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fc fe60 	bl	80021f4 <HAL_InitTick>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023c00 	.word	0x40023c00
 8005544:	40023800 	.word	0x40023800
 8005548:	0800ef80 	.word	0x0800ef80
 800554c:	200004e8 	.word	0x200004e8
 8005550:	200004ec 	.word	0x200004ec

08005554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b094      	sub	sp, #80	; 0x50
 800555a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	647b      	str	r3, [r7, #68]	; 0x44
 8005560:	2300      	movs	r3, #0
 8005562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005564:	2300      	movs	r3, #0
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556c:	4b79      	ldr	r3, [pc, #484]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	2b08      	cmp	r3, #8
 8005576:	d00d      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0x40>
 8005578:	2b08      	cmp	r3, #8
 800557a:	f200 80e1 	bhi.w	8005740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x34>
 8005582:	2b04      	cmp	r3, #4
 8005584:	d003      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0x3a>
 8005586:	e0db      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005588:	4b73      	ldr	r3, [pc, #460]	; (8005758 <HAL_RCC_GetSysClockFreq+0x204>)
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800558c:	e0db      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800558e:	4b72      	ldr	r3, [pc, #456]	; (8005758 <HAL_RCC_GetSysClockFreq+0x204>)
 8005590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005592:	e0d8      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005594:	4b6f      	ldr	r3, [pc, #444]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800559c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800559e:	4b6d      	ldr	r3, [pc, #436]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d063      	beq.n	8005672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055aa:	4b6a      	ldr	r3, [pc, #424]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	099b      	lsrs	r3, r3, #6
 80055b0:	2200      	movs	r2, #0
 80055b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
 80055be:	2300      	movs	r3, #0
 80055c0:	637b      	str	r3, [r7, #52]	; 0x34
 80055c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055c6:	4622      	mov	r2, r4
 80055c8:	462b      	mov	r3, r5
 80055ca:	f04f 0000 	mov.w	r0, #0
 80055ce:	f04f 0100 	mov.w	r1, #0
 80055d2:	0159      	lsls	r1, r3, #5
 80055d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d8:	0150      	lsls	r0, r2, #5
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4621      	mov	r1, r4
 80055e0:	1a51      	subs	r1, r2, r1
 80055e2:	6139      	str	r1, [r7, #16]
 80055e4:	4629      	mov	r1, r5
 80055e6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f8:	4659      	mov	r1, fp
 80055fa:	018b      	lsls	r3, r1, #6
 80055fc:	4651      	mov	r1, sl
 80055fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005602:	4651      	mov	r1, sl
 8005604:	018a      	lsls	r2, r1, #6
 8005606:	4651      	mov	r1, sl
 8005608:	ebb2 0801 	subs.w	r8, r2, r1
 800560c:	4659      	mov	r1, fp
 800560e:	eb63 0901 	sbc.w	r9, r3, r1
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800561e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005626:	4690      	mov	r8, r2
 8005628:	4699      	mov	r9, r3
 800562a:	4623      	mov	r3, r4
 800562c:	eb18 0303 	adds.w	r3, r8, r3
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	462b      	mov	r3, r5
 8005634:	eb49 0303 	adc.w	r3, r9, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005646:	4629      	mov	r1, r5
 8005648:	028b      	lsls	r3, r1, #10
 800564a:	4621      	mov	r1, r4
 800564c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005650:	4621      	mov	r1, r4
 8005652:	028a      	lsls	r2, r1, #10
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565a:	2200      	movs	r2, #0
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
 800565e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005664:	f7fa fe14 	bl	8000290 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005670:	e058      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005672:	4b38      	ldr	r3, [pc, #224]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	2200      	movs	r2, #0
 800567a:	4618      	mov	r0, r3
 800567c:	4611      	mov	r1, r2
 800567e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	2300      	movs	r3, #0
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
 8005688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	f04f 0000 	mov.w	r0, #0
 8005694:	f04f 0100 	mov.w	r1, #0
 8005698:	0159      	lsls	r1, r3, #5
 800569a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800569e:	0150      	lsls	r0, r2, #5
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4641      	mov	r1, r8
 80056a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80056aa:	4649      	mov	r1, r9
 80056ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056c4:	ebb2 040a 	subs.w	r4, r2, sl
 80056c8:	eb63 050b 	sbc.w	r5, r3, fp
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	00eb      	lsls	r3, r5, #3
 80056d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056da:	00e2      	lsls	r2, r4, #3
 80056dc:	4614      	mov	r4, r2
 80056de:	461d      	mov	r5, r3
 80056e0:	4643      	mov	r3, r8
 80056e2:	18e3      	adds	r3, r4, r3
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	464b      	mov	r3, r9
 80056e8:	eb45 0303 	adc.w	r3, r5, r3
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056fa:	4629      	mov	r1, r5
 80056fc:	028b      	lsls	r3, r1, #10
 80056fe:	4621      	mov	r1, r4
 8005700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005704:	4621      	mov	r1, r4
 8005706:	028a      	lsls	r2, r1, #10
 8005708:	4610      	mov	r0, r2
 800570a:	4619      	mov	r1, r3
 800570c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570e:	2200      	movs	r2, #0
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	61fa      	str	r2, [r7, #28]
 8005714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005718:	f7fa fdba 	bl	8000290 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4613      	mov	r3, r2
 8005722:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	3301      	adds	r3, #1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800573e:	e002      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetSysClockFreq+0x204>)
 8005742:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005748:	4618      	mov	r0, r3
 800574a:	3750      	adds	r7, #80	; 0x50
 800574c:	46bd      	mov	sp, r7
 800574e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800
 8005758:	00f42400 	.word	0x00f42400

0800575c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005760:	4b03      	ldr	r3, [pc, #12]	; (8005770 <HAL_RCC_GetHCLKFreq+0x14>)
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	200004e8 	.word	0x200004e8

08005774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005778:	f7ff fff0 	bl	800575c <HAL_RCC_GetHCLKFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b05      	ldr	r3, [pc, #20]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	0a9b      	lsrs	r3, r3, #10
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	4903      	ldr	r1, [pc, #12]	; (8005798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40023800 	.word	0x40023800
 8005798:	0800ef90 	.word	0x0800ef90

0800579c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	220f      	movs	r2, #15
 80057aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <HAL_RCC_GetClockConfig+0x5c>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0203 	and.w	r2, r3, #3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <HAL_RCC_GetClockConfig+0x5c>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <HAL_RCC_GetClockConfig+0x5c>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCC_GetClockConfig+0x5c>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	08db      	lsrs	r3, r3, #3
 80057d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <HAL_RCC_GetClockConfig+0x60>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0207 	and.w	r2, r3, #7
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	601a      	str	r2, [r3, #0]
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40023c00 	.word	0x40023c00

08005800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e07b      	b.n	800590a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005822:	d009      	beq.n	8005838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	61da      	str	r2, [r3, #28]
 800582a:	e005      	b.n	8005838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fc fbe2 	bl	800201c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	ea42 0103 	orr.w	r1, r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	f003 0104 	and.w	r1, r3, #4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0210 	and.w	r2, r3, #16
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b088      	sub	sp, #32
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_SPI_Transmit+0x22>
 8005930:	2302      	movs	r3, #2
 8005932:	e126      	b.n	8005b82 <HAL_SPI_Transmit+0x270>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800593c:	f7fc fda8 	bl	8002490 <HAL_GetTick>
 8005940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005952:	2302      	movs	r3, #2
 8005954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005956:	e10b      	b.n	8005b70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_SPI_Transmit+0x52>
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005968:	e102      	b.n	8005b70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2203      	movs	r2, #3
 800596e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b0:	d10f      	bne.n	80059d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d007      	beq.n	80059f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f8:	d14b      	bne.n	8005a92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_SPI_Transmit+0xf6>
 8005a02:	8afb      	ldrh	r3, [r7, #22]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d13e      	bne.n	8005a86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	1c9a      	adds	r2, r3, #2
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a2c:	e02b      	b.n	8005a86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d112      	bne.n	8005a62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	881a      	ldrh	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	1c9a      	adds	r2, r3, #2
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a60:	e011      	b.n	8005a86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a62:	f7fc fd15 	bl	8002490 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d803      	bhi.n	8005a7a <HAL_SPI_Transmit+0x168>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d102      	bne.n	8005a80 <HAL_SPI_Transmit+0x16e>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a84:	e074      	b.n	8005b70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1ce      	bne.n	8005a2e <HAL_SPI_Transmit+0x11c>
 8005a90:	e04c      	b.n	8005b2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_SPI_Transmit+0x18e>
 8005a9a:	8afb      	ldrh	r3, [r7, #22]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d140      	bne.n	8005b22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ac6:	e02c      	b.n	8005b22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d113      	bne.n	8005afe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	7812      	ldrb	r2, [r2, #0]
 8005ae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005afc:	e011      	b.n	8005b22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005afe:	f7fc fcc7 	bl	8002490 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d803      	bhi.n	8005b16 <HAL_SPI_Transmit+0x204>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d102      	bne.n	8005b1c <HAL_SPI_Transmit+0x20a>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b20:	e026      	b.n	8005b70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1cd      	bne.n	8005ac8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f8b3 	bl	8005c9c <SPI_EndRxTxTransaction>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e000      	b.n	8005b70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b9c:	f7fc fc78 	bl	8002490 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	1a9b      	subs	r3, r3, r2
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	4413      	add	r3, r2
 8005baa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bac:	f7fc fc70 	bl	8002490 <HAL_GetTick>
 8005bb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bb2:	4b39      	ldr	r3, [pc, #228]	; (8005c98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	015b      	lsls	r3, r3, #5
 8005bb8:	0d1b      	lsrs	r3, r3, #20
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	fb02 f303 	mul.w	r3, r2, r3
 8005bc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bc2:	e054      	b.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d050      	beq.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bcc:	f7fc fc60 	bl	8002490 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d902      	bls.n	8005be2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d13d      	bne.n	8005c5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bfa:	d111      	bne.n	8005c20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c04:	d004      	beq.n	8005c10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0e:	d107      	bne.n	8005c20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c28:	d10f      	bne.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e017      	b.n	8005c8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	bf0c      	ite	eq
 8005c7e:	2301      	moveq	r3, #1
 8005c80:	2300      	movne	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d19b      	bne.n	8005bc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	200004e8 	.word	0x200004e8

08005c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <SPI_EndRxTxTransaction+0x7c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <SPI_EndRxTxTransaction+0x80>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	0d5b      	lsrs	r3, r3, #21
 8005cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc6:	d112      	bne.n	8005cee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff ff5a 	bl	8005b8c <SPI_WaitFlagStateUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e00f      	b.n	8005d0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d0f2      	beq.n	8005cee <SPI_EndRxTxTransaction+0x52>
 8005d08:	e000      	b.n	8005d0c <SPI_EndRxTxTransaction+0x70>
        break;
 8005d0a:	bf00      	nop
  }

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200004e8 	.word	0x200004e8
 8005d1c:	165e9f81 	.word	0x165e9f81

08005d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e041      	b.n	8005db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fc f9e6 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 fd3a 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d001      	beq.n	8005dd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e03c      	b.n	8005e52 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <HAL_TIM_Base_Start+0xa0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d018      	beq.n	8005e1c <HAL_TIM_Base_Start+0x5c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d013      	beq.n	8005e1c <HAL_TIM_Base_Start+0x5c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1a      	ldr	r2, [pc, #104]	; (8005e64 <HAL_TIM_Base_Start+0xa4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00e      	beq.n	8005e1c <HAL_TIM_Base_Start+0x5c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <HAL_TIM_Base_Start+0xa8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d009      	beq.n	8005e1c <HAL_TIM_Base_Start+0x5c>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <HAL_TIM_Base_Start+0xac>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIM_Base_Start+0x5c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <HAL_TIM_Base_Start+0xb0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d111      	bne.n	8005e40 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d010      	beq.n	8005e50 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3e:	e007      	b.n	8005e50 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40014000 	.word	0x40014000

08005e74 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6a1a      	ldr	r2, [r3, #32]
 8005e82:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10f      	bne.n	8005eac <HAL_TIM_Base_Stop+0x38>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	f240 4344 	movw	r3, #1092	; 0x444
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d107      	bne.n	8005eac <HAL_TIM_Base_Stop+0x38>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d001      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e044      	b.n	8005f66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0201 	orr.w	r2, r2, #1
 8005ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <HAL_TIM_Base_Start_IT+0xb0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d018      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x6c>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f06:	d013      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x6c>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00e      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x6c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a19      	ldr	r2, [pc, #100]	; (8005f7c <HAL_TIM_Base_Start_IT+0xb8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d009      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x6c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <HAL_TIM_Base_Start_IT+0xbc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x6c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <HAL_TIM_Base_Start_IT+0xc0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d111      	bne.n	8005f54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b06      	cmp	r3, #6
 8005f40:	d010      	beq.n	8005f64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f52:	e007      	b.n	8005f64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40014000 	.word	0x40014000

08005f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e041      	b.n	800601e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f839 	bl	8006026 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f000 fc06 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <HAL_TIM_PWM_Start+0x24>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	bf14      	ite	ne
 8006058:	2301      	movne	r3, #1
 800605a:	2300      	moveq	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e022      	b.n	80060a6 <HAL_TIM_PWM_Start+0x6a>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b04      	cmp	r3, #4
 8006064:	d109      	bne.n	800607a <HAL_TIM_PWM_Start+0x3e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	bf14      	ite	ne
 8006072:	2301      	movne	r3, #1
 8006074:	2300      	moveq	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	e015      	b.n	80060a6 <HAL_TIM_PWM_Start+0x6a>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d109      	bne.n	8006094 <HAL_TIM_PWM_Start+0x58>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	e008      	b.n	80060a6 <HAL_TIM_PWM_Start+0x6a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e068      	b.n	8006180 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <HAL_TIM_PWM_Start+0x82>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060bc:	e013      	b.n	80060e6 <HAL_TIM_PWM_Start+0xaa>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d104      	bne.n	80060ce <HAL_TIM_PWM_Start+0x92>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060cc:	e00b      	b.n	80060e6 <HAL_TIM_PWM_Start+0xaa>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d104      	bne.n	80060de <HAL_TIM_PWM_Start+0xa2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060dc:	e003      	b.n	80060e6 <HAL_TIM_PWM_Start+0xaa>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2201      	movs	r2, #1
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fe18 	bl	8006d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a23      	ldr	r2, [pc, #140]	; (8006188 <HAL_TIM_PWM_Start+0x14c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d107      	bne.n	800610e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800610c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_TIM_PWM_Start+0x14c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d018      	beq.n	800614a <HAL_TIM_PWM_Start+0x10e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006120:	d013      	beq.n	800614a <HAL_TIM_PWM_Start+0x10e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a19      	ldr	r2, [pc, #100]	; (800618c <HAL_TIM_PWM_Start+0x150>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00e      	beq.n	800614a <HAL_TIM_PWM_Start+0x10e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a17      	ldr	r2, [pc, #92]	; (8006190 <HAL_TIM_PWM_Start+0x154>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d009      	beq.n	800614a <HAL_TIM_PWM_Start+0x10e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a16      	ldr	r2, [pc, #88]	; (8006194 <HAL_TIM_PWM_Start+0x158>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_TIM_PWM_Start+0x10e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a14      	ldr	r2, [pc, #80]	; (8006198 <HAL_TIM_PWM_Start+0x15c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d111      	bne.n	800616e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b06      	cmp	r3, #6
 800615a:	d010      	beq.n	800617e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616c:	e007      	b.n	800617e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0201 	orr.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40010000 	.word	0x40010000
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40000c00 	.word	0x40000c00
 8006198:	40014000 	.word	0x40014000

0800619c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2200      	movs	r2, #0
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fdb8 	bl	8006d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a29      	ldr	r2, [pc, #164]	; (8006260 <HAL_TIM_PWM_Stop+0xc4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d117      	bne.n	80061ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6a1a      	ldr	r2, [r3, #32]
 80061c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10f      	bne.n	80061ee <HAL_TIM_PWM_Stop+0x52>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a1a      	ldr	r2, [r3, #32]
 80061d4:	f240 4344 	movw	r3, #1092	; 0x444
 80061d8:	4013      	ands	r3, r2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d107      	bne.n	80061ee <HAL_TIM_PWM_Stop+0x52>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10f      	bne.n	800621e <HAL_TIM_PWM_Stop+0x82>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a1a      	ldr	r2, [r3, #32]
 8006204:	f240 4344 	movw	r3, #1092	; 0x444
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d107      	bne.n	800621e <HAL_TIM_PWM_Stop+0x82>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Stop+0x92>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800622c:	e013      	b.n	8006256 <HAL_TIM_PWM_Stop+0xba>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b04      	cmp	r3, #4
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Stop+0xa2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623c:	e00b      	b.n	8006256 <HAL_TIM_PWM_Stop+0xba>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b08      	cmp	r3, #8
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Stop+0xb2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800624c:	e003      	b.n	8006256 <HAL_TIM_PWM_Stop+0xba>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40010000 	.word	0x40010000

08006264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d122      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d11b      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0202 	mvn.w	r2, #2
 8006290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa77 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa69 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fa7a 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d122      	bne.n	8006314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d11b      	bne.n	8006314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0204 	mvn.w	r2, #4
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa4d 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fa3f 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fa50 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b08      	cmp	r3, #8
 8006320:	d122      	bne.n	8006368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b08      	cmp	r3, #8
 800632e:	d11b      	bne.n	8006368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0208 	mvn.w	r2, #8
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa23 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 8006354:	e005      	b.n	8006362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa15 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fa26 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b10      	cmp	r3, #16
 8006374:	d122      	bne.n	80063bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b10      	cmp	r3, #16
 8006382:	d11b      	bne.n	80063bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0210 	mvn.w	r2, #16
 800638c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2208      	movs	r2, #8
 8006392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f9f9 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 80063a8:	e005      	b.n	80063b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f9eb 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f9fc 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10e      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d107      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0201 	mvn.w	r2, #1
 80063e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fb fd8e 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f2:	2b80      	cmp	r3, #128	; 0x80
 80063f4:	d10e      	bne.n	8006414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b80      	cmp	r3, #128	; 0x80
 8006402:	d107      	bne.n	8006414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800640c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fd26 	bl	8006e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d10e      	bne.n	8006440 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d107      	bne.n	8006440 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f9c1 	bl	80067c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b20      	cmp	r3, #32
 800644c:	d10e      	bne.n	800646c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b20      	cmp	r3, #32
 800645a:	d107      	bne.n	800646c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0220 	mvn.w	r2, #32
 8006464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fcf0 	bl	8006e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800648e:	2302      	movs	r3, #2
 8006490:	e0ae      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	f200 809f 	bhi.w	80065e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080065e1 	.word	0x080065e1
 80064b0:	080065e1 	.word	0x080065e1
 80064b4:	080065e1 	.word	0x080065e1
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	080065e1 	.word	0x080065e1
 80064c0:	080065e1 	.word	0x080065e1
 80064c4:	080065e1 	.word	0x080065e1
 80064c8:	0800655f 	.word	0x0800655f
 80064cc:	080065e1 	.word	0x080065e1
 80064d0:	080065e1 	.word	0x080065e1
 80064d4:	080065e1 	.word	0x080065e1
 80064d8:	0800659f 	.word	0x0800659f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f9f8 	bl	80068d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0204 	bic.w	r2, r2, #4
 8006506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	619a      	str	r2, [r3, #24]
      break;
 800651a:	e064      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fa3e 	bl	80069a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6999      	ldr	r1, [r3, #24]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	619a      	str	r2, [r3, #24]
      break;
 800655c:	e043      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fa89 	bl	8006a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0208 	orr.w	r2, r2, #8
 8006578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0204 	bic.w	r2, r2, #4
 8006588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	61da      	str	r2, [r3, #28]
      break;
 800659c:	e023      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fad3 	bl	8006b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69d9      	ldr	r1, [r3, #28]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	021a      	lsls	r2, r3, #8
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	61da      	str	r2, [r3, #28]
      break;
 80065de:	e002      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_TIM_ConfigClockSource+0x1c>
 8006610:	2302      	movs	r3, #2
 8006612:	e0b4      	b.n	800677e <HAL_TIM_ConfigClockSource+0x186>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800663a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664c:	d03e      	beq.n	80066cc <HAL_TIM_ConfigClockSource+0xd4>
 800664e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006652:	f200 8087 	bhi.w	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	f000 8086 	beq.w	800676a <HAL_TIM_ConfigClockSource+0x172>
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006662:	d87f      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006664:	2b70      	cmp	r3, #112	; 0x70
 8006666:	d01a      	beq.n	800669e <HAL_TIM_ConfigClockSource+0xa6>
 8006668:	2b70      	cmp	r3, #112	; 0x70
 800666a:	d87b      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 800666c:	2b60      	cmp	r3, #96	; 0x60
 800666e:	d050      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x11a>
 8006670:	2b60      	cmp	r3, #96	; 0x60
 8006672:	d877      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006674:	2b50      	cmp	r3, #80	; 0x50
 8006676:	d03c      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0xfa>
 8006678:	2b50      	cmp	r3, #80	; 0x50
 800667a:	d873      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d058      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x13a>
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d86f      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b30      	cmp	r3, #48	; 0x30
 8006686:	d064      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x15a>
 8006688:	2b30      	cmp	r3, #48	; 0x30
 800668a:	d86b      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b20      	cmp	r3, #32
 800668e:	d060      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x15a>
 8006690:	2b20      	cmp	r3, #32
 8006692:	d867      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d05c      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x15a>
 8006698:	2b10      	cmp	r3, #16
 800669a:	d05a      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x15a>
 800669c:	e062      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6899      	ldr	r1, [r3, #8]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f000 fb19 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	609a      	str	r2, [r3, #8]
      break;
 80066ca:	e04f      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	6899      	ldr	r1, [r3, #8]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f000 fb02 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ee:	609a      	str	r2, [r3, #8]
      break;
 80066f0:	e03c      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	461a      	mov	r2, r3
 8006700:	f000 fa76 	bl	8006bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2150      	movs	r1, #80	; 0x50
 800670a:	4618      	mov	r0, r3
 800670c:	f000 facf 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006710:	e02c      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	461a      	mov	r2, r3
 8006720:	f000 fa95 	bl	8006c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2160      	movs	r1, #96	; 0x60
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fabf 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006730:	e01c      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	461a      	mov	r2, r3
 8006740:	f000 fa56 	bl	8006bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	4618      	mov	r0, r3
 800674c:	f000 faaf 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006750:	e00c      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f000 faa6 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006762:	e003      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
      break;
 8006768:	e000      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800676a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a34      	ldr	r2, [pc, #208]	; (80068bc <TIM_Base_SetConfig+0xe4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00f      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f6:	d00b      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a31      	ldr	r2, [pc, #196]	; (80068c0 <TIM_Base_SetConfig+0xe8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a30      	ldr	r2, [pc, #192]	; (80068c4 <TIM_Base_SetConfig+0xec>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <TIM_Base_SetConfig+0xf0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d108      	bne.n	8006822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a25      	ldr	r2, [pc, #148]	; (80068bc <TIM_Base_SetConfig+0xe4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01b      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006830:	d017      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a22      	ldr	r2, [pc, #136]	; (80068c0 <TIM_Base_SetConfig+0xe8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a21      	ldr	r2, [pc, #132]	; (80068c4 <TIM_Base_SetConfig+0xec>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <TIM_Base_SetConfig+0xf0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <TIM_Base_SetConfig+0xf4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <TIM_Base_SetConfig+0xf8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <TIM_Base_SetConfig+0xfc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a08      	ldr	r2, [pc, #32]	; (80068bc <TIM_Base_SetConfig+0xe4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d103      	bne.n	80068a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	615a      	str	r2, [r3, #20]
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40000c00 	.word	0x40000c00
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800

080068d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f023 0201 	bic.w	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 0302 	bic.w	r3, r3, #2
 8006920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <TIM_OC1_SetConfig+0xc8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d10c      	bne.n	800694e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0308 	bic.w	r3, r3, #8
 800693a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 0304 	bic.w	r3, r3, #4
 800694c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <TIM_OC1_SetConfig+0xc8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d111      	bne.n	800697a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800695c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	40010000 	.word	0x40010000

080069a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f023 0210 	bic.w	r2, r3, #16
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0320 	bic.w	r3, r3, #32
 80069ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1e      	ldr	r2, [pc, #120]	; (8006a78 <TIM_OC2_SetConfig+0xd4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d10d      	bne.n	8006a20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <TIM_OC2_SetConfig+0xd4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d113      	bne.n	8006a50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40010000 	.word	0x40010000

08006a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <TIM_OC3_SetConfig+0xd0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10d      	bne.n	8006af6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <TIM_OC3_SetConfig+0xd0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d113      	bne.n	8006b26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	621a      	str	r2, [r3, #32]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	40010000 	.word	0x40010000

08006b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	031b      	lsls	r3, r3, #12
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a10      	ldr	r2, [pc, #64]	; (8006bec <TIM_OC4_SetConfig+0x9c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d109      	bne.n	8006bc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	019b      	lsls	r3, r3, #6
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40010000 	.word	0x40010000

08006bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 030a 	bic.w	r3, r3, #10
 8006c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0210 	bic.w	r2, r3, #16
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f043 0307 	orr.w	r3, r3, #7
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	021a      	lsls	r2, r3, #8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2201      	movs	r2, #1
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	43db      	mvns	r3, r3
 8006d46:	401a      	ands	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1a      	ldr	r2, [r3, #32]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e050      	b.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd4:	d013      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a18      	ldr	r2, [pc, #96]	; (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d009      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a13      	ldr	r2, [pc, #76]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d10c      	bne.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40000400 	.word	0x40000400
 8006e40:	40000800 	.word	0x40000800
 8006e44:	40000c00 	.word	0x40000c00
 8006e48:	40014000 	.word	0x40014000

08006e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e74:	b084      	sub	sp, #16
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	f107 001c 	add.w	r0, r7, #28
 8006e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d122      	bne.n	8006ed2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d105      	bne.n	8006ec6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fbee 	bl	80086a8 <USB_CoreReset>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73fb      	strb	r3, [r7, #15]
 8006ed0:	e01a      	b.n	8006f08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fbe2 	bl	80086a8 <USB_CoreReset>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8006efa:	e005      	b.n	8006f08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d10b      	bne.n	8006f26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f043 0206 	orr.w	r2, r3, #6
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f32:	b004      	add	sp, #16
 8006f34:	4770      	bx	lr
	...

08006f38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d165      	bne.n	8007018 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4a41      	ldr	r2, [pc, #260]	; (8007054 <USB_SetTurnaroundTime+0x11c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d906      	bls.n	8006f62 <USB_SetTurnaroundTime+0x2a>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a40      	ldr	r2, [pc, #256]	; (8007058 <USB_SetTurnaroundTime+0x120>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d202      	bcs.n	8006f62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f5c:	230f      	movs	r3, #15
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e062      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <USB_SetTurnaroundTime+0x120>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d306      	bcc.n	8006f78 <USB_SetTurnaroundTime+0x40>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a3b      	ldr	r2, [pc, #236]	; (800705c <USB_SetTurnaroundTime+0x124>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d202      	bcs.n	8006f78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f72:	230e      	movs	r3, #14
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e057      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a38      	ldr	r2, [pc, #224]	; (800705c <USB_SetTurnaroundTime+0x124>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d306      	bcc.n	8006f8e <USB_SetTurnaroundTime+0x56>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a37      	ldr	r2, [pc, #220]	; (8007060 <USB_SetTurnaroundTime+0x128>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d202      	bcs.n	8006f8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f88:	230d      	movs	r3, #13
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e04c      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a33      	ldr	r2, [pc, #204]	; (8007060 <USB_SetTurnaroundTime+0x128>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d306      	bcc.n	8006fa4 <USB_SetTurnaroundTime+0x6c>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4a32      	ldr	r2, [pc, #200]	; (8007064 <USB_SetTurnaroundTime+0x12c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d802      	bhi.n	8006fa4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e041      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a2f      	ldr	r2, [pc, #188]	; (8007064 <USB_SetTurnaroundTime+0x12c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d906      	bls.n	8006fba <USB_SetTurnaroundTime+0x82>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4a2e      	ldr	r2, [pc, #184]	; (8007068 <USB_SetTurnaroundTime+0x130>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d802      	bhi.n	8006fba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fb4:	230b      	movs	r3, #11
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e036      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <USB_SetTurnaroundTime+0x130>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d906      	bls.n	8006fd0 <USB_SetTurnaroundTime+0x98>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4a29      	ldr	r2, [pc, #164]	; (800706c <USB_SetTurnaroundTime+0x134>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d802      	bhi.n	8006fd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fca:	230a      	movs	r3, #10
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e02b      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4a26      	ldr	r2, [pc, #152]	; (800706c <USB_SetTurnaroundTime+0x134>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d906      	bls.n	8006fe6 <USB_SetTurnaroundTime+0xae>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4a25      	ldr	r2, [pc, #148]	; (8007070 <USB_SetTurnaroundTime+0x138>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d202      	bcs.n	8006fe6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fe0:	2309      	movs	r3, #9
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	e020      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4a21      	ldr	r2, [pc, #132]	; (8007070 <USB_SetTurnaroundTime+0x138>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d306      	bcc.n	8006ffc <USB_SetTurnaroundTime+0xc4>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4a20      	ldr	r2, [pc, #128]	; (8007074 <USB_SetTurnaroundTime+0x13c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d802      	bhi.n	8006ffc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	e015      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <USB_SetTurnaroundTime+0x13c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d906      	bls.n	8007012 <USB_SetTurnaroundTime+0xda>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <USB_SetTurnaroundTime+0x140>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d202      	bcs.n	8007012 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800700c:	2307      	movs	r3, #7
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e00a      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007012:	2306      	movs	r3, #6
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e007      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800701e:	2309      	movs	r3, #9
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e001      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007024:	2309      	movs	r3, #9
 8007026:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007040:	431a      	orrs	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	00d8acbf 	.word	0x00d8acbf
 8007058:	00e4e1c0 	.word	0x00e4e1c0
 800705c:	00f42400 	.word	0x00f42400
 8007060:	01067380 	.word	0x01067380
 8007064:	011a499f 	.word	0x011a499f
 8007068:	01312cff 	.word	0x01312cff
 800706c:	014ca43f 	.word	0x014ca43f
 8007070:	016e3600 	.word	0x016e3600
 8007074:	01a6ab1f 	.word	0x01a6ab1f
 8007078:	01e84800 	.word	0x01e84800

0800707c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f043 0201 	orr.w	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f023 0201 	bic.w	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d115      	bne.n	800710e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070ee:	2001      	movs	r0, #1
 80070f0:	f7fb f9da 	bl	80024a8 <HAL_Delay>
      ms++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fa45 	bl	800858a <USB_GetMode>
 8007100:	4603      	mov	r3, r0
 8007102:	2b01      	cmp	r3, #1
 8007104:	d01e      	beq.n	8007144 <USB_SetCurrentMode+0x84>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b31      	cmp	r3, #49	; 0x31
 800710a:	d9f0      	bls.n	80070ee <USB_SetCurrentMode+0x2e>
 800710c:	e01a      	b.n	8007144 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d115      	bne.n	8007140 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007120:	2001      	movs	r0, #1
 8007122:	f7fb f9c1 	bl	80024a8 <HAL_Delay>
      ms++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 fa2c 	bl	800858a <USB_GetMode>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <USB_SetCurrentMode+0x84>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b31      	cmp	r3, #49	; 0x31
 800713c:	d9f0      	bls.n	8007120 <USB_SetCurrentMode+0x60>
 800713e:	e001      	b.n	8007144 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e005      	b.n	8007150 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b32      	cmp	r3, #50	; 0x32
 8007148:	d101      	bne.n	800714e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007158:	b084      	sub	sp, #16
 800715a:	b580      	push	{r7, lr}
 800715c:	b086      	sub	sp, #24
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	e009      	b.n	800718c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3340      	adds	r3, #64	; 0x40
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	2200      	movs	r2, #0
 8007184:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3301      	adds	r3, #1
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b0e      	cmp	r3, #14
 8007190:	d9f2      	bls.n	8007178 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d11c      	bne.n	80071d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a6:	f043 0302 	orr.w	r3, r3, #2
 80071aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
 80071d0:	e00b      	b.n	80071ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071f0:	461a      	mov	r2, r3
 80071f2:	2300      	movs	r3, #0
 80071f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fc:	4619      	mov	r1, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007204:	461a      	mov	r2, r3
 8007206:	680b      	ldr	r3, [r1, #0]
 8007208:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	2b01      	cmp	r3, #1
 800720e:	d10c      	bne.n	800722a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	2b00      	cmp	r3, #0
 8007214:	d104      	bne.n	8007220 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007216:	2100      	movs	r1, #0
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f965 	bl	80074e8 <USB_SetDevSpeed>
 800721e:	e008      	b.n	8007232 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007220:	2101      	movs	r1, #1
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f960 	bl	80074e8 <USB_SetDevSpeed>
 8007228:	e003      	b.n	8007232 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800722a:	2103      	movs	r1, #3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f95b 	bl	80074e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007232:	2110      	movs	r1, #16
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f8f3 	bl	8007420 <USB_FlushTxFifo>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f91f 	bl	8007488 <USB_FlushRxFifo>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	461a      	mov	r2, r3
 800725c:	2300      	movs	r3, #0
 800725e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007266:	461a      	mov	r2, r3
 8007268:	2300      	movs	r3, #0
 800726a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007272:	461a      	mov	r2, r3
 8007274:	2300      	movs	r3, #0
 8007276:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007278:	2300      	movs	r3, #0
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	e043      	b.n	8007306 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007294:	d118      	bne.n	80072c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	461a      	mov	r2, r3
 80072aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	e013      	b.n	80072da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	461a      	mov	r2, r3
 80072c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	e008      	b.n	80072da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d4:	461a      	mov	r2, r3
 80072d6:	2300      	movs	r3, #0
 80072d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	461a      	mov	r2, r3
 80072e8:	2300      	movs	r3, #0
 80072ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f8:	461a      	mov	r2, r3
 80072fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	3301      	adds	r3, #1
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	429a      	cmp	r2, r3
 800730c:	d3b7      	bcc.n	800727e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	e043      	b.n	800739c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800732a:	d118      	bne.n	800735e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733e:	461a      	mov	r2, r3
 8007340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e013      	b.n	8007370 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007354:	461a      	mov	r2, r3
 8007356:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	e008      	b.n	8007370 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736a:	461a      	mov	r2, r3
 800736c:	2300      	movs	r3, #0
 800736e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	461a      	mov	r2, r3
 800737e:	2300      	movs	r3, #0
 8007380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	461a      	mov	r2, r3
 8007390:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007394:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3301      	adds	r3, #1
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d3b7      	bcc.n	8007314 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d105      	bne.n	80073d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f043 0210 	orr.w	r2, r3, #16
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <USB_DevInit+0x2c4>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d005      	beq.n	80073f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f043 0208 	orr.w	r2, r3, #8
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d107      	bne.n	800740c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007404:	f043 0304 	orr.w	r3, r3, #4
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007418:	b004      	add	sp, #16
 800741a:	4770      	bx	lr
 800741c:	803c3800 	.word	0x803c3800

08007420 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3301      	adds	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4a13      	ldr	r2, [pc, #76]	; (8007484 <USB_FlushTxFifo+0x64>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d901      	bls.n	8007440 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e01b      	b.n	8007478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	daf2      	bge.n	800742e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	019b      	lsls	r3, r3, #6
 8007450:	f043 0220 	orr.w	r2, r3, #32
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a08      	ldr	r2, [pc, #32]	; (8007484 <USB_FlushTxFifo+0x64>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d901      	bls.n	800746a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e006      	b.n	8007478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b20      	cmp	r3, #32
 8007474:	d0f0      	beq.n	8007458 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	00030d40 	.word	0x00030d40

08007488 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4a11      	ldr	r2, [pc, #68]	; (80074e4 <USB_FlushRxFifo+0x5c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d901      	bls.n	80074a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e018      	b.n	80074d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	daf2      	bge.n	8007494 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2210      	movs	r2, #16
 80074b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a08      	ldr	r2, [pc, #32]	; (80074e4 <USB_FlushRxFifo+0x5c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d901      	bls.n	80074ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e006      	b.n	80074d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d0f0      	beq.n	80074b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	00030d40 	.word	0x00030d40

080074e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007508:	4313      	orrs	r3, r2
 800750a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800751a:	b480      	push	{r7}
 800751c:	b087      	sub	sp, #28
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 0306 	and.w	r3, r3, #6
 8007532:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
 800753e:	e00a      	b.n	8007556 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d002      	beq.n	800754c <USB_GetDevSpeed+0x32>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b06      	cmp	r3, #6
 800754a:	d102      	bne.n	8007552 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800754c:	2302      	movs	r3, #2
 800754e:	75fb      	strb	r3, [r7, #23]
 8007550:	e001      	b.n	8007556 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007552:	230f      	movs	r3, #15
 8007554:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
}
 8007558:	4618      	mov	r0, r3
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d13a      	bne.n	80075f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007586:	69da      	ldr	r2, [r3, #28]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	2101      	movs	r1, #1
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	b29b      	uxth	r3, r3
 8007598:	68f9      	ldr	r1, [r7, #12]
 800759a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800759e:	4313      	orrs	r3, r2
 80075a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d155      	bne.n	8007664 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	791b      	ldrb	r3, [r3, #4]
 80075d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	059b      	lsls	r3, r3, #22
 80075da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075dc:	4313      	orrs	r3, r2
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	e036      	b.n	8007664 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	2101      	movs	r1, #1
 8007608:	fa01 f303 	lsl.w	r3, r1, r3
 800760c:	041b      	lsls	r3, r3, #16
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007614:	4313      	orrs	r3, r2
 8007616:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11a      	bne.n	8007664 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	791b      	ldrb	r3, [r3, #4]
 8007648:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800764a:	430b      	orrs	r3, r1
 800764c:	4313      	orrs	r3, r2
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	440a      	add	r2, r1
 8007656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800765a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007662:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d161      	bne.n	8007754 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076a6:	d11f      	bne.n	80076e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	2101      	movs	r1, #1
 80076fa:	fa01 f303 	lsl.w	r3, r1, r3
 80076fe:	b29b      	uxth	r3, r3
 8007700:	43db      	mvns	r3, r3
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007708:	4013      	ands	r3, r2
 800770a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	2101      	movs	r1, #1
 800771e:	fa01 f303 	lsl.w	r3, r1, r3
 8007722:	b29b      	uxth	r3, r3
 8007724:	43db      	mvns	r3, r3
 8007726:	68f9      	ldr	r1, [r7, #12]
 8007728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800772c:	4013      	ands	r3, r2
 800772e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	0159      	lsls	r1, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	440b      	add	r3, r1
 8007746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774a:	4619      	mov	r1, r3
 800774c:	4b35      	ldr	r3, [pc, #212]	; (8007824 <USB_DeactivateEndpoint+0x1b0>)
 800774e:	4013      	ands	r3, r2
 8007750:	600b      	str	r3, [r1, #0]
 8007752:	e060      	b.n	8007816 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800776a:	d11f      	bne.n	80077ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007786:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800778a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 030f 	and.w	r3, r3, #15
 80077bc:	2101      	movs	r1, #1
 80077be:	fa01 f303 	lsl.w	r3, r1, r3
 80077c2:	041b      	lsls	r3, r3, #16
 80077c4:	43db      	mvns	r3, r3
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077cc:	4013      	ands	r3, r2
 80077ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	2101      	movs	r1, #1
 80077e2:	fa01 f303 	lsl.w	r3, r1, r3
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	43db      	mvns	r3, r3
 80077ea:	68f9      	ldr	r1, [r7, #12]
 80077ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077f0:	4013      	ands	r3, r2
 80077f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	0159      	lsls	r1, r3, #5
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	440b      	add	r3, r1
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	4619      	mov	r1, r3
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <USB_DeactivateEndpoint+0x1b4>)
 8007812:	4013      	ands	r3, r2
 8007814:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	ec337800 	.word	0xec337800
 8007828:	eff37800 	.word	0xeff37800

0800782c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	; 0x28
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	2b01      	cmp	r3, #1
 800784a:	f040 815c 	bne.w	8007b06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d132      	bne.n	80078bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	69fa      	ldr	r2, [r7, #28]
 800786a:	440a      	add	r2, r1
 800786c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007870:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007874:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	440a      	add	r2, r1
 8007890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b4:	0cdb      	lsrs	r3, r3, #19
 80078b6:	04db      	lsls	r3, r3, #19
 80078b8:	6113      	str	r3, [r2, #16]
 80078ba:	e074      	b.n	80079a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	0151      	lsls	r1, r2, #5
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	440a      	add	r2, r1
 80078d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d6:	0cdb      	lsrs	r3, r3, #19
 80078d8:	04db      	lsls	r3, r3, #19
 80078da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6999      	ldr	r1, [r3, #24]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	440b      	add	r3, r1
 8007918:	1e59      	subs	r1, r3, #1
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007922:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007924:	4b9d      	ldr	r3, [pc, #628]	; (8007b9c <USB_EPStartXfer+0x370>)
 8007926:	400b      	ands	r3, r1
 8007928:	69b9      	ldr	r1, [r7, #24]
 800792a:	0148      	lsls	r0, r1, #5
 800792c:	69f9      	ldr	r1, [r7, #28]
 800792e:	4401      	add	r1, r0
 8007930:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007934:	4313      	orrs	r3, r2
 8007936:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007944:	691a      	ldr	r2, [r3, #16]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800794e:	69b9      	ldr	r1, [r7, #24]
 8007950:	0148      	lsls	r0, r1, #5
 8007952:	69f9      	ldr	r1, [r7, #28]
 8007954:	4401      	add	r1, r0
 8007956:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800795a:	4313      	orrs	r3, r2
 800795c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	791b      	ldrb	r3, [r3, #4]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d11f      	bne.n	80079a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4413      	add	r3, r2
 800796e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	0151      	lsls	r1, r2, #5
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	440a      	add	r2, r1
 800797c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007980:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007984:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	440a      	add	r2, r1
 800799c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d14b      	bne.n	8007a44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	461a      	mov	r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	791b      	ldrb	r3, [r3, #4]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d128      	bne.n	8007a22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d110      	bne.n	8007a02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	0151      	lsls	r1, r2, #5
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	440a      	add	r2, r1
 80079f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	e00f      	b.n	8007a22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	0151      	lsls	r1, r2, #5
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	440a      	add	r2, r1
 8007a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	69fa      	ldr	r2, [r7, #28]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e133      	b.n	8007cac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d015      	beq.n	8007a98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 811b 	beq.w	8007cac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	2101      	movs	r1, #1
 8007a88:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a92:	4313      	orrs	r3, r2
 8007a94:	634b      	str	r3, [r1, #52]	; 0x34
 8007a96:	e109      	b.n	8007cac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d110      	bne.n	8007aca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	e00f      	b.n	8007aea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	0151      	lsls	r1, r2, #5
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	440a      	add	r2, r1
 8007ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	6919      	ldr	r1, [r3, #16]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	781a      	ldrb	r2, [r3, #0]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	b298      	uxth	r0, r3
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4603      	mov	r3, r0
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 fade 	bl	80080c0 <USB_WritePacket>
 8007b04:	e0d2      	b.n	8007cac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b20:	0cdb      	lsrs	r3, r3, #19
 8007b22:	04db      	lsls	r3, r3, #19
 8007b24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d126      	bne.n	8007ba0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b68:	69b9      	ldr	r1, [r7, #24]
 8007b6a:	0148      	lsls	r0, r1, #5
 8007b6c:	69f9      	ldr	r1, [r7, #28]
 8007b6e:	4401      	add	r1, r0
 8007b70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b74:	4313      	orrs	r3, r2
 8007b76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	0151      	lsls	r1, r2, #5
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b96:	6113      	str	r3, [r2, #16]
 8007b98:	e03a      	b.n	8007c10 <USB_EPStartXfer+0x3e4>
 8007b9a:	bf00      	nop
 8007b9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	699a      	ldr	r2, [r3, #24]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	1e5a      	subs	r2, r3, #1
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	8afa      	ldrh	r2, [r7, #22]
 8007bbc:	fb03 f202 	mul.w	r2, r3, r2
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	8afb      	ldrh	r3, [r7, #22]
 8007bd4:	04d9      	lsls	r1, r3, #19
 8007bd6:	4b38      	ldr	r3, [pc, #224]	; (8007cb8 <USB_EPStartXfer+0x48c>)
 8007bd8:	400b      	ands	r3, r1
 8007bda:	69b9      	ldr	r1, [r7, #24]
 8007bdc:	0148      	lsls	r0, r1, #5
 8007bde:	69f9      	ldr	r1, [r7, #28]
 8007be0:	4401      	add	r1, r0
 8007be2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007be6:	4313      	orrs	r3, r2
 8007be8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c00:	69b9      	ldr	r1, [r7, #24]
 8007c02:	0148      	lsls	r0, r1, #5
 8007c04:	69f9      	ldr	r1, [r7, #28]
 8007c06:	4401      	add	r1, r0
 8007c08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d10d      	bne.n	8007c32 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	6919      	ldr	r1, [r3, #16]
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	460a      	mov	r2, r1
 8007c30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	791b      	ldrb	r3, [r3, #4]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d128      	bne.n	8007c8c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d110      	bne.n	8007c6c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	e00f      	b.n	8007c8c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	0151      	lsls	r1, r2, #5
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007caa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3720      	adds	r7, #32
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	1ff80000 	.word	0x1ff80000

08007cbc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	f040 80ce 	bne.w	8007e7a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d132      	bne.n	8007d4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	0151      	lsls	r1, r2, #5
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	440a      	add	r2, r1
 8007d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d44:	0cdb      	lsrs	r3, r3, #19
 8007d46:	04db      	lsls	r3, r3, #19
 8007d48:	6113      	str	r3, [r2, #16]
 8007d4a:	e04e      	b.n	8007dea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d66:	0cdb      	lsrs	r3, r3, #19
 8007d68:	04db      	lsls	r3, r3, #19
 8007d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d8e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	699a      	ldr	r2, [r3, #24]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d903      	bls.n	8007da4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dda:	6939      	ldr	r1, [r7, #16]
 8007ddc:	0148      	lsls	r0, r1, #5
 8007dde:	6979      	ldr	r1, [r7, #20]
 8007de0:	4401      	add	r1, r0
 8007de2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007de6:	4313      	orrs	r3, r2
 8007de8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d11e      	bne.n	8007e2e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e04:	461a      	mov	r2, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	0151      	lsls	r1, r2, #5
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	440a      	add	r2, r1
 8007e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e2a:	6013      	str	r3, [r2, #0]
 8007e2c:	e097      	b.n	8007f5e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e4c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8083 	beq.w	8007f5e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	2101      	movs	r1, #1
 8007e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6e:	6979      	ldr	r1, [r7, #20]
 8007e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e74:	4313      	orrs	r3, r2
 8007e76:	634b      	str	r3, [r1, #52]	; 0x34
 8007e78:	e071      	b.n	8007f5e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	0151      	lsls	r1, r2, #5
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	440a      	add	r2, r1
 8007e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e94:	0cdb      	lsrs	r3, r3, #19
 8007e96:	04db      	lsls	r3, r3, #19
 8007e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ebc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f0c:	6939      	ldr	r1, [r7, #16]
 8007f0e:	0148      	lsls	r0, r1, #5
 8007f10:	6979      	ldr	r1, [r7, #20]
 8007f12:	4401      	add	r1, r0
 8007f14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d10d      	bne.n	8007f3e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d009      	beq.n	8007f3e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6919      	ldr	r1, [r3, #16]
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3a:	460a      	mov	r2, r1
 8007f3c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	785b      	ldrb	r3, [r3, #1]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d14a      	bne.n	8008020 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fa2:	f040 8086 	bne.w	80080b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	7812      	ldrb	r2, [r2, #0]
 8007fba:	0151      	lsls	r1, r2, #5
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	440a      	add	r2, r1
 8007fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fc8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d902      	bls.n	8008004 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	75fb      	strb	r3, [r7, #23]
          break;
 8008002:	e056      	b.n	80080b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800801c:	d0e7      	beq.n	8007fee <USB_EPStopXfer+0x82>
 800801e:	e048      	b.n	80080b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008038:	d13b      	bne.n	80080b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	7812      	ldrb	r2, [r2, #0]
 800804e:	0151      	lsls	r1, r2, #5
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	440a      	add	r2, r1
 8008054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008058:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800805c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	0151      	lsls	r1, r2, #5
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	440a      	add	r2, r1
 8008078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800807c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008080:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f242 7210 	movw	r2, #10000	; 0x2710
 800808e:	4293      	cmp	r3, r2
 8008090:	d902      	bls.n	8008098 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	75fb      	strb	r3, [r7, #23]
          break;
 8008096:	e00c      	b.n	80080b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080b0:	d0e7      	beq.n	8008082 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	371c      	adds	r7, #28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4611      	mov	r1, r2
 80080cc:	461a      	mov	r2, r3
 80080ce:	460b      	mov	r3, r1
 80080d0:	71fb      	strb	r3, [r7, #7]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d123      	bne.n	800812e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080e6:	88bb      	ldrh	r3, [r7, #4]
 80080e8:	3303      	adds	r3, #3
 80080ea:	089b      	lsrs	r3, r3, #2
 80080ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080ee:	2300      	movs	r3, #0
 80080f0:	61bb      	str	r3, [r7, #24]
 80080f2:	e018      	b.n	8008126 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	031a      	lsls	r2, r3, #12
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008100:	461a      	mov	r2, r3
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	3301      	adds	r3, #1
 800810c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	3301      	adds	r3, #1
 8008112:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	3301      	adds	r3, #1
 8008118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	3301      	adds	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	3301      	adds	r3, #1
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	429a      	cmp	r2, r3
 800812c:	d3e2      	bcc.n	80080f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3724      	adds	r7, #36	; 0x24
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800813c:	b480      	push	{r7}
 800813e:	b08b      	sub	sp, #44	; 0x2c
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	089b      	lsrs	r3, r3, #2
 8008156:	b29b      	uxth	r3, r3
 8008158:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008162:	2300      	movs	r3, #0
 8008164:	623b      	str	r3, [r7, #32]
 8008166:	e014      	b.n	8008192 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	601a      	str	r2, [r3, #0]
    pDest++;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	3301      	adds	r3, #1
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	3301      	adds	r3, #1
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	3301      	adds	r3, #1
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	3301      	adds	r3, #1
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	3301      	adds	r3, #1
 8008190:	623b      	str	r3, [r7, #32]
 8008192:	6a3a      	ldr	r2, [r7, #32]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	429a      	cmp	r2, r3
 8008198:	d3e6      	bcc.n	8008168 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800819a:	8bfb      	ldrh	r3, [r7, #30]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01e      	beq.n	80081de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081aa:	461a      	mov	r2, r3
 80081ac:	f107 0310 	add.w	r3, r7, #16
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	fa22 f303 	lsr.w	r3, r2, r3
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	701a      	strb	r2, [r3, #0]
      i++;
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	3301      	adds	r3, #1
 80081ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	3301      	adds	r3, #1
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081d2:	8bfb      	ldrh	r3, [r7, #30]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081d8:	8bfb      	ldrh	r3, [r7, #30]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1ea      	bne.n	80081b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	372c      	adds	r7, #44	; 0x2c
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d12c      	bne.n	8008262 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	db12      	blt.n	8008240 <USB_EPSetStall+0x54>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00f      	beq.n	8008240 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	440a      	add	r2, r1
 8008236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800823e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	440a      	add	r2, r1
 8008256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800825a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	e02b      	b.n	80082ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	db12      	blt.n	800829a <USB_EPSetStall+0xae>
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00f      	beq.n	800829a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	0151      	lsls	r1, r2, #5
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	440a      	add	r2, r1
 8008290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008298:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	785b      	ldrb	r3, [r3, #1]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d128      	bne.n	8008336 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008302:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	791b      	ldrb	r3, [r3, #4]
 8008308:	2b03      	cmp	r3, #3
 800830a:	d003      	beq.n	8008314 <USB_EPClearStall+0x4c>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	791b      	ldrb	r3, [r3, #4]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d138      	bne.n	8008386 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	440a      	add	r2, r1
 800832a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800832e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	e027      	b.n	8008386 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	0151      	lsls	r1, r2, #5
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	440a      	add	r2, r1
 800834c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008354:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	791b      	ldrb	r3, [r3, #4]
 800835a:	2b03      	cmp	r3, #3
 800835c:	d003      	beq.n	8008366 <USB_EPClearStall+0x9e>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	791b      	ldrb	r3, [r3, #4]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d10f      	bne.n	8008386 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	440a      	add	r2, r1
 800837c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008384:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80083c8:	68f9      	ldr	r1, [r7, #12]
 80083ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ce:	4313      	orrs	r3, r2
 80083d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083fa:	f023 0303 	bic.w	r3, r3, #3
 80083fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840e:	f023 0302 	bic.w	r3, r3, #2
 8008412:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008450:	f043 0302 	orr.w	r3, r3, #2
 8008454:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4013      	ands	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800847c:	68fb      	ldr	r3, [r7, #12]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	4013      	ands	r3, r2
 80084ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	0c1b      	lsrs	r3, r3, #16
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084be:	b480      	push	{r7}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	4013      	ands	r3, r2
 80084e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	b29b      	uxth	r3, r3
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b085      	sub	sp, #20
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008502:	78fb      	ldrb	r3, [r7, #3]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	4013      	ands	r3, r2
 800851e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008520:	68bb      	ldr	r3, [r7, #8]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800852e:	b480      	push	{r7}
 8008530:	b087      	sub	sp, #28
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008550:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	f003 030f 	and.w	r3, r3, #15
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	fa22 f303 	lsr.w	r3, r2, r3
 800855e:	01db      	lsls	r3, r3, #7
 8008560:	b2db      	uxtb	r3, r3
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4013      	ands	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800857c:	68bb      	ldr	r3, [r7, #8]
}
 800857e:	4618      	mov	r0, r3
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f003 0301 	and.w	r3, r3, #1
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085c4:	f023 0307 	bic.w	r3, r3, #7
 80085c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	460b      	mov	r3, r1
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	333c      	adds	r3, #60	; 0x3c
 8008602:	3304      	adds	r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4a26      	ldr	r2, [pc, #152]	; (80086a4 <USB_EP0_OutStart+0xb8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d90a      	bls.n	8008626 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800861c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008620:	d101      	bne.n	8008626 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	e037      	b.n	8008696 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862c:	461a      	mov	r2, r3
 800862e:	2300      	movs	r3, #0
 8008630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008654:	f043 0318 	orr.w	r3, r3, #24
 8008658:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008668:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800866c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d10f      	bne.n	8008694 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	4f54300a 	.word	0x4f54300a

080086a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3301      	adds	r3, #1
 80086b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4a13      	ldr	r2, [pc, #76]	; (800870c <USB_CoreReset+0x64>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d901      	bls.n	80086c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e01b      	b.n	80086fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	daf2      	bge.n	80086b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f043 0201 	orr.w	r2, r3, #1
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a09      	ldr	r2, [pc, #36]	; (800870c <USB_CoreReset+0x64>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d901      	bls.n	80086f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e006      	b.n	80086fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d0f0      	beq.n	80086de <USB_CoreReset+0x36>

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	00030d40 	.word	0x00030d40

08008710 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800871c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008720:	f005 fbd0 	bl	800dec4 <USBD_static_malloc>
 8008724:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d109      	bne.n	8008740 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	32b0      	adds	r2, #176	; 0xb0
 8008736:	2100      	movs	r1, #0
 8008738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800873c:	2302      	movs	r3, #2
 800873e:	e0d4      	b.n	80088ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008740:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f005 fc48 	bl	800dfdc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	32b0      	adds	r2, #176	; 0xb0
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32b0      	adds	r2, #176	; 0xb0
 8008766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7c1b      	ldrb	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d138      	bne.n	80087ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008778:	4b5e      	ldr	r3, [pc, #376]	; (80088f4 <USBD_CDC_Init+0x1e4>)
 800877a:	7819      	ldrb	r1, [r3, #0]
 800877c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008780:	2202      	movs	r2, #2
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f005 fa7b 	bl	800dc7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008788:	4b5a      	ldr	r3, [pc, #360]	; (80088f4 <USBD_CDC_Init+0x1e4>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	f003 020f 	and.w	r2, r3, #15
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	3324      	adds	r3, #36	; 0x24
 800879e:	2201      	movs	r2, #1
 80087a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087a2:	4b55      	ldr	r3, [pc, #340]	; (80088f8 <USBD_CDC_Init+0x1e8>)
 80087a4:	7819      	ldrb	r1, [r3, #0]
 80087a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087aa:	2202      	movs	r2, #2
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f005 fa66 	bl	800dc7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087b2:	4b51      	ldr	r3, [pc, #324]	; (80088f8 <USBD_CDC_Init+0x1e8>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 020f 	and.w	r2, r3, #15
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087ca:	2201      	movs	r2, #1
 80087cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087ce:	4b4b      	ldr	r3, [pc, #300]	; (80088fc <USBD_CDC_Init+0x1ec>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 020f 	and.w	r2, r3, #15
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	3326      	adds	r3, #38	; 0x26
 80087e4:	2210      	movs	r2, #16
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	e035      	b.n	8008856 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087ea:	4b42      	ldr	r3, [pc, #264]	; (80088f4 <USBD_CDC_Init+0x1e4>)
 80087ec:	7819      	ldrb	r1, [r3, #0]
 80087ee:	2340      	movs	r3, #64	; 0x40
 80087f0:	2202      	movs	r2, #2
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f005 fa43 	bl	800dc7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087f8:	4b3e      	ldr	r3, [pc, #248]	; (80088f4 <USBD_CDC_Init+0x1e4>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	3324      	adds	r3, #36	; 0x24
 800880e:	2201      	movs	r2, #1
 8008810:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008812:	4b39      	ldr	r3, [pc, #228]	; (80088f8 <USBD_CDC_Init+0x1e8>)
 8008814:	7819      	ldrb	r1, [r3, #0]
 8008816:	2340      	movs	r3, #64	; 0x40
 8008818:	2202      	movs	r2, #2
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f005 fa2f 	bl	800dc7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008820:	4b35      	ldr	r3, [pc, #212]	; (80088f8 <USBD_CDC_Init+0x1e8>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	f003 020f 	and.w	r2, r3, #15
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008838:	2201      	movs	r2, #1
 800883a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800883c:	4b2f      	ldr	r3, [pc, #188]	; (80088fc <USBD_CDC_Init+0x1ec>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	f003 020f 	and.w	r2, r3, #15
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	440b      	add	r3, r1
 8008850:	3326      	adds	r3, #38	; 0x26
 8008852:	2210      	movs	r2, #16
 8008854:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008856:	4b29      	ldr	r3, [pc, #164]	; (80088fc <USBD_CDC_Init+0x1ec>)
 8008858:	7819      	ldrb	r1, [r3, #0]
 800885a:	2308      	movs	r3, #8
 800885c:	2203      	movs	r2, #3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f005 fa0d 	bl	800dc7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008864:	4b25      	ldr	r3, [pc, #148]	; (80088fc <USBD_CDC_Init+0x1ec>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	3324      	adds	r3, #36	; 0x24
 800887a:	2201      	movs	r2, #1
 800887c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	33b0      	adds	r3, #176	; 0xb0
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80088b4:	2302      	movs	r3, #2
 80088b6:	e018      	b.n	80088ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7c1b      	ldrb	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088c0:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <USBD_CDC_Init+0x1e8>)
 80088c2:	7819      	ldrb	r1, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f005 fac4 	bl	800de5c <USBD_LL_PrepareReceive>
 80088d4:	e008      	b.n	80088e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088d6:	4b08      	ldr	r3, [pc, #32]	; (80088f8 <USBD_CDC_Init+0x1e8>)
 80088d8:	7819      	ldrb	r1, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088e0:	2340      	movs	r3, #64	; 0x40
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f005 faba 	bl	800de5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	2000057b 	.word	0x2000057b
 80088f8:	2000057c 	.word	0x2000057c
 80088fc:	2000057d 	.word	0x2000057d

08008900 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800890c:	4b3a      	ldr	r3, [pc, #232]	; (80089f8 <USBD_CDC_DeInit+0xf8>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f005 f9d9 	bl	800dcca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008918:	4b37      	ldr	r3, [pc, #220]	; (80089f8 <USBD_CDC_DeInit+0xf8>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f003 020f 	and.w	r2, r3, #15
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	3324      	adds	r3, #36	; 0x24
 800892e:	2200      	movs	r2, #0
 8008930:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008932:	4b32      	ldr	r3, [pc, #200]	; (80089fc <USBD_CDC_DeInit+0xfc>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f005 f9c6 	bl	800dcca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800893e:	4b2f      	ldr	r3, [pc, #188]	; (80089fc <USBD_CDC_DeInit+0xfc>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	f003 020f 	and.w	r2, r3, #15
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008956:	2200      	movs	r2, #0
 8008958:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800895a:	4b29      	ldr	r3, [pc, #164]	; (8008a00 <USBD_CDC_DeInit+0x100>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f005 f9b2 	bl	800dcca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008966:	4b26      	ldr	r3, [pc, #152]	; (8008a00 <USBD_CDC_DeInit+0x100>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	f003 020f 	and.w	r2, r3, #15
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	3324      	adds	r3, #36	; 0x24
 800897c:	2200      	movs	r2, #0
 800897e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008980:	4b1f      	ldr	r3, [pc, #124]	; (8008a00 <USBD_CDC_DeInit+0x100>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	3326      	adds	r3, #38	; 0x26
 8008996:	2200      	movs	r2, #0
 8008998:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	32b0      	adds	r2, #176	; 0xb0
 80089a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01f      	beq.n	80089ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	33b0      	adds	r3, #176	; 0xb0
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	32b0      	adds	r2, #176	; 0xb0
 80089ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f005 fa86 	bl	800dee0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	32b0      	adds	r2, #176	; 0xb0
 80089de:	2100      	movs	r1, #0
 80089e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	2000057b 	.word	0x2000057b
 80089fc:	2000057c 	.word	0x2000057c
 8008a00:	2000057d 	.word	0x2000057d

08008a04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	32b0      	adds	r2, #176	; 0xb0
 8008a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e0bf      	b.n	8008bb4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d050      	beq.n	8008ae2 <USBD_CDC_Setup+0xde>
 8008a40:	2b20      	cmp	r3, #32
 8008a42:	f040 80af 	bne.w	8008ba4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	88db      	ldrh	r3, [r3, #6]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d03a      	beq.n	8008ac4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	b25b      	sxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	da1b      	bge.n	8008a90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	33b0      	adds	r3, #176	; 0xb0
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	88d2      	ldrh	r2, [r2, #6]
 8008a74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	88db      	ldrh	r3, [r3, #6]
 8008a7a:	2b07      	cmp	r3, #7
 8008a7c:	bf28      	it	cs
 8008a7e:	2307      	movcs	r3, #7
 8008a80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	89fa      	ldrh	r2, [r7, #14]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 fd89 	bl	800a5a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a8e:	e090      	b.n	8008bb2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	785a      	ldrb	r2, [r3, #1]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	88db      	ldrh	r3, [r3, #6]
 8008a9e:	2b3f      	cmp	r3, #63	; 0x3f
 8008aa0:	d803      	bhi.n	8008aaa <USBD_CDC_Setup+0xa6>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	88db      	ldrh	r3, [r3, #6]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	e000      	b.n	8008aac <USBD_CDC_Setup+0xa8>
 8008aaa:	2240      	movs	r2, #64	; 0x40
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008ab2:	6939      	ldr	r1, [r7, #16]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008aba:	461a      	mov	r2, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 fd9b 	bl	800a5f8 <USBD_CtlPrepareRx>
      break;
 8008ac2:	e076      	b.n	8008bb2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	33b0      	adds	r3, #176	; 0xb0
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	7850      	ldrb	r0, [r2, #1]
 8008ada:	2200      	movs	r2, #0
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	4798      	blx	r3
      break;
 8008ae0:	e067      	b.n	8008bb2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b0b      	cmp	r3, #11
 8008ae8:	d851      	bhi.n	8008b8e <USBD_CDC_Setup+0x18a>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <USBD_CDC_Setup+0xec>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b21 	.word	0x08008b21
 8008af4:	08008b9d 	.word	0x08008b9d
 8008af8:	08008b8f 	.word	0x08008b8f
 8008afc:	08008b8f 	.word	0x08008b8f
 8008b00:	08008b8f 	.word	0x08008b8f
 8008b04:	08008b8f 	.word	0x08008b8f
 8008b08:	08008b8f 	.word	0x08008b8f
 8008b0c:	08008b8f 	.word	0x08008b8f
 8008b10:	08008b8f 	.word	0x08008b8f
 8008b14:	08008b8f 	.word	0x08008b8f
 8008b18:	08008b4b 	.word	0x08008b4b
 8008b1c:	08008b75 	.word	0x08008b75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d107      	bne.n	8008b3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b2c:	f107 030a 	add.w	r3, r7, #10
 8008b30:	2202      	movs	r2, #2
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 fd33 	bl	800a5a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b3a:	e032      	b.n	8008ba2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 fcbd 	bl	800a4be <USBD_CtlError>
            ret = USBD_FAIL;
 8008b44:	2303      	movs	r3, #3
 8008b46:	75fb      	strb	r3, [r7, #23]
          break;
 8008b48:	e02b      	b.n	8008ba2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d107      	bne.n	8008b66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b56:	f107 030d 	add.w	r3, r7, #13
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 fd1e 	bl	800a5a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b64:	e01d      	b.n	8008ba2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 fca8 	bl	800a4be <USBD_CtlError>
            ret = USBD_FAIL;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	75fb      	strb	r3, [r7, #23]
          break;
 8008b72:	e016      	b.n	8008ba2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d00f      	beq.n	8008ba0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 fc9b 	bl	800a4be <USBD_CtlError>
            ret = USBD_FAIL;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b8c:	e008      	b.n	8008ba0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fc94 	bl	800a4be <USBD_CtlError>
          ret = USBD_FAIL;
 8008b96:	2303      	movs	r3, #3
 8008b98:	75fb      	strb	r3, [r7, #23]
          break;
 8008b9a:	e002      	b.n	8008ba2 <USBD_CDC_Setup+0x19e>
          break;
 8008b9c:	bf00      	nop
 8008b9e:	e008      	b.n	8008bb2 <USBD_CDC_Setup+0x1ae>
          break;
 8008ba0:	bf00      	nop
      }
      break;
 8008ba2:	e006      	b.n	8008bb2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 fc89 	bl	800a4be <USBD_CtlError>
      ret = USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	32b0      	adds	r2, #176	; 0xb0
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e065      	b.n	8008cb2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	32b0      	adds	r2, #176	; 0xb0
 8008bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008bf6:	78fb      	ldrb	r3, [r7, #3]
 8008bf8:	f003 020f 	and.w	r2, r3, #15
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3318      	adds	r3, #24
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d02f      	beq.n	8008c70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	f003 020f 	and.w	r2, r3, #15
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	3318      	adds	r3, #24
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	f003 010f 	and.w	r1, r3, #15
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	440b      	add	r3, r1
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4403      	add	r3, r0
 8008c38:	3348      	adds	r3, #72	; 0x48
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c40:	fb01 f303 	mul.w	r3, r1, r3
 8008c44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d112      	bne.n	8008c70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c4a:	78fb      	ldrb	r3, [r7, #3]
 8008c4c:	f003 020f 	and.w	r2, r3, #15
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3318      	adds	r3, #24
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c62:	78f9      	ldrb	r1, [r7, #3]
 8008c64:	2300      	movs	r3, #0
 8008c66:	2200      	movs	r2, #0
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f005 f8d6 	bl	800de1a <USBD_LL_Transmit>
 8008c6e:	e01f      	b.n	8008cb0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	33b0      	adds	r3, #176	; 0xb0
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d010      	beq.n	8008cb0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	33b0      	adds	r3, #176	; 0xb0
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	32b0      	adds	r2, #176	; 0xb0
 8008cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	32b0      	adds	r2, #176	; 0xb0
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e01a      	b.n	8008d22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f005 f8d4 	bl	800de9e <USBD_LL_GetRxDataSize>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	33b0      	adds	r3, #176	; 0xb0
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	32b0      	adds	r2, #176	; 0xb0
 8008d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e025      	b.n	8008d98 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	33b0      	adds	r3, #176	; 0xb0
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01a      	beq.n	8008d96 <USBD_CDC_EP0_RxReady+0x6c>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d66:	2bff      	cmp	r3, #255	; 0xff
 8008d68:	d015      	beq.n	8008d96 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	33b0      	adds	r3, #176	; 0xb0
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	22ff      	movs	r2, #255	; 0xff
 8008d92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008da8:	2182      	movs	r1, #130	; 0x82
 8008daa:	4818      	ldr	r0, [pc, #96]	; (8008e0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dac:	f000 fd4f 	bl	800984e <USBD_GetEpDesc>
 8008db0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008db2:	2101      	movs	r1, #1
 8008db4:	4815      	ldr	r0, [pc, #84]	; (8008e0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008db6:	f000 fd4a 	bl	800984e <USBD_GetEpDesc>
 8008dba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dbc:	2181      	movs	r1, #129	; 0x81
 8008dbe:	4813      	ldr	r0, [pc, #76]	; (8008e0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dc0:	f000 fd45 	bl	800984e <USBD_GetEpDesc>
 8008dc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2210      	movs	r2, #16
 8008dd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d006      	beq.n	8008de6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008de0:	711a      	strb	r2, [r3, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d006      	beq.n	8008dfa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df4:	711a      	strb	r2, [r3, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2243      	movs	r2, #67	; 0x43
 8008dfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e00:	4b02      	ldr	r3, [pc, #8]	; (8008e0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000538 	.word	0x20000538

08008e10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e18:	2182      	movs	r1, #130	; 0x82
 8008e1a:	4818      	ldr	r0, [pc, #96]	; (8008e7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e1c:	f000 fd17 	bl	800984e <USBD_GetEpDesc>
 8008e20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e22:	2101      	movs	r1, #1
 8008e24:	4815      	ldr	r0, [pc, #84]	; (8008e7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e26:	f000 fd12 	bl	800984e <USBD_GetEpDesc>
 8008e2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e2c:	2181      	movs	r1, #129	; 0x81
 8008e2e:	4813      	ldr	r0, [pc, #76]	; (8008e7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e30:	f000 fd0d 	bl	800984e <USBD_GetEpDesc>
 8008e34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2210      	movs	r2, #16
 8008e40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	711a      	strb	r2, [r3, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f042 0202 	orr.w	r2, r2, #2
 8008e54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d006      	beq.n	8008e6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	711a      	strb	r2, [r3, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f042 0202 	orr.w	r2, r2, #2
 8008e68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2243      	movs	r2, #67	; 0x43
 8008e6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e70:	4b02      	ldr	r3, [pc, #8]	; (8008e7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000538 	.word	0x20000538

08008e80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e88:	2182      	movs	r1, #130	; 0x82
 8008e8a:	4818      	ldr	r0, [pc, #96]	; (8008eec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e8c:	f000 fcdf 	bl	800984e <USBD_GetEpDesc>
 8008e90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e92:	2101      	movs	r1, #1
 8008e94:	4815      	ldr	r0, [pc, #84]	; (8008eec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e96:	f000 fcda 	bl	800984e <USBD_GetEpDesc>
 8008e9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e9c:	2181      	movs	r1, #129	; 0x81
 8008e9e:	4813      	ldr	r0, [pc, #76]	; (8008eec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ea0:	f000 fcd5 	bl	800984e <USBD_GetEpDesc>
 8008ea4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2210      	movs	r2, #16
 8008eb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d006      	beq.n	8008ec6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec0:	711a      	strb	r2, [r3, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed4:	711a      	strb	r2, [r3, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2243      	movs	r2, #67	; 0x43
 8008ede:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20000538 	.word	0x20000538

08008ef0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	220a      	movs	r2, #10
 8008efc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008efe:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	200004f4 	.word	0x200004f4

08008f10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e009      	b.n	8008f38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	33b0      	adds	r3, #176	; 0xb0
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	32b0      	adds	r2, #176	; 0xb0
 8008f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e008      	b.n	8008f7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	32b0      	adds	r2, #176	; 0xb0
 8008f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e004      	b.n	8008fb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
	...

08008fc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	32b0      	adds	r2, #176	; 0xb0
 8008fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fda:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	32b0      	adds	r2, #176	; 0xb0
 8008fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e025      	b.n	8009042 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d11f      	bne.n	8009040 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2201      	movs	r2, #1
 8009004:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009008:	4b10      	ldr	r3, [pc, #64]	; (800904c <USBD_CDC_TransmitPacket+0x88>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	f003 020f 	and.w	r2, r3, #15
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4613      	mov	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4403      	add	r3, r0
 8009022:	3318      	adds	r3, #24
 8009024:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009026:	4b09      	ldr	r3, [pc, #36]	; (800904c <USBD_CDC_TransmitPacket+0x88>)
 8009028:	7819      	ldrb	r1, [r3, #0]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f004 feef 	bl	800de1a <USBD_LL_Transmit>

    ret = USBD_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	2000057b 	.word	0x2000057b

08009050 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	32b0      	adds	r2, #176	; 0xb0
 8009062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009066:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	32b0      	adds	r2, #176	; 0xb0
 8009072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800907a:	2303      	movs	r3, #3
 800907c:	e018      	b.n	80090b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7c1b      	ldrb	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10a      	bne.n	800909c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009086:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <USBD_CDC_ReceivePacket+0x68>)
 8009088:	7819      	ldrb	r1, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f004 fee1 	bl	800de5c <USBD_LL_PrepareReceive>
 800909a:	e008      	b.n	80090ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800909c:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <USBD_CDC_ReceivePacket+0x68>)
 800909e:	7819      	ldrb	r1, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090a6:	2340      	movs	r3, #64	; 0x40
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f004 fed7 	bl	800de5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	2000057c 	.word	0x2000057c

080090bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	4613      	mov	r3, r2
 80090c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e01f      	b.n	8009114 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	79fa      	ldrb	r2, [r7, #7]
 8009106:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f004 fd51 	bl	800dbb0 <USBD_LL_Init>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009112:	7dfb      	ldrb	r3, [r7, #23]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009130:	2303      	movs	r3, #3
 8009132:	e025      	b.n	8009180 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	32ae      	adds	r2, #174	; 0xae
 8009146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00f      	beq.n	8009170 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32ae      	adds	r2, #174	; 0xae
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	f107 020e 	add.w	r2, r7, #14
 8009164:	4610      	mov	r0, r2
 8009166:	4798      	blx	r3
 8009168:	4602      	mov	r2, r0
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f004 fd59 	bl	800dc48 <USBD_LL_Start>
 8009196:	4603      	mov	r3, r0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d009      	beq.n	80091e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	78fa      	ldrb	r2, [r7, #3]
 80091da:	4611      	mov	r1, r2
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	4798      	blx	r3
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	4611      	mov	r1, r2
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	4798      	blx	r3
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009214:	2303      	movs	r3, #3
 8009216:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	4618      	mov	r0, r3
 8009236:	f001 f908 	bl	800a44a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009248:	461a      	mov	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009256:	f003 031f 	and.w	r3, r3, #31
 800925a:	2b02      	cmp	r3, #2
 800925c:	d01a      	beq.n	8009294 <USBD_LL_SetupStage+0x72>
 800925e:	2b02      	cmp	r3, #2
 8009260:	d822      	bhi.n	80092a8 <USBD_LL_SetupStage+0x86>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <USBD_LL_SetupStage+0x4a>
 8009266:	2b01      	cmp	r3, #1
 8009268:	d00a      	beq.n	8009280 <USBD_LL_SetupStage+0x5e>
 800926a:	e01d      	b.n	80092a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fb5f 	bl	8009938 <USBD_StdDevReq>
 800927a:	4603      	mov	r3, r0
 800927c:	73fb      	strb	r3, [r7, #15]
      break;
 800927e:	e020      	b.n	80092c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fbc7 	bl	8009a1c <USBD_StdItfReq>
 800928e:	4603      	mov	r3, r0
 8009290:	73fb      	strb	r3, [r7, #15]
      break;
 8009292:	e016      	b.n	80092c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fc29 	bl	8009af4 <USBD_StdEPReq>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]
      break;
 80092a6:	e00c      	b.n	80092c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f004 fd26 	bl	800dd08 <USBD_LL_StallEP>
 80092bc:	4603      	mov	r3, r0
 80092be:	73fb      	strb	r3, [r7, #15]
      break;
 80092c0:	bf00      	nop
  }

  return ret;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	460b      	mov	r3, r1
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d16e      	bne.n	80093c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80092ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	f040 8098 	bne.w	8009428 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	429a      	cmp	r2, r3
 8009302:	d913      	bls.n	800932c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	1ad2      	subs	r2, r2, r3
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	4293      	cmp	r3, r2
 800931c:	bf28      	it	cs
 800931e:	4613      	movcs	r3, r2
 8009320:	461a      	mov	r2, r3
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f001 f984 	bl	800a632 <USBD_CtlContinueRx>
 800932a:	e07d      	b.n	8009428 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009332:	f003 031f 	and.w	r3, r3, #31
 8009336:	2b02      	cmp	r3, #2
 8009338:	d014      	beq.n	8009364 <USBD_LL_DataOutStage+0x98>
 800933a:	2b02      	cmp	r3, #2
 800933c:	d81d      	bhi.n	800937a <USBD_LL_DataOutStage+0xae>
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <USBD_LL_DataOutStage+0x7c>
 8009342:	2b01      	cmp	r3, #1
 8009344:	d003      	beq.n	800934e <USBD_LL_DataOutStage+0x82>
 8009346:	e018      	b.n	800937a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	75bb      	strb	r3, [r7, #22]
            break;
 800934c:	e018      	b.n	8009380 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009354:	b2db      	uxtb	r3, r3
 8009356:	4619      	mov	r1, r3
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 fa5e 	bl	800981a <USBD_CoreFindIF>
 800935e:	4603      	mov	r3, r0
 8009360:	75bb      	strb	r3, [r7, #22]
            break;
 8009362:	e00d      	b.n	8009380 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800936a:	b2db      	uxtb	r3, r3
 800936c:	4619      	mov	r1, r3
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fa60 	bl	8009834 <USBD_CoreFindEP>
 8009374:	4603      	mov	r3, r0
 8009376:	75bb      	strb	r3, [r7, #22]
            break;
 8009378:	e002      	b.n	8009380 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	75bb      	strb	r3, [r7, #22]
            break;
 800937e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009380:	7dbb      	ldrb	r3, [r7, #22]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d119      	bne.n	80093ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b03      	cmp	r3, #3
 8009390:	d113      	bne.n	80093ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009392:	7dba      	ldrb	r2, [r7, #22]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	32ae      	adds	r2, #174	; 0xae
 8009398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00b      	beq.n	80093ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80093a2:	7dba      	ldrb	r2, [r7, #22]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80093aa:	7dba      	ldrb	r2, [r7, #22]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	32ae      	adds	r2, #174	; 0xae
 80093b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f001 f94a 	bl	800a654 <USBD_CtlSendStatus>
 80093c0:	e032      	b.n	8009428 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	4619      	mov	r1, r3
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 fa31 	bl	8009834 <USBD_CoreFindEP>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093d6:	7dbb      	ldrb	r3, [r7, #22]
 80093d8:	2bff      	cmp	r3, #255	; 0xff
 80093da:	d025      	beq.n	8009428 <USBD_LL_DataOutStage+0x15c>
 80093dc:	7dbb      	ldrb	r3, [r7, #22]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d122      	bne.n	8009428 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d117      	bne.n	800941e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093ee:	7dba      	ldrb	r2, [r7, #22]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	32ae      	adds	r2, #174	; 0xae
 80093f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00f      	beq.n	800941e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80093fe:	7dba      	ldrb	r2, [r7, #22]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009406:	7dba      	ldrb	r2, [r7, #22]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	32ae      	adds	r2, #174	; 0xae
 800940c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	7afa      	ldrb	r2, [r7, #11]
 8009414:	4611      	mov	r1, r2
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	4798      	blx	r3
 800941a:	4603      	mov	r3, r0
 800941c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	e000      	b.n	800942a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	460b      	mov	r3, r1
 800943c:	607a      	str	r2, [r7, #4]
 800943e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d16f      	bne.n	8009526 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3314      	adds	r3, #20
 800944a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009452:	2b02      	cmp	r3, #2
 8009454:	d15a      	bne.n	800950c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	689a      	ldr	r2, [r3, #8]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	429a      	cmp	r2, r3
 8009460:	d914      	bls.n	800948c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	1ad2      	subs	r2, r2, r3
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	461a      	mov	r2, r3
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f001 f8ac 	bl	800a5d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800947e:	2300      	movs	r3, #0
 8009480:	2200      	movs	r2, #0
 8009482:	2100      	movs	r1, #0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f004 fce9 	bl	800de5c <USBD_LL_PrepareReceive>
 800948a:	e03f      	b.n	800950c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	429a      	cmp	r2, r3
 8009496:	d11c      	bne.n	80094d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d316      	bcc.n	80094d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d20f      	bcs.n	80094d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094b2:	2200      	movs	r2, #0
 80094b4:	2100      	movs	r1, #0
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f001 f88d 	bl	800a5d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094c4:	2300      	movs	r3, #0
 80094c6:	2200      	movs	r2, #0
 80094c8:	2100      	movs	r1, #0
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f004 fcc6 	bl	800de5c <USBD_LL_PrepareReceive>
 80094d0:	e01c      	b.n	800950c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d10f      	bne.n	80094fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094fe:	2180      	movs	r1, #128	; 0x80
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f004 fc01 	bl	800dd08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f001 f8b7 	bl	800a67a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d03a      	beq.n	800958c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff fe42 	bl	80091a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009524:	e032      	b.n	800958c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800952c:	b2db      	uxtb	r3, r3
 800952e:	4619      	mov	r1, r3
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 f97f 	bl	8009834 <USBD_CoreFindEP>
 8009536:	4603      	mov	r3, r0
 8009538:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	2bff      	cmp	r3, #255	; 0xff
 800953e:	d025      	beq.n	800958c <USBD_LL_DataInStage+0x15a>
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d122      	bne.n	800958c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b03      	cmp	r3, #3
 8009550:	d11c      	bne.n	800958c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009552:	7dfa      	ldrb	r2, [r7, #23]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	32ae      	adds	r2, #174	; 0xae
 8009558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d014      	beq.n	800958c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009562:	7dfa      	ldrb	r2, [r7, #23]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800956a:	7dfa      	ldrb	r2, [r7, #23]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	32ae      	adds	r2, #174	; 0xae
 8009570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	7afa      	ldrb	r2, [r7, #11]
 8009578:	4611      	mov	r1, r2
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	4798      	blx	r3
 800957e:	4603      	mov	r3, r0
 8009580:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009582:	7dbb      	ldrb	r3, [r7, #22]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009588:	7dbb      	ldrb	r3, [r7, #22]
 800958a:	e000      	b.n	800958e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d014      	beq.n	80095fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00e      	beq.n	80095fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6852      	ldr	r2, [r2, #4]
 80095ea:	b2d2      	uxtb	r2, r2
 80095ec:	4611      	mov	r1, r2
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095f8:	2303      	movs	r3, #3
 80095fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095fc:	2340      	movs	r3, #64	; 0x40
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f004 fb3b 	bl	800dc7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2240      	movs	r2, #64	; 0x40
 8009614:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009618:	2340      	movs	r3, #64	; 0x40
 800961a:	2200      	movs	r2, #0
 800961c:	2180      	movs	r1, #128	; 0x80
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f004 fb2d 	bl	800dc7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2240      	movs	r2, #64	; 0x40
 800962e:	621a      	str	r2, [r3, #32]

  return ret;
 8009630:	7bfb      	ldrb	r3, [r7, #15]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	78fa      	ldrb	r2, [r7, #3]
 800964a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009668:	b2da      	uxtb	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2204      	movs	r2, #4
 8009674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b04      	cmp	r3, #4
 8009698:	d106      	bne.n	80096a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d110      	bne.n	80096ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00b      	beq.n	80096ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	32ae      	adds	r2, #174	; 0xae
 800970c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e01c      	b.n	8009752 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b03      	cmp	r3, #3
 8009722:	d115      	bne.n	8009750 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	32ae      	adds	r2, #174	; 0xae
 800972e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	32ae      	adds	r2, #174	; 0xae
 8009742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	4611      	mov	r1, r2
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	32ae      	adds	r2, #174	; 0xae
 8009770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	e01c      	b.n	80097b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b03      	cmp	r3, #3
 8009786:	d115      	bne.n	80097b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	32ae      	adds	r2, #174	; 0xae
 8009792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00b      	beq.n	80097b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	32ae      	adds	r2, #174	; 0xae
 80097a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	78fa      	ldrb	r2, [r7, #3]
 80097ae:	4611      	mov	r1, r2
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00e      	beq.n	8009810 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	6852      	ldr	r2, [r2, #4]
 80097fe:	b2d2      	uxtb	r2, r2
 8009800:	4611      	mov	r1, r2
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	4798      	blx	r3
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800980c:	2303      	movs	r3, #3
 800980e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	460b      	mov	r3, r1
 8009824:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009826:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009840:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	885b      	ldrh	r3, [r3, #2]
 800986a:	b29a      	uxth	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	429a      	cmp	r2, r3
 8009874:	d920      	bls.n	80098b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	b29b      	uxth	r3, r3
 800987c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800987e:	e013      	b.n	80098a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009880:	f107 030a 	add.w	r3, r7, #10
 8009884:	4619      	mov	r1, r3
 8009886:	6978      	ldr	r0, [r7, #20]
 8009888:	f000 f81b 	bl	80098c2 <USBD_GetNextDesc>
 800988c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	2b05      	cmp	r3, #5
 8009894:	d108      	bne.n	80098a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	789b      	ldrb	r3, [r3, #2]
 800989e:	78fa      	ldrb	r2, [r7, #3]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d008      	beq.n	80098b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80098a4:	2300      	movs	r3, #0
 80098a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	885b      	ldrh	r3, [r3, #2]
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	897b      	ldrh	r3, [r7, #10]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d8e5      	bhi.n	8009880 <USBD_GetEpDesc+0x32>
 80098b4:	e000      	b.n	80098b8 <USBD_GetEpDesc+0x6a>
          break;
 80098b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80098b8:	693b      	ldr	r3, [r7, #16]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b085      	sub	sp, #20
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	881a      	ldrh	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	4413      	add	r3, r2
 80098dc:	b29a      	uxth	r2, r3
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4413      	add	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098ee:	68fb      	ldr	r3, [r7, #12]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	3301      	adds	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800991a:	8a3b      	ldrh	r3, [r7, #16]
 800991c:	021b      	lsls	r3, r3, #8
 800991e:	b21a      	sxth	r2, r3
 8009920:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009924:	4313      	orrs	r3, r2
 8009926:	b21b      	sxth	r3, r3
 8009928:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800992a:	89fb      	ldrh	r3, [r7, #14]
}
 800992c:	4618      	mov	r0, r3
 800992e:	371c      	adds	r7, #28
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800994e:	2b40      	cmp	r3, #64	; 0x40
 8009950:	d005      	beq.n	800995e <USBD_StdDevReq+0x26>
 8009952:	2b40      	cmp	r3, #64	; 0x40
 8009954:	d857      	bhi.n	8009a06 <USBD_StdDevReq+0xce>
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00f      	beq.n	800997a <USBD_StdDevReq+0x42>
 800995a:	2b20      	cmp	r3, #32
 800995c:	d153      	bne.n	8009a06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	32ae      	adds	r2, #174	; 0xae
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	4798      	blx	r3
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
      break;
 8009978:	e04a      	b.n	8009a10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	785b      	ldrb	r3, [r3, #1]
 800997e:	2b09      	cmp	r3, #9
 8009980:	d83b      	bhi.n	80099fa <USBD_StdDevReq+0xc2>
 8009982:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <USBD_StdDevReq+0x50>)
 8009984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009988:	080099dd 	.word	0x080099dd
 800998c:	080099f1 	.word	0x080099f1
 8009990:	080099fb 	.word	0x080099fb
 8009994:	080099e7 	.word	0x080099e7
 8009998:	080099fb 	.word	0x080099fb
 800999c:	080099bb 	.word	0x080099bb
 80099a0:	080099b1 	.word	0x080099b1
 80099a4:	080099fb 	.word	0x080099fb
 80099a8:	080099d3 	.word	0x080099d3
 80099ac:	080099c5 	.word	0x080099c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa3c 	bl	8009e30 <USBD_GetDescriptor>
          break;
 80099b8:	e024      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fba1 	bl	800a104 <USBD_SetAddress>
          break;
 80099c2:	e01f      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fbe0 	bl	800a18c <USBD_SetConfig>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]
          break;
 80099d0:	e018      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fc83 	bl	800a2e0 <USBD_GetConfig>
          break;
 80099da:	e013      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099dc:	6839      	ldr	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fcb4 	bl	800a34c <USBD_GetStatus>
          break;
 80099e4:	e00e      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fce3 	bl	800a3b4 <USBD_SetFeature>
          break;
 80099ee:	e009      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fd07 	bl	800a406 <USBD_ClrFeature>
          break;
 80099f8:	e004      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fd5e 	bl	800a4be <USBD_CtlError>
          break;
 8009a02:	bf00      	nop
      }
      break;
 8009a04:	e004      	b.n	8009a10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fd58 	bl	800a4be <USBD_CtlError>
      break;
 8009a0e:	bf00      	nop
  }

  return ret;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop

08009a1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a32:	2b40      	cmp	r3, #64	; 0x40
 8009a34:	d005      	beq.n	8009a42 <USBD_StdItfReq+0x26>
 8009a36:	2b40      	cmp	r3, #64	; 0x40
 8009a38:	d852      	bhi.n	8009ae0 <USBD_StdItfReq+0xc4>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <USBD_StdItfReq+0x26>
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d14e      	bne.n	8009ae0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d840      	bhi.n	8009ad2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	889b      	ldrh	r3, [r3, #4]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d836      	bhi.n	8009ac8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	889b      	ldrh	r3, [r3, #4]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff fed9 	bl	800981a <USBD_CoreFindIF>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2bff      	cmp	r3, #255	; 0xff
 8009a70:	d01d      	beq.n	8009aae <USBD_StdItfReq+0x92>
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d11a      	bne.n	8009aae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a78:	7bba      	ldrb	r2, [r7, #14]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	32ae      	adds	r2, #174	; 0xae
 8009a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00f      	beq.n	8009aa8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a88:	7bba      	ldrb	r2, [r7, #14]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a90:	7bba      	ldrb	r2, [r7, #14]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	32ae      	adds	r2, #174	; 0xae
 8009a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009aa6:	e004      	b.n	8009ab2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009aac:	e001      	b.n	8009ab2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	88db      	ldrh	r3, [r3, #6]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d110      	bne.n	8009adc <USBD_StdItfReq+0xc0>
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10d      	bne.n	8009adc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fdc7 	bl	800a654 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ac6:	e009      	b.n	8009adc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fcf7 	bl	800a4be <USBD_CtlError>
          break;
 8009ad0:	e004      	b.n	8009adc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fcf2 	bl	800a4be <USBD_CtlError>
          break;
 8009ada:	e000      	b.n	8009ade <USBD_StdItfReq+0xc2>
          break;
 8009adc:	bf00      	nop
      }
      break;
 8009ade:	e004      	b.n	8009aea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fceb 	bl	800a4be <USBD_CtlError>
      break;
 8009ae8:	bf00      	nop
  }

  return ret;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	889b      	ldrh	r3, [r3, #4]
 8009b06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b10:	2b40      	cmp	r3, #64	; 0x40
 8009b12:	d007      	beq.n	8009b24 <USBD_StdEPReq+0x30>
 8009b14:	2b40      	cmp	r3, #64	; 0x40
 8009b16:	f200 817f 	bhi.w	8009e18 <USBD_StdEPReq+0x324>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d02a      	beq.n	8009b74 <USBD_StdEPReq+0x80>
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	f040 817a 	bne.w	8009e18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff fe83 	bl	8009834 <USBD_CoreFindEP>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b32:	7b7b      	ldrb	r3, [r7, #13]
 8009b34:	2bff      	cmp	r3, #255	; 0xff
 8009b36:	f000 8174 	beq.w	8009e22 <USBD_StdEPReq+0x32e>
 8009b3a:	7b7b      	ldrb	r3, [r7, #13]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f040 8170 	bne.w	8009e22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009b42:	7b7a      	ldrb	r2, [r7, #13]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009b4a:	7b7a      	ldrb	r2, [r7, #13]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	32ae      	adds	r2, #174	; 0xae
 8009b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 8163 	beq.w	8009e22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b5c:	7b7a      	ldrb	r2, [r7, #13]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	32ae      	adds	r2, #174	; 0xae
 8009b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
 8009b6e:	4603      	mov	r3, r0
 8009b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b72:	e156      	b.n	8009e22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d008      	beq.n	8009b8e <USBD_StdEPReq+0x9a>
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	f300 8145 	bgt.w	8009e0c <USBD_StdEPReq+0x318>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 809b 	beq.w	8009cbe <USBD_StdEPReq+0x1ca>
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d03c      	beq.n	8009c06 <USBD_StdEPReq+0x112>
 8009b8c:	e13e      	b.n	8009e0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d002      	beq.n	8009ba0 <USBD_StdEPReq+0xac>
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d016      	beq.n	8009bcc <USBD_StdEPReq+0xd8>
 8009b9e:	e02c      	b.n	8009bfa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00d      	beq.n	8009bc2 <USBD_StdEPReq+0xce>
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	2b80      	cmp	r3, #128	; 0x80
 8009baa:	d00a      	beq.n	8009bc2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f004 f8a9 	bl	800dd08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bb6:	2180      	movs	r1, #128	; 0x80
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f004 f8a5 	bl	800dd08 <USBD_LL_StallEP>
 8009bbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bc0:	e020      	b.n	8009c04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fc7a 	bl	800a4be <USBD_CtlError>
              break;
 8009bca:	e01b      	b.n	8009c04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	885b      	ldrh	r3, [r3, #2]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10e      	bne.n	8009bf2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <USBD_StdEPReq+0xfe>
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b80      	cmp	r3, #128	; 0x80
 8009bde:	d008      	beq.n	8009bf2 <USBD_StdEPReq+0xfe>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	88db      	ldrh	r3, [r3, #6]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f004 f88b 	bl	800dd08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fd2e 	bl	800a654 <USBD_CtlSendStatus>

              break;
 8009bf8:	e004      	b.n	8009c04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fc5e 	bl	800a4be <USBD_CtlError>
              break;
 8009c02:	bf00      	nop
          }
          break;
 8009c04:	e107      	b.n	8009e16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d002      	beq.n	8009c18 <USBD_StdEPReq+0x124>
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d016      	beq.n	8009c44 <USBD_StdEPReq+0x150>
 8009c16:	e04b      	b.n	8009cb0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00d      	beq.n	8009c3a <USBD_StdEPReq+0x146>
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	2b80      	cmp	r3, #128	; 0x80
 8009c22:	d00a      	beq.n	8009c3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f004 f86d 	bl	800dd08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c2e:	2180      	movs	r1, #128	; 0x80
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f004 f869 	bl	800dd08 <USBD_LL_StallEP>
 8009c36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c38:	e040      	b.n	8009cbc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fc3e 	bl	800a4be <USBD_CtlError>
              break;
 8009c42:	e03b      	b.n	8009cbc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	885b      	ldrh	r3, [r3, #2]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d136      	bne.n	8009cba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d004      	beq.n	8009c60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f004 f873 	bl	800dd46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fcf7 	bl	800a654 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff fde2 	bl	8009834 <USBD_CoreFindEP>
 8009c70:	4603      	mov	r3, r0
 8009c72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c74:	7b7b      	ldrb	r3, [r7, #13]
 8009c76:	2bff      	cmp	r3, #255	; 0xff
 8009c78:	d01f      	beq.n	8009cba <USBD_StdEPReq+0x1c6>
 8009c7a:	7b7b      	ldrb	r3, [r7, #13]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d11c      	bne.n	8009cba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c80:	7b7a      	ldrb	r2, [r7, #13]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c88:	7b7a      	ldrb	r2, [r7, #13]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	32ae      	adds	r2, #174	; 0xae
 8009c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d010      	beq.n	8009cba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c98:	7b7a      	ldrb	r2, [r7, #13]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	32ae      	adds	r2, #174	; 0xae
 8009c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
 8009caa:	4603      	mov	r3, r0
 8009cac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009cae:	e004      	b.n	8009cba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fc03 	bl	800a4be <USBD_CtlError>
              break;
 8009cb8:	e000      	b.n	8009cbc <USBD_StdEPReq+0x1c8>
              break;
 8009cba:	bf00      	nop
          }
          break;
 8009cbc:	e0ab      	b.n	8009e16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d002      	beq.n	8009cd0 <USBD_StdEPReq+0x1dc>
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d032      	beq.n	8009d34 <USBD_StdEPReq+0x240>
 8009cce:	e097      	b.n	8009e00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d007      	beq.n	8009ce6 <USBD_StdEPReq+0x1f2>
 8009cd6:	7bbb      	ldrb	r3, [r7, #14]
 8009cd8:	2b80      	cmp	r3, #128	; 0x80
 8009cda:	d004      	beq.n	8009ce6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fbed 	bl	800a4be <USBD_CtlError>
                break;
 8009ce4:	e091      	b.n	8009e0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da0b      	bge.n	8009d06 <USBD_StdEPReq+0x212>
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	3310      	adds	r3, #16
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	4413      	add	r3, r2
 8009d02:	3304      	adds	r3, #4
 8009d04:	e00b      	b.n	8009d1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fc37 	bl	800a5a0 <USBD_CtlSendData>
              break;
 8009d32:	e06a      	b.n	8009e0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	da11      	bge.n	8009d60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
 8009d3e:	f003 020f 	and.w	r2, r3, #15
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3324      	adds	r3, #36	; 0x24
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d117      	bne.n	8009d86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fbb0 	bl	800a4be <USBD_CtlError>
                  break;
 8009d5e:	e054      	b.n	8009e0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	f003 020f 	and.w	r2, r3, #15
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d104      	bne.n	8009d86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fb9d 	bl	800a4be <USBD_CtlError>
                  break;
 8009d84:	e041      	b.n	8009e0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	da0b      	bge.n	8009da6 <USBD_StdEPReq+0x2b2>
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	3310      	adds	r3, #16
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	4413      	add	r3, r2
 8009da2:	3304      	adds	r3, #4
 8009da4:	e00b      	b.n	8009dbe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	4413      	add	r3, r2
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <USBD_StdEPReq+0x2d8>
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	2b80      	cmp	r3, #128	; 0x80
 8009dca:	d103      	bne.n	8009dd4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	e00e      	b.n	8009df2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f003 ffd3 	bl	800dd84 <USBD_LL_IsStallEP>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2201      	movs	r2, #1
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	e002      	b.n	8009df2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2200      	movs	r2, #0
 8009df0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2202      	movs	r2, #2
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fbd1 	bl	800a5a0 <USBD_CtlSendData>
              break;
 8009dfe:	e004      	b.n	8009e0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fb5b 	bl	800a4be <USBD_CtlError>
              break;
 8009e08:	bf00      	nop
          }
          break;
 8009e0a:	e004      	b.n	8009e16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fb55 	bl	800a4be <USBD_CtlError>
          break;
 8009e14:	bf00      	nop
      }
      break;
 8009e16:	e005      	b.n	8009e24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fb4f 	bl	800a4be <USBD_CtlError>
      break;
 8009e20:	e000      	b.n	8009e24 <USBD_StdEPReq+0x330>
      break;
 8009e22:	bf00      	nop
  }

  return ret;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	885b      	ldrh	r3, [r3, #2]
 8009e4a:	0a1b      	lsrs	r3, r3, #8
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	2b06      	cmp	r3, #6
 8009e52:	f200 8128 	bhi.w	800a0a6 <USBD_GetDescriptor+0x276>
 8009e56:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <USBD_GetDescriptor+0x2c>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009e79 	.word	0x08009e79
 8009e60:	08009e91 	.word	0x08009e91
 8009e64:	08009ed1 	.word	0x08009ed1
 8009e68:	0800a0a7 	.word	0x0800a0a7
 8009e6c:	0800a0a7 	.word	0x0800a0a7
 8009e70:	0800a047 	.word	0x0800a047
 8009e74:	0800a073 	.word	0x0800a073
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7c12      	ldrb	r2, [r2, #16]
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
      break;
 8009e8e:	e112      	b.n	800a0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7c1b      	ldrb	r3, [r3, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10d      	bne.n	8009eb4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	f107 0208 	add.w	r2, r7, #8
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
 8009ea8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3301      	adds	r3, #1
 8009eae:	2202      	movs	r2, #2
 8009eb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009eb2:	e100      	b.n	800a0b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	f107 0208 	add.w	r2, r7, #8
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	4798      	blx	r3
 8009ec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	2202      	movs	r2, #2
 8009ecc:	701a      	strb	r2, [r3, #0]
      break;
 8009ece:	e0f2      	b.n	800a0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	885b      	ldrh	r3, [r3, #2]
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b05      	cmp	r3, #5
 8009ed8:	f200 80ac 	bhi.w	800a034 <USBD_GetDescriptor+0x204>
 8009edc:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <USBD_GetDescriptor+0xb4>)
 8009ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee2:	bf00      	nop
 8009ee4:	08009efd 	.word	0x08009efd
 8009ee8:	08009f31 	.word	0x08009f31
 8009eec:	08009f65 	.word	0x08009f65
 8009ef0:	08009f99 	.word	0x08009f99
 8009ef4:	08009fcd 	.word	0x08009fcd
 8009ef8:	0800a001 	.word	0x0800a001
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	7c12      	ldrb	r2, [r2, #16]
 8009f14:	f107 0108 	add.w	r1, r7, #8
 8009f18:	4610      	mov	r0, r2
 8009f1a:	4798      	blx	r3
 8009f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f1e:	e091      	b.n	800a044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 facb 	bl	800a4be <USBD_CtlError>
            err++;
 8009f28:	7afb      	ldrb	r3, [r7, #11]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f2e:	e089      	b.n	800a044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00b      	beq.n	8009f54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	7c12      	ldrb	r2, [r2, #16]
 8009f48:	f107 0108 	add.w	r1, r7, #8
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4798      	blx	r3
 8009f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f52:	e077      	b.n	800a044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fab1 	bl	800a4be <USBD_CtlError>
            err++;
 8009f5c:	7afb      	ldrb	r3, [r7, #11]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	72fb      	strb	r3, [r7, #11]
          break;
 8009f62:	e06f      	b.n	800a044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00b      	beq.n	8009f88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	7c12      	ldrb	r2, [r2, #16]
 8009f7c:	f107 0108 	add.w	r1, r7, #8
 8009f80:	4610      	mov	r0, r2
 8009f82:	4798      	blx	r3
 8009f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f86:	e05d      	b.n	800a044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fa97 	bl	800a4be <USBD_CtlError>
            err++;
 8009f90:	7afb      	ldrb	r3, [r7, #11]
 8009f92:	3301      	adds	r3, #1
 8009f94:	72fb      	strb	r3, [r7, #11]
          break;
 8009f96:	e055      	b.n	800a044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00b      	beq.n	8009fbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	7c12      	ldrb	r2, [r2, #16]
 8009fb0:	f107 0108 	add.w	r1, r7, #8
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4798      	blx	r3
 8009fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fba:	e043      	b.n	800a044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fa7d 	bl	800a4be <USBD_CtlError>
            err++;
 8009fc4:	7afb      	ldrb	r3, [r7, #11]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fca:	e03b      	b.n	800a044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00b      	beq.n	8009ff0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	7c12      	ldrb	r2, [r2, #16]
 8009fe4:	f107 0108 	add.w	r1, r7, #8
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4798      	blx	r3
 8009fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fee:	e029      	b.n	800a044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fa63 	bl	800a4be <USBD_CtlError>
            err++;
 8009ff8:	7afb      	ldrb	r3, [r7, #11]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ffe:	e021      	b.n	800a044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00b      	beq.n	800a024 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	7c12      	ldrb	r2, [r2, #16]
 800a018:	f107 0108 	add.w	r1, r7, #8
 800a01c:	4610      	mov	r0, r2
 800a01e:	4798      	blx	r3
 800a020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a022:	e00f      	b.n	800a044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa49 	bl	800a4be <USBD_CtlError>
            err++;
 800a02c:	7afb      	ldrb	r3, [r7, #11]
 800a02e:	3301      	adds	r3, #1
 800a030:	72fb      	strb	r3, [r7, #11]
          break;
 800a032:	e007      	b.n	800a044 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa41 	bl	800a4be <USBD_CtlError>
          err++;
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	3301      	adds	r3, #1
 800a040:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a042:	bf00      	nop
      }
      break;
 800a044:	e037      	b.n	800a0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	7c1b      	ldrb	r3, [r3, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a056:	f107 0208 	add.w	r2, r7, #8
 800a05a:	4610      	mov	r0, r2
 800a05c:	4798      	blx	r3
 800a05e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a060:	e029      	b.n	800a0b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fa2a 	bl	800a4be <USBD_CtlError>
        err++;
 800a06a:	7afb      	ldrb	r3, [r7, #11]
 800a06c:	3301      	adds	r3, #1
 800a06e:	72fb      	strb	r3, [r7, #11]
      break;
 800a070:	e021      	b.n	800a0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	7c1b      	ldrb	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10d      	bne.n	800a096 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a082:	f107 0208 	add.w	r2, r7, #8
 800a086:	4610      	mov	r0, r2
 800a088:	4798      	blx	r3
 800a08a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	3301      	adds	r3, #1
 800a090:	2207      	movs	r2, #7
 800a092:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a094:	e00f      	b.n	800a0b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fa10 	bl	800a4be <USBD_CtlError>
        err++;
 800a09e:	7afb      	ldrb	r3, [r7, #11]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a0a4:	e007      	b.n	800a0b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa08 	bl	800a4be <USBD_CtlError>
      err++;
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a0b4:	bf00      	nop
  }

  if (err != 0U)
 800a0b6:	7afb      	ldrb	r3, [r7, #11]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d11e      	bne.n	800a0fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	88db      	ldrh	r3, [r3, #6]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d016      	beq.n	800a0f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a0c4:	893b      	ldrh	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00e      	beq.n	800a0e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	88da      	ldrh	r2, [r3, #6]
 800a0ce:	893b      	ldrh	r3, [r7, #8]
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	bf28      	it	cs
 800a0d4:	4613      	movcs	r3, r2
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0da:	893b      	ldrh	r3, [r7, #8]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fa5d 	bl	800a5a0 <USBD_CtlSendData>
 800a0e6:	e009      	b.n	800a0fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f9e7 	bl	800a4be <USBD_CtlError>
 800a0f0:	e004      	b.n	800a0fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 faae 	bl	800a654 <USBD_CtlSendStatus>
 800a0f8:	e000      	b.n	800a0fc <USBD_GetDescriptor+0x2cc>
    return;
 800a0fa:	bf00      	nop
  }
}
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop

0800a104 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	889b      	ldrh	r3, [r3, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d131      	bne.n	800a17a <USBD_SetAddress+0x76>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	88db      	ldrh	r3, [r3, #6]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d12d      	bne.n	800a17a <USBD_SetAddress+0x76>
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	885b      	ldrh	r3, [r3, #2]
 800a122:	2b7f      	cmp	r3, #127	; 0x7f
 800a124:	d829      	bhi.n	800a17a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	885b      	ldrh	r3, [r3, #2]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a130:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d104      	bne.n	800a148 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f9bc 	bl	800a4be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a146:	e01d      	b.n	800a184 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	7bfa      	ldrb	r2, [r7, #15]
 800a14c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f003 fe41 	bl	800dddc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fa7a 	bl	800a654 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d004      	beq.n	800a170 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2202      	movs	r2, #2
 800a16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	e009      	b.n	800a184 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a178:	e004      	b.n	800a184 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f99e 	bl	800a4be <USBD_CtlError>
  }
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	885b      	ldrh	r3, [r3, #2]
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	4b4e      	ldr	r3, [pc, #312]	; (800a2dc <USBD_SetConfig+0x150>)
 800a1a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1a4:	4b4d      	ldr	r3, [pc, #308]	; (800a2dc <USBD_SetConfig+0x150>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d905      	bls.n	800a1b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f985 	bl	800a4be <USBD_CtlError>
    return USBD_FAIL;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e08c      	b.n	800a2d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d002      	beq.n	800a1ca <USBD_SetConfig+0x3e>
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	d029      	beq.n	800a21c <USBD_SetConfig+0x90>
 800a1c8:	e075      	b.n	800a2b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1ca:	4b44      	ldr	r3, [pc, #272]	; (800a2dc <USBD_SetConfig+0x150>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d020      	beq.n	800a214 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a1d2:	4b42      	ldr	r3, [pc, #264]	; (800a2dc <USBD_SetConfig+0x150>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1dc:	4b3f      	ldr	r3, [pc, #252]	; (800a2dc <USBD_SetConfig+0x150>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7fe ffe7 	bl	80091b6 <USBD_SetClassConfig>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d008      	beq.n	800a204 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f962 	bl	800a4be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a202:	e065      	b.n	800a2d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fa25 	bl	800a654 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2203      	movs	r2, #3
 800a20e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a212:	e05d      	b.n	800a2d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fa1d 	bl	800a654 <USBD_CtlSendStatus>
      break;
 800a21a:	e059      	b.n	800a2d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a21c:	4b2f      	ldr	r3, [pc, #188]	; (800a2dc <USBD_SetConfig+0x150>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d112      	bne.n	800a24a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a22c:	4b2b      	ldr	r3, [pc, #172]	; (800a2dc <USBD_SetConfig+0x150>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a236:	4b29      	ldr	r3, [pc, #164]	; (800a2dc <USBD_SetConfig+0x150>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7fe ffd6 	bl	80091ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa06 	bl	800a654 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a248:	e042      	b.n	800a2d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a24a:	4b24      	ldr	r3, [pc, #144]	; (800a2dc <USBD_SetConfig+0x150>)
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	429a      	cmp	r2, r3
 800a256:	d02a      	beq.n	800a2ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7fe ffc4 	bl	80091ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a266:	4b1d      	ldr	r3, [pc, #116]	; (800a2dc <USBD_SetConfig+0x150>)
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a270:	4b1a      	ldr	r3, [pc, #104]	; (800a2dc <USBD_SetConfig+0x150>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	4619      	mov	r1, r3
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7fe ff9d 	bl	80091b6 <USBD_SetClassConfig>
 800a27c:	4603      	mov	r3, r0
 800a27e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00f      	beq.n	800a2a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f918 	bl	800a4be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fe ffa9 	bl	80091ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2202      	movs	r2, #2
 800a2a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a2a4:	e014      	b.n	800a2d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f9d4 	bl	800a654 <USBD_CtlSendStatus>
      break;
 800a2ac:	e010      	b.n	800a2d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f9d0 	bl	800a654 <USBD_CtlSendStatus>
      break;
 800a2b4:	e00c      	b.n	800a2d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f900 	bl	800a4be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2be:	4b07      	ldr	r3, [pc, #28]	; (800a2dc <USBD_SetConfig+0x150>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7fe ff92 	bl	80091ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ce:	bf00      	nop
  }

  return ret;
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000868 	.word	0x20000868

0800a2e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	88db      	ldrh	r3, [r3, #6]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d004      	beq.n	800a2fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f8e2 	bl	800a4be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2fa:	e023      	b.n	800a344 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b02      	cmp	r3, #2
 800a306:	dc02      	bgt.n	800a30e <USBD_GetConfig+0x2e>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	dc03      	bgt.n	800a314 <USBD_GetConfig+0x34>
 800a30c:	e015      	b.n	800a33a <USBD_GetConfig+0x5a>
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d00b      	beq.n	800a32a <USBD_GetConfig+0x4a>
 800a312:	e012      	b.n	800a33a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3308      	adds	r3, #8
 800a31e:	2201      	movs	r2, #1
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f93c 	bl	800a5a0 <USBD_CtlSendData>
        break;
 800a328:	e00c      	b.n	800a344 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3304      	adds	r3, #4
 800a32e:	2201      	movs	r2, #1
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f934 	bl	800a5a0 <USBD_CtlSendData>
        break;
 800a338:	e004      	b.n	800a344 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f8be 	bl	800a4be <USBD_CtlError>
        break;
 800a342:	bf00      	nop
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	3b01      	subs	r3, #1
 800a360:	2b02      	cmp	r3, #2
 800a362:	d81e      	bhi.n	800a3a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	88db      	ldrh	r3, [r3, #6]
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d004      	beq.n	800a376 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f8a5 	bl	800a4be <USBD_CtlError>
        break;
 800a374:	e01a      	b.n	800a3ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a382:	2b00      	cmp	r3, #0
 800a384:	d005      	beq.n	800a392 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f043 0202 	orr.w	r2, r3, #2
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	330c      	adds	r3, #12
 800a396:	2202      	movs	r2, #2
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f900 	bl	800a5a0 <USBD_CtlSendData>
      break;
 800a3a0:	e004      	b.n	800a3ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f88a 	bl	800a4be <USBD_CtlError>
      break;
 800a3aa:	bf00      	nop
  }
}
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	885b      	ldrh	r3, [r3, #2]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d107      	bne.n	800a3d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f940 	bl	800a654 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a3d4:	e013      	b.n	800a3fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	885b      	ldrh	r3, [r3, #2]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d10b      	bne.n	800a3f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	889b      	ldrh	r3, [r3, #4]
 800a3e2:	0a1b      	lsrs	r3, r3, #8
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f930 	bl	800a654 <USBD_CtlSendStatus>
}
 800a3f4:	e003      	b.n	800a3fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f860 	bl	800a4be <USBD_CtlError>
}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a416:	b2db      	uxtb	r3, r3
 800a418:	3b01      	subs	r3, #1
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d80b      	bhi.n	800a436 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	885b      	ldrh	r3, [r3, #2]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d10c      	bne.n	800a440 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f910 	bl	800a654 <USBD_CtlSendStatus>
      }
      break;
 800a434:	e004      	b.n	800a440 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f840 	bl	800a4be <USBD_CtlError>
      break;
 800a43e:	e000      	b.n	800a442 <USBD_ClrFeature+0x3c>
      break;
 800a440:	bf00      	nop
  }
}
 800a442:	bf00      	nop
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	781a      	ldrb	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3301      	adds	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	781a      	ldrb	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f7ff fa41 	bl	80098fc <SWAPBYTE>
 800a47a:	4603      	mov	r3, r0
 800a47c:	461a      	mov	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3301      	adds	r3, #1
 800a486:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3301      	adds	r3, #1
 800a48c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff fa34 	bl	80098fc <SWAPBYTE>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fa27 	bl	80098fc <SWAPBYTE>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	80da      	strh	r2, [r3, #6]
}
 800a4b6:	bf00      	nop
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4c8:	2180      	movs	r1, #128	; 0x80
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f003 fc1c 	bl	800dd08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f003 fc18 	bl	800dd08 <USBD_LL_StallEP>
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d036      	beq.n	800a564 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4fa:	6938      	ldr	r0, [r7, #16]
 800a4fc:	f000 f836 	bl	800a56c <USBD_GetLen>
 800a500:	4603      	mov	r3, r0
 800a502:	3301      	adds	r3, #1
 800a504:	b29b      	uxth	r3, r3
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	b29a      	uxth	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	4413      	add	r3, r2
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7812      	ldrb	r2, [r2, #0]
 800a518:	701a      	strb	r2, [r3, #0]
  idx++;
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	3301      	adds	r3, #1
 800a51e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	4413      	add	r3, r2
 800a526:	2203      	movs	r2, #3
 800a528:	701a      	strb	r2, [r3, #0]
  idx++;
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	3301      	adds	r3, #1
 800a52e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a530:	e013      	b.n	800a55a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	4413      	add	r3, r2
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	7812      	ldrb	r2, [r2, #0]
 800a53c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	3301      	adds	r3, #1
 800a542:	613b      	str	r3, [r7, #16]
    idx++;
 800a544:	7dfb      	ldrb	r3, [r7, #23]
 800a546:	3301      	adds	r3, #1
 800a548:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a54a:	7dfb      	ldrb	r3, [r7, #23]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	4413      	add	r3, r2
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
    idx++;
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	3301      	adds	r3, #1
 800a558:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e7      	bne.n	800a532 <USBD_GetString+0x52>
 800a562:	e000      	b.n	800a566 <USBD_GetString+0x86>
    return;
 800a564:	bf00      	nop
  }
}
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a574:	2300      	movs	r3, #0
 800a576:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a57c:	e005      	b.n	800a58a <USBD_GetLen+0x1e>
  {
    len++;
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	3301      	adds	r3, #1
 800a582:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	3301      	adds	r3, #1
 800a588:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1f5      	bne.n	800a57e <USBD_GetLen+0x12>
  }

  return len;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f003 fc27 	bl	800de1a <USBD_LL_Transmit>

  return USBD_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b084      	sub	sp, #16
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	60f8      	str	r0, [r7, #12]
 800a5de:	60b9      	str	r1, [r7, #8]
 800a5e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f003 fc16 	bl	800de1a <USBD_LL_Transmit>

  return USBD_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2203      	movs	r2, #3
 800a608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	2100      	movs	r1, #0
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f003 fc1a 	bl	800de5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	60f8      	str	r0, [r7, #12]
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	2100      	movs	r1, #0
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f003 fc09 	bl	800de5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2204      	movs	r2, #4
 800a660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a664:	2300      	movs	r3, #0
 800a666:	2200      	movs	r2, #0
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f003 fbd5 	bl	800de1a <USBD_LL_Transmit>

  return USBD_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2205      	movs	r2, #5
 800a686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a68a:	2300      	movs	r3, #0
 800a68c:	2200      	movs	r2, #0
 800a68e:	2100      	movs	r1, #0
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f003 fbe3 	bl	800de5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <__NVIC_SetPriority>:
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	6039      	str	r1, [r7, #0]
 800a6aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	db0a      	blt.n	800a6ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	490c      	ldr	r1, [pc, #48]	; (800a6ec <__NVIC_SetPriority+0x4c>)
 800a6ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6be:	0112      	lsls	r2, r2, #4
 800a6c0:	b2d2      	uxtb	r2, r2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a6c8:	e00a      	b.n	800a6e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	4908      	ldr	r1, [pc, #32]	; (800a6f0 <__NVIC_SetPriority+0x50>)
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	3b04      	subs	r3, #4
 800a6d8:	0112      	lsls	r2, r2, #4
 800a6da:	b2d2      	uxtb	r2, r2
 800a6dc:	440b      	add	r3, r1
 800a6de:	761a      	strb	r2, [r3, #24]
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	e000e100 	.word	0xe000e100
 800a6f0:	e000ed00 	.word	0xe000ed00

0800a6f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <SysTick_Handler+0x1c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a6fc:	f001 feb2 	bl	800c464 <xTaskGetSchedulerState>
 800a700:	4603      	mov	r3, r0
 800a702:	2b01      	cmp	r3, #1
 800a704:	d001      	beq.n	800a70a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a706:	f002 fc97 	bl	800d038 <xPortSysTickHandler>
  }
}
 800a70a:	bf00      	nop
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	e000e010 	.word	0xe000e010

0800a714 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a718:	2100      	movs	r1, #0
 800a71a:	f06f 0004 	mvn.w	r0, #4
 800a71e:	f7ff ffbf 	bl	800a6a0 <__NVIC_SetPriority>
#endif
}
 800a722:	bf00      	nop
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a72e:	f3ef 8305 	mrs	r3, IPSR
 800a732:	603b      	str	r3, [r7, #0]
  return(result);
 800a734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a73a:	f06f 0305 	mvn.w	r3, #5
 800a73e:	607b      	str	r3, [r7, #4]
 800a740:	e00c      	b.n	800a75c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a742:	4b0a      	ldr	r3, [pc, #40]	; (800a76c <osKernelInitialize+0x44>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d105      	bne.n	800a756 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a74a:	4b08      	ldr	r3, [pc, #32]	; (800a76c <osKernelInitialize+0x44>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a750:	2300      	movs	r3, #0
 800a752:	607b      	str	r3, [r7, #4]
 800a754:	e002      	b.n	800a75c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a756:	f04f 33ff 	mov.w	r3, #4294967295
 800a75a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a75c:	687b      	ldr	r3, [r7, #4]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	2000086c 	.word	0x2000086c

0800a770 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a776:	f3ef 8305 	mrs	r3, IPSR
 800a77a:	603b      	str	r3, [r7, #0]
  return(result);
 800a77c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d003      	beq.n	800a78a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a782:	f06f 0305 	mvn.w	r3, #5
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	e010      	b.n	800a7ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a78a:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <osKernelStart+0x48>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d109      	bne.n	800a7a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a792:	f7ff ffbf 	bl	800a714 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a796:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <osKernelStart+0x48>)
 800a798:	2202      	movs	r2, #2
 800a79a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a79c:	f001 fa1a 	bl	800bbd4 <vTaskStartScheduler>
      stat = osOK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	607b      	str	r3, [r7, #4]
 800a7a4:	e002      	b.n	800a7ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a7ac:	687b      	ldr	r3, [r7, #4]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	2000086c 	.word	0x2000086c

0800a7bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08e      	sub	sp, #56	; 0x38
 800a7c0:	af04      	add	r7, sp, #16
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7cc:	f3ef 8305 	mrs	r3, IPSR
 800a7d0:	617b      	str	r3, [r7, #20]
  return(result);
 800a7d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d17f      	bne.n	800a8d8 <osThreadNew+0x11c>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d07c      	beq.n	800a8d8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a7de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7e2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a7e4:	2318      	movs	r3, #24
 800a7e6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d045      	beq.n	800a884 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <osThreadNew+0x4a>
        name = attr->name;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d002      	beq.n	800a814 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d008      	beq.n	800a82c <osThreadNew+0x70>
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	2b38      	cmp	r3, #56	; 0x38
 800a81e:	d805      	bhi.n	800a82c <osThreadNew+0x70>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <osThreadNew+0x74>
        return (NULL);
 800a82c:	2300      	movs	r3, #0
 800a82e:	e054      	b.n	800a8da <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d003      	beq.n	800a840 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	089b      	lsrs	r3, r3, #2
 800a83e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00e      	beq.n	800a866 <osThreadNew+0xaa>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	2b6b      	cmp	r3, #107	; 0x6b
 800a84e:	d90a      	bls.n	800a866 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a854:	2b00      	cmp	r3, #0
 800a856:	d006      	beq.n	800a866 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d002      	beq.n	800a866 <osThreadNew+0xaa>
        mem = 1;
 800a860:	2301      	movs	r3, #1
 800a862:	61bb      	str	r3, [r7, #24]
 800a864:	e010      	b.n	800a888 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10c      	bne.n	800a888 <osThreadNew+0xcc>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d108      	bne.n	800a888 <osThreadNew+0xcc>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d104      	bne.n	800a888 <osThreadNew+0xcc>
          mem = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	61bb      	str	r3, [r7, #24]
 800a882:	e001      	b.n	800a888 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d110      	bne.n	800a8b0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a896:	9202      	str	r2, [sp, #8]
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	6a3a      	ldr	r2, [r7, #32]
 800a8a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 feb9 	bl	800b61c <xTaskCreateStatic>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	613b      	str	r3, [r7, #16]
 800a8ae:	e013      	b.n	800a8d8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d110      	bne.n	800a8d8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	f107 0310 	add.w	r3, r7, #16
 800a8be:	9301      	str	r3, [sp, #4]
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 ff04 	bl	800b6d6 <xTaskCreate>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d001      	beq.n	800a8d8 <osThreadNew+0x11c>
            hTask = NULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a8d8:	693b      	ldr	r3, [r7, #16]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3728      	adds	r7, #40	; 0x28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ea:	f3ef 8305 	mrs	r3, IPSR
 800a8ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <osDelay+0x1c>
    stat = osErrorISR;
 800a8f6:	f06f 0305 	mvn.w	r3, #5
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	e007      	b.n	800a90e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <osDelay+0x2c>
      vTaskDelay(ticks);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 f829 	bl	800b960 <vTaskDelay>
    }
  }

  return (stat);
 800a90e:	68fb      	ldr	r3, [r7, #12]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	; 0x28
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a928:	f3ef 8305 	mrs	r3, IPSR
 800a92c:	613b      	str	r3, [r7, #16]
  return(result);
 800a92e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a930:	2b00      	cmp	r3, #0
 800a932:	d15f      	bne.n	800a9f4 <osMessageQueueNew+0xdc>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d05c      	beq.n	800a9f4 <osMessageQueueNew+0xdc>
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d059      	beq.n	800a9f4 <osMessageQueueNew+0xdc>
    mem = -1;
 800a940:	f04f 33ff 	mov.w	r3, #4294967295
 800a944:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d029      	beq.n	800a9a0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d012      	beq.n	800a97a <osMessageQueueNew+0x62>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	2b4f      	cmp	r3, #79	; 0x4f
 800a95a:	d90e      	bls.n	800a97a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00a      	beq.n	800a97a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	695a      	ldr	r2, [r3, #20]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	68b9      	ldr	r1, [r7, #8]
 800a96c:	fb01 f303 	mul.w	r3, r1, r3
 800a970:	429a      	cmp	r2, r3
 800a972:	d302      	bcc.n	800a97a <osMessageQueueNew+0x62>
        mem = 1;
 800a974:	2301      	movs	r3, #1
 800a976:	61bb      	str	r3, [r7, #24]
 800a978:	e014      	b.n	800a9a4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d110      	bne.n	800a9a4 <osMessageQueueNew+0x8c>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10c      	bne.n	800a9a4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d108      	bne.n	800a9a4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d104      	bne.n	800a9a4 <osMessageQueueNew+0x8c>
          mem = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	e001      	b.n	800a9a4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d10b      	bne.n	800a9c2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691a      	ldr	r2, [r3, #16]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	9100      	str	r1, [sp, #0]
 800a9b6:	68b9      	ldr	r1, [r7, #8]
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 f971 	bl	800aca0 <xQueueGenericCreateStatic>
 800a9be:	61f8      	str	r0, [r7, #28]
 800a9c0:	e008      	b.n	800a9d4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d105      	bne.n	800a9d4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 f9df 	bl	800ad90 <xQueueGenericCreate>
 800a9d2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00c      	beq.n	800a9f4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d003      	beq.n	800a9e8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	617b      	str	r3, [r7, #20]
 800a9e6:	e001      	b.n	800a9ec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a9ec:	6979      	ldr	r1, [r7, #20]
 800a9ee:	69f8      	ldr	r0, [r7, #28]
 800a9f0:	f000 fdb6 	bl	800b560 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a9f4:	69fb      	ldr	r3, [r7, #28]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3720      	adds	r7, #32
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
	...

0800aa00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4a07      	ldr	r2, [pc, #28]	; (800aa2c <vApplicationGetIdleTaskMemory+0x2c>)
 800aa10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <vApplicationGetIdleTaskMemory+0x30>)
 800aa16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa1e:	601a      	str	r2, [r3, #0]
}
 800aa20:	bf00      	nop
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	20000870 	.word	0x20000870
 800aa30:	200008dc 	.word	0x200008dc

0800aa34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4a07      	ldr	r2, [pc, #28]	; (800aa60 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	4a06      	ldr	r2, [pc, #24]	; (800aa64 <vApplicationGetTimerTaskMemory+0x30>)
 800aa4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa52:	601a      	str	r2, [r3, #0]
}
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	20000cdc 	.word	0x20000cdc
 800aa64:	20000d48 	.word	0x20000d48

0800aa68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f103 0208 	add.w	r2, r3, #8
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f103 0208 	add.w	r2, r3, #8
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f103 0208 	add.w	r2, r3, #8
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aab6:	bf00      	nop
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aac2:	b480      	push	{r7}
 800aac4:	b085      	sub	sp, #20
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	689a      	ldr	r2, [r3, #8]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	601a      	str	r2, [r3, #0]
}
 800aafe:	bf00      	nop
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab20:	d103      	bne.n	800ab2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	e00c      	b.n	800ab44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	60fb      	str	r3, [r7, #12]
 800ab30:	e002      	b.n	800ab38 <vListInsert+0x2e>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d2f6      	bcs.n	800ab32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	683a      	ldr	r2, [r7, #0]
 800ab5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	601a      	str	r2, [r3, #0]
}
 800ab70:	bf00      	nop
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	6892      	ldr	r2, [r2, #8]
 800ab92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	6852      	ldr	r2, [r2, #4]
 800ab9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d103      	bne.n	800abb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	1e5a      	subs	r2, r3, #1
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abfa:	f002 f98b 	bl	800cf14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac06:	68f9      	ldr	r1, [r7, #12]
 800ac08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac0a:	fb01 f303 	mul.w	r3, r1, r3
 800ac0e:	441a      	add	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	68f9      	ldr	r1, [r7, #12]
 800ac2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac30:	fb01 f303 	mul.w	r3, r1, r3
 800ac34:	441a      	add	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	22ff      	movs	r2, #255	; 0xff
 800ac3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	22ff      	movs	r2, #255	; 0xff
 800ac46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d114      	bne.n	800ac7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d01a      	beq.n	800ac8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3310      	adds	r3, #16
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 fa43 	bl	800c0e8 <xTaskRemoveFromEventList>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d012      	beq.n	800ac8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac68:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <xQueueGenericReset+0xcc>)
 800ac6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	e009      	b.n	800ac8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3310      	adds	r3, #16
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7ff fef2 	bl	800aa68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3324      	adds	r3, #36	; 0x24
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff feed 	bl	800aa68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac8e:	f002 f971 	bl	800cf74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac92:	2301      	movs	r3, #1
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	e000ed04 	.word	0xe000ed04

0800aca0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b08e      	sub	sp, #56	; 0x38
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10a      	bne.n	800ace6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <xQueueGenericCreateStatic+0x52>
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <xQueueGenericCreateStatic+0x56>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e000      	b.n	800acf8 <xQueueGenericCreateStatic+0x58>
 800acf6:	2300      	movs	r3, #0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	623b      	str	r3, [r7, #32]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d102      	bne.n	800ad1e <xQueueGenericCreateStatic+0x7e>
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <xQueueGenericCreateStatic+0x82>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <xQueueGenericCreateStatic+0x84>
 800ad22:	2300      	movs	r3, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	61fb      	str	r3, [r7, #28]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad3e:	2350      	movs	r3, #80	; 0x50
 800ad40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b50      	cmp	r3, #80	; 0x50
 800ad46:	d00a      	beq.n	800ad5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	61bb      	str	r3, [r7, #24]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00d      	beq.n	800ad86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	68b9      	ldr	r1, [r7, #8]
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f83f 	bl	800ae04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3730      	adds	r7, #48	; 0x30
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08a      	sub	sp, #40	; 0x28
 800ad94:	af02      	add	r7, sp, #8
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10a      	bne.n	800adba <xQueueGenericCreate+0x2a>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	613b      	str	r3, [r7, #16]
}
 800adb6:	bf00      	nop
 800adb8:	e7fe      	b.n	800adb8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	fb02 f303 	mul.w	r3, r2, r3
 800adc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	3350      	adds	r3, #80	; 0x50
 800adc8:	4618      	mov	r0, r3
 800adca:	f002 f9c5 	bl	800d158 <pvPortMalloc>
 800adce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d011      	beq.n	800adfa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	3350      	adds	r3, #80	; 0x50
 800adde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ade8:	79fa      	ldrb	r2, [r7, #7]
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	4613      	mov	r3, r2
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	68b9      	ldr	r1, [r7, #8]
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f805 	bl	800ae04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adfa:	69bb      	ldr	r3, [r7, #24]
	}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3720      	adds	r7, #32
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d103      	bne.n	800ae20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	e002      	b.n	800ae26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae32:	2101      	movs	r1, #1
 800ae34:	69b8      	ldr	r0, [r7, #24]
 800ae36:	f7ff fecb 	bl	800abd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	78fa      	ldrb	r2, [r7, #3]
 800ae3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08e      	sub	sp, #56	; 0x38
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10a      	bne.n	800ae7e <xQueueGenericSend+0x32>
	__asm volatile
 800ae68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae7a:	bf00      	nop
 800ae7c:	e7fe      	b.n	800ae7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <xQueueGenericSend+0x40>
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <xQueueGenericSend+0x44>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e000      	b.n	800ae92 <xQueueGenericSend+0x46>
 800ae90:	2300      	movs	r3, #0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10a      	bne.n	800aeac <xQueueGenericSend+0x60>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aea8:	bf00      	nop
 800aeaa:	e7fe      	b.n	800aeaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d103      	bne.n	800aeba <xQueueGenericSend+0x6e>
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d101      	bne.n	800aebe <xQueueGenericSend+0x72>
 800aeba:	2301      	movs	r3, #1
 800aebc:	e000      	b.n	800aec0 <xQueueGenericSend+0x74>
 800aebe:	2300      	movs	r3, #0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10a      	bne.n	800aeda <xQueueGenericSend+0x8e>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	623b      	str	r3, [r7, #32]
}
 800aed6:	bf00      	nop
 800aed8:	e7fe      	b.n	800aed8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeda:	f001 fac3 	bl	800c464 <xTaskGetSchedulerState>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <xQueueGenericSend+0x9e>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <xQueueGenericSend+0xa2>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e000      	b.n	800aef0 <xQueueGenericSend+0xa4>
 800aeee:	2300      	movs	r3, #0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <xQueueGenericSend+0xbe>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	61fb      	str	r3, [r7, #28]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af0a:	f002 f803 	bl	800cf14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af16:	429a      	cmp	r2, r3
 800af18:	d302      	bcc.n	800af20 <xQueueGenericSend+0xd4>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d129      	bne.n	800af74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	68b9      	ldr	r1, [r7, #8]
 800af24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af26:	f000 fa0b 	bl	800b340 <prvCopyDataToQueue>
 800af2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af30:	2b00      	cmp	r3, #0
 800af32:	d010      	beq.n	800af56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	3324      	adds	r3, #36	; 0x24
 800af38:	4618      	mov	r0, r3
 800af3a:	f001 f8d5 	bl	800c0e8 <xTaskRemoveFromEventList>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d013      	beq.n	800af6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af44:	4b3f      	ldr	r3, [pc, #252]	; (800b044 <xQueueGenericSend+0x1f8>)
 800af46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	e00a      	b.n	800af6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d007      	beq.n	800af6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af5c:	4b39      	ldr	r3, [pc, #228]	; (800b044 <xQueueGenericSend+0x1f8>)
 800af5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af6c:	f002 f802 	bl	800cf74 <vPortExitCritical>
				return pdPASS;
 800af70:	2301      	movs	r3, #1
 800af72:	e063      	b.n	800b03c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d103      	bne.n	800af82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af7a:	f001 fffb 	bl	800cf74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af7e:	2300      	movs	r3, #0
 800af80:	e05c      	b.n	800b03c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af84:	2b00      	cmp	r3, #0
 800af86:	d106      	bne.n	800af96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af88:	f107 0314 	add.w	r3, r7, #20
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 f90f 	bl	800c1b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af92:	2301      	movs	r3, #1
 800af94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af96:	f001 ffed 	bl	800cf74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af9a:	f000 fe81 	bl	800bca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af9e:	f001 ffb9 	bl	800cf14 <vPortEnterCritical>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afa8:	b25b      	sxtb	r3, r3
 800afaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afae:	d103      	bne.n	800afb8 <xQueueGenericSend+0x16c>
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afbe:	b25b      	sxtb	r3, r3
 800afc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc4:	d103      	bne.n	800afce <xQueueGenericSend+0x182>
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afce:	f001 ffd1 	bl	800cf74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afd2:	1d3a      	adds	r2, r7, #4
 800afd4:	f107 0314 	add.w	r3, r7, #20
 800afd8:	4611      	mov	r1, r2
 800afda:	4618      	mov	r0, r3
 800afdc:	f001 f8fe 	bl	800c1dc <xTaskCheckForTimeOut>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d124      	bne.n	800b030 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe8:	f000 faa2 	bl	800b530 <prvIsQueueFull>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d018      	beq.n	800b024 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	3310      	adds	r3, #16
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f001 f824 	bl	800c048 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b002:	f000 fa2d 	bl	800b460 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b006:	f000 fe59 	bl	800bcbc <xTaskResumeAll>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f47f af7c 	bne.w	800af0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b012:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <xQueueGenericSend+0x1f8>)
 800b014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	e772      	b.n	800af0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b026:	f000 fa1b 	bl	800b460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b02a:	f000 fe47 	bl	800bcbc <xTaskResumeAll>
 800b02e:	e76c      	b.n	800af0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b032:	f000 fa15 	bl	800b460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b036:	f000 fe41 	bl	800bcbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b03a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3738      	adds	r7, #56	; 0x38
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	e000ed04 	.word	0xe000ed04

0800b048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b090      	sub	sp, #64	; 0x40
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d103      	bne.n	800b084 <xQueueGenericSendFromISR+0x3c>
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <xQueueGenericSendFromISR+0x40>
 800b084:	2301      	movs	r3, #1
 800b086:	e000      	b.n	800b08a <xQueueGenericSendFromISR+0x42>
 800b088:	2300      	movs	r3, #0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b0a0:	bf00      	nop
 800b0a2:	e7fe      	b.n	800b0a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d103      	bne.n	800b0b2 <xQueueGenericSendFromISR+0x6a>
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d101      	bne.n	800b0b6 <xQueueGenericSendFromISR+0x6e>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e000      	b.n	800b0b8 <xQueueGenericSendFromISR+0x70>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10a      	bne.n	800b0d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	623b      	str	r3, [r7, #32]
}
 800b0ce:	bf00      	nop
 800b0d0:	e7fe      	b.n	800b0d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0d2:	f002 f801 	bl	800d0d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0d6:	f3ef 8211 	mrs	r2, BASEPRI
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	61fa      	str	r2, [r7, #28]
 800b0ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d302      	bcc.n	800b104 <xQueueGenericSendFromISR+0xbc>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d12f      	bne.n	800b164 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b114:	683a      	ldr	r2, [r7, #0]
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b11a:	f000 f911 	bl	800b340 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b11e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b126:	d112      	bne.n	800b14e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d016      	beq.n	800b15e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	3324      	adds	r3, #36	; 0x24
 800b134:	4618      	mov	r0, r3
 800b136:	f000 ffd7 	bl	800c0e8 <xTaskRemoveFromEventList>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00e      	beq.n	800b15e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00b      	beq.n	800b15e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	601a      	str	r2, [r3, #0]
 800b14c:	e007      	b.n	800b15e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b14e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b152:	3301      	adds	r3, #1
 800b154:	b2db      	uxtb	r3, r3
 800b156:	b25a      	sxtb	r2, r3
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b15e:	2301      	movs	r3, #1
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b162:	e001      	b.n	800b168 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b16a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b172:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b176:	4618      	mov	r0, r3
 800b178:	3740      	adds	r7, #64	; 0x40
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
	...

0800b180 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b08c      	sub	sp, #48	; 0x30
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	2b00      	cmp	r3, #0
 800b198:	d10a      	bne.n	800b1b0 <xQueueReceive+0x30>
	__asm volatile
 800b19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	623b      	str	r3, [r7, #32]
}
 800b1ac:	bf00      	nop
 800b1ae:	e7fe      	b.n	800b1ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d103      	bne.n	800b1be <xQueueReceive+0x3e>
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <xQueueReceive+0x42>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e000      	b.n	800b1c4 <xQueueReceive+0x44>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <xQueueReceive+0x5e>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	61fb      	str	r3, [r7, #28]
}
 800b1da:	bf00      	nop
 800b1dc:	e7fe      	b.n	800b1dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1de:	f001 f941 	bl	800c464 <xTaskGetSchedulerState>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d102      	bne.n	800b1ee <xQueueReceive+0x6e>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <xQueueReceive+0x72>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e000      	b.n	800b1f4 <xQueueReceive+0x74>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <xQueueReceive+0x8e>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	61bb      	str	r3, [r7, #24]
}
 800b20a:	bf00      	nop
 800b20c:	e7fe      	b.n	800b20c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b20e:	f001 fe81 	bl	800cf14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d01f      	beq.n	800b25e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b222:	f000 f8f7 	bl	800b414 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	1e5a      	subs	r2, r3, #1
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00f      	beq.n	800b256 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	3310      	adds	r3, #16
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 ff54 	bl	800c0e8 <xTaskRemoveFromEventList>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d007      	beq.n	800b256 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b246:	4b3d      	ldr	r3, [pc, #244]	; (800b33c <xQueueReceive+0x1bc>)
 800b248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b256:	f001 fe8d 	bl	800cf74 <vPortExitCritical>
				return pdPASS;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e069      	b.n	800b332 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d103      	bne.n	800b26c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b264:	f001 fe86 	bl	800cf74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b268:	2300      	movs	r3, #0
 800b26a:	e062      	b.n	800b332 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d106      	bne.n	800b280 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b272:	f107 0310 	add.w	r3, r7, #16
 800b276:	4618      	mov	r0, r3
 800b278:	f000 ff9a 	bl	800c1b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b27c:	2301      	movs	r3, #1
 800b27e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b280:	f001 fe78 	bl	800cf74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b284:	f000 fd0c 	bl	800bca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b288:	f001 fe44 	bl	800cf14 <vPortEnterCritical>
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b292:	b25b      	sxtb	r3, r3
 800b294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b298:	d103      	bne.n	800b2a2 <xQueueReceive+0x122>
 800b29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a8:	b25b      	sxtb	r3, r3
 800b2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ae:	d103      	bne.n	800b2b8 <xQueueReceive+0x138>
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b8:	f001 fe5c 	bl	800cf74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2bc:	1d3a      	adds	r2, r7, #4
 800b2be:	f107 0310 	add.w	r3, r7, #16
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f000 ff89 	bl	800c1dc <xTaskCheckForTimeOut>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d123      	bne.n	800b318 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d2:	f000 f917 	bl	800b504 <prvIsQueueEmpty>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d017      	beq.n	800b30c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	3324      	adds	r3, #36	; 0x24
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	4611      	mov	r1, r2
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 feaf 	bl	800c048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ec:	f000 f8b8 	bl	800b460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2f0:	f000 fce4 	bl	800bcbc <xTaskResumeAll>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d189      	bne.n	800b20e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b2fa:	4b10      	ldr	r3, [pc, #64]	; (800b33c <xQueueReceive+0x1bc>)
 800b2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b300:	601a      	str	r2, [r3, #0]
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	e780      	b.n	800b20e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b30e:	f000 f8a7 	bl	800b460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b312:	f000 fcd3 	bl	800bcbc <xTaskResumeAll>
 800b316:	e77a      	b.n	800b20e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b31a:	f000 f8a1 	bl	800b460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b31e:	f000 fccd 	bl	800bcbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b324:	f000 f8ee 	bl	800b504 <prvIsQueueEmpty>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f43f af6f 	beq.w	800b20e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b332:	4618      	mov	r0, r3
 800b334:	3730      	adds	r7, #48	; 0x30
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	e000ed04 	.word	0xe000ed04

0800b340 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b34c:	2300      	movs	r3, #0
 800b34e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b354:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10d      	bne.n	800b37a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d14d      	bne.n	800b402 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f001 f898 	bl	800c4a0 <xTaskPriorityDisinherit>
 800b370:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	609a      	str	r2, [r3, #8]
 800b378:	e043      	b.n	800b402 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d119      	bne.n	800b3b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6858      	ldr	r0, [r3, #4]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b388:	461a      	mov	r2, r3
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	f002 fe18 	bl	800dfc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b398:	441a      	add	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d32b      	bcc.n	800b402 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	605a      	str	r2, [r3, #4]
 800b3b2:	e026      	b.n	800b402 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	68d8      	ldr	r0, [r3, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3bc:	461a      	mov	r2, r3
 800b3be:	68b9      	ldr	r1, [r7, #8]
 800b3c0:	f002 fdfe 	bl	800dfc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	68da      	ldr	r2, [r3, #12]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3cc:	425b      	negs	r3, r3
 800b3ce:	441a      	add	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	68da      	ldr	r2, [r3, #12]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d207      	bcs.n	800b3f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	689a      	ldr	r2, [r3, #8]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	425b      	negs	r3, r3
 800b3ea:	441a      	add	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d105      	bne.n	800b402 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	3b01      	subs	r3, #1
 800b400:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b40a:	697b      	ldr	r3, [r7, #20]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b422:	2b00      	cmp	r3, #0
 800b424:	d018      	beq.n	800b458 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42e:	441a      	add	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68da      	ldr	r2, [r3, #12]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d303      	bcc.n	800b448 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68d9      	ldr	r1, [r3, #12]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b450:	461a      	mov	r2, r3
 800b452:	6838      	ldr	r0, [r7, #0]
 800b454:	f002 fdb4 	bl	800dfc0 <memcpy>
	}
}
 800b458:	bf00      	nop
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b468:	f001 fd54 	bl	800cf14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b472:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b474:	e011      	b.n	800b49a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d012      	beq.n	800b4a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	3324      	adds	r3, #36	; 0x24
 800b482:	4618      	mov	r0, r3
 800b484:	f000 fe30 	bl	800c0e8 <xTaskRemoveFromEventList>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b48e:	f000 ff07 	bl	800c2a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	3b01      	subs	r3, #1
 800b496:	b2db      	uxtb	r3, r3
 800b498:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dce9      	bgt.n	800b476 <prvUnlockQueue+0x16>
 800b4a2:	e000      	b.n	800b4a6 <prvUnlockQueue+0x46>
					break;
 800b4a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	22ff      	movs	r2, #255	; 0xff
 800b4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b4ae:	f001 fd61 	bl	800cf74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b4b2:	f001 fd2f 	bl	800cf14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4be:	e011      	b.n	800b4e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d012      	beq.n	800b4ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3310      	adds	r3, #16
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f000 fe0b 	bl	800c0e8 <xTaskRemoveFromEventList>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4d8:	f000 fee2 	bl	800c2a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4dc:	7bbb      	ldrb	r3, [r7, #14]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dce9      	bgt.n	800b4c0 <prvUnlockQueue+0x60>
 800b4ec:	e000      	b.n	800b4f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	22ff      	movs	r2, #255	; 0xff
 800b4f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b4f8:	f001 fd3c 	bl	800cf74 <vPortExitCritical>
}
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b50c:	f001 fd02 	bl	800cf14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b514:	2b00      	cmp	r3, #0
 800b516:	d102      	bne.n	800b51e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b518:	2301      	movs	r3, #1
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	e001      	b.n	800b522 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b51e:	2300      	movs	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b522:	f001 fd27 	bl	800cf74 <vPortExitCritical>

	return xReturn;
 800b526:	68fb      	ldr	r3, [r7, #12]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b538:	f001 fcec 	bl	800cf14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b544:	429a      	cmp	r2, r3
 800b546:	d102      	bne.n	800b54e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b548:	2301      	movs	r3, #1
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	e001      	b.n	800b552 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b54e:	2300      	movs	r3, #0
 800b550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b552:	f001 fd0f 	bl	800cf74 <vPortExitCritical>

	return xReturn;
 800b556:	68fb      	ldr	r3, [r7, #12]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	e014      	b.n	800b59a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b570:	4a0f      	ldr	r2, [pc, #60]	; (800b5b0 <vQueueAddToRegistry+0x50>)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10b      	bne.n	800b594 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b57c:	490c      	ldr	r1, [pc, #48]	; (800b5b0 <vQueueAddToRegistry+0x50>)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b586:	4a0a      	ldr	r2, [pc, #40]	; (800b5b0 <vQueueAddToRegistry+0x50>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	4413      	add	r3, r2
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b592:	e006      	b.n	800b5a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	3301      	adds	r3, #1
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b07      	cmp	r3, #7
 800b59e:	d9e7      	bls.n	800b570 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	20001548 	.word	0x20001548

0800b5b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b5c4:	f001 fca6 	bl	800cf14 <vPortEnterCritical>
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5ce:	b25b      	sxtb	r3, r3
 800b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d4:	d103      	bne.n	800b5de <vQueueWaitForMessageRestricted+0x2a>
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5e4:	b25b      	sxtb	r3, r3
 800b5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ea:	d103      	bne.n	800b5f4 <vQueueWaitForMessageRestricted+0x40>
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5f4:	f001 fcbe 	bl	800cf74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d106      	bne.n	800b60e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	3324      	adds	r3, #36	; 0x24
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 fd41 	bl	800c090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b60e:	6978      	ldr	r0, [r7, #20]
 800b610:	f7ff ff26 	bl	800b460 <prvUnlockQueue>
	}
 800b614:	bf00      	nop
 800b616:	3718      	adds	r7, #24
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08e      	sub	sp, #56	; 0x38
 800b620:	af04      	add	r7, sp, #16
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10a      	bne.n	800b646 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	623b      	str	r3, [r7, #32]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <xTaskCreateStatic+0x46>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	61fb      	str	r3, [r7, #28]
}
 800b65e:	bf00      	nop
 800b660:	e7fe      	b.n	800b660 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b662:	236c      	movs	r3, #108	; 0x6c
 800b664:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b6c      	cmp	r3, #108	; 0x6c
 800b66a:	d00a      	beq.n	800b682 <xTaskCreateStatic+0x66>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	61bb      	str	r3, [r7, #24]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b682:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	2b00      	cmp	r3, #0
 800b688:	d01e      	beq.n	800b6c8 <xTaskCreateStatic+0xac>
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d01b      	beq.n	800b6c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b698:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	2202      	movs	r2, #2
 800b69e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9303      	str	r3, [sp, #12]
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	9302      	str	r3, [sp, #8]
 800b6aa:	f107 0314 	add.w	r3, r7, #20
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 f850 	bl	800b760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6c2:	f000 f8dd 	bl	800b880 <prvAddNewTaskToReadyList>
 800b6c6:	e001      	b.n	800b6cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6cc:	697b      	ldr	r3, [r7, #20]
	}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3728      	adds	r7, #40	; 0x28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b08c      	sub	sp, #48	; 0x30
 800b6da:	af04      	add	r7, sp, #16
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	603b      	str	r3, [r7, #0]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f001 fd34 	bl	800d158 <pvPortMalloc>
 800b6f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00e      	beq.n	800b716 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6f8:	206c      	movs	r0, #108	; 0x6c
 800b6fa:	f001 fd2d 	bl	800d158 <pvPortMalloc>
 800b6fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	631a      	str	r2, [r3, #48]	; 0x30
 800b70c:	e005      	b.n	800b71a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b70e:	6978      	ldr	r0, [r7, #20]
 800b710:	f001 fdee 	bl	800d2f0 <vPortFree>
 800b714:	e001      	b.n	800b71a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d017      	beq.n	800b750 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b728:	88fa      	ldrh	r2, [r7, #6]
 800b72a:	2300      	movs	r3, #0
 800b72c:	9303      	str	r3, [sp, #12]
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	9302      	str	r3, [sp, #8]
 800b732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68b9      	ldr	r1, [r7, #8]
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f000 f80e 	bl	800b760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b744:	69f8      	ldr	r0, [r7, #28]
 800b746:	f000 f89b 	bl	800b880 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b74a:	2301      	movs	r3, #1
 800b74c:	61bb      	str	r3, [r7, #24]
 800b74e:	e002      	b.n	800b756 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b750:	f04f 33ff 	mov.w	r3, #4294967295
 800b754:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b756:	69bb      	ldr	r3, [r7, #24]
	}
 800b758:	4618      	mov	r0, r3
 800b75a:	3720      	adds	r7, #32
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	461a      	mov	r2, r3
 800b778:	21a5      	movs	r1, #165	; 0xa5
 800b77a:	f002 fc2f 	bl	800dfdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b788:	3b01      	subs	r3, #1
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	f023 0307 	bic.w	r3, r3, #7
 800b796:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	f003 0307 	and.w	r3, r3, #7
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00a      	beq.n	800b7b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	617b      	str	r3, [r7, #20]
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d01f      	beq.n	800b7fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7be:	2300      	movs	r3, #0
 800b7c0:	61fb      	str	r3, [r7, #28]
 800b7c2:	e012      	b.n	800b7ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	7819      	ldrb	r1, [r3, #0]
 800b7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	3334      	adds	r3, #52	; 0x34
 800b7d4:	460a      	mov	r2, r1
 800b7d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	4413      	add	r3, r2
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d006      	beq.n	800b7f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	61fb      	str	r3, [r7, #28]
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	2b1d      	cmp	r3, #29
 800b7ee:	d9e9      	bls.n	800b7c4 <prvInitialiseNewTask+0x64>
 800b7f0:	e000      	b.n	800b7f4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b7f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800b7fc:	e003      	b.n	800b806 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	2b37      	cmp	r3, #55	; 0x37
 800b80a:	d901      	bls.n	800b810 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b80c:	2337      	movs	r3, #55	; 0x37
 800b80e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b814:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b81a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81e:	2200      	movs	r2, #0
 800b820:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	3304      	adds	r3, #4
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff f93e 	bl	800aaa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	3318      	adds	r3, #24
 800b830:	4618      	mov	r0, r3
 800b832:	f7ff f939 	bl	800aaa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b83a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b84a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84e:	2200      	movs	r2, #0
 800b850:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	68f9      	ldr	r1, [r7, #12]
 800b85e:	69b8      	ldr	r0, [r7, #24]
 800b860:	f001 fa2e 	bl	800ccc0 <pxPortInitialiseStack>
 800b864:	4602      	mov	r2, r0
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b876:	bf00      	nop
 800b878:	3720      	adds	r7, #32
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b888:	f001 fb44 	bl	800cf14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b88c:	4b2d      	ldr	r3, [pc, #180]	; (800b944 <prvAddNewTaskToReadyList+0xc4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3301      	adds	r3, #1
 800b892:	4a2c      	ldr	r2, [pc, #176]	; (800b944 <prvAddNewTaskToReadyList+0xc4>)
 800b894:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b896:	4b2c      	ldr	r3, [pc, #176]	; (800b948 <prvAddNewTaskToReadyList+0xc8>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d109      	bne.n	800b8b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b89e:	4a2a      	ldr	r2, [pc, #168]	; (800b948 <prvAddNewTaskToReadyList+0xc8>)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b8a4:	4b27      	ldr	r3, [pc, #156]	; (800b944 <prvAddNewTaskToReadyList+0xc4>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d110      	bne.n	800b8ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b8ac:	f000 fd1c 	bl	800c2e8 <prvInitialiseTaskLists>
 800b8b0:	e00d      	b.n	800b8ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b8b2:	4b26      	ldr	r3, [pc, #152]	; (800b94c <prvAddNewTaskToReadyList+0xcc>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d109      	bne.n	800b8ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8ba:	4b23      	ldr	r3, [pc, #140]	; (800b948 <prvAddNewTaskToReadyList+0xc8>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d802      	bhi.n	800b8ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8c8:	4a1f      	ldr	r2, [pc, #124]	; (800b948 <prvAddNewTaskToReadyList+0xc8>)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8ce:	4b20      	ldr	r3, [pc, #128]	; (800b950 <prvAddNewTaskToReadyList+0xd0>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	4a1e      	ldr	r2, [pc, #120]	; (800b950 <prvAddNewTaskToReadyList+0xd0>)
 800b8d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b8d8:	4b1d      	ldr	r3, [pc, #116]	; (800b950 <prvAddNewTaskToReadyList+0xd0>)
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e4:	4b1b      	ldr	r3, [pc, #108]	; (800b954 <prvAddNewTaskToReadyList+0xd4>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d903      	bls.n	800b8f4 <prvAddNewTaskToReadyList+0x74>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	4a18      	ldr	r2, [pc, #96]	; (800b954 <prvAddNewTaskToReadyList+0xd4>)
 800b8f2:	6013      	str	r3, [r2, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4a15      	ldr	r2, [pc, #84]	; (800b958 <prvAddNewTaskToReadyList+0xd8>)
 800b902:	441a      	add	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3304      	adds	r3, #4
 800b908:	4619      	mov	r1, r3
 800b90a:	4610      	mov	r0, r2
 800b90c:	f7ff f8d9 	bl	800aac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b910:	f001 fb30 	bl	800cf74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b914:	4b0d      	ldr	r3, [pc, #52]	; (800b94c <prvAddNewTaskToReadyList+0xcc>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00e      	beq.n	800b93a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b91c:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <prvAddNewTaskToReadyList+0xc8>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	429a      	cmp	r2, r3
 800b928:	d207      	bcs.n	800b93a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b92a:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <prvAddNewTaskToReadyList+0xdc>)
 800b92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b93a:	bf00      	nop
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20001a5c 	.word	0x20001a5c
 800b948:	20001588 	.word	0x20001588
 800b94c:	20001a68 	.word	0x20001a68
 800b950:	20001a78 	.word	0x20001a78
 800b954:	20001a64 	.word	0x20001a64
 800b958:	2000158c 	.word	0x2000158c
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b968:	2300      	movs	r3, #0
 800b96a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d017      	beq.n	800b9a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b972:	4b13      	ldr	r3, [pc, #76]	; (800b9c0 <vTaskDelay+0x60>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <vTaskDelay+0x30>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	60bb      	str	r3, [r7, #8]
}
 800b98c:	bf00      	nop
 800b98e:	e7fe      	b.n	800b98e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b990:	f000 f986 	bl	800bca0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b994:	2100      	movs	r1, #0
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fdf0 	bl	800c57c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b99c:	f000 f98e 	bl	800bcbc <xTaskResumeAll>
 800b9a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d107      	bne.n	800b9b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b9a8:	4b06      	ldr	r3, [pc, #24]	; (800b9c4 <vTaskDelay+0x64>)
 800b9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9b8:	bf00      	nop
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20001a84 	.word	0x20001a84
 800b9c4:	e000ed04 	.word	0xe000ed04

0800b9c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b9d0:	f001 faa0 	bl	800cf14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d102      	bne.n	800b9e0 <vTaskSuspend+0x18>
 800b9da:	4b30      	ldr	r3, [pc, #192]	; (800ba9c <vTaskSuspend+0xd4>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	e000      	b.n	800b9e2 <vTaskSuspend+0x1a>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff f8c7 	bl	800ab7c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d004      	beq.n	800ba00 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3318      	adds	r3, #24
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff f8be 	bl	800ab7c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3304      	adds	r3, #4
 800ba04:	4619      	mov	r1, r3
 800ba06:	4826      	ldr	r0, [pc, #152]	; (800baa0 <vTaskSuspend+0xd8>)
 800ba08:	f7ff f85b 	bl	800aac2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d103      	bne.n	800ba20 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ba20:	f001 faa8 	bl	800cf74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ba24:	4b1f      	ldr	r3, [pc, #124]	; (800baa4 <vTaskSuspend+0xdc>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d005      	beq.n	800ba38 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ba2c:	f001 fa72 	bl	800cf14 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ba30:	f000 fcf8 	bl	800c424 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ba34:	f001 fa9e 	bl	800cf74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ba38:	4b18      	ldr	r3, [pc, #96]	; (800ba9c <vTaskSuspend+0xd4>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d127      	bne.n	800ba92 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800ba42:	4b18      	ldr	r3, [pc, #96]	; (800baa4 <vTaskSuspend+0xdc>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d017      	beq.n	800ba7a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ba4a:	4b17      	ldr	r3, [pc, #92]	; (800baa8 <vTaskSuspend+0xe0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <vTaskSuspend+0xa0>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60bb      	str	r3, [r7, #8]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ba68:	4b10      	ldr	r3, [pc, #64]	; (800baac <vTaskSuspend+0xe4>)
 800ba6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba78:	e00b      	b.n	800ba92 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ba7a:	4b09      	ldr	r3, [pc, #36]	; (800baa0 <vTaskSuspend+0xd8>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <vTaskSuspend+0xe8>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d103      	bne.n	800ba8e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ba86:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <vTaskSuspend+0xd4>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	601a      	str	r2, [r3, #0]
	}
 800ba8c:	e001      	b.n	800ba92 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ba8e:	f000 fa7d 	bl	800bf8c <vTaskSwitchContext>
	}
 800ba92:	bf00      	nop
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20001588 	.word	0x20001588
 800baa0:	20001a48 	.word	0x20001a48
 800baa4:	20001a68 	.word	0x20001a68
 800baa8:	20001a84 	.word	0x20001a84
 800baac:	e000ed04 	.word	0xe000ed04
 800bab0:	20001a5c 	.word	0x20001a5c

0800bab4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800babc:	2300      	movs	r3, #0
 800babe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10a      	bne.n	800bae0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	60fb      	str	r3, [r7, #12]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	695b      	ldr	r3, [r3, #20]
 800bae4:	4a0a      	ldr	r2, [pc, #40]	; (800bb10 <prvTaskIsTaskSuspended+0x5c>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d10a      	bne.n	800bb00 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baee:	4a09      	ldr	r2, [pc, #36]	; (800bb14 <prvTaskIsTaskSuspended+0x60>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d005      	beq.n	800bb00 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d101      	bne.n	800bb00 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800bafc:	2301      	movs	r3, #1
 800bafe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb00:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bb02:	4618      	mov	r0, r3
 800bb04:	371c      	adds	r7, #28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20001a48 	.word	0x20001a48
 800bb14:	20001a1c 	.word	0x20001a1c

0800bb18 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10a      	bne.n	800bb40 <vTaskResume+0x28>
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	60bb      	str	r3, [r7, #8]
}
 800bb3c:	bf00      	nop
 800bb3e:	e7fe      	b.n	800bb3e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800bb40:	4b20      	ldr	r3, [pc, #128]	; (800bbc4 <vTaskResume+0xac>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d038      	beq.n	800bbbc <vTaskResume+0xa4>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d035      	beq.n	800bbbc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800bb50:	f001 f9e0 	bl	800cf14 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff ffad 	bl	800bab4 <prvTaskIsTaskSuspended>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d02b      	beq.n	800bbb8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	3304      	adds	r3, #4
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff f809 	bl	800ab7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6e:	4b16      	ldr	r3, [pc, #88]	; (800bbc8 <vTaskResume+0xb0>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d903      	bls.n	800bb7e <vTaskResume+0x66>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7a:	4a13      	ldr	r2, [pc, #76]	; (800bbc8 <vTaskResume+0xb0>)
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4a10      	ldr	r2, [pc, #64]	; (800bbcc <vTaskResume+0xb4>)
 800bb8c:	441a      	add	r2, r3
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3304      	adds	r3, #4
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7fe ff94 	bl	800aac2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9e:	4b09      	ldr	r3, [pc, #36]	; (800bbc4 <vTaskResume+0xac>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d307      	bcc.n	800bbb8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bba8:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <vTaskResume+0xb8>)
 800bbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800bbb8:	f001 f9dc 	bl	800cf74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbbc:	bf00      	nop
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20001588 	.word	0x20001588
 800bbc8:	20001a64 	.word	0x20001a64
 800bbcc:	2000158c 	.word	0x2000158c
 800bbd0:	e000ed04 	.word	0xe000ed04

0800bbd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08a      	sub	sp, #40	; 0x28
 800bbd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbe2:	463a      	mov	r2, r7
 800bbe4:	1d39      	adds	r1, r7, #4
 800bbe6:	f107 0308 	add.w	r3, r7, #8
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe ff08 	bl	800aa00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	9202      	str	r2, [sp, #8]
 800bbf8:	9301      	str	r3, [sp, #4]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	460a      	mov	r2, r1
 800bc02:	4921      	ldr	r1, [pc, #132]	; (800bc88 <vTaskStartScheduler+0xb4>)
 800bc04:	4821      	ldr	r0, [pc, #132]	; (800bc8c <vTaskStartScheduler+0xb8>)
 800bc06:	f7ff fd09 	bl	800b61c <xTaskCreateStatic>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	4a20      	ldr	r2, [pc, #128]	; (800bc90 <vTaskStartScheduler+0xbc>)
 800bc0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc10:	4b1f      	ldr	r3, [pc, #124]	; (800bc90 <vTaskStartScheduler+0xbc>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	617b      	str	r3, [r7, #20]
 800bc1c:	e001      	b.n	800bc22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d102      	bne.n	800bc2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc28:	f000 fcfc 	bl	800c624 <xTimerCreateTimerTask>
 800bc2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d116      	bne.n	800bc62 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	613b      	str	r3, [r7, #16]
}
 800bc46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc48:	4b12      	ldr	r3, [pc, #72]	; (800bc94 <vTaskStartScheduler+0xc0>)
 800bc4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc50:	4b11      	ldr	r3, [pc, #68]	; (800bc98 <vTaskStartScheduler+0xc4>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc56:	4b11      	ldr	r3, [pc, #68]	; (800bc9c <vTaskStartScheduler+0xc8>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc5c:	f001 f8b8 	bl	800cdd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc60:	e00e      	b.n	800bc80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc68:	d10a      	bne.n	800bc80 <vTaskStartScheduler+0xac>
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	60fb      	str	r3, [r7, #12]
}
 800bc7c:	bf00      	nop
 800bc7e:	e7fe      	b.n	800bc7e <vTaskStartScheduler+0xaa>
}
 800bc80:	bf00      	nop
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	0800ec30 	.word	0x0800ec30
 800bc8c:	0800c2b9 	.word	0x0800c2b9
 800bc90:	20001a80 	.word	0x20001a80
 800bc94:	20001a7c 	.word	0x20001a7c
 800bc98:	20001a68 	.word	0x20001a68
 800bc9c:	20001a60 	.word	0x20001a60

0800bca0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bca0:	b480      	push	{r7}
 800bca2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bca4:	4b04      	ldr	r3, [pc, #16]	; (800bcb8 <vTaskSuspendAll+0x18>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	4a03      	ldr	r2, [pc, #12]	; (800bcb8 <vTaskSuspendAll+0x18>)
 800bcac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bcae:	bf00      	nop
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	20001a84 	.word	0x20001a84

0800bcbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcca:	4b42      	ldr	r3, [pc, #264]	; (800bdd4 <xTaskResumeAll+0x118>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <xTaskResumeAll+0x2c>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	603b      	str	r3, [r7, #0]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bce8:	f001 f914 	bl	800cf14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcec:	4b39      	ldr	r3, [pc, #228]	; (800bdd4 <xTaskResumeAll+0x118>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	4a38      	ldr	r2, [pc, #224]	; (800bdd4 <xTaskResumeAll+0x118>)
 800bcf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf6:	4b37      	ldr	r3, [pc, #220]	; (800bdd4 <xTaskResumeAll+0x118>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d162      	bne.n	800bdc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcfe:	4b36      	ldr	r3, [pc, #216]	; (800bdd8 <xTaskResumeAll+0x11c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d05e      	beq.n	800bdc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd06:	e02f      	b.n	800bd68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd08:	4b34      	ldr	r3, [pc, #208]	; (800bddc <xTaskResumeAll+0x120>)
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3318      	adds	r3, #24
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fe ff31 	bl	800ab7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe ff2c 	bl	800ab7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd28:	4b2d      	ldr	r3, [pc, #180]	; (800bde0 <xTaskResumeAll+0x124>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d903      	bls.n	800bd38 <xTaskResumeAll+0x7c>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd34:	4a2a      	ldr	r2, [pc, #168]	; (800bde0 <xTaskResumeAll+0x124>)
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4a27      	ldr	r2, [pc, #156]	; (800bde4 <xTaskResumeAll+0x128>)
 800bd46:	441a      	add	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7fe feb7 	bl	800aac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4b23      	ldr	r3, [pc, #140]	; (800bde8 <xTaskResumeAll+0x12c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d302      	bcc.n	800bd68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd62:	4b22      	ldr	r3, [pc, #136]	; (800bdec <xTaskResumeAll+0x130>)
 800bd64:	2201      	movs	r2, #1
 800bd66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd68:	4b1c      	ldr	r3, [pc, #112]	; (800bddc <xTaskResumeAll+0x120>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1cb      	bne.n	800bd08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd76:	f000 fb55 	bl	800c424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd7a:	4b1d      	ldr	r3, [pc, #116]	; (800bdf0 <xTaskResumeAll+0x134>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d010      	beq.n	800bda8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd86:	f000 f847 	bl	800be18 <xTaskIncrementTick>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d002      	beq.n	800bd96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd90:	4b16      	ldr	r3, [pc, #88]	; (800bdec <xTaskResumeAll+0x130>)
 800bd92:	2201      	movs	r2, #1
 800bd94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1f1      	bne.n	800bd86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bda2:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <xTaskResumeAll+0x134>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bda8:	4b10      	ldr	r3, [pc, #64]	; (800bdec <xTaskResumeAll+0x130>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d009      	beq.n	800bdc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <xTaskResumeAll+0x138>)
 800bdb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdc4:	f001 f8d6 	bl	800cf74 <vPortExitCritical>

	return xAlreadyYielded;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20001a84 	.word	0x20001a84
 800bdd8:	20001a5c 	.word	0x20001a5c
 800bddc:	20001a1c 	.word	0x20001a1c
 800bde0:	20001a64 	.word	0x20001a64
 800bde4:	2000158c 	.word	0x2000158c
 800bde8:	20001588 	.word	0x20001588
 800bdec:	20001a70 	.word	0x20001a70
 800bdf0:	20001a6c 	.word	0x20001a6c
 800bdf4:	e000ed04 	.word	0xe000ed04

0800bdf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdfe:	4b05      	ldr	r3, [pc, #20]	; (800be14 <xTaskGetTickCount+0x1c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be04:	687b      	ldr	r3, [r7, #4]
}
 800be06:	4618      	mov	r0, r3
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	20001a60 	.word	0x20001a60

0800be18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be1e:	2300      	movs	r3, #0
 800be20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be22:	4b4f      	ldr	r3, [pc, #316]	; (800bf60 <xTaskIncrementTick+0x148>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	f040 808f 	bne.w	800bf4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be2c:	4b4d      	ldr	r3, [pc, #308]	; (800bf64 <xTaskIncrementTick+0x14c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3301      	adds	r3, #1
 800be32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be34:	4a4b      	ldr	r2, [pc, #300]	; (800bf64 <xTaskIncrementTick+0x14c>)
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d120      	bne.n	800be82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be40:	4b49      	ldr	r3, [pc, #292]	; (800bf68 <xTaskIncrementTick+0x150>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <xTaskIncrementTick+0x48>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	603b      	str	r3, [r7, #0]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <xTaskIncrementTick+0x46>
 800be60:	4b41      	ldr	r3, [pc, #260]	; (800bf68 <xTaskIncrementTick+0x150>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	4b41      	ldr	r3, [pc, #260]	; (800bf6c <xTaskIncrementTick+0x154>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a3f      	ldr	r2, [pc, #252]	; (800bf68 <xTaskIncrementTick+0x150>)
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	4a3f      	ldr	r2, [pc, #252]	; (800bf6c <xTaskIncrementTick+0x154>)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6013      	str	r3, [r2, #0]
 800be74:	4b3e      	ldr	r3, [pc, #248]	; (800bf70 <xTaskIncrementTick+0x158>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3301      	adds	r3, #1
 800be7a:	4a3d      	ldr	r2, [pc, #244]	; (800bf70 <xTaskIncrementTick+0x158>)
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	f000 fad1 	bl	800c424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be82:	4b3c      	ldr	r3, [pc, #240]	; (800bf74 <xTaskIncrementTick+0x15c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d349      	bcc.n	800bf20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be8c:	4b36      	ldr	r3, [pc, #216]	; (800bf68 <xTaskIncrementTick+0x150>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d104      	bne.n	800bea0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be96:	4b37      	ldr	r3, [pc, #220]	; (800bf74 <xTaskIncrementTick+0x15c>)
 800be98:	f04f 32ff 	mov.w	r2, #4294967295
 800be9c:	601a      	str	r2, [r3, #0]
					break;
 800be9e:	e03f      	b.n	800bf20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea0:	4b31      	ldr	r3, [pc, #196]	; (800bf68 <xTaskIncrementTick+0x150>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d203      	bcs.n	800bec0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800beb8:	4a2e      	ldr	r2, [pc, #184]	; (800bf74 <xTaskIncrementTick+0x15c>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bebe:	e02f      	b.n	800bf20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	3304      	adds	r3, #4
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe fe59 	bl	800ab7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d004      	beq.n	800bedc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	3318      	adds	r3, #24
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe fe50 	bl	800ab7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee0:	4b25      	ldr	r3, [pc, #148]	; (800bf78 <xTaskIncrementTick+0x160>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d903      	bls.n	800bef0 <xTaskIncrementTick+0xd8>
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	4a22      	ldr	r2, [pc, #136]	; (800bf78 <xTaskIncrementTick+0x160>)
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef4:	4613      	mov	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4a1f      	ldr	r2, [pc, #124]	; (800bf7c <xTaskIncrementTick+0x164>)
 800befe:	441a      	add	r2, r3
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	3304      	adds	r3, #4
 800bf04:	4619      	mov	r1, r3
 800bf06:	4610      	mov	r0, r2
 800bf08:	f7fe fddb 	bl	800aac2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf10:	4b1b      	ldr	r3, [pc, #108]	; (800bf80 <xTaskIncrementTick+0x168>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d3b8      	bcc.n	800be8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf1e:	e7b5      	b.n	800be8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf20:	4b17      	ldr	r3, [pc, #92]	; (800bf80 <xTaskIncrementTick+0x168>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf26:	4915      	ldr	r1, [pc, #84]	; (800bf7c <xTaskIncrementTick+0x164>)
 800bf28:	4613      	mov	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	440b      	add	r3, r1
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d901      	bls.n	800bf3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf3c:	4b11      	ldr	r3, [pc, #68]	; (800bf84 <xTaskIncrementTick+0x16c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d007      	beq.n	800bf54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf44:	2301      	movs	r3, #1
 800bf46:	617b      	str	r3, [r7, #20]
 800bf48:	e004      	b.n	800bf54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf4a:	4b0f      	ldr	r3, [pc, #60]	; (800bf88 <xTaskIncrementTick+0x170>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	4a0d      	ldr	r2, [pc, #52]	; (800bf88 <xTaskIncrementTick+0x170>)
 800bf52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf54:	697b      	ldr	r3, [r7, #20]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	20001a84 	.word	0x20001a84
 800bf64:	20001a60 	.word	0x20001a60
 800bf68:	20001a14 	.word	0x20001a14
 800bf6c:	20001a18 	.word	0x20001a18
 800bf70:	20001a74 	.word	0x20001a74
 800bf74:	20001a7c 	.word	0x20001a7c
 800bf78:	20001a64 	.word	0x20001a64
 800bf7c:	2000158c 	.word	0x2000158c
 800bf80:	20001588 	.word	0x20001588
 800bf84:	20001a70 	.word	0x20001a70
 800bf88:	20001a6c 	.word	0x20001a6c

0800bf8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf92:	4b28      	ldr	r3, [pc, #160]	; (800c034 <vTaskSwitchContext+0xa8>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf9a:	4b27      	ldr	r3, [pc, #156]	; (800c038 <vTaskSwitchContext+0xac>)
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfa0:	e041      	b.n	800c026 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bfa2:	4b25      	ldr	r3, [pc, #148]	; (800c038 <vTaskSwitchContext+0xac>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfa8:	4b24      	ldr	r3, [pc, #144]	; (800c03c <vTaskSwitchContext+0xb0>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	e010      	b.n	800bfd2 <vTaskSwitchContext+0x46>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10a      	bne.n	800bfcc <vTaskSwitchContext+0x40>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	607b      	str	r3, [r7, #4]
}
 800bfc8:	bf00      	nop
 800bfca:	e7fe      	b.n	800bfca <vTaskSwitchContext+0x3e>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	60fb      	str	r3, [r7, #12]
 800bfd2:	491b      	ldr	r1, [pc, #108]	; (800c040 <vTaskSwitchContext+0xb4>)
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	440b      	add	r3, r1
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d0e4      	beq.n	800bfb0 <vTaskSwitchContext+0x24>
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4a13      	ldr	r2, [pc, #76]	; (800c040 <vTaskSwitchContext+0xb4>)
 800bff2:	4413      	add	r3, r2
 800bff4:	60bb      	str	r3, [r7, #8]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	605a      	str	r2, [r3, #4]
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	685a      	ldr	r2, [r3, #4]
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	3308      	adds	r3, #8
 800c008:	429a      	cmp	r2, r3
 800c00a:	d104      	bne.n	800c016 <vTaskSwitchContext+0x8a>
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	605a      	str	r2, [r3, #4]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	4a09      	ldr	r2, [pc, #36]	; (800c044 <vTaskSwitchContext+0xb8>)
 800c01e:	6013      	str	r3, [r2, #0]
 800c020:	4a06      	ldr	r2, [pc, #24]	; (800c03c <vTaskSwitchContext+0xb0>)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6013      	str	r3, [r2, #0]
}
 800c026:	bf00      	nop
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	20001a84 	.word	0x20001a84
 800c038:	20001a70 	.word	0x20001a70
 800c03c:	20001a64 	.word	0x20001a64
 800c040:	2000158c 	.word	0x2000158c
 800c044:	20001588 	.word	0x20001588

0800c048 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10a      	bne.n	800c06e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	60fb      	str	r3, [r7, #12]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c06e:	4b07      	ldr	r3, [pc, #28]	; (800c08c <vTaskPlaceOnEventList+0x44>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3318      	adds	r3, #24
 800c074:	4619      	mov	r1, r3
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7fe fd47 	bl	800ab0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c07c:	2101      	movs	r1, #1
 800c07e:	6838      	ldr	r0, [r7, #0]
 800c080:	f000 fa7c 	bl	800c57c <prvAddCurrentTaskToDelayedList>
}
 800c084:	bf00      	nop
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	20001588 	.word	0x20001588

0800c090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10a      	bne.n	800c0b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	617b      	str	r3, [r7, #20]
}
 800c0b4:	bf00      	nop
 800c0b6:	e7fe      	b.n	800c0b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0b8:	4b0a      	ldr	r3, [pc, #40]	; (800c0e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3318      	adds	r3, #24
 800c0be:	4619      	mov	r1, r3
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f7fe fcfe 	bl	800aac2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	68b8      	ldr	r0, [r7, #8]
 800c0d6:	f000 fa51 	bl	800c57c <prvAddCurrentTaskToDelayedList>
	}
 800c0da:	bf00      	nop
 800c0dc:	3718      	adds	r7, #24
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20001588 	.word	0x20001588

0800c0e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b086      	sub	sp, #24
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10a      	bne.n	800c114 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	60fb      	str	r3, [r7, #12]
}
 800c110:	bf00      	nop
 800c112:	e7fe      	b.n	800c112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	3318      	adds	r3, #24
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fe fd2f 	bl	800ab7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c11e:	4b1e      	ldr	r3, [pc, #120]	; (800c198 <xTaskRemoveFromEventList+0xb0>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d11d      	bne.n	800c162 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	3304      	adds	r3, #4
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fe fd26 	bl	800ab7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c134:	4b19      	ldr	r3, [pc, #100]	; (800c19c <xTaskRemoveFromEventList+0xb4>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d903      	bls.n	800c144 <xTaskRemoveFromEventList+0x5c>
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c140:	4a16      	ldr	r2, [pc, #88]	; (800c19c <xTaskRemoveFromEventList+0xb4>)
 800c142:	6013      	str	r3, [r2, #0]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c148:	4613      	mov	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	4a13      	ldr	r2, [pc, #76]	; (800c1a0 <xTaskRemoveFromEventList+0xb8>)
 800c152:	441a      	add	r2, r3
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	3304      	adds	r3, #4
 800c158:	4619      	mov	r1, r3
 800c15a:	4610      	mov	r0, r2
 800c15c:	f7fe fcb1 	bl	800aac2 <vListInsertEnd>
 800c160:	e005      	b.n	800c16e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3318      	adds	r3, #24
 800c166:	4619      	mov	r1, r3
 800c168:	480e      	ldr	r0, [pc, #56]	; (800c1a4 <xTaskRemoveFromEventList+0xbc>)
 800c16a:	f7fe fcaa 	bl	800aac2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c172:	4b0d      	ldr	r3, [pc, #52]	; (800c1a8 <xTaskRemoveFromEventList+0xc0>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c178:	429a      	cmp	r2, r3
 800c17a:	d905      	bls.n	800c188 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c17c:	2301      	movs	r3, #1
 800c17e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c180:	4b0a      	ldr	r3, [pc, #40]	; (800c1ac <xTaskRemoveFromEventList+0xc4>)
 800c182:	2201      	movs	r2, #1
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	e001      	b.n	800c18c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c188:	2300      	movs	r3, #0
 800c18a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c18c:	697b      	ldr	r3, [r7, #20]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20001a84 	.word	0x20001a84
 800c19c:	20001a64 	.word	0x20001a64
 800c1a0:	2000158c 	.word	0x2000158c
 800c1a4:	20001a1c 	.word	0x20001a1c
 800c1a8:	20001588 	.word	0x20001588
 800c1ac:	20001a70 	.word	0x20001a70

0800c1b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1b8:	4b06      	ldr	r3, [pc, #24]	; (800c1d4 <vTaskInternalSetTimeOutState+0x24>)
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1c0:	4b05      	ldr	r3, [pc, #20]	; (800c1d8 <vTaskInternalSetTimeOutState+0x28>)
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	605a      	str	r2, [r3, #4]
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr
 800c1d4:	20001a74 	.word	0x20001a74
 800c1d8:	20001a60 	.word	0x20001a60

0800c1dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b088      	sub	sp, #32
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10a      	bne.n	800c202 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	613b      	str	r3, [r7, #16]
}
 800c1fe:	bf00      	nop
 800c200:	e7fe      	b.n	800c200 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	60fb      	str	r3, [r7, #12]
}
 800c21a:	bf00      	nop
 800c21c:	e7fe      	b.n	800c21c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c21e:	f000 fe79 	bl	800cf14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c222:	4b1d      	ldr	r3, [pc, #116]	; (800c298 <xTaskCheckForTimeOut+0xbc>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23a:	d102      	bne.n	800c242 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c23c:	2300      	movs	r3, #0
 800c23e:	61fb      	str	r3, [r7, #28]
 800c240:	e023      	b.n	800c28a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	4b15      	ldr	r3, [pc, #84]	; (800c29c <xTaskCheckForTimeOut+0xc0>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d007      	beq.n	800c25e <xTaskCheckForTimeOut+0x82>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	69ba      	ldr	r2, [r7, #24]
 800c254:	429a      	cmp	r2, r3
 800c256:	d302      	bcc.n	800c25e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c258:	2301      	movs	r3, #1
 800c25a:	61fb      	str	r3, [r7, #28]
 800c25c:	e015      	b.n	800c28a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	429a      	cmp	r2, r3
 800c266:	d20b      	bcs.n	800c280 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	1ad2      	subs	r2, r2, r3
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff ff9b 	bl	800c1b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c27a:	2300      	movs	r3, #0
 800c27c:	61fb      	str	r3, [r7, #28]
 800c27e:	e004      	b.n	800c28a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c286:	2301      	movs	r3, #1
 800c288:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c28a:	f000 fe73 	bl	800cf74 <vPortExitCritical>

	return xReturn;
 800c28e:	69fb      	ldr	r3, [r7, #28]
}
 800c290:	4618      	mov	r0, r3
 800c292:	3720      	adds	r7, #32
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	20001a60 	.word	0x20001a60
 800c29c:	20001a74 	.word	0x20001a74

0800c2a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2a4:	4b03      	ldr	r3, [pc, #12]	; (800c2b4 <vTaskMissedYield+0x14>)
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	601a      	str	r2, [r3, #0]
}
 800c2aa:	bf00      	nop
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr
 800c2b4:	20001a70 	.word	0x20001a70

0800c2b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2c0:	f000 f852 	bl	800c368 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2c4:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <prvIdleTask+0x28>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d9f9      	bls.n	800c2c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c2cc:	4b05      	ldr	r3, [pc, #20]	; (800c2e4 <prvIdleTask+0x2c>)
 800c2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2dc:	e7f0      	b.n	800c2c0 <prvIdleTask+0x8>
 800c2de:	bf00      	nop
 800c2e0:	2000158c 	.word	0x2000158c
 800c2e4:	e000ed04 	.word	0xe000ed04

0800c2e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	607b      	str	r3, [r7, #4]
 800c2f2:	e00c      	b.n	800c30e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4a12      	ldr	r2, [pc, #72]	; (800c348 <prvInitialiseTaskLists+0x60>)
 800c300:	4413      	add	r3, r2
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fbb0 	bl	800aa68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	3301      	adds	r3, #1
 800c30c:	607b      	str	r3, [r7, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b37      	cmp	r3, #55	; 0x37
 800c312:	d9ef      	bls.n	800c2f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c314:	480d      	ldr	r0, [pc, #52]	; (800c34c <prvInitialiseTaskLists+0x64>)
 800c316:	f7fe fba7 	bl	800aa68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c31a:	480d      	ldr	r0, [pc, #52]	; (800c350 <prvInitialiseTaskLists+0x68>)
 800c31c:	f7fe fba4 	bl	800aa68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c320:	480c      	ldr	r0, [pc, #48]	; (800c354 <prvInitialiseTaskLists+0x6c>)
 800c322:	f7fe fba1 	bl	800aa68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c326:	480c      	ldr	r0, [pc, #48]	; (800c358 <prvInitialiseTaskLists+0x70>)
 800c328:	f7fe fb9e 	bl	800aa68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c32c:	480b      	ldr	r0, [pc, #44]	; (800c35c <prvInitialiseTaskLists+0x74>)
 800c32e:	f7fe fb9b 	bl	800aa68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c332:	4b0b      	ldr	r3, [pc, #44]	; (800c360 <prvInitialiseTaskLists+0x78>)
 800c334:	4a05      	ldr	r2, [pc, #20]	; (800c34c <prvInitialiseTaskLists+0x64>)
 800c336:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c338:	4b0a      	ldr	r3, [pc, #40]	; (800c364 <prvInitialiseTaskLists+0x7c>)
 800c33a:	4a05      	ldr	r2, [pc, #20]	; (800c350 <prvInitialiseTaskLists+0x68>)
 800c33c:	601a      	str	r2, [r3, #0]
}
 800c33e:	bf00      	nop
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	2000158c 	.word	0x2000158c
 800c34c:	200019ec 	.word	0x200019ec
 800c350:	20001a00 	.word	0x20001a00
 800c354:	20001a1c 	.word	0x20001a1c
 800c358:	20001a30 	.word	0x20001a30
 800c35c:	20001a48 	.word	0x20001a48
 800c360:	20001a14 	.word	0x20001a14
 800c364:	20001a18 	.word	0x20001a18

0800c368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c36e:	e019      	b.n	800c3a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c370:	f000 fdd0 	bl	800cf14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c374:	4b10      	ldr	r3, [pc, #64]	; (800c3b8 <prvCheckTasksWaitingTermination+0x50>)
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	3304      	adds	r3, #4
 800c380:	4618      	mov	r0, r3
 800c382:	f7fe fbfb 	bl	800ab7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c386:	4b0d      	ldr	r3, [pc, #52]	; (800c3bc <prvCheckTasksWaitingTermination+0x54>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	4a0b      	ldr	r2, [pc, #44]	; (800c3bc <prvCheckTasksWaitingTermination+0x54>)
 800c38e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c390:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <prvCheckTasksWaitingTermination+0x58>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	3b01      	subs	r3, #1
 800c396:	4a0a      	ldr	r2, [pc, #40]	; (800c3c0 <prvCheckTasksWaitingTermination+0x58>)
 800c398:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c39a:	f000 fdeb 	bl	800cf74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f810 	bl	800c3c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3a4:	4b06      	ldr	r3, [pc, #24]	; (800c3c0 <prvCheckTasksWaitingTermination+0x58>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1e1      	bne.n	800c370 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20001a30 	.word	0x20001a30
 800c3bc:	20001a5c 	.word	0x20001a5c
 800c3c0:	20001a44 	.word	0x20001a44

0800c3c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d108      	bne.n	800c3e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 ff88 	bl	800d2f0 <vPortFree>
				vPortFree( pxTCB );
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 ff85 	bl	800d2f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3e6:	e018      	b.n	800c41a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d103      	bne.n	800c3fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 ff7c 	bl	800d2f0 <vPortFree>
	}
 800c3f8:	e00f      	b.n	800c41a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c400:	2b02      	cmp	r3, #2
 800c402:	d00a      	beq.n	800c41a <prvDeleteTCB+0x56>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	60fb      	str	r3, [r7, #12]
}
 800c416:	bf00      	nop
 800c418:	e7fe      	b.n	800c418 <prvDeleteTCB+0x54>
	}
 800c41a:	bf00      	nop
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c42a:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <prvResetNextTaskUnblockTime+0x38>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d104      	bne.n	800c43e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <prvResetNextTaskUnblockTime+0x3c>)
 800c436:	f04f 32ff 	mov.w	r2, #4294967295
 800c43a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c43c:	e008      	b.n	800c450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c43e:	4b07      	ldr	r3, [pc, #28]	; (800c45c <prvResetNextTaskUnblockTime+0x38>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	4a04      	ldr	r2, [pc, #16]	; (800c460 <prvResetNextTaskUnblockTime+0x3c>)
 800c44e:	6013      	str	r3, [r2, #0]
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	20001a14 	.word	0x20001a14
 800c460:	20001a7c 	.word	0x20001a7c

0800c464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c46a:	4b0b      	ldr	r3, [pc, #44]	; (800c498 <xTaskGetSchedulerState+0x34>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d102      	bne.n	800c478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c472:	2301      	movs	r3, #1
 800c474:	607b      	str	r3, [r7, #4]
 800c476:	e008      	b.n	800c48a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c478:	4b08      	ldr	r3, [pc, #32]	; (800c49c <xTaskGetSchedulerState+0x38>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c480:	2302      	movs	r3, #2
 800c482:	607b      	str	r3, [r7, #4]
 800c484:	e001      	b.n	800c48a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c486:	2300      	movs	r3, #0
 800c488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c48a:	687b      	ldr	r3, [r7, #4]
	}
 800c48c:	4618      	mov	r0, r3
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr
 800c498:	20001a68 	.word	0x20001a68
 800c49c:	20001a84 	.word	0x20001a84

0800c4a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d056      	beq.n	800c564 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c4b6:	4b2e      	ldr	r3, [pc, #184]	; (800c570 <xTaskPriorityDisinherit+0xd0>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d00a      	beq.n	800c4d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	60fb      	str	r3, [r7, #12]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10a      	bne.n	800c4f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	60bb      	str	r3, [r7, #8]
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4f8:	1e5a      	subs	r2, r3, #1
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c506:	429a      	cmp	r2, r3
 800c508:	d02c      	beq.n	800c564 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d128      	bne.n	800c564 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	3304      	adds	r3, #4
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fb30 	bl	800ab7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c528:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c534:	4b0f      	ldr	r3, [pc, #60]	; (800c574 <xTaskPriorityDisinherit+0xd4>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d903      	bls.n	800c544 <xTaskPriorityDisinherit+0xa4>
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c540:	4a0c      	ldr	r2, [pc, #48]	; (800c574 <xTaskPriorityDisinherit+0xd4>)
 800c542:	6013      	str	r3, [r2, #0]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c548:	4613      	mov	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4a09      	ldr	r2, [pc, #36]	; (800c578 <xTaskPriorityDisinherit+0xd8>)
 800c552:	441a      	add	r2, r3
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	3304      	adds	r3, #4
 800c558:	4619      	mov	r1, r3
 800c55a:	4610      	mov	r0, r2
 800c55c:	f7fe fab1 	bl	800aac2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c560:	2301      	movs	r3, #1
 800c562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c564:	697b      	ldr	r3, [r7, #20]
	}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20001588 	.word	0x20001588
 800c574:	20001a64 	.word	0x20001a64
 800c578:	2000158c 	.word	0x2000158c

0800c57c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c586:	4b21      	ldr	r3, [pc, #132]	; (800c60c <prvAddCurrentTaskToDelayedList+0x90>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c58c:	4b20      	ldr	r3, [pc, #128]	; (800c610 <prvAddCurrentTaskToDelayedList+0x94>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3304      	adds	r3, #4
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe faf2 	bl	800ab7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59e:	d10a      	bne.n	800c5b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d007      	beq.n	800c5b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5a6:	4b1a      	ldr	r3, [pc, #104]	; (800c610 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4819      	ldr	r0, [pc, #100]	; (800c614 <prvAddCurrentTaskToDelayedList+0x98>)
 800c5b0:	f7fe fa87 	bl	800aac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5b4:	e026      	b.n	800c604 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5be:	4b14      	ldr	r3, [pc, #80]	; (800c610 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d209      	bcs.n	800c5e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5ce:	4b12      	ldr	r3, [pc, #72]	; (800c618 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4610      	mov	r0, r2
 800c5dc:	f7fe fa95 	bl	800ab0a <vListInsert>
}
 800c5e0:	e010      	b.n	800c604 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5e2:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	4b0a      	ldr	r3, [pc, #40]	; (800c610 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	f7fe fa8b 	bl	800ab0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	; (800c620 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68ba      	ldr	r2, [r7, #8]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d202      	bcs.n	800c604 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c5fe:	4a08      	ldr	r2, [pc, #32]	; (800c620 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	6013      	str	r3, [r2, #0]
}
 800c604:	bf00      	nop
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	20001a60 	.word	0x20001a60
 800c610:	20001588 	.word	0x20001588
 800c614:	20001a48 	.word	0x20001a48
 800c618:	20001a18 	.word	0x20001a18
 800c61c:	20001a14 	.word	0x20001a14
 800c620:	20001a7c 	.word	0x20001a7c

0800c624 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08a      	sub	sp, #40	; 0x28
 800c628:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c62e:	f000 fb07 	bl	800cc40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c632:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <xTimerCreateTimerTask+0x80>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d021      	beq.n	800c67e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c63a:	2300      	movs	r3, #0
 800c63c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c642:	1d3a      	adds	r2, r7, #4
 800c644:	f107 0108 	add.w	r1, r7, #8
 800c648:	f107 030c 	add.w	r3, r7, #12
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fe f9f1 	bl	800aa34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c652:	6879      	ldr	r1, [r7, #4]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	9202      	str	r2, [sp, #8]
 800c65a:	9301      	str	r3, [sp, #4]
 800c65c:	2302      	movs	r3, #2
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	2300      	movs	r3, #0
 800c662:	460a      	mov	r2, r1
 800c664:	4910      	ldr	r1, [pc, #64]	; (800c6a8 <xTimerCreateTimerTask+0x84>)
 800c666:	4811      	ldr	r0, [pc, #68]	; (800c6ac <xTimerCreateTimerTask+0x88>)
 800c668:	f7fe ffd8 	bl	800b61c <xTaskCreateStatic>
 800c66c:	4603      	mov	r3, r0
 800c66e:	4a10      	ldr	r2, [pc, #64]	; (800c6b0 <xTimerCreateTimerTask+0x8c>)
 800c670:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c672:	4b0f      	ldr	r3, [pc, #60]	; (800c6b0 <xTimerCreateTimerTask+0x8c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c67a:	2301      	movs	r3, #1
 800c67c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	613b      	str	r3, [r7, #16]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c69a:	697b      	ldr	r3, [r7, #20]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3718      	adds	r7, #24
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	20001ab8 	.word	0x20001ab8
 800c6a8:	0800ec38 	.word	0x0800ec38
 800c6ac:	0800c7e9 	.word	0x0800c7e9
 800c6b0:	20001abc 	.word	0x20001abc

0800c6b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b08a      	sub	sp, #40	; 0x28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10a      	bne.n	800c6e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	623b      	str	r3, [r7, #32]
}
 800c6de:	bf00      	nop
 800c6e0:	e7fe      	b.n	800c6e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c6e2:	4b1a      	ldr	r3, [pc, #104]	; (800c74c <xTimerGenericCommand+0x98>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d02a      	beq.n	800c740 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2b05      	cmp	r3, #5
 800c6fa:	dc18      	bgt.n	800c72e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6fc:	f7ff feb2 	bl	800c464 <xTaskGetSchedulerState>
 800c700:	4603      	mov	r3, r0
 800c702:	2b02      	cmp	r3, #2
 800c704:	d109      	bne.n	800c71a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c706:	4b11      	ldr	r3, [pc, #68]	; (800c74c <xTimerGenericCommand+0x98>)
 800c708:	6818      	ldr	r0, [r3, #0]
 800c70a:	f107 0110 	add.w	r1, r7, #16
 800c70e:	2300      	movs	r3, #0
 800c710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c712:	f7fe fb9b 	bl	800ae4c <xQueueGenericSend>
 800c716:	6278      	str	r0, [r7, #36]	; 0x24
 800c718:	e012      	b.n	800c740 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c71a:	4b0c      	ldr	r3, [pc, #48]	; (800c74c <xTimerGenericCommand+0x98>)
 800c71c:	6818      	ldr	r0, [r3, #0]
 800c71e:	f107 0110 	add.w	r1, r7, #16
 800c722:	2300      	movs	r3, #0
 800c724:	2200      	movs	r2, #0
 800c726:	f7fe fb91 	bl	800ae4c <xQueueGenericSend>
 800c72a:	6278      	str	r0, [r7, #36]	; 0x24
 800c72c:	e008      	b.n	800c740 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c72e:	4b07      	ldr	r3, [pc, #28]	; (800c74c <xTimerGenericCommand+0x98>)
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	f107 0110 	add.w	r1, r7, #16
 800c736:	2300      	movs	r3, #0
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	f7fe fc85 	bl	800b048 <xQueueGenericSendFromISR>
 800c73e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c742:	4618      	mov	r0, r3
 800c744:	3728      	adds	r7, #40	; 0x28
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20001ab8 	.word	0x20001ab8

0800c750 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b088      	sub	sp, #32
 800c754:	af02      	add	r7, sp, #8
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c75a:	4b22      	ldr	r3, [pc, #136]	; (800c7e4 <prvProcessExpiredTimer+0x94>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	3304      	adds	r3, #4
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe fa07 	bl	800ab7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c774:	f003 0304 	and.w	r3, r3, #4
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d022      	beq.n	800c7c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	699a      	ldr	r2, [r3, #24]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	18d1      	adds	r1, r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	6978      	ldr	r0, [r7, #20]
 800c78a:	f000 f8d1 	bl	800c930 <prvInsertTimerInActiveList>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d01f      	beq.n	800c7d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c794:	2300      	movs	r3, #0
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	2300      	movs	r3, #0
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	2100      	movs	r1, #0
 800c79e:	6978      	ldr	r0, [r7, #20]
 800c7a0:	f7ff ff88 	bl	800c6b4 <xTimerGenericCommand>
 800c7a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d113      	bne.n	800c7d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	60fb      	str	r3, [r7, #12]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7c8:	f023 0301 	bic.w	r3, r3, #1
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	6a1b      	ldr	r3, [r3, #32]
 800c7d8:	6978      	ldr	r0, [r7, #20]
 800c7da:	4798      	blx	r3
}
 800c7dc:	bf00      	nop
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	20001ab0 	.word	0x20001ab0

0800c7e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7f0:	f107 0308 	add.w	r3, r7, #8
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 f857 	bl	800c8a8 <prvGetNextExpireTime>
 800c7fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	4619      	mov	r1, r3
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f000 f803 	bl	800c80c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c806:	f000 f8d5 	bl	800c9b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c80a:	e7f1      	b.n	800c7f0 <prvTimerTask+0x8>

0800c80c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c816:	f7ff fa43 	bl	800bca0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c81a:	f107 0308 	add.w	r3, r7, #8
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 f866 	bl	800c8f0 <prvSampleTimeNow>
 800c824:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d130      	bne.n	800c88e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10a      	bne.n	800c848 <prvProcessTimerOrBlockTask+0x3c>
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	429a      	cmp	r2, r3
 800c838:	d806      	bhi.n	800c848 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c83a:	f7ff fa3f 	bl	800bcbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c83e:	68f9      	ldr	r1, [r7, #12]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7ff ff85 	bl	800c750 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c846:	e024      	b.n	800c892 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d008      	beq.n	800c860 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c84e:	4b13      	ldr	r3, [pc, #76]	; (800c89c <prvProcessTimerOrBlockTask+0x90>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d101      	bne.n	800c85c <prvProcessTimerOrBlockTask+0x50>
 800c858:	2301      	movs	r3, #1
 800c85a:	e000      	b.n	800c85e <prvProcessTimerOrBlockTask+0x52>
 800c85c:	2300      	movs	r3, #0
 800c85e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c860:	4b0f      	ldr	r3, [pc, #60]	; (800c8a0 <prvProcessTimerOrBlockTask+0x94>)
 800c862:	6818      	ldr	r0, [r3, #0]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	4619      	mov	r1, r3
 800c86e:	f7fe fea1 	bl	800b5b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c872:	f7ff fa23 	bl	800bcbc <xTaskResumeAll>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c87c:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <prvProcessTimerOrBlockTask+0x98>)
 800c87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	f3bf 8f6f 	isb	sy
}
 800c88c:	e001      	b.n	800c892 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c88e:	f7ff fa15 	bl	800bcbc <xTaskResumeAll>
}
 800c892:	bf00      	nop
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	20001ab4 	.word	0x20001ab4
 800c8a0:	20001ab8 	.word	0x20001ab8
 800c8a4:	e000ed04 	.word	0xe000ed04

0800c8a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8b0:	4b0e      	ldr	r3, [pc, #56]	; (800c8ec <prvGetNextExpireTime+0x44>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d101      	bne.n	800c8be <prvGetNextExpireTime+0x16>
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	e000      	b.n	800c8c0 <prvGetNextExpireTime+0x18>
 800c8be:	2200      	movs	r2, #0
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d105      	bne.n	800c8d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8cc:	4b07      	ldr	r3, [pc, #28]	; (800c8ec <prvGetNextExpireTime+0x44>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	60fb      	str	r3, [r7, #12]
 800c8d6:	e001      	b.n	800c8dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	20001ab0 	.word	0x20001ab0

0800c8f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8f8:	f7ff fa7e 	bl	800bdf8 <xTaskGetTickCount>
 800c8fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8fe:	4b0b      	ldr	r3, [pc, #44]	; (800c92c <prvSampleTimeNow+0x3c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	429a      	cmp	r2, r3
 800c906:	d205      	bcs.n	800c914 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c908:	f000 f936 	bl	800cb78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	e002      	b.n	800c91a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c91a:	4a04      	ldr	r2, [pc, #16]	; (800c92c <prvSampleTimeNow+0x3c>)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c920:	68fb      	ldr	r3, [r7, #12]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20001ac0 	.word	0x20001ac0

0800c930 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c93e:	2300      	movs	r3, #0
 800c940:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d812      	bhi.n	800c97c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	1ad2      	subs	r2, r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	429a      	cmp	r2, r3
 800c962:	d302      	bcc.n	800c96a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c964:	2301      	movs	r3, #1
 800c966:	617b      	str	r3, [r7, #20]
 800c968:	e01b      	b.n	800c9a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c96a:	4b10      	ldr	r3, [pc, #64]	; (800c9ac <prvInsertTimerInActiveList+0x7c>)
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3304      	adds	r3, #4
 800c972:	4619      	mov	r1, r3
 800c974:	4610      	mov	r0, r2
 800c976:	f7fe f8c8 	bl	800ab0a <vListInsert>
 800c97a:	e012      	b.n	800c9a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	429a      	cmp	r2, r3
 800c982:	d206      	bcs.n	800c992 <prvInsertTimerInActiveList+0x62>
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d302      	bcc.n	800c992 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c98c:	2301      	movs	r3, #1
 800c98e:	617b      	str	r3, [r7, #20]
 800c990:	e007      	b.n	800c9a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c992:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <prvInsertTimerInActiveList+0x80>)
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	3304      	adds	r3, #4
 800c99a:	4619      	mov	r1, r3
 800c99c:	4610      	mov	r0, r2
 800c99e:	f7fe f8b4 	bl	800ab0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9a2:	697b      	ldr	r3, [r7, #20]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3718      	adds	r7, #24
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	20001ab4 	.word	0x20001ab4
 800c9b0:	20001ab0 	.word	0x20001ab0

0800c9b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08e      	sub	sp, #56	; 0x38
 800c9b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9ba:	e0ca      	b.n	800cb52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	da18      	bge.n	800c9f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c9c2:	1d3b      	adds	r3, r7, #4
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10a      	bne.n	800c9e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	61fb      	str	r3, [r7, #28]
}
 800c9e0:	bf00      	nop
 800c9e2:	e7fe      	b.n	800c9e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ea:	6850      	ldr	r0, [r2, #4]
 800c9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ee:	6892      	ldr	r2, [r2, #8]
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f2c0 80aa 	blt.w	800cb50 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d004      	beq.n	800ca12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe f8b5 	bl	800ab7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca12:	463b      	mov	r3, r7
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7ff ff6b 	bl	800c8f0 <prvSampleTimeNow>
 800ca1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b09      	cmp	r3, #9
 800ca20:	f200 8097 	bhi.w	800cb52 <prvProcessReceivedCommands+0x19e>
 800ca24:	a201      	add	r2, pc, #4	; (adr r2, 800ca2c <prvProcessReceivedCommands+0x78>)
 800ca26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2a:	bf00      	nop
 800ca2c:	0800ca55 	.word	0x0800ca55
 800ca30:	0800ca55 	.word	0x0800ca55
 800ca34:	0800ca55 	.word	0x0800ca55
 800ca38:	0800cac9 	.word	0x0800cac9
 800ca3c:	0800cadd 	.word	0x0800cadd
 800ca40:	0800cb27 	.word	0x0800cb27
 800ca44:	0800ca55 	.word	0x0800ca55
 800ca48:	0800ca55 	.word	0x0800ca55
 800ca4c:	0800cac9 	.word	0x0800cac9
 800ca50:	0800cadd 	.word	0x0800cadd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca5a:	f043 0301 	orr.w	r3, r3, #1
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	18d1      	adds	r1, r2, r3
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca74:	f7ff ff5c 	bl	800c930 <prvInsertTimerInActiveList>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d069      	beq.n	800cb52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca8c:	f003 0304 	and.w	r3, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d05e      	beq.n	800cb52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	441a      	add	r2, r3
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9300      	str	r3, [sp, #0]
 800caa0:	2300      	movs	r3, #0
 800caa2:	2100      	movs	r1, #0
 800caa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa6:	f7ff fe05 	bl	800c6b4 <xTimerGenericCommand>
 800caaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800caac:	6a3b      	ldr	r3, [r7, #32]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d14f      	bne.n	800cb52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	61bb      	str	r3, [r7, #24]
}
 800cac4:	bf00      	nop
 800cac6:	e7fe      	b.n	800cac6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cace:	f023 0301 	bic.w	r3, r3, #1
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cada:	e03a      	b.n	800cb52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	699b      	ldr	r3, [r3, #24]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	617b      	str	r3, [r7, #20]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	699a      	ldr	r2, [r3, #24]
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	18d1      	adds	r1, r2, r3
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb20:	f7ff ff06 	bl	800c930 <prvInsertTimerInActiveList>
					break;
 800cb24:	e015      	b.n	800cb52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb2c:	f003 0302 	and.w	r3, r3, #2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d103      	bne.n	800cb3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cb34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb36:	f000 fbdb 	bl	800d2f0 <vPortFree>
 800cb3a:	e00a      	b.n	800cb52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb42:	f023 0301 	bic.w	r3, r3, #1
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb4e:	e000      	b.n	800cb52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cb50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb52:	4b08      	ldr	r3, [pc, #32]	; (800cb74 <prvProcessReceivedCommands+0x1c0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	1d39      	adds	r1, r7, #4
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fb10 	bl	800b180 <xQueueReceive>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f47f af2a 	bne.w	800c9bc <prvProcessReceivedCommands+0x8>
	}
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop
 800cb6c:	3730      	adds	r7, #48	; 0x30
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	20001ab8 	.word	0x20001ab8

0800cb78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b088      	sub	sp, #32
 800cb7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb7e:	e048      	b.n	800cc12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb80:	4b2d      	ldr	r3, [pc, #180]	; (800cc38 <prvSwitchTimerLists+0xc0>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb8a:	4b2b      	ldr	r3, [pc, #172]	; (800cc38 <prvSwitchTimerLists+0xc0>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3304      	adds	r3, #4
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fd ffef 	bl	800ab7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbac:	f003 0304 	and.w	r3, r3, #4
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d02e      	beq.n	800cc12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	4413      	add	r3, r2
 800cbbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d90e      	bls.n	800cbe4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbd2:	4b19      	ldr	r3, [pc, #100]	; (800cc38 <prvSwitchTimerLists+0xc0>)
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3304      	adds	r3, #4
 800cbda:	4619      	mov	r1, r3
 800cbdc:	4610      	mov	r0, r2
 800cbde:	f7fd ff94 	bl	800ab0a <vListInsert>
 800cbe2:	e016      	b.n	800cc12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	2300      	movs	r3, #0
 800cbea:	693a      	ldr	r2, [r7, #16]
 800cbec:	2100      	movs	r1, #0
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f7ff fd60 	bl	800c6b4 <xTimerGenericCommand>
 800cbf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	603b      	str	r3, [r7, #0]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc12:	4b09      	ldr	r3, [pc, #36]	; (800cc38 <prvSwitchTimerLists+0xc0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1b1      	bne.n	800cb80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <prvSwitchTimerLists+0xc0>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc22:	4b06      	ldr	r3, [pc, #24]	; (800cc3c <prvSwitchTimerLists+0xc4>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a04      	ldr	r2, [pc, #16]	; (800cc38 <prvSwitchTimerLists+0xc0>)
 800cc28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc2a:	4a04      	ldr	r2, [pc, #16]	; (800cc3c <prvSwitchTimerLists+0xc4>)
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	6013      	str	r3, [r2, #0]
}
 800cc30:	bf00      	nop
 800cc32:	3718      	adds	r7, #24
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	20001ab0 	.word	0x20001ab0
 800cc3c:	20001ab4 	.word	0x20001ab4

0800cc40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc46:	f000 f965 	bl	800cf14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc4a:	4b15      	ldr	r3, [pc, #84]	; (800cca0 <prvCheckForValidListAndQueue+0x60>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d120      	bne.n	800cc94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc52:	4814      	ldr	r0, [pc, #80]	; (800cca4 <prvCheckForValidListAndQueue+0x64>)
 800cc54:	f7fd ff08 	bl	800aa68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc58:	4813      	ldr	r0, [pc, #76]	; (800cca8 <prvCheckForValidListAndQueue+0x68>)
 800cc5a:	f7fd ff05 	bl	800aa68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc5e:	4b13      	ldr	r3, [pc, #76]	; (800ccac <prvCheckForValidListAndQueue+0x6c>)
 800cc60:	4a10      	ldr	r2, [pc, #64]	; (800cca4 <prvCheckForValidListAndQueue+0x64>)
 800cc62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc64:	4b12      	ldr	r3, [pc, #72]	; (800ccb0 <prvCheckForValidListAndQueue+0x70>)
 800cc66:	4a10      	ldr	r2, [pc, #64]	; (800cca8 <prvCheckForValidListAndQueue+0x68>)
 800cc68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	4b11      	ldr	r3, [pc, #68]	; (800ccb4 <prvCheckForValidListAndQueue+0x74>)
 800cc70:	4a11      	ldr	r2, [pc, #68]	; (800ccb8 <prvCheckForValidListAndQueue+0x78>)
 800cc72:	2110      	movs	r1, #16
 800cc74:	200a      	movs	r0, #10
 800cc76:	f7fe f813 	bl	800aca0 <xQueueGenericCreateStatic>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	4a08      	ldr	r2, [pc, #32]	; (800cca0 <prvCheckForValidListAndQueue+0x60>)
 800cc7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc80:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <prvCheckForValidListAndQueue+0x60>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d005      	beq.n	800cc94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc88:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <prvCheckForValidListAndQueue+0x60>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	490b      	ldr	r1, [pc, #44]	; (800ccbc <prvCheckForValidListAndQueue+0x7c>)
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe fc66 	bl	800b560 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc94:	f000 f96e 	bl	800cf74 <vPortExitCritical>
}
 800cc98:	bf00      	nop
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	20001ab8 	.word	0x20001ab8
 800cca4:	20001a88 	.word	0x20001a88
 800cca8:	20001a9c 	.word	0x20001a9c
 800ccac:	20001ab0 	.word	0x20001ab0
 800ccb0:	20001ab4 	.word	0x20001ab4
 800ccb4:	20001b64 	.word	0x20001b64
 800ccb8:	20001ac4 	.word	0x20001ac4
 800ccbc:	0800ec40 	.word	0x0800ec40

0800ccc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	3b04      	subs	r3, #4
 800ccd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ccd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3b04      	subs	r3, #4
 800ccde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	f023 0201 	bic.w	r2, r3, #1
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3b04      	subs	r3, #4
 800ccee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ccf0:	4a0c      	ldr	r2, [pc, #48]	; (800cd24 <pxPortInitialiseStack+0x64>)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3b14      	subs	r3, #20
 800ccfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3b04      	subs	r3, #4
 800cd06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f06f 0202 	mvn.w	r2, #2
 800cd0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	3b20      	subs	r3, #32
 800cd14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd16:	68fb      	ldr	r3, [r7, #12]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	0800cd29 	.word	0x0800cd29

0800cd28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd32:	4b12      	ldr	r3, [pc, #72]	; (800cd7c <prvTaskExitError+0x54>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3a:	d00a      	beq.n	800cd52 <prvTaskExitError+0x2a>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	60fb      	str	r3, [r7, #12]
}
 800cd4e:	bf00      	nop
 800cd50:	e7fe      	b.n	800cd50 <prvTaskExitError+0x28>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	60bb      	str	r3, [r7, #8]
}
 800cd64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd66:	bf00      	nop
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0fc      	beq.n	800cd68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd6e:	bf00      	nop
 800cd70:	bf00      	nop
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr
 800cd7c:	20000580 	.word	0x20000580

0800cd80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd80:	4b07      	ldr	r3, [pc, #28]	; (800cda0 <pxCurrentTCBConst2>)
 800cd82:	6819      	ldr	r1, [r3, #0]
 800cd84:	6808      	ldr	r0, [r1, #0]
 800cd86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8a:	f380 8809 	msr	PSP, r0
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f04f 0000 	mov.w	r0, #0
 800cd96:	f380 8811 	msr	BASEPRI, r0
 800cd9a:	4770      	bx	lr
 800cd9c:	f3af 8000 	nop.w

0800cda0 <pxCurrentTCBConst2>:
 800cda0:	20001588 	.word	0x20001588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop

0800cda8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cda8:	4808      	ldr	r0, [pc, #32]	; (800cdcc <prvPortStartFirstTask+0x24>)
 800cdaa:	6800      	ldr	r0, [r0, #0]
 800cdac:	6800      	ldr	r0, [r0, #0]
 800cdae:	f380 8808 	msr	MSP, r0
 800cdb2:	f04f 0000 	mov.w	r0, #0
 800cdb6:	f380 8814 	msr	CONTROL, r0
 800cdba:	b662      	cpsie	i
 800cdbc:	b661      	cpsie	f
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	df00      	svc	0
 800cdc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cdca:	bf00      	nop
 800cdcc:	e000ed08 	.word	0xe000ed08

0800cdd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cdd6:	4b46      	ldr	r3, [pc, #280]	; (800cef0 <xPortStartScheduler+0x120>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a46      	ldr	r2, [pc, #280]	; (800cef4 <xPortStartScheduler+0x124>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d10a      	bne.n	800cdf6 <xPortStartScheduler+0x26>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	613b      	str	r3, [r7, #16]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cdf6:	4b3e      	ldr	r3, [pc, #248]	; (800cef0 <xPortStartScheduler+0x120>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a3f      	ldr	r2, [pc, #252]	; (800cef8 <xPortStartScheduler+0x128>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d10a      	bne.n	800ce16 <xPortStartScheduler+0x46>
	__asm volatile
 800ce00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	60fb      	str	r3, [r7, #12]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce16:	4b39      	ldr	r3, [pc, #228]	; (800cefc <xPortStartScheduler+0x12c>)
 800ce18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	22ff      	movs	r2, #255	; 0xff
 800ce26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce30:	78fb      	ldrb	r3, [r7, #3]
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	4b31      	ldr	r3, [pc, #196]	; (800cf00 <xPortStartScheduler+0x130>)
 800ce3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce3e:	4b31      	ldr	r3, [pc, #196]	; (800cf04 <xPortStartScheduler+0x134>)
 800ce40:	2207      	movs	r2, #7
 800ce42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce44:	e009      	b.n	800ce5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ce46:	4b2f      	ldr	r3, [pc, #188]	; (800cf04 <xPortStartScheduler+0x134>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	4a2d      	ldr	r2, [pc, #180]	; (800cf04 <xPortStartScheduler+0x134>)
 800ce4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce50:	78fb      	ldrb	r3, [r7, #3]
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce5a:	78fb      	ldrb	r3, [r7, #3]
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce62:	2b80      	cmp	r3, #128	; 0x80
 800ce64:	d0ef      	beq.n	800ce46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce66:	4b27      	ldr	r3, [pc, #156]	; (800cf04 <xPortStartScheduler+0x134>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f1c3 0307 	rsb	r3, r3, #7
 800ce6e:	2b04      	cmp	r3, #4
 800ce70:	d00a      	beq.n	800ce88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	60bb      	str	r3, [r7, #8]
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce88:	4b1e      	ldr	r3, [pc, #120]	; (800cf04 <xPortStartScheduler+0x134>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	021b      	lsls	r3, r3, #8
 800ce8e:	4a1d      	ldr	r2, [pc, #116]	; (800cf04 <xPortStartScheduler+0x134>)
 800ce90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce92:	4b1c      	ldr	r3, [pc, #112]	; (800cf04 <xPortStartScheduler+0x134>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce9a:	4a1a      	ldr	r2, [pc, #104]	; (800cf04 <xPortStartScheduler+0x134>)
 800ce9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cea6:	4b18      	ldr	r3, [pc, #96]	; (800cf08 <xPortStartScheduler+0x138>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a17      	ldr	r2, [pc, #92]	; (800cf08 <xPortStartScheduler+0x138>)
 800ceac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ceb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ceb2:	4b15      	ldr	r3, [pc, #84]	; (800cf08 <xPortStartScheduler+0x138>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a14      	ldr	r2, [pc, #80]	; (800cf08 <xPortStartScheduler+0x138>)
 800ceb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cebe:	f000 f8dd 	bl	800d07c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cec2:	4b12      	ldr	r3, [pc, #72]	; (800cf0c <xPortStartScheduler+0x13c>)
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cec8:	f000 f8fc 	bl	800d0c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cecc:	4b10      	ldr	r3, [pc, #64]	; (800cf10 <xPortStartScheduler+0x140>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a0f      	ldr	r2, [pc, #60]	; (800cf10 <xPortStartScheduler+0x140>)
 800ced2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ced6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ced8:	f7ff ff66 	bl	800cda8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cedc:	f7ff f856 	bl	800bf8c <vTaskSwitchContext>
	prvTaskExitError();
 800cee0:	f7ff ff22 	bl	800cd28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	e000ed00 	.word	0xe000ed00
 800cef4:	410fc271 	.word	0x410fc271
 800cef8:	410fc270 	.word	0x410fc270
 800cefc:	e000e400 	.word	0xe000e400
 800cf00:	20001bb4 	.word	0x20001bb4
 800cf04:	20001bb8 	.word	0x20001bb8
 800cf08:	e000ed20 	.word	0xe000ed20
 800cf0c:	20000580 	.word	0x20000580
 800cf10:	e000ef34 	.word	0xe000ef34

0800cf14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	607b      	str	r3, [r7, #4]
}
 800cf2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf2e:	4b0f      	ldr	r3, [pc, #60]	; (800cf6c <vPortEnterCritical+0x58>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	3301      	adds	r3, #1
 800cf34:	4a0d      	ldr	r2, [pc, #52]	; (800cf6c <vPortEnterCritical+0x58>)
 800cf36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf38:	4b0c      	ldr	r3, [pc, #48]	; (800cf6c <vPortEnterCritical+0x58>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d10f      	bne.n	800cf60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf40:	4b0b      	ldr	r3, [pc, #44]	; (800cf70 <vPortEnterCritical+0x5c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00a      	beq.n	800cf60 <vPortEnterCritical+0x4c>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	603b      	str	r3, [r7, #0]
}
 800cf5c:	bf00      	nop
 800cf5e:	e7fe      	b.n	800cf5e <vPortEnterCritical+0x4a>
	}
}
 800cf60:	bf00      	nop
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	20000580 	.word	0x20000580
 800cf70:	e000ed04 	.word	0xe000ed04

0800cf74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf7a:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <vPortExitCritical+0x50>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10a      	bne.n	800cf98 <vPortExitCritical+0x24>
	__asm volatile
 800cf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	607b      	str	r3, [r7, #4]
}
 800cf94:	bf00      	nop
 800cf96:	e7fe      	b.n	800cf96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf98:	4b0a      	ldr	r3, [pc, #40]	; (800cfc4 <vPortExitCritical+0x50>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	4a09      	ldr	r2, [pc, #36]	; (800cfc4 <vPortExitCritical+0x50>)
 800cfa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cfa2:	4b08      	ldr	r3, [pc, #32]	; (800cfc4 <vPortExitCritical+0x50>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d105      	bne.n	800cfb6 <vPortExitCritical+0x42>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	f383 8811 	msr	BASEPRI, r3
}
 800cfb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	20000580 	.word	0x20000580
	...

0800cfd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cfd0:	f3ef 8009 	mrs	r0, PSP
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	4b15      	ldr	r3, [pc, #84]	; (800d030 <pxCurrentTCBConst>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	f01e 0f10 	tst.w	lr, #16
 800cfe0:	bf08      	it	eq
 800cfe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cfe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfea:	6010      	str	r0, [r2, #0]
 800cfec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cff4:	f380 8811 	msr	BASEPRI, r0
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f7fe ffc4 	bl	800bf8c <vTaskSwitchContext>
 800d004:	f04f 0000 	mov.w	r0, #0
 800d008:	f380 8811 	msr	BASEPRI, r0
 800d00c:	bc09      	pop	{r0, r3}
 800d00e:	6819      	ldr	r1, [r3, #0]
 800d010:	6808      	ldr	r0, [r1, #0]
 800d012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d016:	f01e 0f10 	tst.w	lr, #16
 800d01a:	bf08      	it	eq
 800d01c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d020:	f380 8809 	msr	PSP, r0
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	f3af 8000 	nop.w

0800d030 <pxCurrentTCBConst>:
 800d030:	20001588 	.word	0x20001588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop

0800d038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	607b      	str	r3, [r7, #4]
}
 800d050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d052:	f7fe fee1 	bl	800be18 <xTaskIncrementTick>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d05c:	4b06      	ldr	r3, [pc, #24]	; (800d078 <xPortSysTickHandler+0x40>)
 800d05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	2300      	movs	r3, #0
 800d066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	f383 8811 	msr	BASEPRI, r3
}
 800d06e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	e000ed04 	.word	0xe000ed04

0800d07c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d080:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <vPortSetupTimerInterrupt+0x34>)
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d086:	4b0b      	ldr	r3, [pc, #44]	; (800d0b4 <vPortSetupTimerInterrupt+0x38>)
 800d088:	2200      	movs	r2, #0
 800d08a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d08c:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <vPortSetupTimerInterrupt+0x3c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a0a      	ldr	r2, [pc, #40]	; (800d0bc <vPortSetupTimerInterrupt+0x40>)
 800d092:	fba2 2303 	umull	r2, r3, r2, r3
 800d096:	099b      	lsrs	r3, r3, #6
 800d098:	4a09      	ldr	r2, [pc, #36]	; (800d0c0 <vPortSetupTimerInterrupt+0x44>)
 800d09a:	3b01      	subs	r3, #1
 800d09c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d09e:	4b04      	ldr	r3, [pc, #16]	; (800d0b0 <vPortSetupTimerInterrupt+0x34>)
 800d0a0:	2207      	movs	r2, #7
 800d0a2:	601a      	str	r2, [r3, #0]
}
 800d0a4:	bf00      	nop
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	e000e010 	.word	0xe000e010
 800d0b4:	e000e018 	.word	0xe000e018
 800d0b8:	200004e8 	.word	0x200004e8
 800d0bc:	10624dd3 	.word	0x10624dd3
 800d0c0:	e000e014 	.word	0xe000e014

0800d0c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d0c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d0d4 <vPortEnableVFP+0x10>
 800d0c8:	6801      	ldr	r1, [r0, #0]
 800d0ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d0ce:	6001      	str	r1, [r0, #0]
 800d0d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d0d2:	bf00      	nop
 800d0d4:	e000ed88 	.word	0xe000ed88

0800d0d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d0de:	f3ef 8305 	mrs	r3, IPSR
 800d0e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b0f      	cmp	r3, #15
 800d0e8:	d914      	bls.n	800d114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d0ea:	4a17      	ldr	r2, [pc, #92]	; (800d148 <vPortValidateInterruptPriority+0x70>)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0f4:	4b15      	ldr	r3, [pc, #84]	; (800d14c <vPortValidateInterruptPriority+0x74>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	7afa      	ldrb	r2, [r7, #11]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d20a      	bcs.n	800d114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	607b      	str	r3, [r7, #4]
}
 800d110:	bf00      	nop
 800d112:	e7fe      	b.n	800d112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d114:	4b0e      	ldr	r3, [pc, #56]	; (800d150 <vPortValidateInterruptPriority+0x78>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d11c:	4b0d      	ldr	r3, [pc, #52]	; (800d154 <vPortValidateInterruptPriority+0x7c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	429a      	cmp	r2, r3
 800d122:	d90a      	bls.n	800d13a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d128:	f383 8811 	msr	BASEPRI, r3
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	603b      	str	r3, [r7, #0]
}
 800d136:	bf00      	nop
 800d138:	e7fe      	b.n	800d138 <vPortValidateInterruptPriority+0x60>
	}
 800d13a:	bf00      	nop
 800d13c:	3714      	adds	r7, #20
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	e000e3f0 	.word	0xe000e3f0
 800d14c:	20001bb4 	.word	0x20001bb4
 800d150:	e000ed0c 	.word	0xe000ed0c
 800d154:	20001bb8 	.word	0x20001bb8

0800d158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08a      	sub	sp, #40	; 0x28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d164:	f7fe fd9c 	bl	800bca0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d168:	4b5b      	ldr	r3, [pc, #364]	; (800d2d8 <pvPortMalloc+0x180>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d101      	bne.n	800d174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d170:	f000 f920 	bl	800d3b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d174:	4b59      	ldr	r3, [pc, #356]	; (800d2dc <pvPortMalloc+0x184>)
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4013      	ands	r3, r2
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f040 8093 	bne.w	800d2a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01d      	beq.n	800d1c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d188:	2208      	movs	r2, #8
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f003 0307 	and.w	r3, r3, #7
 800d196:	2b00      	cmp	r3, #0
 800d198:	d014      	beq.n	800d1c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f023 0307 	bic.w	r3, r3, #7
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f003 0307 	and.w	r3, r3, #7
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00a      	beq.n	800d1c4 <pvPortMalloc+0x6c>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	617b      	str	r3, [r7, #20]
}
 800d1c0:	bf00      	nop
 800d1c2:	e7fe      	b.n	800d1c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d06e      	beq.n	800d2a8 <pvPortMalloc+0x150>
 800d1ca:	4b45      	ldr	r3, [pc, #276]	; (800d2e0 <pvPortMalloc+0x188>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d869      	bhi.n	800d2a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d1d4:	4b43      	ldr	r3, [pc, #268]	; (800d2e4 <pvPortMalloc+0x18c>)
 800d1d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d1d8:	4b42      	ldr	r3, [pc, #264]	; (800d2e4 <pvPortMalloc+0x18c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1de:	e004      	b.n	800d1ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d903      	bls.n	800d1fc <pvPortMalloc+0xa4>
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1f1      	bne.n	800d1e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d1fc:	4b36      	ldr	r3, [pc, #216]	; (800d2d8 <pvPortMalloc+0x180>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d202:	429a      	cmp	r2, r3
 800d204:	d050      	beq.n	800d2a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2208      	movs	r2, #8
 800d20c:	4413      	add	r3, r2
 800d20e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	6a3b      	ldr	r3, [r7, #32]
 800d216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	1ad2      	subs	r2, r2, r3
 800d220:	2308      	movs	r3, #8
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	429a      	cmp	r2, r3
 800d226:	d91f      	bls.n	800d268 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4413      	add	r3, r2
 800d22e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	f003 0307 	and.w	r3, r3, #7
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <pvPortMalloc+0xf8>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	613b      	str	r3, [r7, #16]
}
 800d24c:	bf00      	nop
 800d24e:	e7fe      	b.n	800d24e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	685a      	ldr	r2, [r3, #4]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	1ad2      	subs	r2, r2, r3
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d262:	69b8      	ldr	r0, [r7, #24]
 800d264:	f000 f908 	bl	800d478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d268:	4b1d      	ldr	r3, [pc, #116]	; (800d2e0 <pvPortMalloc+0x188>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	4a1b      	ldr	r2, [pc, #108]	; (800d2e0 <pvPortMalloc+0x188>)
 800d274:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d276:	4b1a      	ldr	r3, [pc, #104]	; (800d2e0 <pvPortMalloc+0x188>)
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	4b1b      	ldr	r3, [pc, #108]	; (800d2e8 <pvPortMalloc+0x190>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d203      	bcs.n	800d28a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d282:	4b17      	ldr	r3, [pc, #92]	; (800d2e0 <pvPortMalloc+0x188>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a18      	ldr	r2, [pc, #96]	; (800d2e8 <pvPortMalloc+0x190>)
 800d288:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	4b13      	ldr	r3, [pc, #76]	; (800d2dc <pvPortMalloc+0x184>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	431a      	orrs	r2, r3
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	2200      	movs	r2, #0
 800d29c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d29e:	4b13      	ldr	r3, [pc, #76]	; (800d2ec <pvPortMalloc+0x194>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	4a11      	ldr	r2, [pc, #68]	; (800d2ec <pvPortMalloc+0x194>)
 800d2a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d2a8:	f7fe fd08 	bl	800bcbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	f003 0307 	and.w	r3, r3, #7
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00a      	beq.n	800d2cc <pvPortMalloc+0x174>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	60fb      	str	r3, [r7, #12]
}
 800d2c8:	bf00      	nop
 800d2ca:	e7fe      	b.n	800d2ca <pvPortMalloc+0x172>
	return pvReturn;
 800d2cc:	69fb      	ldr	r3, [r7, #28]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3728      	adds	r7, #40	; 0x28
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	200057c4 	.word	0x200057c4
 800d2dc:	200057d8 	.word	0x200057d8
 800d2e0:	200057c8 	.word	0x200057c8
 800d2e4:	200057bc 	.word	0x200057bc
 800d2e8:	200057cc 	.word	0x200057cc
 800d2ec:	200057d0 	.word	0x200057d0

0800d2f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d04d      	beq.n	800d39e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d302:	2308      	movs	r3, #8
 800d304:	425b      	negs	r3, r3
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	4413      	add	r3, r2
 800d30a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	685a      	ldr	r2, [r3, #4]
 800d314:	4b24      	ldr	r3, [pc, #144]	; (800d3a8 <vPortFree+0xb8>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4013      	ands	r3, r2
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10a      	bne.n	800d334 <vPortFree+0x44>
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	60fb      	str	r3, [r7, #12]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00a      	beq.n	800d352 <vPortFree+0x62>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	60bb      	str	r3, [r7, #8]
}
 800d34e:	bf00      	nop
 800d350:	e7fe      	b.n	800d350 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	685a      	ldr	r2, [r3, #4]
 800d356:	4b14      	ldr	r3, [pc, #80]	; (800d3a8 <vPortFree+0xb8>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4013      	ands	r3, r2
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d01e      	beq.n	800d39e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d11a      	bne.n	800d39e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	685a      	ldr	r2, [r3, #4]
 800d36c:	4b0e      	ldr	r3, [pc, #56]	; (800d3a8 <vPortFree+0xb8>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	43db      	mvns	r3, r3
 800d372:	401a      	ands	r2, r3
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d378:	f7fe fc92 	bl	800bca0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	4b0a      	ldr	r3, [pc, #40]	; (800d3ac <vPortFree+0xbc>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4413      	add	r3, r2
 800d386:	4a09      	ldr	r2, [pc, #36]	; (800d3ac <vPortFree+0xbc>)
 800d388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d38a:	6938      	ldr	r0, [r7, #16]
 800d38c:	f000 f874 	bl	800d478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d390:	4b07      	ldr	r3, [pc, #28]	; (800d3b0 <vPortFree+0xc0>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	3301      	adds	r3, #1
 800d396:	4a06      	ldr	r2, [pc, #24]	; (800d3b0 <vPortFree+0xc0>)
 800d398:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d39a:	f7fe fc8f 	bl	800bcbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d39e:	bf00      	nop
 800d3a0:	3718      	adds	r7, #24
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	200057d8 	.word	0x200057d8
 800d3ac:	200057c8 	.word	0x200057c8
 800d3b0:	200057d4 	.word	0x200057d4

0800d3b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d3ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d3be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d3c0:	4b27      	ldr	r3, [pc, #156]	; (800d460 <prvHeapInit+0xac>)
 800d3c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00c      	beq.n	800d3e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3307      	adds	r3, #7
 800d3d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f023 0307 	bic.w	r3, r3, #7
 800d3da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	4a1f      	ldr	r2, [pc, #124]	; (800d460 <prvHeapInit+0xac>)
 800d3e4:	4413      	add	r3, r2
 800d3e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3ec:	4a1d      	ldr	r2, [pc, #116]	; (800d464 <prvHeapInit+0xb0>)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3f2:	4b1c      	ldr	r3, [pc, #112]	; (800d464 <prvHeapInit+0xb0>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d400:	2208      	movs	r2, #8
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	1a9b      	subs	r3, r3, r2
 800d406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 0307 	bic.w	r3, r3, #7
 800d40e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4a15      	ldr	r2, [pc, #84]	; (800d468 <prvHeapInit+0xb4>)
 800d414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d416:	4b14      	ldr	r3, [pc, #80]	; (800d468 <prvHeapInit+0xb4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2200      	movs	r2, #0
 800d41c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d41e:	4b12      	ldr	r3, [pc, #72]	; (800d468 <prvHeapInit+0xb4>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	1ad2      	subs	r2, r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d434:	4b0c      	ldr	r3, [pc, #48]	; (800d468 <prvHeapInit+0xb4>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	4a0a      	ldr	r2, [pc, #40]	; (800d46c <prvHeapInit+0xb8>)
 800d442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	4a09      	ldr	r2, [pc, #36]	; (800d470 <prvHeapInit+0xbc>)
 800d44a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d44c:	4b09      	ldr	r3, [pc, #36]	; (800d474 <prvHeapInit+0xc0>)
 800d44e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d452:	601a      	str	r2, [r3, #0]
}
 800d454:	bf00      	nop
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	20001bbc 	.word	0x20001bbc
 800d464:	200057bc 	.word	0x200057bc
 800d468:	200057c4 	.word	0x200057c4
 800d46c:	200057cc 	.word	0x200057cc
 800d470:	200057c8 	.word	0x200057c8
 800d474:	200057d8 	.word	0x200057d8

0800d478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d480:	4b28      	ldr	r3, [pc, #160]	; (800d524 <prvInsertBlockIntoFreeList+0xac>)
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	e002      	b.n	800d48c <prvInsertBlockIntoFreeList+0x14>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	429a      	cmp	r2, r3
 800d494:	d8f7      	bhi.n	800d486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d108      	bne.n	800d4ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	441a      	add	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	441a      	add	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d118      	bne.n	800d500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	4b15      	ldr	r3, [pc, #84]	; (800d528 <prvInsertBlockIntoFreeList+0xb0>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d00d      	beq.n	800d4f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685a      	ldr	r2, [r3, #4]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	441a      	add	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	e008      	b.n	800d508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4f6:	4b0c      	ldr	r3, [pc, #48]	; (800d528 <prvInsertBlockIntoFreeList+0xb0>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	e003      	b.n	800d508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d002      	beq.n	800d516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d516:	bf00      	nop
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	200057bc 	.word	0x200057bc
 800d528:	200057c4 	.word	0x200057c4

0800d52c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d530:	2200      	movs	r2, #0
 800d532:	4912      	ldr	r1, [pc, #72]	; (800d57c <MX_USB_DEVICE_Init+0x50>)
 800d534:	4812      	ldr	r0, [pc, #72]	; (800d580 <MX_USB_DEVICE_Init+0x54>)
 800d536:	f7fb fdc1 	bl	80090bc <USBD_Init>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d001      	beq.n	800d544 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d540:	f7f4 fcf2 	bl	8001f28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d544:	490f      	ldr	r1, [pc, #60]	; (800d584 <MX_USB_DEVICE_Init+0x58>)
 800d546:	480e      	ldr	r0, [pc, #56]	; (800d580 <MX_USB_DEVICE_Init+0x54>)
 800d548:	f7fb fde8 	bl	800911c <USBD_RegisterClass>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d552:	f7f4 fce9 	bl	8001f28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d556:	490c      	ldr	r1, [pc, #48]	; (800d588 <MX_USB_DEVICE_Init+0x5c>)
 800d558:	4809      	ldr	r0, [pc, #36]	; (800d580 <MX_USB_DEVICE_Init+0x54>)
 800d55a:	f7fb fcd9 	bl	8008f10 <USBD_CDC_RegisterInterface>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d001      	beq.n	800d568 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d564:	f7f4 fce0 	bl	8001f28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d568:	4805      	ldr	r0, [pc, #20]	; (800d580 <MX_USB_DEVICE_Init+0x54>)
 800d56a:	f7fb fe0d 	bl	8009188 <USBD_Start>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d001      	beq.n	800d578 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d574:	f7f4 fcd8 	bl	8001f28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d578:	bf00      	nop
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	20000598 	.word	0x20000598
 800d580:	200057dc 	.word	0x200057dc
 800d584:	20000500 	.word	0x20000500
 800d588:	20000584 	.word	0x20000584

0800d58c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d590:	2200      	movs	r2, #0
 800d592:	4905      	ldr	r1, [pc, #20]	; (800d5a8 <CDC_Init_FS+0x1c>)
 800d594:	4805      	ldr	r0, [pc, #20]	; (800d5ac <CDC_Init_FS+0x20>)
 800d596:	f7fb fcd5 	bl	8008f44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d59a:	4905      	ldr	r1, [pc, #20]	; (800d5b0 <CDC_Init_FS+0x24>)
 800d59c:	4803      	ldr	r0, [pc, #12]	; (800d5ac <CDC_Init_FS+0x20>)
 800d59e:	f7fb fcf3 	bl	8008f88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d5a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	20005eb8 	.word	0x20005eb8
 800d5ac:	200057dc 	.word	0x200057dc
 800d5b0:	20005ab8 	.word	0x20005ab8

0800d5b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d5b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	6039      	str	r1, [r7, #0]
 800d5ce:	71fb      	strb	r3, [r7, #7]
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d5d4:	79fb      	ldrb	r3, [r7, #7]
 800d5d6:	2b23      	cmp	r3, #35	; 0x23
 800d5d8:	d84a      	bhi.n	800d670 <CDC_Control_FS+0xac>
 800d5da:	a201      	add	r2, pc, #4	; (adr r2, 800d5e0 <CDC_Control_FS+0x1c>)
 800d5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e0:	0800d671 	.word	0x0800d671
 800d5e4:	0800d671 	.word	0x0800d671
 800d5e8:	0800d671 	.word	0x0800d671
 800d5ec:	0800d671 	.word	0x0800d671
 800d5f0:	0800d671 	.word	0x0800d671
 800d5f4:	0800d671 	.word	0x0800d671
 800d5f8:	0800d671 	.word	0x0800d671
 800d5fc:	0800d671 	.word	0x0800d671
 800d600:	0800d671 	.word	0x0800d671
 800d604:	0800d671 	.word	0x0800d671
 800d608:	0800d671 	.word	0x0800d671
 800d60c:	0800d671 	.word	0x0800d671
 800d610:	0800d671 	.word	0x0800d671
 800d614:	0800d671 	.word	0x0800d671
 800d618:	0800d671 	.word	0x0800d671
 800d61c:	0800d671 	.word	0x0800d671
 800d620:	0800d671 	.word	0x0800d671
 800d624:	0800d671 	.word	0x0800d671
 800d628:	0800d671 	.word	0x0800d671
 800d62c:	0800d671 	.word	0x0800d671
 800d630:	0800d671 	.word	0x0800d671
 800d634:	0800d671 	.word	0x0800d671
 800d638:	0800d671 	.word	0x0800d671
 800d63c:	0800d671 	.word	0x0800d671
 800d640:	0800d671 	.word	0x0800d671
 800d644:	0800d671 	.word	0x0800d671
 800d648:	0800d671 	.word	0x0800d671
 800d64c:	0800d671 	.word	0x0800d671
 800d650:	0800d671 	.word	0x0800d671
 800d654:	0800d671 	.word	0x0800d671
 800d658:	0800d671 	.word	0x0800d671
 800d65c:	0800d671 	.word	0x0800d671
 800d660:	0800d671 	.word	0x0800d671
 800d664:	0800d671 	.word	0x0800d671
 800d668:	0800d671 	.word	0x0800d671
 800d66c:	0800d671 	.word	0x0800d671
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d670:	bf00      	nop
  }

  return (USBD_OK);
 800d672:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d674:	4618      	mov	r0, r3
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	4805      	ldr	r0, [pc, #20]	; (800d6a4 <CDC_Receive_FS+0x24>)
 800d68e:	f7fb fc7b 	bl	8008f88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d692:	4804      	ldr	r0, [pc, #16]	; (800d6a4 <CDC_Receive_FS+0x24>)
 800d694:	f7fb fcdc 	bl	8009050 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d698:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	200057dc 	.word	0x200057dc

0800d6a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d6b8:	4b0d      	ldr	r3, [pc, #52]	; (800d6f0 <CDC_Transmit_FS+0x48>)
 800d6ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e00b      	b.n	800d6e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d6ce:	887b      	ldrh	r3, [r7, #2]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	4806      	ldr	r0, [pc, #24]	; (800d6f0 <CDC_Transmit_FS+0x48>)
 800d6d6:	f7fb fc35 	bl	8008f44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d6da:	4805      	ldr	r0, [pc, #20]	; (800d6f0 <CDC_Transmit_FS+0x48>)
 800d6dc:	f7fb fc72 	bl	8008fc4 <USBD_CDC_TransmitPacket>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	200057dc 	.word	0x200057dc

0800d6f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b087      	sub	sp, #28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	4613      	mov	r3, r2
 800d700:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	371c      	adds	r7, #28
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
	...

0800d718 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	4603      	mov	r3, r0
 800d720:	6039      	str	r1, [r7, #0]
 800d722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	2212      	movs	r2, #18
 800d728:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d72a:	4b03      	ldr	r3, [pc, #12]	; (800d738 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	200005b4 	.word	0x200005b4

0800d73c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	4603      	mov	r3, r0
 800d744:	6039      	str	r1, [r7, #0]
 800d746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	2204      	movs	r2, #4
 800d74c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d74e:	4b03      	ldr	r3, [pc, #12]	; (800d75c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d750:	4618      	mov	r0, r3
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	200005c8 	.word	0x200005c8

0800d760 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	4603      	mov	r3, r0
 800d768:	6039      	str	r1, [r7, #0]
 800d76a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d76c:	79fb      	ldrb	r3, [r7, #7]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d105      	bne.n	800d77e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	4907      	ldr	r1, [pc, #28]	; (800d794 <USBD_FS_ProductStrDescriptor+0x34>)
 800d776:	4808      	ldr	r0, [pc, #32]	; (800d798 <USBD_FS_ProductStrDescriptor+0x38>)
 800d778:	f7fc feb2 	bl	800a4e0 <USBD_GetString>
 800d77c:	e004      	b.n	800d788 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d77e:	683a      	ldr	r2, [r7, #0]
 800d780:	4904      	ldr	r1, [pc, #16]	; (800d794 <USBD_FS_ProductStrDescriptor+0x34>)
 800d782:	4805      	ldr	r0, [pc, #20]	; (800d798 <USBD_FS_ProductStrDescriptor+0x38>)
 800d784:	f7fc feac 	bl	800a4e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d788:	4b02      	ldr	r3, [pc, #8]	; (800d794 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	200062b8 	.word	0x200062b8
 800d798:	0800ec48 	.word	0x0800ec48

0800d79c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	6039      	str	r1, [r7, #0]
 800d7a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	4904      	ldr	r1, [pc, #16]	; (800d7bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d7ac:	4804      	ldr	r0, [pc, #16]	; (800d7c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d7ae:	f7fc fe97 	bl	800a4e0 <USBD_GetString>
  return USBD_StrDesc;
 800d7b2:	4b02      	ldr	r3, [pc, #8]	; (800d7bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	200062b8 	.word	0x200062b8
 800d7c0:	0800ec60 	.word	0x0800ec60

0800d7c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	6039      	str	r1, [r7, #0]
 800d7ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	221a      	movs	r2, #26
 800d7d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d7d6:	f000 f843 	bl	800d860 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d7da:	4b02      	ldr	r3, [pc, #8]	; (800d7e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	200005cc 	.word	0x200005cc

0800d7e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	6039      	str	r1, [r7, #0]
 800d7f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d7f4:	79fb      	ldrb	r3, [r7, #7]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d105      	bne.n	800d806 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	4907      	ldr	r1, [pc, #28]	; (800d81c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7fe:	4808      	ldr	r0, [pc, #32]	; (800d820 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d800:	f7fc fe6e 	bl	800a4e0 <USBD_GetString>
 800d804:	e004      	b.n	800d810 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d806:	683a      	ldr	r2, [r7, #0]
 800d808:	4904      	ldr	r1, [pc, #16]	; (800d81c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d80a:	4805      	ldr	r0, [pc, #20]	; (800d820 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d80c:	f7fc fe68 	bl	800a4e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d810:	4b02      	ldr	r3, [pc, #8]	; (800d81c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d812:	4618      	mov	r0, r3
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	200062b8 	.word	0x200062b8
 800d820:	0800ec74 	.word	0x0800ec74

0800d824 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	6039      	str	r1, [r7, #0]
 800d82e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d830:	79fb      	ldrb	r3, [r7, #7]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d105      	bne.n	800d842 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	4907      	ldr	r1, [pc, #28]	; (800d858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d83a:	4808      	ldr	r0, [pc, #32]	; (800d85c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d83c:	f7fc fe50 	bl	800a4e0 <USBD_GetString>
 800d840:	e004      	b.n	800d84c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	4904      	ldr	r1, [pc, #16]	; (800d858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d846:	4805      	ldr	r0, [pc, #20]	; (800d85c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d848:	f7fc fe4a 	bl	800a4e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d84c:	4b02      	ldr	r3, [pc, #8]	; (800d858 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	200062b8 	.word	0x200062b8
 800d85c:	0800ec80 	.word	0x0800ec80

0800d860 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d866:	4b0f      	ldr	r3, [pc, #60]	; (800d8a4 <Get_SerialNum+0x44>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d86c:	4b0e      	ldr	r3, [pc, #56]	; (800d8a8 <Get_SerialNum+0x48>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d872:	4b0e      	ldr	r3, [pc, #56]	; (800d8ac <Get_SerialNum+0x4c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4413      	add	r3, r2
 800d87e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d009      	beq.n	800d89a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d886:	2208      	movs	r2, #8
 800d888:	4909      	ldr	r1, [pc, #36]	; (800d8b0 <Get_SerialNum+0x50>)
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f000 f814 	bl	800d8b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d890:	2204      	movs	r2, #4
 800d892:	4908      	ldr	r1, [pc, #32]	; (800d8b4 <Get_SerialNum+0x54>)
 800d894:	68b8      	ldr	r0, [r7, #8]
 800d896:	f000 f80f 	bl	800d8b8 <IntToUnicode>
  }
}
 800d89a:	bf00      	nop
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	1fff7a10 	.word	0x1fff7a10
 800d8a8:	1fff7a14 	.word	0x1fff7a14
 800d8ac:	1fff7a18 	.word	0x1fff7a18
 800d8b0:	200005ce 	.word	0x200005ce
 800d8b4:	200005de 	.word	0x200005de

0800d8b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b087      	sub	sp, #28
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	75fb      	strb	r3, [r7, #23]
 800d8ce:	e027      	b.n	800d920 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	0f1b      	lsrs	r3, r3, #28
 800d8d4:	2b09      	cmp	r3, #9
 800d8d6:	d80b      	bhi.n	800d8f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	0f1b      	lsrs	r3, r3, #28
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	7dfb      	ldrb	r3, [r7, #23]
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	440b      	add	r3, r1
 800d8e8:	3230      	adds	r2, #48	; 0x30
 800d8ea:	b2d2      	uxtb	r2, r2
 800d8ec:	701a      	strb	r2, [r3, #0]
 800d8ee:	e00a      	b.n	800d906 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	0f1b      	lsrs	r3, r3, #28
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	7dfb      	ldrb	r3, [r7, #23]
 800d8f8:	005b      	lsls	r3, r3, #1
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	440b      	add	r3, r1
 800d900:	3237      	adds	r2, #55	; 0x37
 800d902:	b2d2      	uxtb	r2, r2
 800d904:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	011b      	lsls	r3, r3, #4
 800d90a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d90c:	7dfb      	ldrb	r3, [r7, #23]
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	3301      	adds	r3, #1
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	4413      	add	r3, r2
 800d916:	2200      	movs	r2, #0
 800d918:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d91a:	7dfb      	ldrb	r3, [r7, #23]
 800d91c:	3301      	adds	r3, #1
 800d91e:	75fb      	strb	r3, [r7, #23]
 800d920:	7dfa      	ldrb	r2, [r7, #23]
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	429a      	cmp	r2, r3
 800d926:	d3d3      	bcc.n	800d8d0 <IntToUnicode+0x18>
  }
}
 800d928:	bf00      	nop
 800d92a:	bf00      	nop
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
	...

0800d938 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08a      	sub	sp, #40	; 0x28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d940:	f107 0314 	add.w	r3, r7, #20
 800d944:	2200      	movs	r2, #0
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	605a      	str	r2, [r3, #4]
 800d94a:	609a      	str	r2, [r3, #8]
 800d94c:	60da      	str	r2, [r3, #12]
 800d94e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d958:	d13a      	bne.n	800d9d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d95a:	2300      	movs	r3, #0
 800d95c:	613b      	str	r3, [r7, #16]
 800d95e:	4b1e      	ldr	r3, [pc, #120]	; (800d9d8 <HAL_PCD_MspInit+0xa0>)
 800d960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d962:	4a1d      	ldr	r2, [pc, #116]	; (800d9d8 <HAL_PCD_MspInit+0xa0>)
 800d964:	f043 0301 	orr.w	r3, r3, #1
 800d968:	6313      	str	r3, [r2, #48]	; 0x30
 800d96a:	4b1b      	ldr	r3, [pc, #108]	; (800d9d8 <HAL_PCD_MspInit+0xa0>)
 800d96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d96e:	f003 0301 	and.w	r3, r3, #1
 800d972:	613b      	str	r3, [r7, #16]
 800d974:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d976:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d97a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d97c:	2302      	movs	r3, #2
 800d97e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d980:	2300      	movs	r3, #0
 800d982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d984:	2303      	movs	r3, #3
 800d986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d988:	230a      	movs	r3, #10
 800d98a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d98c:	f107 0314 	add.w	r3, r7, #20
 800d990:	4619      	mov	r1, r3
 800d992:	4812      	ldr	r0, [pc, #72]	; (800d9dc <HAL_PCD_MspInit+0xa4>)
 800d994:	f7f4 fe8e 	bl	80026b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d998:	4b0f      	ldr	r3, [pc, #60]	; (800d9d8 <HAL_PCD_MspInit+0xa0>)
 800d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99c:	4a0e      	ldr	r2, [pc, #56]	; (800d9d8 <HAL_PCD_MspInit+0xa0>)
 800d99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a2:	6353      	str	r3, [r2, #52]	; 0x34
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <HAL_PCD_MspInit+0xa0>)
 800d9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ac:	4a0a      	ldr	r2, [pc, #40]	; (800d9d8 <HAL_PCD_MspInit+0xa0>)
 800d9ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d9b2:	6453      	str	r3, [r2, #68]	; 0x44
 800d9b4:	4b08      	ldr	r3, [pc, #32]	; (800d9d8 <HAL_PCD_MspInit+0xa0>)
 800d9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9bc:	60fb      	str	r3, [r7, #12]
 800d9be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	2105      	movs	r1, #5
 800d9c4:	2043      	movs	r0, #67	; 0x43
 800d9c6:	f7f4 fe4b 	bl	8002660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d9ca:	2043      	movs	r0, #67	; 0x43
 800d9cc:	f7f4 fe64 	bl	8002698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d9d0:	bf00      	nop
 800d9d2:	3728      	adds	r7, #40	; 0x28
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	40023800 	.word	0x40023800
 800d9dc:	40020000 	.word	0x40020000

0800d9e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	f7fb fc13 	bl	8009222 <USBD_LL_SetupStage>
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	460b      	mov	r3, r1
 800da0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800da16:	78fa      	ldrb	r2, [r7, #3]
 800da18:	6879      	ldr	r1, [r7, #4]
 800da1a:	4613      	mov	r3, r2
 800da1c:	00db      	lsls	r3, r3, #3
 800da1e:	4413      	add	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	440b      	add	r3, r1
 800da24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	78fb      	ldrb	r3, [r7, #3]
 800da2c:	4619      	mov	r1, r3
 800da2e:	f7fb fc4d 	bl	80092cc <USBD_LL_DataOutStage>
}
 800da32:	bf00      	nop
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	460b      	mov	r3, r1
 800da44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800da4c:	78fa      	ldrb	r2, [r7, #3]
 800da4e:	6879      	ldr	r1, [r7, #4]
 800da50:	4613      	mov	r3, r2
 800da52:	00db      	lsls	r3, r3, #3
 800da54:	4413      	add	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	440b      	add	r3, r1
 800da5a:	334c      	adds	r3, #76	; 0x4c
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	78fb      	ldrb	r3, [r7, #3]
 800da60:	4619      	mov	r1, r3
 800da62:	f7fb fce6 	bl	8009432 <USBD_LL_DataInStage>
}
 800da66:	bf00      	nop
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b082      	sub	sp, #8
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fb fe1a 	bl	80096b6 <USBD_LL_SOF>
}
 800da82:	bf00      	nop
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800da92:	2301      	movs	r3, #1
 800da94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d001      	beq.n	800daa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800da9e:	f7f4 fa43 	bl	8001f28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800daa8:	7bfa      	ldrb	r2, [r7, #15]
 800daaa:	4611      	mov	r1, r2
 800daac:	4618      	mov	r0, r3
 800daae:	f7fb fdc4 	bl	800963a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fb fd6c 	bl	8009596 <USBD_LL_Reset>
}
 800dabe:	bf00      	nop
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
	...

0800dac8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fb fdbf 	bl	800965a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	6812      	ldr	r2, [r2, #0]
 800daea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800daee:	f043 0301 	orr.w	r3, r3, #1
 800daf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6a1b      	ldr	r3, [r3, #32]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d005      	beq.n	800db08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dafc:	4b04      	ldr	r3, [pc, #16]	; (800db10 <HAL_PCD_SuspendCallback+0x48>)
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	4a03      	ldr	r2, [pc, #12]	; (800db10 <HAL_PCD_SuspendCallback+0x48>)
 800db02:	f043 0306 	orr.w	r3, r3, #6
 800db06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	e000ed00 	.word	0xe000ed00

0800db14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db22:	4618      	mov	r0, r3
 800db24:	f7fb fdaf 	bl	8009686 <USBD_LL_Resume>
}
 800db28:	bf00      	nop
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db42:	78fa      	ldrb	r2, [r7, #3]
 800db44:	4611      	mov	r1, r2
 800db46:	4618      	mov	r0, r3
 800db48:	f7fb fe07 	bl	800975a <USBD_LL_IsoOUTIncomplete>
}
 800db4c:	bf00      	nop
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	460b      	mov	r3, r1
 800db5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db66:	78fa      	ldrb	r2, [r7, #3]
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fb fdc3 	bl	80096f6 <USBD_LL_IsoINIncomplete>
}
 800db70:	bf00      	nop
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db86:	4618      	mov	r0, r3
 800db88:	f7fb fe19 	bl	80097be <USBD_LL_DevConnected>
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fb fe16 	bl	80097d4 <USBD_LL_DevDisconnected>
}
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d13c      	bne.n	800dc3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dbc0:	4a20      	ldr	r2, [pc, #128]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a1e      	ldr	r2, [pc, #120]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbcc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dbd0:	4b1c      	ldr	r3, [pc, #112]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dbd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dbd8:	4b1a      	ldr	r3, [pc, #104]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbda:	2204      	movs	r2, #4
 800dbdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dbde:	4b19      	ldr	r3, [pc, #100]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dbe4:	4b17      	ldr	r3, [pc, #92]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dbea:	4b16      	ldr	r3, [pc, #88]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbec:	2202      	movs	r2, #2
 800dbee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dbf0:	4b14      	ldr	r3, [pc, #80]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dbf6:	4b13      	ldr	r3, [pc, #76]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dbfc:	4b11      	ldr	r3, [pc, #68]	; (800dc44 <USBD_LL_Init+0x94>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc02:	4b10      	ldr	r3, [pc, #64]	; (800dc44 <USBD_LL_Init+0x94>)
 800dc04:	2200      	movs	r2, #0
 800dc06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc08:	4b0e      	ldr	r3, [pc, #56]	; (800dc44 <USBD_LL_Init+0x94>)
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc0e:	480d      	ldr	r0, [pc, #52]	; (800dc44 <USBD_LL_Init+0x94>)
 800dc10:	f7f5 fec5 	bl	800399e <HAL_PCD_Init>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d001      	beq.n	800dc1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dc1a:	f7f4 f985 	bl	8001f28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dc1e:	2180      	movs	r1, #128	; 0x80
 800dc20:	4808      	ldr	r0, [pc, #32]	; (800dc44 <USBD_LL_Init+0x94>)
 800dc22:	f7f7 f91c 	bl	8004e5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc26:	2240      	movs	r2, #64	; 0x40
 800dc28:	2100      	movs	r1, #0
 800dc2a:	4806      	ldr	r0, [pc, #24]	; (800dc44 <USBD_LL_Init+0x94>)
 800dc2c:	f7f7 f8d0 	bl	8004dd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc30:	2280      	movs	r2, #128	; 0x80
 800dc32:	2101      	movs	r1, #1
 800dc34:	4803      	ldr	r0, [pc, #12]	; (800dc44 <USBD_LL_Init+0x94>)
 800dc36:	f7f7 f8cb 	bl	8004dd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	200064b8 	.word	0x200064b8

0800dc48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc54:	2300      	movs	r3, #0
 800dc56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7f5 ffba 	bl	8003bd8 <HAL_PCD_Start>
 800dc64:	4603      	mov	r3, r0
 800dc66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 f942 	bl	800def4 <USBD_Get_USB_Status>
 800dc70:	4603      	mov	r3, r0
 800dc72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc74:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	70fb      	strb	r3, [r7, #3]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70bb      	strb	r3, [r7, #2]
 800dc94:	4613      	mov	r3, r2
 800dc96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dca6:	78bb      	ldrb	r3, [r7, #2]
 800dca8:	883a      	ldrh	r2, [r7, #0]
 800dcaa:	78f9      	ldrb	r1, [r7, #3]
 800dcac:	f7f6 fc8b 	bl	80045c6 <HAL_PCD_EP_Open>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 f91c 	bl	800def4 <USBD_Get_USB_Status>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dce4:	78fa      	ldrb	r2, [r7, #3]
 800dce6:	4611      	mov	r1, r2
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7f6 fcd4 	bl	8004696 <HAL_PCD_EP_Close>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f8fd 	bl	800def4 <USBD_Get_USB_Status>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd22:	78fa      	ldrb	r2, [r7, #3]
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7f6 fdac 	bl	8004884 <HAL_PCD_EP_SetStall>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 f8de 	bl	800def4 <USBD_Get_USB_Status>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b084      	sub	sp, #16
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	460b      	mov	r3, r1
 800dd50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd52:	2300      	movs	r3, #0
 800dd54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd56:	2300      	movs	r3, #0
 800dd58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd60:	78fa      	ldrb	r2, [r7, #3]
 800dd62:	4611      	mov	r1, r2
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7f6 fdf1 	bl	800494c <HAL_PCD_EP_ClrStall>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 f8bf 	bl	800def4 <USBD_Get_USB_Status>
 800dd76:	4603      	mov	r3, r0
 800dd78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	da0b      	bge.n	800ddb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dda0:	78fb      	ldrb	r3, [r7, #3]
 800dda2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dda6:	68f9      	ldr	r1, [r7, #12]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	4413      	add	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	440b      	add	r3, r1
 800ddb2:	333e      	adds	r3, #62	; 0x3e
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	e00b      	b.n	800ddd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ddb8:	78fb      	ldrb	r3, [r7, #3]
 800ddba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddbe:	68f9      	ldr	r1, [r7, #12]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	4413      	add	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	440b      	add	r3, r1
 800ddca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ddce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3714      	adds	r7, #20
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	460b      	mov	r3, r1
 800dde6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddf6:	78fa      	ldrb	r2, [r7, #3]
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7f6 fbbe 	bl	800457c <HAL_PCD_SetAddress>
 800de00:	4603      	mov	r3, r0
 800de02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de04:	7bfb      	ldrb	r3, [r7, #15]
 800de06:	4618      	mov	r0, r3
 800de08:	f000 f874 	bl	800def4 <USBD_Get_USB_Status>
 800de0c:	4603      	mov	r3, r0
 800de0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de10:	7bbb      	ldrb	r3, [r7, #14]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b086      	sub	sp, #24
 800de1e:	af00      	add	r7, sp, #0
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	607a      	str	r2, [r7, #4]
 800de24:	603b      	str	r3, [r7, #0]
 800de26:	460b      	mov	r3, r1
 800de28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800de38:	7af9      	ldrb	r1, [r7, #11]
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	f7f6 fcd7 	bl	80047f0 <HAL_PCD_EP_Transmit>
 800de42:	4603      	mov	r3, r0
 800de44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de46:	7dfb      	ldrb	r3, [r7, #23]
 800de48:	4618      	mov	r0, r3
 800de4a:	f000 f853 	bl	800def4 <USBD_Get_USB_Status>
 800de4e:	4603      	mov	r3, r0
 800de50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de52:	7dbb      	ldrb	r3, [r7, #22]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	607a      	str	r2, [r7, #4]
 800de66:	603b      	str	r3, [r7, #0]
 800de68:	460b      	mov	r3, r1
 800de6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800de7a:	7af9      	ldrb	r1, [r7, #11]
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	f7f6 fc53 	bl	800472a <HAL_PCD_EP_Receive>
 800de84:	4603      	mov	r3, r0
 800de86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de88:	7dfb      	ldrb	r3, [r7, #23]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 f832 	bl	800def4 <USBD_Get_USB_Status>
 800de90:	4603      	mov	r3, r0
 800de92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de94:	7dbb      	ldrb	r3, [r7, #22]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3718      	adds	r7, #24
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b082      	sub	sp, #8
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
 800dea6:	460b      	mov	r3, r1
 800dea8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800deb0:	78fa      	ldrb	r2, [r7, #3]
 800deb2:	4611      	mov	r1, r2
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7f6 fc83 	bl	80047c0 <HAL_PCD_EP_GetRxCount>
 800deba:	4603      	mov	r3, r0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800decc:	4b03      	ldr	r3, [pc, #12]	; (800dedc <USBD_static_malloc+0x18>)
}
 800dece:	4618      	mov	r0, r3
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	200069c4 	.word	0x200069c4

0800dee0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]

}
 800dee8:	bf00      	nop
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	4603      	mov	r3, r0
 800defc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800defe:	2300      	movs	r3, #0
 800df00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	2b03      	cmp	r3, #3
 800df06:	d817      	bhi.n	800df38 <USBD_Get_USB_Status+0x44>
 800df08:	a201      	add	r2, pc, #4	; (adr r2, 800df10 <USBD_Get_USB_Status+0x1c>)
 800df0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0e:	bf00      	nop
 800df10:	0800df21 	.word	0x0800df21
 800df14:	0800df27 	.word	0x0800df27
 800df18:	0800df2d 	.word	0x0800df2d
 800df1c:	0800df33 	.word	0x0800df33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df20:	2300      	movs	r3, #0
 800df22:	73fb      	strb	r3, [r7, #15]
    break;
 800df24:	e00b      	b.n	800df3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df26:	2303      	movs	r3, #3
 800df28:	73fb      	strb	r3, [r7, #15]
    break;
 800df2a:	e008      	b.n	800df3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df2c:	2301      	movs	r3, #1
 800df2e:	73fb      	strb	r3, [r7, #15]
    break;
 800df30:	e005      	b.n	800df3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df32:	2303      	movs	r3, #3
 800df34:	73fb      	strb	r3, [r7, #15]
    break;
 800df36:	e002      	b.n	800df3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df38:	2303      	movs	r3, #3
 800df3a:	73fb      	strb	r3, [r7, #15]
    break;
 800df3c:	bf00      	nop
  }
  return usb_status;
 800df3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <__errno>:
 800df4c:	4b01      	ldr	r3, [pc, #4]	; (800df54 <__errno+0x8>)
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	200005e8 	.word	0x200005e8

0800df58 <__libc_init_array>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	4d0d      	ldr	r5, [pc, #52]	; (800df90 <__libc_init_array+0x38>)
 800df5c:	4c0d      	ldr	r4, [pc, #52]	; (800df94 <__libc_init_array+0x3c>)
 800df5e:	1b64      	subs	r4, r4, r5
 800df60:	10a4      	asrs	r4, r4, #2
 800df62:	2600      	movs	r6, #0
 800df64:	42a6      	cmp	r6, r4
 800df66:	d109      	bne.n	800df7c <__libc_init_array+0x24>
 800df68:	4d0b      	ldr	r5, [pc, #44]	; (800df98 <__libc_init_array+0x40>)
 800df6a:	4c0c      	ldr	r4, [pc, #48]	; (800df9c <__libc_init_array+0x44>)
 800df6c:	f000 fcb2 	bl	800e8d4 <_init>
 800df70:	1b64      	subs	r4, r4, r5
 800df72:	10a4      	asrs	r4, r4, #2
 800df74:	2600      	movs	r6, #0
 800df76:	42a6      	cmp	r6, r4
 800df78:	d105      	bne.n	800df86 <__libc_init_array+0x2e>
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df80:	4798      	blx	r3
 800df82:	3601      	adds	r6, #1
 800df84:	e7ee      	b.n	800df64 <__libc_init_array+0xc>
 800df86:	f855 3b04 	ldr.w	r3, [r5], #4
 800df8a:	4798      	blx	r3
 800df8c:	3601      	adds	r6, #1
 800df8e:	e7f2      	b.n	800df76 <__libc_init_array+0x1e>
 800df90:	0800efd4 	.word	0x0800efd4
 800df94:	0800efd4 	.word	0x0800efd4
 800df98:	0800efd4 	.word	0x0800efd4
 800df9c:	0800efd8 	.word	0x0800efd8

0800dfa0 <malloc>:
 800dfa0:	4b02      	ldr	r3, [pc, #8]	; (800dfac <malloc+0xc>)
 800dfa2:	4601      	mov	r1, r0
 800dfa4:	6818      	ldr	r0, [r3, #0]
 800dfa6:	f000 b88d 	b.w	800e0c4 <_malloc_r>
 800dfaa:	bf00      	nop
 800dfac:	200005e8 	.word	0x200005e8

0800dfb0 <free>:
 800dfb0:	4b02      	ldr	r3, [pc, #8]	; (800dfbc <free+0xc>)
 800dfb2:	4601      	mov	r1, r0
 800dfb4:	6818      	ldr	r0, [r3, #0]
 800dfb6:	f000 b819 	b.w	800dfec <_free_r>
 800dfba:	bf00      	nop
 800dfbc:	200005e8 	.word	0x200005e8

0800dfc0 <memcpy>:
 800dfc0:	440a      	add	r2, r1
 800dfc2:	4291      	cmp	r1, r2
 800dfc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfc8:	d100      	bne.n	800dfcc <memcpy+0xc>
 800dfca:	4770      	bx	lr
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfd6:	4291      	cmp	r1, r2
 800dfd8:	d1f9      	bne.n	800dfce <memcpy+0xe>
 800dfda:	bd10      	pop	{r4, pc}

0800dfdc <memset>:
 800dfdc:	4402      	add	r2, r0
 800dfde:	4603      	mov	r3, r0
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d100      	bne.n	800dfe6 <memset+0xa>
 800dfe4:	4770      	bx	lr
 800dfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800dfea:	e7f9      	b.n	800dfe0 <memset+0x4>

0800dfec <_free_r>:
 800dfec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfee:	2900      	cmp	r1, #0
 800dff0:	d044      	beq.n	800e07c <_free_r+0x90>
 800dff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dff6:	9001      	str	r0, [sp, #4]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f1a1 0404 	sub.w	r4, r1, #4
 800dffe:	bfb8      	it	lt
 800e000:	18e4      	addlt	r4, r4, r3
 800e002:	f000 f917 	bl	800e234 <__malloc_lock>
 800e006:	4a1e      	ldr	r2, [pc, #120]	; (800e080 <_free_r+0x94>)
 800e008:	9801      	ldr	r0, [sp, #4]
 800e00a:	6813      	ldr	r3, [r2, #0]
 800e00c:	b933      	cbnz	r3, 800e01c <_free_r+0x30>
 800e00e:	6063      	str	r3, [r4, #4]
 800e010:	6014      	str	r4, [r2, #0]
 800e012:	b003      	add	sp, #12
 800e014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e018:	f000 b912 	b.w	800e240 <__malloc_unlock>
 800e01c:	42a3      	cmp	r3, r4
 800e01e:	d908      	bls.n	800e032 <_free_r+0x46>
 800e020:	6825      	ldr	r5, [r4, #0]
 800e022:	1961      	adds	r1, r4, r5
 800e024:	428b      	cmp	r3, r1
 800e026:	bf01      	itttt	eq
 800e028:	6819      	ldreq	r1, [r3, #0]
 800e02a:	685b      	ldreq	r3, [r3, #4]
 800e02c:	1949      	addeq	r1, r1, r5
 800e02e:	6021      	streq	r1, [r4, #0]
 800e030:	e7ed      	b.n	800e00e <_free_r+0x22>
 800e032:	461a      	mov	r2, r3
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	b10b      	cbz	r3, 800e03c <_free_r+0x50>
 800e038:	42a3      	cmp	r3, r4
 800e03a:	d9fa      	bls.n	800e032 <_free_r+0x46>
 800e03c:	6811      	ldr	r1, [r2, #0]
 800e03e:	1855      	adds	r5, r2, r1
 800e040:	42a5      	cmp	r5, r4
 800e042:	d10b      	bne.n	800e05c <_free_r+0x70>
 800e044:	6824      	ldr	r4, [r4, #0]
 800e046:	4421      	add	r1, r4
 800e048:	1854      	adds	r4, r2, r1
 800e04a:	42a3      	cmp	r3, r4
 800e04c:	6011      	str	r1, [r2, #0]
 800e04e:	d1e0      	bne.n	800e012 <_free_r+0x26>
 800e050:	681c      	ldr	r4, [r3, #0]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	6053      	str	r3, [r2, #4]
 800e056:	4421      	add	r1, r4
 800e058:	6011      	str	r1, [r2, #0]
 800e05a:	e7da      	b.n	800e012 <_free_r+0x26>
 800e05c:	d902      	bls.n	800e064 <_free_r+0x78>
 800e05e:	230c      	movs	r3, #12
 800e060:	6003      	str	r3, [r0, #0]
 800e062:	e7d6      	b.n	800e012 <_free_r+0x26>
 800e064:	6825      	ldr	r5, [r4, #0]
 800e066:	1961      	adds	r1, r4, r5
 800e068:	428b      	cmp	r3, r1
 800e06a:	bf04      	itt	eq
 800e06c:	6819      	ldreq	r1, [r3, #0]
 800e06e:	685b      	ldreq	r3, [r3, #4]
 800e070:	6063      	str	r3, [r4, #4]
 800e072:	bf04      	itt	eq
 800e074:	1949      	addeq	r1, r1, r5
 800e076:	6021      	streq	r1, [r4, #0]
 800e078:	6054      	str	r4, [r2, #4]
 800e07a:	e7ca      	b.n	800e012 <_free_r+0x26>
 800e07c:	b003      	add	sp, #12
 800e07e:	bd30      	pop	{r4, r5, pc}
 800e080:	20006be4 	.word	0x20006be4

0800e084 <sbrk_aligned>:
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	4e0e      	ldr	r6, [pc, #56]	; (800e0c0 <sbrk_aligned+0x3c>)
 800e088:	460c      	mov	r4, r1
 800e08a:	6831      	ldr	r1, [r6, #0]
 800e08c:	4605      	mov	r5, r0
 800e08e:	b911      	cbnz	r1, 800e096 <sbrk_aligned+0x12>
 800e090:	f000 f88c 	bl	800e1ac <_sbrk_r>
 800e094:	6030      	str	r0, [r6, #0]
 800e096:	4621      	mov	r1, r4
 800e098:	4628      	mov	r0, r5
 800e09a:	f000 f887 	bl	800e1ac <_sbrk_r>
 800e09e:	1c43      	adds	r3, r0, #1
 800e0a0:	d00a      	beq.n	800e0b8 <sbrk_aligned+0x34>
 800e0a2:	1cc4      	adds	r4, r0, #3
 800e0a4:	f024 0403 	bic.w	r4, r4, #3
 800e0a8:	42a0      	cmp	r0, r4
 800e0aa:	d007      	beq.n	800e0bc <sbrk_aligned+0x38>
 800e0ac:	1a21      	subs	r1, r4, r0
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	f000 f87c 	bl	800e1ac <_sbrk_r>
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d101      	bne.n	800e0bc <sbrk_aligned+0x38>
 800e0b8:	f04f 34ff 	mov.w	r4, #4294967295
 800e0bc:	4620      	mov	r0, r4
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
 800e0c0:	20006be8 	.word	0x20006be8

0800e0c4 <_malloc_r>:
 800e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c8:	1ccd      	adds	r5, r1, #3
 800e0ca:	f025 0503 	bic.w	r5, r5, #3
 800e0ce:	3508      	adds	r5, #8
 800e0d0:	2d0c      	cmp	r5, #12
 800e0d2:	bf38      	it	cc
 800e0d4:	250c      	movcc	r5, #12
 800e0d6:	2d00      	cmp	r5, #0
 800e0d8:	4607      	mov	r7, r0
 800e0da:	db01      	blt.n	800e0e0 <_malloc_r+0x1c>
 800e0dc:	42a9      	cmp	r1, r5
 800e0de:	d905      	bls.n	800e0ec <_malloc_r+0x28>
 800e0e0:	230c      	movs	r3, #12
 800e0e2:	603b      	str	r3, [r7, #0]
 800e0e4:	2600      	movs	r6, #0
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ec:	4e2e      	ldr	r6, [pc, #184]	; (800e1a8 <_malloc_r+0xe4>)
 800e0ee:	f000 f8a1 	bl	800e234 <__malloc_lock>
 800e0f2:	6833      	ldr	r3, [r6, #0]
 800e0f4:	461c      	mov	r4, r3
 800e0f6:	bb34      	cbnz	r4, 800e146 <_malloc_r+0x82>
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	4638      	mov	r0, r7
 800e0fc:	f7ff ffc2 	bl	800e084 <sbrk_aligned>
 800e100:	1c43      	adds	r3, r0, #1
 800e102:	4604      	mov	r4, r0
 800e104:	d14d      	bne.n	800e1a2 <_malloc_r+0xde>
 800e106:	6834      	ldr	r4, [r6, #0]
 800e108:	4626      	mov	r6, r4
 800e10a:	2e00      	cmp	r6, #0
 800e10c:	d140      	bne.n	800e190 <_malloc_r+0xcc>
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	4631      	mov	r1, r6
 800e112:	4638      	mov	r0, r7
 800e114:	eb04 0803 	add.w	r8, r4, r3
 800e118:	f000 f848 	bl	800e1ac <_sbrk_r>
 800e11c:	4580      	cmp	r8, r0
 800e11e:	d13a      	bne.n	800e196 <_malloc_r+0xd2>
 800e120:	6821      	ldr	r1, [r4, #0]
 800e122:	3503      	adds	r5, #3
 800e124:	1a6d      	subs	r5, r5, r1
 800e126:	f025 0503 	bic.w	r5, r5, #3
 800e12a:	3508      	adds	r5, #8
 800e12c:	2d0c      	cmp	r5, #12
 800e12e:	bf38      	it	cc
 800e130:	250c      	movcc	r5, #12
 800e132:	4629      	mov	r1, r5
 800e134:	4638      	mov	r0, r7
 800e136:	f7ff ffa5 	bl	800e084 <sbrk_aligned>
 800e13a:	3001      	adds	r0, #1
 800e13c:	d02b      	beq.n	800e196 <_malloc_r+0xd2>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	442b      	add	r3, r5
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	e00e      	b.n	800e164 <_malloc_r+0xa0>
 800e146:	6822      	ldr	r2, [r4, #0]
 800e148:	1b52      	subs	r2, r2, r5
 800e14a:	d41e      	bmi.n	800e18a <_malloc_r+0xc6>
 800e14c:	2a0b      	cmp	r2, #11
 800e14e:	d916      	bls.n	800e17e <_malloc_r+0xba>
 800e150:	1961      	adds	r1, r4, r5
 800e152:	42a3      	cmp	r3, r4
 800e154:	6025      	str	r5, [r4, #0]
 800e156:	bf18      	it	ne
 800e158:	6059      	strne	r1, [r3, #4]
 800e15a:	6863      	ldr	r3, [r4, #4]
 800e15c:	bf08      	it	eq
 800e15e:	6031      	streq	r1, [r6, #0]
 800e160:	5162      	str	r2, [r4, r5]
 800e162:	604b      	str	r3, [r1, #4]
 800e164:	4638      	mov	r0, r7
 800e166:	f104 060b 	add.w	r6, r4, #11
 800e16a:	f000 f869 	bl	800e240 <__malloc_unlock>
 800e16e:	f026 0607 	bic.w	r6, r6, #7
 800e172:	1d23      	adds	r3, r4, #4
 800e174:	1af2      	subs	r2, r6, r3
 800e176:	d0b6      	beq.n	800e0e6 <_malloc_r+0x22>
 800e178:	1b9b      	subs	r3, r3, r6
 800e17a:	50a3      	str	r3, [r4, r2]
 800e17c:	e7b3      	b.n	800e0e6 <_malloc_r+0x22>
 800e17e:	6862      	ldr	r2, [r4, #4]
 800e180:	42a3      	cmp	r3, r4
 800e182:	bf0c      	ite	eq
 800e184:	6032      	streq	r2, [r6, #0]
 800e186:	605a      	strne	r2, [r3, #4]
 800e188:	e7ec      	b.n	800e164 <_malloc_r+0xa0>
 800e18a:	4623      	mov	r3, r4
 800e18c:	6864      	ldr	r4, [r4, #4]
 800e18e:	e7b2      	b.n	800e0f6 <_malloc_r+0x32>
 800e190:	4634      	mov	r4, r6
 800e192:	6876      	ldr	r6, [r6, #4]
 800e194:	e7b9      	b.n	800e10a <_malloc_r+0x46>
 800e196:	230c      	movs	r3, #12
 800e198:	603b      	str	r3, [r7, #0]
 800e19a:	4638      	mov	r0, r7
 800e19c:	f000 f850 	bl	800e240 <__malloc_unlock>
 800e1a0:	e7a1      	b.n	800e0e6 <_malloc_r+0x22>
 800e1a2:	6025      	str	r5, [r4, #0]
 800e1a4:	e7de      	b.n	800e164 <_malloc_r+0xa0>
 800e1a6:	bf00      	nop
 800e1a8:	20006be4 	.word	0x20006be4

0800e1ac <_sbrk_r>:
 800e1ac:	b538      	push	{r3, r4, r5, lr}
 800e1ae:	4d06      	ldr	r5, [pc, #24]	; (800e1c8 <_sbrk_r+0x1c>)
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	602b      	str	r3, [r5, #0]
 800e1b8:	f7f4 f8c2 	bl	8002340 <_sbrk>
 800e1bc:	1c43      	adds	r3, r0, #1
 800e1be:	d102      	bne.n	800e1c6 <_sbrk_r+0x1a>
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	b103      	cbz	r3, 800e1c6 <_sbrk_r+0x1a>
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	bd38      	pop	{r3, r4, r5, pc}
 800e1c8:	20006bec 	.word	0x20006bec

0800e1cc <siprintf>:
 800e1cc:	b40e      	push	{r1, r2, r3}
 800e1ce:	b500      	push	{lr}
 800e1d0:	b09c      	sub	sp, #112	; 0x70
 800e1d2:	ab1d      	add	r3, sp, #116	; 0x74
 800e1d4:	9002      	str	r0, [sp, #8]
 800e1d6:	9006      	str	r0, [sp, #24]
 800e1d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1dc:	4809      	ldr	r0, [pc, #36]	; (800e204 <siprintf+0x38>)
 800e1de:	9107      	str	r1, [sp, #28]
 800e1e0:	9104      	str	r1, [sp, #16]
 800e1e2:	4909      	ldr	r1, [pc, #36]	; (800e208 <siprintf+0x3c>)
 800e1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1e8:	9105      	str	r1, [sp, #20]
 800e1ea:	6800      	ldr	r0, [r0, #0]
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	a902      	add	r1, sp, #8
 800e1f0:	f000 f888 	bl	800e304 <_svfiprintf_r>
 800e1f4:	9b02      	ldr	r3, [sp, #8]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	b01c      	add	sp, #112	; 0x70
 800e1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e200:	b003      	add	sp, #12
 800e202:	4770      	bx	lr
 800e204:	200005e8 	.word	0x200005e8
 800e208:	ffff0208 	.word	0xffff0208

0800e20c <strncpy>:
 800e20c:	b510      	push	{r4, lr}
 800e20e:	3901      	subs	r1, #1
 800e210:	4603      	mov	r3, r0
 800e212:	b132      	cbz	r2, 800e222 <strncpy+0x16>
 800e214:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e218:	f803 4b01 	strb.w	r4, [r3], #1
 800e21c:	3a01      	subs	r2, #1
 800e21e:	2c00      	cmp	r4, #0
 800e220:	d1f7      	bne.n	800e212 <strncpy+0x6>
 800e222:	441a      	add	r2, r3
 800e224:	2100      	movs	r1, #0
 800e226:	4293      	cmp	r3, r2
 800e228:	d100      	bne.n	800e22c <strncpy+0x20>
 800e22a:	bd10      	pop	{r4, pc}
 800e22c:	f803 1b01 	strb.w	r1, [r3], #1
 800e230:	e7f9      	b.n	800e226 <strncpy+0x1a>
	...

0800e234 <__malloc_lock>:
 800e234:	4801      	ldr	r0, [pc, #4]	; (800e23c <__malloc_lock+0x8>)
 800e236:	f000 baf9 	b.w	800e82c <__retarget_lock_acquire_recursive>
 800e23a:	bf00      	nop
 800e23c:	20006bf0 	.word	0x20006bf0

0800e240 <__malloc_unlock>:
 800e240:	4801      	ldr	r0, [pc, #4]	; (800e248 <__malloc_unlock+0x8>)
 800e242:	f000 baf4 	b.w	800e82e <__retarget_lock_release_recursive>
 800e246:	bf00      	nop
 800e248:	20006bf0 	.word	0x20006bf0

0800e24c <__ssputs_r>:
 800e24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e250:	688e      	ldr	r6, [r1, #8]
 800e252:	429e      	cmp	r6, r3
 800e254:	4682      	mov	sl, r0
 800e256:	460c      	mov	r4, r1
 800e258:	4690      	mov	r8, r2
 800e25a:	461f      	mov	r7, r3
 800e25c:	d838      	bhi.n	800e2d0 <__ssputs_r+0x84>
 800e25e:	898a      	ldrh	r2, [r1, #12]
 800e260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e264:	d032      	beq.n	800e2cc <__ssputs_r+0x80>
 800e266:	6825      	ldr	r5, [r4, #0]
 800e268:	6909      	ldr	r1, [r1, #16]
 800e26a:	eba5 0901 	sub.w	r9, r5, r1
 800e26e:	6965      	ldr	r5, [r4, #20]
 800e270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e278:	3301      	adds	r3, #1
 800e27a:	444b      	add	r3, r9
 800e27c:	106d      	asrs	r5, r5, #1
 800e27e:	429d      	cmp	r5, r3
 800e280:	bf38      	it	cc
 800e282:	461d      	movcc	r5, r3
 800e284:	0553      	lsls	r3, r2, #21
 800e286:	d531      	bpl.n	800e2ec <__ssputs_r+0xa0>
 800e288:	4629      	mov	r1, r5
 800e28a:	f7ff ff1b 	bl	800e0c4 <_malloc_r>
 800e28e:	4606      	mov	r6, r0
 800e290:	b950      	cbnz	r0, 800e2a8 <__ssputs_r+0x5c>
 800e292:	230c      	movs	r3, #12
 800e294:	f8ca 3000 	str.w	r3, [sl]
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e29e:	81a3      	strh	r3, [r4, #12]
 800e2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a8:	6921      	ldr	r1, [r4, #16]
 800e2aa:	464a      	mov	r2, r9
 800e2ac:	f7ff fe88 	bl	800dfc0 <memcpy>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ba:	81a3      	strh	r3, [r4, #12]
 800e2bc:	6126      	str	r6, [r4, #16]
 800e2be:	6165      	str	r5, [r4, #20]
 800e2c0:	444e      	add	r6, r9
 800e2c2:	eba5 0509 	sub.w	r5, r5, r9
 800e2c6:	6026      	str	r6, [r4, #0]
 800e2c8:	60a5      	str	r5, [r4, #8]
 800e2ca:	463e      	mov	r6, r7
 800e2cc:	42be      	cmp	r6, r7
 800e2ce:	d900      	bls.n	800e2d2 <__ssputs_r+0x86>
 800e2d0:	463e      	mov	r6, r7
 800e2d2:	6820      	ldr	r0, [r4, #0]
 800e2d4:	4632      	mov	r2, r6
 800e2d6:	4641      	mov	r1, r8
 800e2d8:	f000 faaa 	bl	800e830 <memmove>
 800e2dc:	68a3      	ldr	r3, [r4, #8]
 800e2de:	1b9b      	subs	r3, r3, r6
 800e2e0:	60a3      	str	r3, [r4, #8]
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	4433      	add	r3, r6
 800e2e6:	6023      	str	r3, [r4, #0]
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	e7db      	b.n	800e2a4 <__ssputs_r+0x58>
 800e2ec:	462a      	mov	r2, r5
 800e2ee:	f000 fab9 	bl	800e864 <_realloc_r>
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d1e1      	bne.n	800e2bc <__ssputs_r+0x70>
 800e2f8:	6921      	ldr	r1, [r4, #16]
 800e2fa:	4650      	mov	r0, sl
 800e2fc:	f7ff fe76 	bl	800dfec <_free_r>
 800e300:	e7c7      	b.n	800e292 <__ssputs_r+0x46>
	...

0800e304 <_svfiprintf_r>:
 800e304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e308:	4698      	mov	r8, r3
 800e30a:	898b      	ldrh	r3, [r1, #12]
 800e30c:	061b      	lsls	r3, r3, #24
 800e30e:	b09d      	sub	sp, #116	; 0x74
 800e310:	4607      	mov	r7, r0
 800e312:	460d      	mov	r5, r1
 800e314:	4614      	mov	r4, r2
 800e316:	d50e      	bpl.n	800e336 <_svfiprintf_r+0x32>
 800e318:	690b      	ldr	r3, [r1, #16]
 800e31a:	b963      	cbnz	r3, 800e336 <_svfiprintf_r+0x32>
 800e31c:	2140      	movs	r1, #64	; 0x40
 800e31e:	f7ff fed1 	bl	800e0c4 <_malloc_r>
 800e322:	6028      	str	r0, [r5, #0]
 800e324:	6128      	str	r0, [r5, #16]
 800e326:	b920      	cbnz	r0, 800e332 <_svfiprintf_r+0x2e>
 800e328:	230c      	movs	r3, #12
 800e32a:	603b      	str	r3, [r7, #0]
 800e32c:	f04f 30ff 	mov.w	r0, #4294967295
 800e330:	e0d1      	b.n	800e4d6 <_svfiprintf_r+0x1d2>
 800e332:	2340      	movs	r3, #64	; 0x40
 800e334:	616b      	str	r3, [r5, #20]
 800e336:	2300      	movs	r3, #0
 800e338:	9309      	str	r3, [sp, #36]	; 0x24
 800e33a:	2320      	movs	r3, #32
 800e33c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e340:	f8cd 800c 	str.w	r8, [sp, #12]
 800e344:	2330      	movs	r3, #48	; 0x30
 800e346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4f0 <_svfiprintf_r+0x1ec>
 800e34a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e34e:	f04f 0901 	mov.w	r9, #1
 800e352:	4623      	mov	r3, r4
 800e354:	469a      	mov	sl, r3
 800e356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e35a:	b10a      	cbz	r2, 800e360 <_svfiprintf_r+0x5c>
 800e35c:	2a25      	cmp	r2, #37	; 0x25
 800e35e:	d1f9      	bne.n	800e354 <_svfiprintf_r+0x50>
 800e360:	ebba 0b04 	subs.w	fp, sl, r4
 800e364:	d00b      	beq.n	800e37e <_svfiprintf_r+0x7a>
 800e366:	465b      	mov	r3, fp
 800e368:	4622      	mov	r2, r4
 800e36a:	4629      	mov	r1, r5
 800e36c:	4638      	mov	r0, r7
 800e36e:	f7ff ff6d 	bl	800e24c <__ssputs_r>
 800e372:	3001      	adds	r0, #1
 800e374:	f000 80aa 	beq.w	800e4cc <_svfiprintf_r+0x1c8>
 800e378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e37a:	445a      	add	r2, fp
 800e37c:	9209      	str	r2, [sp, #36]	; 0x24
 800e37e:	f89a 3000 	ldrb.w	r3, [sl]
 800e382:	2b00      	cmp	r3, #0
 800e384:	f000 80a2 	beq.w	800e4cc <_svfiprintf_r+0x1c8>
 800e388:	2300      	movs	r3, #0
 800e38a:	f04f 32ff 	mov.w	r2, #4294967295
 800e38e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e392:	f10a 0a01 	add.w	sl, sl, #1
 800e396:	9304      	str	r3, [sp, #16]
 800e398:	9307      	str	r3, [sp, #28]
 800e39a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e39e:	931a      	str	r3, [sp, #104]	; 0x68
 800e3a0:	4654      	mov	r4, sl
 800e3a2:	2205      	movs	r2, #5
 800e3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3a8:	4851      	ldr	r0, [pc, #324]	; (800e4f0 <_svfiprintf_r+0x1ec>)
 800e3aa:	f7f1 ff21 	bl	80001f0 <memchr>
 800e3ae:	9a04      	ldr	r2, [sp, #16]
 800e3b0:	b9d8      	cbnz	r0, 800e3ea <_svfiprintf_r+0xe6>
 800e3b2:	06d0      	lsls	r0, r2, #27
 800e3b4:	bf44      	itt	mi
 800e3b6:	2320      	movmi	r3, #32
 800e3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3bc:	0711      	lsls	r1, r2, #28
 800e3be:	bf44      	itt	mi
 800e3c0:	232b      	movmi	r3, #43	; 0x2b
 800e3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3c6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3ca:	2b2a      	cmp	r3, #42	; 0x2a
 800e3cc:	d015      	beq.n	800e3fa <_svfiprintf_r+0xf6>
 800e3ce:	9a07      	ldr	r2, [sp, #28]
 800e3d0:	4654      	mov	r4, sl
 800e3d2:	2000      	movs	r0, #0
 800e3d4:	f04f 0c0a 	mov.w	ip, #10
 800e3d8:	4621      	mov	r1, r4
 800e3da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3de:	3b30      	subs	r3, #48	; 0x30
 800e3e0:	2b09      	cmp	r3, #9
 800e3e2:	d94e      	bls.n	800e482 <_svfiprintf_r+0x17e>
 800e3e4:	b1b0      	cbz	r0, 800e414 <_svfiprintf_r+0x110>
 800e3e6:	9207      	str	r2, [sp, #28]
 800e3e8:	e014      	b.n	800e414 <_svfiprintf_r+0x110>
 800e3ea:	eba0 0308 	sub.w	r3, r0, r8
 800e3ee:	fa09 f303 	lsl.w	r3, r9, r3
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	9304      	str	r3, [sp, #16]
 800e3f6:	46a2      	mov	sl, r4
 800e3f8:	e7d2      	b.n	800e3a0 <_svfiprintf_r+0x9c>
 800e3fa:	9b03      	ldr	r3, [sp, #12]
 800e3fc:	1d19      	adds	r1, r3, #4
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	9103      	str	r1, [sp, #12]
 800e402:	2b00      	cmp	r3, #0
 800e404:	bfbb      	ittet	lt
 800e406:	425b      	neglt	r3, r3
 800e408:	f042 0202 	orrlt.w	r2, r2, #2
 800e40c:	9307      	strge	r3, [sp, #28]
 800e40e:	9307      	strlt	r3, [sp, #28]
 800e410:	bfb8      	it	lt
 800e412:	9204      	strlt	r2, [sp, #16]
 800e414:	7823      	ldrb	r3, [r4, #0]
 800e416:	2b2e      	cmp	r3, #46	; 0x2e
 800e418:	d10c      	bne.n	800e434 <_svfiprintf_r+0x130>
 800e41a:	7863      	ldrb	r3, [r4, #1]
 800e41c:	2b2a      	cmp	r3, #42	; 0x2a
 800e41e:	d135      	bne.n	800e48c <_svfiprintf_r+0x188>
 800e420:	9b03      	ldr	r3, [sp, #12]
 800e422:	1d1a      	adds	r2, r3, #4
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	9203      	str	r2, [sp, #12]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	bfb8      	it	lt
 800e42c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e430:	3402      	adds	r4, #2
 800e432:	9305      	str	r3, [sp, #20]
 800e434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e500 <_svfiprintf_r+0x1fc>
 800e438:	7821      	ldrb	r1, [r4, #0]
 800e43a:	2203      	movs	r2, #3
 800e43c:	4650      	mov	r0, sl
 800e43e:	f7f1 fed7 	bl	80001f0 <memchr>
 800e442:	b140      	cbz	r0, 800e456 <_svfiprintf_r+0x152>
 800e444:	2340      	movs	r3, #64	; 0x40
 800e446:	eba0 000a 	sub.w	r0, r0, sl
 800e44a:	fa03 f000 	lsl.w	r0, r3, r0
 800e44e:	9b04      	ldr	r3, [sp, #16]
 800e450:	4303      	orrs	r3, r0
 800e452:	3401      	adds	r4, #1
 800e454:	9304      	str	r3, [sp, #16]
 800e456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e45a:	4826      	ldr	r0, [pc, #152]	; (800e4f4 <_svfiprintf_r+0x1f0>)
 800e45c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e460:	2206      	movs	r2, #6
 800e462:	f7f1 fec5 	bl	80001f0 <memchr>
 800e466:	2800      	cmp	r0, #0
 800e468:	d038      	beq.n	800e4dc <_svfiprintf_r+0x1d8>
 800e46a:	4b23      	ldr	r3, [pc, #140]	; (800e4f8 <_svfiprintf_r+0x1f4>)
 800e46c:	bb1b      	cbnz	r3, 800e4b6 <_svfiprintf_r+0x1b2>
 800e46e:	9b03      	ldr	r3, [sp, #12]
 800e470:	3307      	adds	r3, #7
 800e472:	f023 0307 	bic.w	r3, r3, #7
 800e476:	3308      	adds	r3, #8
 800e478:	9303      	str	r3, [sp, #12]
 800e47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e47c:	4433      	add	r3, r6
 800e47e:	9309      	str	r3, [sp, #36]	; 0x24
 800e480:	e767      	b.n	800e352 <_svfiprintf_r+0x4e>
 800e482:	fb0c 3202 	mla	r2, ip, r2, r3
 800e486:	460c      	mov	r4, r1
 800e488:	2001      	movs	r0, #1
 800e48a:	e7a5      	b.n	800e3d8 <_svfiprintf_r+0xd4>
 800e48c:	2300      	movs	r3, #0
 800e48e:	3401      	adds	r4, #1
 800e490:	9305      	str	r3, [sp, #20]
 800e492:	4619      	mov	r1, r3
 800e494:	f04f 0c0a 	mov.w	ip, #10
 800e498:	4620      	mov	r0, r4
 800e49a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e49e:	3a30      	subs	r2, #48	; 0x30
 800e4a0:	2a09      	cmp	r2, #9
 800e4a2:	d903      	bls.n	800e4ac <_svfiprintf_r+0x1a8>
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d0c5      	beq.n	800e434 <_svfiprintf_r+0x130>
 800e4a8:	9105      	str	r1, [sp, #20]
 800e4aa:	e7c3      	b.n	800e434 <_svfiprintf_r+0x130>
 800e4ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e7f0      	b.n	800e498 <_svfiprintf_r+0x194>
 800e4b6:	ab03      	add	r3, sp, #12
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	462a      	mov	r2, r5
 800e4bc:	4b0f      	ldr	r3, [pc, #60]	; (800e4fc <_svfiprintf_r+0x1f8>)
 800e4be:	a904      	add	r1, sp, #16
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	f3af 8000 	nop.w
 800e4c6:	1c42      	adds	r2, r0, #1
 800e4c8:	4606      	mov	r6, r0
 800e4ca:	d1d6      	bne.n	800e47a <_svfiprintf_r+0x176>
 800e4cc:	89ab      	ldrh	r3, [r5, #12]
 800e4ce:	065b      	lsls	r3, r3, #25
 800e4d0:	f53f af2c 	bmi.w	800e32c <_svfiprintf_r+0x28>
 800e4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4d6:	b01d      	add	sp, #116	; 0x74
 800e4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4dc:	ab03      	add	r3, sp, #12
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	462a      	mov	r2, r5
 800e4e2:	4b06      	ldr	r3, [pc, #24]	; (800e4fc <_svfiprintf_r+0x1f8>)
 800e4e4:	a904      	add	r1, sp, #16
 800e4e6:	4638      	mov	r0, r7
 800e4e8:	f000 f87a 	bl	800e5e0 <_printf_i>
 800e4ec:	e7eb      	b.n	800e4c6 <_svfiprintf_r+0x1c2>
 800e4ee:	bf00      	nop
 800e4f0:	0800ef98 	.word	0x0800ef98
 800e4f4:	0800efa2 	.word	0x0800efa2
 800e4f8:	00000000 	.word	0x00000000
 800e4fc:	0800e24d 	.word	0x0800e24d
 800e500:	0800ef9e 	.word	0x0800ef9e

0800e504 <_printf_common>:
 800e504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e508:	4616      	mov	r6, r2
 800e50a:	4699      	mov	r9, r3
 800e50c:	688a      	ldr	r2, [r1, #8]
 800e50e:	690b      	ldr	r3, [r1, #16]
 800e510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e514:	4293      	cmp	r3, r2
 800e516:	bfb8      	it	lt
 800e518:	4613      	movlt	r3, r2
 800e51a:	6033      	str	r3, [r6, #0]
 800e51c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e520:	4607      	mov	r7, r0
 800e522:	460c      	mov	r4, r1
 800e524:	b10a      	cbz	r2, 800e52a <_printf_common+0x26>
 800e526:	3301      	adds	r3, #1
 800e528:	6033      	str	r3, [r6, #0]
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	0699      	lsls	r1, r3, #26
 800e52e:	bf42      	ittt	mi
 800e530:	6833      	ldrmi	r3, [r6, #0]
 800e532:	3302      	addmi	r3, #2
 800e534:	6033      	strmi	r3, [r6, #0]
 800e536:	6825      	ldr	r5, [r4, #0]
 800e538:	f015 0506 	ands.w	r5, r5, #6
 800e53c:	d106      	bne.n	800e54c <_printf_common+0x48>
 800e53e:	f104 0a19 	add.w	sl, r4, #25
 800e542:	68e3      	ldr	r3, [r4, #12]
 800e544:	6832      	ldr	r2, [r6, #0]
 800e546:	1a9b      	subs	r3, r3, r2
 800e548:	42ab      	cmp	r3, r5
 800e54a:	dc26      	bgt.n	800e59a <_printf_common+0x96>
 800e54c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e550:	1e13      	subs	r3, r2, #0
 800e552:	6822      	ldr	r2, [r4, #0]
 800e554:	bf18      	it	ne
 800e556:	2301      	movne	r3, #1
 800e558:	0692      	lsls	r2, r2, #26
 800e55a:	d42b      	bmi.n	800e5b4 <_printf_common+0xb0>
 800e55c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e560:	4649      	mov	r1, r9
 800e562:	4638      	mov	r0, r7
 800e564:	47c0      	blx	r8
 800e566:	3001      	adds	r0, #1
 800e568:	d01e      	beq.n	800e5a8 <_printf_common+0xa4>
 800e56a:	6823      	ldr	r3, [r4, #0]
 800e56c:	68e5      	ldr	r5, [r4, #12]
 800e56e:	6832      	ldr	r2, [r6, #0]
 800e570:	f003 0306 	and.w	r3, r3, #6
 800e574:	2b04      	cmp	r3, #4
 800e576:	bf08      	it	eq
 800e578:	1aad      	subeq	r5, r5, r2
 800e57a:	68a3      	ldr	r3, [r4, #8]
 800e57c:	6922      	ldr	r2, [r4, #16]
 800e57e:	bf0c      	ite	eq
 800e580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e584:	2500      	movne	r5, #0
 800e586:	4293      	cmp	r3, r2
 800e588:	bfc4      	itt	gt
 800e58a:	1a9b      	subgt	r3, r3, r2
 800e58c:	18ed      	addgt	r5, r5, r3
 800e58e:	2600      	movs	r6, #0
 800e590:	341a      	adds	r4, #26
 800e592:	42b5      	cmp	r5, r6
 800e594:	d11a      	bne.n	800e5cc <_printf_common+0xc8>
 800e596:	2000      	movs	r0, #0
 800e598:	e008      	b.n	800e5ac <_printf_common+0xa8>
 800e59a:	2301      	movs	r3, #1
 800e59c:	4652      	mov	r2, sl
 800e59e:	4649      	mov	r1, r9
 800e5a0:	4638      	mov	r0, r7
 800e5a2:	47c0      	blx	r8
 800e5a4:	3001      	adds	r0, #1
 800e5a6:	d103      	bne.n	800e5b0 <_printf_common+0xac>
 800e5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5b0:	3501      	adds	r5, #1
 800e5b2:	e7c6      	b.n	800e542 <_printf_common+0x3e>
 800e5b4:	18e1      	adds	r1, r4, r3
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	2030      	movs	r0, #48	; 0x30
 800e5ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5be:	4422      	add	r2, r4
 800e5c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5c8:	3302      	adds	r3, #2
 800e5ca:	e7c7      	b.n	800e55c <_printf_common+0x58>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	4649      	mov	r1, r9
 800e5d2:	4638      	mov	r0, r7
 800e5d4:	47c0      	blx	r8
 800e5d6:	3001      	adds	r0, #1
 800e5d8:	d0e6      	beq.n	800e5a8 <_printf_common+0xa4>
 800e5da:	3601      	adds	r6, #1
 800e5dc:	e7d9      	b.n	800e592 <_printf_common+0x8e>
	...

0800e5e0 <_printf_i>:
 800e5e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e4:	7e0f      	ldrb	r7, [r1, #24]
 800e5e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5e8:	2f78      	cmp	r7, #120	; 0x78
 800e5ea:	4691      	mov	r9, r2
 800e5ec:	4680      	mov	r8, r0
 800e5ee:	460c      	mov	r4, r1
 800e5f0:	469a      	mov	sl, r3
 800e5f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5f6:	d807      	bhi.n	800e608 <_printf_i+0x28>
 800e5f8:	2f62      	cmp	r7, #98	; 0x62
 800e5fa:	d80a      	bhi.n	800e612 <_printf_i+0x32>
 800e5fc:	2f00      	cmp	r7, #0
 800e5fe:	f000 80d8 	beq.w	800e7b2 <_printf_i+0x1d2>
 800e602:	2f58      	cmp	r7, #88	; 0x58
 800e604:	f000 80a3 	beq.w	800e74e <_printf_i+0x16e>
 800e608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e60c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e610:	e03a      	b.n	800e688 <_printf_i+0xa8>
 800e612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e616:	2b15      	cmp	r3, #21
 800e618:	d8f6      	bhi.n	800e608 <_printf_i+0x28>
 800e61a:	a101      	add	r1, pc, #4	; (adr r1, 800e620 <_printf_i+0x40>)
 800e61c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e620:	0800e679 	.word	0x0800e679
 800e624:	0800e68d 	.word	0x0800e68d
 800e628:	0800e609 	.word	0x0800e609
 800e62c:	0800e609 	.word	0x0800e609
 800e630:	0800e609 	.word	0x0800e609
 800e634:	0800e609 	.word	0x0800e609
 800e638:	0800e68d 	.word	0x0800e68d
 800e63c:	0800e609 	.word	0x0800e609
 800e640:	0800e609 	.word	0x0800e609
 800e644:	0800e609 	.word	0x0800e609
 800e648:	0800e609 	.word	0x0800e609
 800e64c:	0800e799 	.word	0x0800e799
 800e650:	0800e6bd 	.word	0x0800e6bd
 800e654:	0800e77b 	.word	0x0800e77b
 800e658:	0800e609 	.word	0x0800e609
 800e65c:	0800e609 	.word	0x0800e609
 800e660:	0800e7bb 	.word	0x0800e7bb
 800e664:	0800e609 	.word	0x0800e609
 800e668:	0800e6bd 	.word	0x0800e6bd
 800e66c:	0800e609 	.word	0x0800e609
 800e670:	0800e609 	.word	0x0800e609
 800e674:	0800e783 	.word	0x0800e783
 800e678:	682b      	ldr	r3, [r5, #0]
 800e67a:	1d1a      	adds	r2, r3, #4
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	602a      	str	r2, [r5, #0]
 800e680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e688:	2301      	movs	r3, #1
 800e68a:	e0a3      	b.n	800e7d4 <_printf_i+0x1f4>
 800e68c:	6820      	ldr	r0, [r4, #0]
 800e68e:	6829      	ldr	r1, [r5, #0]
 800e690:	0606      	lsls	r6, r0, #24
 800e692:	f101 0304 	add.w	r3, r1, #4
 800e696:	d50a      	bpl.n	800e6ae <_printf_i+0xce>
 800e698:	680e      	ldr	r6, [r1, #0]
 800e69a:	602b      	str	r3, [r5, #0]
 800e69c:	2e00      	cmp	r6, #0
 800e69e:	da03      	bge.n	800e6a8 <_printf_i+0xc8>
 800e6a0:	232d      	movs	r3, #45	; 0x2d
 800e6a2:	4276      	negs	r6, r6
 800e6a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6a8:	485e      	ldr	r0, [pc, #376]	; (800e824 <_printf_i+0x244>)
 800e6aa:	230a      	movs	r3, #10
 800e6ac:	e019      	b.n	800e6e2 <_printf_i+0x102>
 800e6ae:	680e      	ldr	r6, [r1, #0]
 800e6b0:	602b      	str	r3, [r5, #0]
 800e6b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e6b6:	bf18      	it	ne
 800e6b8:	b236      	sxthne	r6, r6
 800e6ba:	e7ef      	b.n	800e69c <_printf_i+0xbc>
 800e6bc:	682b      	ldr	r3, [r5, #0]
 800e6be:	6820      	ldr	r0, [r4, #0]
 800e6c0:	1d19      	adds	r1, r3, #4
 800e6c2:	6029      	str	r1, [r5, #0]
 800e6c4:	0601      	lsls	r1, r0, #24
 800e6c6:	d501      	bpl.n	800e6cc <_printf_i+0xec>
 800e6c8:	681e      	ldr	r6, [r3, #0]
 800e6ca:	e002      	b.n	800e6d2 <_printf_i+0xf2>
 800e6cc:	0646      	lsls	r6, r0, #25
 800e6ce:	d5fb      	bpl.n	800e6c8 <_printf_i+0xe8>
 800e6d0:	881e      	ldrh	r6, [r3, #0]
 800e6d2:	4854      	ldr	r0, [pc, #336]	; (800e824 <_printf_i+0x244>)
 800e6d4:	2f6f      	cmp	r7, #111	; 0x6f
 800e6d6:	bf0c      	ite	eq
 800e6d8:	2308      	moveq	r3, #8
 800e6da:	230a      	movne	r3, #10
 800e6dc:	2100      	movs	r1, #0
 800e6de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6e2:	6865      	ldr	r5, [r4, #4]
 800e6e4:	60a5      	str	r5, [r4, #8]
 800e6e6:	2d00      	cmp	r5, #0
 800e6e8:	bfa2      	ittt	ge
 800e6ea:	6821      	ldrge	r1, [r4, #0]
 800e6ec:	f021 0104 	bicge.w	r1, r1, #4
 800e6f0:	6021      	strge	r1, [r4, #0]
 800e6f2:	b90e      	cbnz	r6, 800e6f8 <_printf_i+0x118>
 800e6f4:	2d00      	cmp	r5, #0
 800e6f6:	d04d      	beq.n	800e794 <_printf_i+0x1b4>
 800e6f8:	4615      	mov	r5, r2
 800e6fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6fe:	fb03 6711 	mls	r7, r3, r1, r6
 800e702:	5dc7      	ldrb	r7, [r0, r7]
 800e704:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e708:	4637      	mov	r7, r6
 800e70a:	42bb      	cmp	r3, r7
 800e70c:	460e      	mov	r6, r1
 800e70e:	d9f4      	bls.n	800e6fa <_printf_i+0x11a>
 800e710:	2b08      	cmp	r3, #8
 800e712:	d10b      	bne.n	800e72c <_printf_i+0x14c>
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	07de      	lsls	r6, r3, #31
 800e718:	d508      	bpl.n	800e72c <_printf_i+0x14c>
 800e71a:	6923      	ldr	r3, [r4, #16]
 800e71c:	6861      	ldr	r1, [r4, #4]
 800e71e:	4299      	cmp	r1, r3
 800e720:	bfde      	ittt	le
 800e722:	2330      	movle	r3, #48	; 0x30
 800e724:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e728:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e72c:	1b52      	subs	r2, r2, r5
 800e72e:	6122      	str	r2, [r4, #16]
 800e730:	f8cd a000 	str.w	sl, [sp]
 800e734:	464b      	mov	r3, r9
 800e736:	aa03      	add	r2, sp, #12
 800e738:	4621      	mov	r1, r4
 800e73a:	4640      	mov	r0, r8
 800e73c:	f7ff fee2 	bl	800e504 <_printf_common>
 800e740:	3001      	adds	r0, #1
 800e742:	d14c      	bne.n	800e7de <_printf_i+0x1fe>
 800e744:	f04f 30ff 	mov.w	r0, #4294967295
 800e748:	b004      	add	sp, #16
 800e74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e74e:	4835      	ldr	r0, [pc, #212]	; (800e824 <_printf_i+0x244>)
 800e750:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e754:	6829      	ldr	r1, [r5, #0]
 800e756:	6823      	ldr	r3, [r4, #0]
 800e758:	f851 6b04 	ldr.w	r6, [r1], #4
 800e75c:	6029      	str	r1, [r5, #0]
 800e75e:	061d      	lsls	r5, r3, #24
 800e760:	d514      	bpl.n	800e78c <_printf_i+0x1ac>
 800e762:	07df      	lsls	r7, r3, #31
 800e764:	bf44      	itt	mi
 800e766:	f043 0320 	orrmi.w	r3, r3, #32
 800e76a:	6023      	strmi	r3, [r4, #0]
 800e76c:	b91e      	cbnz	r6, 800e776 <_printf_i+0x196>
 800e76e:	6823      	ldr	r3, [r4, #0]
 800e770:	f023 0320 	bic.w	r3, r3, #32
 800e774:	6023      	str	r3, [r4, #0]
 800e776:	2310      	movs	r3, #16
 800e778:	e7b0      	b.n	800e6dc <_printf_i+0xfc>
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	f043 0320 	orr.w	r3, r3, #32
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	2378      	movs	r3, #120	; 0x78
 800e784:	4828      	ldr	r0, [pc, #160]	; (800e828 <_printf_i+0x248>)
 800e786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e78a:	e7e3      	b.n	800e754 <_printf_i+0x174>
 800e78c:	0659      	lsls	r1, r3, #25
 800e78e:	bf48      	it	mi
 800e790:	b2b6      	uxthmi	r6, r6
 800e792:	e7e6      	b.n	800e762 <_printf_i+0x182>
 800e794:	4615      	mov	r5, r2
 800e796:	e7bb      	b.n	800e710 <_printf_i+0x130>
 800e798:	682b      	ldr	r3, [r5, #0]
 800e79a:	6826      	ldr	r6, [r4, #0]
 800e79c:	6961      	ldr	r1, [r4, #20]
 800e79e:	1d18      	adds	r0, r3, #4
 800e7a0:	6028      	str	r0, [r5, #0]
 800e7a2:	0635      	lsls	r5, r6, #24
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	d501      	bpl.n	800e7ac <_printf_i+0x1cc>
 800e7a8:	6019      	str	r1, [r3, #0]
 800e7aa:	e002      	b.n	800e7b2 <_printf_i+0x1d2>
 800e7ac:	0670      	lsls	r0, r6, #25
 800e7ae:	d5fb      	bpl.n	800e7a8 <_printf_i+0x1c8>
 800e7b0:	8019      	strh	r1, [r3, #0]
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	6123      	str	r3, [r4, #16]
 800e7b6:	4615      	mov	r5, r2
 800e7b8:	e7ba      	b.n	800e730 <_printf_i+0x150>
 800e7ba:	682b      	ldr	r3, [r5, #0]
 800e7bc:	1d1a      	adds	r2, r3, #4
 800e7be:	602a      	str	r2, [r5, #0]
 800e7c0:	681d      	ldr	r5, [r3, #0]
 800e7c2:	6862      	ldr	r2, [r4, #4]
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	f7f1 fd12 	bl	80001f0 <memchr>
 800e7cc:	b108      	cbz	r0, 800e7d2 <_printf_i+0x1f2>
 800e7ce:	1b40      	subs	r0, r0, r5
 800e7d0:	6060      	str	r0, [r4, #4]
 800e7d2:	6863      	ldr	r3, [r4, #4]
 800e7d4:	6123      	str	r3, [r4, #16]
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7dc:	e7a8      	b.n	800e730 <_printf_i+0x150>
 800e7de:	6923      	ldr	r3, [r4, #16]
 800e7e0:	462a      	mov	r2, r5
 800e7e2:	4649      	mov	r1, r9
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	47d0      	blx	sl
 800e7e8:	3001      	adds	r0, #1
 800e7ea:	d0ab      	beq.n	800e744 <_printf_i+0x164>
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	079b      	lsls	r3, r3, #30
 800e7f0:	d413      	bmi.n	800e81a <_printf_i+0x23a>
 800e7f2:	68e0      	ldr	r0, [r4, #12]
 800e7f4:	9b03      	ldr	r3, [sp, #12]
 800e7f6:	4298      	cmp	r0, r3
 800e7f8:	bfb8      	it	lt
 800e7fa:	4618      	movlt	r0, r3
 800e7fc:	e7a4      	b.n	800e748 <_printf_i+0x168>
 800e7fe:	2301      	movs	r3, #1
 800e800:	4632      	mov	r2, r6
 800e802:	4649      	mov	r1, r9
 800e804:	4640      	mov	r0, r8
 800e806:	47d0      	blx	sl
 800e808:	3001      	adds	r0, #1
 800e80a:	d09b      	beq.n	800e744 <_printf_i+0x164>
 800e80c:	3501      	adds	r5, #1
 800e80e:	68e3      	ldr	r3, [r4, #12]
 800e810:	9903      	ldr	r1, [sp, #12]
 800e812:	1a5b      	subs	r3, r3, r1
 800e814:	42ab      	cmp	r3, r5
 800e816:	dcf2      	bgt.n	800e7fe <_printf_i+0x21e>
 800e818:	e7eb      	b.n	800e7f2 <_printf_i+0x212>
 800e81a:	2500      	movs	r5, #0
 800e81c:	f104 0619 	add.w	r6, r4, #25
 800e820:	e7f5      	b.n	800e80e <_printf_i+0x22e>
 800e822:	bf00      	nop
 800e824:	0800efa9 	.word	0x0800efa9
 800e828:	0800efba 	.word	0x0800efba

0800e82c <__retarget_lock_acquire_recursive>:
 800e82c:	4770      	bx	lr

0800e82e <__retarget_lock_release_recursive>:
 800e82e:	4770      	bx	lr

0800e830 <memmove>:
 800e830:	4288      	cmp	r0, r1
 800e832:	b510      	push	{r4, lr}
 800e834:	eb01 0402 	add.w	r4, r1, r2
 800e838:	d902      	bls.n	800e840 <memmove+0x10>
 800e83a:	4284      	cmp	r4, r0
 800e83c:	4623      	mov	r3, r4
 800e83e:	d807      	bhi.n	800e850 <memmove+0x20>
 800e840:	1e43      	subs	r3, r0, #1
 800e842:	42a1      	cmp	r1, r4
 800e844:	d008      	beq.n	800e858 <memmove+0x28>
 800e846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e84a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e84e:	e7f8      	b.n	800e842 <memmove+0x12>
 800e850:	4402      	add	r2, r0
 800e852:	4601      	mov	r1, r0
 800e854:	428a      	cmp	r2, r1
 800e856:	d100      	bne.n	800e85a <memmove+0x2a>
 800e858:	bd10      	pop	{r4, pc}
 800e85a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e85e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e862:	e7f7      	b.n	800e854 <memmove+0x24>

0800e864 <_realloc_r>:
 800e864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e868:	4680      	mov	r8, r0
 800e86a:	4614      	mov	r4, r2
 800e86c:	460e      	mov	r6, r1
 800e86e:	b921      	cbnz	r1, 800e87a <_realloc_r+0x16>
 800e870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e874:	4611      	mov	r1, r2
 800e876:	f7ff bc25 	b.w	800e0c4 <_malloc_r>
 800e87a:	b92a      	cbnz	r2, 800e888 <_realloc_r+0x24>
 800e87c:	f7ff fbb6 	bl	800dfec <_free_r>
 800e880:	4625      	mov	r5, r4
 800e882:	4628      	mov	r0, r5
 800e884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e888:	f000 f81b 	bl	800e8c2 <_malloc_usable_size_r>
 800e88c:	4284      	cmp	r4, r0
 800e88e:	4607      	mov	r7, r0
 800e890:	d802      	bhi.n	800e898 <_realloc_r+0x34>
 800e892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e896:	d812      	bhi.n	800e8be <_realloc_r+0x5a>
 800e898:	4621      	mov	r1, r4
 800e89a:	4640      	mov	r0, r8
 800e89c:	f7ff fc12 	bl	800e0c4 <_malloc_r>
 800e8a0:	4605      	mov	r5, r0
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d0ed      	beq.n	800e882 <_realloc_r+0x1e>
 800e8a6:	42bc      	cmp	r4, r7
 800e8a8:	4622      	mov	r2, r4
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	bf28      	it	cs
 800e8ae:	463a      	movcs	r2, r7
 800e8b0:	f7ff fb86 	bl	800dfc0 <memcpy>
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	4640      	mov	r0, r8
 800e8b8:	f7ff fb98 	bl	800dfec <_free_r>
 800e8bc:	e7e1      	b.n	800e882 <_realloc_r+0x1e>
 800e8be:	4635      	mov	r5, r6
 800e8c0:	e7df      	b.n	800e882 <_realloc_r+0x1e>

0800e8c2 <_malloc_usable_size_r>:
 800e8c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8c6:	1f18      	subs	r0, r3, #4
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	bfbc      	itt	lt
 800e8cc:	580b      	ldrlt	r3, [r1, r0]
 800e8ce:	18c0      	addlt	r0, r0, r3
 800e8d0:	4770      	bx	lr
	...

0800e8d4 <_init>:
 800e8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d6:	bf00      	nop
 800e8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8da:	bc08      	pop	{r3}
 800e8dc:	469e      	mov	lr, r3
 800e8de:	4770      	bx	lr

0800e8e0 <_fini>:
 800e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e2:	bf00      	nop
 800e8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8e6:	bc08      	pop	{r3}
 800e8e8:	469e      	mov	lr, r3
 800e8ea:	4770      	bx	lr
