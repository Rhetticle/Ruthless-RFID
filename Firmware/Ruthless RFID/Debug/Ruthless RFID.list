
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001154c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  080116ec  080116ec  000216ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012198  08012198  00030714  2**0
                  CONTENTS
  4 .ARM          00000008  08012198  08012198  00022198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121a0  080121a0  00030714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121a0  080121a0  000221a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121a4  080121a4  000221a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000714  20000000  080121a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b6c  20000714  080128bc  00030714  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009280  080128bc  00039280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030714  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002908f  00000000  00000000  00030744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c34  00000000  00000000  000597d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002228  00000000  00000000  0005f408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd8  00000000  00000000  00061630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2e8  00000000  00000000  00063608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028388  00000000  00000000  000818f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0387  00000000  00000000  000a9c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149fff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009aa0  00000000  00000000  0014a050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000714 	.word	0x20000714
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080116d4 	.word	0x080116d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000718 	.word	0x20000718
 80001dc:	080116d4 	.word	0x080116d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af04      	add	r7, sp, #16
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	2150      	movs	r1, #80	; 0x50
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MFRC_REGW+0x44>)
 8000bcc:	f004 f846 	bl	8004c5c <HAL_I2C_Mem_Write>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 8000bd6:	23bb      	movs	r3, #187	; 0xbb
 8000bd8:	e000      	b.n	8000bdc <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 8000bda:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000730 	.word	0x20000730

08000be8 <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2150      	movs	r1, #80	; 0x50
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MFRC_REGR+0x3c>)
 8000c0a:	f004 f921 	bl	8004e50 <HAL_I2C_Mem_Read>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000c14:	23bb      	movs	r3, #187	; 0xbb
 8000c16:	e000      	b.n	8000c1a <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 8000c18:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000730 	.word	0x20000730

08000c28 <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af04      	add	r7, sp, #16
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e018      	b.n	8000c6c <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2264      	movs	r2, #100	; 0x64
 8000c42:	9202      	str	r2, [sp, #8]
 8000c44:	2201      	movs	r2, #1
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2209      	movs	r2, #9
 8000c4e:	2150      	movs	r1, #80	; 0x50
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MFRC_FIFOW+0x58>)
 8000c52:	f004 f803 	bl	8004c5c <HAL_I2C_Mem_Write>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000c5c:	23bb      	movs	r3, #187	; 0xbb
 8000c5e:	e00a      	b.n	8000c76 <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f003 fbe3 	bl	800442c <HAL_Delay>
	for(int i=0;i<size;i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbe2      	blt.n	8000c3a <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000c74:	23cc      	movs	r3, #204	; 0xcc
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000730 	.word	0x20000730

08000c84 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e018      	b.n	8000cc8 <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2264      	movs	r2, #100	; 0x64
 8000c9e:	9202      	str	r2, [sp, #8]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	9201      	str	r2, [sp, #4]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2209      	movs	r2, #9
 8000caa:	2150      	movs	r1, #80	; 0x50
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MFRC_FIFOR+0x58>)
 8000cae:	f004 f8cf 	bl	8004e50 <HAL_I2C_Mem_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 8000cb8:	23bb      	movs	r3, #187	; 0xbb
 8000cba:	e00a      	b.n	8000cd2 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f003 fbb5 	bl	800442c <HAL_Delay>
	for(int i=0;i<size;i++){
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbe2      	blt.n	8000c96 <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 8000cd0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000730 	.word	0x20000730

08000ce0 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2014      	movs	r0, #20
 8000cec:	f7ff ff7c 	bl	8000be8 <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d007      	beq.n	8000d0a <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f043 0303 	orr.w	r3, r3, #3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	2014      	movs	r0, #20
 8000d06:	f7ff ff4b 	bl	8000ba0 <MFRC_REGW>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000d22:	f107 020f 	add.w	r2, r7, #15
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff5c 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	b25a      	sxtb	r2, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff2a 	bl	8000ba0 <MFRC_REGW>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2014      	movs	r0, #20
 8000d5c:	f7ff ffd9 	bl	8000d12 <ClearBitMask>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff13 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f7ff ff0f 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	200a      	movs	r0, #10
 8000d86:	f7ff ff0b 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ff4a 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000d94:	2103      	movs	r1, #3
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff ff02 	bl	8000ba0 <MFRC_REGW>
	HAL_Delay(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f003 fb45 	bl	800442c <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000da2:	f107 0317 	add.w	r3, r7, #23
 8000da6:	4619      	mov	r1, r3
 8000da8:	2005      	movs	r0, #5
 8000daa:	f7ff ff1d 	bl	8000be8 <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 8000db8:	23ee      	movs	r3, #238	; 0xee
 8000dba:	e00e      	b.n	8000dda <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff feee 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	2022      	movs	r0, #34	; 0x22
 8000dc8:	f7ff ff0e 	bl	8000be8 <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2021      	movs	r0, #33	; 0x21
 8000dd4:	f7ff ff08 	bl	8000be8 <MFRC_REGR>
	return(PCD_OK);
 8000dd8:	23cc      	movs	r3, #204	; 0xcc

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 8000de8:	2201      	movs	r2, #1
 8000dea:	2120      	movs	r1, #32
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MFRC_INIT+0x60>)
 8000dee:	f003 fdbf 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2120      	movs	r1, #32
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <MFRC_INIT+0x60>)
 8000df8:	f003 fdba 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f003 fb15 	bl	800442c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <MFRC_INIT+0x60>)
 8000e08:	f003 fdb2 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f003 fb0d 	bl	800442c <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f7ff fec3 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2013      	movs	r0, #19
 8000e1e:	f7ff febf 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000e22:	2126      	movs	r1, #38	; 0x26
 8000e24:	2024      	movs	r0, #36	; 0x24
 8000e26:	f7ff febb 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	2015      	movs	r0, #21
 8000e2e:	f7ff feb7 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000e32:	213d      	movs	r1, #61	; 0x3d
 8000e34:	2011      	movs	r0, #17
 8000e36:	f7ff feb3 	bl	8000ba0 <MFRC_REGW>
	MFRC_ANTON();
 8000e3a:	f7ff ff51 	bl	8000ce0 <MFRC_ANTON>
	return(PCD_OK);
 8000e3e:	23cc      	movs	r3, #204	; 0xcc



}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020400 	.word	0x40020400

08000e48 <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000e64:	2100      	movs	r1, #0
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fe9a 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000e6c:	217f      	movs	r1, #127	; 0x7f
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f7ff fe96 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	200a      	movs	r0, #10
 8000e78:	f7ff fe92 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff fed1 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 8000e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	200d      	movs	r0, #13
 8000e8e:	f7ff fe87 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000e92:	210c      	movs	r1, #12
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fe83 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 8000e9a:	f107 0316 	add.w	r3, r7, #22
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200d      	movs	r0, #13
 8000ea2:	f7ff fea1 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 8000ea6:	7dbb      	ldrb	r3, [r7, #22]
 8000ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	200d      	movs	r0, #13
 8000eb2:	f7ff fe75 	bl	8000ba0 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 8000eb6:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f003 fab7 	bl	800442c <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 8000ebe:	7abb      	ldrb	r3, [r7, #10]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fede 	bl	8000c84 <MFRC_FIFOR>


	return(PCD_OK);
 8000ec8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af02      	add	r7, sp, #8
 8000ed8:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000eda:	2352      	movs	r3, #82	; 0x52
 8000edc:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	200e      	movs	r0, #14
 8000ee2:	f7ff ff16 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000ee6:	f107 000f 	add.w	r0, r7, #15
 8000eea:	2307      	movs	r3, #7
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f7ff ffa8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2bcc      	cmp	r3, #204	; 0xcc
 8000efc:	d001      	beq.n	8000f02 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 8000efe:	23aa      	movs	r3, #170	; 0xaa
 8000f00:	e000      	b.n	8000f04 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000f02:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000f12:	2350      	movs	r3, #80	; 0x50
 8000f14:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000f16:	f107 0208 	add.w	r2, r7, #8
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff1f 	bl	8000d64 <CALC_CRC>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2bcc      	cmp	r3, #204	; 0xcc
 8000f2a:	d001      	beq.n	8000f30 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000f2c:	23ee      	movs	r3, #238	; 0xee
 8000f2e:	e013      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	3302      	adds	r3, #2
 8000f36:	893a      	ldrh	r2, [r7, #8]
 8000f38:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	f107 000c 	add.w	r0, r7, #12
 8000f40:	2300      	movs	r3, #0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2104      	movs	r1, #4
 8000f48:	f7ff ff7e 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2bcc      	cmp	r3, #204	; 0xcc
 8000f50:	d001      	beq.n	8000f56 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000f52:	23aa      	movs	r3, #170	; 0xaa
 8000f54:	e000      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000f56:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000f68:	f242 0393 	movw	r3, #8339	; 0x2093
 8000f6c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	200e      	movs	r0, #14
 8000f72:	f7ff fece 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000f76:	f107 000c 	add.w	r0, r7, #12
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2305      	movs	r3, #5
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2102      	movs	r1, #2
 8000f84:	f7ff ff60 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2bcc      	cmp	r3, #204	; 0xcc
 8000f8c:	d001      	beq.n	8000f92 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000f8e:	23aa      	movs	r3, #170	; 0xaa
 8000f90:	e000      	b.n	8000f94 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000f92:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000fa6:	f247 0393 	movw	r3, #28819	; 0x7093
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	3302      	adds	r3, #2
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00f f97d 	bl	80102c0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000fc6:	f107 0208 	add.w	r2, r7, #8
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2107      	movs	r1, #7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fec7 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	3307      	adds	r3, #7
 8000fdc:	893a      	ldrh	r2, [r7, #8]
 8000fde:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000fe0:	f107 000c 	add.w	r0, r7, #12
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2303      	movs	r3, #3
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	2109      	movs	r1, #9
 8000fee:	f7ff ff2b 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2bcc      	cmp	r3, #204	; 0xcc
 8000ff6:	d001      	beq.n	8000ffc <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000ff8:	23aa      	movs	r3, #170	; 0xaa
 8000ffa:	e000      	b.n	8000ffe <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000ffc:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af02      	add	r7, sp, #8
 800100c:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 800100e:	f242 0395 	movw	r3, #8341	; 0x2095
 8001012:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	200e      	movs	r0, #14
 8001018:	f7ff fe7b 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800101c:	f107 000c 	add.w	r0, r7, #12
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2305      	movs	r3, #5
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	2102      	movs	r1, #2
 800102a:	f7ff ff0d 	bl	8000e48 <MFRC_TRANSCEIVE>
 800102e:	4603      	mov	r3, r0
 8001030:	2bcc      	cmp	r3, #204	; 0xcc
 8001032:	d001      	beq.n	8001038 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8001034:	23aa      	movs	r3, #170	; 0xaa
 8001036:	e000      	b.n	800103a <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8001038:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8001042:	b580      	push	{r7, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	af02      	add	r7, sp, #8
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 800104c:	f247 0395 	movw	r3, #28821	; 0x7095
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	3302      	adds	r3, #2
 8001062:	2205      	movs	r2, #5
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f00f f92a 	bl	80102c0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2107      	movs	r1, #7
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe74 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	3307      	adds	r3, #7
 8001082:	893a      	ldrh	r2, [r7, #8]
 8001084:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8001086:	f107 000c 	add.w	r0, r7, #12
 800108a:	2300      	movs	r3, #0
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2303      	movs	r3, #3
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	2109      	movs	r1, #9
 8001094:	f7ff fed8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001098:	4603      	mov	r3, r0
 800109a:	2bcc      	cmp	r3, #204	; 0xcc
 800109c:	d001      	beq.n	80010a2 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 800109e:	23aa      	movs	r3, #170	; 0xaa
 80010a0:	e000      	b.n	80010a4 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 80010a2:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 80010b2:	f000 f839 	bl	8001128 <PICC_CHECK>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2bcc      	cmp	r3, #204	; 0xcc
 80010ba:	d001      	beq.n	80010c0 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 80010bc:	23aa      	movs	r3, #170	; 0xaa
 80010be:	e02f      	b.n	8001120 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff05 	bl	8000ed2 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff47 	bl	8000f60 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 80010d2:	7e3b      	ldrb	r3, [r7, #24]
 80010d4:	2b88      	cmp	r3, #136	; 0x88
 80010d6:	d001      	beq.n	80010dc <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 80010d8:	23aa      	movs	r3, #170	; 0xaa
 80010da:	e021      	b.n	8001120 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f003 f9a5 	bl	800442c <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 80010e2:	f107 0214 	add.w	r2, r7, #20
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff55 	bl	8000f9c <MFRC_SEL1>
	  HAL_Delay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f003 f99a 	bl	800442c <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff82 	bl	8001006 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f003 f992 	bl	800442c <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff95 	bl	8001042 <MFRC_SEL2>
	  HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f003 f987 	bl	800442c <HAL_Delay>
	  return(PCD_OK);
 800111e:	23cc      	movs	r3, #204	; 0xcc
}
 8001120:	4618      	mov	r0, r3
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fece 	bl	8000ed2 <MFRC_WUPA>
 8001136:	4603      	mov	r3, r0
 8001138:	2bcc      	cmp	r3, #204	; 0xcc
 800113a:	d001      	beq.n	8001140 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 800113c:	23aa      	movs	r3, #170	; 0xaa
 800113e:	e00a      	b.n	8001156 <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8001140:	793b      	ldrb	r3, [r7, #4]
 8001142:	2b44      	cmp	r3, #68	; 0x44
 8001144:	d102      	bne.n	800114c <PICC_CHECK+0x24>
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 800114c:	23aa      	movs	r3, #170	; 0xaa
 800114e:	e002      	b.n	8001156 <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8001150:	f7ff fedc 	bl	8000f0c <MFRC_HALTA>
			return(PCD_OK);
 8001154:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af02      	add	r7, sp, #8
 8001164:	4603      	mov	r3, r0
 8001166:	6039      	str	r1, [r7, #0]
 8001168:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	2330      	movs	r3, #48	; 0x30
 8001170:	733b      	strb	r3, [r7, #12]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fdef 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	3302      	adds	r3, #2
 800118c:	893a      	ldrh	r2, [r7, #8]
 800118e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8001190:	f107 000c 	add.w	r0, r7, #12
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2310      	movs	r3, #16
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	2104      	movs	r1, #4
 800119e:	f7ff fe53 	bl	8000e48 <MFRC_TRANSCEIVE>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2bcc      	cmp	r3, #204	; 0xcc
 80011a6:	d001      	beq.n	80011ac <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 80011a8:	23aa      	movs	r3, #170	; 0xaa
 80011aa:	e000      	b.n	80011ae <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 80011ac:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b088      	sub	sp, #32
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	23a2      	movs	r3, #162	; 0xa2
 80011ce:	743b      	strb	r3, [r7, #16]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d801      	bhi.n	80011de <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 80011da:	2302      	movs	r3, #2
 80011dc:	e022      	b.n	8001224 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	3302      	adds	r3, #2
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2106      	movs	r1, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fdb5 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	3306      	adds	r3, #6
 8001200:	89ba      	ldrh	r2, [r7, #12]
 8001202:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8001204:	f107 020f 	add.w	r2, r7, #15
 8001208:	f107 0010 	add.w	r0, r7, #16
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2108      	movs	r1, #8
 8001214:	f7ff fe18 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001218:	4603      	mov	r3, r0
 800121a:	2bcc      	cmp	r3, #204	; 0xcc
 800121c:	d001      	beq.n	8001222 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 800121e:	23aa      	movs	r3, #170	; 0xaa
 8001220:	e000      	b.n	8001224 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8001222:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4619      	mov	r1, r3
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff8f 	bl	800115e <UL_READ>
 8001240:	4603      	mov	r3, r0
 8001242:	2bcc      	cmp	r3, #204	; 0xcc
 8001244:	d001      	beq.n	800124a <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8001246:	23aa      	movs	r3, #170	; 0xaa
 8001248:	e00e      	b.n	8001268 <UL_getuid+0x3c>
	}

	memcpy(uid, read, UL_UIDPART1);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2203      	movs	r2, #3
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00f f834 	bl	80102c0 <memcpy>
	memcpy(uid + UL_UIDPART1, read + UL_UIDPART2, UL_UIDPART2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1cda      	adds	r2, r3, #3
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	3304      	adds	r3, #4
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6013      	str	r3, [r2, #0]
	return PCD_OK;
 8001266:	23cc      	movs	r3, #204	; 0xcc
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e010      	b.n	80012a0 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff6a 	bl	800115e <UL_READ>
 800128a:	4603      	mov	r3, r0
 800128c:	2bcc      	cmp	r3, #204	; 0xcc
 800128e:	d001      	beq.n	8001294 <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8001290:	23aa      	movs	r3, #170	; 0xaa
 8001292:	e009      	b.n	80012a8 <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3310      	adds	r3, #16
 8001298:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3304      	adds	r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b0e      	cmp	r3, #14
 80012a4:	ddeb      	ble.n	800127e <UL_getalldata+0xe>
	}

	return PCD_OK;
 80012a6:	23cc      	movs	r3, #204	; 0xcc
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <UL_readcard>:
 * !!Name of card is set by user after being read!!
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <UL_readcard+0x5c>)
 80012bc:	60da      	str	r2, [r3, #12]
	result->uidsize = UL_UIDSIZE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2207      	movs	r2, #7
 80012c2:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2240      	movs	r2, #64	; 0x40
 80012c8:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 80012d0:	f7ff feec 	bl	80010ac <PICC_Select>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2bcc      	cmp	r3, #204	; 0xcc
 80012d8:	d001      	beq.n	80012de <UL_readcard+0x2e>
		return PCD_NO_PICC;
 80012da:	2301      	movs	r3, #1
 80012dc:	e012      	b.n	8001304 <UL_readcard+0x54>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ffa2 	bl	800122c <UL_getuid>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2bcc      	cmp	r3, #204	; 0xcc
 80012ec:	d107      	bne.n	80012fe <UL_readcard+0x4e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffbc 	bl	8001270 <UL_getalldata>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2bcc      	cmp	r3, #204	; 0xcc
 80012fc:	d001      	beq.n	8001302 <UL_readcard+0x52>
		return PCD_COMM_ERR;
 80012fe:	23aa      	movs	r3, #170	; 0xaa
 8001300:	e000      	b.n	8001304 <UL_readcard+0x54>
	}
	return PCD_OK;
 8001302:	23cc      	movs	r3, #204	; 0xcc
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	080116fc 	.word	0x080116fc

08001310 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 8001318:	2030      	movs	r0, #48	; 0x30
 800131a:	f00e ffc1 	bl	80102a0 <malloc>
 800131e:	4603      	mov	r3, r0
 8001320:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	3310      	adds	r3, #16
 8001328:	2230      	movs	r2, #48	; 0x30
 800132a:	4619      	mov	r1, r3
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f00e ffc7 	bl	80102c0 <memcpy>

	if (PICC_Select() != PCD_OK) {
 8001332:	f7ff febb 	bl	80010ac <PICC_Select>
 8001336:	4603      	mov	r3, r0
 8001338:	2bcc      	cmp	r3, #204	; 0xcc
 800133a:	d004      	beq.n	8001346 <UL_writecard+0x36>
		free(data_to_write);
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f00e ffb7 	bl	80102b0 <free>
		return PCD_NO_PICC;
 8001342:	2301      	movs	r3, #1
 8001344:	e020      	b.n	8001388 <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001346:	2304      	movs	r3, #4
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e016      	b.n	800137a <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3b04      	subs	r3, #4
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4619      	mov	r1, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	440b      	add	r3, r1
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f7ff ff29 	bl	80011b6 <UL_WRITE>
 8001364:	4603      	mov	r3, r0
 8001366:	2bcc      	cmp	r3, #204	; 0xcc
 8001368:	d004      	beq.n	8001374 <UL_writecard+0x64>
			free(data_to_write);
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f00e ffa0 	bl	80102b0 <free>
			return PCD_COMM_ERR;
 8001370:	23aa      	movs	r3, #170	; 0xaa
 8001372:	e009      	b.n	8001388 <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	dde5      	ble.n	800134c <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 8001380:	68b8      	ldr	r0, [r7, #8]
 8001382:	f00e ff95 	bl	80102b0 <free>
	return PCD_OK;
 8001386:	23cc      	movs	r3, #204	; 0xcc
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	3301      	adds	r3, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00e ff7c 	bl	80102a0 <malloc>
 80013a8:	4603      	mov	r3, r0
 80013aa:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e023      	b.n	80013fa <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d80d      	bhi.n	80013da <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	461a      	mov	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1898      	adds	r0, r3, r2
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4912      	ldr	r1, [pc, #72]	; (800141c <uid_tostring+0x8c>)
 80013d4:	f00f f910 	bl	80105f8 <siprintf>
 80013d8:	e00c      	b.n	80013f4 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	461a      	mov	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1898      	adds	r0, r3, r2
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	490c      	ldr	r1, [pc, #48]	; (8001420 <uid_tostring+0x90>)
 80013f0:	f00f f902 	bl	80105f8 <siprintf>
	for (int i = 0; i < size; i++) {
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbd7      	blt.n	80013b2 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	461a      	mov	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	return result;
 8001410:	68bb      	ldr	r3, [r7, #8]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08011710 	.word	0x08011710
 8001420:	08011714 	.word	0x08011714

08001424 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 800142c:	201c      	movs	r0, #28
 800142e:	f00e ff37 	bl	80102a0 <malloc>
 8001432:	4603      	mov	r3, r0
 8001434:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8001436:	2040      	movs	r0, #64	; 0x40
 8001438:	f00e ff32 	bl	80102a0 <malloc>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8001444:	2007      	movs	r0, #7
 8001446:	f00e ff2b 	bl	80102a0 <malloc>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f7ff ff2c 	bl	80012b0 <UL_readcard>
 8001458:	4603      	mov	r3, r0
 800145a:	2bcc      	cmp	r3, #204	; 0xcc
 800145c:	d001      	beq.n	8001462 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 800145e:	23aa      	movs	r3, #170	; 0xaa
 8001460:	e031      	b.n	80014c6 <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e01d      	b.n	80014a4 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6959      	ldr	r1, [r3, #20]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	440b      	add	r3, r1
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d00e      	beq.n	800149e <UL_verify+0x7a>
			free(read->contents);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4618      	mov	r0, r3
 8001486:	f00e ff13 	bl	80102b0 <free>
			free(read->uid);
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f00e ff0e 	bl	80102b0 <free>
			free(read);
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f00e ff0b 	bl	80102b0 <free>
			return PCD_VERIFY_ERR;
 800149a:	2303      	movs	r3, #3
 800149c:	e013      	b.n	80014c6 <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b3f      	cmp	r3, #63	; 0x3f
 80014a8:	ddde      	ble.n	8001468 <UL_verify+0x44>
		}
	}
	free(read->contents);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00e fefe 	bl	80102b0 <free>
	free(read->uid);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00e fef9 	bl	80102b0 <free>
	free(read);
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f00e fef6 	bl	80102b0 <free>
	return PCD_OK;
 80014c4:	23cc      	movs	r3, #204	; 0xcc
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <dump_card_serial>:
 * Print relevant info of card to terminal over USB
 * @param card - Card to print details of
 * @param pagesize - Number of bytes in each page of memory for given card
 * @return PCD_OK if card details were successfully printed
 * */
PCD_StatusTypeDef dump_card_serial (Card* card, uint8_t pagesize) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	char* uid = uid_tostring(card->uid, card->uidsize);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	791b      	ldrb	r3, [r3, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff ff52 	bl	8001390 <uid_tostring>
 80014ec:	60b8      	str	r0, [r7, #8]

	printf("Type: %s\r\n", card->type);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4837      	ldr	r0, [pc, #220]	; (80015d4 <dump_card_serial+0x104>)
 80014f6:	f00e ffd9 	bl	80104ac <iprintf>
	printf("UID: %s\r\n", uid);
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	4836      	ldr	r0, [pc, #216]	; (80015d8 <dump_card_serial+0x108>)
 80014fe:	f00e ffd5 	bl	80104ac <iprintf>
	printf("Page    Byte\r\n");
 8001502:	4836      	ldr	r0, [pc, #216]	; (80015dc <dump_card_serial+0x10c>)
 8001504:	f00f f858 	bl	80105b8 <puts>
	free(uid);
 8001508:	68b8      	ldr	r0, [r7, #8]
 800150a:	f00e fed1 	bl	80102b0 <free>

	printf("     "); //filler
 800150e:	4834      	ldr	r0, [pc, #208]	; (80015e0 <dump_card_serial+0x110>)
 8001510:	f00e ffcc 	bl	80104ac <iprintf>
	for (int i = 0; i < pagesize; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e006      	b.n	8001528 <dump_card_serial+0x58>
		printf("%i  ", i);
 800151a:	6979      	ldr	r1, [r7, #20]
 800151c:	4831      	ldr	r0, [pc, #196]	; (80015e4 <dump_card_serial+0x114>)
 800151e:	f00e ffc5 	bl	80104ac <iprintf>
	for (int i = 0; i < pagesize; i++) {
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf4      	blt.n	800151a <dump_card_serial+0x4a>
	}
	printf("\r\n");
 8001530:	482d      	ldr	r0, [pc, #180]	; (80015e8 <dump_card_serial+0x118>)
 8001532:	f00f f841 	bl	80105b8 <puts>

	for (int i = 0; i < card->contents_size/pagesize; i++) {
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	e03c      	b.n	80015b6 <dump_card_serial+0xe6>
		printf("%i    ", i);
 800153c:	6939      	ldr	r1, [r7, #16]
 800153e:	482b      	ldr	r0, [pc, #172]	; (80015ec <dump_card_serial+0x11c>)
 8001540:	f00e ffb4 	bl	80104ac <iprintf>
		for (int j = 0; j < pagesize; j++) {
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	e02b      	b.n	80015a2 <dump_card_serial+0xd2>
			if (card->contents[(i * pagesize) + j] <= 0xF) {
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	fb02 f101 	mul.w	r1, r2, r1
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	440a      	add	r2, r1
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	d80e      	bhi.n	8001580 <dump_card_serial+0xb0>
				printf("0%X ", card->contents[(i * pagesize) + j]);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	fb02 f101 	mul.w	r1, r2, r1
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	440a      	add	r2, r1
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	481d      	ldr	r0, [pc, #116]	; (80015f0 <dump_card_serial+0x120>)
 800157a:	f00e ff97 	bl	80104ac <iprintf>
 800157e:	e00d      	b.n	800159c <dump_card_serial+0xcc>
			} else {
				printf("%X ", card->contents[(i * pagesize) + j]);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	6939      	ldr	r1, [r7, #16]
 8001588:	fb02 f101 	mul.w	r1, r2, r1
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	440a      	add	r2, r1
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	4817      	ldr	r0, [pc, #92]	; (80015f4 <dump_card_serial+0x124>)
 8001598:	f00e ff88 	bl	80104ac <iprintf>
		for (int j = 0; j < pagesize; j++) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbcf      	blt.n	800154a <dump_card_serial+0x7a>
			}

		}
		printf("\r\n");
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <dump_card_serial+0x118>)
 80015ac:	f00f f804 	bl	80105b8 <puts>
	for (int i = 0; i < card->contents_size/pagesize; i++) {
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	3301      	adds	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	8b1b      	ldrh	r3, [r3, #24]
 80015ba:	461a      	mov	r2, r3
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	fb92 f3f3 	sdiv	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbb9      	blt.n	800153c <dump_card_serial+0x6c>
	}
	return PCD_OK;
 80015c8:	23cc      	movs	r3, #204	; 0xcc
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08011718 	.word	0x08011718
 80015d8:	08011724 	.word	0x08011724
 80015dc:	08011730 	.word	0x08011730
 80015e0:	08011740 	.word	0x08011740
 80015e4:	08011748 	.word	0x08011748
 80015e8:	08011750 	.word	0x08011750
 80015ec:	08011754 	.word	0x08011754
 80015f0:	0801175c 	.word	0x0801175c
 80015f4:	08011764 	.word	0x08011764

080015f8 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80015fe:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8001600:	463b      	mov	r3, r7
 8001602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f00e fe67 	bl	80102dc <memset>
	OLED_FLUSH(zeros);
 800160e:	463b      	mov	r3, r7
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f87b 	bl	800170c <OLED_FLUSH>

}
 8001616:	bf00      	nop
 8001618:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2110      	movs	r1, #16
 8001632:	4815      	ldr	r0, [pc, #84]	; (8001688 <OLED_cmd+0x68>)
 8001634:	f003 f99c 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2102      	movs	r1, #2
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <OLED_cmd+0x6c>)
 800163e:	f003 f997 	bl	8004970 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8001642:	f107 010f 	add.w	r1, r7, #15
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	2201      	movs	r2, #1
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <OLED_cmd+0x70>)
 800164e:	f006 f93a 	bl	80078c6 <HAL_SPI_Transmit>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d009      	beq.n	800166c <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	2110      	movs	r1, #16
 800165c:	480a      	ldr	r0, [pc, #40]	; (8001688 <OLED_cmd+0x68>)
 800165e:	f003 f987 	bl	8004970 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f002 fee2 	bl	800442c <HAL_Delay>
		return(HAL_ERROR);
 8001668:	2301      	movs	r3, #1
 800166a:	e008      	b.n	800167e <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	2110      	movs	r1, #16
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <OLED_cmd+0x68>)
 8001672:	f003 f97d 	bl	8004970 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f002 fed8 	bl	800442c <HAL_Delay>
		return(HAL_OK);
 800167c:	2300      	movs	r3, #0
	}

}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40020000 	.word	0x40020000
 800168c:	40020400 	.word	0x40020400
 8001690:	20000784 	.word	0x20000784

08001694 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2110      	movs	r1, #16
 80016a4:	4816      	ldr	r0, [pc, #88]	; (8001700 <OLED_data+0x6c>)
 80016a6:	f003 f963 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2102      	movs	r1, #2
 80016ae:	4815      	ldr	r0, [pc, #84]	; (8001704 <OLED_data+0x70>)
 80016b0:	f003 f95e 	bl	8004970 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4812      	ldr	r0, [pc, #72]	; (8001708 <OLED_data+0x74>)
 80016c0:	f006 f901 	bl	80078c6 <HAL_SPI_Transmit>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2102      	movs	r1, #2
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <OLED_data+0x70>)
 80016d0:	f003 f94e 	bl	8004970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2110      	movs	r1, #16
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <OLED_data+0x6c>)
 80016da:	f003 f949 	bl	8004970 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80016de:	2301      	movs	r3, #1
 80016e0:	e00a      	b.n	80016f8 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2102      	movs	r1, #2
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <OLED_data+0x70>)
 80016e8:	f003 f942 	bl	8004970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2110      	movs	r1, #16
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <OLED_data+0x6c>)
 80016f2:	f003 f93d 	bl	8004970 <HAL_GPIO_WritePin>
		return(HAL_OK);
 80016f6:	2300      	movs	r3, #0
	}



}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	20000784 	.word	0x20000784

0800170c <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e023      	b.n	8001762 <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3b50      	subs	r3, #80	; 0x50
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff7c 	bl	8001620 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8001728:	2002      	movs	r0, #2
 800172a:	f7ff ff79 	bl	8001620 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 800172e:	2010      	movs	r0, #16
 8001730:	f7ff ff76 	bl	8001620 <OLED_cmd>
		for(int i=0;i<128;i++){
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	e00d      	b.n	8001756 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	01da      	lsls	r2, r3, #7
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ffa2 	bl	8001694 <OLED_data>
		for(int i=0;i<128;i++){
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	3301      	adds	r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b7f      	cmp	r3, #127	; 0x7f
 800175a:	ddee      	ble.n	800173a <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b07      	cmp	r3, #7
 8001766:	ddd8      	ble.n	800171a <OLED_FLUSH+0xe>
		}


	}
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	2110      	movs	r1, #16
 800177e:	482f      	ldr	r0, [pc, #188]	; (800183c <OLED_INIT+0xc8>)
 8001780:	f003 f8f6 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001784:	2201      	movs	r2, #1
 8001786:	2108      	movs	r1, #8
 8001788:	482c      	ldr	r0, [pc, #176]	; (800183c <OLED_INIT+0xc8>)
 800178a:	f003 f8f1 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2102      	movs	r1, #2
 8001792:	482b      	ldr	r0, [pc, #172]	; (8001840 <OLED_INIT+0xcc>)
 8001794:	f003 f8ec 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001798:	2064      	movs	r0, #100	; 0x64
 800179a:	f002 fe47 	bl	800442c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2108      	movs	r1, #8
 80017a2:	4826      	ldr	r0, [pc, #152]	; (800183c <OLED_INIT+0xc8>)
 80017a4:	f003 f8e4 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	; 0x64
 80017aa:	f002 fe3f 	bl	800442c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2108      	movs	r1, #8
 80017b2:	4822      	ldr	r0, [pc, #136]	; (800183c <OLED_INIT+0xc8>)
 80017b4:	f003 f8dc 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	f002 fe37 	bl	800442c <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <OLED_INIT+0xd0>)
 80017c0:	463c      	mov	r4, r7
 80017c2:	461d      	mov	r5, r3
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017cc:	c403      	stmia	r4!, {r0, r1}
 80017ce:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	e00c      	b.n	80017f0 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80017d6:	463a      	mov	r2, r7
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff1e 	bl	8001620 <OLED_cmd>
		HAL_Delay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f002 fe21 	bl	800442c <HAL_Delay>
	for(int i = 0; i < 25; i++){
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b18      	cmp	r3, #24
 80017f4:	ddef      	ble.n	80017d6 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80017f6:	20a7      	movs	r0, #167	; 0xa7
 80017f8:	f7ff ff12 	bl	8001620 <OLED_cmd>
	OLED_FLUSH(HVE);
 80017fc:	4812      	ldr	r0, [pc, #72]	; (8001848 <OLED_INIT+0xd4>)
 80017fe:	f7ff ff85 	bl	800170c <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8001802:	20af      	movs	r0, #175	; 0xaf
 8001804:	f7ff ff0c 	bl	8001620 <OLED_cmd>
	HAL_Delay(1000);
 8001808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180c:	f002 fe0e 	bl	800442c <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001810:	20ae      	movs	r0, #174	; 0xae
 8001812:	f7ff ff05 	bl	8001620 <OLED_cmd>
	HAL_Delay(10);
 8001816:	200a      	movs	r0, #10
 8001818:	f002 fe08 	bl	800442c <HAL_Delay>
	OLED_cmd(DISP_NORM);
 800181c:	20a6      	movs	r0, #166	; 0xa6
 800181e:	f7ff feff 	bl	8001620 <OLED_cmd>
	HAL_Delay(10);
 8001822:	200a      	movs	r0, #10
 8001824:	f002 fe02 	bl	800442c <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001828:	20af      	movs	r0, #175	; 0xaf
 800182a:	f7ff fef9 	bl	8001620 <OLED_cmd>
	OLED_Clear();
 800182e:	f7ff fee3 	bl	80015f8 <OLED_Clear>
	return HAL_OK;
 8001832:	2300      	movs	r3, #0

}
 8001834:	4618      	mov	r0, r3
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bdb0      	pop	{r4, r5, r7, pc}
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	08011768 	.word	0x08011768
 8001848:	20000000 	.word	0x20000000

0800184c <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e015      	b.n	800188a <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f1a3 0220 	sub.w	r2, r3, #32
 8001864:	4911      	ldr	r1, [pc, #68]	; (80018ac <OLED_InvChar+0x60>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	18ca      	adds	r2, r1, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	43db      	mvns	r3, r3
 8001876:	b2d9      	uxtb	r1, r3
 8001878:	f107 020c 	add.w	r2, r7, #12
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	4413      	add	r3, r2
 8001880:	460a      	mov	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b05      	cmp	r3, #5
 800188e:	dde6      	ble.n	800185e <OLED_InvChar+0x12>
	}
	memcpy(result,temp,OLED_CHARSIZE);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	6010      	str	r0, [r2, #0]
 800189c:	791b      	ldrb	r3, [r3, #4]
 800189e:	7113      	strb	r3, [r2, #4]
}
 80018a0:	bf00      	nop
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	08011b8c 	.word	0x08011b8c

080018b0 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	4603      	mov	r3, r0
 80018c4:	71bb      	strb	r3, [r7, #6]
 80018c6:	460b      	mov	r3, r1
 80018c8:	717b      	strb	r3, [r7, #5]
 80018ca:	4613      	mov	r3, r2
 80018cc:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	3b50      	subs	r3, #80	; 0x50
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fea3 	bl	8001620 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fe9c 	bl	8001620 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fe93 	bl	8001620 <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 80018fa:	793b      	ldrb	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d110      	bne.n	8001922 <OLED_drawChar+0x72>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8001900:	797b      	ldrb	r3, [r7, #5]
 8001902:	f1a3 0220 	sub.w	r2, r3, #32
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <OLED_drawChar+0x9c>)
 800190e:	1899      	adds	r1, r3, r2
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	2205      	movs	r2, #5
 8001916:	4618      	mov	r0, r3
 8001918:	f00e fcd2 	bl	80102c0 <memcpy>
		data[5]=0x00;
 800191c:	2300      	movs	r3, #0
 800191e:	737b      	strb	r3, [r7, #13]
 8001920:	e009      	b.n	8001936 <OLED_drawChar+0x86>
	}
	else{
		data[0]=0xFF;
 8001922:	23ff      	movs	r3, #255	; 0xff
 8001924:	723b      	strb	r3, [r7, #8]
		OLED_InvChar(character,data + 1);
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	3301      	adds	r3, #1
 800192c:	797a      	ldrb	r2, [r7, #5]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f7ff ff8b 	bl	800184c <OLED_InvChar>

	}

	OLED_data(data, 6);
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2106      	movs	r1, #6
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fea9 	bl	8001694 <OLED_data>

	}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}
 800194a:	bf00      	nop
 800194c:	08011b8c 	.word	0x08011b8c

08001950 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	603a      	str	r2, [r7, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	460b      	mov	r3, r1
 8001960:	71bb      	strb	r3, [r7, #6]
 8001962:	4613      	mov	r3, r2
 8001964:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e014      	b.n	8001996 <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	0052      	lsls	r2, r2, #1
 8001974:	4413      	add	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	79bb      	ldrb	r3, [r7, #6]
 800197c:	4413      	add	r3, r2
 800197e:	b2d9      	uxtb	r1, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	4413      	add	r3, r2
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	797b      	ldrb	r3, [r7, #5]
 800198a:	79f8      	ldrb	r0, [r7, #7]
 800198c:	f7ff ff90 	bl	80018b0 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	6838      	ldr	r0, [r7, #0]
 8001998:	f7fe fc22 	bl	80001e0 <strlen>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8e3      	bhi.n	800196c <OLED_Printlin+0x1c>
	}
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	6039      	str	r1, [r7, #0]
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	4613      	mov	r3, r2
 80019bc:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f7fe fc0e 	bl	80001e0 <strlen>
 80019c4:	4603      	mov	r3, r0
 80019c6:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	0fda      	lsrs	r2, r3, #31
 80019cc:	4413      	add	r3, r2
 80019ce:	105b      	asrs	r3, r3, #1
 80019d0:	425b      	negs	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	3340      	adds	r3, #64	; 0x40
 80019de:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	b2d9      	uxtb	r1, r3
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	79f8      	ldrb	r0, [r7, #7]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	f7ff ffb1 	bl	8001950 <OLED_Printlin>
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b094      	sub	sp, #80	; 0x50
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80019fe:	2320      	movs	r3, #32
 8001a00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 8001a14:	2300      	movs	r3, #0
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
 8001a18:	e018      	b.n	8001a4c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 8001a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a1e:	4413      	add	r3, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d10b      	bne.n	8001a44 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a2e:	b2d9      	uxtb	r1, r3
 8001a30:	f107 020c 	add.w	r2, r7, #12
 8001a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a36:	4413      	add	r3, r2
 8001a38:	460a      	mov	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
	                i++;
 8001a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a3e:	3301      	adds	r3, #1
 8001a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a42:	e000      	b.n	8001a46 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001a44:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a48:	3301      	adds	r3, #1
 8001a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4e:	2b15      	cmp	r3, #21
 8001a50:	dde3      	ble.n	8001a1a <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d102      	bne.n	8001a64 <OLED_Print+0x6e>
	            last_ind++;
 8001a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a60:	3301      	adds	r3, #1
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fbb8 	bl	80001e0 <strlen>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b15      	cmp	r3, #21
 8001a74:	d828      	bhi.n	8001ac8 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fbaf 	bl	80001e0 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	18d1      	adds	r1, r2, r3
 8001a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	4618      	mov	r0, r3
 8001a94:	f00e fdd8 	bl	8010648 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a9a:	f107 0220 	add.w	r2, r7, #32
 8001a9e:	18d0      	adds	r0, r2, r3
 8001aa0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa6:	f1c3 0315 	rsb	r3, r3, #21
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f00e fc16 	bl	80102dc <memset>
	            thisline[21]=' ';
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab8:	b2d8      	uxtb	r0, r3
 8001aba:	f107 0220 	add.w	r2, r7, #32
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	f7ff ff45 	bl	8001950 <OLED_Printlin>




	    }
}
 8001ac6:	e05e      	b.n	8001b86 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aca:	3314      	adds	r3, #20
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d03a      	beq.n	8001b4c <OLED_Print+0x156>
 8001ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad8:	3315      	adds	r3, #21
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d033      	beq.n	8001b4c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	18d1      	adds	r1, r2, r3
 8001aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aec:	3b01      	subs	r3, #1
 8001aee:	3350      	adds	r3, #80	; 0x50
 8001af0:	443b      	add	r3, r7
 8001af2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f107 0320 	add.w	r3, r7, #32
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00e fda3 	bl	8010648 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 8001b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b04:	3b01      	subs	r3, #1
 8001b06:	3350      	adds	r3, #80	; 0x50
 8001b08:	443b      	add	r3, r7
 8001b0a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	1898      	adds	r0, r3, r2
 8001b16:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	3350      	adds	r3, #80	; 0x50
 8001b20:	443b      	add	r3, r7
 8001b22:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b26:	f1c3 0315 	rsb	r3, r3, #21
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f00e fbd6 	bl	80102dc <memset>
	            thisline[21]=' ';
 8001b30:	2320      	movs	r3, #32
 8001b32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	3350      	adds	r3, #80	; 0x50
 8001b3c:	443b      	add	r3, r7
 8001b3e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b42:	461a      	mov	r2, r3
 8001b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b46:	4413      	add	r3, r2
 8001b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b4a:	e00e      	b.n	8001b6a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	18d1      	adds	r1, r2, r3
 8001b52:	f107 0320 	add.w	r3, r7, #32
 8001b56:	2215      	movs	r2, #21
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00e fd75 	bl	8010648 <strncpy>
	            thisline[21]=' ';
 8001b5e:	2320      	movs	r3, #32
 8001b60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b66:	3315      	adds	r3, #21
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b70:	b2d8      	uxtb	r0, r3
 8001b72:	f107 0220 	add.w	r2, r7, #32
 8001b76:	2300      	movs	r3, #0
 8001b78:	2102      	movs	r1, #2
 8001b7a:	f7ff fee9 	bl	8001950 <OLED_Printlin>
	        line++;
 8001b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b80:	3301      	adds	r3, #1
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001b84:	e746      	b.n	8001a14 <OLED_Print+0x1e>
}
 8001b86:	3750      	adds	r7, #80	; 0x50
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001b98:	f7ff fd2e 	bl	80015f8 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff ff01 	bl	80019ae <OLED_PrintCent>

	for(int i = 0; i < screen->datsize - 1; i++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e01a      	b.n	8001be8 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	7818      	ldrb	r0, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	7859      	ldrb	r1, [r3, #1]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f7ff feb7 	bl	8001950 <OLED_Printlin>
	for(int i = 0; i < screen->datsize - 1; i++) {
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbde      	blt.n	8001bb2 <OLED_SCREEN+0x26>
	}
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	460b      	mov	r3, r1
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fae1 	bl	80001e0 <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	440b      	add	r3, r1
 8001c3c:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	7818      	ldrb	r0, [r3, #0]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	b2d9      	uxtb	r1, r3
 8001c4e:	2300      	movs	r3, #0
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	f7ff fe7d 	bl	8001950 <OLED_Printlin>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001c6e:	4a35      	ldr	r2, [pc, #212]	; (8001d44 <OLED_SELECT+0xe4>)
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4611      	mov	r1, r2
 8001c78:	8019      	strh	r1, [r3, #0]
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	0c12      	lsrs	r2, r2, #16
 8001c7e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	if(selopt == 0){
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d105      	bne.n	8001c92 <OLED_SELECT+0x32>
	    index = screen->selsize - 1;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]
 8001c90:	e002      	b.n	8001c98 <OLED_SELECT+0x38>
	} else {
		index = selopt - 1;
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	77fb      	strb	r3, [r7, #31]
	}

	prevpage=screen->seldata[index][0];
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	75fb      	strb	r3, [r7, #23]
	prevcol=screen->seldata[index][1];
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	7ffb      	ldrb	r3, [r7, #31]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	75bb      	strb	r3, [r7, #22]
	thispage=screen->seldata[selopt][0];
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	757b      	strb	r3, [r7, #21]
	thiscol=screen->seldata[selopt][1];
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	753b      	strb	r3, [r7, #20]

	if(restore == OLED_RESTORE){
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d122      	bne.n	8001d1c <OLED_SELECT+0xbc>
	    if (selopt == 0) {
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d110      	bne.n	8001cfe <OLED_SELECT+0x9e>
	    	rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689c      	ldr	r4, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f937 	bl	8001f60 <find_restore_string>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4423      	add	r3, r4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	e010      	b.n	8001d20 <OLED_SELECT+0xc0>
	    } else {
	    	rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689c      	ldr	r4, [r3, #8]
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f928 	bl	8001f60 <find_restore_string>
 8001d10:	4603      	mov	r3, r0
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4423      	add	r3, r4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	e001      	b.n	8001d20 <OLED_SELECT+0xc0>
	    }
	} else {
	    rest = "  ";
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <OLED_SELECT+0xe8>)
 8001d1e:	61bb      	str	r3, [r7, #24]
	}

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001d20:	7db9      	ldrb	r1, [r7, #22]
 8001d22:	7df8      	ldrb	r0, [r7, #23]
 8001d24:	2300      	movs	r3, #0
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	f7ff fe12 	bl	8001950 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001d2c:	f107 0210 	add.w	r2, r7, #16
 8001d30:	7d39      	ldrb	r1, [r7, #20]
 8001d32:	7d78      	ldrb	r0, [r7, #21]
 8001d34:	2300      	movs	r3, #0
 8001d36:	f7ff fe0b 	bl	8001950 <OLED_Printlin>

}
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	08011788 	.word	0x08011788
 8001d48:	08011784 	.word	0x08011784

08001d4c <OLED_select_inv>:
/**
 * Select option by inverting the character which is selected
 * @param screen - Screen currently displayed
 * @param selopt - Selected select option
 * */
void OLED_select_inv(const Screen* screen, uint8_t selopt) {
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
	uint8_t index, prevpage, prevcol, thispage, thiscol;
	char* restore;

	if(selopt == 0){
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <OLED_select_inv+0x1e>
		index = screen->selsize - 1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	75fb      	strb	r3, [r7, #23]
 8001d68:	e002      	b.n	8001d70 <OLED_select_inv+0x24>
	} else {
		index = selopt - 1;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	75fb      	strb	r3, [r7, #23]
	}

	prevpage=screen->seldata[index][0];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	73fb      	strb	r3, [r7, #15]
	prevcol=screen->seldata[index][1];
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	73bb      	strb	r3, [r7, #14]
	thispage=screen->seldata[selopt][0];
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	737b      	strb	r3, [r7, #13]
	thiscol=screen->seldata[selopt][1];
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	785b      	ldrb	r3, [r3, #1]
 8001da6:	733b      	strb	r3, [r7, #12]

	if (selopt == 0) {
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d110      	bne.n	8001dd0 <OLED_select_inv+0x84>
		restore=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689c      	ldr	r4, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8ce 	bl	8001f60 <find_restore_string>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4423      	add	r3, r4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e00d      	b.n	8001dec <OLED_select_inv+0xa0>
	} else {
		restore=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689c      	ldr	r4, [r3, #8]
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8bf 	bl	8001f60 <find_restore_string>
 8001de2:	4603      	mov	r3, r0
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4423      	add	r3, r4
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	613b      	str	r3, [r7, #16]
	}

	OLED_Printlin(prevpage, prevcol, restore, NORMAL);
 8001dec:	7bb9      	ldrb	r1, [r7, #14]
 8001dee:	7bf8      	ldrb	r0, [r7, #15]
 8001df0:	2300      	movs	r3, #0
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	f7ff fdac 	bl	8001950 <OLED_Printlin>
	OLED_Printlin(thispage, thiscol, screen->data[find_restore_string(screen, selopt)], INVERT);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689c      	ldr	r4, [r3, #8]
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f8ad 	bl	8001f60 <find_restore_string>
 8001e06:	4603      	mov	r3, r0
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4423      	add	r3, r4
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	7b39      	ldrb	r1, [r7, #12]
 8001e10:	7b78      	ldrb	r0, [r7, #13]
 8001e12:	2301      	movs	r3, #1
 8001e14:	f7ff fd9c 	bl	8001950 <OLED_Printlin>
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}

08001e20 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
	if (get_number_files_section(FILES_PERSCREEN * page, FILES_PERSCREEN) == 0) {
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	0052      	lsls	r2, r2, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2103      	movs	r1, #3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 feae 	bl	8003b9c <get_number_files_section>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <OLED_display_files+0x2a>
		return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e066      	b.n	8001f18 <OLED_display_files+0xf8>
	}
	uint32_t file_count = get_number_files_section(FILES_PERSCREEN * page, FILES_PERSCREEN);
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	0052      	lsls	r2, r2, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2103      	movs	r1, #3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fe9f 	bl	8003b9c <get_number_files_section>
 8001e5e:	61f8      	str	r0, [r7, #28]

	char** file_names = malloc(file_count * sizeof(char*));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00e fa1b 	bl	80102a0 <malloc>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
	char used[5];
	char free[5];
	uint32_t file_index = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t location_index = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]

	get_free_size_str(free);
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 ffb0 	bl	8003de0 <get_free_size_str>
	get_used_size_str(used);
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 ff99 	bl	8003dbc <get_used_size_str>

	OLED_SCRNREF(&SCRN_ShowFiles, 4, free);
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2104      	movs	r1, #4
 8001e92:	4823      	ldr	r0, [pc, #140]	; (8001f20 <OLED_display_files+0x100>)
 8001e94:	f7ff feb3 	bl	8001bfe <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_ShowFiles, 5, used);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2105      	movs	r1, #5
 8001ea0:	481f      	ldr	r0, [pc, #124]	; (8001f20 <OLED_display_files+0x100>)
 8001ea2:	f7ff feac 	bl	8001bfe <OLED_SCRNREF>

	if (get_files_section(file_names, FILES_PERSCREEN * page, FILES_PERSCREEN) != RFS_OK) {
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	0052      	lsls	r2, r2, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	69b8      	ldr	r0, [r7, #24]
 8001eb8:	f001 fe9e 	bl	8003bf8 <get_files_section>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d021      	beq.n	8001f06 <OLED_display_files+0xe6>
		free_filenames(file_names, file_count);
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	69b8      	ldr	r0, [r7, #24]
 8001ec8:	f000 f82c 	bl	8001f24 <free_filenames>
		return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e023      	b.n	8001f18 <OLED_display_files+0xf8>
	}

	while(location_index < FILES_PERSCREEN) {
		if (entry_present(location_index) == RFS_OK) {
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 feed 	bl	8003cb4 <entry_present>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10f      	bne.n	8001f00 <OLED_display_files+0xe0>
			OLED_SCRNREF(&SCRN_ShowFiles, location_index + 1, file_names[file_index]);
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b2d9      	uxtb	r1, r3
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	480a      	ldr	r0, [pc, #40]	; (8001f20 <OLED_display_files+0x100>)
 8001ef6:	f7ff fe82 	bl	8001bfe <OLED_SCRNREF>
			file_index++;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	3301      	adds	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
		}
		location_index++;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	3301      	adds	r3, #1
 8001f04:	623b      	str	r3, [r7, #32]
	while(location_index < FILES_PERSCREEN) {
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d9e1      	bls.n	8001ed0 <OLED_display_files+0xb0>
	}

	free_filenames(file_names, file_count);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	69b8      	ldr	r0, [r7, #24]
 8001f12:	f000 f807 	bl	8001f24 <free_filenames>
	return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	08012084 	.word	0x08012084

08001f24 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	e00a      	b.n	8001f4a <free_filenames+0x26>
		free(file_names[i]);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f00e f9b6 	bl	80102b0 <free>
	for (int i = 0; i < size; i++) {
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3301      	adds	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	dbf0      	blt.n	8001f34 <free_filenames+0x10>
	}
	free(file_names);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f00e f9ac 	bl	80102b0 <free>
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	e021      	b.n	8001fb6 <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6919      	ldr	r1, [r3, #16]
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	440b      	add	r3, r1
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d110      	bne.n	8001fb0 <find_restore_string+0x50>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	785a      	ldrb	r2, [r3, #1]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6919      	ldr	r1, [r3, #16]
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	440b      	add	r3, r1
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d102      	bne.n	8001fb0 <find_restore_string+0x50>
			index_of_string = i;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	73fb      	strb	r3, [r7, #15]
			break;
 8001fae:	e007      	b.n	8001fc0 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbd8      	blt.n	8001f72 <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fe69 	bl	8003cb4 <entry_present>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d12d      	bne.n	8002044 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 fc7d 	bl	80038ea <read_card_entry>
 8001ff0:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4815      	ldr	r0, [pc, #84]	; (800204c <oled_show_file+0x7c>)
 8001ff6:	f7ff fdc9 	bl	8001b8c <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	461a      	mov	r2, r3
 8002000:	2100      	movs	r1, #0
 8002002:	4812      	ldr	r0, [pc, #72]	; (800204c <oled_show_file+0x7c>)
 8002004:	f7ff fdfb 	bl	8001bfe <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	461a      	mov	r2, r3
 800200e:	2101      	movs	r1, #1
 8002010:	480e      	ldr	r0, [pc, #56]	; (800204c <oled_show_file+0x7c>)
 8002012:	f7ff fdf4 	bl	8001bfe <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	791b      	ldrb	r3, [r3, #4]
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f7ff f9b5 	bl	8001390 <uid_tostring>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	2102      	movs	r1, #2
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <oled_show_file+0x7c>)
 800202e:	f7ff fde6 	bl	8001bfe <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <oled_show_file+0x7c>)
 8002038:	f7ff fe12 	bl	8001c60 <OLED_SELECT>

	free(work);
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f00e f937 	bl	80102b0 <free>
 8002042:	e000      	b.n	8002046 <oled_show_file+0x76>
		return; //No card entry present
 8002044:	bf00      	nop
}
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	08012098 	.word	0x08012098

08002050 <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	4613      	mov	r3, r2
 800205c:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	3b01      	subs	r3, #1
 800206e:	429a      	cmp	r2, r3
 8002070:	db03      	blt.n	800207a <oled_move_selection+0x2a>
		*arrow_index = 0;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e005      	b.n	8002086 <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	79fa      	ldrb	r2, [r7, #7]
 800208c:	4619      	mov	r1, r3
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff fde6 	bl	8001c60 <OLED_SELECT>
}
 8002094:	bf00      	nop
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <oled_move_selection_inv>:
/**
 * Select by inverting the text on the screen
 * @param screen - Screen to modify
 * @param select_index - Pointer to variable that keeps track of selection index
 * */
void oled_move_selection_inv(const Screen* screen, uint8_t* select_index) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	uint8_t max_index = screen->selsize;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]

	if (*select_index >= max_index - 1) {
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	429a      	cmp	r2, r3
 80020b8:	db03      	blt.n	80020c2 <oled_move_selection_inv+0x26>
		*select_index = 0;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e005      	b.n	80020ce <oled_move_selection_inv+0x32>
	} else {
		*select_index += 1;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	701a      	strb	r2, [r3, #0]
	}

	OLED_select_inv(screen, *select_index);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fe39 	bl	8001d4c <OLED_select_inv>
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <oled_keyboard_insertChar>:
 * Update string displayed displayed in keyboard task as it's being written
 * @param char_index - Index of selected character on keyboard
 * @param curr_name - Pointer to pointer that stores the current name which has been created by the user.
 * 					  This name will grow as the user continues to write characters
 * */
void oled_keyboard_insertChar (uint8_t char_index, char** curr_name) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
	uint8_t length;

	if (*curr_name == NULL) {
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <oled_keyboard_insertChar+0x1a>
		length = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e006      	b.n	800210c <oled_keyboard_insertChar+0x28>
	} else {
		length = strlen(*curr_name);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe f86c 	bl	80001e0 <strlen>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]
	}

	*curr_name = realloc(*curr_name, (length + 2) * sizeof(char)); //Increment by 2 since we want to store a new character as well as null
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	3302      	adds	r3, #2
 8002114:	4619      	mov	r1, r3
 8002116:	4610      	mov	r0, r2
 8002118:	f00e fa56 	bl	80105c8 <realloc>
 800211c:	4602      	mov	r2, r0
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]
	(*curr_name)[length] = KEYBOARD_LUT[char_index];
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	440b      	add	r3, r1
 800212c:	490a      	ldr	r1, [pc, #40]	; (8002158 <oled_keyboard_insertChar+0x74>)
 800212e:	5c8a      	ldrb	r2, [r1, r2]
 8002130:	701a      	strb	r2, [r3, #0]
	(*curr_name)[length + 1] = '\0';
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	3301      	adds	r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	2100      	movs	r1, #0
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <oled_keyboard_insertChar+0x78>)
 800214a:	f7ff fd58 	bl	8001bfe <OLED_SCRNREF>
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	08011b70 	.word	0x08011b70
 800215c:	080120c0 	.word	0x080120c0

08002160 <oled_keyboard_removeChar>:

/**
 * Remove character from user inputted string
 * @param curr_name - Current state of user string
 * */
void oled_keyboard_removeChar (char** curr_name) {
 8002160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002164:	b087      	sub	sp, #28
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	466b      	mov	r3, sp
 800216c:	461e      	mov	r6, r3
	uint8_t length;

	if (*curr_name == NULL) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <oled_keyboard_removeChar+0x1a>
 8002176:	46b5      	mov	sp, r6
 8002178:	e055      	b.n	8002226 <oled_keyboard_removeChar+0xc6>
		return; //No name, don't do anything
	}

	length = strlen(*curr_name);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f82e 	bl	80001e0 <strlen>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]

	*curr_name = realloc(*curr_name, length * sizeof(char));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	7dfa      	ldrb	r2, [r7, #23]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f00e fa19 	bl	80105c8 <realloc>
 8002196:	4602      	mov	r2, r0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
	(*curr_name)[length - 1] = '\0';
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]

	char clear[length + 1];
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	1c59      	adds	r1, r3, #1
 80021ae:	1e4b      	subs	r3, r1, #1
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	460a      	mov	r2, r1
 80021b4:	2300      	movs	r3, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	4699      	mov	r9, r3
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ce:	460a      	mov	r2, r1
 80021d0:	2300      	movs	r3, #0
 80021d2:	4614      	mov	r4, r2
 80021d4:	461d      	mov	r5, r3
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	00eb      	lsls	r3, r5, #3
 80021e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e4:	00e2      	lsls	r2, r4, #3
 80021e6:	460b      	mov	r3, r1
 80021e8:	3307      	adds	r3, #7
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	ebad 0d03 	sub.w	sp, sp, r3
 80021f2:	466b      	mov	r3, sp
 80021f4:	3300      	adds	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
	memset(clear, ' ', length);
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	461a      	mov	r2, r3
 80021fc:	2120      	movs	r1, #32
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f00e f86c 	bl	80102dc <memset>
	clear[length] = '\0';
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	2100      	movs	r1, #0
 800220a:	54d1      	strb	r1, [r2, r3]

	OLED_SCRNREF(&SCRN_Keyboard, 0 ,clear);
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	2100      	movs	r1, #0
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <oled_keyboard_removeChar+0xd0>)
 8002212:	f7ff fcf4 	bl	8001bfe <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	2100      	movs	r1, #0
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <oled_keyboard_removeChar+0xd0>)
 8002220:	f7ff fced 	bl	8001bfe <OLED_SCRNREF>
 8002224:	46b5      	mov	sp, r6
}
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800222e:	bf00      	nop
 8002230:	080120c0 	.word	0x080120c0

08002234 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af02      	add	r7, sp, #8
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 800223e:	230f      	movs	r3, #15
 8002240:	733b      	strb	r3, [r7, #12]
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	737b      	strb	r3, [r7, #13]
 8002246:	2300      	movs	r3, #0
 8002248:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <STAT_READ+0x54>)
 8002252:	f002 fb8d 	bl	8004970 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 8002256:	bf00      	nop
 8002258:	f107 0208 	add.w	r2, r7, #8
 800225c:	f107 010c 	add.w	r1, r7, #12
 8002260:	2364      	movs	r3, #100	; 0x64
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2303      	movs	r3, #3
 8002266:	4809      	ldr	r0, [pc, #36]	; (800228c <STAT_READ+0x58>)
 8002268:	f005 fc69 	bl	8007b3e <HAL_SPI_TransmitReceive>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f2      	bne.n	8002258 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002278:	4803      	ldr	r0, [pc, #12]	; (8002288 <STAT_READ+0x54>)
 800227a:	f002 fb79 	bl	8004970 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 800227e:	7abb      	ldrb	r3, [r7, #10]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40020000 	.word	0x40020000
 800228c:	200007dc 	.word	0x200007dc

08002290 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	460a      	mov	r2, r1
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	4613      	mov	r3, r2
 800229e:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80022a0:	231f      	movs	r3, #31
 80022a2:	733b      	strb	r3, [r7, #12]
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	737b      	strb	r3, [r7, #13]
 80022a8:	79bb      	ldrb	r3, [r7, #6]
 80022aa:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b2:	480a      	ldr	r0, [pc, #40]	; (80022dc <STAT_WRITE+0x4c>)
 80022b4:	f002 fb5c 	bl	8004970 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80022b8:	f107 010c 	add.w	r1, r7, #12
 80022bc:	2364      	movs	r3, #100	; 0x64
 80022be:	2203      	movs	r2, #3
 80022c0:	4807      	ldr	r0, [pc, #28]	; (80022e0 <STAT_WRITE+0x50>)
 80022c2:	f005 fb00 	bl	80078c6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80022c6:	2201      	movs	r2, #1
 80022c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022cc:	4803      	ldr	r0, [pc, #12]	; (80022dc <STAT_WRITE+0x4c>)
 80022ce:	f002 fb4f 	bl	8004970 <HAL_GPIO_WritePin>

	return(HAL_OK);
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40020000 	.word	0x40020000
 80022e0:	200007dc 	.word	0x200007dc

080022e4 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 80022ea:	2306      	movs	r3, #6
 80022ec:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80022ee:	f000 f825 	bl	800233c <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80022f2:	e011      	b.n	8002318 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <WRIT_EN+0x50>)
 80022fc:	f002 fb38 	bl	8004970 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8002300:	1df9      	adds	r1, r7, #7
 8002302:	2364      	movs	r3, #100	; 0x64
 8002304:	2201      	movs	r2, #1
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <WRIT_EN+0x54>)
 8002308:	f005 fadd 	bl	80078c6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002312:	4808      	ldr	r0, [pc, #32]	; (8002334 <WRIT_EN+0x50>)
 8002314:	f002 fb2c 	bl	8004970 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8002318:	20c0      	movs	r0, #192	; 0xc0
 800231a:	f7ff ff8b 	bl	8002234 <STAT_READ>
 800231e:	4603      	mov	r3, r0
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	d1e5      	bne.n	80022f4 <WRIT_EN+0x10>
	}


}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40020000 	.word	0x40020000
 8002338:	200007dc 	.word	0x200007dc

0800233c <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8002342:	2304      	movs	r3, #4
 8002344:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8002346:	e011      	b.n	800236c <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234e:	480e      	ldr	r0, [pc, #56]	; (8002388 <WRITE_DIS+0x4c>)
 8002350:	f002 fb0e 	bl	8004970 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8002354:	1df9      	adds	r1, r7, #7
 8002356:	2364      	movs	r3, #100	; 0x64
 8002358:	2201      	movs	r2, #1
 800235a:	480c      	ldr	r0, [pc, #48]	; (800238c <WRITE_DIS+0x50>)
 800235c:	f005 fab3 	bl	80078c6 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002360:	2201      	movs	r2, #1
 8002362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002366:	4808      	ldr	r0, [pc, #32]	; (8002388 <WRITE_DIS+0x4c>)
 8002368:	f002 fb02 	bl	8004970 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800236c:	20c0      	movs	r0, #192	; 0xc0
 800236e:	f7ff ff61 	bl	8002234 <STAT_READ>
 8002372:	4603      	mov	r3, r0
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d0e5      	beq.n	8002348 <WRITE_DIS+0xc>
		}
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40020000 	.word	0x40020000
 800238c:	200007dc 	.word	0x200007dc

08002390 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 80023a0:	23d8      	movs	r3, #216	; 0xd8
 80023a2:	723b      	strb	r3, [r7, #8]
 80023a4:	2300      	movs	r3, #0
 80023a6:	727b      	strb	r3, [r7, #9]
 80023a8:	89fb      	ldrh	r3, [r7, #14]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	72bb      	strb	r3, [r7, #10]
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 80023b8:	f7ff ff94 	bl	80022e4 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c2:	480f      	ldr	r0, [pc, #60]	; (8002400 <block_erase+0x70>)
 80023c4:	f002 fad4 	bl	8004970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 80023c8:	f107 0108 	add.w	r1, r7, #8
 80023cc:	2364      	movs	r3, #100	; 0x64
 80023ce:	2204      	movs	r2, #4
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <block_erase+0x74>)
 80023d2:	f005 fa78 	bl	80078c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023d6:	2201      	movs	r2, #1
 80023d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023dc:	4808      	ldr	r0, [pc, #32]	; (8002400 <block_erase+0x70>)
 80023de:	f002 fac7 	bl	8004970 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80023e2:	bf00      	nop
 80023e4:	20c0      	movs	r0, #192	; 0xc0
 80023e6:	f7ff ff25 	bl	8002234 <STAT_READ>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d0f7      	beq.n	80023e4 <block_erase+0x54>
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40020000 	.word	0x40020000
 8002404:	200007dc 	.word	0x200007dc

08002408 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800240c:	2201      	movs	r2, #1
 800240e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002412:	480a      	ldr	r0, [pc, #40]	; (800243c <MEM_INIT+0x34>)
 8002414:	f002 faac 	bl	8004970 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8002418:	2100      	movs	r1, #0
 800241a:	20a0      	movs	r0, #160	; 0xa0
 800241c:	f7ff ff38 	bl	8002290 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8002420:	20a0      	movs	r0, #160	; 0xa0
 8002422:	f7ff ff07 	bl	8002234 <STAT_READ>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MEM_INIT+0x28>
		return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e002      	b.n	8002436 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 8002430:	f7ff ff84 	bl	800233c <WRITE_DIS>
	return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40020000 	.word	0x40020000

08002440 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60ba      	str	r2, [r7, #8]
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	4603      	mov	r3, r0
 800244c:	81fb      	strh	r3, [r7, #14]
 800244e:	460b      	mov	r3, r1
 8002450:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3303      	adds	r3, #3
 8002456:	4618      	mov	r0, r3
 8002458:	f00d ff22 	bl	80102a0 <malloc>
 800245c:	4603      	mov	r3, r0
 800245e:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8002460:	2310      	movs	r3, #16
 8002462:	743b      	strb	r3, [r7, #16]
 8002464:	2300      	movs	r3, #0
 8002466:	747b      	strb	r3, [r7, #17]
 8002468:	89fb      	ldrh	r3, [r7, #14]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b29b      	uxth	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	74bb      	strb	r3, [r7, #18]
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 800247e:	89bb      	ldrh	r3, [r7, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	b29a      	uxth	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3302      	adds	r3, #2
 8002490:	89ba      	ldrh	r2, [r7, #12]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3303      	adds	r3, #3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	4618      	mov	r0, r3
 80024a0:	f00d ff0e 	bl	80102c0 <memcpy>

	WRIT_EN();
 80024a4:	f7ff ff1e 	bl	80022e4 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ae:	482d      	ldr	r0, [pc, #180]	; (8002564 <MEM_WRITE+0x124>)
 80024b0:	f002 fa5e 	bl	8004970 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3303      	adds	r3, #3
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	2364      	movs	r3, #100	; 0x64
 80024be:	6979      	ldr	r1, [r7, #20]
 80024c0:	4829      	ldr	r0, [pc, #164]	; (8002568 <MEM_WRITE+0x128>)
 80024c2:	f005 fa00 	bl	80078c6 <HAL_SPI_Transmit>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024d2:	4824      	ldr	r0, [pc, #144]	; (8002564 <MEM_WRITE+0x124>)
 80024d4:	f002 fa4c 	bl	8004970 <HAL_GPIO_WritePin>
		free(setup);
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f00d fee9 	bl	80102b0 <free>
		return(HAL_ERROR);
 80024de:	2301      	movs	r3, #1
 80024e0:	e03c      	b.n	800255c <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e8:	481e      	ldr	r0, [pc, #120]	; (8002564 <MEM_WRITE+0x124>)
 80024ea:	f002 fa41 	bl	8004970 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 80024ee:	bf00      	nop
 80024f0:	20c0      	movs	r0, #192	; 0xc0
 80024f2:	f7ff fe9f 	bl	8002234 <STAT_READ>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d0f7      	beq.n	80024f0 <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002506:	4817      	ldr	r0, [pc, #92]	; (8002564 <MEM_WRITE+0x124>)
 8002508:	f002 fa32 	bl	8004970 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 800250c:	f107 0110 	add.w	r1, r7, #16
 8002510:	2364      	movs	r3, #100	; 0x64
 8002512:	2204      	movs	r2, #4
 8002514:	4814      	ldr	r0, [pc, #80]	; (8002568 <MEM_WRITE+0x128>)
 8002516:	f005 f9d6 	bl	80078c6 <HAL_SPI_Transmit>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002520:	2201      	movs	r2, #1
 8002522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002526:	480f      	ldr	r0, [pc, #60]	; (8002564 <MEM_WRITE+0x124>)
 8002528:	f002 fa22 	bl	8004970 <HAL_GPIO_WritePin>
		free(setup);
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f00d febf 	bl	80102b0 <free>
		return(HAL_ERROR);
 8002532:	2301      	movs	r3, #1
 8002534:	e012      	b.n	800255c <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002536:	2201      	movs	r2, #1
 8002538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800253c:	4809      	ldr	r0, [pc, #36]	; (8002564 <MEM_WRITE+0x124>)
 800253e:	f002 fa17 	bl	8004970 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002542:	bf00      	nop
 8002544:	20c0      	movs	r0, #192	; 0xc0
 8002546:	f7ff fe75 	bl	8002234 <STAT_READ>
 800254a:	4603      	mov	r3, r0
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d0f7      	beq.n	8002544 <MEM_WRITE+0x104>
	free(setup);
 8002554:	6978      	ldr	r0, [r7, #20]
 8002556:	f00d feab 	bl	80102b0 <free>
	return(HAL_OK);
 800255a:	2300      	movs	r3, #0

}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40020000 	.word	0x40020000
 8002568:	200007dc 	.word	0x200007dc

0800256c <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af02      	add	r7, sp, #8
 8002572:	60ba      	str	r2, [r7, #8]
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4603      	mov	r3, r0
 8002578:	81fb      	strh	r3, [r7, #14]
 800257a:	460b      	mov	r3, r1
 800257c:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 800257e:	2313      	movs	r3, #19
 8002580:	753b      	strb	r3, [r7, #20]
 8002582:	2300      	movs	r3, #0
 8002584:	757b      	strb	r3, [r7, #21]
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	b29b      	uxth	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	75bb      	strb	r3, [r7, #22]
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 8002596:	2304      	movs	r3, #4
 8002598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 800259c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f00d fe7b 	bl	80102a0 <malloc>
 80025aa:	4603      	mov	r3, r0
 80025ac:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 80025ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f00d fe72 	bl	80102a0 <malloc>
 80025bc:	4603      	mov	r3, r0
 80025be:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 80025c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	69f8      	ldr	r0, [r7, #28]
 80025ce:	f00d fe85 	bl	80102dc <memset>
	read_command[0]=READ_BUF;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2203      	movs	r2, #3
 80025d6:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 80025d8:	89bb      	ldrh	r3, [r7, #12]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	b29a      	uxth	r2, r3
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3302      	adds	r3, #2
 80025ea:	89ba      	ldrh	r2, [r7, #12]
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	3303      	adds	r3, #3
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fe:	4842      	ldr	r0, [pc, #264]	; (8002708 <MEM_READPAGE+0x19c>)
 8002600:	f002 f9b6 	bl	8004970 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8002604:	f107 0114 	add.w	r1, r7, #20
 8002608:	2364      	movs	r3, #100	; 0x64
 800260a:	2204      	movs	r2, #4
 800260c:	483f      	ldr	r0, [pc, #252]	; (800270c <MEM_READPAGE+0x1a0>)
 800260e:	f005 f95a 	bl	80078c6 <HAL_SPI_Transmit>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800261e:	483a      	ldr	r0, [pc, #232]	; (8002708 <MEM_READPAGE+0x19c>)
 8002620:	f002 f9a6 	bl	8004970 <HAL_GPIO_WritePin>
		free(read_command);
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f00d fe43 	bl	80102b0 <free>
		free(rec_data);
 800262a:	69b8      	ldr	r0, [r7, #24]
 800262c:	f00d fe40 	bl	80102b0 <free>
		return(HAL_ERROR);
 8002630:	2301      	movs	r3, #1
 8002632:	e064      	b.n	80026fe <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002634:	2201      	movs	r2, #1
 8002636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800263a:	4833      	ldr	r0, [pc, #204]	; (8002708 <MEM_READPAGE+0x19c>)
 800263c:	f002 f998 	bl	8004970 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 8002640:	bf00      	nop
 8002642:	20c0      	movs	r0, #192	; 0xc0
 8002644:	f7ff fdf6 	bl	8002234 <STAT_READ>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d0f7      	beq.n	8002642 <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002658:	482b      	ldr	r0, [pc, #172]	; (8002708 <MEM_READPAGE+0x19c>)
 800265a:	f002 f989 	bl	8004970 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 800265e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4413      	add	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	2264      	movs	r2, #100	; 0x64
 800266e:	9200      	str	r2, [sp, #0]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	69f9      	ldr	r1, [r7, #28]
 8002674:	4825      	ldr	r0, [pc, #148]	; (800270c <MEM_READPAGE+0x1a0>)
 8002676:	f005 fa62 	bl	8007b3e <HAL_SPI_TransmitReceive>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002686:	4820      	ldr	r0, [pc, #128]	; (8002708 <MEM_READPAGE+0x19c>)
 8002688:	f002 f972 	bl	8004970 <HAL_GPIO_WritePin>
		free(read_command);
 800268c:	69f8      	ldr	r0, [r7, #28]
 800268e:	f00d fe0f 	bl	80102b0 <free>
		free(rec_data);
 8002692:	69b8      	ldr	r0, [r7, #24]
 8002694:	f00d fe0c 	bl	80102b0 <free>
		return(HAL_ERROR);
 8002698:	2301      	movs	r3, #1
 800269a:	e030      	b.n	80026fe <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800269c:	2201      	movs	r2, #1
 800269e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a2:	4819      	ldr	r0, [pc, #100]	; (8002708 <MEM_READPAGE+0x19c>)
 80026a4:	f002 f964 	bl	8004970 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80026a8:	bf00      	nop
 80026aa:	20c0      	movs	r0, #192	; 0xc0
 80026ac:	f7ff fdc2 	bl	8002234 <STAT_READ>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d0f7      	beq.n	80026aa <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d104      	bne.n	80026ca <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	791a      	ldrb	r2, [r3, #4]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e012      	b.n	80026f0 <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e00b      	b.n	80026e8 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	3304      	adds	r3, #4
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	441a      	add	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	440b      	add	r3, r1
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	3301      	adds	r3, #1
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d8ef      	bhi.n	80026d0 <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 80026f0:	69f8      	ldr	r0, [r7, #28]
 80026f2:	f00d fddd 	bl	80102b0 <free>
	free(rec_data);
 80026f6:	69b8      	ldr	r0, [r7, #24]
 80026f8:	f00d fdda 	bl	80102b0 <free>
	return(HAL_OK);
 80026fc:	2300      	movs	r3, #0

}
 80026fe:	4618      	mov	r0, r3
 8002700:	3728      	adds	r7, #40	; 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40020000 	.word	0x40020000
 800270c:	200007dc 	.word	0x200007dc

08002710 <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	e016      	b.n	800274a <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	b29b      	uxth	r3, r3
 8002720:	019b      	lsls	r3, r3, #6
 8002722:	b298      	uxth	r0, r3
 8002724:	1cfa      	adds	r2, r7, #3
 8002726:	2301      	movs	r3, #1
 8002728:	2100      	movs	r1, #0
 800272a:	f7ff ff1f 	bl	800256c <MEM_READPAGE>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <mem_find_free_block+0x2a>
			return -1;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	e00d      	b.n	8002756 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	2bff      	cmp	r3, #255	; 0xff
 800273e:	d101      	bne.n	8002744 <mem_find_free_block+0x34>
			return i;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	e008      	b.n	8002756 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3301      	adds	r3, #1
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	dbe4      	blt.n	800271c <mem_find_free_block+0xc>
		}
	}
	return -1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <memory_reset>:

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002764:	2300      	movs	r3, #0
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	e007      	b.n	800277a <memory_reset+0x1c>
		block_erase(i);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fe0e 	bl	8002390 <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002780:	dbf3      	blt.n	800276a <memory_reset+0xc>
	}
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_GPIO_EXTI_Callback+0x78>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 800279e:	2300      	movs	r3, #0
 80027a0:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 80027a2:	2102      	movs	r1, #2
 80027a4:	4818      	ldr	r0, [pc, #96]	; (8002808 <HAL_GPIO_EXTI_Callback+0x7c>)
 80027a6:	f002 f8cb 	bl	8004940 <HAL_GPIO_ReadPin>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d11b      	bne.n	80027e8 <HAL_GPIO_EXTI_Callback+0x5c>
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d018      	beq.n	80027e8 <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 80027b6:	4813      	ldr	r0, [pc, #76]	; (8002804 <HAL_GPIO_EXTI_Callback+0x78>)
 80027b8:	f005 fcd8 	bl	800816c <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_GPIO_EXTI_Callback+0x78>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 80027c4:	89fb      	ldrh	r3, [r7, #14]
 80027c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ca:	d902      	bls.n	80027d2 <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 80027cc:	2301      	movs	r3, #1
 80027ce:	737b      	strb	r3, [r7, #13]
 80027d0:	e001      	b.n	80027d6 <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 80027d2:	2302      	movs	r3, #2
 80027d4:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_GPIO_EXTI_Callback+0x80>)
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	f107 010d 	add.w	r1, r7, #13
 80027de:	2300      	movs	r3, #0
 80027e0:	2200      	movs	r2, #0
 80027e2:	f00a fdad 	bl	800d340 <xQueueGenericSendFromISR>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
		HAL_TIM_Base_Start(&htim3);
	}
}
 80027e6:	e009      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x70>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 80027e8:	2102      	movs	r1, #2
 80027ea:	4807      	ldr	r0, [pc, #28]	; (8002808 <HAL_GPIO_EXTI_Callback+0x7c>)
 80027ec:	f002 f8a8 	bl	8004940 <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_GPIO_EXTI_Callback+0x70>
		HAL_TIM_Base_Start(&htim3);
 80027f6:	4803      	ldr	r0, [pc, #12]	; (8002804 <HAL_GPIO_EXTI_Callback+0x78>)
 80027f8:	f005 fc5e 	bl	80080b8 <HAL_TIM_Base_Start>
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2000087c 	.word	0x2000087c
 8002808:	40020000 	.word	0x40020000
 800280c:	200008f0 	.word	0x200008f0

08002810 <BUZZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZZ(void){
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002814:	2108      	movs	r1, #8
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <BUZZ+0x20>)
 8002818:	f005 fd8c 	bl	8008334 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 800281c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002820:	f001 fe04 	bl	800442c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002824:	2108      	movs	r1, #8
 8002826:	4802      	ldr	r0, [pc, #8]	; (8002830 <BUZZ+0x20>)
 8002828:	f005 fe34 	bl	8008494 <HAL_TIM_PWM_Stop>
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000834 	.word	0x20000834

08002834 <write_card>:

void write_card(Card* towrite) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 800283c:	f7fe fedc 	bl	80015f8 <OLED_Clear>
	MFRC_ANTON();
 8002840:	f7fe fa4e 	bl	8000ce0 <MFRC_ANTON>
	OLED_PrintCent(2, "Writing...", NORMAL);
 8002844:	2200      	movs	r2, #0
 8002846:	4926      	ldr	r1, [pc, #152]	; (80028e0 <write_card+0xac>)
 8002848:	2002      	movs	r0, #2
 800284a:	f7ff f8b0 	bl	80019ae <OLED_PrintCent>
	if (UL_writecard(towrite) == PCD_NO_PICC) {
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fd5e 	bl	8001310 <UL_writecard>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d118      	bne.n	800288c <write_card+0x58>
		OLED_PrintCent(4, "ERROR: Couldn't find", NORMAL);
 800285a:	2200      	movs	r2, #0
 800285c:	4921      	ldr	r1, [pc, #132]	; (80028e4 <write_card+0xb0>)
 800285e:	2004      	movs	r0, #4
 8002860:	f7ff f8a5 	bl	80019ae <OLED_PrintCent>
		OLED_PrintCent(6, "Card", NORMAL);
 8002864:	2200      	movs	r2, #0
 8002866:	4920      	ldr	r1, [pc, #128]	; (80028e8 <write_card+0xb4>)
 8002868:	2006      	movs	r0, #6
 800286a:	f7ff f8a0 	bl	80019ae <OLED_PrintCent>
		MFRC_ANTOFF();
 800286e:	f7fe fa71 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(2000);
 8002872:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002876:	f00a f9b0 	bl	800cbda <osDelay>
		vTaskResume(HomeHandle);
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <write_card+0xb8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f00b fac6 	bl	800de10 <vTaskResume>
		vTaskSuspend(NULL);
 8002884:	2000      	movs	r0, #0
 8002886:	f00b fa1b 	bl	800dcc0 <vTaskSuspend>
		MFRC_ANTOFF();
		osDelay(1000);
		vTaskResume(HomeHandle);
		vTaskSuspend(NULL);
	}
}
 800288a:	e025      	b.n	80028d8 <write_card+0xa4>
		MFRC_HALTA(); //Deselect card
 800288c:	f7fe fb3e 	bl	8000f0c <MFRC_HALTA>
		OLED_PrintCent(4,"Verifying...", NORMAL);
 8002890:	2200      	movs	r2, #0
 8002892:	4917      	ldr	r1, [pc, #92]	; (80028f0 <write_card+0xbc>)
 8002894:	2004      	movs	r0, #4
 8002896:	f7ff f88a 	bl	80019ae <OLED_PrintCent>
		if (UL_verify(towrite) == PCD_OK) {
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fdc2 	bl	8001424 <UL_verify>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2bcc      	cmp	r3, #204	; 0xcc
 80028a4:	d105      	bne.n	80028b2 <write_card+0x7e>
			OLED_PrintCent(6, "Write verified :)", NORMAL);
 80028a6:	2200      	movs	r2, #0
 80028a8:	4912      	ldr	r1, [pc, #72]	; (80028f4 <write_card+0xc0>)
 80028aa:	2006      	movs	r0, #6
 80028ac:	f7ff f87f 	bl	80019ae <OLED_PrintCent>
 80028b0:	e004      	b.n	80028bc <write_card+0x88>
			OLED_PrintCent(6, "COULDN'T VERIFY", NORMAL);
 80028b2:	2200      	movs	r2, #0
 80028b4:	4910      	ldr	r1, [pc, #64]	; (80028f8 <write_card+0xc4>)
 80028b6:	2006      	movs	r0, #6
 80028b8:	f7ff f879 	bl	80019ae <OLED_PrintCent>
		MFRC_ANTOFF();
 80028bc:	f7fe fa4a 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(1000);
 80028c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c4:	f00a f989 	bl	800cbda <osDelay>
		vTaskResume(HomeHandle);
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <write_card+0xb8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f00b fa9f 	bl	800de10 <vTaskResume>
		vTaskSuspend(NULL);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f00b f9f4 	bl	800dcc0 <vTaskSuspend>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	08011834 	.word	0x08011834
 80028e4:	08011840 	.word	0x08011840
 80028e8:	08011858 	.word	0x08011858
 80028ec:	200008d0 	.word	0x200008d0
 80028f0:	08011860 	.word	0x08011860
 80028f4:	08011870 	.word	0x08011870
 80028f8:	08011884 	.word	0x08011884

080028fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002900:	f001 fd52 	bl	80043a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002904:	f000 f8ce 	bl	8002aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002908:	f000 fa96 	bl	8002e38 <MX_GPIO_Init>
  MX_I2C1_Init();
 800290c:	f000 f934 	bl	8002b78 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002910:	f000 f960 	bl	8002bd4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002914:	f000 f996 	bl	8002c44 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002918:	f000 f9ca 	bl	8002cb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800291c:	f000 fa3e 	bl	8002d9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002920:	f00a f87e 	bl	800ca20 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8002924:	4a39      	ldr	r2, [pc, #228]	; (8002a0c <main+0x110>)
 8002926:	2104      	movs	r1, #4
 8002928:	2001      	movs	r0, #1
 800292a:	f00a f971 	bl	800cc10 <osMessageQueueNew>
 800292e:	4603      	mov	r3, r0
 8002930:	4a37      	ldr	r2, [pc, #220]	; (8002a10 <main+0x114>)
 8002932:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 8002934:	4a37      	ldr	r2, [pc, #220]	; (8002a14 <main+0x118>)
 8002936:	2101      	movs	r1, #1
 8002938:	2001      	movs	r0, #1
 800293a:	f00a f969 	bl	800cc10 <osMessageQueueNew>
 800293e:	4603      	mov	r3, r0
 8002940:	4a35      	ldr	r2, [pc, #212]	; (8002a18 <main+0x11c>)
 8002942:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 8002944:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <main+0x120>)
 8002946:	2102      	movs	r1, #2
 8002948:	2001      	movs	r0, #1
 800294a:	f00a f961 	bl	800cc10 <osMessageQueueNew>
 800294e:	4603      	mov	r3, r0
 8002950:	4a33      	ldr	r2, [pc, #204]	; (8002a20 <main+0x124>)
 8002952:	6013      	str	r3, [r2, #0]

  /* creation of KeyboardOut */
  KeyboardOutHandle = osMessageQueueNew (1, sizeof(char*), &KeyboardOut_attributes);
 8002954:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <main+0x128>)
 8002956:	2104      	movs	r1, #4
 8002958:	2001      	movs	r0, #1
 800295a:	f00a f959 	bl	800cc10 <osMessageQueueNew>
 800295e:	4603      	mov	r3, r0
 8002960:	4a31      	ldr	r2, [pc, #196]	; (8002a28 <main+0x12c>)
 8002962:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8002964:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <main+0x130>)
 8002966:	2100      	movs	r1, #0
 8002968:	4831      	ldr	r0, [pc, #196]	; (8002a30 <main+0x134>)
 800296a:	f00a f8a3 	bl	800cab4 <osThreadNew>
 800296e:	4603      	mov	r3, r0
 8002970:	4a30      	ldr	r2, [pc, #192]	; (8002a34 <main+0x138>)
 8002972:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8002974:	4a30      	ldr	r2, [pc, #192]	; (8002a38 <main+0x13c>)
 8002976:	2100      	movs	r1, #0
 8002978:	4830      	ldr	r0, [pc, #192]	; (8002a3c <main+0x140>)
 800297a:	f00a f89b 	bl	800cab4 <osThreadNew>
 800297e:	4603      	mov	r3, r0
 8002980:	4a2f      	ldr	r2, [pc, #188]	; (8002a40 <main+0x144>)
 8002982:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8002984:	4a2f      	ldr	r2, [pc, #188]	; (8002a44 <main+0x148>)
 8002986:	2100      	movs	r1, #0
 8002988:	482f      	ldr	r0, [pc, #188]	; (8002a48 <main+0x14c>)
 800298a:	f00a f893 	bl	800cab4 <osThreadNew>
 800298e:	4603      	mov	r3, r0
 8002990:	4a2e      	ldr	r2, [pc, #184]	; (8002a4c <main+0x150>)
 8002992:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8002994:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <main+0x154>)
 8002996:	2100      	movs	r1, #0
 8002998:	482e      	ldr	r0, [pc, #184]	; (8002a54 <main+0x158>)
 800299a:	f00a f88b 	bl	800cab4 <osThreadNew>
 800299e:	4603      	mov	r3, r0
 80029a0:	4a2d      	ldr	r2, [pc, #180]	; (8002a58 <main+0x15c>)
 80029a2:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 80029a4:	4a2d      	ldr	r2, [pc, #180]	; (8002a5c <main+0x160>)
 80029a6:	2100      	movs	r1, #0
 80029a8:	482d      	ldr	r0, [pc, #180]	; (8002a60 <main+0x164>)
 80029aa:	f00a f883 	bl	800cab4 <osThreadNew>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <main+0x168>)
 80029b2:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 80029b4:	4a2c      	ldr	r2, [pc, #176]	; (8002a68 <main+0x16c>)
 80029b6:	2100      	movs	r1, #0
 80029b8:	482c      	ldr	r0, [pc, #176]	; (8002a6c <main+0x170>)
 80029ba:	f00a f87b 	bl	800cab4 <osThreadNew>
 80029be:	4603      	mov	r3, r0
 80029c0:	4a2b      	ldr	r2, [pc, #172]	; (8002a70 <main+0x174>)
 80029c2:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 80029c4:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <main+0x178>)
 80029c6:	2100      	movs	r1, #0
 80029c8:	482b      	ldr	r0, [pc, #172]	; (8002a78 <main+0x17c>)
 80029ca:	f00a f873 	bl	800cab4 <osThreadNew>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <main+0x180>)
 80029d2:	6013      	str	r3, [r2, #0]

  /* creation of Clone */
  CloneHandle = osThreadNew(StartClone, NULL, &Clone_attributes);
 80029d4:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <main+0x184>)
 80029d6:	2100      	movs	r1, #0
 80029d8:	482a      	ldr	r0, [pc, #168]	; (8002a84 <main+0x188>)
 80029da:	f00a f86b 	bl	800cab4 <osThreadNew>
 80029de:	4603      	mov	r3, r0
 80029e0:	4a29      	ldr	r2, [pc, #164]	; (8002a88 <main+0x18c>)
 80029e2:	6013      	str	r3, [r2, #0]

  /* creation of Keyboard */
  KeyboardHandle = osThreadNew(StartKeyboard, NULL, &Keyboard_attributes);
 80029e4:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <main+0x190>)
 80029e6:	2100      	movs	r1, #0
 80029e8:	4829      	ldr	r0, [pc, #164]	; (8002a90 <main+0x194>)
 80029ea:	f00a f863 	bl	800cab4 <osThreadNew>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <main+0x198>)
 80029f2:	6013      	str	r3, [r2, #0]

  /* creation of DisplaySettings */
  DisplaySettingsHandle = osThreadNew(StartDisplaySettings, NULL, &DisplaySettings_attributes);
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <main+0x19c>)
 80029f6:	2100      	movs	r1, #0
 80029f8:	4828      	ldr	r0, [pc, #160]	; (8002a9c <main+0x1a0>)
 80029fa:	f00a f85b 	bl	800cab4 <osThreadNew>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <main+0x1a4>)
 8002a02:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002a04:	f00a f830 	bl	800ca68 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <main+0x10c>
 8002a0a:	bf00      	nop
 8002a0c:	08011ed4 	.word	0x08011ed4
 8002a10:	200008ec 	.word	0x200008ec
 8002a14:	08011eec 	.word	0x08011eec
 8002a18:	200008f0 	.word	0x200008f0
 8002a1c:	08011f04 	.word	0x08011f04
 8002a20:	200008f4 	.word	0x200008f4
 8002a24:	08011f1c 	.word	0x08011f1c
 8002a28:	200008f8 	.word	0x200008f8
 8002a2c:	08011d6c 	.word	0x08011d6c
 8002a30:	08002f59 	.word	0x08002f59
 8002a34:	200008c4 	.word	0x200008c4
 8002a38:	08011d90 	.word	0x08011d90
 8002a3c:	080030c9 	.word	0x080030c9
 8002a40:	200008c8 	.word	0x200008c8
 8002a44:	08011db4 	.word	0x08011db4
 8002a48:	08003159 	.word	0x08003159
 8002a4c:	200008cc 	.word	0x200008cc
 8002a50:	08011dd8 	.word	0x08011dd8
 8002a54:	080031f9 	.word	0x080031f9
 8002a58:	200008d0 	.word	0x200008d0
 8002a5c:	08011dfc 	.word	0x08011dfc
 8002a60:	080032e1 	.word	0x080032e1
 8002a64:	200008d4 	.word	0x200008d4
 8002a68:	08011e20 	.word	0x08011e20
 8002a6c:	08003409 	.word	0x08003409
 8002a70:	200008d8 	.word	0x200008d8
 8002a74:	08011e44 	.word	0x08011e44
 8002a78:	080034e1 	.word	0x080034e1
 8002a7c:	200008dc 	.word	0x200008dc
 8002a80:	08011e68 	.word	0x08011e68
 8002a84:	08003585 	.word	0x08003585
 8002a88:	200008e0 	.word	0x200008e0
 8002a8c:	08011e8c 	.word	0x08011e8c
 8002a90:	0800362d 	.word	0x0800362d
 8002a94:	200008e4 	.word	0x200008e4
 8002a98:	08011eb0 	.word	0x08011eb0
 8002a9c:	080036ed 	.word	0x080036ed
 8002aa0:	200008e8 	.word	0x200008e8

08002aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b094      	sub	sp, #80	; 0x50
 8002aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aaa:	f107 0320 	add.w	r3, r7, #32
 8002aae:	2230      	movs	r2, #48	; 0x30
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f00d fc12 	bl	80102dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <SystemClock_Config+0xcc>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <SystemClock_Config+0xcc>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <SystemClock_Config+0xcc>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <SystemClock_Config+0xd0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <SystemClock_Config+0xd0>)
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <SystemClock_Config+0xd0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b18:	2308      	movs	r3, #8
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b1c:	23a8      	movs	r3, #168	; 0xa8
 8002b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b20:	2304      	movs	r3, #4
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b24:	2307      	movs	r3, #7
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b28:	f107 0320 	add.w	r3, r7, #32
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 f98d 	bl	8006e4c <HAL_RCC_OscConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002b38:	f000 fe1a 	bl	8003770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b40:	2302      	movs	r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	2102      	movs	r1, #2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 fbef 	bl	800733c <HAL_RCC_ClockConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b64:	f000 fe04 	bl	8003770 <Error_Handler>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3750      	adds	r7, #80	; 0x50
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000

08002b78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <MX_I2C1_Init+0x54>)
 8002b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002b84:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <MX_I2C1_Init+0x58>)
 8002b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bb4:	4804      	ldr	r0, [pc, #16]	; (8002bc8 <MX_I2C1_Init+0x50>)
 8002bb6:	f001 ff0d 	bl	80049d4 <HAL_I2C_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bc0:	f000 fdd6 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000730 	.word	0x20000730
 8002bcc:	40005400 	.word	0x40005400
 8002bd0:	000186a0 	.word	0x000186a0

08002bd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002bda:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <MX_SPI1_Init+0x6c>)
 8002bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002be8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002c0a:	2218      	movs	r2, #24
 8002c0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002c22:	220a      	movs	r2, #10
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c26:	4805      	ldr	r0, [pc, #20]	; (8002c3c <MX_SPI1_Init+0x68>)
 8002c28:	f004 fdc4 	bl	80077b4 <HAL_SPI_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002c32:	f000 fd9d 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000784 	.word	0x20000784
 8002c40:	40013000 	.word	0x40013000

08002c44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c4a:	4a18      	ldr	r2, [pc, #96]	; (8002cac <MX_SPI2_Init+0x68>)
 8002c4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c56:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c88:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c90:	220a      	movs	r2, #10
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c94:	4804      	ldr	r0, [pc, #16]	; (8002ca8 <MX_SPI2_Init+0x64>)
 8002c96:	f004 fd8d 	bl	80077b4 <HAL_SPI_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ca0:	f000 fd66 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200007dc 	.word	0x200007dc
 8002cac:	40003800 	.word	0x40003800

08002cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08e      	sub	sp, #56	; 0x38
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc4:	f107 0320 	add.w	r3, r7, #32
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
 8002cdc:	615a      	str	r2, [r3, #20]
 8002cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002ce2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ce6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002cea:	f240 12a3 	movw	r2, #419	; 0x1a3
 8002cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002cf8:	2231      	movs	r2, #49	; 0x31
 8002cfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfc:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d02:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d08:	4823      	ldr	r0, [pc, #140]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002d0a:	f005 f985 	bl	8008018 <HAL_TIM_Base_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d14:	f000 fd2c 	bl	8003770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d22:	4619      	mov	r1, r3
 8002d24:	481c      	ldr	r0, [pc, #112]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002d26:	f005 fde3 	bl	80088f0 <HAL_TIM_ConfigClockSource>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d30:	f000 fd1e 	bl	8003770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d34:	4818      	ldr	r0, [pc, #96]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002d36:	f005 faa3 	bl	8008280 <HAL_TIM_PWM_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d40:	f000 fd16 	bl	8003770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d4c:	f107 0320 	add.w	r3, r7, #32
 8002d50:	4619      	mov	r1, r3
 8002d52:	4811      	ldr	r0, [pc, #68]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002d54:	f006 f988 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002d5e:	f000 fd07 	bl	8003770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d62:	2360      	movs	r3, #96	; 0x60
 8002d64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8002d66:	2318      	movs	r3, #24
 8002d68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	2208      	movs	r2, #8
 8002d76:	4619      	mov	r1, r3
 8002d78:	4807      	ldr	r0, [pc, #28]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002d7a:	f005 fcf7 	bl	800876c <HAL_TIM_PWM_ConfigChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002d84:	f000 fcf4 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d88:	4803      	ldr	r0, [pc, #12]	; (8002d98 <MX_TIM2_Init+0xe8>)
 8002d8a:	f001 f963 	bl	8004054 <HAL_TIM_MspPostInit>

}
 8002d8e:	bf00      	nop
 8002d90:	3738      	adds	r7, #56	; 0x38
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000834 	.word	0x20000834

08002d9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da2:	f107 0308 	add.w	r3, r7, #8
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db0:	463b      	mov	r3, r7
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <MX_TIM3_Init+0x98>)
 8002dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002dc0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002dc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002dce:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002dd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002de0:	4813      	ldr	r0, [pc, #76]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002de2:	f005 f919 	bl	8008018 <HAL_TIM_Base_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002dec:	f000 fcc0 	bl	8003770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002dfe:	f005 fd77 	bl	80088f0 <HAL_TIM_ConfigClockSource>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e08:	f000 fcb2 	bl	8003770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e14:	463b      	mov	r3, r7
 8002e16:	4619      	mov	r1, r3
 8002e18:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_TIM3_Init+0x94>)
 8002e1a:	f006 f925 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002e24:	f000 fca4 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	2000087c 	.word	0x2000087c
 8002e34:	40000400 	.word	0x40000400

08002e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a33      	ldr	r2, [pc, #204]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a2c      	ldr	r2, [pc, #176]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <MX_GPIO_Init+0xec>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002ea8:	481f      	ldr	r0, [pc, #124]	; (8002f28 <MX_GPIO_Init+0xf0>)
 8002eaa:	f001 fd61 	bl	8004970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2122      	movs	r1, #34	; 0x22
 8002eb2:	481e      	ldr	r0, [pc, #120]	; (8002f2c <MX_GPIO_Init+0xf4>)
 8002eb4:	f001 fd5c 	bl	8004970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ebc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4816      	ldr	r0, [pc, #88]	; (8002f28 <MX_GPIO_Init+0xf0>)
 8002ece:	f001 fbb3 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002ed2:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	4619      	mov	r1, r3
 8002eea:	480f      	ldr	r0, [pc, #60]	; (8002f28 <MX_GPIO_Init+0xf0>)
 8002eec:	f001 fba4 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002ef0:	2322      	movs	r3, #34	; 0x22
 8002ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	4619      	mov	r1, r3
 8002f06:	4809      	ldr	r0, [pc, #36]	; (8002f2c <MX_GPIO_Init+0xf4>)
 8002f08:	f001 fb96 	bl	8004638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2105      	movs	r1, #5
 8002f10:	2007      	movs	r0, #7
 8002f12:	f001 fb67 	bl	80045e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f16:	2007      	movs	r0, #7
 8002f18:	f001 fb80 	bl	800461c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f1c:	bf00      	nop
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	40020400 	.word	0x40020400

08002f30 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*) ptr, len);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4619      	mov	r1, r3
 8002f42:	68b8      	ldr	r0, [r7, #8]
 8002f44:	f00c fd30 	bl	800f9a8 <CDC_Transmit_FS>
    HAL_Delay(1);
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f001 fa6f 	bl	800442c <HAL_Delay>
    return len;
 8002f4e:	687b      	ldr	r3, [r7, #4]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002f58:	b5b0      	push	{r4, r5, r7, lr}
 8002f5a:	b09c      	sub	sp, #112	; 0x70
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002f60:	f00c fc64 	bl	800f82c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8002f64:	4b48      	ldr	r3, [pc, #288]	; (8003088 <Start_Init+0x130>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f00a fea9 	bl	800dcc0 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <Start_Init+0x134>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f00a fea4 	bl	800dcc0 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8002f78:	4b45      	ldr	r3, [pc, #276]	; (8003090 <Start_Init+0x138>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f00a fe9f 	bl	800dcc0 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <Start_Init+0x13c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f00a fe9a 	bl	800dcc0 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8002f8c:	4b42      	ldr	r3, [pc, #264]	; (8003098 <Start_Init+0x140>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f00a fe95 	bl	800dcc0 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <Start_Init+0x144>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00a fe90 	bl	800dcc0 <vTaskSuspend>
    vTaskSuspend(CloneHandle);
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <Start_Init+0x148>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f00a fe8b 	bl	800dcc0 <vTaskSuspend>
    vTaskSuspend(KeyboardHandle);
 8002faa:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <Start_Init+0x14c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f00a fe86 	bl	800dcc0 <vTaskSuspend>
    vTaskSuspend(DisplaySettingsHandle);
 8002fb4:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <Start_Init+0x150>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f00a fe81 	bl	800dcc0 <vTaskSuspend>

    MFRC_INIT();
 8002fbe:	f7fd ff11 	bl	8000de4 <MFRC_INIT>
    MFRC_ANTOFF();
 8002fc2:	f7fd fec7 	bl	8000d54 <MFRC_ANTOFF>
    OLED_INIT();
 8002fc6:	f7fe fbd5 	bl	8001774 <OLED_INIT>
    OLED_Print(TC);
 8002fca:	4838      	ldr	r0, [pc, #224]	; (80030ac <Start_Init+0x154>)
 8002fcc:	f7fe fd13 	bl	80019f6 <OLED_Print>
    MEM_INIT();
 8002fd0:	f7ff fa1a 	bl	8002408 <MEM_INIT>
    memory_reset();
 8002fd4:	f7ff fbc3 	bl	800275e <memory_reset>

    uint8_t fake_contents[64] = {0x04, 0x41, 0xBF, 0x72,
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <Start_Init+0x158>)
 8002fda:	f107 0408 	add.w	r4, r7, #8
 8002fde:	461d      	mov	r5, r3
 8002fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							 0x00, 0x01, 0x00, 0x01,
    							 0x00, 0x01, 0x00, 0x01,
    							 0x00, 0x00, 0x00, 0x00,
    							 0x00, 0x00, 0x00, 0x00,
    							 0x00, 0x00, 0x00, 0x63};
    uint8_t uid[7] = {0x04, 0x41, 0xBF, 0x72, 0x1A, 0x06, 0x6C};
 8002ff4:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <Start_Init+0x15c>)
 8002ff6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ffe:	6018      	str	r0, [r3, #0]
 8003000:	3304      	adds	r3, #4
 8003002:	8019      	strh	r1, [r3, #0]
 8003004:	3302      	adds	r3, #2
 8003006:	0c0a      	lsrs	r2, r1, #16
 8003008:	701a      	strb	r2, [r3, #0]

    Card fake_card = {
 800300a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800300e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003010:	2307      	movs	r3, #7
 8003012:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <Start_Init+0x160>)
 8003018:	657b      	str	r3, [r7, #84]	; 0x54
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <Start_Init+0x164>)
 800301c:	65bb      	str	r3, [r7, #88]	; 0x58
 800301e:	2300      	movs	r3, #0
 8003020:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	663b      	str	r3, [r7, #96]	; 0x60
 800302a:	2340      	movs	r3, #64	; 0x40
 800302c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    	.uidsize = 7,
		.name = "fake",
		.type = "MIFARE Ultralight",
		.read_protected = 0
    };
    enter_card(&fake_card, 0, "fake");
 8003030:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003034:	4a20      	ldr	r2, [pc, #128]	; (80030b8 <Start_Init+0x160>)
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fb9e 	bl	800377a <enter_card>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 800303e:	bf00      	nop
 8003040:	2102      	movs	r1, #2
 8003042:	481f      	ldr	r0, [pc, #124]	; (80030c0 <Start_Init+0x168>)
 8003044:	f001 fc7c 	bl	8004940 <HAL_GPIO_ReadPin>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f8      	bne.n	8003040 <Start_Init+0xe8>
    osDelay(10);
 800304e:	200a      	movs	r0, #10
 8003050:	f009 fdc3 	bl	800cbda <osDelay>
    dump_card_serial(&fake_card, 4);
 8003054:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003058:	2104      	movs	r1, #4
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fa38 	bl	80014d0 <dump_card_serial>
    uint8_t clear = NO_PRESS;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    xQueueSend(UserInputHandle, &clear, 0);
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <Start_Init+0x16c>)
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 800306e:	2300      	movs	r3, #0
 8003070:	2200      	movs	r2, #0
 8003072:	f00a f867 	bl	800d144 <xQueueGenericSend>
    vTaskResume(HomeHandle);
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <Start_Init+0x138>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f00a fec8 	bl	800de10 <vTaskResume>
    vTaskSuspend(NULL);
 8003080:	2000      	movs	r0, #0
 8003082:	f00a fe1d 	bl	800dcc0 <vTaskSuspend>
  {
 8003086:	e76d      	b.n	8002f64 <Start_Init+0xc>
 8003088:	200008c8 	.word	0x200008c8
 800308c:	200008cc 	.word	0x200008cc
 8003090:	200008d0 	.word	0x200008d0
 8003094:	200008d4 	.word	0x200008d4
 8003098:	200008d8 	.word	0x200008d8
 800309c:	200008dc 	.word	0x200008dc
 80030a0:	200008e0 	.word	0x200008e0
 80030a4:	200008e4 	.word	0x200008e4
 80030a8:	200008e8 	.word	0x200008e8
 80030ac:	20000400 	.word	0x20000400
 80030b0:	080118b0 	.word	0x080118b0
 80030b4:	080118f0 	.word	0x080118f0
 80030b8:	08011894 	.word	0x08011894
 80030bc:	0801189c 	.word	0x0801189c
 80030c0:	40020000 	.word	0x40020000
 80030c4:	200008f0 	.word	0x200008f0

080030c8 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 80030d0:	201c      	movs	r0, #28
 80030d2:	f00d f8e5 	bl	80102a0 <malloc>
 80030d6:	4603      	mov	r3, r0
 80030d8:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 80030da:	68bc      	ldr	r4, [r7, #8]
 80030dc:	2040      	movs	r0, #64	; 0x40
 80030de:	f00d f8df 	bl	80102a0 <malloc>
 80030e2:	4603      	mov	r3, r0
 80030e4:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 80030e6:	68bc      	ldr	r4, [r7, #8]
 80030e8:	2007      	movs	r0, #7
 80030ea:	f00d f8d9 	bl	80102a0 <malloc>
 80030ee:	4603      	mov	r3, r0
 80030f0:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 80030f6:	f7fd fdf3 	bl	8000ce0 <MFRC_ANTON>
	if (ranonce == 0){
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8003100:	2100      	movs	r1, #0
 8003102:	4812      	ldr	r0, [pc, #72]	; (800314c <StartReadCard+0x84>)
 8003104:	f7fe fd42 	bl	8001b8c <OLED_SCREEN>
		ranonce++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe f8cd 	bl	80012b0 <UL_readcard>
 8003116:	4603      	mov	r3, r0
 8003118:	2bcc      	cmp	r3, #204	; 0xcc
 800311a:	d1ec      	bne.n	80030f6 <StartReadCard+0x2e>
			BUZZ();
 800311c:	f7ff fb78 	bl	8002810 <BUZZ>
			MFRC_ANTOFF();
 8003120:	f7fd fe18 	bl	8000d54 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <StartReadCard+0x88>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	f107 0108 	add.w	r1, r7, #8
 800312c:	2300      	movs	r3, #0
 800312e:	2200      	movs	r2, #0
 8003130:	f00a f808 	bl	800d144 <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <StartReadCard+0x8c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f00a fe69 	bl	800de10 <vTaskResume>
			ranonce = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 8003142:	2000      	movs	r0, #0
 8003144:	f00a fdbc 	bl	800dcc0 <vTaskSuspend>
	MFRC_ANTON();
 8003148:	e7d5      	b.n	80030f6 <StartReadCard+0x2e>
 800314a:	bf00      	nop
 800314c:	08012048 	.word	0x08012048
 8003150:	200008ec 	.word	0x200008ec
 8003154:	200008d4 	.word	0x200008d4

08003158 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8003172:	2100      	movs	r1, #0
 8003174:	481e      	ldr	r0, [pc, #120]	; (80031f0 <StartWriteCard+0x98>)
 8003176:	f7fe fd09 	bl	8001b8c <OLED_SCREEN>
	  	ranonce++;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3301      	adds	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003180:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <StartWriteCard+0x9c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f107 010f 	add.w	r1, r7, #15
 8003188:	2200      	movs	r2, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f00a f974 	bl	800d478 <xQueueReceive>
 8003190:	4603      	mov	r3, r0
 8003192:	2b01      	cmp	r3, #1
 8003194:	d1ea      	bne.n	800316c <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d11c      	bne.n	80031d6 <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fd87 	bl	8003cb4 <entry_present>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1df      	bne.n	800316c <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fb9a 	bl	80038ea <read_card_entry>
 80031b6:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fd96 	bl	8003cee <get_file_name>
 80031c2:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	2102      	movs	r1, #2
 80031c8:	4809      	ldr	r0, [pc, #36]	; (80031f0 <StartWriteCard+0x98>)
 80031ca:	f7fe fd18 	bl	8001bfe <OLED_SCRNREF>
				  free(file_name);
 80031ce:	6938      	ldr	r0, [r7, #16]
 80031d0:	f00d f86e 	bl	80102b0 <free>
 80031d4:	e7ca      	b.n	800316c <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d1c7      	bne.n	800316c <StartWriteCard+0x14>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0c4      	beq.n	800316c <StartWriteCard+0x14>
			  	ranonce= 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
			  	write_card(towrite);
 80031e6:	69b8      	ldr	r0, [r7, #24]
 80031e8:	f7ff fb24 	bl	8002834 <write_card>
	  if (ranonce == 0){
 80031ec:	e7be      	b.n	800316c <StartWriteCard+0x14>
 80031ee:	bf00      	nop
 80031f0:	08012070 	.word	0x08012070
 80031f4:	200008f0 	.word	0x200008f0

080031f8 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 800320e:	2100      	movs	r1, #0
 8003210:	482c      	ldr	r0, [pc, #176]	; (80032c4 <StartHome+0xcc>)
 8003212:	f7fe fcbb 	bl	8001b8c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	2201      	movs	r2, #1
 800321a:	4619      	mov	r1, r3
 800321c:	4829      	ldr	r0, [pc, #164]	; (80032c4 <StartHome+0xcc>)
 800321e:	f7fe fd1f 	bl	8001c60 <OLED_SELECT>
		  ranonce++;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3301      	adds	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <StartHome+0xd0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f107 010a 	add.w	r1, r7, #10
 8003230:	2200      	movs	r2, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f00a f920 	bl	800d478 <xQueueReceive>
 8003238:	4603      	mov	r3, r0
 800323a:	2b01      	cmp	r3, #1
 800323c:	d1e4      	bne.n	8003208 <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 800323e:	7abb      	ldrb	r3, [r7, #10]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d107      	bne.n	8003254 <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8003244:	f107 030b 	add.w	r3, r7, #11
 8003248:	2201      	movs	r2, #1
 800324a:	4619      	mov	r1, r3
 800324c:	481d      	ldr	r0, [pc, #116]	; (80032c4 <StartHome+0xcc>)
 800324e:	f7fe feff 	bl	8002050 <oled_move_selection>
 8003252:	e7d9      	b.n	8003208 <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 8003254:	7abb      	ldrb	r3, [r7, #10]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d1d6      	bne.n	8003208 <StartHome+0x10>
			  switch(select_index) {
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d82b      	bhi.n	80032b8 <StartHome+0xc0>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <StartHome+0x70>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	0800327d 	.word	0x0800327d
 800326c:	08003289 	.word	0x08003289
 8003270:	08003295 	.word	0x08003295
 8003274:	080032a1 	.word	0x080032a1
 8003278:	080032ad 	.word	0x080032ad
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <StartHome+0xd4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f00a fdc5 	bl	800de10 <vTaskResume>
			  		  break;
 8003286:	e017      	b.n	80032b8 <StartHome+0xc0>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <StartHome+0xd8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f00a fdbf 	bl	800de10 <vTaskResume>
			  		  break;
 8003292:	e011      	b.n	80032b8 <StartHome+0xc0>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <StartHome+0xdc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f00a fdb9 	bl	800de10 <vTaskResume>
			  		  break;
 800329e:	e00b      	b.n	80032b8 <StartHome+0xc0>
			  	  case 3:
			  		  vTaskResume(CloneHandle);
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <StartHome+0xe0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f00a fdb3 	bl	800de10 <vTaskResume>
			  		  break;
 80032aa:	e005      	b.n	80032b8 <StartHome+0xc0>
			  	  case 4:
			  		  vTaskResume(DisplaySettingsHandle);
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <StartHome+0xe4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f00a fdad 	bl	800de10 <vTaskResume>
			  		  break;
 80032b6:	bf00      	nop
			  }
			  ranonce = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 80032bc:	2000      	movs	r0, #0
 80032be:	f00a fcff 	bl	800dcc0 <vTaskSuspend>
	  if (ranonce == 0) {
 80032c2:	e7a1      	b.n	8003208 <StartHome+0x10>
 80032c4:	08012034 	.word	0x08012034
 80032c8:	200008f0 	.word	0x200008f0
 80032cc:	200008c8 	.word	0x200008c8
 80032d0:	200008cc 	.word	0x200008cc
 80032d4:	200008d8 	.word	0x200008d8
 80032d8:	200008e0 	.word	0x200008e0
 80032dc:	200008e8 	.word	0x200008e8

080032e0 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* read_card;
	char* card_name = NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d130      	bne.n	800335c <CardFoundStart+0x7c>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 80032fa:	bf00      	nop
 80032fc:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <CardFoundStart+0x110>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f107 0110 	add.w	r1, r7, #16
 8003304:	2200      	movs	r2, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f00a f8b6 	bl	800d478 <xQueueReceive>
 800330c:	4603      	mov	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d1f4      	bne.n	80032fc <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	791b      	ldrb	r3, [r3, #4]
 800331a:	4619      	mov	r1, r3
 800331c:	4610      	mov	r0, r2
 800331e:	f7fe f837 	bl	8001390 <uid_tostring>
 8003322:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8003324:	2100      	movs	r1, #0
 8003326:	4833      	ldr	r0, [pc, #204]	; (80033f4 <CardFoundStart+0x114>)
 8003328:	f7fe fc30 	bl	8001b8c <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	2101      	movs	r1, #1
 8003330:	4830      	ldr	r0, [pc, #192]	; (80033f4 <CardFoundStart+0x114>)
 8003332:	f7fe fc64 	bl	8001bfe <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	461a      	mov	r2, r3
 800333c:	2102      	movs	r1, #2
 800333e:	482d      	ldr	r0, [pc, #180]	; (80033f4 <CardFoundStart+0x114>)
 8003340:	f7fe fc5d 	bl	8001bfe <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	2200      	movs	r2, #0
 8003348:	4619      	mov	r1, r3
 800334a:	482a      	ldr	r0, [pc, #168]	; (80033f4 <CardFoundStart+0x114>)
 800334c:	f7fe fc88 	bl	8001c60 <OLED_SELECT>
		ranonce++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 8003356:	69b8      	ldr	r0, [r7, #24]
 8003358:	f00c ffaa 	bl	80102b0 <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 800335c:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <CardFoundStart+0x118>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f107 0116 	add.w	r1, r7, #22
 8003364:	2200      	movs	r2, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f00a f886 	bl	800d478 <xQueueReceive>
 800336c:	4603      	mov	r3, r0
 800336e:	2b01      	cmp	r3, #1
 8003370:	d1c0      	bne.n	80032f4 <CardFoundStart+0x14>
 		if (button_state == SHORT_PRESS) {
 8003372:	7dbb      	ldrb	r3, [r7, #22]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d107      	bne.n	8003388 <CardFoundStart+0xa8>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 8003378:	f107 0317 	add.w	r3, r7, #23
 800337c:	2200      	movs	r2, #0
 800337e:	4619      	mov	r1, r3
 8003380:	481c      	ldr	r0, [pc, #112]	; (80033f4 <CardFoundStart+0x114>)
 8003382:	f7fe fe65 	bl	8002050 <oled_move_selection>
 8003386:	e7b5      	b.n	80032f4 <CardFoundStart+0x14>
 		} else if (button_state == LONG_PRESS) {
 8003388:	7dbb      	ldrb	r3, [r7, #22]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d1b2      	bne.n	80032f4 <CardFoundStart+0x14>
 			if (select_index == 0) {
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d121      	bne.n	80033d8 <CardFoundStart+0xf8>

 				vTaskResume(KeyboardHandle);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <CardFoundStart+0x11c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f00a fd39 	bl	800de10 <vTaskResume>

 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 800339e:	e002      	b.n	80033a6 <CardFoundStart+0xc6>
 					osDelay(1); //wait until keyboard is finished
 80033a0:	2001      	movs	r0, #1
 80033a2:	f009 fc1a 	bl	800cbda <osDelay>
 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <CardFoundStart+0x120>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f107 010c 	add.w	r1, r7, #12
 80033ae:	2200      	movs	r2, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f00a f861 	bl	800d478 <xQueueReceive>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d1f1      	bne.n	80033a0 <CardFoundStart+0xc0>
 				}
 				enter_card(read_card, mem_find_free_block(), card_name);
 80033bc:	693c      	ldr	r4, [r7, #16]
 80033be:	f7ff f9a7 	bl	8002710 <mem_find_free_block>
 80033c2:	4603      	mov	r3, r0
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4620      	mov	r0, r4
 80033cc:	f000 f9d5 	bl	800377a <enter_card>
 				free(card_name);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f00c ff6c 	bl	80102b0 <free>
 			}
 			vTaskResume(HomeHandle);
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <CardFoundStart+0x124>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f00a fd17 	bl	800de10 <vTaskResume>
 			ranonce = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 			vTaskSuspend(NULL);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f00a fc6a 	bl	800dcc0 <vTaskSuspend>
	if (ranonce == 0) {
 80033ec:	e782      	b.n	80032f4 <CardFoundStart+0x14>
 80033ee:	bf00      	nop
 80033f0:	200008ec 	.word	0x200008ec
 80033f4:	0801205c 	.word	0x0801205c
 80033f8:	200008f0 	.word	0x200008f0
 80033fc:	200008e4 	.word	0x200008e4
 8003400:	200008f8 	.word	0x200008f8
 8003404:	200008d0 	.word	0x200008d0

08003408 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d110      	bne.n	8003440 <StartShowFiles+0x38>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 800341e:	2100      	movs	r1, #0
 8003420:	482a      	ldr	r0, [pc, #168]	; (80034cc <StartShowFiles+0xc4>)
 8003422:	f7fe fbb3 	bl	8001b8c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	2201      	movs	r2, #1
 800342a:	4619      	mov	r1, r3
 800342c:	4827      	ldr	r0, [pc, #156]	; (80034cc <StartShowFiles+0xc4>)
 800342e:	f7fe fc17 	bl	8001c60 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 8003432:	2100      	movs	r1, #0
 8003434:	4825      	ldr	r0, [pc, #148]	; (80034cc <StartShowFiles+0xc4>)
 8003436:	f7fe fcf3 	bl	8001e20 <OLED_display_files>
		  ranonce++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <StartShowFiles+0xc8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f107 010a 	add.w	r1, r7, #10
 8003448:	2200      	movs	r2, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f00a f814 	bl	800d478 <xQueueReceive>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d1e0      	bne.n	8003418 <StartShowFiles+0x10>
		  if (button_state == SHORT_PRESS) {
 8003456:	7abb      	ldrb	r3, [r7, #10]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d107      	bne.n	800346c <StartShowFiles+0x64>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 800345c:	f107 030b 	add.w	r3, r7, #11
 8003460:	2201      	movs	r2, #1
 8003462:	4619      	mov	r1, r3
 8003464:	4819      	ldr	r0, [pc, #100]	; (80034cc <StartShowFiles+0xc4>)
 8003466:	f7fe fdf3 	bl	8002050 <oled_move_selection>
 800346a:	e7d5      	b.n	8003418 <StartShowFiles+0x10>

		  } else if (button_state == LONG_PRESS) {
 800346c:	7abb      	ldrb	r3, [r7, #10]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d1d2      	bne.n	8003418 <StartShowFiles+0x10>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d10a      	bne.n	800348e <StartShowFiles+0x86>
				  vTaskResume(HomeHandle);
 8003478:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <StartShowFiles+0xcc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f00a fcc7 	bl	800de10 <vTaskResume>
				  ranonce = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 8003486:	2000      	movs	r0, #0
 8003488:	f00a fc1a 	bl	800dcc0 <vTaskSuspend>
 800348c:	e7c4      	b.n	8003418 <StartShowFiles+0x10>

			  } else if ((entry_present(select_index) == RFS_OK)) {
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	b29b      	uxth	r3, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fc0e 	bl	8003cb4 <entry_present>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1bc      	bne.n	8003418 <StartShowFiles+0x10>
				  uint16_t entry = select_index;
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	813b      	strh	r3, [r7, #8]
				  xQueueSend(FileEntryHandle, &entry, 0);
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <StartShowFiles+0xd0>)
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	f107 0108 	add.w	r1, r7, #8
 80034ac:	2300      	movs	r3, #0
 80034ae:	2200      	movs	r2, #0
 80034b0:	f009 fe48 	bl	800d144 <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <StartShowFiles+0xd4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f00a fca9 	bl	800de10 <vTaskResume>
				  ranonce = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f00a fbfc 	bl	800dcc0 <vTaskSuspend>
	  if (ranonce == 0) {
 80034c8:	e7a6      	b.n	8003418 <StartShowFiles+0x10>
 80034ca:	bf00      	nop
 80034cc:	08012084 	.word	0x08012084
 80034d0:	200008f0 	.word	0x200008f0
 80034d4:	200008d0 	.word	0x200008d0
 80034d8:	200008f4 	.word	0x200008f4
 80034dc:	200008dc 	.word	0x200008dc

080034e0 <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d112      	bne.n	800351c <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 80034f6:	bf00      	nop
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <StartShowFileData+0x94>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f107 0108 	add.w	r1, r7, #8
 8003500:	2200      	movs	r2, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f009 ffb8 	bl	800d478 <xQueueReceive>
 8003508:	4603      	mov	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d1f4      	bne.n	80034f8 <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 800350e:	893b      	ldrh	r3, [r7, #8]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fd5d 	bl	8001fd0 <oled_show_file>
    	ranonce++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3301      	adds	r3, #1
 800351a:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <StartShowFileData+0x98>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f107 010a 	add.w	r1, r7, #10
 8003524:	2200      	movs	r2, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f009 ffa6 	bl	800d478 <xQueueReceive>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d1de      	bne.n	80034f0 <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 8003532:	7abb      	ldrb	r3, [r7, #10]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d107      	bne.n	8003548 <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 8003538:	f107 030b 	add.w	r3, r7, #11
 800353c:	2200      	movs	r2, #0
 800353e:	4619      	mov	r1, r3
 8003540:	480e      	ldr	r0, [pc, #56]	; (800357c <StartShowFileData+0x9c>)
 8003542:	f7fe fd85 	bl	8002050 <oled_move_selection>
 8003546:	e7d3      	b.n	80034f0 <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 8003548:	7abb      	ldrb	r3, [r7, #10]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d1d0      	bne.n	80034f0 <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fbf6 	bl	8003d48 <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <StartShowFileData+0xa0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f00a fc55 	bl	800de10 <vTaskResume>
    		ranonce = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 800356a:	2000      	movs	r0, #0
 800356c:	f00a fba8 	bl	800dcc0 <vTaskSuspend>
    if (ranonce == 0) {
 8003570:	e7be      	b.n	80034f0 <StartShowFileData+0x10>
 8003572:	bf00      	nop
 8003574:	200008f4 	.word	0x200008f4
 8003578:	200008f0 	.word	0x200008f0
 800357c:	08012098 	.word	0x08012098
 8003580:	200008d8 	.word	0x200008d8

08003584 <StartClone>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClone */
void StartClone(void *argument)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClone */
	int ranonce = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8003590:	201c      	movs	r0, #28
 8003592:	f00c fe85 	bl	80102a0 <malloc>
 8003596:	4603      	mov	r3, r0
 8003598:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 800359a:	2040      	movs	r0, #64	; 0x40
 800359c:	f00c fe80 	bl	80102a0 <malloc>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	615a      	str	r2, [r3, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 80035a8:	2007      	movs	r0, #7
 80035aa:	f00c fe79 	bl	80102a0 <malloc>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	MFRC_ANTON();
 80035b6:	f7fd fb93 	bl	8000ce0 <MFRC_ANTON>
    if (ranonce == 0) {
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <StartClone+0x4a>
    	OLED_SCREEN(&SCRN_Clone, NORMAL);
 80035c0:	2100      	movs	r1, #0
 80035c2:	4817      	ldr	r0, [pc, #92]	; (8003620 <StartClone+0x9c>)
 80035c4:	f7fe fae2 	bl	8001b8c <OLED_SCREEN>
    	ranonce++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
    }

    if (UL_readcard(read_card) == PCD_OK) {
 80035ce:	68b8      	ldr	r0, [r7, #8]
 80035d0:	f7fd fe6e 	bl	80012b0 <UL_readcard>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2bcc      	cmp	r3, #204	; 0xcc
 80035d8:	d1ed      	bne.n	80035b6 <StartClone+0x32>
    	MFRC_HALTA(); //De-select card
 80035da:	f7fd fc97 	bl	8000f0c <MFRC_HALTA>
    	BUZZ();
 80035de:	f7ff f917 	bl	8002810 <BUZZ>
    	OLED_Clear();
 80035e2:	f7fe f809 	bl	80015f8 <OLED_Clear>
    	OLED_PrintCent(2, "PLACE CARD YOU WISH", NORMAL);
 80035e6:	2200      	movs	r2, #0
 80035e8:	490e      	ldr	r1, [pc, #56]	; (8003624 <StartClone+0xa0>)
 80035ea:	2002      	movs	r0, #2
 80035ec:	f7fe f9df 	bl	80019ae <OLED_PrintCent>
    	OLED_PrintCent(4, "TO COPY TO", NORMAL);
 80035f0:	2200      	movs	r2, #0
 80035f2:	490d      	ldr	r1, [pc, #52]	; (8003628 <StartClone+0xa4>)
 80035f4:	2004      	movs	r0, #4
 80035f6:	f7fe f9da 	bl	80019ae <OLED_PrintCent>
    	while(PICC_CHECK() == PCD_OK); //Hang until read card is removed
 80035fa:	bf00      	nop
 80035fc:	f7fd fd94 	bl	8001128 <PICC_CHECK>
 8003600:	4603      	mov	r3, r0
 8003602:	2bcc      	cmp	r3, #204	; 0xcc
 8003604:	d0fa      	beq.n	80035fc <StartClone+0x78>
    	while(PICC_CHECK() != PCD_OK); //Hang until new card is placed
 8003606:	bf00      	nop
 8003608:	f7fd fd8e 	bl	8001128 <PICC_CHECK>
 800360c:	4603      	mov	r3, r0
 800360e:	2bcc      	cmp	r3, #204	; 0xcc
 8003610:	d1fa      	bne.n	8003608 <StartClone+0x84>
    	ranonce = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
    	write_card(read_card);
 8003616:	68b8      	ldr	r0, [r7, #8]
 8003618:	f7ff f90c 	bl	8002834 <write_card>
	MFRC_ANTON();
 800361c:	e7cb      	b.n	80035b6 <StartClone+0x32>
 800361e:	bf00      	nop
 8003620:	080120ac 	.word	0x080120ac
 8003624:	080118f8 	.word	0x080118f8
 8003628:	0801190c 	.word	0x0801190c

0800362c <StartKeyboard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyboard */
void StartKeyboard(void *argument)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyboard */
	uint8_t select_index = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	74fb      	strb	r3, [r7, #19]
	int ranonce = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
	Button_StateTypeDef button_state;
	char* input = NULL;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <StartKeyboard+0x36>
    	OLED_Clear();
 8003646:	f7fd ffd7 	bl	80015f8 <OLED_Clear>
    	OLED_SCREEN(&SCRN_Keyboard, NORMAL);
 800364a:	2100      	movs	r1, #0
 800364c:	4824      	ldr	r0, [pc, #144]	; (80036e0 <StartKeyboard+0xb4>)
 800364e:	f7fe fa9d 	bl	8001b8c <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Keyboard, select_index);
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	4619      	mov	r1, r3
 8003656:	4822      	ldr	r0, [pc, #136]	; (80036e0 <StartKeyboard+0xb4>)
 8003658:	f7fe fb78 	bl	8001d4c <OLED_select_inv>
    	ranonce++;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <StartKeyboard+0xb8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f107 0112 	add.w	r1, r7, #18
 800366a:	2200      	movs	r2, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f009 ff03 	bl	800d478 <xQueueReceive>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d1e3      	bne.n	8003640 <StartKeyboard+0x14>
    	if (button_state == SHORT_PRESS) {
 8003678:	7cbb      	ldrb	r3, [r7, #18]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d106      	bne.n	800368c <StartKeyboard+0x60>
    		oled_move_selection_inv(&SCRN_Keyboard, &select_index);
 800367e:	f107 0313 	add.w	r3, r7, #19
 8003682:	4619      	mov	r1, r3
 8003684:	4816      	ldr	r0, [pc, #88]	; (80036e0 <StartKeyboard+0xb4>)
 8003686:	f7fe fd09 	bl	800209c <oled_move_selection_inv>
 800368a:	e7d9      	b.n	8003640 <StartKeyboard+0x14>
    	} else if (button_state == LONG_PRESS) {
 800368c:	7cbb      	ldrb	r3, [r7, #18]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d1d6      	bne.n	8003640 <StartKeyboard+0x14>
    		if ((select_index <= 25) && (select_index >= 0)) {
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b19      	cmp	r3, #25
 8003696:	d807      	bhi.n	80036a8 <StartKeyboard+0x7c>
    			oled_keyboard_insertChar(select_index, &input);
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	f107 020c 	add.w	r2, r7, #12
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fd1f 	bl	80020e4 <oled_keyboard_insertChar>
 80036a6:	e7cb      	b.n	8003640 <StartKeyboard+0x14>
    		} else if (select_index == 26) {
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	2b1a      	cmp	r3, #26
 80036ac:	d105      	bne.n	80036ba <StartKeyboard+0x8e>
    			oled_keyboard_removeChar(&input);
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fd54 	bl	8002160 <oled_keyboard_removeChar>
 80036b8:	e7c2      	b.n	8003640 <StartKeyboard+0x14>
    		} else if (select_index == 27) {
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	2b1b      	cmp	r3, #27
 80036be:	d1bf      	bne.n	8003640 <StartKeyboard+0x14>
    			xQueueSend(KeyboardOutHandle, &input, 0); //See the name user has inputted to queue for other tasks to use
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <StartKeyboard+0xbc>)
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	f107 010c 	add.w	r1, r7, #12
 80036c8:	2300      	movs	r3, #0
 80036ca:	2200      	movs	r2, #0
 80036cc:	f009 fd3a 	bl	800d144 <xQueueGenericSend>
    			ranonce = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
    			input = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
    			vTaskSuspend(NULL); //exit task
 80036d8:	2000      	movs	r0, #0
 80036da:	f00a faf1 	bl	800dcc0 <vTaskSuspend>
    if (ranonce == 0) {
 80036de:	e7af      	b.n	8003640 <StartKeyboard+0x14>
 80036e0:	080120c0 	.word	0x080120c0
 80036e4:	200008f0 	.word	0x200008f0
 80036e8:	200008f8 	.word	0x200008f8

080036ec <StartDisplaySettings>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplaySettings */
void StartDisplaySettings(void *argument)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplaySettings */
	uint8_t select_index = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <StartDisplaySettings+0x2e>
    	OLED_SCREEN(&SCRN_Display, NORMAL);
 8003702:	2100      	movs	r1, #0
 8003704:	480f      	ldr	r0, [pc, #60]	; (8003744 <StartDisplaySettings+0x58>)
 8003706:	f7fe fa41 	bl	8001b8c <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Display, select_index);
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	4619      	mov	r1, r3
 800370e:	480d      	ldr	r0, [pc, #52]	; (8003744 <StartDisplaySettings+0x58>)
 8003710:	f7fe fb1c 	bl	8001d4c <OLED_select_inv>
    	ranonce++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3301      	adds	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <StartDisplaySettings+0x5c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f107 010a 	add.w	r1, r7, #10
 8003722:	2200      	movs	r2, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f009 fea7 	bl	800d478 <xQueueReceive>
 800372a:	4603      	mov	r3, r0
 800372c:	2b01      	cmp	r3, #1
 800372e:	d1e5      	bne.n	80036fc <StartDisplaySettings+0x10>
    	if (button_state == SHORT_PRESS) {
 8003730:	7abb      	ldrb	r3, [r7, #10]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d1e2      	bne.n	80036fc <StartDisplaySettings+0x10>
    		oled_move_selection_inv(&SCRN_Display, &select_index);
 8003736:	f107 030b 	add.w	r3, r7, #11
 800373a:	4619      	mov	r1, r3
 800373c:	4801      	ldr	r0, [pc, #4]	; (8003744 <StartDisplaySettings+0x58>)
 800373e:	f7fe fcad 	bl	800209c <oled_move_selection_inv>
    if (ranonce == 0) {
 8003742:	e7db      	b.n	80036fc <StartDisplaySettings+0x10>
 8003744:	080120d4 	.word	0x080120d4
 8003748:	200008f0 	.word	0x200008f0

0800374c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800375e:	f000 fe45 	bl	80043ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40000c00 	.word	0x40000c00

08003770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003774:	b672      	cpsid	i
}
 8003776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003778:	e7fe      	b.n	8003778 <Error_Handler+0x8>

0800377a <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry, char* name) {
 800377a:	b5b0      	push	{r4, r5, r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	460b      	mov	r3, r1
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	817b      	strh	r3, [r7, #10]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 8003788:	897b      	ldrh	r3, [r7, #10]
 800378a:	019b      	lsls	r3, r3, #6
 800378c:	82fb      	strh	r3, [r7, #22]
	block_erase(entry); //Erase entire block ready for new data
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe fdfd 	bl	8002390 <block_erase>
	enter_metadata(card, entry);
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	4619      	mov	r1, r3
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f842 	bl	8003824 <enter_metadata>
	card->name = name;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	609a      	str	r2, [r3, #8]

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 80037a6:	8afb      	ldrh	r3, [r7, #22]
 80037a8:	3301      	adds	r3, #1
 80037aa:	b29c      	uxth	r4, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689d      	ldr	r5, [r3, #8]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fd13 	bl	80001e0 <strlen>
 80037ba:	4603      	mov	r3, r0
 80037bc:	462a      	mov	r2, r5
 80037be:	2100      	movs	r1, #0
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7fe fe3d 	bl	8002440 <MEM_WRITE>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <enter_card+0x56>
		return RFS_WRITE_ERROR;
 80037cc:	2304      	movs	r3, #4
 80037ce:	e025      	b.n	800381c <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80037d0:	8afb      	ldrh	r3, [r7, #22]
 80037d2:	3301      	adds	r3, #1
 80037d4:	b29c      	uxth	r4, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fc fd00 	bl	80001e0 <strlen>
 80037e0:	4603      	mov	r3, r0
 80037e2:	b299      	uxth	r1, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	791b      	ldrb	r3, [r3, #4]
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7fe fe27 	bl	8002440 <MEM_WRITE>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <enter_card+0x82>
		return RFS_WRITE_ERROR;
 80037f8:	2304      	movs	r3, #4
 80037fa:	e00f      	b.n	800381c <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 80037fc:	8afb      	ldrh	r3, [r7, #22]
 80037fe:	3302      	adds	r3, #2
 8003800:	b298      	uxth	r0, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8b1b      	ldrh	r3, [r3, #24]
 800380a:	2100      	movs	r1, #0
 800380c:	f7fe fe18 	bl	8002440 <MEM_WRITE>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <enter_card+0xa0>
		return RFS_WRITE_ERROR;
 8003816:	2304      	movs	r3, #4
 8003818:	e000      	b.n	800381c <enter_card+0xa2>
	}

	return RFS_OK;
 800381a:	2300      	movs	r3, #0

}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bdb0      	pop	{r4, r5, r7, pc}

08003824 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8b1b      	ldrh	r3, [r3, #24]
 8003834:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7c1b      	ldrb	r3, [r3, #16]
 800383a:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	791b      	ldrb	r3, [r3, #4]
 8003840:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fcca 	bl	80001e0 <strlen>
 800384c:	4603      	mov	r3, r0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3303      	adds	r3, #3
 8003852:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8003854:	7b3b      	ldrb	r3, [r7, #12]
 8003856:	4618      	mov	r0, r3
 8003858:	f00c fd22 	bl	80102a0 <malloc>
 800385c:	4603      	mov	r3, r0
 800385e:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68dc      	ldr	r4, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4618      	mov	r0, r3
 800386a:	f7fc fcb9 	bl	80001e0 <strlen>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	4621      	mov	r1, r4
 8003874:	68b8      	ldr	r0, [r7, #8]
 8003876:	f00c fd23 	bl	80102c0 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fcae 	bl	80001e0 <strlen>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4413      	add	r3, r2
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fc fca4 	bl	80001e0 <strlen>
 8003898:	4603      	mov	r3, r0
 800389a:	3301      	adds	r3, #1
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	4413      	add	r3, r2
 80038a0:	7b7a      	ldrb	r2, [r7, #13]
 80038a2:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fc99 	bl	80001e0 <strlen>
 80038ae:	4603      	mov	r3, r0
 80038b0:	3302      	adds	r3, #2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4413      	add	r3, r2
 80038b6:	7bba      	ldrb	r2, [r7, #14]
 80038b8:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	b298      	uxth	r0, r3
 80038c0:	7b3b      	ldrb	r3, [r7, #12]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	2100      	movs	r1, #0
 80038c6:	f7fe fdbb 	bl	8002440 <MEM_WRITE>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <enter_metadata+0xb6>
		free(metadata);
 80038d0:	68b8      	ldr	r0, [r7, #8]
 80038d2:	f00c fced 	bl	80102b0 <free>
		return RFS_WRITE_ERROR;
 80038d6:	2304      	movs	r3, #4
 80038d8:	e003      	b.n	80038e2 <enter_metadata+0xbe>
	}
	free(metadata);
 80038da:	68b8      	ldr	r0, [r7, #8]
 80038dc:	f00c fce8 	bl	80102b0 <free>
	return RFS_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd90      	pop	{r4, r7, pc}

080038ea <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 80038f4:	201c      	movs	r0, #28
 80038f6:	f00c fcd3 	bl	80102a0 <malloc>
 80038fa:	4603      	mov	r3, r0
 80038fc:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	4619      	mov	r1, r3
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f81e 	bl	8003944 <read_metadata>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <read_card_entry+0x28>
		return NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	e014      	b.n	800393c <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	4619      	mov	r1, r3
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f881 	bl	8003a1e <read_nameuid>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <read_card_entry+0x3c>
		return NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	e00a      	b.n	800393c <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	4619      	mov	r1, r3
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f8e2 	bl	8003af4 <read_cardcontents>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <read_card_entry+0x50>
		return NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <read_card_entry+0x52>
	}

	return result;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f8f5 	bl	8003b44 <get_datasize>
 800395a:	4603      	mov	r3, r0
 800395c:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	4618      	mov	r0, r3
 8003962:	f00c fc9d 	bl	80102a0 <malloc>
 8003966:	4603      	mov	r3, r0
 8003968:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 800396a:	8afb      	ldrh	r3, [r7, #22]
 800396c:	3b02      	subs	r3, #2
 800396e:	4618      	mov	r0, r3
 8003970:	f00c fc96 	bl	80102a0 <malloc>
 8003974:	4603      	mov	r3, r0
 8003976:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	019b      	lsls	r3, r3, #6
 800397c:	b298      	uxth	r0, r3
 800397e:	8afb      	ldrh	r3, [r7, #22]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	2100      	movs	r1, #0
 8003984:	f7fe fdf2 	bl	800256c <MEM_READPAGE>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <read_metadata+0x54>
		free(metadata);
 800398e:	6938      	ldr	r0, [r7, #16]
 8003990:	f00c fc8e 	bl	80102b0 <free>
		return RFS_READ_ERROR;
 8003994:	2305      	movs	r3, #5
 8003996:	e03e      	b.n	8003a16 <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2bff      	cmp	r3, #255	; 0xff
 800399e:	d104      	bne.n	80039aa <read_metadata+0x66>
		free(metadata);
 80039a0:	6938      	ldr	r0, [r7, #16]
 80039a2:	f00c fc85 	bl	80102b0 <free>
		return RFS_NO_CARD;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e035      	b.n	8003a16 <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 80039aa:	8afb      	ldrh	r3, [r7, #22]
 80039ac:	3b03      	subs	r3, #3
 80039ae:	461a      	mov	r2, r3
 80039b0:	6939      	ldr	r1, [r7, #16]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f00c fc84 	bl	80102c0 <memcpy>
	type[metadata_size - 3] = '\0';
 80039b8:	8afb      	ldrh	r3, [r7, #22]
 80039ba:	3b03      	subs	r3, #3
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	3b03      	subs	r3, #3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80039da:	8afb      	ldrh	r3, [r7, #22]
 80039dc:	3b02      	subs	r3, #2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	781a      	ldrb	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 80039e8:	8afb      	ldrh	r3, [r7, #22]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d104      	bne.n	8003a00 <read_metadata+0xbc>
		free(metadata);
 80039f6:	6938      	ldr	r0, [r7, #16]
 80039f8:	f00c fc5a 	bl	80102b0 <free>
		return RFS_CARD_PROTECTED;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e00a      	b.n	8003a16 <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 8003a00:	8afb      	ldrh	r3, [r7, #22]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4413      	add	r3, r2
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8003a0e:	6938      	ldr	r0, [r7, #16]
 8003a10:	f00c fc4e 	bl	80102b0 <free>

	return RFS_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f888 	bl	8003b44 <get_datasize>
 8003a34:	4603      	mov	r3, r0
 8003a36:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 8003a38:	8afb      	ldrh	r3, [r7, #22]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f00c fc30 	bl	80102a0 <malloc>
 8003a40:	4603      	mov	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8003a44:	8afb      	ldrh	r3, [r7, #22]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	7912      	ldrb	r2, [r2, #4]
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00c fc26 	bl	80102a0 <malloc>
 8003a54:	4603      	mov	r3, r0
 8003a56:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	791b      	ldrb	r3, [r3, #4]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f00c fc1f 	bl	80102a0 <malloc>
 8003a62:	4603      	mov	r3, r0
 8003a64:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	b298      	uxth	r0, r3
 8003a70:	8afb      	ldrh	r3, [r7, #22]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	2100      	movs	r1, #0
 8003a76:	f7fe fd79 	bl	800256c <MEM_READPAGE>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <read_nameuid+0x6c>
		free(raw_data);
 8003a80:	6938      	ldr	r0, [r7, #16]
 8003a82:	f00c fc15 	bl	80102b0 <free>
		return RFS_READ_ERROR;
 8003a86:	2305      	movs	r3, #5
 8003a88:	e030      	b.n	8003aec <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2bff      	cmp	r3, #255	; 0xff
 8003a90:	d104      	bne.n	8003a9c <read_nameuid+0x7e>
		free(raw_data);
 8003a92:	6938      	ldr	r0, [r7, #16]
 8003a94:	f00c fc0c 	bl	80102b0 <free>
		return RFS_NO_CARD;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e027      	b.n	8003aec <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8003a9c:	8afb      	ldrh	r3, [r7, #22]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	7912      	ldrb	r2, [r2, #4]
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6939      	ldr	r1, [r7, #16]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f00c fc09 	bl	80102c0 <memcpy>
	name[datasize - result->uidsize] = '\0';
 8003aae:	8afb      	ldrh	r3, [r7, #22]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	7912      	ldrb	r2, [r2, #4]
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
	result->name = name;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7fc fb8a 	bl	80001e0 <strlen>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1899      	adds	r1, r3, r2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68b8      	ldr	r0, [r7, #8]
 8003ada:	f00c fbf1 	bl	80102c0 <memcpy>
	result->uid = uid;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	601a      	str	r2, [r3, #0]
	free(raw_data);
 8003ae4:	6938      	ldr	r0, [r7, #16]
 8003ae6:	f00c fbe3 	bl	80102b0 <free>

	return RFS_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8b1b      	ldrh	r3, [r3, #24]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f00c fbcb 	bl	80102a0 <malloc>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3302      	adds	r3, #2
 8003b16:	b298      	uxth	r0, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8b1b      	ldrh	r3, [r3, #24]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	f7fe fd24 	bl	800256c <MEM_READPAGE>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <read_cardcontents+0x40>
		free(contents);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f00c fbc0 	bl	80102b0 <free>
		return RFS_READ_ERROR;
 8003b30:	2305      	movs	r3, #5
 8003b32:	e003      	b.n	8003b3c <read_cardcontents+0x48>
	}

	result->contents = contents;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	80fb      	strh	r3, [r7, #6]
 8003b50:	4613      	mov	r3, r2
 8003b52:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8003b5c:	e014      	b.n	8003b88 <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	019b      	lsls	r3, r3, #6
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	797b      	ldrb	r3, [r7, #5]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	b298      	uxth	r0, r3
 8003b6c:	f107 020d 	add.w	r2, r7, #13
 8003b70:	89f9      	ldrh	r1, [r7, #14]
 8003b72:	2301      	movs	r3, #1
 8003b74:	f7fe fcfa 	bl	800256c <MEM_READPAGE>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e008      	b.n	8003b94 <get_datasize+0x50>
		}
		size++;
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	3301      	adds	r3, #1
 8003b86:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 8003b88:	7b7b      	ldrb	r3, [r7, #13]
 8003b8a:	2bff      	cmp	r3, #255	; 0xff
 8003b8c:	d1e7      	bne.n	8003b5e <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 8003b8e:	89fb      	ldrh	r3, [r7, #14]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29b      	uxth	r3, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <get_number_files_section>:
 * Get number of files in given section of memory
 * @param start - Start block
 * @param count - Number of block to check ahead of start
 * @return number of files present in section
 * */
uint32_t get_number_files_section (uint16_t start, uint32_t count) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	80fb      	strh	r3, [r7, #6]
	int file_count = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

	for (int i = start; i < start + count; i++) {
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	e00d      	b.n	8003bce <get_number_files_section+0x32>
		if (entry_present(i) == RFS_OK) {
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f87c 	bl	8003cb4 <entry_present>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <get_number_files_section+0x2c>
			file_count++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
	for (int i = start; i < start + count; i++) {
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	441a      	add	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d8eb      	bhi.n	8003bb2 <get_number_files_section+0x16>
		}
	}

	return file_count;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <get_number_files_all>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
uint32_t get_number_files_all(void) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	return get_number_files_section(0, BLOCK_COUNT);
 8003be8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ffd5 	bl	8003b9c <get_number_files_section>
 8003bf2:	4603      	mov	r3, r0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <get_files_section>:
 * @param start - Start block number
 * @param count - Number of files to read
 * @param result - Array to store file names
 * @return RFS_OK if files were successfully read
 * */
RFS_StatusTypeDef get_files_section (char** result, uint16_t start, uint32_t count) {
 8003bf8:	b5b0      	push	{r4, r5, r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	460b      	mov	r3, r1
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	817b      	strh	r3, [r7, #10]
	Card* work;
	uint32_t file_index = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]

	for (int i = start; i < start + count; i++) {
 8003c0a:	897b      	ldrh	r3, [r7, #10]
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e043      	b.n	8003c98 <get_files_section+0xa0>
		if (entry_present(i) == RFS_OK) {
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f84d 	bl	8003cb4 <entry_present>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d138      	bne.n	8003c92 <get_files_section+0x9a>
			work = read_card_entry(i);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fe60 	bl	80038ea <read_card_entry>
 8003c2a:	61f8      	str	r0, [r7, #28]
			result[file_index] = malloc(strlen(work->name) + 1);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fc fad5 	bl	80001e0 <strlen>
 8003c36:	4603      	mov	r3, r0
 8003c38:	1c59      	adds	r1, r3, #1
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	18d4      	adds	r4, r2, r3
 8003c42:	4608      	mov	r0, r1
 8003c44:	f00c fb2c 	bl	80102a0 <malloc>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	6023      	str	r3, [r4, #0]
			memcpy(result[file_index], work->name, strlen(work->name));
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	681c      	ldr	r4, [r3, #0]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	689d      	ldr	r5, [r3, #8]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fabe 	bl	80001e0 <strlen>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f00c fb28 	bl	80102c0 <memcpy>
			result[file_index][strlen(work->name)] = '\0';
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	681c      	ldr	r4, [r3, #0]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fc faae 	bl	80001e0 <strlen>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4423      	add	r3, r4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
			file_index++;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
	for (int i = start; i < start + count; i++) {
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3301      	adds	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	897a      	ldrh	r2, [r7, #10]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d8b5      	bhi.n	8003c10 <get_files_section+0x18>
		}
	}

	free(work);
 8003ca4:	69f8      	ldr	r0, [r7, #28]
 8003ca6:	f00c fb03 	bl	80102b0 <free>
	return RFS_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bdb0      	pop	{r4, r5, r7, pc}

08003cb4 <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	b298      	uxth	r0, r3
 8003cc4:	f107 020f 	add.w	r2, r7, #15
 8003cc8:	2301      	movs	r3, #1
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f7fe fc4e 	bl	800256c <MEM_READPAGE>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <entry_present+0x26>
		return RFS_READ_ERROR;
 8003cd6:	2305      	movs	r3, #5
 8003cd8:	e005      	b.n	8003ce6 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2bff      	cmp	r3, #255	; 0xff
 8003cde:	d101      	bne.n	8003ce4 <entry_present+0x30>
		return RFS_NO_CARD;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <entry_present+0x32>
	}

	return RFS_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ffda 	bl	8003cb4 <entry_present>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <get_file_name+0x1c>
		return NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e01a      	b.n	8003d40 <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fdec 	bl	80038ea <read_card_entry>
 8003d12:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fa61 	bl	80001e0 <strlen>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	3301      	adds	r3, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f00c fabc 	bl	80102a0 <malloc>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4619      	mov	r1, r3
 8003d32:	68b8      	ldr	r0, [r7, #8]
 8003d34:	f00c fc80 	bl	8010638 <strcpy>
	free(work);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f00c fab9 	bl	80102b0 <free>

	return name;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe fb1b 	bl	8002390 <block_erase>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	0000      	movs	r0, r0
 8003d64:	0000      	movs	r0, r0
	...

08003d68 <get_used_size>:

/**
 * Calculate the used size of memory in MiB
 * @return size of memory used in MiB
 * */
uint32_t get_used_size(void) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
	int file_count = get_number_files_all();
 8003d6e:	f7ff ff39 	bl	8003be4 <get_number_files_all>
 8003d72:	4603      	mov	r3, r0
 8003d74:	607b      	str	r3, [r7, #4]

	return (BLOCK_SIZE * file_count);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fc fd06 	bl	8000788 <__aeabi_i2d>
 8003d7c:	a308      	add	r3, pc, #32	; (adr r3, 8003da0 <get_used_size+0x38>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fa85 	bl	8000290 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7fc fd65 	bl	800085c <__aeabi_d2uiz>
 8003d92:	4603      	mov	r3, r0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	f3af 8000 	nop.w
 8003da0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003da4:	3fb0624d 	.word	0x3fb0624d

08003da8 <get_free_size>:

/**
 * Get size of memory that is free
 * @return size of memory that is free in MiB
 * */
uint32_t get_free_size(void) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
	return MEM_SIZE - get_used_size();
 8003dac:	f7ff ffdc 	bl	8003d68 <get_used_size>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <get_used_size_str>:

/**
 * Get used size as a string (Useful for printing to OLED)
 * @param result - Pointer to string to write to
 * */
void get_used_size_str(char* result) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	uint32_t used = get_used_size();
 8003dc4:	f7ff ffd0 	bl	8003d68 <get_used_size>
 8003dc8:	60f8      	str	r0, [r7, #12]
	sprintf(result,"%i", used);
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <get_used_size_str+0x20>)
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f00c fc12 	bl	80105f8 <siprintf>
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	08011950 	.word	0x08011950

08003de0 <get_free_size_str>:

/**
 * Get free size as a string
 * @param result - Pointer to string to write to
 * */
void get_free_size_str(char* result) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	uint32_t free = get_free_size();
 8003de8:	f7ff ffde 	bl	8003da8 <get_free_size>
 8003dec:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", free);
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <get_free_size_str+0x20>)
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f00c fc00 	bl	80105f8 <siprintf>
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	08011950 	.word	0x08011950

08003e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_MspInit+0x54>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_MspInit+0x54>)
 8003e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e18:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_MspInit+0x54>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_MspInit+0x54>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <HAL_MspInit+0x54>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <HAL_MspInit+0x54>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e42:	2200      	movs	r2, #0
 8003e44:	210f      	movs	r1, #15
 8003e46:	f06f 0001 	mvn.w	r0, #1
 8003e4a:	f000 fbcb 	bl	80045e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800

08003e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_I2C_MspInit+0x84>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d12b      	bne.n	8003ed6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e9a:	23c0      	movs	r3, #192	; 0xc0
 8003e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e9e:	2312      	movs	r3, #18
 8003ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003eaa:	2304      	movs	r3, #4
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eae:	f107 0314 	add.w	r3, r7, #20
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	480c      	ldr	r0, [pc, #48]	; (8003ee8 <HAL_I2C_MspInit+0x8c>)
 8003eb6:	f000 fbbf 	bl	8004638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_I2C_MspInit+0x88>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ed6:	bf00      	nop
 8003ed8:	3728      	adds	r7, #40	; 0x28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40005400 	.word	0x40005400
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020400 	.word	0x40020400

08003eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	; 0x30
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 031c 	add.w	r3, r7, #28
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a32      	ldr	r2, [pc, #200]	; (8003fd4 <HAL_SPI_MspInit+0xe8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d12c      	bne.n	8003f68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	4a30      	ldr	r2, [pc, #192]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1e:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f46:	23a0      	movs	r3, #160	; 0xa0
 8003f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f52:	2303      	movs	r3, #3
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f56:	2305      	movs	r3, #5
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5a:	f107 031c 	add.w	r3, r7, #28
 8003f5e:	4619      	mov	r1, r3
 8003f60:	481e      	ldr	r0, [pc, #120]	; (8003fdc <HAL_SPI_MspInit+0xf0>)
 8003f62:	f000 fb69 	bl	8004638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003f66:	e031      	b.n	8003fcc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_SPI_MspInit+0xf4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d12c      	bne.n	8003fcc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003f98:	f043 0302 	orr.w	r3, r3, #2
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_SPI_MspInit+0xec>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003faa:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fbc:	2305      	movs	r3, #5
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc0:	f107 031c 	add.w	r3, r7, #28
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <HAL_SPI_MspInit+0xf8>)
 8003fc8:	f000 fb36 	bl	8004638 <HAL_GPIO_Init>
}
 8003fcc:	bf00      	nop
 8003fce:	3730      	adds	r7, #48	; 0x30
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40013000 	.word	0x40013000
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	40003800 	.word	0x40003800
 8003fe4:	40020400 	.word	0x40020400

08003fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_TIM_Base_MspInit+0x64>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	4a12      	ldr	r2, [pc, #72]	; (800404c <HAL_TIM_Base_MspInit+0x64>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6413      	str	r3, [r2, #64]	; 0x40
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_TIM_Base_MspInit+0x64>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004016:	e012      	b.n	800403e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <HAL_TIM_Base_MspInit+0x68>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10d      	bne.n	800403e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_TIM_Base_MspInit+0x64>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <HAL_TIM_Base_MspInit+0x64>)
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_TIM_Base_MspInit+0x64>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	40000400 	.word	0x40000400

08004054 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 030c 	add.w	r3, r7, #12
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d11d      	bne.n	80040b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_TIM_MspPostInit+0x68>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <HAL_TIM_MspPostInit+0x68>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6313      	str	r3, [r2, #48]	; 0x30
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_TIM_MspPostInit+0x68>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004092:	2304      	movs	r3, #4
 8004094:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004096:	2302      	movs	r3, #2
 8004098:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a6:	f107 030c 	add.w	r3, r7, #12
 80040aa:	4619      	mov	r1, r3
 80040ac:	4804      	ldr	r0, [pc, #16]	; (80040c0 <HAL_TIM_MspPostInit+0x6c>)
 80040ae:	f000 fac3 	bl	8004638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80040b2:	bf00      	nop
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40020000 	.word	0x40020000

080040c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	; 0x38
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	4b33      	ldr	r3, [pc, #204]	; (80041a8 <HAL_InitTick+0xe4>)
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	4a32      	ldr	r2, [pc, #200]	; (80041a8 <HAL_InitTick+0xe4>)
 80040de:	f043 0308 	orr.w	r3, r3, #8
 80040e2:	6413      	str	r3, [r2, #64]	; 0x40
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_InitTick+0xe4>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040f0:	f107 0210 	add.w	r2, r7, #16
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f003 fb28 	bl	8007750 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800410a:	f003 fb0d 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 800410e:	6378      	str	r0, [r7, #52]	; 0x34
 8004110:	e004      	b.n	800411c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004112:	f003 fb09 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 8004116:	4603      	mov	r3, r0
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800411c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411e:	4a23      	ldr	r2, [pc, #140]	; (80041ac <HAL_InitTick+0xe8>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	0c9b      	lsrs	r3, r3, #18
 8004126:	3b01      	subs	r3, #1
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_InitTick+0xec>)
 800412c:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <HAL_InitTick+0xf0>)
 800412e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004130:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <HAL_InitTick+0xec>)
 8004132:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004136:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004138:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <HAL_InitTick+0xec>)
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800413e:	4b1c      	ldr	r3, [pc, #112]	; (80041b0 <HAL_InitTick+0xec>)
 8004140:	2200      	movs	r2, #0
 8004142:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <HAL_InitTick+0xec>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800414a:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_InitTick+0xec>)
 800414c:	2200      	movs	r2, #0
 800414e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8004150:	4817      	ldr	r0, [pc, #92]	; (80041b0 <HAL_InitTick+0xec>)
 8004152:	f003 ff61 	bl	8008018 <HAL_TIM_Base_Init>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800415c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11b      	bne.n	800419c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8004164:	4812      	ldr	r0, [pc, #72]	; (80041b0 <HAL_InitTick+0xec>)
 8004166:	f004 f829 	bl	80081bc <HAL_TIM_Base_Start_IT>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004174:	2b00      	cmp	r3, #0
 8004176:	d111      	bne.n	800419c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004178:	2032      	movs	r0, #50	; 0x32
 800417a:	f000 fa4f 	bl	800461c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b0f      	cmp	r3, #15
 8004182:	d808      	bhi.n	8004196 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8004184:	2200      	movs	r2, #0
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	2032      	movs	r0, #50	; 0x32
 800418a:	f000 fa2b 	bl	80045e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_InitTick+0xf4>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e002      	b.n	800419c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800419c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3738      	adds	r7, #56	; 0x38
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	431bde83 	.word	0x431bde83
 80041b0:	200008fc 	.word	0x200008fc
 80041b4:	40000c00 	.word	0x40000c00
 80041b8:	200005b4 	.word	0x200005b4

080041bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041c0:	e7fe      	b.n	80041c0 <NMI_Handler+0x4>

080041c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <HardFault_Handler+0x4>

080041c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041cc:	e7fe      	b.n	80041cc <MemManage_Handler+0x4>

080041ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d2:	e7fe      	b.n	80041d2 <BusFault_Handler+0x4>

080041d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <UsageFault_Handler+0x4>

080041da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80041ec:	2002      	movs	r0, #2
 80041ee:	f000 fbd9 	bl	80049a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <TIM5_IRQHandler+0x10>)
 80041fe:	f004 f9ad 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200008fc 	.word	0x200008fc

0800420c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <OTG_FS_IRQHandler+0x10>)
 8004212:	f001 fcee 	bl	8005bf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20008b44 	.word	0x20008b44

08004220 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	e00a      	b.n	8004248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004232:	f3af 8000 	nop.w
 8004236:	4601      	mov	r1, r0
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	60ba      	str	r2, [r7, #8]
 800423e:	b2ca      	uxtb	r2, r1
 8004240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3301      	adds	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	dbf0      	blt.n	8004232 <_read+0x12>
  }

  return len;
 8004250:	687b      	ldr	r3, [r7, #4]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <_close>:
  }
  return len;
}

int _close(int file)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004282:	605a      	str	r2, [r3, #4]
  return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <_isatty>:

int _isatty(int file)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800429a:	2301      	movs	r3, #1
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <_sbrk+0x5c>)
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <_sbrk+0x60>)
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <_sbrk+0x64>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <_sbrk+0x64>)
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <_sbrk+0x68>)
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <_sbrk+0x64>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d207      	bcs.n	8004304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f4:	f00b ffaa 	bl	801024c <__errno>
 80042f8:	4603      	mov	r3, r0
 80042fa:	220c      	movs	r2, #12
 80042fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	e009      	b.n	8004318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <_sbrk+0x64>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <_sbrk+0x64>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <_sbrk+0x64>)
 8004314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20010000 	.word	0x20010000
 8004324:	00000400 	.word	0x00000400
 8004328:	20000944 	.word	0x20000944
 800432c:	20009280 	.word	0x20009280

08004330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <SystemInit+0x20>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	4a05      	ldr	r2, [pc, #20]	; (8004350 <SystemInit+0x20>)
 800433c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800438c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004358:	480d      	ldr	r0, [pc, #52]	; (8004390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800435a:	490e      	ldr	r1, [pc, #56]	; (8004394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800435c:	4a0e      	ldr	r2, [pc, #56]	; (8004398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800435e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004360:	e002      	b.n	8004368 <LoopCopyDataInit>

08004362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004366:	3304      	adds	r3, #4

08004368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800436a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800436c:	d3f9      	bcc.n	8004362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800436e:	4a0b      	ldr	r2, [pc, #44]	; (800439c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004370:	4c0b      	ldr	r4, [pc, #44]	; (80043a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004374:	e001      	b.n	800437a <LoopFillZerobss>

08004376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004378:	3204      	adds	r2, #4

0800437a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800437a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800437c:	d3fb      	bcc.n	8004376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800437e:	f7ff ffd7 	bl	8004330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004382:	f00b ff69 	bl	8010258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004386:	f7fe fab9 	bl	80028fc <main>
  bx  lr    
 800438a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800438c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004394:	20000714 	.word	0x20000714
  ldr r2, =_sidata
 8004398:	080121a8 	.word	0x080121a8
  ldr r2, =_sbss
 800439c:	20000714 	.word	0x20000714
  ldr r4, =_ebss
 80043a0:	20009280 	.word	0x20009280

080043a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043a4:	e7fe      	b.n	80043a4 <ADC_IRQHandler>
	...

080043a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_Init+0x40>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0d      	ldr	r2, [pc, #52]	; (80043e8 <HAL_Init+0x40>)
 80043b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_Init+0x40>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <HAL_Init+0x40>)
 80043be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <HAL_Init+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a07      	ldr	r2, [pc, #28]	; (80043e8 <HAL_Init+0x40>)
 80043ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043d0:	2003      	movs	r0, #3
 80043d2:	f000 f8fc 	bl	80045ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043d6:	200f      	movs	r0, #15
 80043d8:	f7ff fe74 	bl	80040c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043dc:	f7ff fd12 	bl	8003e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023c00 	.word	0x40023c00

080043ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_IncTick+0x20>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_IncTick+0x24>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_IncTick+0x24>)
 80043fe:	6013      	str	r3, [r2, #0]
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200005b8 	.word	0x200005b8
 8004410:	20000948 	.word	0x20000948

08004414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return uwTick;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_GetTick+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000948 	.word	0x20000948

0800442c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004434:	f7ff ffee 	bl	8004414 <HAL_GetTick>
 8004438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d005      	beq.n	8004452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <HAL_Delay+0x44>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004452:	bf00      	nop
 8004454:	f7ff ffde 	bl	8004414 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	429a      	cmp	r2, r3
 8004462:	d8f7      	bhi.n	8004454 <HAL_Delay+0x28>
  {
  }
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200005b8 	.word	0x200005b8

08004474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004490:	4013      	ands	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800449c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	60d3      	str	r3, [r2, #12]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <__NVIC_GetPriorityGrouping+0x18>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	f003 0307 	and.w	r3, r3, #7
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	db0b      	blt.n	8004502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	4907      	ldr	r1, [pc, #28]	; (8004510 <__NVIC_EnableIRQ+0x38>)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2001      	movs	r0, #1
 80044fa:	fa00 f202 	lsl.w	r2, r0, r2
 80044fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	e000e100 	.word	0xe000e100

08004514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db0a      	blt.n	800453e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	490c      	ldr	r1, [pc, #48]	; (8004560 <__NVIC_SetPriority+0x4c>)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	0112      	lsls	r2, r2, #4
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	440b      	add	r3, r1
 8004538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800453c:	e00a      	b.n	8004554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	4908      	ldr	r1, [pc, #32]	; (8004564 <__NVIC_SetPriority+0x50>)
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	3b04      	subs	r3, #4
 800454c:	0112      	lsls	r2, r2, #4
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	440b      	add	r3, r1
 8004552:	761a      	strb	r2, [r3, #24]
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	e000e100 	.word	0xe000e100
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f1c3 0307 	rsb	r3, r3, #7
 8004582:	2b04      	cmp	r3, #4
 8004584:	bf28      	it	cs
 8004586:	2304      	movcs	r3, #4
 8004588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3304      	adds	r3, #4
 800458e:	2b06      	cmp	r3, #6
 8004590:	d902      	bls.n	8004598 <NVIC_EncodePriority+0x30>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3b03      	subs	r3, #3
 8004596:	e000      	b.n	800459a <NVIC_EncodePriority+0x32>
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	f04f 32ff 	mov.w	r2, #4294967295
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43da      	mvns	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	401a      	ands	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b0:	f04f 31ff 	mov.w	r1, #4294967295
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	43d9      	mvns	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	4313      	orrs	r3, r2
         );
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3724      	adds	r7, #36	; 0x24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff ff4c 	bl	8004474 <__NVIC_SetPriorityGrouping>
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045f6:	f7ff ff61 	bl	80044bc <__NVIC_GetPriorityGrouping>
 80045fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	6978      	ldr	r0, [r7, #20]
 8004602:	f7ff ffb1 	bl	8004568 <NVIC_EncodePriority>
 8004606:	4602      	mov	r2, r0
 8004608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ff80 	bl	8004514 <__NVIC_SetPriority>
}
 8004614:	bf00      	nop
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ff54 	bl	80044d8 <__NVIC_EnableIRQ>
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e159      	b.n	8004908 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004654:	2201      	movs	r2, #1
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	429a      	cmp	r2, r3
 800466e:	f040 8148 	bne.w	8004902 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d005      	beq.n	800468a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004686:	2b02      	cmp	r3, #2
 8004688:	d130      	bne.n	80046ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c0:	2201      	movs	r2, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 0201 	and.w	r2, r3, #1
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d017      	beq.n	8004728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	2203      	movs	r2, #3
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d123      	bne.n	800477c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	08da      	lsrs	r2, r3, #3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3208      	adds	r2, #8
 800473c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	220f      	movs	r2, #15
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	08da      	lsrs	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3208      	adds	r2, #8
 8004776:	69b9      	ldr	r1, [r7, #24]
 8004778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	2203      	movs	r2, #3
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0203 	and.w	r2, r3, #3
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80a2 	beq.w	8004902 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	4b57      	ldr	r3, [pc, #348]	; (8004920 <HAL_GPIO_Init+0x2e8>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	4a56      	ldr	r2, [pc, #344]	; (8004920 <HAL_GPIO_Init+0x2e8>)
 80047c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047cc:	6453      	str	r3, [r2, #68]	; 0x44
 80047ce:	4b54      	ldr	r3, [pc, #336]	; (8004920 <HAL_GPIO_Init+0x2e8>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047da:	4a52      	ldr	r2, [pc, #328]	; (8004924 <HAL_GPIO_Init+0x2ec>)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	3302      	adds	r3, #2
 80047e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	220f      	movs	r2, #15
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a49      	ldr	r2, [pc, #292]	; (8004928 <HAL_GPIO_Init+0x2f0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d019      	beq.n	800483a <HAL_GPIO_Init+0x202>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a48      	ldr	r2, [pc, #288]	; (800492c <HAL_GPIO_Init+0x2f4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_GPIO_Init+0x1fe>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a47      	ldr	r2, [pc, #284]	; (8004930 <HAL_GPIO_Init+0x2f8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00d      	beq.n	8004832 <HAL_GPIO_Init+0x1fa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a46      	ldr	r2, [pc, #280]	; (8004934 <HAL_GPIO_Init+0x2fc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <HAL_GPIO_Init+0x1f6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a45      	ldr	r2, [pc, #276]	; (8004938 <HAL_GPIO_Init+0x300>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_GPIO_Init+0x1f2>
 8004826:	2304      	movs	r3, #4
 8004828:	e008      	b.n	800483c <HAL_GPIO_Init+0x204>
 800482a:	2307      	movs	r3, #7
 800482c:	e006      	b.n	800483c <HAL_GPIO_Init+0x204>
 800482e:	2303      	movs	r3, #3
 8004830:	e004      	b.n	800483c <HAL_GPIO_Init+0x204>
 8004832:	2302      	movs	r3, #2
 8004834:	e002      	b.n	800483c <HAL_GPIO_Init+0x204>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <HAL_GPIO_Init+0x204>
 800483a:	2300      	movs	r3, #0
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	f002 0203 	and.w	r2, r2, #3
 8004842:	0092      	lsls	r2, r2, #2
 8004844:	4093      	lsls	r3, r2
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800484c:	4935      	ldr	r1, [pc, #212]	; (8004924 <HAL_GPIO_Init+0x2ec>)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	089b      	lsrs	r3, r3, #2
 8004852:	3302      	adds	r3, #2
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <HAL_GPIO_Init+0x304>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800487e:	4a2f      	ldr	r2, [pc, #188]	; (800493c <HAL_GPIO_Init+0x304>)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004884:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_GPIO_Init+0x304>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048a8:	4a24      	ldr	r2, [pc, #144]	; (800493c <HAL_GPIO_Init+0x304>)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <HAL_GPIO_Init+0x304>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048d2:	4a1a      	ldr	r2, [pc, #104]	; (800493c <HAL_GPIO_Init+0x304>)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048d8:	4b18      	ldr	r3, [pc, #96]	; (800493c <HAL_GPIO_Init+0x304>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048fc:	4a0f      	ldr	r2, [pc, #60]	; (800493c <HAL_GPIO_Init+0x304>)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3301      	adds	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b0f      	cmp	r3, #15
 800490c:	f67f aea2 	bls.w	8004654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3724      	adds	r7, #36	; 0x24
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
 8004924:	40013800 	.word	0x40013800
 8004928:	40020000 	.word	0x40020000
 800492c:	40020400 	.word	0x40020400
 8004930:	40020800 	.word	0x40020800
 8004934:	40020c00 	.word	0x40020c00
 8004938:	40021000 	.word	0x40021000
 800493c:	40013c00 	.word	0x40013c00

08004940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e001      	b.n	8004962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	807b      	strh	r3, [r7, #2]
 800497c:	4613      	mov	r3, r2
 800497e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004980:	787b      	ldrb	r3, [r7, #1]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004986:	887a      	ldrh	r2, [r7, #2]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800498c:	e003      	b.n	8004996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	041a      	lsls	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	619a      	str	r2, [r3, #24]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049ba:	4a05      	ldr	r2, [pc, #20]	; (80049d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd fee2 	bl	800278c <HAL_GPIO_EXTI_Callback>
  }
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40013c00 	.word	0x40013c00

080049d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e12b      	b.n	8004c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fa2e 	bl	8003e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a38:	f002 fe76 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 8004a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4a81      	ldr	r2, [pc, #516]	; (8004c48 <HAL_I2C_Init+0x274>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d807      	bhi.n	8004a58 <HAL_I2C_Init+0x84>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a80      	ldr	r2, [pc, #512]	; (8004c4c <HAL_I2C_Init+0x278>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bf94      	ite	ls
 8004a50:	2301      	movls	r3, #1
 8004a52:	2300      	movhi	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e006      	b.n	8004a66 <HAL_I2C_Init+0x92>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a7d      	ldr	r2, [pc, #500]	; (8004c50 <HAL_I2C_Init+0x27c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bf94      	ite	ls
 8004a60:	2301      	movls	r3, #1
 8004a62:	2300      	movhi	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0e7      	b.n	8004c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a78      	ldr	r2, [pc, #480]	; (8004c54 <HAL_I2C_Init+0x280>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0c9b      	lsrs	r3, r3, #18
 8004a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a6a      	ldr	r2, [pc, #424]	; (8004c48 <HAL_I2C_Init+0x274>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d802      	bhi.n	8004aa8 <HAL_I2C_Init+0xd4>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	e009      	b.n	8004abc <HAL_I2C_Init+0xe8>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	4a69      	ldr	r2, [pc, #420]	; (8004c58 <HAL_I2C_Init+0x284>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	099b      	lsrs	r3, r3, #6
 8004aba:	3301      	adds	r3, #1
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	495c      	ldr	r1, [pc, #368]	; (8004c48 <HAL_I2C_Init+0x274>)
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	d819      	bhi.n	8004b10 <HAL_I2C_Init+0x13c>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1e59      	subs	r1, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004af0:	400b      	ands	r3, r1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_I2C_Init+0x138>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1e59      	subs	r1, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b04:	3301      	adds	r3, #1
 8004b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0a:	e051      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	e04f      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <HAL_I2C_Init+0x168>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e58      	subs	r0, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	440b      	add	r3, r1
 8004b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e012      	b.n	8004b62 <HAL_I2C_Init+0x18e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e58      	subs	r0, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	0099      	lsls	r1, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b52:	3301      	adds	r3, #1
 8004b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Init+0x196>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e022      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10e      	bne.n	8004b90 <HAL_I2C_Init+0x1bc>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1e58      	subs	r0, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	440b      	add	r3, r1
 8004b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b84:	3301      	adds	r3, #1
 8004b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8e:	e00f      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1e58      	subs	r0, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	0099      	lsls	r1, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	6809      	ldr	r1, [r1, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6911      	ldr	r1, [r2, #16]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68d2      	ldr	r2, [r2, #12]
 8004bea:	4311      	orrs	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	000186a0 	.word	0x000186a0
 8004c4c:	001e847f 	.word	0x001e847f
 8004c50:	003d08ff 	.word	0x003d08ff
 8004c54:	431bde83 	.word	0x431bde83
 8004c58:	10624dd3 	.word	0x10624dd3

08004c5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	817b      	strh	r3, [r7, #10]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	813b      	strh	r3, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c76:	f7ff fbcd 	bl	8004414 <HAL_GetTick>
 8004c7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	f040 80d9 	bne.w	8004e3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2319      	movs	r3, #25
 8004c90:	2201      	movs	r2, #1
 8004c92:	496d      	ldr	r1, [pc, #436]	; (8004e48 <HAL_I2C_Mem_Write+0x1ec>)
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fc7f 	bl	8005598 <I2C_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0cc      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Mem_Write+0x56>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e0c5      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d007      	beq.n	8004cd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2221      	movs	r2, #33	; 0x21
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2240      	movs	r2, #64	; 0x40
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a3a      	ldr	r2, [r7, #32]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a4d      	ldr	r2, [pc, #308]	; (8004e4c <HAL_I2C_Mem_Write+0x1f0>)
 8004d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d1a:	88f8      	ldrh	r0, [r7, #6]
 8004d1c:	893a      	ldrh	r2, [r7, #8]
 8004d1e:	8979      	ldrh	r1, [r7, #10]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	4603      	mov	r3, r0
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fab6 	bl	800529c <I2C_RequestMemoryWrite>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d052      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e081      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fd00 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d107      	bne.n	8004d62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06b      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d11b      	bne.n	8004ddc <HAL_I2C_Mem_Write+0x180>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d017      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1aa      	bne.n	8004d3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fcec 	bl	80057c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00d      	beq.n	8004e10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d107      	bne.n	8004e0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e016      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	00100002 	.word	0x00100002
 8004e4c:	ffff0000 	.word	0xffff0000

08004e50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08c      	sub	sp, #48	; 0x30
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	817b      	strh	r3, [r7, #10]
 8004e62:	460b      	mov	r3, r1
 8004e64:	813b      	strh	r3, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e6a:	f7ff fad3 	bl	8004414 <HAL_GetTick>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	f040 8208 	bne.w	800528e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	2319      	movs	r3, #25
 8004e84:	2201      	movs	r2, #1
 8004e86:	497b      	ldr	r1, [pc, #492]	; (8005074 <HAL_I2C_Mem_Read+0x224>)
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fb85 	bl	8005598 <I2C_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
 8004e96:	e1fb      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_I2C_Mem_Read+0x56>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e1f4      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d007      	beq.n	8004ecc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2222      	movs	r2, #34	; 0x22
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2240      	movs	r2, #64	; 0x40
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a5b      	ldr	r2, [pc, #364]	; (8005078 <HAL_I2C_Mem_Read+0x228>)
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f0e:	88f8      	ldrh	r0, [r7, #6]
 8004f10:	893a      	ldrh	r2, [r7, #8]
 8004f12:	8979      	ldrh	r1, [r7, #10]
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa52 	bl	80053c8 <I2C_RequestMemoryRead>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e1b0      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d113      	bne.n	8004f5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f36:	2300      	movs	r3, #0
 8004f38:	623b      	str	r3, [r7, #32]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	623b      	str	r3, [r7, #32]
 8004f4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e184      	b.n	8005268 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d11b      	bne.n	8004f9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e164      	b.n	8005268 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d11b      	bne.n	8004fde <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	e144      	b.n	8005268 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ff4:	e138      	b.n	8005268 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	f200 80f1 	bhi.w	80051e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	2b01      	cmp	r3, #1
 8005006:	d123      	bne.n	8005050 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fc1b 	bl	8005848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e139      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800504e:	e10b      	b.n	8005268 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b02      	cmp	r3, #2
 8005056:	d14e      	bne.n	80050f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	2200      	movs	r2, #0
 8005060:	4906      	ldr	r1, [pc, #24]	; (800507c <HAL_I2C_Mem_Read+0x22c>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fa98 	bl	8005598 <I2C_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e10e      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
 8005072:	bf00      	nop
 8005074:	00100002 	.word	0x00100002
 8005078:	ffff0000 	.word	0xffff0000
 800507c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050f4:	e0b8      	b.n	8005268 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	2200      	movs	r2, #0
 80050fe:	4966      	ldr	r1, [pc, #408]	; (8005298 <HAL_I2C_Mem_Read+0x448>)
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fa49 	bl	8005598 <I2C_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0bf      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	2200      	movs	r2, #0
 800515a:	494f      	ldr	r1, [pc, #316]	; (8005298 <HAL_I2C_Mem_Read+0x448>)
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fa1b 	bl	8005598 <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e091      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051e0:	e042      	b.n	8005268 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fb2e 	bl	8005848 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e04c      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b04      	cmp	r3, #4
 8005234:	d118      	bne.n	8005268 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	2b00      	cmp	r3, #0
 800526e:	f47f aec2 	bne.w	8004ff6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
  }
}
 8005290:	4618      	mov	r0, r3
 8005292:	3728      	adds	r7, #40	; 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	00010004 	.word	0x00010004

0800529c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	817b      	strh	r3, [r7, #10]
 80052ae:	460b      	mov	r3, r1
 80052b0:	813b      	strh	r3, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f960 	bl	8005598 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00d      	beq.n	80052fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ec:	d103      	bne.n	80052f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e05f      	b.n	80053ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052fa:	897b      	ldrh	r3, [r7, #10]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	6a3a      	ldr	r2, [r7, #32]
 800530e:	492d      	ldr	r1, [pc, #180]	; (80053c4 <I2C_RequestMemoryWrite+0x128>)
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f998 	bl	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e04c      	b.n	80053ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005338:	6a39      	ldr	r1, [r7, #32]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 fa02 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b04      	cmp	r3, #4
 800534c:	d107      	bne.n	800535e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e02b      	b.n	80053ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d105      	bne.n	8005374 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	611a      	str	r2, [r3, #16]
 8005372:	e021      	b.n	80053b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005374:	893b      	ldrh	r3, [r7, #8]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	b29b      	uxth	r3, r3
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005384:	6a39      	ldr	r1, [r7, #32]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f9dc 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	2b04      	cmp	r3, #4
 8005398:	d107      	bne.n	80053aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e005      	b.n	80053ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ae:	893b      	ldrh	r3, [r7, #8]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	00010002 	.word	0x00010002

080053c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	4608      	mov	r0, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	461a      	mov	r2, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	817b      	strh	r3, [r7, #10]
 80053da:	460b      	mov	r3, r1
 80053dc:	813b      	strh	r3, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2200      	movs	r2, #0
 800540a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f8c2 	bl	8005598 <I2C_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	d103      	bne.n	8005432 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e0aa      	b.n	800558c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005436:	897b      	ldrh	r3, [r7, #10]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	4952      	ldr	r1, [pc, #328]	; (8005594 <I2C_RequestMemoryRead+0x1cc>)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f8fa 	bl	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e097      	b.n	800558c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005474:	6a39      	ldr	r1, [r7, #32]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f964 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b04      	cmp	r3, #4
 8005488:	d107      	bne.n	800549a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e076      	b.n	800558c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d105      	bne.n	80054b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a4:	893b      	ldrh	r3, [r7, #8]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	e021      	b.n	80054f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054b0:	893b      	ldrh	r3, [r7, #8]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	6a39      	ldr	r1, [r7, #32]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f93e 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d107      	bne.n	80054e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e050      	b.n	800558c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ea:	893b      	ldrh	r3, [r7, #8]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f6:	6a39      	ldr	r1, [r7, #32]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f923 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	2b04      	cmp	r3, #4
 800550a:	d107      	bne.n	800551c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e035      	b.n	800558c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	2200      	movs	r2, #0
 8005538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f82b 	bl	8005598 <I2C_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005556:	d103      	bne.n	8005560 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e013      	b.n	800558c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005564:	897b      	ldrh	r3, [r7, #10]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	6a3a      	ldr	r2, [r7, #32]
 8005578:	4906      	ldr	r1, [pc, #24]	; (8005594 <I2C_RequestMemoryRead+0x1cc>)
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f863 	bl	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	00010002 	.word	0x00010002

08005598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055a8:	e025      	b.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d021      	beq.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b2:	f7fe ff2f 	bl	8004414 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d302      	bcc.n	80055c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d116      	bne.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e023      	b.n	800563e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10d      	bne.n	800561c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	43da      	mvns	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	e00c      	b.n	8005636 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	43da      	mvns	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4013      	ands	r3, r2
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	bf0c      	ite	eq
 800562e:	2301      	moveq	r3, #1
 8005630:	2300      	movne	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	429a      	cmp	r2, r3
 800563a:	d0b6      	beq.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005654:	e051      	b.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005664:	d123      	bne.n	80056ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005674:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800567e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f043 0204 	orr.w	r2, r3, #4
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e046      	b.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d021      	beq.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b6:	f7fe fead 	bl	8004414 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d302      	bcc.n	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d116      	bne.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f043 0220 	orr.w	r2, r3, #32
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e020      	b.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	0c1b      	lsrs	r3, r3, #16
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d10c      	bne.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	43da      	mvns	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4013      	ands	r3, r2
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e00b      	b.n	8005736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	43da      	mvns	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4013      	ands	r3, r2
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d18d      	bne.n	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005750:	e02d      	b.n	80057ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f8ce 	bl	80058f4 <I2C_IsAcknowledgeFailed>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e02d      	b.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d021      	beq.n	80057ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576a:	f7fe fe53 	bl	8004414 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	429a      	cmp	r2, r3
 8005778:	d302      	bcc.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d116      	bne.n	80057ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f043 0220 	orr.w	r2, r3, #32
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e007      	b.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d1ca      	bne.n	8005752 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057d2:	e02d      	b.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f88d 	bl	80058f4 <I2C_IsAcknowledgeFailed>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e02d      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d021      	beq.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fe fe12 	bl	8004414 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d116      	bne.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f043 0220 	orr.w	r2, r3, #32
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e007      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b04      	cmp	r3, #4
 800583c:	d1ca      	bne.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005854:	e042      	b.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d119      	bne.n	8005898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0210 	mvn.w	r2, #16
 800586c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e029      	b.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005898:	f7fe fdbc 	bl	8004414 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d116      	bne.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	f043 0220 	orr.w	r2, r3, #32
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e007      	b.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d1b5      	bne.n	8005856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590a:	d11b      	bne.n	8005944 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005914:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	f043 0204 	orr.w	r2, r3, #4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005954:	b08f      	sub	sp, #60	; 0x3c
 8005956:	af0a      	add	r7, sp, #40	; 0x28
 8005958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e10f      	b.n	8005b84 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f00a f95a 	bl	800fc38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2203      	movs	r2, #3
 8005988:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f003 fcf7 	bl	8009396 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	687e      	ldr	r6, [r7, #4]
 80059b0:	466d      	mov	r5, sp
 80059b2:	f106 0410 	add.w	r4, r6, #16
 80059b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80059c6:	1d33      	adds	r3, r6, #4
 80059c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059ca:	6838      	ldr	r0, [r7, #0]
 80059cc:	f003 fbce 	bl	800916c <USB_CoreInit>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e0d0      	b.n	8005b84 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f003 fce5 	bl	80093b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
 80059f2:	e04a      	b.n	8005a8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059f4:	7bfa      	ldrb	r2, [r7, #15]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	333d      	adds	r3, #61	; 0x3d
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a08:	7bfa      	ldrb	r2, [r7, #15]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	333c      	adds	r3, #60	; 0x3c
 8005a18:	7bfa      	ldrb	r2, [r7, #15]
 8005a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a1c:	7bfa      	ldrb	r2, [r7, #15]
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	b298      	uxth	r0, r3
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	3344      	adds	r3, #68	; 0x44
 8005a30:	4602      	mov	r2, r0
 8005a32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a34:	7bfa      	ldrb	r2, [r7, #15]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	3340      	adds	r3, #64	; 0x40
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a48:	7bfa      	ldrb	r2, [r7, #15]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	3348      	adds	r3, #72	; 0x48
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a5c:	7bfa      	ldrb	r2, [r7, #15]
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	334c      	adds	r3, #76	; 0x4c
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a70:	7bfa      	ldrb	r2, [r7, #15]
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3354      	adds	r3, #84	; 0x54
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	3301      	adds	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d3af      	bcc.n	80059f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
 8005a98:	e044      	b.n	8005b24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ab0:	7bfa      	ldrb	r2, [r7, #15]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ac2:	7bfa      	ldrb	r2, [r7, #15]
 8005ac4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b08:	7bfa      	ldrb	r2, [r7, #15]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	3301      	adds	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
 8005b24:	7bfa      	ldrb	r2, [r7, #15]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3b5      	bcc.n	8005a9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	687e      	ldr	r6, [r7, #4]
 8005b36:	466d      	mov	r5, sp
 8005b38:	f106 0410 	add.w	r4, r6, #16
 8005b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b48:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b4c:	1d33      	adds	r3, r6, #4
 8005b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b50:	6838      	ldr	r0, [r7, #0]
 8005b52:	f003 fc7d 	bl	8009450 <USB_DevInit>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e00d      	b.n	8005b84 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f004 fdcc 	bl	800a71a <USB_DevDisconnect>

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_PCD_Start+0x1c>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e020      	b.n	8005bea <HAL_PCD_Start+0x5e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d109      	bne.n	8005bcc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d005      	beq.n	8005bcc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f003 fbcf 	bl	8009374 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f004 fd7c 	bl	800a6d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bf2:	b590      	push	{r4, r7, lr}
 8005bf4:	b08d      	sub	sp, #52	; 0x34
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f004 fe3a 	bl	800a882 <USB_GetMode>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 848a 	bne.w	800652a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f004 fd9e 	bl	800a75c <USB_ReadInterrupts>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8480 	beq.w	8006528 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f004 fd8b 	bl	800a75c <USB_ReadInterrupts>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d107      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f002 0202 	and.w	r2, r2, #2
 8005c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f004 fd79 	bl	800a75c <USB_ReadInterrupts>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d161      	bne.n	8005d38 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0210 	bic.w	r2, r2, #16
 8005c82:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	4613      	mov	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	0c5b      	lsrs	r3, r3, #17
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d124      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d035      	beq.n	8005d28 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6a38      	ldr	r0, [r7, #32]
 8005cd0:	f004 fbb0 	bl	800a434 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	091b      	lsrs	r3, r3, #4
 8005cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ce0:	441a      	add	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	6a1a      	ldr	r2, [r3, #32]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cf2:	441a      	add	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	621a      	str	r2, [r3, #32]
 8005cf8:	e016      	b.n	8005d28 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	0c5b      	lsrs	r3, r3, #17
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	2b06      	cmp	r3, #6
 8005d04:	d110      	bne.n	8005d28 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6a38      	ldr	r0, [r7, #32]
 8005d12:	f004 fb8f 	bl	800a434 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6a1a      	ldr	r2, [r3, #32]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d22:	441a      	add	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0210 	orr.w	r2, r2, #16
 8005d36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f004 fd0d 	bl	800a75c <USB_ReadInterrupts>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d4c:	f040 80a7 	bne.w	8005e9e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f004 fd12 	bl	800a782 <USB_ReadDevAllOutEpInterrupt>
 8005d5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005d60:	e099      	b.n	8005e96 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 808e 	beq.w	8005e8a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f004 fd36 	bl	800a7ea <USB_ReadDevOutEPInterrupt>
 8005d7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	461a      	mov	r2, r3
 8005d98:	2301      	movs	r3, #1
 8005d9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fec2 	bl	8006b28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 ff98 	bl	8006cf8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	461a      	mov	r2, r3
 8005de0:	2310      	movs	r3, #16
 8005de2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d030      	beq.n	8005e50 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d109      	bne.n	8005e0e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e0c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	3304      	adds	r3, #4
 8005e22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	78db      	ldrb	r3, [r3, #3]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d108      	bne.n	8005e3e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f009 fff9 	bl	800fe30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	461a      	mov	r2, r3
 8005e68:	2320      	movs	r3, #32
 8005e6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	461a      	mov	r2, r3
 8005e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f af62 	bne.w	8005d62 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f004 fc5a 	bl	800a75c <USB_ReadInterrupts>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eb2:	f040 80db 	bne.w	800606c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f004 fc7b 	bl	800a7b6 <USB_ReadDevAllInEpInterrupt>
 8005ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ec6:	e0cd      	b.n	8006064 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80c2 	beq.w	8006058 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f004 fca1 	bl	800a826 <USB_ReadDevInEPInterrupt>
 8005ee4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d057      	beq.n	8005fa0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	69f9      	ldr	r1, [r7, #28]
 8005f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f10:	4013      	ands	r3, r2
 8005f12:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	461a      	mov	r2, r3
 8005f22:	2301      	movs	r3, #1
 8005f24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d132      	bne.n	8005f94 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	334c      	adds	r3, #76	; 0x4c
 8005f3e:	6819      	ldr	r1, [r3, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4403      	add	r3, r0
 8005f4e:	3348      	adds	r3, #72	; 0x48
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4419      	add	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4403      	add	r3, r0
 8005f62:	334c      	adds	r3, #76	; 0x4c
 8005f64:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d113      	bne.n	8005f94 <HAL_PCD_IRQHandler+0x3a2>
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	3354      	adds	r3, #84	; 0x54
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d108      	bne.n	8005f94 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	2101      	movs	r1, #1
 8005f90:	f004 fca8 	bl	800a8e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f009 fecd 	bl	800fd3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	2308      	movs	r3, #8
 8005fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fee:	461a      	mov	r2, r3
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d023      	beq.n	8006046 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005ffe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006000:	6a38      	ldr	r0, [r7, #32]
 8006002:	f003 fb89 	bl	8009718 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006008:	4613      	mov	r3, r2
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	3338      	adds	r3, #56	; 0x38
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	3304      	adds	r3, #4
 8006018:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d108      	bne.n	8006034 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	b2db      	uxtb	r3, r3
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f009 ff10 	bl	800fe54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	461a      	mov	r2, r3
 8006042:	2302      	movs	r3, #2
 8006044:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fcdb 	bl	8006a0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	f47f af2e 	bne.w	8005ec8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f004 fb73 	bl	800a75c <USB_ReadInterrupts>
 8006076:	4603      	mov	r3, r0
 8006078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800607c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006080:	d122      	bne.n	80060c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800609c:	2b01      	cmp	r3, #1
 800609e:	d108      	bne.n	80060b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fec2 	bl	8006e34 <HAL_PCDEx_LPM_Callback>
 80060b0:	e002      	b.n	80060b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f009 feae 	bl	800fe14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80060c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f004 fb45 	bl	800a75c <USB_ReadInterrupts>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	d112      	bne.n	8006104 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d102      	bne.n	80060f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f009 fe6a 	bl	800fdc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006102:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f004 fb27 	bl	800a75c <USB_ReadInterrupts>
 800610e:	4603      	mov	r3, r0
 8006110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	f040 80b7 	bne.w	800628a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2110      	movs	r1, #16
 8006136:	4618      	mov	r0, r3
 8006138:	f003 faee 	bl	8009718 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613c:	2300      	movs	r3, #0
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006140:	e046      	b.n	80061d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	461a      	mov	r2, r3
 8006150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006154:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006170:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006174:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006182:	461a      	mov	r2, r3
 8006184:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006188:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	3301      	adds	r3, #1
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d3b3      	bcc.n	8006142 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80061ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d016      	beq.n	8006224 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006206:	f043 030b 	orr.w	r3, r3, #11
 800620a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621c:	f043 030b 	orr.w	r3, r3, #11
 8006220:	6453      	str	r3, [r2, #68]	; 0x44
 8006222:	e015      	b.n	8006250 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006232:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006236:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800623a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800624a:	f043 030b 	orr.w	r3, r3, #11
 800624e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800625e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006262:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006274:	461a      	mov	r2, r3
 8006276:	f004 fb35 	bl	800a8e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f004 fa64 	bl	800a75c <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629e:	d124      	bne.n	80062ea <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f004 fafa 	bl	800a89e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f003 faaf 	bl	8009812 <USB_GetDevSpeed>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681c      	ldr	r4, [r3, #0]
 80062c0:	f001 fa26 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 80062c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	4620      	mov	r0, r4
 80062d0:	f002 ffae 	bl	8009230 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f009 fd58 	bl	800fd8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80062e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f004 fa34 	bl	800a75c <USB_ReadInterrupts>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d10a      	bne.n	8006314 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f009 fd35 	bl	800fd6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f002 0208 	and.w	r2, r2, #8
 8006312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f004 fa1f 	bl	800a75c <USB_ReadInterrupts>
 800631e:	4603      	mov	r3, r0
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	2b80      	cmp	r3, #128	; 0x80
 8006326:	d122      	bne.n	800636e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006334:	2301      	movs	r3, #1
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
 8006338:	e014      	b.n	8006364 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d105      	bne.n	800635e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	b2db      	uxtb	r3, r3
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fb27 	bl	80069ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	3301      	adds	r3, #1
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	429a      	cmp	r2, r3
 800636c:	d3e5      	bcc.n	800633a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f004 f9f2 	bl	800a75c <USB_ReadInterrupts>
 8006378:	4603      	mov	r3, r0
 800637a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800637e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006382:	d13b      	bne.n	80063fc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006384:	2301      	movs	r3, #1
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
 8006388:	e02b      	b.n	80063e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	3340      	adds	r3, #64	; 0x40
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d115      	bne.n	80063dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80063b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	da12      	bge.n	80063dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	4613      	mov	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	333f      	adds	r3, #63	; 0x3f
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fae8 	bl	80069ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d3ce      	bcc.n	800638a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80063fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f004 f9ab 	bl	800a75c <USB_ReadInterrupts>
 8006406:	4603      	mov	r3, r0
 8006408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800640c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006410:	d155      	bne.n	80064be <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006412:	2301      	movs	r3, #1
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
 8006416:	e045      	b.n	80064a4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642c:	4613      	mov	r3, r2
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d12e      	bne.n	800649e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006440:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006442:	2b00      	cmp	r3, #0
 8006444:	da2b      	bge.n	800649e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006452:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006456:	429a      	cmp	r2, r3
 8006458:	d121      	bne.n	800649e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645e:	4613      	mov	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800646c:	2201      	movs	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800649a:	6053      	str	r3, [r2, #4]
            break;
 800649c:	e007      	b.n	80064ae <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	3301      	adds	r3, #1
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3b4      	bcc.n	8006418 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80064bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f004 f94a 	bl	800a75c <USB_ReadInterrupts>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d2:	d10a      	bne.n	80064ea <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f009 fccf 	bl	800fe78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80064e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f004 f934 	bl	800a75c <USB_ReadInterrupts>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d115      	bne.n	800652a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f009 fcbf 	bl	800fe94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	e000      	b.n	800652a <HAL_PCD_IRQHandler+0x938>
      return;
 8006528:	bf00      	nop
    }
  }
}
 800652a:	3734      	adds	r7, #52	; 0x34
 800652c:	46bd      	mov	sp, r7
 800652e:	bd90      	pop	{r4, r7, pc}

08006530 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_PCD_SetAddress+0x1a>
 8006546:	2302      	movs	r3, #2
 8006548:	e013      	b.n	8006572 <HAL_PCD_SetAddress+0x42>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	78fa      	ldrb	r2, [r7, #3]
 8006556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	78fa      	ldrb	r2, [r7, #3]
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f004 f892 	bl	800a68c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	4608      	mov	r0, r1
 8006584:	4611      	mov	r1, r2
 8006586:	461a      	mov	r2, r3
 8006588:	4603      	mov	r3, r0
 800658a:	70fb      	strb	r3, [r7, #3]
 800658c:	460b      	mov	r3, r1
 800658e:	803b      	strh	r3, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800659c:	2b00      	cmp	r3, #0
 800659e:	da0f      	bge.n	80065c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	f003 020f 	and.w	r2, r3, #15
 80065a6:	4613      	mov	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	3338      	adds	r3, #56	; 0x38
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4413      	add	r3, r2
 80065b4:	3304      	adds	r3, #4
 80065b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	705a      	strb	r2, [r3, #1]
 80065be:	e00f      	b.n	80065e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	f003 020f 	and.w	r2, r3, #15
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	4413      	add	r3, r2
 80065d6:	3304      	adds	r3, #4
 80065d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80065ec:	883a      	ldrh	r2, [r7, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	78ba      	ldrb	r2, [r7, #2]
 80065f6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d004      	beq.n	800660a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800660a:	78bb      	ldrb	r3, [r7, #2]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d102      	bne.n	8006616 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_PCD_EP_Open+0xaa>
 8006620:	2302      	movs	r3, #2
 8006622:	e00e      	b.n	8006642 <HAL_PCD_EP_Open+0xc8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68f9      	ldr	r1, [r7, #12]
 8006632:	4618      	mov	r0, r3
 8006634:	f003 f912 	bl	800985c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006640:	7afb      	ldrb	r3, [r7, #11]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800665a:	2b00      	cmp	r3, #0
 800665c:	da0f      	bge.n	800667e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	f003 020f 	and.w	r2, r3, #15
 8006664:	4613      	mov	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	3338      	adds	r3, #56	; 0x38
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4413      	add	r3, r2
 8006672:	3304      	adds	r3, #4
 8006674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	705a      	strb	r2, [r3, #1]
 800667c:	e00f      	b.n	800669e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	f003 020f 	and.w	r2, r3, #15
 8006684:	4613      	mov	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	3304      	adds	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_PCD_EP_Close+0x6e>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e00e      	b.n	80066d6 <HAL_PCD_EP_Close+0x8c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f003 f950 	bl	800996c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	460b      	mov	r3, r1
 80066ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066ee:	7afb      	ldrb	r3, [r7, #11]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	3304      	adds	r3, #4
 8006706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2200      	movs	r2, #0
 8006718:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2200      	movs	r2, #0
 800671e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	b2da      	uxtb	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d102      	bne.n	800673a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800673a:	7afb      	ldrb	r3, [r7, #11]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	6979      	ldr	r1, [r7, #20]
 8006752:	f003 fc2f 	bl	8009fb4 <USB_EP0StartXfer>
 8006756:	e008      	b.n	800676a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	f003 f9dd 	bl	8009b24 <USB_EPStartXfer>
  }

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	f003 020f 	and.w	r2, r3, #15
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	4613      	mov	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006796:	681b      	ldr	r3, [r3, #0]
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	460b      	mov	r3, r1
 80067b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	f003 020f 	and.w	r2, r3, #15
 80067ba:	4613      	mov	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	3338      	adds	r3, #56	; 0x38
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	3304      	adds	r3, #4
 80067ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2200      	movs	r2, #0
 80067dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2201      	movs	r2, #1
 80067e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d102      	bne.n	80067fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	6979      	ldr	r1, [r7, #20]
 8006816:	f003 fbcd 	bl	8009fb4 <USB_EP0StartXfer>
 800681a:	e008      	b.n	800682e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	6979      	ldr	r1, [r7, #20]
 800682a:	f003 f97b 	bl	8009b24 <USB_EPStartXfer>
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	f003 020f 	and.w	r2, r3, #15
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	429a      	cmp	r2, r3
 8006850:	d901      	bls.n	8006856 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e050      	b.n	80068f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800685a:	2b00      	cmp	r3, #0
 800685c:	da0f      	bge.n	800687e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	4613      	mov	r3, r2
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	3338      	adds	r3, #56	; 0x38
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	3304      	adds	r3, #4
 8006874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	705a      	strb	r2, [r3, #1]
 800687c:	e00d      	b.n	800689a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	3304      	adds	r3, #4
 8006892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_PCD_EP_SetStall+0x82>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e01e      	b.n	80068f8 <HAL_PCD_EP_SetStall+0xc0>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f003 fe0b 	bl	800a4e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	b2d9      	uxtb	r1, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068e8:	461a      	mov	r2, r3
 80068ea:	f003 fffb 	bl	800a8e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	f003 020f 	and.w	r2, r3, #15
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d901      	bls.n	800691e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e042      	b.n	80069a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800691e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006922:	2b00      	cmp	r3, #0
 8006924:	da0f      	bge.n	8006946 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	f003 020f 	and.w	r2, r3, #15
 800692c:	4613      	mov	r3, r2
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	3338      	adds	r3, #56	; 0x38
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4413      	add	r3, r2
 800693a:	3304      	adds	r3, #4
 800693c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	705a      	strb	r2, [r3, #1]
 8006944:	e00f      	b.n	8006966 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	f003 020f 	and.w	r2, r3, #15
 800694c:	4613      	mov	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	4413      	add	r3, r2
 800695c:	3304      	adds	r3, #4
 800695e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	b2da      	uxtb	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_PCD_EP_ClrStall+0x86>
 8006982:	2302      	movs	r3, #2
 8006984:	e00e      	b.n	80069a4 <HAL_PCD_EP_ClrStall+0xa4>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	4618      	mov	r0, r3
 8006996:	f003 fe13 	bl	800a5c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80069b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	da0c      	bge.n	80069da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	f003 020f 	and.w	r2, r3, #15
 80069c6:	4613      	mov	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	3338      	adds	r3, #56	; 0x38
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	4413      	add	r3, r2
 80069d4:	3304      	adds	r3, #4
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e00c      	b.n	80069f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	3304      	adds	r3, #4
 80069f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f003 fc32 	bl	800a264 <USB_EPStopXfer>
 8006a00:	4603      	mov	r3, r0
 8006a02:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006a04:	7afb      	ldrb	r3, [r7, #11]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08a      	sub	sp, #40	; 0x28
 8006a12:	af02      	add	r7, sp, #8
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	3338      	adds	r3, #56	; 0x38
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	3304      	adds	r3, #4
 8006a34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1a      	ldr	r2, [r3, #32]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d901      	bls.n	8006a46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e06c      	b.n	8006b20 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d902      	bls.n	8006a62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	3303      	adds	r3, #3
 8006a66:	089b      	lsrs	r3, r3, #2
 8006a68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a6a:	e02b      	b.n	8006ac4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d902      	bls.n	8006a88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	3303      	adds	r3, #3
 8006a8c:	089b      	lsrs	r3, r3, #2
 8006a8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6919      	ldr	r1, [r3, #16]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	6978      	ldr	r0, [r7, #20]
 8006aa8:	f003 fc86 	bl	800a3b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	441a      	add	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	441a      	add	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d809      	bhi.n	8006aee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1a      	ldr	r2, [r3, #32]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d203      	bcs.n	8006aee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1be      	bne.n	8006a6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d811      	bhi.n	8006b1e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	2201      	movs	r2, #1
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	43db      	mvns	r3, r3
 8006b14:	6939      	ldr	r1, [r7, #16]
 8006b16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	333c      	adds	r3, #60	; 0x3c
 8006b40:	3304      	adds	r3, #4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d17b      	bne.n	8006c56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d015      	beq.n	8006b94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4a61      	ldr	r2, [pc, #388]	; (8006cf0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	f240 80b9 	bls.w	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80b3 	beq.w	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b90:	6093      	str	r3, [r2, #8]
 8006b92:	e0a7      	b.n	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d009      	beq.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	461a      	mov	r2, r3
 8006bac:	2320      	movs	r3, #32
 8006bae:	6093      	str	r3, [r2, #8]
 8006bb0:	e098      	b.n	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f040 8093 	bne.w	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	4a4b      	ldr	r2, [pc, #300]	; (8006cf0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d90f      	bls.n	8006be6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006be2:	6093      	str	r3, [r2, #8]
 8006be4:	e07e      	b.n	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	4613      	mov	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	0159      	lsls	r1, r3, #5
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	440b      	add	r3, r1
 8006c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d114      	bne.n	8006c48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c30:	461a      	mov	r2, r3
 8006c32:	2101      	movs	r1, #1
 8006c34:	f003 fe56 	bl	800a8e4 <USB_EP0_OutStart>
 8006c38:	e006      	b.n	8006c48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f009 f858 	bl	800fd04 <HAL_PCD_DataOutStageCallback>
 8006c54:	e046      	b.n	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d124      	bne.n	8006ca8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c74:	461a      	mov	r2, r3
 8006c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7a:	6093      	str	r3, [r2, #8]
 8006c7c:	e032      	b.n	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c94:	461a      	mov	r2, r3
 8006c96:	2320      	movs	r3, #32
 8006c98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f009 f82f 	bl	800fd04 <HAL_PCD_DataOutStageCallback>
 8006ca6:	e01d      	b.n	8006ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d114      	bne.n	8006cd8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d108      	bne.n	8006cd8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	f003 fe06 	bl	800a8e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f009 f810 	bl	800fd04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	4f54300a 	.word	0x4f54300a
 8006cf4:	4f54310a 	.word	0x4f54310a

08006cf8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	333c      	adds	r3, #60	; 0x3c
 8006d10:	3304      	adds	r3, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d90e      	bls.n	8006d4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d009      	beq.n	8006d4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	461a      	mov	r2, r3
 8006d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f008 ffc7 	bl	800fce0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d90c      	bls.n	8006d74 <PCD_EP_OutSetupPacket_int+0x7c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d108      	bne.n	8006d74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	2101      	movs	r1, #1
 8006d70:	f003 fdb8 	bl	800a8e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	4f54300a 	.word	0x4f54300a

08006d84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
 8006d90:	4613      	mov	r3, r2
 8006d92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d107      	bne.n	8006db2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006da2:	883b      	ldrh	r3, [r7, #0]
 8006da4:	0419      	lsls	r1, r3, #16
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28
 8006db0:	e028      	b.n	8006e04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e00d      	b.n	8006de2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	3340      	adds	r3, #64	; 0x40
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4413      	add	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	3301      	adds	r3, #1
 8006de0:	73fb      	strb	r3, [r7, #15]
 8006de2:	7bfa      	ldrb	r2, [r7, #15]
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d3ec      	bcc.n	8006dc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006dec:	883b      	ldrh	r3, [r7, #0]
 8006dee:	0418      	lsls	r0, r3, #16
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	4302      	orrs	r2, r0
 8006dfc:	3340      	adds	r3, #64	; 0x40
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	440b      	add	r3, r1
 8006e02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	887a      	ldrh	r2, [r7, #2]
 8006e24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e267      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d075      	beq.n	8006f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e6a:	4b88      	ldr	r3, [pc, #544]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 030c 	and.w	r3, r3, #12
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d00c      	beq.n	8006e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e76:	4b85      	ldr	r3, [pc, #532]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d112      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e82:	4b82      	ldr	r3, [pc, #520]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e8e:	d10b      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e90:	4b7e      	ldr	r3, [pc, #504]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d05b      	beq.n	8006f54 <HAL_RCC_OscConfig+0x108>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d157      	bne.n	8006f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e242      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb0:	d106      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x74>
 8006eb2:	4b76      	ldr	r3, [pc, #472]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a75      	ldr	r2, [pc, #468]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	e01d      	b.n	8006efc <HAL_RCC_OscConfig+0xb0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x98>
 8006eca:	4b70      	ldr	r3, [pc, #448]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a6f      	ldr	r2, [pc, #444]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	4b6d      	ldr	r3, [pc, #436]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a6c      	ldr	r2, [pc, #432]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e00b      	b.n	8006efc <HAL_RCC_OscConfig+0xb0>
 8006ee4:	4b69      	ldr	r3, [pc, #420]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a68      	ldr	r2, [pc, #416]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	4b66      	ldr	r3, [pc, #408]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a65      	ldr	r2, [pc, #404]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d013      	beq.n	8006f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f04:	f7fd fa86 	bl	8004414 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f0c:	f7fd fa82 	bl	8004414 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b64      	cmp	r3, #100	; 0x64
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e207      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f1e:	4b5b      	ldr	r3, [pc, #364]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0f0      	beq.n	8006f0c <HAL_RCC_OscConfig+0xc0>
 8006f2a:	e014      	b.n	8006f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fd fa72 	bl	8004414 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f34:	f7fd fa6e 	bl	8004414 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	; 0x64
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e1f3      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f46:	4b51      	ldr	r3, [pc, #324]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f0      	bne.n	8006f34 <HAL_RCC_OscConfig+0xe8>
 8006f52:	e000      	b.n	8006f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d063      	beq.n	800702a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f62:	4b4a      	ldr	r3, [pc, #296]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 030c 	and.w	r3, r3, #12
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f6e:	4b47      	ldr	r3, [pc, #284]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d11c      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f7a:	4b44      	ldr	r3, [pc, #272]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d116      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f86:	4b41      	ldr	r3, [pc, #260]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <HAL_RCC_OscConfig+0x152>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d001      	beq.n	8006f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e1c7      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f9e:	4b3b      	ldr	r3, [pc, #236]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4937      	ldr	r1, [pc, #220]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fb2:	e03a      	b.n	800702a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d020      	beq.n	8006ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fbc:	4b34      	ldr	r3, [pc, #208]	; (8007090 <HAL_RCC_OscConfig+0x244>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc2:	f7fd fa27 	bl	8004414 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fca:	f7fd fa23 	bl	8004414 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e1a8      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fdc:	4b2b      	ldr	r3, [pc, #172]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe8:	4b28      	ldr	r3, [pc, #160]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4925      	ldr	r1, [pc, #148]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	600b      	str	r3, [r1, #0]
 8006ffc:	e015      	b.n	800702a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <HAL_RCC_OscConfig+0x244>)
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fd fa06 	bl	8004414 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800700c:	f7fd fa02 	bl	8004414 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e187      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800701e:	4b1b      	ldr	r3, [pc, #108]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d036      	beq.n	80070a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d016      	beq.n	800706c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800703e:	4b15      	ldr	r3, [pc, #84]	; (8007094 <HAL_RCC_OscConfig+0x248>)
 8007040:	2201      	movs	r2, #1
 8007042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007044:	f7fd f9e6 	bl	8004414 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800704c:	f7fd f9e2 	bl	8004414 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e167      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800705e:	4b0b      	ldr	r3, [pc, #44]	; (800708c <HAL_RCC_OscConfig+0x240>)
 8007060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0x200>
 800706a:	e01b      	b.n	80070a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800706c:	4b09      	ldr	r3, [pc, #36]	; (8007094 <HAL_RCC_OscConfig+0x248>)
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007072:	f7fd f9cf 	bl	8004414 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007078:	e00e      	b.n	8007098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800707a:	f7fd f9cb 	bl	8004414 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d907      	bls.n	8007098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e150      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
 800708c:	40023800 	.word	0x40023800
 8007090:	42470000 	.word	0x42470000
 8007094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007098:	4b88      	ldr	r3, [pc, #544]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 800709a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1ea      	bne.n	800707a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8097 	beq.w	80071e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070b6:	4b81      	ldr	r3, [pc, #516]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10f      	bne.n	80070e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	4b7d      	ldr	r3, [pc, #500]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	4a7c      	ldr	r2, [pc, #496]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80070cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070d0:	6413      	str	r3, [r2, #64]	; 0x40
 80070d2:	4b7a      	ldr	r3, [pc, #488]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070da:	60bb      	str	r3, [r7, #8]
 80070dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070de:	2301      	movs	r3, #1
 80070e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e2:	4b77      	ldr	r3, [pc, #476]	; (80072c0 <HAL_RCC_OscConfig+0x474>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d118      	bne.n	8007120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070ee:	4b74      	ldr	r3, [pc, #464]	; (80072c0 <HAL_RCC_OscConfig+0x474>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a73      	ldr	r2, [pc, #460]	; (80072c0 <HAL_RCC_OscConfig+0x474>)
 80070f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070fa:	f7fd f98b 	bl	8004414 <HAL_GetTick>
 80070fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007102:	f7fd f987 	bl	8004414 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e10c      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007114:	4b6a      	ldr	r3, [pc, #424]	; (80072c0 <HAL_RCC_OscConfig+0x474>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d106      	bne.n	8007136 <HAL_RCC_OscConfig+0x2ea>
 8007128:	4b64      	ldr	r3, [pc, #400]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 800712a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712c:	4a63      	ldr	r2, [pc, #396]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	6713      	str	r3, [r2, #112]	; 0x70
 8007134:	e01c      	b.n	8007170 <HAL_RCC_OscConfig+0x324>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b05      	cmp	r3, #5
 800713c:	d10c      	bne.n	8007158 <HAL_RCC_OscConfig+0x30c>
 800713e:	4b5f      	ldr	r3, [pc, #380]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 8007140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007142:	4a5e      	ldr	r2, [pc, #376]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 8007144:	f043 0304 	orr.w	r3, r3, #4
 8007148:	6713      	str	r3, [r2, #112]	; 0x70
 800714a:	4b5c      	ldr	r3, [pc, #368]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 800714c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714e:	4a5b      	ldr	r2, [pc, #364]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 8007150:	f043 0301 	orr.w	r3, r3, #1
 8007154:	6713      	str	r3, [r2, #112]	; 0x70
 8007156:	e00b      	b.n	8007170 <HAL_RCC_OscConfig+0x324>
 8007158:	4b58      	ldr	r3, [pc, #352]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 800715a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715c:	4a57      	ldr	r2, [pc, #348]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	6713      	str	r3, [r2, #112]	; 0x70
 8007164:	4b55      	ldr	r3, [pc, #340]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 8007166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007168:	4a54      	ldr	r2, [pc, #336]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 800716a:	f023 0304 	bic.w	r3, r3, #4
 800716e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d015      	beq.n	80071a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007178:	f7fd f94c 	bl	8004414 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717e:	e00a      	b.n	8007196 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007180:	f7fd f948 	bl	8004414 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	f241 3288 	movw	r2, #5000	; 0x1388
 800718e:	4293      	cmp	r3, r2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e0cb      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007196:	4b49      	ldr	r3, [pc, #292]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0ee      	beq.n	8007180 <HAL_RCC_OscConfig+0x334>
 80071a2:	e014      	b.n	80071ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071a4:	f7fd f936 	bl	8004414 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071aa:	e00a      	b.n	80071c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ac:	f7fd f932 	bl	8004414 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e0b5      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071c2:	4b3e      	ldr	r3, [pc, #248]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1ee      	bne.n	80071ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d105      	bne.n	80071e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071d4:	4b39      	ldr	r3, [pc, #228]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	4a38      	ldr	r2, [pc, #224]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80071da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 80a1 	beq.w	800732c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071ea:	4b34      	ldr	r3, [pc, #208]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 030c 	and.w	r3, r3, #12
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d05c      	beq.n	80072b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d141      	bne.n	8007282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071fe:	4b31      	ldr	r3, [pc, #196]	; (80072c4 <HAL_RCC_OscConfig+0x478>)
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007204:	f7fd f906 	bl	8004414 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800720c:	f7fd f902 	bl	8004414 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e087      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800721e:	4b27      	ldr	r3, [pc, #156]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1f0      	bne.n	800720c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	019b      	lsls	r3, r3, #6
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	085b      	lsrs	r3, r3, #1
 8007242:	3b01      	subs	r3, #1
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	491b      	ldr	r1, [pc, #108]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 8007250:	4313      	orrs	r3, r2
 8007252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007254:	4b1b      	ldr	r3, [pc, #108]	; (80072c4 <HAL_RCC_OscConfig+0x478>)
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725a:	f7fd f8db 	bl	8004414 <HAL_GetTick>
 800725e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007262:	f7fd f8d7 	bl	8004414 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e05c      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007274:	4b11      	ldr	r3, [pc, #68]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <HAL_RCC_OscConfig+0x416>
 8007280:	e054      	b.n	800732c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007282:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <HAL_RCC_OscConfig+0x478>)
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007288:	f7fd f8c4 	bl	8004414 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007290:	f7fd f8c0 	bl	8004414 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e045      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072a2:	4b06      	ldr	r3, [pc, #24]	; (80072bc <HAL_RCC_OscConfig+0x470>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1f0      	bne.n	8007290 <HAL_RCC_OscConfig+0x444>
 80072ae:	e03d      	b.n	800732c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d107      	bne.n	80072c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e038      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
 80072bc:	40023800 	.word	0x40023800
 80072c0:	40007000 	.word	0x40007000
 80072c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072c8:	4b1b      	ldr	r3, [pc, #108]	; (8007338 <HAL_RCC_OscConfig+0x4ec>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d028      	beq.n	8007328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d121      	bne.n	8007328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d11a      	bne.n	8007328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072f8:	4013      	ands	r3, r2
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007300:	4293      	cmp	r3, r2
 8007302:	d111      	bne.n	8007328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	085b      	lsrs	r3, r3, #1
 8007310:	3b01      	subs	r3, #1
 8007312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007314:	429a      	cmp	r2, r3
 8007316:	d107      	bne.n	8007328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007324:	429a      	cmp	r2, r3
 8007326:	d001      	beq.n	800732c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	40023800 	.word	0x40023800

0800733c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e0cc      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007350:	4b68      	ldr	r3, [pc, #416]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d90c      	bls.n	8007378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735e:	4b65      	ldr	r3, [pc, #404]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007366:	4b63      	ldr	r3, [pc, #396]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d001      	beq.n	8007378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e0b8      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d020      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007390:	4b59      	ldr	r3, [pc, #356]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	4a58      	ldr	r2, [pc, #352]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800739a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073a8:	4b53      	ldr	r3, [pc, #332]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4a52      	ldr	r2, [pc, #328]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073b4:	4b50      	ldr	r3, [pc, #320]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	494d      	ldr	r1, [pc, #308]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d044      	beq.n	800745c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d107      	bne.n	80073ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073da:	4b47      	ldr	r3, [pc, #284]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d119      	bne.n	800741a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e07f      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d003      	beq.n	80073fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d107      	bne.n	800740a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fa:	4b3f      	ldr	r3, [pc, #252]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e06f      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800740a:	4b3b      	ldr	r3, [pc, #236]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e067      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800741a:	4b37      	ldr	r3, [pc, #220]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f023 0203 	bic.w	r2, r3, #3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	4934      	ldr	r1, [pc, #208]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007428:	4313      	orrs	r3, r2
 800742a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800742c:	f7fc fff2 	bl	8004414 <HAL_GetTick>
 8007430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007432:	e00a      	b.n	800744a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007434:	f7fc ffee 	bl	8004414 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007442:	4293      	cmp	r3, r2
 8007444:	d901      	bls.n	800744a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e04f      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744a:	4b2b      	ldr	r3, [pc, #172]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 020c 	and.w	r2, r3, #12
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	429a      	cmp	r2, r3
 800745a:	d1eb      	bne.n	8007434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800745c:	4b25      	ldr	r3, [pc, #148]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d20c      	bcs.n	8007484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b22      	ldr	r3, [pc, #136]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b20      	ldr	r3, [pc, #128]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d001      	beq.n	8007484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e032      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007490:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4916      	ldr	r1, [pc, #88]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074ae:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	490e      	ldr	r1, [pc, #56]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074c2:	f000 f821 	bl	8007508 <HAL_RCC_GetSysClockFreq>
 80074c6:	4602      	mov	r2, r0
 80074c8:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	091b      	lsrs	r3, r3, #4
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	490a      	ldr	r1, [pc, #40]	; (80074fc <HAL_RCC_ClockConfig+0x1c0>)
 80074d4:	5ccb      	ldrb	r3, [r1, r3]
 80074d6:	fa22 f303 	lsr.w	r3, r2, r3
 80074da:	4a09      	ldr	r2, [pc, #36]	; (8007500 <HAL_RCC_ClockConfig+0x1c4>)
 80074dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <HAL_RCC_ClockConfig+0x1c8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fc fdee 	bl	80040c4 <HAL_InitTick>

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	40023c00 	.word	0x40023c00
 80074f8:	40023800 	.word	0x40023800
 80074fc:	080120e8 	.word	0x080120e8
 8007500:	200005b0 	.word	0x200005b0
 8007504:	200005b4 	.word	0x200005b4

08007508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800750c:	b094      	sub	sp, #80	; 0x50
 800750e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	647b      	str	r3, [r7, #68]	; 0x44
 8007514:	2300      	movs	r3, #0
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007518:	2300      	movs	r3, #0
 800751a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007520:	4b79      	ldr	r3, [pc, #484]	; (8007708 <HAL_RCC_GetSysClockFreq+0x200>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 030c 	and.w	r3, r3, #12
 8007528:	2b08      	cmp	r3, #8
 800752a:	d00d      	beq.n	8007548 <HAL_RCC_GetSysClockFreq+0x40>
 800752c:	2b08      	cmp	r3, #8
 800752e:	f200 80e1 	bhi.w	80076f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <HAL_RCC_GetSysClockFreq+0x34>
 8007536:	2b04      	cmp	r3, #4
 8007538:	d003      	beq.n	8007542 <HAL_RCC_GetSysClockFreq+0x3a>
 800753a:	e0db      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800753c:	4b73      	ldr	r3, [pc, #460]	; (800770c <HAL_RCC_GetSysClockFreq+0x204>)
 800753e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007540:	e0db      	b.n	80076fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007542:	4b72      	ldr	r3, [pc, #456]	; (800770c <HAL_RCC_GetSysClockFreq+0x204>)
 8007544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007546:	e0d8      	b.n	80076fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007548:	4b6f      	ldr	r3, [pc, #444]	; (8007708 <HAL_RCC_GetSysClockFreq+0x200>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007550:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007552:	4b6d      	ldr	r3, [pc, #436]	; (8007708 <HAL_RCC_GetSysClockFreq+0x200>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d063      	beq.n	8007626 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800755e:	4b6a      	ldr	r3, [pc, #424]	; (8007708 <HAL_RCC_GetSysClockFreq+0x200>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	099b      	lsrs	r3, r3, #6
 8007564:	2200      	movs	r2, #0
 8007566:	63bb      	str	r3, [r7, #56]	; 0x38
 8007568:	63fa      	str	r2, [r7, #60]	; 0x3c
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007570:	633b      	str	r3, [r7, #48]	; 0x30
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
 8007576:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800757a:	4622      	mov	r2, r4
 800757c:	462b      	mov	r3, r5
 800757e:	f04f 0000 	mov.w	r0, #0
 8007582:	f04f 0100 	mov.w	r1, #0
 8007586:	0159      	lsls	r1, r3, #5
 8007588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800758c:	0150      	lsls	r0, r2, #5
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4621      	mov	r1, r4
 8007594:	1a51      	subs	r1, r2, r1
 8007596:	6139      	str	r1, [r7, #16]
 8007598:	4629      	mov	r1, r5
 800759a:	eb63 0301 	sbc.w	r3, r3, r1
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075ac:	4659      	mov	r1, fp
 80075ae:	018b      	lsls	r3, r1, #6
 80075b0:	4651      	mov	r1, sl
 80075b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075b6:	4651      	mov	r1, sl
 80075b8:	018a      	lsls	r2, r1, #6
 80075ba:	4651      	mov	r1, sl
 80075bc:	ebb2 0801 	subs.w	r8, r2, r1
 80075c0:	4659      	mov	r1, fp
 80075c2:	eb63 0901 	sbc.w	r9, r3, r1
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075da:	4690      	mov	r8, r2
 80075dc:	4699      	mov	r9, r3
 80075de:	4623      	mov	r3, r4
 80075e0:	eb18 0303 	adds.w	r3, r8, r3
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	462b      	mov	r3, r5
 80075e8:	eb49 0303 	adc.w	r3, r9, r3
 80075ec:	60fb      	str	r3, [r7, #12]
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80075fa:	4629      	mov	r1, r5
 80075fc:	028b      	lsls	r3, r1, #10
 80075fe:	4621      	mov	r1, r4
 8007600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007604:	4621      	mov	r1, r4
 8007606:	028a      	lsls	r2, r1, #10
 8007608:	4610      	mov	r0, r2
 800760a:	4619      	mov	r1, r3
 800760c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760e:	2200      	movs	r2, #0
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
 8007612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007618:	f7f9 f940 	bl	800089c <__aeabi_uldivmod>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4613      	mov	r3, r2
 8007622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007624:	e058      	b.n	80076d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007626:	4b38      	ldr	r3, [pc, #224]	; (8007708 <HAL_RCC_GetSysClockFreq+0x200>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	099b      	lsrs	r3, r3, #6
 800762c:	2200      	movs	r2, #0
 800762e:	4618      	mov	r0, r3
 8007630:	4611      	mov	r1, r2
 8007632:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007636:	623b      	str	r3, [r7, #32]
 8007638:	2300      	movs	r3, #0
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
 800763c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007640:	4642      	mov	r2, r8
 8007642:	464b      	mov	r3, r9
 8007644:	f04f 0000 	mov.w	r0, #0
 8007648:	f04f 0100 	mov.w	r1, #0
 800764c:	0159      	lsls	r1, r3, #5
 800764e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007652:	0150      	lsls	r0, r2, #5
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4641      	mov	r1, r8
 800765a:	ebb2 0a01 	subs.w	sl, r2, r1
 800765e:	4649      	mov	r1, r9
 8007660:	eb63 0b01 	sbc.w	fp, r3, r1
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007670:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007674:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007678:	ebb2 040a 	subs.w	r4, r2, sl
 800767c:	eb63 050b 	sbc.w	r5, r3, fp
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	00eb      	lsls	r3, r5, #3
 800768a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800768e:	00e2      	lsls	r2, r4, #3
 8007690:	4614      	mov	r4, r2
 8007692:	461d      	mov	r5, r3
 8007694:	4643      	mov	r3, r8
 8007696:	18e3      	adds	r3, r4, r3
 8007698:	603b      	str	r3, [r7, #0]
 800769a:	464b      	mov	r3, r9
 800769c:	eb45 0303 	adc.w	r3, r5, r3
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076ae:	4629      	mov	r1, r5
 80076b0:	028b      	lsls	r3, r1, #10
 80076b2:	4621      	mov	r1, r4
 80076b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076b8:	4621      	mov	r1, r4
 80076ba:	028a      	lsls	r2, r1, #10
 80076bc:	4610      	mov	r0, r2
 80076be:	4619      	mov	r1, r3
 80076c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c2:	2200      	movs	r2, #0
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	61fa      	str	r2, [r7, #28]
 80076c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076cc:	f7f9 f8e6 	bl	800089c <__aeabi_uldivmod>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4613      	mov	r3, r2
 80076d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076d8:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <HAL_RCC_GetSysClockFreq+0x200>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	0c1b      	lsrs	r3, r3, #16
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	3301      	adds	r3, #1
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80076e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076f2:	e002      	b.n	80076fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <HAL_RCC_GetSysClockFreq+0x204>)
 80076f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3750      	adds	r7, #80	; 0x50
 8007700:	46bd      	mov	sp, r7
 8007702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800
 800770c:	00f42400 	.word	0x00f42400

08007710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007714:	4b03      	ldr	r3, [pc, #12]	; (8007724 <HAL_RCC_GetHCLKFreq+0x14>)
 8007716:	681b      	ldr	r3, [r3, #0]
}
 8007718:	4618      	mov	r0, r3
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	200005b0 	.word	0x200005b0

08007728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800772c:	f7ff fff0 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8007730:	4602      	mov	r2, r0
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	0a9b      	lsrs	r3, r3, #10
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	4903      	ldr	r1, [pc, #12]	; (800774c <HAL_RCC_GetPCLK1Freq+0x24>)
 800773e:	5ccb      	ldrb	r3, [r1, r3]
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40023800 	.word	0x40023800
 800774c:	080120f8 	.word	0x080120f8

08007750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220f      	movs	r2, #15
 800775e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007760:	4b12      	ldr	r3, [pc, #72]	; (80077ac <HAL_RCC_GetClockConfig+0x5c>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 0203 	and.w	r2, r3, #3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800776c:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <HAL_RCC_GetClockConfig+0x5c>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <HAL_RCC_GetClockConfig+0x5c>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007784:	4b09      	ldr	r3, [pc, #36]	; (80077ac <HAL_RCC_GetClockConfig+0x5c>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	08db      	lsrs	r3, r3, #3
 800778a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007792:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <HAL_RCC_GetClockConfig+0x60>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0207 	and.w	r2, r3, #7
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	601a      	str	r2, [r3, #0]
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40023800 	.word	0x40023800
 80077b0:	40023c00 	.word	0x40023c00

080077b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e07b      	b.n	80078be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d108      	bne.n	80077e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d6:	d009      	beq.n	80077ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	61da      	str	r2, [r3, #28]
 80077de:	e005      	b.n	80077ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fc fb70 	bl	8003eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007822:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007870:	ea42 0103 	orr.w	r1, r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	0c1b      	lsrs	r3, r3, #16
 800788a:	f003 0104 	and.w	r1, r3, #4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	f003 0210 	and.w	r2, r3, #16
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b088      	sub	sp, #32
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d101      	bne.n	80078e8 <HAL_SPI_Transmit+0x22>
 80078e4:	2302      	movs	r3, #2
 80078e6:	e126      	b.n	8007b36 <HAL_SPI_Transmit+0x270>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078f0:	f7fc fd90 	bl	8004414 <HAL_GetTick>
 80078f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	d002      	beq.n	800790c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007906:	2302      	movs	r3, #2
 8007908:	77fb      	strb	r3, [r7, #31]
    goto error;
 800790a:	e10b      	b.n	8007b24 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <HAL_SPI_Transmit+0x52>
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800791c:	e102      	b.n	8007b24 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2203      	movs	r2, #3
 8007922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007964:	d10f      	bne.n	8007986 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007974:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007984:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d007      	beq.n	80079a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ac:	d14b      	bne.n	8007a46 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_Transmit+0xf6>
 80079b6:	8afb      	ldrh	r3, [r7, #22]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d13e      	bne.n	8007a3a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	881a      	ldrh	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079cc:	1c9a      	adds	r2, r3, #2
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079e0:	e02b      	b.n	8007a3a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d112      	bne.n	8007a16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f4:	881a      	ldrh	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	1c9a      	adds	r2, r3, #2
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a14:	e011      	b.n	8007a3a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a16:	f7fc fcfd 	bl	8004414 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d803      	bhi.n	8007a2e <HAL_SPI_Transmit+0x168>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2c:	d102      	bne.n	8007a34 <HAL_SPI_Transmit+0x16e>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a38:	e074      	b.n	8007b24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1ce      	bne.n	80079e2 <HAL_SPI_Transmit+0x11c>
 8007a44:	e04c      	b.n	8007ae0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_SPI_Transmit+0x18e>
 8007a4e:	8afb      	ldrh	r3, [r7, #22]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d140      	bne.n	8007ad6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	330c      	adds	r3, #12
 8007a5e:	7812      	ldrb	r2, [r2, #0]
 8007a60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a7a:	e02c      	b.n	8007ad6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d113      	bne.n	8007ab2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	7812      	ldrb	r2, [r2, #0]
 8007a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ab0:	e011      	b.n	8007ad6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ab2:	f7fc fcaf 	bl	8004414 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d803      	bhi.n	8007aca <HAL_SPI_Transmit+0x204>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac8:	d102      	bne.n	8007ad0 <HAL_SPI_Transmit+0x20a>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ad4:	e026      	b.n	8007b24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1cd      	bne.n	8007a7c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 fa55 	bl	8007f94 <SPI_EndRxTxTransaction>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10a      	bne.n	8007b14 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007afe:	2300      	movs	r3, #0
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e000      	b.n	8007b24 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3720      	adds	r7, #32
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b08c      	sub	sp, #48	; 0x30
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d101      	bne.n	8007b64 <HAL_SPI_TransmitReceive+0x26>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e18a      	b.n	8007e7a <HAL_SPI_TransmitReceive+0x33c>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b6c:	f7fc fc52 	bl	8004414 <HAL_GetTick>
 8007b70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d00f      	beq.n	8007bae <HAL_SPI_TransmitReceive+0x70>
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b94:	d107      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d103      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x68>
 8007b9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d003      	beq.n	8007bae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007bac:	e15b      	b.n	8007e66 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x82>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x82>
 8007bba:	887b      	ldrh	r3, [r7, #2]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007bc6:	e14e      	b.n	8007e66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d003      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2205      	movs	r2, #5
 8007bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	887a      	ldrh	r2, [r7, #2]
 8007bec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	887a      	ldrh	r2, [r7, #2]
 8007bf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	887a      	ldrh	r2, [r7, #2]
 8007bfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	887a      	ldrh	r2, [r7, #2]
 8007c04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1c:	2b40      	cmp	r3, #64	; 0x40
 8007c1e:	d007      	beq.n	8007c30 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c38:	d178      	bne.n	8007d2c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <HAL_SPI_TransmitReceive+0x10a>
 8007c42:	8b7b      	ldrh	r3, [r7, #26]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d166      	bne.n	8007d16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	881a      	ldrh	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	1c9a      	adds	r2, r3, #2
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c6c:	e053      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d11b      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x176>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d016      	beq.n	8007cb4 <HAL_SPI_TransmitReceive+0x176>
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d113      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c90:	881a      	ldrh	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9c:	1c9a      	adds	r2, r3, #2
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d119      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x1b8>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d014      	beq.n	8007cf6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	1c9a      	adds	r2, r3, #2
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cf6:	f7fc fb8d 	bl	8004414 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d807      	bhi.n	8007d16 <HAL_SPI_TransmitReceive+0x1d8>
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d003      	beq.n	8007d16 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d14:	e0a7      	b.n	8007e66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1a6      	bne.n	8007c6e <HAL_SPI_TransmitReceive+0x130>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1a1      	bne.n	8007c6e <HAL_SPI_TransmitReceive+0x130>
 8007d2a:	e07c      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <HAL_SPI_TransmitReceive+0x1fc>
 8007d34:	8b7b      	ldrh	r3, [r7, #26]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d16b      	bne.n	8007e12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	330c      	adds	r3, #12
 8007d44:	7812      	ldrb	r2, [r2, #0]
 8007d46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d60:	e057      	b.n	8007e12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d11c      	bne.n	8007daa <HAL_SPI_TransmitReceive+0x26c>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d017      	beq.n	8007daa <HAL_SPI_TransmitReceive+0x26c>
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d114      	bne.n	8007daa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330c      	adds	r3, #12
 8007d8a:	7812      	ldrb	r2, [r2, #0]
 8007d8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d119      	bne.n	8007dec <HAL_SPI_TransmitReceive+0x2ae>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d014      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007de8:	2301      	movs	r3, #1
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007dec:	f7fc fb12 	bl	8004414 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d803      	bhi.n	8007e04 <HAL_SPI_TransmitReceive+0x2c6>
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d102      	bne.n	8007e0a <HAL_SPI_TransmitReceive+0x2cc>
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e10:	e029      	b.n	8007e66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1a2      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x224>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d19d      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f8b2 	bl	8007f94 <SPI_EndRxTxTransaction>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d006      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e42:	e010      	b.n	8007e66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10b      	bne.n	8007e64 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	e000      	b.n	8007e66 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3730      	adds	r7, #48	; 0x30
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	4613      	mov	r3, r2
 8007e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e94:	f7fc fabe 	bl	8004414 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	1a9b      	subs	r3, r3, r2
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ea4:	f7fc fab6 	bl	8004414 <HAL_GetTick>
 8007ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eaa:	4b39      	ldr	r3, [pc, #228]	; (8007f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	015b      	lsls	r3, r3, #5
 8007eb0:	0d1b      	lsrs	r3, r3, #20
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
 8007eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eba:	e054      	b.n	8007f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec2:	d050      	beq.n	8007f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ec4:	f7fc faa6 	bl	8004414 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d902      	bls.n	8007eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d13d      	bne.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ef2:	d111      	bne.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007efc:	d004      	beq.n	8007f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f06:	d107      	bne.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f20:	d10f      	bne.n	8007f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e017      	b.n	8007f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	bf0c      	ite	eq
 8007f76:	2301      	moveq	r3, #1
 8007f78:	2300      	movne	r3, #0
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d19b      	bne.n	8007ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3720      	adds	r7, #32
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	200005b0 	.word	0x200005b0

08007f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007fa0:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <SPI_EndRxTxTransaction+0x7c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1b      	ldr	r2, [pc, #108]	; (8008014 <SPI_EndRxTxTransaction+0x80>)
 8007fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007faa:	0d5b      	lsrs	r3, r3, #21
 8007fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fb0:	fb02 f303 	mul.w	r3, r2, r3
 8007fb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fbe:	d112      	bne.n	8007fe6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2180      	movs	r1, #128	; 0x80
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f7ff ff5a 	bl	8007e84 <SPI_WaitFlagStateUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d016      	beq.n	8008004 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	f043 0220 	orr.w	r2, r3, #32
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e00f      	b.n	8008006 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffc:	2b80      	cmp	r3, #128	; 0x80
 8007ffe:	d0f2      	beq.n	8007fe6 <SPI_EndRxTxTransaction+0x52>
 8008000:	e000      	b.n	8008004 <SPI_EndRxTxTransaction+0x70>
        break;
 8008002:	bf00      	nop
  }

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	200005b0 	.word	0x200005b0
 8008014:	165e9f81 	.word	0x165e9f81

08008018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e041      	b.n	80080ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7fb ffd2 	bl	8003fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3304      	adds	r3, #4
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f000 fd3a 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d001      	beq.n	80080d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e03c      	b.n	800814a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1e      	ldr	r2, [pc, #120]	; (8008158 <HAL_TIM_Base_Start+0xa0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d018      	beq.n	8008114 <HAL_TIM_Base_Start+0x5c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ea:	d013      	beq.n	8008114 <HAL_TIM_Base_Start+0x5c>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1a      	ldr	r2, [pc, #104]	; (800815c <HAL_TIM_Base_Start+0xa4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00e      	beq.n	8008114 <HAL_TIM_Base_Start+0x5c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a19      	ldr	r2, [pc, #100]	; (8008160 <HAL_TIM_Base_Start+0xa8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d009      	beq.n	8008114 <HAL_TIM_Base_Start+0x5c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a17      	ldr	r2, [pc, #92]	; (8008164 <HAL_TIM_Base_Start+0xac>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <HAL_TIM_Base_Start+0x5c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a16      	ldr	r2, [pc, #88]	; (8008168 <HAL_TIM_Base_Start+0xb0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d111      	bne.n	8008138 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b06      	cmp	r3, #6
 8008124:	d010      	beq.n	8008148 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0201 	orr.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008136:	e007      	b.n	8008148 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40010000 	.word	0x40010000
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40014000 	.word	0x40014000

0800816c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6a1a      	ldr	r2, [r3, #32]
 800817a:	f241 1311 	movw	r3, #4369	; 0x1111
 800817e:	4013      	ands	r3, r2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10f      	bne.n	80081a4 <HAL_TIM_Base_Stop+0x38>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6a1a      	ldr	r2, [r3, #32]
 800818a:	f240 4344 	movw	r3, #1092	; 0x444
 800818e:	4013      	ands	r3, r2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d107      	bne.n	80081a4 <HAL_TIM_Base_Stop+0x38>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
	...

080081bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d001      	beq.n	80081d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e044      	b.n	800825e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1e      	ldr	r2, [pc, #120]	; (800826c <HAL_TIM_Base_Start_IT+0xb0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d018      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x6c>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081fe:	d013      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x6c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1a      	ldr	r2, [pc, #104]	; (8008270 <HAL_TIM_Base_Start_IT+0xb4>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00e      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x6c>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a19      	ldr	r2, [pc, #100]	; (8008274 <HAL_TIM_Base_Start_IT+0xb8>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d009      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x6c>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a17      	ldr	r2, [pc, #92]	; (8008278 <HAL_TIM_Base_Start_IT+0xbc>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x6c>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a16      	ldr	r2, [pc, #88]	; (800827c <HAL_TIM_Base_Start_IT+0xc0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d111      	bne.n	800824c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b06      	cmp	r3, #6
 8008238:	d010      	beq.n	800825c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f042 0201 	orr.w	r2, r2, #1
 8008248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824a:	e007      	b.n	800825c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0201 	orr.w	r2, r2, #1
 800825a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40010000 	.word	0x40010000
 8008270:	40000400 	.word	0x40000400
 8008274:	40000800 	.word	0x40000800
 8008278:	40000c00 	.word	0x40000c00
 800827c:	40014000 	.word	0x40014000

08008280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e041      	b.n	8008316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f839 	bl	800831e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f000 fc06 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
	...

08008334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d109      	bne.n	8008358 <HAL_TIM_PWM_Start+0x24>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b01      	cmp	r3, #1
 800834e:	bf14      	ite	ne
 8008350:	2301      	movne	r3, #1
 8008352:	2300      	moveq	r3, #0
 8008354:	b2db      	uxtb	r3, r3
 8008356:	e022      	b.n	800839e <HAL_TIM_PWM_Start+0x6a>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b04      	cmp	r3, #4
 800835c:	d109      	bne.n	8008372 <HAL_TIM_PWM_Start+0x3e>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b01      	cmp	r3, #1
 8008368:	bf14      	ite	ne
 800836a:	2301      	movne	r3, #1
 800836c:	2300      	moveq	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	e015      	b.n	800839e <HAL_TIM_PWM_Start+0x6a>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b08      	cmp	r3, #8
 8008376:	d109      	bne.n	800838c <HAL_TIM_PWM_Start+0x58>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b01      	cmp	r3, #1
 8008382:	bf14      	ite	ne
 8008384:	2301      	movne	r3, #1
 8008386:	2300      	moveq	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	e008      	b.n	800839e <HAL_TIM_PWM_Start+0x6a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	bf14      	ite	ne
 8008398:	2301      	movne	r3, #1
 800839a:	2300      	moveq	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e068      	b.n	8008478 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_PWM_Start+0x82>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083b4:	e013      	b.n	80083de <HAL_TIM_PWM_Start+0xaa>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_PWM_Start+0x92>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083c4:	e00b      	b.n	80083de <HAL_TIM_PWM_Start+0xaa>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d104      	bne.n	80083d6 <HAL_TIM_PWM_Start+0xa2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d4:	e003      	b.n	80083de <HAL_TIM_PWM_Start+0xaa>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2202      	movs	r2, #2
 80083da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2201      	movs	r2, #1
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fe18 	bl	800901c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a23      	ldr	r2, [pc, #140]	; (8008480 <HAL_TIM_PWM_Start+0x14c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d107      	bne.n	8008406 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008404:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1d      	ldr	r2, [pc, #116]	; (8008480 <HAL_TIM_PWM_Start+0x14c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d018      	beq.n	8008442 <HAL_TIM_PWM_Start+0x10e>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008418:	d013      	beq.n	8008442 <HAL_TIM_PWM_Start+0x10e>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a19      	ldr	r2, [pc, #100]	; (8008484 <HAL_TIM_PWM_Start+0x150>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d00e      	beq.n	8008442 <HAL_TIM_PWM_Start+0x10e>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a17      	ldr	r2, [pc, #92]	; (8008488 <HAL_TIM_PWM_Start+0x154>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d009      	beq.n	8008442 <HAL_TIM_PWM_Start+0x10e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a16      	ldr	r2, [pc, #88]	; (800848c <HAL_TIM_PWM_Start+0x158>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d004      	beq.n	8008442 <HAL_TIM_PWM_Start+0x10e>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a14      	ldr	r2, [pc, #80]	; (8008490 <HAL_TIM_PWM_Start+0x15c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d111      	bne.n	8008466 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b06      	cmp	r3, #6
 8008452:	d010      	beq.n	8008476 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008464:	e007      	b.n	8008476 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f042 0201 	orr.w	r2, r2, #1
 8008474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40010000 	.word	0x40010000
 8008484:	40000400 	.word	0x40000400
 8008488:	40000800 	.word	0x40000800
 800848c:	40000c00 	.word	0x40000c00
 8008490:	40014000 	.word	0x40014000

08008494 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2200      	movs	r2, #0
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fdb8 	bl	800901c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a29      	ldr	r2, [pc, #164]	; (8008558 <HAL_TIM_PWM_Stop+0xc4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d117      	bne.n	80084e6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6a1a      	ldr	r2, [r3, #32]
 80084bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80084c0:	4013      	ands	r3, r2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10f      	bne.n	80084e6 <HAL_TIM_PWM_Stop+0x52>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6a1a      	ldr	r2, [r3, #32]
 80084cc:	f240 4344 	movw	r3, #1092	; 0x444
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d107      	bne.n	80084e6 <HAL_TIM_PWM_Stop+0x52>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6a1a      	ldr	r2, [r3, #32]
 80084ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80084f0:	4013      	ands	r3, r2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10f      	bne.n	8008516 <HAL_TIM_PWM_Stop+0x82>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6a1a      	ldr	r2, [r3, #32]
 80084fc:	f240 4344 	movw	r3, #1092	; 0x444
 8008500:	4013      	ands	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d107      	bne.n	8008516 <HAL_TIM_PWM_Stop+0x82>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0201 	bic.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <HAL_TIM_PWM_Stop+0x92>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008524:	e013      	b.n	800854e <HAL_TIM_PWM_Stop+0xba>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b04      	cmp	r3, #4
 800852a:	d104      	bne.n	8008536 <HAL_TIM_PWM_Stop+0xa2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008534:	e00b      	b.n	800854e <HAL_TIM_PWM_Stop+0xba>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b08      	cmp	r3, #8
 800853a:	d104      	bne.n	8008546 <HAL_TIM_PWM_Stop+0xb2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008544:	e003      	b.n	800854e <HAL_TIM_PWM_Stop+0xba>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40010000 	.word	0x40010000

0800855c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b02      	cmp	r3, #2
 8008570:	d122      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b02      	cmp	r3, #2
 800857e:	d11b      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0202 	mvn.w	r2, #2
 8008588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa77 	bl	8008a92 <HAL_TIM_IC_CaptureCallback>
 80085a4:	e005      	b.n	80085b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa69 	bl	8008a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fa7a 	bl	8008aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f003 0304 	and.w	r3, r3, #4
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d122      	bne.n	800860c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d11b      	bne.n	800860c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0204 	mvn.w	r2, #4
 80085dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa4d 	bl	8008a92 <HAL_TIM_IC_CaptureCallback>
 80085f8:	e005      	b.n	8008606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa3f 	bl	8008a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fa50 	bl	8008aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b08      	cmp	r3, #8
 8008618:	d122      	bne.n	8008660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d11b      	bne.n	8008660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0208 	mvn.w	r2, #8
 8008630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2204      	movs	r2, #4
 8008636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f003 0303 	and.w	r3, r3, #3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa23 	bl	8008a92 <HAL_TIM_IC_CaptureCallback>
 800864c:	e005      	b.n	800865a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa15 	bl	8008a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fa26 	bl	8008aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f003 0310 	and.w	r3, r3, #16
 800866a:	2b10      	cmp	r3, #16
 800866c:	d122      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	2b10      	cmp	r3, #16
 800867a:	d11b      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f06f 0210 	mvn.w	r2, #16
 8008684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2208      	movs	r2, #8
 800868a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9f9 	bl	8008a92 <HAL_TIM_IC_CaptureCallback>
 80086a0:	e005      	b.n	80086ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f9eb 	bl	8008a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f9fc 	bl	8008aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d10e      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d107      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0201 	mvn.w	r2, #1
 80086d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fb f836 	bl	800374c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ea:	2b80      	cmp	r3, #128	; 0x80
 80086ec:	d10e      	bne.n	800870c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f8:	2b80      	cmp	r3, #128	; 0x80
 80086fa:	d107      	bne.n	800870c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fd26 	bl	8009158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d10e      	bne.n	8008738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008724:	2b40      	cmp	r3, #64	; 0x40
 8008726:	d107      	bne.n	8008738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f9c1 	bl	8008aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b20      	cmp	r3, #32
 8008744:	d10e      	bne.n	8008764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b20      	cmp	r3, #32
 8008752:	d107      	bne.n	8008764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0220 	mvn.w	r2, #32
 800875c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fcf0 	bl	8009144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008786:	2302      	movs	r3, #2
 8008788:	e0ae      	b.n	80088e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b0c      	cmp	r3, #12
 8008796:	f200 809f 	bhi.w	80088d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800879a:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	080087d5 	.word	0x080087d5
 80087a4:	080088d9 	.word	0x080088d9
 80087a8:	080088d9 	.word	0x080088d9
 80087ac:	080088d9 	.word	0x080088d9
 80087b0:	08008815 	.word	0x08008815
 80087b4:	080088d9 	.word	0x080088d9
 80087b8:	080088d9 	.word	0x080088d9
 80087bc:	080088d9 	.word	0x080088d9
 80087c0:	08008857 	.word	0x08008857
 80087c4:	080088d9 	.word	0x080088d9
 80087c8:	080088d9 	.word	0x080088d9
 80087cc:	080088d9 	.word	0x080088d9
 80087d0:	08008897 	.word	0x08008897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 f9f8 	bl	8008bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0208 	orr.w	r2, r2, #8
 80087ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0204 	bic.w	r2, r2, #4
 80087fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6999      	ldr	r1, [r3, #24]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691a      	ldr	r2, [r3, #16]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	619a      	str	r2, [r3, #24]
      break;
 8008812:	e064      	b.n	80088de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 fa3e 	bl	8008c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800882e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800883e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6999      	ldr	r1, [r3, #24]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	021a      	lsls	r2, r3, #8
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	619a      	str	r2, [r3, #24]
      break;
 8008854:	e043      	b.n	80088de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fa89 	bl	8008d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69da      	ldr	r2, [r3, #28]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0208 	orr.w	r2, r2, #8
 8008870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69da      	ldr	r2, [r3, #28]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0204 	bic.w	r2, r2, #4
 8008880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69d9      	ldr	r1, [r3, #28]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	61da      	str	r2, [r3, #28]
      break;
 8008894:	e023      	b.n	80088de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fad3 	bl	8008e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69da      	ldr	r2, [r3, #28]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69d9      	ldr	r1, [r3, #28]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	021a      	lsls	r2, r3, #8
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	61da      	str	r2, [r3, #28]
      break;
 80088d6:	e002      	b.n	80088de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
      break;
 80088dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_TIM_ConfigClockSource+0x1c>
 8008908:	2302      	movs	r3, #2
 800890a:	e0b4      	b.n	8008a76 <HAL_TIM_ConfigClockSource+0x186>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800892a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008944:	d03e      	beq.n	80089c4 <HAL_TIM_ConfigClockSource+0xd4>
 8008946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800894a:	f200 8087 	bhi.w	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008952:	f000 8086 	beq.w	8008a62 <HAL_TIM_ConfigClockSource+0x172>
 8008956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800895a:	d87f      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800895c:	2b70      	cmp	r3, #112	; 0x70
 800895e:	d01a      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0xa6>
 8008960:	2b70      	cmp	r3, #112	; 0x70
 8008962:	d87b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008964:	2b60      	cmp	r3, #96	; 0x60
 8008966:	d050      	beq.n	8008a0a <HAL_TIM_ConfigClockSource+0x11a>
 8008968:	2b60      	cmp	r3, #96	; 0x60
 800896a:	d877      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800896c:	2b50      	cmp	r3, #80	; 0x50
 800896e:	d03c      	beq.n	80089ea <HAL_TIM_ConfigClockSource+0xfa>
 8008970:	2b50      	cmp	r3, #80	; 0x50
 8008972:	d873      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008974:	2b40      	cmp	r3, #64	; 0x40
 8008976:	d058      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x13a>
 8008978:	2b40      	cmp	r3, #64	; 0x40
 800897a:	d86f      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800897c:	2b30      	cmp	r3, #48	; 0x30
 800897e:	d064      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008980:	2b30      	cmp	r3, #48	; 0x30
 8008982:	d86b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008984:	2b20      	cmp	r3, #32
 8008986:	d060      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008988:	2b20      	cmp	r3, #32
 800898a:	d867      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d05c      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008990:	2b10      	cmp	r3, #16
 8008992:	d05a      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008994:	e062      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6899      	ldr	r1, [r3, #8]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f000 fb19 	bl	8008fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	609a      	str	r2, [r3, #8]
      break;
 80089c2:	e04f      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	6899      	ldr	r1, [r3, #8]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f000 fb02 	bl	8008fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089e6:	609a      	str	r2, [r3, #8]
      break;
 80089e8:	e03c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6859      	ldr	r1, [r3, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	461a      	mov	r2, r3
 80089f8:	f000 fa76 	bl	8008ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2150      	movs	r1, #80	; 0x50
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 facf 	bl	8008fa6 <TIM_ITRx_SetConfig>
      break;
 8008a08:	e02c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6859      	ldr	r1, [r3, #4]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f000 fa95 	bl	8008f46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2160      	movs	r1, #96	; 0x60
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fabf 	bl	8008fa6 <TIM_ITRx_SetConfig>
      break;
 8008a28:	e01c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6859      	ldr	r1, [r3, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f000 fa56 	bl	8008ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2140      	movs	r1, #64	; 0x40
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 faaf 	bl	8008fa6 <TIM_ITRx_SetConfig>
      break;
 8008a48:	e00c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f000 faa6 	bl	8008fa6 <TIM_ITRx_SetConfig>
      break;
 8008a5a:	e003      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a60:	e000      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a9a:	bf00      	nop
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a34      	ldr	r2, [pc, #208]	; (8008bb4 <TIM_Base_SetConfig+0xe4>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d00f      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aee:	d00b      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a31      	ldr	r2, [pc, #196]	; (8008bb8 <TIM_Base_SetConfig+0xe8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d007      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a30      	ldr	r2, [pc, #192]	; (8008bbc <TIM_Base_SetConfig+0xec>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d003      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a2f      	ldr	r2, [pc, #188]	; (8008bc0 <TIM_Base_SetConfig+0xf0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d108      	bne.n	8008b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a25      	ldr	r2, [pc, #148]	; (8008bb4 <TIM_Base_SetConfig+0xe4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01b      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b28:	d017      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a22      	ldr	r2, [pc, #136]	; (8008bb8 <TIM_Base_SetConfig+0xe8>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d013      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a21      	ldr	r2, [pc, #132]	; (8008bbc <TIM_Base_SetConfig+0xec>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00f      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a20      	ldr	r2, [pc, #128]	; (8008bc0 <TIM_Base_SetConfig+0xf0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a1f      	ldr	r2, [pc, #124]	; (8008bc4 <TIM_Base_SetConfig+0xf4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d007      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <TIM_Base_SetConfig+0xf8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a1d      	ldr	r2, [pc, #116]	; (8008bcc <TIM_Base_SetConfig+0xfc>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d108      	bne.n	8008b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a08      	ldr	r2, [pc, #32]	; (8008bb4 <TIM_Base_SetConfig+0xe4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d103      	bne.n	8008ba0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	615a      	str	r2, [r3, #20]
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40000400 	.word	0x40000400
 8008bbc:	40000800 	.word	0x40000800
 8008bc0:	40000c00 	.word	0x40000c00
 8008bc4:	40014000 	.word	0x40014000
 8008bc8:	40014400 	.word	0x40014400
 8008bcc:	40014800 	.word	0x40014800

08008bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	f023 0201 	bic.w	r2, r3, #1
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f023 0302 	bic.w	r3, r3, #2
 8008c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a1c      	ldr	r2, [pc, #112]	; (8008c98 <TIM_OC1_SetConfig+0xc8>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d10c      	bne.n	8008c46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f023 0308 	bic.w	r3, r3, #8
 8008c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f023 0304 	bic.w	r3, r3, #4
 8008c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a13      	ldr	r2, [pc, #76]	; (8008c98 <TIM_OC1_SetConfig+0xc8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d111      	bne.n	8008c72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	621a      	str	r2, [r3, #32]
}
 8008c8c:	bf00      	nop
 8008c8e:	371c      	adds	r7, #28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	40010000 	.word	0x40010000

08008c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	f023 0210 	bic.w	r2, r3, #16
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f023 0320 	bic.w	r3, r3, #32
 8008ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1e      	ldr	r2, [pc, #120]	; (8008d70 <TIM_OC2_SetConfig+0xd4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d10d      	bne.n	8008d18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <TIM_OC2_SetConfig+0xd4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d113      	bne.n	8008d48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	621a      	str	r2, [r3, #32]
}
 8008d62:	bf00      	nop
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	40010000 	.word	0x40010000

08008d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	021b      	lsls	r3, r3, #8
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a1d      	ldr	r2, [pc, #116]	; (8008e44 <TIM_OC3_SetConfig+0xd0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d10d      	bne.n	8008dee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a14      	ldr	r2, [pc, #80]	; (8008e44 <TIM_OC3_SetConfig+0xd0>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d113      	bne.n	8008e1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	011b      	lsls	r3, r3, #4
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	621a      	str	r2, [r3, #32]
}
 8008e38:	bf00      	nop
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	40010000 	.word	0x40010000

08008e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	031b      	lsls	r3, r3, #12
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a10      	ldr	r2, [pc, #64]	; (8008ee4 <TIM_OC4_SetConfig+0x9c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d109      	bne.n	8008ebc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	019b      	lsls	r3, r3, #6
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40010000 	.word	0x40010000

08008ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	f023 0201 	bic.w	r2, r3, #1
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	011b      	lsls	r3, r3, #4
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f023 030a 	bic.w	r3, r3, #10
 8008f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	621a      	str	r2, [r3, #32]
}
 8008f3a:	bf00      	nop
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b087      	sub	sp, #28
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f023 0210 	bic.w	r2, r3, #16
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	031b      	lsls	r3, r3, #12
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	621a      	str	r2, [r3, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f043 0307 	orr.w	r3, r3, #7
 8008fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	609a      	str	r2, [r3, #8]
}
 8008fd0:	bf00      	nop
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	021a      	lsls	r2, r3, #8
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	4313      	orrs	r3, r2
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	609a      	str	r2, [r3, #8]
}
 8009010:	bf00      	nop
 8009012:	371c      	adds	r7, #28
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800901c:	b480      	push	{r7}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f003 031f 	and.w	r3, r3, #31
 800902e:	2201      	movs	r2, #1
 8009030:	fa02 f303 	lsl.w	r3, r2, r3
 8009034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a1a      	ldr	r2, [r3, #32]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	43db      	mvns	r3, r3
 800903e:	401a      	ands	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a1a      	ldr	r2, [r3, #32]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f003 031f 	and.w	r3, r3, #31
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	fa01 f303 	lsl.w	r3, r1, r3
 8009054:	431a      	orrs	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	621a      	str	r2, [r3, #32]
}
 800905a:	bf00      	nop
 800905c:	371c      	adds	r7, #28
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009078:	2b01      	cmp	r3, #1
 800907a:	d101      	bne.n	8009080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800907c:	2302      	movs	r3, #2
 800907e:	e050      	b.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a1c      	ldr	r2, [pc, #112]	; (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d018      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090cc:	d013      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a18      	ldr	r2, [pc, #96]	; (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00e      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a16      	ldr	r2, [pc, #88]	; (8009138 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d009      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a15      	ldr	r2, [pc, #84]	; (800913c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d004      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a13      	ldr	r2, [pc, #76]	; (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d10c      	bne.n	8009110 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	4313      	orrs	r3, r2
 8009106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40010000 	.word	0x40010000
 8009134:	40000400 	.word	0x40000400
 8009138:	40000800 	.word	0x40000800
 800913c:	40000c00 	.word	0x40000c00
 8009140:	40014000 	.word	0x40014000

08009144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800916c:	b084      	sub	sp, #16
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	f107 001c 	add.w	r0, r7, #28
 800917a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	2b01      	cmp	r3, #1
 8009182:	d122      	bne.n	80091ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d105      	bne.n	80091be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 fbee 	bl	800a9a0 <USB_CoreReset>
 80091c4:	4603      	mov	r3, r0
 80091c6:	73fb      	strb	r3, [r7, #15]
 80091c8:	e01a      	b.n	8009200 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 fbe2 	bl	800a9a0 <USB_CoreReset>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	639a      	str	r2, [r3, #56]	; 0x38
 80091f2:	e005      	b.n	8009200 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	2b01      	cmp	r3, #1
 8009204:	d10b      	bne.n	800921e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f043 0206 	orr.w	r2, r3, #6
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f043 0220 	orr.w	r2, r3, #32
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800922a:	b004      	add	sp, #16
 800922c:	4770      	bx	lr
	...

08009230 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009230:	b480      	push	{r7}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	2b02      	cmp	r3, #2
 8009242:	d165      	bne.n	8009310 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4a41      	ldr	r2, [pc, #260]	; (800934c <USB_SetTurnaroundTime+0x11c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d906      	bls.n	800925a <USB_SetTurnaroundTime+0x2a>
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4a40      	ldr	r2, [pc, #256]	; (8009350 <USB_SetTurnaroundTime+0x120>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d202      	bcs.n	800925a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009254:	230f      	movs	r3, #15
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e062      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	4a3c      	ldr	r2, [pc, #240]	; (8009350 <USB_SetTurnaroundTime+0x120>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d306      	bcc.n	8009270 <USB_SetTurnaroundTime+0x40>
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4a3b      	ldr	r2, [pc, #236]	; (8009354 <USB_SetTurnaroundTime+0x124>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d202      	bcs.n	8009270 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800926a:	230e      	movs	r3, #14
 800926c:	617b      	str	r3, [r7, #20]
 800926e:	e057      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4a38      	ldr	r2, [pc, #224]	; (8009354 <USB_SetTurnaroundTime+0x124>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d306      	bcc.n	8009286 <USB_SetTurnaroundTime+0x56>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4a37      	ldr	r2, [pc, #220]	; (8009358 <USB_SetTurnaroundTime+0x128>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d202      	bcs.n	8009286 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009280:	230d      	movs	r3, #13
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	e04c      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4a33      	ldr	r2, [pc, #204]	; (8009358 <USB_SetTurnaroundTime+0x128>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d306      	bcc.n	800929c <USB_SetTurnaroundTime+0x6c>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	4a32      	ldr	r2, [pc, #200]	; (800935c <USB_SetTurnaroundTime+0x12c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d802      	bhi.n	800929c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009296:	230c      	movs	r3, #12
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e041      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4a2f      	ldr	r2, [pc, #188]	; (800935c <USB_SetTurnaroundTime+0x12c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d906      	bls.n	80092b2 <USB_SetTurnaroundTime+0x82>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4a2e      	ldr	r2, [pc, #184]	; (8009360 <USB_SetTurnaroundTime+0x130>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d802      	bhi.n	80092b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80092ac:	230b      	movs	r3, #11
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	e036      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	4a2a      	ldr	r2, [pc, #168]	; (8009360 <USB_SetTurnaroundTime+0x130>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d906      	bls.n	80092c8 <USB_SetTurnaroundTime+0x98>
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	4a29      	ldr	r2, [pc, #164]	; (8009364 <USB_SetTurnaroundTime+0x134>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d802      	bhi.n	80092c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80092c2:	230a      	movs	r3, #10
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	e02b      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4a26      	ldr	r2, [pc, #152]	; (8009364 <USB_SetTurnaroundTime+0x134>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d906      	bls.n	80092de <USB_SetTurnaroundTime+0xae>
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	4a25      	ldr	r2, [pc, #148]	; (8009368 <USB_SetTurnaroundTime+0x138>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d202      	bcs.n	80092de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80092d8:	2309      	movs	r3, #9
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e020      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	4a21      	ldr	r2, [pc, #132]	; (8009368 <USB_SetTurnaroundTime+0x138>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d306      	bcc.n	80092f4 <USB_SetTurnaroundTime+0xc4>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	4a20      	ldr	r2, [pc, #128]	; (800936c <USB_SetTurnaroundTime+0x13c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d802      	bhi.n	80092f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80092ee:	2308      	movs	r3, #8
 80092f0:	617b      	str	r3, [r7, #20]
 80092f2:	e015      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4a1d      	ldr	r2, [pc, #116]	; (800936c <USB_SetTurnaroundTime+0x13c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d906      	bls.n	800930a <USB_SetTurnaroundTime+0xda>
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	4a1c      	ldr	r2, [pc, #112]	; (8009370 <USB_SetTurnaroundTime+0x140>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d202      	bcs.n	800930a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009304:	2307      	movs	r3, #7
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	e00a      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800930a:	2306      	movs	r3, #6
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	e007      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d102      	bne.n	800931c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009316:	2309      	movs	r3, #9
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	e001      	b.n	8009320 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800931c:	2309      	movs	r3, #9
 800931e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	029b      	lsls	r3, r3, #10
 8009334:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009338:	431a      	orrs	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	00d8acbf 	.word	0x00d8acbf
 8009350:	00e4e1c0 	.word	0x00e4e1c0
 8009354:	00f42400 	.word	0x00f42400
 8009358:	01067380 	.word	0x01067380
 800935c:	011a499f 	.word	0x011a499f
 8009360:	01312cff 	.word	0x01312cff
 8009364:	014ca43f 	.word	0x014ca43f
 8009368:	016e3600 	.word	0x016e3600
 800936c:	01a6ab1f 	.word	0x01a6ab1f
 8009370:	01e84800 	.word	0x01e84800

08009374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f043 0201 	orr.w	r2, r3, #1
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f023 0201 	bic.w	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d115      	bne.n	8009406 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80093e6:	2001      	movs	r0, #1
 80093e8:	f7fb f820 	bl	800442c <HAL_Delay>
      ms++;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3301      	adds	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 fa45 	bl	800a882 <USB_GetMode>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d01e      	beq.n	800943c <USB_SetCurrentMode+0x84>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b31      	cmp	r3, #49	; 0x31
 8009402:	d9f0      	bls.n	80093e6 <USB_SetCurrentMode+0x2e>
 8009404:	e01a      	b.n	800943c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009406:	78fb      	ldrb	r3, [r7, #3]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d115      	bne.n	8009438 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009418:	2001      	movs	r0, #1
 800941a:	f7fb f807 	bl	800442c <HAL_Delay>
      ms++;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3301      	adds	r3, #1
 8009422:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 fa2c 	bl	800a882 <USB_GetMode>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <USB_SetCurrentMode+0x84>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b31      	cmp	r3, #49	; 0x31
 8009434:	d9f0      	bls.n	8009418 <USB_SetCurrentMode+0x60>
 8009436:	e001      	b.n	800943c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e005      	b.n	8009448 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b32      	cmp	r3, #50	; 0x32
 8009440:	d101      	bne.n	8009446 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009450:	b084      	sub	sp, #16
 8009452:	b580      	push	{r7, lr}
 8009454:	b086      	sub	sp, #24
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800945e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800946a:	2300      	movs	r3, #0
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	e009      	b.n	8009484 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	3340      	adds	r3, #64	; 0x40
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	2200      	movs	r2, #0
 800947c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	3301      	adds	r3, #1
 8009482:	613b      	str	r3, [r7, #16]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	2b0e      	cmp	r3, #14
 8009488:	d9f2      	bls.n	8009470 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800948a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d11c      	bne.n	80094ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949e:	f043 0302 	orr.w	r3, r3, #2
 80094a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	639a      	str	r2, [r3, #56]	; 0x38
 80094c8:	e00b      	b.n	80094e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094e8:	461a      	mov	r2, r3
 80094ea:	2300      	movs	r3, #0
 80094ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f4:	4619      	mov	r1, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fc:	461a      	mov	r2, r3
 80094fe:	680b      	ldr	r3, [r1, #0]
 8009500:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	2b01      	cmp	r3, #1
 8009506:	d10c      	bne.n	8009522 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	2b00      	cmp	r3, #0
 800950c:	d104      	bne.n	8009518 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800950e:	2100      	movs	r1, #0
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f965 	bl	80097e0 <USB_SetDevSpeed>
 8009516:	e008      	b.n	800952a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009518:	2101      	movs	r1, #1
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f960 	bl	80097e0 <USB_SetDevSpeed>
 8009520:	e003      	b.n	800952a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009522:	2103      	movs	r1, #3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f95b 	bl	80097e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800952a:	2110      	movs	r1, #16
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f8f3 	bl	8009718 <USB_FlushTxFifo>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f91f 	bl	8009780 <USB_FlushRxFifo>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009552:	461a      	mov	r2, r3
 8009554:	2300      	movs	r3, #0
 8009556:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955e:	461a      	mov	r2, r3
 8009560:	2300      	movs	r3, #0
 8009562:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956a:	461a      	mov	r2, r3
 800956c:	2300      	movs	r3, #0
 800956e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009570:	2300      	movs	r3, #0
 8009572:	613b      	str	r3, [r7, #16]
 8009574:	e043      	b.n	80095fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800958c:	d118      	bne.n	80095c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a0:	461a      	mov	r2, r3
 80095a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	e013      	b.n	80095d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b6:	461a      	mov	r2, r3
 80095b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	e008      	b.n	80095d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095cc:	461a      	mov	r2, r3
 80095ce:	2300      	movs	r3, #0
 80095d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095de:	461a      	mov	r2, r3
 80095e0:	2300      	movs	r3, #0
 80095e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f0:	461a      	mov	r2, r3
 80095f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	3301      	adds	r3, #1
 80095fc:	613b      	str	r3, [r7, #16]
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	429a      	cmp	r2, r3
 8009604:	d3b7      	bcc.n	8009576 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009606:	2300      	movs	r3, #0
 8009608:	613b      	str	r3, [r7, #16]
 800960a:	e043      	b.n	8009694 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800961e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009622:	d118      	bne.n	8009656 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10a      	bne.n	8009640 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009636:	461a      	mov	r2, r3
 8009638:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	e013      	b.n	8009668 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	461a      	mov	r2, r3
 800964e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	e008      	b.n	8009668 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009662:	461a      	mov	r2, r3
 8009664:	2300      	movs	r3, #0
 8009666:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009674:	461a      	mov	r2, r3
 8009676:	2300      	movs	r3, #0
 8009678:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009686:	461a      	mov	r2, r3
 8009688:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800968c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	3301      	adds	r3, #1
 8009692:	613b      	str	r3, [r7, #16]
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	429a      	cmp	r2, r3
 800969a:	d3b7      	bcc.n	800960c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80096bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d105      	bne.n	80096d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	f043 0210 	orr.w	r2, r3, #16
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	699a      	ldr	r2, [r3, #24]
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <USB_DevInit+0x2c4>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d005      	beq.n	80096ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	f043 0208 	orr.w	r2, r3, #8
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d107      	bne.n	8009704 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096fc:	f043 0304 	orr.w	r3, r3, #4
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009704:	7dfb      	ldrb	r3, [r7, #23]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009710:	b004      	add	sp, #16
 8009712:	4770      	bx	lr
 8009714:	803c3800 	.word	0x803c3800

08009718 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3301      	adds	r3, #1
 800972a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4a13      	ldr	r2, [pc, #76]	; (800977c <USB_FlushTxFifo+0x64>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d901      	bls.n	8009738 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e01b      	b.n	8009770 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	daf2      	bge.n	8009726 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	019b      	lsls	r3, r3, #6
 8009748:	f043 0220 	orr.w	r2, r3, #32
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3301      	adds	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4a08      	ldr	r2, [pc, #32]	; (800977c <USB_FlushTxFifo+0x64>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d901      	bls.n	8009762 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e006      	b.n	8009770 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b20      	cmp	r3, #32
 800976c:	d0f0      	beq.n	8009750 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	00030d40 	.word	0x00030d40

08009780 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4a11      	ldr	r2, [pc, #68]	; (80097dc <USB_FlushRxFifo+0x5c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d901      	bls.n	800979e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e018      	b.n	80097d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	daf2      	bge.n	800978c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2210      	movs	r2, #16
 80097ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	3301      	adds	r3, #1
 80097b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4a08      	ldr	r2, [pc, #32]	; (80097dc <USB_FlushRxFifo+0x5c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d901      	bls.n	80097c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e006      	b.n	80097d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f003 0310 	and.w	r3, r3, #16
 80097ca:	2b10      	cmp	r3, #16
 80097cc:	d0f0      	beq.n	80097b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	00030d40 	.word	0x00030d40

080097e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009800:	4313      	orrs	r3, r2
 8009802:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009812:	b480      	push	{r7}
 8009814:	b087      	sub	sp, #28
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f003 0306 	and.w	r3, r3, #6
 800982a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d102      	bne.n	8009838 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009832:	2300      	movs	r3, #0
 8009834:	75fb      	strb	r3, [r7, #23]
 8009836:	e00a      	b.n	800984e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b02      	cmp	r3, #2
 800983c:	d002      	beq.n	8009844 <USB_GetDevSpeed+0x32>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b06      	cmp	r3, #6
 8009842:	d102      	bne.n	800984a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009844:	2302      	movs	r3, #2
 8009846:	75fb      	strb	r3, [r7, #23]
 8009848:	e001      	b.n	800984e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800984a:	230f      	movs	r3, #15
 800984c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009850:	4618      	mov	r0, r3
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d13a      	bne.n	80098ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800987e:	69da      	ldr	r2, [r3, #28]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	f003 030f 	and.w	r3, r3, #15
 8009888:	2101      	movs	r1, #1
 800988a:	fa01 f303 	lsl.w	r3, r1, r3
 800988e:	b29b      	uxth	r3, r3
 8009890:	68f9      	ldr	r1, [r7, #12]
 8009892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009896:	4313      	orrs	r3, r2
 8009898:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d155      	bne.n	800995c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	791b      	ldrb	r3, [r3, #4]
 80098ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	059b      	lsls	r3, r3, #22
 80098d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098d4:	4313      	orrs	r3, r2
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	0151      	lsls	r1, r2, #5
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	440a      	add	r2, r1
 80098de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	e036      	b.n	800995c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f4:	69da      	ldr	r2, [r3, #28]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	f003 030f 	and.w	r3, r3, #15
 80098fe:	2101      	movs	r1, #1
 8009900:	fa01 f303 	lsl.w	r3, r1, r3
 8009904:	041b      	lsls	r3, r3, #16
 8009906:	68f9      	ldr	r1, [r7, #12]
 8009908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800990c:	4313      	orrs	r3, r2
 800990e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d11a      	bne.n	800995c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	791b      	ldrb	r3, [r3, #4]
 8009940:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009942:	430b      	orrs	r3, r1
 8009944:	4313      	orrs	r3, r2
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	440a      	add	r2, r1
 800994e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800995a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
	...

0800996c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d161      	bne.n	8009a4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800999a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800999e:	d11f      	bne.n	80099e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	0151      	lsls	r1, r2, #5
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	440a      	add	r2, r1
 80099b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	0151      	lsls	r1, r2, #5
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	440a      	add	r2, r1
 80099d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	2101      	movs	r1, #1
 80099f2:	fa01 f303 	lsl.w	r3, r1, r3
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	43db      	mvns	r3, r3
 80099fa:	68f9      	ldr	r1, [r7, #12]
 80099fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a00:	4013      	ands	r3, r2
 8009a02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0a:	69da      	ldr	r2, [r3, #28]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f003 030f 	and.w	r3, r3, #15
 8009a14:	2101      	movs	r1, #1
 8009a16:	fa01 f303 	lsl.w	r3, r1, r3
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	43db      	mvns	r3, r3
 8009a1e:	68f9      	ldr	r1, [r7, #12]
 8009a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a24:	4013      	ands	r3, r2
 8009a26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	0159      	lsls	r1, r3, #5
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	440b      	add	r3, r1
 8009a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a42:	4619      	mov	r1, r3
 8009a44:	4b35      	ldr	r3, [pc, #212]	; (8009b1c <USB_DeactivateEndpoint+0x1b0>)
 8009a46:	4013      	ands	r3, r2
 8009a48:	600b      	str	r3, [r1, #0]
 8009a4a:	e060      	b.n	8009b0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a62:	d11f      	bne.n	8009aa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	0151      	lsls	r1, r2, #5
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	440a      	add	r2, r1
 8009a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	0151      	lsls	r1, r2, #5
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	440a      	add	r2, r1
 8009a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	f003 030f 	and.w	r3, r3, #15
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aba:	041b      	lsls	r3, r3, #16
 8009abc:	43db      	mvns	r3, r3
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ace:	69da      	ldr	r2, [r3, #28]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	f003 030f 	and.w	r3, r3, #15
 8009ad8:	2101      	movs	r1, #1
 8009ada:	fa01 f303 	lsl.w	r3, r1, r3
 8009ade:	041b      	lsls	r3, r3, #16
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	68f9      	ldr	r1, [r7, #12]
 8009ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ae8:	4013      	ands	r3, r2
 8009aea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	0159      	lsls	r1, r3, #5
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	440b      	add	r3, r1
 8009b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b06:	4619      	mov	r1, r3
 8009b08:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <USB_DeactivateEndpoint+0x1b4>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	ec337800 	.word	0xec337800
 8009b20:	eff37800 	.word	0xeff37800

08009b24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b08a      	sub	sp, #40	; 0x28
 8009b28:	af02      	add	r7, sp, #8
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	785b      	ldrb	r3, [r3, #1]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	f040 815c 	bne.w	8009dfe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d132      	bne.n	8009bb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	69fa      	ldr	r2, [r7, #28]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	69ba      	ldr	r2, [r7, #24]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	0151      	lsls	r1, r2, #5
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	440a      	add	r2, r1
 8009ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bac:	0cdb      	lsrs	r3, r3, #19
 8009bae:	04db      	lsls	r3, r3, #19
 8009bb0:	6113      	str	r3, [r2, #16]
 8009bb2:	e074      	b.n	8009c9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	0151      	lsls	r1, r2, #5
 8009bc6:	69fa      	ldr	r2, [r7, #28]
 8009bc8:	440a      	add	r2, r1
 8009bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bce:	0cdb      	lsrs	r3, r3, #19
 8009bd0:	04db      	lsls	r3, r3, #19
 8009bd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	69ba      	ldr	r2, [r7, #24]
 8009be4:	0151      	lsls	r1, r2, #5
 8009be6:	69fa      	ldr	r2, [r7, #28]
 8009be8:	440a      	add	r2, r1
 8009bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c04:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	6999      	ldr	r1, [r3, #24]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	440b      	add	r3, r1
 8009c10:	1e59      	subs	r1, r3, #1
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c1a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c1c:	4b9d      	ldr	r3, [pc, #628]	; (8009e94 <USB_EPStartXfer+0x370>)
 8009c1e:	400b      	ands	r3, r1
 8009c20:	69b9      	ldr	r1, [r7, #24]
 8009c22:	0148      	lsls	r0, r1, #5
 8009c24:	69f9      	ldr	r1, [r7, #28]
 8009c26:	4401      	add	r1, r0
 8009c28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c3c:	691a      	ldr	r2, [r3, #16]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c46:	69b9      	ldr	r1, [r7, #24]
 8009c48:	0148      	lsls	r0, r1, #5
 8009c4a:	69f9      	ldr	r1, [r7, #28]
 8009c4c:	4401      	add	r1, r0
 8009c4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c52:	4313      	orrs	r3, r2
 8009c54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	791b      	ldrb	r3, [r3, #4]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d11f      	bne.n	8009c9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	0151      	lsls	r1, r2, #5
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	440a      	add	r2, r1
 8009c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009c7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	0151      	lsls	r1, r2, #5
 8009c90:	69fa      	ldr	r2, [r7, #28]
 8009c92:	440a      	add	r2, r1
 8009c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d14b      	bne.n	8009d3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d009      	beq.n	8009cc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb8:	461a      	mov	r2, r3
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	791b      	ldrb	r3, [r3, #4]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d128      	bne.n	8009d1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d110      	bne.n	8009cfa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	0151      	lsls	r1, r2, #5
 8009cea:	69fa      	ldr	r2, [r7, #28]
 8009cec:	440a      	add	r2, r1
 8009cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	e00f      	b.n	8009d1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	0151      	lsls	r1, r2, #5
 8009d0c:	69fa      	ldr	r2, [r7, #28]
 8009d0e:	440a      	add	r2, r1
 8009d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	0151      	lsls	r1, r2, #5
 8009d2c:	69fa      	ldr	r2, [r7, #28]
 8009d2e:	440a      	add	r2, r1
 8009d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	e133      	b.n	8009fa4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	69fa      	ldr	r2, [r7, #28]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	791b      	ldrb	r3, [r3, #4]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d015      	beq.n	8009d90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 811b 	beq.w	8009fa4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	f003 030f 	and.w	r3, r3, #15
 8009d7e:	2101      	movs	r1, #1
 8009d80:	fa01 f303 	lsl.w	r3, r1, r3
 8009d84:	69f9      	ldr	r1, [r7, #28]
 8009d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	634b      	str	r3, [r1, #52]	; 0x34
 8009d8e:	e109      	b.n	8009fa4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d110      	bne.n	8009dc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	0151      	lsls	r1, r2, #5
 8009db2:	69fa      	ldr	r2, [r7, #28]
 8009db4:	440a      	add	r2, r1
 8009db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e00f      	b.n	8009de2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	0151      	lsls	r1, r2, #5
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	440a      	add	r2, r1
 8009dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009de0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	6919      	ldr	r1, [r3, #16]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	b298      	uxth	r0, r3
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4603      	mov	r3, r0
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 fade 	bl	800a3b8 <USB_WritePacket>
 8009dfc:	e0d2      	b.n	8009fa4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	0151      	lsls	r1, r2, #5
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	440a      	add	r2, r1
 8009e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e18:	0cdb      	lsrs	r3, r3, #19
 8009e1a:	04db      	lsls	r3, r3, #19
 8009e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	0151      	lsls	r1, r2, #5
 8009e30:	69fa      	ldr	r2, [r7, #28]
 8009e32:	440a      	add	r2, r1
 8009e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d126      	bne.n	8009e98 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e56:	691a      	ldr	r2, [r3, #16]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e60:	69b9      	ldr	r1, [r7, #24]
 8009e62:	0148      	lsls	r0, r1, #5
 8009e64:	69f9      	ldr	r1, [r7, #28]
 8009e66:	4401      	add	r1, r0
 8009e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	0151      	lsls	r1, r2, #5
 8009e82:	69fa      	ldr	r2, [r7, #28]
 8009e84:	440a      	add	r2, r1
 8009e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e8e:	6113      	str	r3, [r2, #16]
 8009e90:	e03a      	b.n	8009f08 <USB_EPStartXfer+0x3e4>
 8009e92:	bf00      	nop
 8009e94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	699a      	ldr	r2, [r3, #24]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	1e5a      	subs	r2, r3, #1
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	8afa      	ldrh	r2, [r7, #22]
 8009eb4:	fb03 f202 	mul.w	r2, r3, r2
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec8:	691a      	ldr	r2, [r3, #16]
 8009eca:	8afb      	ldrh	r3, [r7, #22]
 8009ecc:	04d9      	lsls	r1, r3, #19
 8009ece:	4b38      	ldr	r3, [pc, #224]	; (8009fb0 <USB_EPStartXfer+0x48c>)
 8009ed0:	400b      	ands	r3, r1
 8009ed2:	69b9      	ldr	r1, [r7, #24]
 8009ed4:	0148      	lsls	r0, r1, #5
 8009ed6:	69f9      	ldr	r1, [r7, #28]
 8009ed8:	4401      	add	r1, r0
 8009eda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ef8:	69b9      	ldr	r1, [r7, #24]
 8009efa:	0148      	lsls	r0, r1, #5
 8009efc:	69f9      	ldr	r1, [r7, #28]
 8009efe:	4401      	add	r1, r0
 8009f00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f04:	4313      	orrs	r3, r2
 8009f06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d10d      	bne.n	8009f2a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d009      	beq.n	8009f2a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	6919      	ldr	r1, [r3, #16]
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f26:	460a      	mov	r2, r1
 8009f28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	791b      	ldrb	r3, [r3, #4]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d128      	bne.n	8009f84 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d110      	bne.n	8009f64 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	0151      	lsls	r1, r2, #5
 8009f54:	69fa      	ldr	r2, [r7, #28]
 8009f56:	440a      	add	r2, r1
 8009f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	e00f      	b.n	8009f84 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	69ba      	ldr	r2, [r7, #24]
 8009f74:	0151      	lsls	r1, r2, #5
 8009f76:	69fa      	ldr	r2, [r7, #28]
 8009f78:	440a      	add	r2, r1
 8009f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	0151      	lsls	r1, r2, #5
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	440a      	add	r2, r1
 8009f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	1ff80000 	.word	0x1ff80000

08009fb4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	785b      	ldrb	r3, [r3, #1]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	f040 80ce 	bne.w	800a172 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d132      	bne.n	800a044 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	0151      	lsls	r1, r2, #5
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ff8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ffc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	0151      	lsls	r1, r2, #5
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	440a      	add	r2, r1
 800a018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a01c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	0151      	lsls	r1, r2, #5
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	440a      	add	r2, r1
 800a038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a03c:	0cdb      	lsrs	r3, r3, #19
 800a03e:	04db      	lsls	r3, r3, #19
 800a040:	6113      	str	r3, [r2, #16]
 800a042:	e04e      	b.n	800a0e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	0151      	lsls	r1, r2, #5
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	440a      	add	r2, r1
 800a05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a05e:	0cdb      	lsrs	r3, r3, #19
 800a060:	04db      	lsls	r3, r3, #19
 800a062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a07e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a082:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a086:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	699a      	ldr	r2, [r3, #24]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	429a      	cmp	r2, r3
 800a092:	d903      	bls.n	800a09c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	68da      	ldr	r2, [r3, #12]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	0151      	lsls	r1, r2, #5
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	440a      	add	r2, r1
 800a0b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0d2:	6939      	ldr	r1, [r7, #16]
 800a0d4:	0148      	lsls	r0, r1, #5
 800a0d6:	6979      	ldr	r1, [r7, #20]
 800a0d8:	4401      	add	r1, r0
 800a0da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d11e      	bne.n	800a126 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d009      	beq.n	800a104 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	0151      	lsls	r1, r2, #5
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	440a      	add	r2, r1
 800a11a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a11e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	e097      	b.n	800a256 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	015a      	lsls	r2, r3, #5
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	4413      	add	r3, r2
 800a12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	0151      	lsls	r1, r2, #5
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	440a      	add	r2, r1
 800a13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a144:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 8083 	beq.w	800a256 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 030f 	and.w	r3, r3, #15
 800a160:	2101      	movs	r1, #1
 800a162:	fa01 f303 	lsl.w	r3, r1, r3
 800a166:	6979      	ldr	r1, [r7, #20]
 800a168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a16c:	4313      	orrs	r3, r2
 800a16e:	634b      	str	r3, [r1, #52]	; 0x34
 800a170:	e071      	b.n	800a256 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	0151      	lsls	r1, r2, #5
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	440a      	add	r2, r1
 800a188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a18c:	0cdb      	lsrs	r3, r3, #19
 800a18e:	04db      	lsls	r3, r3, #19
 800a190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	0151      	lsls	r1, r2, #5
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	440a      	add	r2, r1
 800a1e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1fa:	691a      	ldr	r2, [r3, #16]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a204:	6939      	ldr	r1, [r7, #16]
 800a206:	0148      	lsls	r0, r1, #5
 800a208:	6979      	ldr	r1, [r7, #20]
 800a20a:	4401      	add	r1, r0
 800a20c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a210:	4313      	orrs	r3, r2
 800a212:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d10d      	bne.n	800a236 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d009      	beq.n	800a236 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6919      	ldr	r1, [r3, #16]
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a232:	460a      	mov	r2, r1
 800a234:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	0151      	lsls	r1, r2, #5
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	440a      	add	r2, r1
 800a24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a250:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a254:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	371c      	adds	r7, #28
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d14a      	bne.n	800a318 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a29a:	f040 8086 	bne.w	800a3aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	015a      	lsls	r2, r3, #5
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	7812      	ldrb	r2, [r2, #0]
 800a2b2:	0151      	lsls	r1, r2, #5
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	440a      	add	r2, r1
 800a2b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	7812      	ldrb	r2, [r2, #0]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f242 7210 	movw	r2, #10000	; 0x2710
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d902      	bls.n	800a2fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a2fa:	e056      	b.n	800a3aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	015a      	lsls	r2, r3, #5
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	4413      	add	r3, r2
 800a306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a314:	d0e7      	beq.n	800a2e6 <USB_EPStopXfer+0x82>
 800a316:	e048      	b.n	800a3aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a32c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a330:	d13b      	bne.n	800a3aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	7812      	ldrb	r2, [r2, #0]
 800a346:	0151      	lsls	r1, r2, #5
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	440a      	add	r2, r1
 800a34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a350:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a354:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	7812      	ldrb	r2, [r2, #0]
 800a36a:	0151      	lsls	r1, r2, #5
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	440a      	add	r2, r1
 800a370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a378:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f242 7210 	movw	r2, #10000	; 0x2710
 800a386:	4293      	cmp	r3, r2
 800a388:	d902      	bls.n	800a390 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	75fb      	strb	r3, [r7, #23]
          break;
 800a38e:	e00c      	b.n	800a3aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3a8:	d0e7      	beq.n	800a37a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	371c      	adds	r7, #28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b089      	sub	sp, #36	; 0x24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	71fb      	strb	r3, [r7, #7]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a3d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d123      	bne.n	800a426 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a3de:	88bb      	ldrh	r3, [r7, #4]
 800a3e0:	3303      	adds	r3, #3
 800a3e2:	089b      	lsrs	r3, r3, #2
 800a3e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	e018      	b.n	800a41e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a3ec:	79fb      	ldrb	r3, [r7, #7]
 800a3ee:	031a      	lsls	r2, r3, #12
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	3301      	adds	r3, #1
 800a404:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3301      	adds	r3, #1
 800a40a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	3301      	adds	r3, #1
 800a410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	3301      	adds	r3, #1
 800a416:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	3301      	adds	r3, #1
 800a41c:	61bb      	str	r3, [r7, #24]
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	429a      	cmp	r2, r3
 800a424:	d3e2      	bcc.n	800a3ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3724      	adds	r7, #36	; 0x24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a434:	b480      	push	{r7}
 800a436:	b08b      	sub	sp, #44	; 0x2c
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a44a:	88fb      	ldrh	r3, [r7, #6]
 800a44c:	089b      	lsrs	r3, r3, #2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a452:	88fb      	ldrh	r3, [r7, #6]
 800a454:	f003 0303 	and.w	r3, r3, #3
 800a458:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a45a:	2300      	movs	r3, #0
 800a45c:	623b      	str	r3, [r7, #32]
 800a45e:	e014      	b.n	800a48a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	3301      	adds	r3, #1
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	3301      	adds	r3, #1
 800a476:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	3301      	adds	r3, #1
 800a47c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	3301      	adds	r3, #1
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	3301      	adds	r3, #1
 800a488:	623b      	str	r3, [r7, #32]
 800a48a:	6a3a      	ldr	r2, [r7, #32]
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d3e6      	bcc.n	800a460 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a492:	8bfb      	ldrh	r3, [r7, #30]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01e      	beq.n	800a4d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a498:	2300      	movs	r3, #0
 800a49a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f107 0310 	add.w	r3, r7, #16
 800a4a8:	6812      	ldr	r2, [r2, #0]
 800a4aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	00db      	lsls	r3, r3, #3
 800a4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	701a      	strb	r2, [r3, #0]
      i++;
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a4ca:	8bfb      	ldrh	r3, [r7, #30]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a4d0:	8bfb      	ldrh	r3, [r7, #30]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1ea      	bne.n	800a4ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	372c      	adds	r7, #44	; 0x2c
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d12c      	bne.n	800a55a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	db12      	blt.n	800a538 <USB_EPSetStall+0x54>
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00f      	beq.n	800a538 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	0151      	lsls	r1, r2, #5
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	440a      	add	r2, r1
 800a52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a536:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	0151      	lsls	r1, r2, #5
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	440a      	add	r2, r1
 800a54e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	e02b      	b.n	800a5b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	db12      	blt.n	800a592 <USB_EPSetStall+0xae>
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00f      	beq.n	800a592 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	0151      	lsls	r1, r2, #5
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	440a      	add	r2, r1
 800a588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a58c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a590:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	0151      	lsls	r1, r2, #5
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	440a      	add	r2, r1
 800a5a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	785b      	ldrb	r3, [r3, #1]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d128      	bne.n	800a62e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	015a      	lsls	r2, r3, #5
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	0151      	lsls	r1, r2, #5
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	440a      	add	r2, r1
 800a5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	791b      	ldrb	r3, [r3, #4]
 800a600:	2b03      	cmp	r3, #3
 800a602:	d003      	beq.n	800a60c <USB_EPClearStall+0x4c>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	791b      	ldrb	r3, [r3, #4]
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d138      	bne.n	800a67e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	0151      	lsls	r1, r2, #5
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	440a      	add	r2, r1
 800a622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	e027      	b.n	800a67e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	0151      	lsls	r1, r2, #5
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	440a      	add	r2, r1
 800a644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a648:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a64c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	791b      	ldrb	r3, [r3, #4]
 800a652:	2b03      	cmp	r3, #3
 800a654:	d003      	beq.n	800a65e <USB_EPClearStall+0x9e>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	791b      	ldrb	r3, [r3, #4]
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d10f      	bne.n	800a67e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4413      	add	r3, r2
 800a666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	0151      	lsls	r1, r2, #5
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	440a      	add	r2, r1
 800a674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a67c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a6ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	78fb      	ldrb	r3, [r7, #3]
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a6c0:	68f9      	ldr	r1, [r7, #12]
 800a6c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a706:	f023 0302 	bic.w	r3, r3, #2
 800a70a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a734:	f023 0303 	bic.w	r3, r3, #3
 800a738:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a748:	f043 0302 	orr.w	r3, r3, #2
 800a74c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	4013      	ands	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a774:	68fb      	ldr	r3, [r7, #12]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a782:	b480      	push	{r7}
 800a784:	b085      	sub	sp, #20
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	0c1b      	lsrs	r3, r3, #16
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d2:	69db      	ldr	r3, [r3, #28]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	b29b      	uxth	r3, r3
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a7fa:	78fb      	ldrb	r3, [r7, #3]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	4413      	add	r3, r2
 800a802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	4013      	ands	r3, r2
 800a816:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a818:	68bb      	ldr	r3, [r7, #8]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a826:	b480      	push	{r7}
 800a828:	b087      	sub	sp, #28
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	460b      	mov	r3, r1
 800a830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a848:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	f003 030f 	and.w	r3, r3, #15
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	fa22 f303 	lsr.w	r3, r2, r3
 800a856:	01db      	lsls	r3, r3, #7
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	015a      	lsls	r2, r3, #5
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	4413      	add	r3, r2
 800a868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	4013      	ands	r3, r2
 800a872:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a874:	68bb      	ldr	r3, [r7, #8]
}
 800a876:	4618      	mov	r0, r3
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	f003 0301 	and.w	r3, r3, #1
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a8bc:	f023 0307 	bic.w	r3, r3, #7
 800a8c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	333c      	adds	r3, #60	; 0x3c
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	4a26      	ldr	r2, [pc, #152]	; (800a99c <USB_EP0_OutStart+0xb8>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d90a      	bls.n	800a91e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a918:	d101      	bne.n	800a91e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e037      	b.n	800a98e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a924:	461a      	mov	r2, r3
 800a926:	2300      	movs	r3, #0
 800a928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a93c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a94c:	f043 0318 	orr.w	r3, r3, #24
 800a950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a960:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a964:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a966:	7afb      	ldrb	r3, [r7, #11]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d10f      	bne.n	800a98c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a972:	461a      	mov	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a986:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a98a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	4f54300a 	.word	0x4f54300a

0800a9a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4a13      	ldr	r2, [pc, #76]	; (800aa04 <USB_CoreReset+0x64>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d901      	bls.n	800a9be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e01b      	b.n	800a9f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	daf2      	bge.n	800a9ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f043 0201 	orr.w	r2, r3, #1
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4a09      	ldr	r2, [pc, #36]	; (800aa04 <USB_CoreReset+0x64>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d901      	bls.n	800a9e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e006      	b.n	800a9f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d0f0      	beq.n	800a9d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	00030d40 	.word	0x00030d40

0800aa08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aa18:	f005 fbd4 	bl	80101c4 <USBD_static_malloc>
 800aa1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d109      	bne.n	800aa38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	32b0      	adds	r2, #176	; 0xb0
 800aa2e:	2100      	movs	r1, #0
 800aa30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aa34:	2302      	movs	r3, #2
 800aa36:	e0d4      	b.n	800abe2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aa38:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f005 fc4c 	bl	80102dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	32b0      	adds	r2, #176	; 0xb0
 800aa4e:	68f9      	ldr	r1, [r7, #12]
 800aa50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	32b0      	adds	r2, #176	; 0xb0
 800aa5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	7c1b      	ldrb	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d138      	bne.n	800aae2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa70:	4b5e      	ldr	r3, [pc, #376]	; (800abec <USBD_CDC_Init+0x1e4>)
 800aa72:	7819      	ldrb	r1, [r3, #0]
 800aa74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa78:	2202      	movs	r2, #2
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f005 fa7f 	bl	800ff7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa80:	4b5a      	ldr	r3, [pc, #360]	; (800abec <USBD_CDC_Init+0x1e4>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	f003 020f 	and.w	r2, r3, #15
 800aa88:	6879      	ldr	r1, [r7, #4]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	440b      	add	r3, r1
 800aa94:	3324      	adds	r3, #36	; 0x24
 800aa96:	2201      	movs	r2, #1
 800aa98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa9a:	4b55      	ldr	r3, [pc, #340]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800aa9c:	7819      	ldrb	r1, [r3, #0]
 800aa9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f005 fa6a 	bl	800ff7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aaaa:	4b51      	ldr	r3, [pc, #324]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	f003 020f 	and.w	r2, r3, #15
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	4613      	mov	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	440b      	add	r3, r1
 800aabe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aac2:	2201      	movs	r2, #1
 800aac4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aac6:	4b4b      	ldr	r3, [pc, #300]	; (800abf4 <USBD_CDC_Init+0x1ec>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 020f 	and.w	r2, r3, #15
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	4613      	mov	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	440b      	add	r3, r1
 800aada:	3326      	adds	r3, #38	; 0x26
 800aadc:	2210      	movs	r2, #16
 800aade:	801a      	strh	r2, [r3, #0]
 800aae0:	e035      	b.n	800ab4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aae2:	4b42      	ldr	r3, [pc, #264]	; (800abec <USBD_CDC_Init+0x1e4>)
 800aae4:	7819      	ldrb	r1, [r3, #0]
 800aae6:	2340      	movs	r3, #64	; 0x40
 800aae8:	2202      	movs	r2, #2
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f005 fa47 	bl	800ff7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aaf0:	4b3e      	ldr	r3, [pc, #248]	; (800abec <USBD_CDC_Init+0x1e4>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f003 020f 	and.w	r2, r3, #15
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	3324      	adds	r3, #36	; 0x24
 800ab06:	2201      	movs	r2, #1
 800ab08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab0a:	4b39      	ldr	r3, [pc, #228]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800ab0c:	7819      	ldrb	r1, [r3, #0]
 800ab0e:	2340      	movs	r3, #64	; 0x40
 800ab10:	2202      	movs	r2, #2
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f005 fa33 	bl	800ff7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab18:	4b35      	ldr	r3, [pc, #212]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 020f 	and.w	r2, r3, #15
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab30:	2201      	movs	r2, #1
 800ab32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab34:	4b2f      	ldr	r3, [pc, #188]	; (800abf4 <USBD_CDC_Init+0x1ec>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 020f 	and.w	r2, r3, #15
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	3326      	adds	r3, #38	; 0x26
 800ab4a:	2210      	movs	r2, #16
 800ab4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab4e:	4b29      	ldr	r3, [pc, #164]	; (800abf4 <USBD_CDC_Init+0x1ec>)
 800ab50:	7819      	ldrb	r1, [r3, #0]
 800ab52:	2308      	movs	r3, #8
 800ab54:	2203      	movs	r2, #3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f005 fa11 	bl	800ff7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab5c:	4b25      	ldr	r3, [pc, #148]	; (800abf4 <USBD_CDC_Init+0x1ec>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	f003 020f 	and.w	r2, r3, #15
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	440b      	add	r3, r1
 800ab70:	3324      	adds	r3, #36	; 0x24
 800ab72:	2201      	movs	r2, #1
 800ab74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	33b0      	adds	r3, #176	; 0xb0
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800abac:	2302      	movs	r3, #2
 800abae:	e018      	b.n	800abe2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	7c1b      	ldrb	r3, [r3, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abb8:	4b0d      	ldr	r3, [pc, #52]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800abba:	7819      	ldrb	r1, [r3, #0]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f005 fac8 	bl	801015c <USBD_LL_PrepareReceive>
 800abcc:	e008      	b.n	800abe0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abce:	4b08      	ldr	r3, [pc, #32]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800abd0:	7819      	ldrb	r1, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f005 fabe 	bl	801015c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	20000643 	.word	0x20000643
 800abf0:	20000644 	.word	0x20000644
 800abf4:	20000645 	.word	0x20000645

0800abf8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac04:	4b3a      	ldr	r3, [pc, #232]	; (800acf0 <USBD_CDC_DeInit+0xf8>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f005 f9dd 	bl	800ffca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac10:	4b37      	ldr	r3, [pc, #220]	; (800acf0 <USBD_CDC_DeInit+0xf8>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f003 020f 	and.w	r2, r3, #15
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	440b      	add	r3, r1
 800ac24:	3324      	adds	r3, #36	; 0x24
 800ac26:	2200      	movs	r2, #0
 800ac28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac2a:	4b32      	ldr	r3, [pc, #200]	; (800acf4 <USBD_CDC_DeInit+0xfc>)
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f005 f9ca 	bl	800ffca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ac36:	4b2f      	ldr	r3, [pc, #188]	; (800acf4 <USBD_CDC_DeInit+0xfc>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	f003 020f 	and.w	r2, r3, #15
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	4613      	mov	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	440b      	add	r3, r1
 800ac4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac4e:	2200      	movs	r2, #0
 800ac50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac52:	4b29      	ldr	r3, [pc, #164]	; (800acf8 <USBD_CDC_DeInit+0x100>)
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f005 f9b6 	bl	800ffca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac5e:	4b26      	ldr	r3, [pc, #152]	; (800acf8 <USBD_CDC_DeInit+0x100>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	f003 020f 	and.w	r2, r3, #15
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	440b      	add	r3, r1
 800ac72:	3324      	adds	r3, #36	; 0x24
 800ac74:	2200      	movs	r2, #0
 800ac76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac78:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <USBD_CDC_DeInit+0x100>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	f003 020f 	and.w	r2, r3, #15
 800ac80:	6879      	ldr	r1, [r7, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3326      	adds	r3, #38	; 0x26
 800ac8e:	2200      	movs	r2, #0
 800ac90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	32b0      	adds	r2, #176	; 0xb0
 800ac9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01f      	beq.n	800ace4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	33b0      	adds	r3, #176	; 0xb0
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	32b0      	adds	r2, #176	; 0xb0
 800acc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f005 fa8a 	bl	80101e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	32b0      	adds	r2, #176	; 0xb0
 800acd6:	2100      	movs	r1, #0
 800acd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20000643 	.word	0x20000643
 800acf4:	20000644 	.word	0x20000644
 800acf8:	20000645 	.word	0x20000645

0800acfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	32b0      	adds	r2, #176	; 0xb0
 800ad10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e0bf      	b.n	800aeac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d050      	beq.n	800adda <USBD_CDC_Setup+0xde>
 800ad38:	2b20      	cmp	r3, #32
 800ad3a:	f040 80af 	bne.w	800ae9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	88db      	ldrh	r3, [r3, #6]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d03a      	beq.n	800adbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	b25b      	sxtb	r3, r3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	da1b      	bge.n	800ad88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	33b0      	adds	r3, #176	; 0xb0
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	88d2      	ldrh	r2, [r2, #6]
 800ad6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	88db      	ldrh	r3, [r3, #6]
 800ad72:	2b07      	cmp	r3, #7
 800ad74:	bf28      	it	cs
 800ad76:	2307      	movcs	r3, #7
 800ad78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	89fa      	ldrh	r2, [r7, #14]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 fd89 	bl	800c898 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ad86:	e090      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	785a      	ldrb	r2, [r3, #1]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	88db      	ldrh	r3, [r3, #6]
 800ad96:	2b3f      	cmp	r3, #63	; 0x3f
 800ad98:	d803      	bhi.n	800ada2 <USBD_CDC_Setup+0xa6>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	88db      	ldrh	r3, [r3, #6]
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	e000      	b.n	800ada4 <USBD_CDC_Setup+0xa8>
 800ada2:	2240      	movs	r2, #64	; 0x40
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800adaa:	6939      	ldr	r1, [r7, #16]
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800adb2:	461a      	mov	r2, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 fd9b 	bl	800c8f0 <USBD_CtlPrepareRx>
      break;
 800adba:	e076      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	33b0      	adds	r3, #176	; 0xb0
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	7850      	ldrb	r0, [r2, #1]
 800add2:	2200      	movs	r2, #0
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	4798      	blx	r3
      break;
 800add8:	e067      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	785b      	ldrb	r3, [r3, #1]
 800adde:	2b0b      	cmp	r3, #11
 800ade0:	d851      	bhi.n	800ae86 <USBD_CDC_Setup+0x18a>
 800ade2:	a201      	add	r2, pc, #4	; (adr r2, 800ade8 <USBD_CDC_Setup+0xec>)
 800ade4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade8:	0800ae19 	.word	0x0800ae19
 800adec:	0800ae95 	.word	0x0800ae95
 800adf0:	0800ae87 	.word	0x0800ae87
 800adf4:	0800ae87 	.word	0x0800ae87
 800adf8:	0800ae87 	.word	0x0800ae87
 800adfc:	0800ae87 	.word	0x0800ae87
 800ae00:	0800ae87 	.word	0x0800ae87
 800ae04:	0800ae87 	.word	0x0800ae87
 800ae08:	0800ae87 	.word	0x0800ae87
 800ae0c:	0800ae87 	.word	0x0800ae87
 800ae10:	0800ae43 	.word	0x0800ae43
 800ae14:	0800ae6d 	.word	0x0800ae6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d107      	bne.n	800ae34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae24:	f107 030a 	add.w	r3, r7, #10
 800ae28:	2202      	movs	r2, #2
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f001 fd33 	bl	800c898 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae32:	e032      	b.n	800ae9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 fcbd 	bl	800c7b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	75fb      	strb	r3, [r7, #23]
          break;
 800ae40:	e02b      	b.n	800ae9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d107      	bne.n	800ae5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae4e:	f107 030d 	add.w	r3, r7, #13
 800ae52:	2201      	movs	r2, #1
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f001 fd1e 	bl	800c898 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae5c:	e01d      	b.n	800ae9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f001 fca8 	bl	800c7b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae66:	2303      	movs	r3, #3
 800ae68:	75fb      	strb	r3, [r7, #23]
          break;
 800ae6a:	e016      	b.n	800ae9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d00f      	beq.n	800ae98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f001 fc9b 	bl	800c7b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae80:	2303      	movs	r3, #3
 800ae82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae84:	e008      	b.n	800ae98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 fc94 	bl	800c7b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	75fb      	strb	r3, [r7, #23]
          break;
 800ae92:	e002      	b.n	800ae9a <USBD_CDC_Setup+0x19e>
          break;
 800ae94:	bf00      	nop
 800ae96:	e008      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>
          break;
 800ae98:	bf00      	nop
      }
      break;
 800ae9a:	e006      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f001 fc89 	bl	800c7b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800aea4:	2303      	movs	r3, #3
 800aea6:	75fb      	strb	r3, [r7, #23]
      break;
 800aea8:	bf00      	nop
  }

  return (uint8_t)ret;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	460b      	mov	r3, r1
 800aebe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aec6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	32b0      	adds	r2, #176	; 0xb0
 800aed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e065      	b.n	800afaa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	32b0      	adds	r2, #176	; 0xb0
 800aee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aeee:	78fb      	ldrb	r3, [r7, #3]
 800aef0:	f003 020f 	and.w	r2, r3, #15
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	4613      	mov	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	440b      	add	r3, r1
 800af00:	3318      	adds	r3, #24
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d02f      	beq.n	800af68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	f003 020f 	and.w	r2, r3, #15
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	440b      	add	r3, r1
 800af1a:	3318      	adds	r3, #24
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	f003 010f 	and.w	r1, r3, #15
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	460b      	mov	r3, r1
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	440b      	add	r3, r1
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4403      	add	r3, r0
 800af30:	3348      	adds	r3, #72	; 0x48
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	fbb2 f1f3 	udiv	r1, r2, r3
 800af38:	fb01 f303 	mul.w	r3, r1, r3
 800af3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d112      	bne.n	800af68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af42:	78fb      	ldrb	r3, [r7, #3]
 800af44:	f003 020f 	and.w	r2, r3, #15
 800af48:	6879      	ldr	r1, [r7, #4]
 800af4a:	4613      	mov	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	440b      	add	r3, r1
 800af54:	3318      	adds	r3, #24
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af5a:	78f9      	ldrb	r1, [r7, #3]
 800af5c:	2300      	movs	r3, #0
 800af5e:	2200      	movs	r2, #0
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f005 f8da 	bl	801011a <USBD_LL_Transmit>
 800af66:	e01f      	b.n	800afa8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	33b0      	adds	r3, #176	; 0xb0
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d010      	beq.n	800afa8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	33b0      	adds	r3, #176	; 0xb0
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800afa4:	78fa      	ldrb	r2, [r7, #3]
 800afa6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	460b      	mov	r3, r1
 800afbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	32b0      	adds	r2, #176	; 0xb0
 800afc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	32b0      	adds	r2, #176	; 0xb0
 800afd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e01a      	b.n	800b01a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f005 f8d8 	bl	801019e <USBD_LL_GetRxDataSize>
 800afee:	4602      	mov	r2, r0
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	33b0      	adds	r3, #176	; 0xb0
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b014:	4611      	mov	r1, r2
 800b016:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	32b0      	adds	r2, #176	; 0xb0
 800b034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b038:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b040:	2303      	movs	r3, #3
 800b042:	e025      	b.n	800b090 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	33b0      	adds	r3, #176	; 0xb0
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d01a      	beq.n	800b08e <USBD_CDC_EP0_RxReady+0x6c>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b05e:	2bff      	cmp	r3, #255	; 0xff
 800b060:	d015      	beq.n	800b08e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	33b0      	adds	r3, #176	; 0xb0
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b07a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b082:	b292      	uxth	r2, r2
 800b084:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	22ff      	movs	r2, #255	; 0xff
 800b08a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0a0:	2182      	movs	r1, #130	; 0x82
 800b0a2:	4818      	ldr	r0, [pc, #96]	; (800b104 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0a4:	f000 fd4f 	bl	800bb46 <USBD_GetEpDesc>
 800b0a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	4815      	ldr	r0, [pc, #84]	; (800b104 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0ae:	f000 fd4a 	bl	800bb46 <USBD_GetEpDesc>
 800b0b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0b4:	2181      	movs	r1, #129	; 0x81
 800b0b6:	4813      	ldr	r0, [pc, #76]	; (800b104 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0b8:	f000 fd45 	bl	800bb46 <USBD_GetEpDesc>
 800b0bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2210      	movs	r2, #16
 800b0c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d006      	beq.n	800b0de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0d8:	711a      	strb	r2, [r3, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d006      	beq.n	800b0f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0ec:	711a      	strb	r2, [r3, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2243      	movs	r2, #67	; 0x43
 800b0f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0f8:	4b02      	ldr	r3, [pc, #8]	; (800b104 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20000600 	.word	0x20000600

0800b108 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b110:	2182      	movs	r1, #130	; 0x82
 800b112:	4818      	ldr	r0, [pc, #96]	; (800b174 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b114:	f000 fd17 	bl	800bb46 <USBD_GetEpDesc>
 800b118:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b11a:	2101      	movs	r1, #1
 800b11c:	4815      	ldr	r0, [pc, #84]	; (800b174 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b11e:	f000 fd12 	bl	800bb46 <USBD_GetEpDesc>
 800b122:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b124:	2181      	movs	r1, #129	; 0x81
 800b126:	4813      	ldr	r0, [pc, #76]	; (800b174 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b128:	f000 fd0d 	bl	800bb46 <USBD_GetEpDesc>
 800b12c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2210      	movs	r2, #16
 800b138:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d006      	beq.n	800b14e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2200      	movs	r2, #0
 800b144:	711a      	strb	r2, [r3, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f042 0202 	orr.w	r2, r2, #2
 800b14c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d006      	beq.n	800b162 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	711a      	strb	r2, [r3, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f042 0202 	orr.w	r2, r2, #2
 800b160:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2243      	movs	r2, #67	; 0x43
 800b166:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b168:	4b02      	ldr	r3, [pc, #8]	; (800b174 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000600 	.word	0x20000600

0800b178 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b180:	2182      	movs	r1, #130	; 0x82
 800b182:	4818      	ldr	r0, [pc, #96]	; (800b1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b184:	f000 fcdf 	bl	800bb46 <USBD_GetEpDesc>
 800b188:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b18a:	2101      	movs	r1, #1
 800b18c:	4815      	ldr	r0, [pc, #84]	; (800b1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b18e:	f000 fcda 	bl	800bb46 <USBD_GetEpDesc>
 800b192:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b194:	2181      	movs	r1, #129	; 0x81
 800b196:	4813      	ldr	r0, [pc, #76]	; (800b1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b198:	f000 fcd5 	bl	800bb46 <USBD_GetEpDesc>
 800b19c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2210      	movs	r2, #16
 800b1a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d006      	beq.n	800b1be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1b8:	711a      	strb	r2, [r3, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d006      	beq.n	800b1d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1cc:	711a      	strb	r2, [r3, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2243      	movs	r2, #67	; 0x43
 800b1d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1d8:	4b02      	ldr	r3, [pc, #8]	; (800b1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000600 	.word	0x20000600

0800b1e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	220a      	movs	r2, #10
 800b1f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b1f6:	4b03      	ldr	r3, [pc, #12]	; (800b204 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	200005bc 	.word	0x200005bc

0800b208 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b218:	2303      	movs	r3, #3
 800b21a:	e009      	b.n	800b230 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	33b0      	adds	r3, #176	; 0xb0
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b087      	sub	sp, #28
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	32b0      	adds	r2, #176	; 0xb0
 800b252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b256:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b25e:	2303      	movs	r3, #3
 800b260:	e008      	b.n	800b274 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	371c      	adds	r7, #28
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	32b0      	adds	r2, #176	; 0xb0
 800b294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b298:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e004      	b.n	800b2ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
	...

0800b2bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	32b0      	adds	r2, #176	; 0xb0
 800b2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	32b0      	adds	r2, #176	; 0xb0
 800b2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e025      	b.n	800b33a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d11f      	bne.n	800b338 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b300:	4b10      	ldr	r3, [pc, #64]	; (800b344 <USBD_CDC_TransmitPacket+0x88>)
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	f003 020f 	and.w	r2, r3, #15
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4403      	add	r3, r0
 800b31a:	3318      	adds	r3, #24
 800b31c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b31e:	4b09      	ldr	r3, [pc, #36]	; (800b344 <USBD_CDC_TransmitPacket+0x88>)
 800b320:	7819      	ldrb	r1, [r3, #0]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f004 fef3 	bl	801011a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20000643 	.word	0x20000643

0800b348 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	32b0      	adds	r2, #176	; 0xb0
 800b35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	32b0      	adds	r2, #176	; 0xb0
 800b36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b372:	2303      	movs	r3, #3
 800b374:	e018      	b.n	800b3a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	7c1b      	ldrb	r3, [r3, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10a      	bne.n	800b394 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b37e:	4b0c      	ldr	r3, [pc, #48]	; (800b3b0 <USBD_CDC_ReceivePacket+0x68>)
 800b380:	7819      	ldrb	r1, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f004 fee5 	bl	801015c <USBD_LL_PrepareReceive>
 800b392:	e008      	b.n	800b3a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b394:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <USBD_CDC_ReceivePacket+0x68>)
 800b396:	7819      	ldrb	r1, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b39e:	2340      	movs	r3, #64	; 0x40
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f004 fedb 	bl	801015c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	20000644 	.word	0x20000644

0800b3b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e01f      	b.n	800b40c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d003      	beq.n	800b3f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	79fa      	ldrb	r2, [r7, #7]
 800b3fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f004 fd55 	bl	800feb0 <USBD_LL_Init>
 800b406:	4603      	mov	r3, r0
 800b408:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b428:	2303      	movs	r3, #3
 800b42a:	e025      	b.n	800b478 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	32ae      	adds	r2, #174	; 0xae
 800b43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00f      	beq.n	800b468 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	32ae      	adds	r2, #174	; 0xae
 800b452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	f107 020e 	add.w	r2, r7, #14
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	4602      	mov	r2, r0
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b46e:	1c5a      	adds	r2, r3, #1
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f004 fd5d 	bl	800ff48 <USBD_LL_Start>
 800b48e:	4603      	mov	r3, r0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d009      	beq.n	800b4dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	78fa      	ldrb	r2, [r7, #3]
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	4798      	blx	r3
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b084      	sub	sp, #16
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	78fa      	ldrb	r2, [r7, #3]
 800b500:	4611      	mov	r1, r2
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	4798      	blx	r3
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b510:	7bfb      	ldrb	r3, [r7, #15]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b084      	sub	sp, #16
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f001 f908 	bl	800c742 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b540:	461a      	mov	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b54e:	f003 031f 	and.w	r3, r3, #31
 800b552:	2b02      	cmp	r3, #2
 800b554:	d01a      	beq.n	800b58c <USBD_LL_SetupStage+0x72>
 800b556:	2b02      	cmp	r3, #2
 800b558:	d822      	bhi.n	800b5a0 <USBD_LL_SetupStage+0x86>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <USBD_LL_SetupStage+0x4a>
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d00a      	beq.n	800b578 <USBD_LL_SetupStage+0x5e>
 800b562:	e01d      	b.n	800b5a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fb5f 	bl	800bc30 <USBD_StdDevReq>
 800b572:	4603      	mov	r3, r0
 800b574:	73fb      	strb	r3, [r7, #15]
      break;
 800b576:	e020      	b.n	800b5ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fbc7 	bl	800bd14 <USBD_StdItfReq>
 800b586:	4603      	mov	r3, r0
 800b588:	73fb      	strb	r3, [r7, #15]
      break;
 800b58a:	e016      	b.n	800b5ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fc29 	bl	800bdec <USBD_StdEPReq>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
      break;
 800b59e:	e00c      	b.n	800b5ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f004 fd2a 	bl	8010008 <USBD_LL_StallEP>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5b8:	bf00      	nop
  }

  return ret;
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b5d6:	7afb      	ldrb	r3, [r7, #11]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d16e      	bne.n	800b6ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b5e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	f040 8098 	bne.w	800b720 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	689a      	ldr	r2, [r3, #8]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d913      	bls.n	800b624 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	689a      	ldr	r2, [r3, #8]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	1ad2      	subs	r2, r2, r3
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	68da      	ldr	r2, [r3, #12]
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	4293      	cmp	r3, r2
 800b614:	bf28      	it	cs
 800b616:	4613      	movcs	r3, r2
 800b618:	461a      	mov	r2, r3
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f001 f984 	bl	800c92a <USBD_CtlContinueRx>
 800b622:	e07d      	b.n	800b720 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b62a:	f003 031f 	and.w	r3, r3, #31
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d014      	beq.n	800b65c <USBD_LL_DataOutStage+0x98>
 800b632:	2b02      	cmp	r3, #2
 800b634:	d81d      	bhi.n	800b672 <USBD_LL_DataOutStage+0xae>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d002      	beq.n	800b640 <USBD_LL_DataOutStage+0x7c>
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d003      	beq.n	800b646 <USBD_LL_DataOutStage+0x82>
 800b63e:	e018      	b.n	800b672 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b640:	2300      	movs	r3, #0
 800b642:	75bb      	strb	r3, [r7, #22]
            break;
 800b644:	e018      	b.n	800b678 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	4619      	mov	r1, r3
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f000 fa5e 	bl	800bb12 <USBD_CoreFindIF>
 800b656:	4603      	mov	r3, r0
 800b658:	75bb      	strb	r3, [r7, #22]
            break;
 800b65a:	e00d      	b.n	800b678 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b662:	b2db      	uxtb	r3, r3
 800b664:	4619      	mov	r1, r3
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 fa60 	bl	800bb2c <USBD_CoreFindEP>
 800b66c:	4603      	mov	r3, r0
 800b66e:	75bb      	strb	r3, [r7, #22]
            break;
 800b670:	e002      	b.n	800b678 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	75bb      	strb	r3, [r7, #22]
            break;
 800b676:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b678:	7dbb      	ldrb	r3, [r7, #22]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d119      	bne.n	800b6b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b03      	cmp	r3, #3
 800b688:	d113      	bne.n	800b6b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b68a:	7dba      	ldrb	r2, [r7, #22]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	32ae      	adds	r2, #174	; 0xae
 800b690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00b      	beq.n	800b6b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b69a:	7dba      	ldrb	r2, [r7, #22]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b6a2:	7dba      	ldrb	r2, [r7, #22]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	32ae      	adds	r2, #174	; 0xae
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f001 f94a 	bl	800c94c <USBD_CtlSendStatus>
 800b6b8:	e032      	b.n	800b720 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b6ba:	7afb      	ldrb	r3, [r7, #11]
 800b6bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 fa31 	bl	800bb2c <USBD_CoreFindEP>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6ce:	7dbb      	ldrb	r3, [r7, #22]
 800b6d0:	2bff      	cmp	r3, #255	; 0xff
 800b6d2:	d025      	beq.n	800b720 <USBD_LL_DataOutStage+0x15c>
 800b6d4:	7dbb      	ldrb	r3, [r7, #22]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d122      	bne.n	800b720 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d117      	bne.n	800b716 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b6e6:	7dba      	ldrb	r2, [r7, #22]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	32ae      	adds	r2, #174	; 0xae
 800b6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00f      	beq.n	800b716 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b6f6:	7dba      	ldrb	r2, [r7, #22]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b6fe:	7dba      	ldrb	r2, [r7, #22]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	32ae      	adds	r2, #174	; 0xae
 800b704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	7afa      	ldrb	r2, [r7, #11]
 800b70c:	4611      	mov	r1, r2
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	4798      	blx	r3
 800b712:	4603      	mov	r3, r0
 800b714:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b71c:	7dfb      	ldrb	r3, [r7, #23]
 800b71e:	e000      	b.n	800b722 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b086      	sub	sp, #24
 800b72e:	af00      	add	r7, sp, #0
 800b730:	60f8      	str	r0, [r7, #12]
 800b732:	460b      	mov	r3, r1
 800b734:	607a      	str	r2, [r7, #4]
 800b736:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b738:	7afb      	ldrb	r3, [r7, #11]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d16f      	bne.n	800b81e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3314      	adds	r3, #20
 800b742:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d15a      	bne.n	800b804 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	429a      	cmp	r2, r3
 800b758:	d914      	bls.n	800b784 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	689a      	ldr	r2, [r3, #8]
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	1ad2      	subs	r2, r2, r3
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	461a      	mov	r2, r3
 800b76e:	6879      	ldr	r1, [r7, #4]
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f001 f8ac 	bl	800c8ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b776:	2300      	movs	r3, #0
 800b778:	2200      	movs	r2, #0
 800b77a:	2100      	movs	r1, #0
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f004 fced 	bl	801015c <USBD_LL_PrepareReceive>
 800b782:	e03f      	b.n	800b804 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d11c      	bne.n	800b7ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b798:	429a      	cmp	r2, r3
 800b79a:	d316      	bcc.n	800b7ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d20f      	bcs.n	800b7ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f001 f88d 	bl	800c8ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7bc:	2300      	movs	r3, #0
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f004 fcca 	bl	801015c <USBD_LL_PrepareReceive>
 800b7c8:	e01c      	b.n	800b804 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d10f      	bne.n	800b7f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d009      	beq.n	800b7f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7f6:	2180      	movs	r1, #128	; 0x80
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f004 fc05 	bl	8010008 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f001 f8b7 	bl	800c972 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d03a      	beq.n	800b884 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7ff fe42 	bl	800b498 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b81c:	e032      	b.n	800b884 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b81e:	7afb      	ldrb	r3, [r7, #11]
 800b820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b824:	b2db      	uxtb	r3, r3
 800b826:	4619      	mov	r1, r3
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 f97f 	bl	800bb2c <USBD_CoreFindEP>
 800b82e:	4603      	mov	r3, r0
 800b830:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b832:	7dfb      	ldrb	r3, [r7, #23]
 800b834:	2bff      	cmp	r3, #255	; 0xff
 800b836:	d025      	beq.n	800b884 <USBD_LL_DataInStage+0x15a>
 800b838:	7dfb      	ldrb	r3, [r7, #23]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d122      	bne.n	800b884 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b03      	cmp	r3, #3
 800b848:	d11c      	bne.n	800b884 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b84a:	7dfa      	ldrb	r2, [r7, #23]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	32ae      	adds	r2, #174	; 0xae
 800b850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d014      	beq.n	800b884 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b85a:	7dfa      	ldrb	r2, [r7, #23]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b862:	7dfa      	ldrb	r2, [r7, #23]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	32ae      	adds	r2, #174	; 0xae
 800b868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	7afa      	ldrb	r2, [r7, #11]
 800b870:	4611      	mov	r1, r2
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	4798      	blx	r3
 800b876:	4603      	mov	r3, r0
 800b878:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b87a:	7dbb      	ldrb	r3, [r7, #22]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b880:	7dbb      	ldrb	r3, [r7, #22]
 800b882:	e000      	b.n	800b886 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b084      	sub	sp, #16
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b896:	2300      	movs	r3, #0
 800b898:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d014      	beq.n	800b8f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00e      	beq.n	800b8f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	6852      	ldr	r2, [r2, #4]
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	4798      	blx	r3
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8f4:	2340      	movs	r3, #64	; 0x40
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f004 fb3f 	bl	800ff7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2240      	movs	r2, #64	; 0x40
 800b90c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b910:	2340      	movs	r3, #64	; 0x40
 800b912:	2200      	movs	r2, #0
 800b914:	2180      	movs	r1, #128	; 0x80
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f004 fb31 	bl	800ff7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2240      	movs	r2, #64	; 0x40
 800b926:	621a      	str	r2, [r3, #32]

  return ret;
 800b928:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b932:	b480      	push	{r7}
 800b934:	b083      	sub	sp, #12
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	460b      	mov	r3, r1
 800b93c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	78fa      	ldrb	r2, [r7, #3]
 800b942:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b960:	b2da      	uxtb	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2204      	movs	r2, #4
 800b96c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	370c      	adds	r7, #12
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b97e:	b480      	push	{r7}
 800b980:	b083      	sub	sp, #12
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d106      	bne.n	800b9a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d110      	bne.n	800b9e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00b      	beq.n	800b9e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d2:	69db      	ldr	r3, [r3, #28]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d005      	beq.n	800b9e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9de:	69db      	ldr	r3, [r3, #28]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	32ae      	adds	r2, #174	; 0xae
 800ba04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d101      	bne.n	800ba10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e01c      	b.n	800ba4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d115      	bne.n	800ba48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	32ae      	adds	r2, #174	; 0xae
 800ba26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00b      	beq.n	800ba48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	32ae      	adds	r2, #174	; 0xae
 800ba3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3e:	6a1b      	ldr	r3, [r3, #32]
 800ba40:	78fa      	ldrb	r2, [r7, #3]
 800ba42:	4611      	mov	r1, r2
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b082      	sub	sp, #8
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	32ae      	adds	r2, #174	; 0xae
 800ba68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e01c      	b.n	800baae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d115      	bne.n	800baac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	32ae      	adds	r2, #174	; 0xae
 800ba8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00b      	beq.n	800baac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	32ae      	adds	r2, #174	; 0xae
 800ba9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa4:	78fa      	ldrb	r2, [r7, #3]
 800baa6:	4611      	mov	r1, r2
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b083      	sub	sp, #12
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00e      	beq.n	800bb08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	6852      	ldr	r2, [r2, #4]
 800baf6:	b2d2      	uxtb	r2, r2
 800baf8:	4611      	mov	r1, r2
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	4798      	blx	r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bb04:	2303      	movs	r3, #3
 800bb06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b083      	sub	sp, #12
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b086      	sub	sp, #24
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	885b      	ldrh	r3, [r3, #2]
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d920      	bls.n	800bbb0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bb76:	e013      	b.n	800bba0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bb78:	f107 030a 	add.w	r3, r7, #10
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6978      	ldr	r0, [r7, #20]
 800bb80:	f000 f81b 	bl	800bbba <USBD_GetNextDesc>
 800bb84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	785b      	ldrb	r3, [r3, #1]
 800bb8a:	2b05      	cmp	r3, #5
 800bb8c:	d108      	bne.n	800bba0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	789b      	ldrb	r3, [r3, #2]
 800bb96:	78fa      	ldrb	r2, [r7, #3]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d008      	beq.n	800bbae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	885b      	ldrh	r3, [r3, #2]
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	897b      	ldrh	r3, [r7, #10]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d8e5      	bhi.n	800bb78 <USBD_GetEpDesc+0x32>
 800bbac:	e000      	b.n	800bbb0 <USBD_GetEpDesc+0x6a>
          break;
 800bbae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bbb0:	693b      	ldr	r3, [r7, #16]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b085      	sub	sp, #20
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	881a      	ldrh	r2, [r3, #0]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc12:	8a3b      	ldrh	r3, [r7, #16]
 800bc14:	021b      	lsls	r3, r3, #8
 800bc16:	b21a      	sxth	r2, r3
 800bc18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	b21b      	sxth	r3, r3
 800bc20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc22:	89fb      	ldrh	r3, [r7, #14]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	371c      	adds	r7, #28
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc46:	2b40      	cmp	r3, #64	; 0x40
 800bc48:	d005      	beq.n	800bc56 <USBD_StdDevReq+0x26>
 800bc4a:	2b40      	cmp	r3, #64	; 0x40
 800bc4c:	d857      	bhi.n	800bcfe <USBD_StdDevReq+0xce>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00f      	beq.n	800bc72 <USBD_StdDevReq+0x42>
 800bc52:	2b20      	cmp	r3, #32
 800bc54:	d153      	bne.n	800bcfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	32ae      	adds	r2, #174	; 0xae
 800bc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	4798      	blx	r3
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc70:	e04a      	b.n	800bd08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	2b09      	cmp	r3, #9
 800bc78:	d83b      	bhi.n	800bcf2 <USBD_StdDevReq+0xc2>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <USBD_StdDevReq+0x50>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bcd5 	.word	0x0800bcd5
 800bc84:	0800bce9 	.word	0x0800bce9
 800bc88:	0800bcf3 	.word	0x0800bcf3
 800bc8c:	0800bcdf 	.word	0x0800bcdf
 800bc90:	0800bcf3 	.word	0x0800bcf3
 800bc94:	0800bcb3 	.word	0x0800bcb3
 800bc98:	0800bca9 	.word	0x0800bca9
 800bc9c:	0800bcf3 	.word	0x0800bcf3
 800bca0:	0800bccb 	.word	0x0800bccb
 800bca4:	0800bcbd 	.word	0x0800bcbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fa3c 	bl	800c128 <USBD_GetDescriptor>
          break;
 800bcb0:	e024      	b.n	800bcfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fba1 	bl	800c3fc <USBD_SetAddress>
          break;
 800bcba:	e01f      	b.n	800bcfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fbe0 	bl	800c484 <USBD_SetConfig>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	73fb      	strb	r3, [r7, #15]
          break;
 800bcc8:	e018      	b.n	800bcfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fc83 	bl	800c5d8 <USBD_GetConfig>
          break;
 800bcd2:	e013      	b.n	800bcfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 fcb4 	bl	800c644 <USBD_GetStatus>
          break;
 800bcdc:	e00e      	b.n	800bcfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 fce3 	bl	800c6ac <USBD_SetFeature>
          break;
 800bce6:	e009      	b.n	800bcfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fd07 	bl	800c6fe <USBD_ClrFeature>
          break;
 800bcf0:	e004      	b.n	800bcfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fd5e 	bl	800c7b6 <USBD_CtlError>
          break;
 800bcfa:	bf00      	nop
      }
      break;
 800bcfc:	e004      	b.n	800bd08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fd58 	bl	800c7b6 <USBD_CtlError>
      break;
 800bd06:	bf00      	nop
  }

  return ret;
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop

0800bd14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd2a:	2b40      	cmp	r3, #64	; 0x40
 800bd2c:	d005      	beq.n	800bd3a <USBD_StdItfReq+0x26>
 800bd2e:	2b40      	cmp	r3, #64	; 0x40
 800bd30:	d852      	bhi.n	800bdd8 <USBD_StdItfReq+0xc4>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <USBD_StdItfReq+0x26>
 800bd36:	2b20      	cmp	r3, #32
 800bd38:	d14e      	bne.n	800bdd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	3b01      	subs	r3, #1
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d840      	bhi.n	800bdca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	889b      	ldrh	r3, [r3, #4]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d836      	bhi.n	800bdc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	889b      	ldrh	r3, [r3, #4]
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	4619      	mov	r1, r3
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7ff fed9 	bl	800bb12 <USBD_CoreFindIF>
 800bd60:	4603      	mov	r3, r0
 800bd62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	2bff      	cmp	r3, #255	; 0xff
 800bd68:	d01d      	beq.n	800bda6 <USBD_StdItfReq+0x92>
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d11a      	bne.n	800bda6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bd70:	7bba      	ldrb	r2, [r7, #14]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	32ae      	adds	r2, #174	; 0xae
 800bd76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00f      	beq.n	800bda0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bd80:	7bba      	ldrb	r2, [r7, #14]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd88:	7bba      	ldrb	r2, [r7, #14]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	32ae      	adds	r2, #174	; 0xae
 800bd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd9e:	e004      	b.n	800bdaa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bda0:	2303      	movs	r3, #3
 800bda2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bda4:	e001      	b.n	800bdaa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bda6:	2303      	movs	r3, #3
 800bda8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	88db      	ldrh	r3, [r3, #6]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d110      	bne.n	800bdd4 <USBD_StdItfReq+0xc0>
 800bdb2:	7bfb      	ldrb	r3, [r7, #15]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10d      	bne.n	800bdd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fdc7 	bl	800c94c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bdbe:	e009      	b.n	800bdd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 fcf7 	bl	800c7b6 <USBD_CtlError>
          break;
 800bdc8:	e004      	b.n	800bdd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fcf2 	bl	800c7b6 <USBD_CtlError>
          break;
 800bdd2:	e000      	b.n	800bdd6 <USBD_StdItfReq+0xc2>
          break;
 800bdd4:	bf00      	nop
      }
      break;
 800bdd6:	e004      	b.n	800bde2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fceb 	bl	800c7b6 <USBD_CtlError>
      break;
 800bde0:	bf00      	nop
  }

  return ret;
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	889b      	ldrh	r3, [r3, #4]
 800bdfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be08:	2b40      	cmp	r3, #64	; 0x40
 800be0a:	d007      	beq.n	800be1c <USBD_StdEPReq+0x30>
 800be0c:	2b40      	cmp	r3, #64	; 0x40
 800be0e:	f200 817f 	bhi.w	800c110 <USBD_StdEPReq+0x324>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d02a      	beq.n	800be6c <USBD_StdEPReq+0x80>
 800be16:	2b20      	cmp	r3, #32
 800be18:	f040 817a 	bne.w	800c110 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800be1c:	7bbb      	ldrb	r3, [r7, #14]
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff fe83 	bl	800bb2c <USBD_CoreFindEP>
 800be26:	4603      	mov	r3, r0
 800be28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be2a:	7b7b      	ldrb	r3, [r7, #13]
 800be2c:	2bff      	cmp	r3, #255	; 0xff
 800be2e:	f000 8174 	beq.w	800c11a <USBD_StdEPReq+0x32e>
 800be32:	7b7b      	ldrb	r3, [r7, #13]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f040 8170 	bne.w	800c11a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800be3a:	7b7a      	ldrb	r2, [r7, #13]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800be42:	7b7a      	ldrb	r2, [r7, #13]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	32ae      	adds	r2, #174	; 0xae
 800be48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 8163 	beq.w	800c11a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be54:	7b7a      	ldrb	r2, [r7, #13]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	32ae      	adds	r2, #174	; 0xae
 800be5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	4798      	blx	r3
 800be66:	4603      	mov	r3, r0
 800be68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be6a:	e156      	b.n	800c11a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	785b      	ldrb	r3, [r3, #1]
 800be70:	2b03      	cmp	r3, #3
 800be72:	d008      	beq.n	800be86 <USBD_StdEPReq+0x9a>
 800be74:	2b03      	cmp	r3, #3
 800be76:	f300 8145 	bgt.w	800c104 <USBD_StdEPReq+0x318>
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 809b 	beq.w	800bfb6 <USBD_StdEPReq+0x1ca>
 800be80:	2b01      	cmp	r3, #1
 800be82:	d03c      	beq.n	800befe <USBD_StdEPReq+0x112>
 800be84:	e13e      	b.n	800c104 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d002      	beq.n	800be98 <USBD_StdEPReq+0xac>
 800be92:	2b03      	cmp	r3, #3
 800be94:	d016      	beq.n	800bec4 <USBD_StdEPReq+0xd8>
 800be96:	e02c      	b.n	800bef2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be98:	7bbb      	ldrb	r3, [r7, #14]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00d      	beq.n	800beba <USBD_StdEPReq+0xce>
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	2b80      	cmp	r3, #128	; 0x80
 800bea2:	d00a      	beq.n	800beba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bea4:	7bbb      	ldrb	r3, [r7, #14]
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f004 f8ad 	bl	8010008 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800beae:	2180      	movs	r1, #128	; 0x80
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f004 f8a9 	bl	8010008 <USBD_LL_StallEP>
 800beb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800beb8:	e020      	b.n	800befc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fc7a 	bl	800c7b6 <USBD_CtlError>
              break;
 800bec2:	e01b      	b.n	800befc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	885b      	ldrh	r3, [r3, #2]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10e      	bne.n	800beea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800becc:	7bbb      	ldrb	r3, [r7, #14]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00b      	beq.n	800beea <USBD_StdEPReq+0xfe>
 800bed2:	7bbb      	ldrb	r3, [r7, #14]
 800bed4:	2b80      	cmp	r3, #128	; 0x80
 800bed6:	d008      	beq.n	800beea <USBD_StdEPReq+0xfe>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	88db      	ldrh	r3, [r3, #6]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d104      	bne.n	800beea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bee0:	7bbb      	ldrb	r3, [r7, #14]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f004 f88f 	bl	8010008 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fd2e 	bl	800c94c <USBD_CtlSendStatus>

              break;
 800bef0:	e004      	b.n	800befc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fc5e 	bl	800c7b6 <USBD_CtlError>
              break;
 800befa:	bf00      	nop
          }
          break;
 800befc:	e107      	b.n	800c10e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d002      	beq.n	800bf10 <USBD_StdEPReq+0x124>
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d016      	beq.n	800bf3c <USBD_StdEPReq+0x150>
 800bf0e:	e04b      	b.n	800bfa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00d      	beq.n	800bf32 <USBD_StdEPReq+0x146>
 800bf16:	7bbb      	ldrb	r3, [r7, #14]
 800bf18:	2b80      	cmp	r3, #128	; 0x80
 800bf1a:	d00a      	beq.n	800bf32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f004 f871 	bl	8010008 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf26:	2180      	movs	r1, #128	; 0x80
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f004 f86d 	bl	8010008 <USBD_LL_StallEP>
 800bf2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf30:	e040      	b.n	800bfb4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fc3e 	bl	800c7b6 <USBD_CtlError>
              break;
 800bf3a:	e03b      	b.n	800bfb4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	885b      	ldrh	r3, [r3, #2]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d136      	bne.n	800bfb2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d004      	beq.n	800bf58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
 800bf50:	4619      	mov	r1, r3
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f004 f877 	bl	8010046 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fcf7 	bl	800c94c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf5e:	7bbb      	ldrb	r3, [r7, #14]
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7ff fde2 	bl	800bb2c <USBD_CoreFindEP>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf6c:	7b7b      	ldrb	r3, [r7, #13]
 800bf6e:	2bff      	cmp	r3, #255	; 0xff
 800bf70:	d01f      	beq.n	800bfb2 <USBD_StdEPReq+0x1c6>
 800bf72:	7b7b      	ldrb	r3, [r7, #13]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d11c      	bne.n	800bfb2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bf78:	7b7a      	ldrb	r2, [r7, #13]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf80:	7b7a      	ldrb	r2, [r7, #13]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	32ae      	adds	r2, #174	; 0xae
 800bf86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d010      	beq.n	800bfb2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf90:	7b7a      	ldrb	r2, [r7, #13]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	32ae      	adds	r2, #174	; 0xae
 800bf96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	4798      	blx	r3
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bfa6:	e004      	b.n	800bfb2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fc03 	bl	800c7b6 <USBD_CtlError>
              break;
 800bfb0:	e000      	b.n	800bfb4 <USBD_StdEPReq+0x1c8>
              break;
 800bfb2:	bf00      	nop
          }
          break;
 800bfb4:	e0ab      	b.n	800c10e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d002      	beq.n	800bfc8 <USBD_StdEPReq+0x1dc>
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d032      	beq.n	800c02c <USBD_StdEPReq+0x240>
 800bfc6:	e097      	b.n	800c0f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d007      	beq.n	800bfde <USBD_StdEPReq+0x1f2>
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	2b80      	cmp	r3, #128	; 0x80
 800bfd2:	d004      	beq.n	800bfde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fbed 	bl	800c7b6 <USBD_CtlError>
                break;
 800bfdc:	e091      	b.n	800c102 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	da0b      	bge.n	800bffe <USBD_StdEPReq+0x212>
 800bfe6:	7bbb      	ldrb	r3, [r7, #14]
 800bfe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfec:	4613      	mov	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	3310      	adds	r3, #16
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	4413      	add	r3, r2
 800bffa:	3304      	adds	r3, #4
 800bffc:	e00b      	b.n	800c016 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bffe:	7bbb      	ldrb	r3, [r7, #14]
 800c000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c004:	4613      	mov	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4413      	add	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	4413      	add	r3, r2
 800c014:	3304      	adds	r3, #4
 800c016:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	2202      	movs	r2, #2
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fc37 	bl	800c898 <USBD_CtlSendData>
              break;
 800c02a:	e06a      	b.n	800c102 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c030:	2b00      	cmp	r3, #0
 800c032:	da11      	bge.n	800c058 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	f003 020f 	and.w	r2, r3, #15
 800c03a:	6879      	ldr	r1, [r7, #4]
 800c03c:	4613      	mov	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	440b      	add	r3, r1
 800c046:	3324      	adds	r3, #36	; 0x24
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d117      	bne.n	800c07e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fbb0 	bl	800c7b6 <USBD_CtlError>
                  break;
 800c056:	e054      	b.n	800c102 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	f003 020f 	and.w	r2, r3, #15
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	440b      	add	r3, r1
 800c06a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c06e:	881b      	ldrh	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d104      	bne.n	800c07e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fb9d 	bl	800c7b6 <USBD_CtlError>
                  break;
 800c07c:	e041      	b.n	800c102 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c07e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c082:	2b00      	cmp	r3, #0
 800c084:	da0b      	bge.n	800c09e <USBD_StdEPReq+0x2b2>
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c08c:	4613      	mov	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	3310      	adds	r3, #16
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	4413      	add	r3, r2
 800c09a:	3304      	adds	r3, #4
 800c09c:	e00b      	b.n	800c0b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d002      	beq.n	800c0c4 <USBD_StdEPReq+0x2d8>
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	2b80      	cmp	r3, #128	; 0x80
 800c0c2:	d103      	bne.n	800c0cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	e00e      	b.n	800c0ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f003 ffd7 	bl	8010084 <USBD_LL_IsStallEP>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]
 800c0e2:	e002      	b.n	800c0ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fbd1 	bl	800c898 <USBD_CtlSendData>
              break;
 800c0f6:	e004      	b.n	800c102 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fb5b 	bl	800c7b6 <USBD_CtlError>
              break;
 800c100:	bf00      	nop
          }
          break;
 800c102:	e004      	b.n	800c10e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fb55 	bl	800c7b6 <USBD_CtlError>
          break;
 800c10c:	bf00      	nop
      }
      break;
 800c10e:	e005      	b.n	800c11c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fb4f 	bl	800c7b6 <USBD_CtlError>
      break;
 800c118:	e000      	b.n	800c11c <USBD_StdEPReq+0x330>
      break;
 800c11a:	bf00      	nop
  }

  return ret;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c132:	2300      	movs	r3, #0
 800c134:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	885b      	ldrh	r3, [r3, #2]
 800c142:	0a1b      	lsrs	r3, r3, #8
 800c144:	b29b      	uxth	r3, r3
 800c146:	3b01      	subs	r3, #1
 800c148:	2b06      	cmp	r3, #6
 800c14a:	f200 8128 	bhi.w	800c39e <USBD_GetDescriptor+0x276>
 800c14e:	a201      	add	r2, pc, #4	; (adr r2, 800c154 <USBD_GetDescriptor+0x2c>)
 800c150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c154:	0800c171 	.word	0x0800c171
 800c158:	0800c189 	.word	0x0800c189
 800c15c:	0800c1c9 	.word	0x0800c1c9
 800c160:	0800c39f 	.word	0x0800c39f
 800c164:	0800c39f 	.word	0x0800c39f
 800c168:	0800c33f 	.word	0x0800c33f
 800c16c:	0800c36b 	.word	0x0800c36b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	7c12      	ldrb	r2, [r2, #16]
 800c17c:	f107 0108 	add.w	r1, r7, #8
 800c180:	4610      	mov	r0, r2
 800c182:	4798      	blx	r3
 800c184:	60f8      	str	r0, [r7, #12]
      break;
 800c186:	e112      	b.n	800c3ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	7c1b      	ldrb	r3, [r3, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10d      	bne.n	800c1ac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c198:	f107 0208 	add.w	r2, r7, #8
 800c19c:	4610      	mov	r0, r2
 800c19e:	4798      	blx	r3
 800c1a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c1aa:	e100      	b.n	800c3ae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b4:	f107 0208 	add.w	r2, r7, #8
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
 800c1bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	701a      	strb	r2, [r3, #0]
      break;
 800c1c6:	e0f2      	b.n	800c3ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	885b      	ldrh	r3, [r3, #2]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b05      	cmp	r3, #5
 800c1d0:	f200 80ac 	bhi.w	800c32c <USBD_GetDescriptor+0x204>
 800c1d4:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <USBD_GetDescriptor+0xb4>)
 800c1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1da:	bf00      	nop
 800c1dc:	0800c1f5 	.word	0x0800c1f5
 800c1e0:	0800c229 	.word	0x0800c229
 800c1e4:	0800c25d 	.word	0x0800c25d
 800c1e8:	0800c291 	.word	0x0800c291
 800c1ec:	0800c2c5 	.word	0x0800c2c5
 800c1f0:	0800c2f9 	.word	0x0800c2f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00b      	beq.n	800c218 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	7c12      	ldrb	r2, [r2, #16]
 800c20c:	f107 0108 	add.w	r1, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c216:	e091      	b.n	800c33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 facb 	bl	800c7b6 <USBD_CtlError>
            err++;
 800c220:	7afb      	ldrb	r3, [r7, #11]
 800c222:	3301      	adds	r3, #1
 800c224:	72fb      	strb	r3, [r7, #11]
          break;
 800c226:	e089      	b.n	800c33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	7c12      	ldrb	r2, [r2, #16]
 800c240:	f107 0108 	add.w	r1, r7, #8
 800c244:	4610      	mov	r0, r2
 800c246:	4798      	blx	r3
 800c248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c24a:	e077      	b.n	800c33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fab1 	bl	800c7b6 <USBD_CtlError>
            err++;
 800c254:	7afb      	ldrb	r3, [r7, #11]
 800c256:	3301      	adds	r3, #1
 800c258:	72fb      	strb	r3, [r7, #11]
          break;
 800c25a:	e06f      	b.n	800c33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	7c12      	ldrb	r2, [r2, #16]
 800c274:	f107 0108 	add.w	r1, r7, #8
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
 800c27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c27e:	e05d      	b.n	800c33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fa97 	bl	800c7b6 <USBD_CtlError>
            err++;
 800c288:	7afb      	ldrb	r3, [r7, #11]
 800c28a:	3301      	adds	r3, #1
 800c28c:	72fb      	strb	r3, [r7, #11]
          break;
 800c28e:	e055      	b.n	800c33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	7c12      	ldrb	r2, [r2, #16]
 800c2a8:	f107 0108 	add.w	r1, r7, #8
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	4798      	blx	r3
 800c2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2b2:	e043      	b.n	800c33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fa7d 	bl	800c7b6 <USBD_CtlError>
            err++;
 800c2bc:	7afb      	ldrb	r3, [r7, #11]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2c2:	e03b      	b.n	800c33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00b      	beq.n	800c2e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	7c12      	ldrb	r2, [r2, #16]
 800c2dc:	f107 0108 	add.w	r1, r7, #8
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	4798      	blx	r3
 800c2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2e6:	e029      	b.n	800c33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fa63 	bl	800c7b6 <USBD_CtlError>
            err++;
 800c2f0:	7afb      	ldrb	r3, [r7, #11]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2f6:	e021      	b.n	800c33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00b      	beq.n	800c31c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	7c12      	ldrb	r2, [r2, #16]
 800c310:	f107 0108 	add.w	r1, r7, #8
 800c314:	4610      	mov	r0, r2
 800c316:	4798      	blx	r3
 800c318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c31a:	e00f      	b.n	800c33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fa49 	bl	800c7b6 <USBD_CtlError>
            err++;
 800c324:	7afb      	ldrb	r3, [r7, #11]
 800c326:	3301      	adds	r3, #1
 800c328:	72fb      	strb	r3, [r7, #11]
          break;
 800c32a:	e007      	b.n	800c33c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fa41 	bl	800c7b6 <USBD_CtlError>
          err++;
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	3301      	adds	r3, #1
 800c338:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c33a:	bf00      	nop
      }
      break;
 800c33c:	e037      	b.n	800c3ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	7c1b      	ldrb	r3, [r3, #16]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d109      	bne.n	800c35a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c34e:	f107 0208 	add.w	r2, r7, #8
 800c352:	4610      	mov	r0, r2
 800c354:	4798      	blx	r3
 800c356:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c358:	e029      	b.n	800c3ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 fa2a 	bl	800c7b6 <USBD_CtlError>
        err++;
 800c362:	7afb      	ldrb	r3, [r7, #11]
 800c364:	3301      	adds	r3, #1
 800c366:	72fb      	strb	r3, [r7, #11]
      break;
 800c368:	e021      	b.n	800c3ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	7c1b      	ldrb	r3, [r3, #16]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10d      	bne.n	800c38e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c37a:	f107 0208 	add.w	r2, r7, #8
 800c37e:	4610      	mov	r0, r2
 800c380:	4798      	blx	r3
 800c382:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	3301      	adds	r3, #1
 800c388:	2207      	movs	r2, #7
 800c38a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c38c:	e00f      	b.n	800c3ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c38e:	6839      	ldr	r1, [r7, #0]
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fa10 	bl	800c7b6 <USBD_CtlError>
        err++;
 800c396:	7afb      	ldrb	r3, [r7, #11]
 800c398:	3301      	adds	r3, #1
 800c39a:	72fb      	strb	r3, [r7, #11]
      break;
 800c39c:	e007      	b.n	800c3ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c39e:	6839      	ldr	r1, [r7, #0]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fa08 	bl	800c7b6 <USBD_CtlError>
      err++;
 800c3a6:	7afb      	ldrb	r3, [r7, #11]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c3ac:	bf00      	nop
  }

  if (err != 0U)
 800c3ae:	7afb      	ldrb	r3, [r7, #11]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d11e      	bne.n	800c3f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	88db      	ldrh	r3, [r3, #6]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d016      	beq.n	800c3ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c3bc:	893b      	ldrh	r3, [r7, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00e      	beq.n	800c3e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	88da      	ldrh	r2, [r3, #6]
 800c3c6:	893b      	ldrh	r3, [r7, #8]
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	bf28      	it	cs
 800c3cc:	4613      	movcs	r3, r2
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c3d2:	893b      	ldrh	r3, [r7, #8]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	68f9      	ldr	r1, [r7, #12]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fa5d 	bl	800c898 <USBD_CtlSendData>
 800c3de:	e009      	b.n	800c3f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f9e7 	bl	800c7b6 <USBD_CtlError>
 800c3e8:	e004      	b.n	800c3f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 faae 	bl	800c94c <USBD_CtlSendStatus>
 800c3f0:	e000      	b.n	800c3f4 <USBD_GetDescriptor+0x2cc>
    return;
 800c3f2:	bf00      	nop
  }
}
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop

0800c3fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	889b      	ldrh	r3, [r3, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d131      	bne.n	800c472 <USBD_SetAddress+0x76>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	88db      	ldrh	r3, [r3, #6]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d12d      	bne.n	800c472 <USBD_SetAddress+0x76>
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	885b      	ldrh	r3, [r3, #2]
 800c41a:	2b7f      	cmp	r3, #127	; 0x7f
 800c41c:	d829      	bhi.n	800c472 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	885b      	ldrh	r3, [r3, #2]
 800c422:	b2db      	uxtb	r3, r3
 800c424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c428:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b03      	cmp	r3, #3
 800c434:	d104      	bne.n	800c440 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f9bc 	bl	800c7b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c43e:	e01d      	b.n	800c47c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	7bfa      	ldrb	r2, [r7, #15]
 800c444:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	4619      	mov	r1, r3
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f003 fe45 	bl	80100dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 fa7a 	bl	800c94c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c458:	7bfb      	ldrb	r3, [r7, #15]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2202      	movs	r2, #2
 800c462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c466:	e009      	b.n	800c47c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c470:	e004      	b.n	800c47c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 f99e 	bl	800c7b6 <USBD_CtlError>
  }
}
 800c47a:	bf00      	nop
 800c47c:	bf00      	nop
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	885b      	ldrh	r3, [r3, #2]
 800c496:	b2da      	uxtb	r2, r3
 800c498:	4b4e      	ldr	r3, [pc, #312]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c49a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c49c:	4b4d      	ldr	r3, [pc, #308]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d905      	bls.n	800c4b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f985 	bl	800c7b6 <USBD_CtlError>
    return USBD_FAIL;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	e08c      	b.n	800c5ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d002      	beq.n	800c4c2 <USBD_SetConfig+0x3e>
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d029      	beq.n	800c514 <USBD_SetConfig+0x90>
 800c4c0:	e075      	b.n	800c5ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c4c2:	4b44      	ldr	r3, [pc, #272]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d020      	beq.n	800c50c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c4ca:	4b42      	ldr	r3, [pc, #264]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4d4:	4b3f      	ldr	r3, [pc, #252]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	4619      	mov	r1, r3
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7fe ffe7 	bl	800b4ae <USBD_SetClassConfig>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d008      	beq.n	800c4fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f962 	bl	800c7b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4fa:	e065      	b.n	800c5c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fa25 	bl	800c94c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2203      	movs	r2, #3
 800c506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c50a:	e05d      	b.n	800c5c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fa1d 	bl	800c94c <USBD_CtlSendStatus>
      break;
 800c512:	e059      	b.n	800c5c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c514:	4b2f      	ldr	r3, [pc, #188]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d112      	bne.n	800c542 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2202      	movs	r2, #2
 800c520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c524:	4b2b      	ldr	r3, [pc, #172]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	461a      	mov	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c52e:	4b29      	ldr	r3, [pc, #164]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7fe ffd6 	bl	800b4e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fa06 	bl	800c94c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c540:	e042      	b.n	800c5c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c542:	4b24      	ldr	r3, [pc, #144]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	461a      	mov	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d02a      	beq.n	800c5a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	b2db      	uxtb	r3, r3
 800c556:	4619      	mov	r1, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7fe ffc4 	bl	800b4e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c55e:	4b1d      	ldr	r3, [pc, #116]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	461a      	mov	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c568:	4b1a      	ldr	r3, [pc, #104]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7fe ff9d 	bl	800b4ae <USBD_SetClassConfig>
 800c574:	4603      	mov	r3, r0
 800c576:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00f      	beq.n	800c59e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f918 	bl	800c7b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	4619      	mov	r1, r3
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7fe ffa9 	bl	800b4e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2202      	movs	r2, #2
 800c598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c59c:	e014      	b.n	800c5c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f9d4 	bl	800c94c <USBD_CtlSendStatus>
      break;
 800c5a4:	e010      	b.n	800c5c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f9d0 	bl	800c94c <USBD_CtlSendStatus>
      break;
 800c5ac:	e00c      	b.n	800c5c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c5ae:	6839      	ldr	r1, [r7, #0]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f900 	bl	800c7b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5b6:	4b07      	ldr	r3, [pc, #28]	; (800c5d4 <USBD_SetConfig+0x150>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7fe ff92 	bl	800b4e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c5c2:	2303      	movs	r3, #3
 800c5c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c5c6:	bf00      	nop
  }

  return ret;
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	2000094c 	.word	0x2000094c

0800c5d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	88db      	ldrh	r3, [r3, #6]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d004      	beq.n	800c5f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f8e2 	bl	800c7b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5f2:	e023      	b.n	800c63c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	dc02      	bgt.n	800c606 <USBD_GetConfig+0x2e>
 800c600:	2b00      	cmp	r3, #0
 800c602:	dc03      	bgt.n	800c60c <USBD_GetConfig+0x34>
 800c604:	e015      	b.n	800c632 <USBD_GetConfig+0x5a>
 800c606:	2b03      	cmp	r3, #3
 800c608:	d00b      	beq.n	800c622 <USBD_GetConfig+0x4a>
 800c60a:	e012      	b.n	800c632 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3308      	adds	r3, #8
 800c616:	2201      	movs	r2, #1
 800c618:	4619      	mov	r1, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f93c 	bl	800c898 <USBD_CtlSendData>
        break;
 800c620:	e00c      	b.n	800c63c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3304      	adds	r3, #4
 800c626:	2201      	movs	r2, #1
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f934 	bl	800c898 <USBD_CtlSendData>
        break;
 800c630:	e004      	b.n	800c63c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f8be 	bl	800c7b6 <USBD_CtlError>
        break;
 800c63a:	bf00      	nop
}
 800c63c:	bf00      	nop
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c654:	b2db      	uxtb	r3, r3
 800c656:	3b01      	subs	r3, #1
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d81e      	bhi.n	800c69a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	88db      	ldrh	r3, [r3, #6]
 800c660:	2b02      	cmp	r3, #2
 800c662:	d004      	beq.n	800c66e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f8a5 	bl	800c7b6 <USBD_CtlError>
        break;
 800c66c:	e01a      	b.n	800c6a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2201      	movs	r2, #1
 800c672:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d005      	beq.n	800c68a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	f043 0202 	orr.w	r2, r3, #2
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	330c      	adds	r3, #12
 800c68e:	2202      	movs	r2, #2
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f900 	bl	800c898 <USBD_CtlSendData>
      break;
 800c698:	e004      	b.n	800c6a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f88a 	bl	800c7b6 <USBD_CtlError>
      break;
 800c6a2:	bf00      	nop
  }
}
 800c6a4:	bf00      	nop
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	885b      	ldrh	r3, [r3, #2]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d107      	bne.n	800c6ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f940 	bl	800c94c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c6cc:	e013      	b.n	800c6f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	885b      	ldrh	r3, [r3, #2]
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d10b      	bne.n	800c6ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	889b      	ldrh	r3, [r3, #4]
 800c6da:	0a1b      	lsrs	r3, r3, #8
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f930 	bl	800c94c <USBD_CtlSendStatus>
}
 800c6ec:	e003      	b.n	800c6f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f860 	bl	800c7b6 <USBD_CtlError>
}
 800c6f6:	bf00      	nop
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b082      	sub	sp, #8
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	3b01      	subs	r3, #1
 800c712:	2b02      	cmp	r3, #2
 800c714:	d80b      	bhi.n	800c72e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	885b      	ldrh	r3, [r3, #2]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d10c      	bne.n	800c738 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f910 	bl	800c94c <USBD_CtlSendStatus>
      }
      break;
 800c72c:	e004      	b.n	800c738 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c72e:	6839      	ldr	r1, [r7, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f840 	bl	800c7b6 <USBD_CtlError>
      break;
 800c736:	e000      	b.n	800c73a <USBD_ClrFeature+0x3c>
      break;
 800c738:	bf00      	nop
  }
}
 800c73a:	bf00      	nop
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	781a      	ldrb	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	3301      	adds	r3, #1
 800c75c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	781a      	ldrb	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3301      	adds	r3, #1
 800c76a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f7ff fa41 	bl	800bbf4 <SWAPBYTE>
 800c772:	4603      	mov	r3, r0
 800c774:	461a      	mov	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3301      	adds	r3, #1
 800c77e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	3301      	adds	r3, #1
 800c784:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff fa34 	bl	800bbf4 <SWAPBYTE>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461a      	mov	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	3301      	adds	r3, #1
 800c798:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3301      	adds	r3, #1
 800c79e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f7ff fa27 	bl	800bbf4 <SWAPBYTE>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	80da      	strh	r2, [r3, #6]
}
 800c7ae:	bf00      	nop
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7c0:	2180      	movs	r1, #128	; 0x80
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f003 fc20 	bl	8010008 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f003 fc1c 	bl	8010008 <USBD_LL_StallEP>
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d036      	beq.n	800c85c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c7f2:	6938      	ldr	r0, [r7, #16]
 800c7f4:	f000 f836 	bl	800c864 <USBD_GetLen>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	b29a      	uxth	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c806:	7dfb      	ldrb	r3, [r7, #23]
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	4413      	add	r3, r2
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	7812      	ldrb	r2, [r2, #0]
 800c810:	701a      	strb	r2, [r3, #0]
  idx++;
 800c812:	7dfb      	ldrb	r3, [r7, #23]
 800c814:	3301      	adds	r3, #1
 800c816:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	4413      	add	r3, r2
 800c81e:	2203      	movs	r2, #3
 800c820:	701a      	strb	r2, [r3, #0]
  idx++;
 800c822:	7dfb      	ldrb	r3, [r7, #23]
 800c824:	3301      	adds	r3, #1
 800c826:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c828:	e013      	b.n	800c852 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	4413      	add	r3, r2
 800c830:	693a      	ldr	r2, [r7, #16]
 800c832:	7812      	ldrb	r2, [r2, #0]
 800c834:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	3301      	adds	r3, #1
 800c83a:	613b      	str	r3, [r7, #16]
    idx++;
 800c83c:	7dfb      	ldrb	r3, [r7, #23]
 800c83e:	3301      	adds	r3, #1
 800c840:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	4413      	add	r3, r2
 800c848:	2200      	movs	r2, #0
 800c84a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c84c:	7dfb      	ldrb	r3, [r7, #23]
 800c84e:	3301      	adds	r3, #1
 800c850:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1e7      	bne.n	800c82a <USBD_GetString+0x52>
 800c85a:	e000      	b.n	800c85e <USBD_GetString+0x86>
    return;
 800c85c:	bf00      	nop
  }
}
 800c85e:	3718      	adds	r7, #24
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c86c:	2300      	movs	r3, #0
 800c86e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c874:	e005      	b.n	800c882 <USBD_GetLen+0x1e>
  {
    len++;
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	3301      	adds	r3, #1
 800c87a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	3301      	adds	r3, #1
 800c880:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f5      	bne.n	800c876 <USBD_GetLen+0x12>
  }

  return len;
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	2100      	movs	r1, #0
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f003 fc2b 	bl	801011a <USBD_LL_Transmit>

  return USBD_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b084      	sub	sp, #16
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	60f8      	str	r0, [r7, #12]
 800c8d6:	60b9      	str	r1, [r7, #8]
 800c8d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	2100      	movs	r1, #0
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f003 fc1a 	bl	801011a <USBD_LL_Transmit>

  return USBD_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2203      	movs	r2, #3
 800c900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	2100      	movs	r1, #0
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f003 fc1e 	bl	801015c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b084      	sub	sp, #16
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	2100      	movs	r1, #0
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f003 fc0d 	bl	801015c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2204      	movs	r2, #4
 800c958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c95c:	2300      	movs	r3, #0
 800c95e:	2200      	movs	r2, #0
 800c960:	2100      	movs	r1, #0
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f003 fbd9 	bl	801011a <USBD_LL_Transmit>

  return USBD_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2205      	movs	r2, #5
 800c97e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c982:	2300      	movs	r3, #0
 800c984:	2200      	movs	r2, #0
 800c986:	2100      	movs	r1, #0
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f003 fbe7 	bl	801015c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <__NVIC_SetPriority>:
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	4603      	mov	r3, r0
 800c9a0:	6039      	str	r1, [r7, #0]
 800c9a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c9a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	db0a      	blt.n	800c9c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	490c      	ldr	r1, [pc, #48]	; (800c9e4 <__NVIC_SetPriority+0x4c>)
 800c9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9b6:	0112      	lsls	r2, r2, #4
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	440b      	add	r3, r1
 800c9bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c9c0:	e00a      	b.n	800c9d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	4908      	ldr	r1, [pc, #32]	; (800c9e8 <__NVIC_SetPriority+0x50>)
 800c9c8:	79fb      	ldrb	r3, [r7, #7]
 800c9ca:	f003 030f 	and.w	r3, r3, #15
 800c9ce:	3b04      	subs	r3, #4
 800c9d0:	0112      	lsls	r2, r2, #4
 800c9d2:	b2d2      	uxtb	r2, r2
 800c9d4:	440b      	add	r3, r1
 800c9d6:	761a      	strb	r2, [r3, #24]
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	e000e100 	.word	0xe000e100
 800c9e8:	e000ed00 	.word	0xe000ed00

0800c9ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c9f0:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <SysTick_Handler+0x1c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c9f4:	f001 feb2 	bl	800e75c <xTaskGetSchedulerState>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d001      	beq.n	800ca02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c9fe:	f002 fc9b 	bl	800f338 <xPortSysTickHandler>
  }
}
 800ca02:	bf00      	nop
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	e000e010 	.word	0xe000e010

0800ca0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ca10:	2100      	movs	r1, #0
 800ca12:	f06f 0004 	mvn.w	r0, #4
 800ca16:	f7ff ffbf 	bl	800c998 <__NVIC_SetPriority>
#endif
}
 800ca1a:	bf00      	nop
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca26:	f3ef 8305 	mrs	r3, IPSR
 800ca2a:	603b      	str	r3, [r7, #0]
  return(result);
 800ca2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ca32:	f06f 0305 	mvn.w	r3, #5
 800ca36:	607b      	str	r3, [r7, #4]
 800ca38:	e00c      	b.n	800ca54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ca3a:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <osKernelInitialize+0x44>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d105      	bne.n	800ca4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ca42:	4b08      	ldr	r3, [pc, #32]	; (800ca64 <osKernelInitialize+0x44>)
 800ca44:	2201      	movs	r2, #1
 800ca46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	607b      	str	r3, [r7, #4]
 800ca4c:	e002      	b.n	800ca54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ca4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ca54:	687b      	ldr	r3, [r7, #4]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	370c      	adds	r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	20000950 	.word	0x20000950

0800ca68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca6e:	f3ef 8305 	mrs	r3, IPSR
 800ca72:	603b      	str	r3, [r7, #0]
  return(result);
 800ca74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ca7a:	f06f 0305 	mvn.w	r3, #5
 800ca7e:	607b      	str	r3, [r7, #4]
 800ca80:	e010      	b.n	800caa4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ca82:	4b0b      	ldr	r3, [pc, #44]	; (800cab0 <osKernelStart+0x48>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d109      	bne.n	800ca9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ca8a:	f7ff ffbf 	bl	800ca0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ca8e:	4b08      	ldr	r3, [pc, #32]	; (800cab0 <osKernelStart+0x48>)
 800ca90:	2202      	movs	r2, #2
 800ca92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ca94:	f001 fa1a 	bl	800decc <vTaskStartScheduler>
      stat = osOK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	607b      	str	r3, [r7, #4]
 800ca9c:	e002      	b.n	800caa4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ca9e:	f04f 33ff 	mov.w	r3, #4294967295
 800caa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800caa4:	687b      	ldr	r3, [r7, #4]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20000950 	.word	0x20000950

0800cab4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b08e      	sub	sp, #56	; 0x38
 800cab8:	af04      	add	r7, sp, #16
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cac4:	f3ef 8305 	mrs	r3, IPSR
 800cac8:	617b      	str	r3, [r7, #20]
  return(result);
 800caca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d17f      	bne.n	800cbd0 <osThreadNew+0x11c>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d07c      	beq.n	800cbd0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800cad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cada:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cadc:	2318      	movs	r3, #24
 800cade:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cae0:	2300      	movs	r3, #0
 800cae2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cae4:	f04f 33ff 	mov.w	r3, #4294967295
 800cae8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d045      	beq.n	800cb7c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <osThreadNew+0x4a>
        name = attr->name;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d002      	beq.n	800cb0c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d008      	beq.n	800cb24 <osThreadNew+0x70>
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	2b38      	cmp	r3, #56	; 0x38
 800cb16:	d805      	bhi.n	800cb24 <osThreadNew+0x70>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <osThreadNew+0x74>
        return (NULL);
 800cb24:	2300      	movs	r3, #0
 800cb26:	e054      	b.n	800cbd2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d003      	beq.n	800cb38 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	089b      	lsrs	r3, r3, #2
 800cb36:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00e      	beq.n	800cb5e <osThreadNew+0xaa>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	2b6b      	cmp	r3, #107	; 0x6b
 800cb46:	d90a      	bls.n	800cb5e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d006      	beq.n	800cb5e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <osThreadNew+0xaa>
        mem = 1;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	61bb      	str	r3, [r7, #24]
 800cb5c:	e010      	b.n	800cb80 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10c      	bne.n	800cb80 <osThreadNew+0xcc>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d108      	bne.n	800cb80 <osThreadNew+0xcc>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	691b      	ldr	r3, [r3, #16]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d104      	bne.n	800cb80 <osThreadNew+0xcc>
          mem = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	61bb      	str	r3, [r7, #24]
 800cb7a:	e001      	b.n	800cb80 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d110      	bne.n	800cba8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cb8e:	9202      	str	r2, [sp, #8]
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	6a3a      	ldr	r2, [r7, #32]
 800cb9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f000 feb9 	bl	800d914 <xTaskCreateStatic>
 800cba2:	4603      	mov	r3, r0
 800cba4:	613b      	str	r3, [r7, #16]
 800cba6:	e013      	b.n	800cbd0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d110      	bne.n	800cbd0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	f107 0310 	add.w	r3, r7, #16
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f000 ff04 	bl	800d9ce <xTaskCreate>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d001      	beq.n	800cbd0 <osThreadNew+0x11c>
            hTask = NULL;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cbd0:	693b      	ldr	r3, [r7, #16]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3728      	adds	r7, #40	; 0x28
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b084      	sub	sp, #16
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbe2:	f3ef 8305 	mrs	r3, IPSR
 800cbe6:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbe8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d003      	beq.n	800cbf6 <osDelay+0x1c>
    stat = osErrorISR;
 800cbee:	f06f 0305 	mvn.w	r3, #5
 800cbf2:	60fb      	str	r3, [r7, #12]
 800cbf4:	e007      	b.n	800cc06 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 f829 	bl	800dc58 <vTaskDelay>
    }
  }

  return (stat);
 800cc06:	68fb      	ldr	r3, [r7, #12]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08a      	sub	sp, #40	; 0x28
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc20:	f3ef 8305 	mrs	r3, IPSR
 800cc24:	613b      	str	r3, [r7, #16]
  return(result);
 800cc26:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d15f      	bne.n	800ccec <osMessageQueueNew+0xdc>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d05c      	beq.n	800ccec <osMessageQueueNew+0xdc>
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d059      	beq.n	800ccec <osMessageQueueNew+0xdc>
    mem = -1;
 800cc38:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d029      	beq.n	800cc98 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d012      	beq.n	800cc72 <osMessageQueueNew+0x62>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	2b4f      	cmp	r3, #79	; 0x4f
 800cc52:	d90e      	bls.n	800cc72 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00a      	beq.n	800cc72 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	695a      	ldr	r2, [r3, #20]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	68b9      	ldr	r1, [r7, #8]
 800cc64:	fb01 f303 	mul.w	r3, r1, r3
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d302      	bcc.n	800cc72 <osMessageQueueNew+0x62>
        mem = 1;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	61bb      	str	r3, [r7, #24]
 800cc70:	e014      	b.n	800cc9c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d110      	bne.n	800cc9c <osMessageQueueNew+0x8c>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10c      	bne.n	800cc9c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d108      	bne.n	800cc9c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d104      	bne.n	800cc9c <osMessageQueueNew+0x8c>
          mem = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	61bb      	str	r3, [r7, #24]
 800cc96:	e001      	b.n	800cc9c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d10b      	bne.n	800ccba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691a      	ldr	r2, [r3, #16]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	2100      	movs	r1, #0
 800ccac:	9100      	str	r1, [sp, #0]
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f000 f971 	bl	800cf98 <xQueueGenericCreateStatic>
 800ccb6:	61f8      	str	r0, [r7, #28]
 800ccb8:	e008      	b.n	800cccc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d105      	bne.n	800cccc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	68b9      	ldr	r1, [r7, #8]
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f000 f9df 	bl	800d088 <xQueueGenericCreate>
 800ccca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00c      	beq.n	800ccec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d003      	beq.n	800cce0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	e001      	b.n	800cce4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cce0:	2300      	movs	r3, #0
 800cce2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cce4:	6979      	ldr	r1, [r7, #20]
 800cce6:	69f8      	ldr	r0, [r7, #28]
 800cce8:	f000 fdb6 	bl	800d858 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ccec:	69fb      	ldr	r3, [r7, #28]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3720      	adds	r7, #32
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
	...

0800ccf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4a07      	ldr	r2, [pc, #28]	; (800cd24 <vApplicationGetIdleTaskMemory+0x2c>)
 800cd08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	4a06      	ldr	r2, [pc, #24]	; (800cd28 <vApplicationGetIdleTaskMemory+0x30>)
 800cd0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd16:	601a      	str	r2, [r3, #0]
}
 800cd18:	bf00      	nop
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	20000954 	.word	0x20000954
 800cd28:	200009c0 	.word	0x200009c0

0800cd2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cd2c:	b480      	push	{r7}
 800cd2e:	b085      	sub	sp, #20
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	4a07      	ldr	r2, [pc, #28]	; (800cd58 <vApplicationGetTimerTaskMemory+0x2c>)
 800cd3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	4a06      	ldr	r2, [pc, #24]	; (800cd5c <vApplicationGetTimerTaskMemory+0x30>)
 800cd42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd4a:	601a      	str	r2, [r3, #0]
}
 800cd4c:	bf00      	nop
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	20000dc0 	.word	0x20000dc0
 800cd5c:	20000e2c 	.word	0x20000e2c

0800cd60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f103 0208 	add.w	r2, r3, #8
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f103 0208 	add.w	r2, r3, #8
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f103 0208 	add.w	r2, r3, #8
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd94:	bf00      	nop
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cdae:	bf00      	nop
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cdba:	b480      	push	{r7}
 800cdbc:	b085      	sub	sp, #20
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	689a      	ldr	r2, [r3, #8]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	601a      	str	r2, [r3, #0]
}
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce02:	b480      	push	{r7}
 800ce04:	b085      	sub	sp, #20
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce18:	d103      	bne.n	800ce22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	60fb      	str	r3, [r7, #12]
 800ce20:	e00c      	b.n	800ce3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3308      	adds	r3, #8
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	e002      	b.n	800ce30 <vListInsert+0x2e>
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d2f6      	bcs.n	800ce2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	685a      	ldr	r2, [r3, #4]
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	1c5a      	adds	r2, r3, #1
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	601a      	str	r2, [r3, #0]
}
 800ce68:	bf00      	nop
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	6892      	ldr	r2, [r2, #8]
 800ce8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	6852      	ldr	r2, [r2, #4]
 800ce94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d103      	bne.n	800cea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	689a      	ldr	r2, [r3, #8]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	1e5a      	subs	r2, r3, #1
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10a      	bne.n	800cef2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ceee:	bf00      	nop
 800cef0:	e7fe      	b.n	800cef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cef2:	f002 f98f 	bl	800f214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cefe:	68f9      	ldr	r1, [r7, #12]
 800cf00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf02:	fb01 f303 	mul.w	r3, r1, r3
 800cf06:	441a      	add	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf22:	3b01      	subs	r3, #1
 800cf24:	68f9      	ldr	r1, [r7, #12]
 800cf26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf28:	fb01 f303 	mul.w	r3, r1, r3
 800cf2c:	441a      	add	r2, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	22ff      	movs	r2, #255	; 0xff
 800cf36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	22ff      	movs	r2, #255	; 0xff
 800cf3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d114      	bne.n	800cf72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d01a      	beq.n	800cf86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	3310      	adds	r3, #16
 800cf54:	4618      	mov	r0, r3
 800cf56:	f001 fa43 	bl	800e3e0 <xTaskRemoveFromEventList>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d012      	beq.n	800cf86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf60:	4b0c      	ldr	r3, [pc, #48]	; (800cf94 <xQueueGenericReset+0xcc>)
 800cf62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	e009      	b.n	800cf86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3310      	adds	r3, #16
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff fef2 	bl	800cd60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	3324      	adds	r3, #36	; 0x24
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff feed 	bl	800cd60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf86:	f002 f975 	bl	800f274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf8a:	2301      	movs	r3, #1
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	e000ed04 	.word	0xe000ed04

0800cf98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08e      	sub	sp, #56	; 0x38
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10a      	bne.n	800cfc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10a      	bne.n	800cfde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfda:	bf00      	nop
 800cfdc:	e7fe      	b.n	800cfdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <xQueueGenericCreateStatic+0x52>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <xQueueGenericCreateStatic+0x56>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e000      	b.n	800cff0 <xQueueGenericCreateStatic+0x58>
 800cfee:	2300      	movs	r3, #0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10a      	bne.n	800d00a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	623b      	str	r3, [r7, #32]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d102      	bne.n	800d016 <xQueueGenericCreateStatic+0x7e>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <xQueueGenericCreateStatic+0x82>
 800d016:	2301      	movs	r3, #1
 800d018:	e000      	b.n	800d01c <xQueueGenericCreateStatic+0x84>
 800d01a:	2300      	movs	r3, #0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10a      	bne.n	800d036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	61fb      	str	r3, [r7, #28]
}
 800d032:	bf00      	nop
 800d034:	e7fe      	b.n	800d034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d036:	2350      	movs	r3, #80	; 0x50
 800d038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2b50      	cmp	r3, #80	; 0x50
 800d03e:	d00a      	beq.n	800d056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	61bb      	str	r3, [r7, #24]
}
 800d052:	bf00      	nop
 800d054:	e7fe      	b.n	800d054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00d      	beq.n	800d07e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	2201      	movs	r2, #1
 800d066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d06a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	4613      	mov	r3, r2
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 f83f 	bl	800d0fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d080:	4618      	mov	r0, r3
 800d082:	3730      	adds	r7, #48	; 0x30
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08a      	sub	sp, #40	; 0x28
 800d08c:	af02      	add	r7, sp, #8
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	4613      	mov	r3, r2
 800d094:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	613b      	str	r3, [r7, #16]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	3350      	adds	r3, #80	; 0x50
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f002 f9c9 	bl	800f458 <pvPortMalloc>
 800d0c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d011      	beq.n	800d0f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	3350      	adds	r3, #80	; 0x50
 800d0d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0e0:	79fa      	ldrb	r2, [r7, #7]
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	697a      	ldr	r2, [r7, #20]
 800d0ea:	68b9      	ldr	r1, [r7, #8]
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f000 f805 	bl	800d0fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d0f2:	69bb      	ldr	r3, [r7, #24]
	}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3720      	adds	r7, #32
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d103      	bne.n	800d118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	69ba      	ldr	r2, [r7, #24]
 800d114:	601a      	str	r2, [r3, #0]
 800d116:	e002      	b.n	800d11e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d12a:	2101      	movs	r1, #1
 800d12c:	69b8      	ldr	r0, [r7, #24]
 800d12e:	f7ff fecb 	bl	800cec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	78fa      	ldrb	r2, [r7, #3]
 800d136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d13a:	bf00      	nop
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
	...

0800d144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08e      	sub	sp, #56	; 0x38
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d152:	2300      	movs	r3, #0
 800d154:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <xQueueGenericSend+0x32>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d103      	bne.n	800d184 <xQueueGenericSend+0x40>
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <xQueueGenericSend+0x44>
 800d184:	2301      	movs	r3, #1
 800d186:	e000      	b.n	800d18a <xQueueGenericSend+0x46>
 800d188:	2300      	movs	r3, #0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10a      	bne.n	800d1a4 <xQueueGenericSend+0x60>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d103      	bne.n	800d1b2 <xQueueGenericSend+0x6e>
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d101      	bne.n	800d1b6 <xQueueGenericSend+0x72>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e000      	b.n	800d1b8 <xQueueGenericSend+0x74>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10a      	bne.n	800d1d2 <xQueueGenericSend+0x8e>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	623b      	str	r3, [r7, #32]
}
 800d1ce:	bf00      	nop
 800d1d0:	e7fe      	b.n	800d1d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1d2:	f001 fac3 	bl	800e75c <xTaskGetSchedulerState>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d102      	bne.n	800d1e2 <xQueueGenericSend+0x9e>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <xQueueGenericSend+0xa2>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e000      	b.n	800d1e8 <xQueueGenericSend+0xa4>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10a      	bne.n	800d202 <xQueueGenericSend+0xbe>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	61fb      	str	r3, [r7, #28]
}
 800d1fe:	bf00      	nop
 800d200:	e7fe      	b.n	800d200 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d202:	f002 f807 	bl	800f214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20e:	429a      	cmp	r2, r3
 800d210:	d302      	bcc.n	800d218 <xQueueGenericSend+0xd4>
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d129      	bne.n	800d26c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	68b9      	ldr	r1, [r7, #8]
 800d21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d21e:	f000 fa0b 	bl	800d638 <prvCopyDataToQueue>
 800d222:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d010      	beq.n	800d24e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22e:	3324      	adds	r3, #36	; 0x24
 800d230:	4618      	mov	r0, r3
 800d232:	f001 f8d5 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d013      	beq.n	800d264 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d23c:	4b3f      	ldr	r3, [pc, #252]	; (800d33c <xQueueGenericSend+0x1f8>)
 800d23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	e00a      	b.n	800d264 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	2b00      	cmp	r3, #0
 800d252:	d007      	beq.n	800d264 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d254:	4b39      	ldr	r3, [pc, #228]	; (800d33c <xQueueGenericSend+0x1f8>)
 800d256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d264:	f002 f806 	bl	800f274 <vPortExitCritical>
				return pdPASS;
 800d268:	2301      	movs	r3, #1
 800d26a:	e063      	b.n	800d334 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d103      	bne.n	800d27a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d272:	f001 ffff 	bl	800f274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d276:	2300      	movs	r3, #0
 800d278:	e05c      	b.n	800d334 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d106      	bne.n	800d28e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d280:	f107 0314 	add.w	r3, r7, #20
 800d284:	4618      	mov	r0, r3
 800d286:	f001 f90f 	bl	800e4a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d28a:	2301      	movs	r3, #1
 800d28c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d28e:	f001 fff1 	bl	800f274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d292:	f000 fe81 	bl	800df98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d296:	f001 ffbd 	bl	800f214 <vPortEnterCritical>
 800d29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2a0:	b25b      	sxtb	r3, r3
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a6:	d103      	bne.n	800d2b0 <xQueueGenericSend+0x16c>
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2b6:	b25b      	sxtb	r3, r3
 800d2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2bc:	d103      	bne.n	800d2c6 <xQueueGenericSend+0x182>
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2c6:	f001 ffd5 	bl	800f274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2ca:	1d3a      	adds	r2, r7, #4
 800d2cc:	f107 0314 	add.w	r3, r7, #20
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f001 f8fe 	bl	800e4d4 <xTaskCheckForTimeOut>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d124      	bne.n	800d328 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2e0:	f000 faa2 	bl	800d828 <prvIsQueueFull>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d018      	beq.n	800d31c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	3310      	adds	r3, #16
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f001 f824 	bl	800e340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2fa:	f000 fa2d 	bl	800d758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2fe:	f000 fe59 	bl	800dfb4 <xTaskResumeAll>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	f47f af7c 	bne.w	800d202 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d30a:	4b0c      	ldr	r3, [pc, #48]	; (800d33c <xQueueGenericSend+0x1f8>)
 800d30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d310:	601a      	str	r2, [r3, #0]
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	e772      	b.n	800d202 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d31c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d31e:	f000 fa1b 	bl	800d758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d322:	f000 fe47 	bl	800dfb4 <xTaskResumeAll>
 800d326:	e76c      	b.n	800d202 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d32a:	f000 fa15 	bl	800d758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d32e:	f000 fe41 	bl	800dfb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d332:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d334:	4618      	mov	r0, r3
 800d336:	3738      	adds	r7, #56	; 0x38
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	e000ed04 	.word	0xe000ed04

0800d340 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b090      	sub	sp, #64	; 0x40
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d103      	bne.n	800d37c <xQueueGenericSendFromISR+0x3c>
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d101      	bne.n	800d380 <xQueueGenericSendFromISR+0x40>
 800d37c:	2301      	movs	r3, #1
 800d37e:	e000      	b.n	800d382 <xQueueGenericSendFromISR+0x42>
 800d380:	2300      	movs	r3, #0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10a      	bne.n	800d39c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d398:	bf00      	nop
 800d39a:	e7fe      	b.n	800d39a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d103      	bne.n	800d3aa <xQueueGenericSendFromISR+0x6a>
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d101      	bne.n	800d3ae <xQueueGenericSendFromISR+0x6e>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e000      	b.n	800d3b0 <xQueueGenericSendFromISR+0x70>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10a      	bne.n	800d3ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	623b      	str	r3, [r7, #32]
}
 800d3c6:	bf00      	nop
 800d3c8:	e7fe      	b.n	800d3c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3ca:	f002 f805 	bl	800f3d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3ce:	f3ef 8211 	mrs	r2, BASEPRI
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	61fa      	str	r2, [r7, #28]
 800d3e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d302      	bcc.n	800d3fc <xQueueGenericSendFromISR+0xbc>
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d12f      	bne.n	800d45c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d40c:	683a      	ldr	r2, [r7, #0]
 800d40e:	68b9      	ldr	r1, [r7, #8]
 800d410:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d412:	f000 f911 	bl	800d638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d416:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41e:	d112      	bne.n	800d446 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d424:	2b00      	cmp	r3, #0
 800d426:	d016      	beq.n	800d456 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	3324      	adds	r3, #36	; 0x24
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 ffd7 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d00e      	beq.n	800d456 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00b      	beq.n	800d456 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	e007      	b.n	800d456 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d44a:	3301      	adds	r3, #1
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	b25a      	sxtb	r2, r3
 800d450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d456:	2301      	movs	r3, #1
 800d458:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d45a:	e001      	b.n	800d460 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d45c:	2300      	movs	r3, #0
 800d45e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d462:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d46a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3740      	adds	r7, #64	; 0x40
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08c      	sub	sp, #48	; 0x30
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d484:	2300      	movs	r3, #0
 800d486:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10a      	bne.n	800d4a8 <xQueueReceive+0x30>
	__asm volatile
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	623b      	str	r3, [r7, #32]
}
 800d4a4:	bf00      	nop
 800d4a6:	e7fe      	b.n	800d4a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d103      	bne.n	800d4b6 <xQueueReceive+0x3e>
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <xQueueReceive+0x42>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e000      	b.n	800d4bc <xQueueReceive+0x44>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <xQueueReceive+0x5e>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	61fb      	str	r3, [r7, #28]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4d6:	f001 f941 	bl	800e75c <xTaskGetSchedulerState>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <xQueueReceive+0x6e>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <xQueueReceive+0x72>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e000      	b.n	800d4ec <xQueueReceive+0x74>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <xQueueReceive+0x8e>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	61bb      	str	r3, [r7, #24]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d506:	f001 fe85 	bl	800f214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	2b00      	cmp	r3, #0
 800d514:	d01f      	beq.n	800d556 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d51a:	f000 f8f7 	bl	800d70c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d520:	1e5a      	subs	r2, r3, #1
 800d522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d524:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00f      	beq.n	800d54e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d530:	3310      	adds	r3, #16
 800d532:	4618      	mov	r0, r3
 800d534:	f000 ff54 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d007      	beq.n	800d54e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d53e:	4b3d      	ldr	r3, [pc, #244]	; (800d634 <xQueueReceive+0x1bc>)
 800d540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d544:	601a      	str	r2, [r3, #0]
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d54e:	f001 fe91 	bl	800f274 <vPortExitCritical>
				return pdPASS;
 800d552:	2301      	movs	r3, #1
 800d554:	e069      	b.n	800d62a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d103      	bne.n	800d564 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d55c:	f001 fe8a 	bl	800f274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d560:	2300      	movs	r3, #0
 800d562:	e062      	b.n	800d62a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d56a:	f107 0310 	add.w	r3, r7, #16
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 ff9a 	bl	800e4a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d574:	2301      	movs	r3, #1
 800d576:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d578:	f001 fe7c 	bl	800f274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d57c:	f000 fd0c 	bl	800df98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d580:	f001 fe48 	bl	800f214 <vPortEnterCritical>
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d58a:	b25b      	sxtb	r3, r3
 800d58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d590:	d103      	bne.n	800d59a <xQueueReceive+0x122>
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	2200      	movs	r2, #0
 800d596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5a0:	b25b      	sxtb	r3, r3
 800d5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a6:	d103      	bne.n	800d5b0 <xQueueReceive+0x138>
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5b0:	f001 fe60 	bl	800f274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5b4:	1d3a      	adds	r2, r7, #4
 800d5b6:	f107 0310 	add.w	r3, r7, #16
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f000 ff89 	bl	800e4d4 <xTaskCheckForTimeOut>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d123      	bne.n	800d610 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ca:	f000 f917 	bl	800d7fc <prvIsQueueEmpty>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d017      	beq.n	800d604 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	3324      	adds	r3, #36	; 0x24
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 feaf 	bl	800e340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5e4:	f000 f8b8 	bl	800d758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5e8:	f000 fce4 	bl	800dfb4 <xTaskResumeAll>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d189      	bne.n	800d506 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d5f2:	4b10      	ldr	r3, [pc, #64]	; (800d634 <xQueueReceive+0x1bc>)
 800d5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	e780      	b.n	800d506 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d606:	f000 f8a7 	bl	800d758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d60a:	f000 fcd3 	bl	800dfb4 <xTaskResumeAll>
 800d60e:	e77a      	b.n	800d506 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d612:	f000 f8a1 	bl	800d758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d616:	f000 fccd 	bl	800dfb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d61a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d61c:	f000 f8ee 	bl	800d7fc <prvIsQueueEmpty>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	f43f af6f 	beq.w	800d506 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d628:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3730      	adds	r7, #48	; 0x30
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	e000ed04 	.word	0xe000ed04

0800d638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d644:	2300      	movs	r3, #0
 800d646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10d      	bne.n	800d672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d14d      	bne.n	800d6fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	4618      	mov	r0, r3
 800d664:	f001 f898 	bl	800e798 <xTaskPriorityDisinherit>
 800d668:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2200      	movs	r2, #0
 800d66e:	609a      	str	r2, [r3, #8]
 800d670:	e043      	b.n	800d6fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d119      	bne.n	800d6ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6858      	ldr	r0, [r3, #4]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d680:	461a      	mov	r2, r3
 800d682:	68b9      	ldr	r1, [r7, #8]
 800d684:	f002 fe1c 	bl	80102c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d690:	441a      	add	r2, r3
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	685a      	ldr	r2, [r3, #4]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d32b      	bcc.n	800d6fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	605a      	str	r2, [r3, #4]
 800d6aa:	e026      	b.n	800d6fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	68d8      	ldr	r0, [r3, #12]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	68b9      	ldr	r1, [r7, #8]
 800d6b8:	f002 fe02 	bl	80102c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	68da      	ldr	r2, [r3, #12]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c4:	425b      	negs	r3, r3
 800d6c6:	441a      	add	r2, r3
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	68da      	ldr	r2, [r3, #12]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d207      	bcs.n	800d6e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	689a      	ldr	r2, [r3, #8]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e0:	425b      	negs	r3, r3
 800d6e2:	441a      	add	r2, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d105      	bne.n	800d6fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d002      	beq.n	800d6fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	1c5a      	adds	r2, r3, #1
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d702:	697b      	ldr	r3, [r7, #20]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d018      	beq.n	800d750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68da      	ldr	r2, [r3, #12]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d726:	441a      	add	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	68da      	ldr	r2, [r3, #12]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	429a      	cmp	r2, r3
 800d736:	d303      	bcc.n	800d740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	68d9      	ldr	r1, [r3, #12]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d748:	461a      	mov	r2, r3
 800d74a:	6838      	ldr	r0, [r7, #0]
 800d74c:	f002 fdb8 	bl	80102c0 <memcpy>
	}
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d760:	f001 fd58 	bl	800f214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d76a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d76c:	e011      	b.n	800d792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d772:	2b00      	cmp	r3, #0
 800d774:	d012      	beq.n	800d79c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	3324      	adds	r3, #36	; 0x24
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 fe30 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d786:	f000 ff07 	bl	800e598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d796:	2b00      	cmp	r3, #0
 800d798:	dce9      	bgt.n	800d76e <prvUnlockQueue+0x16>
 800d79a:	e000      	b.n	800d79e <prvUnlockQueue+0x46>
					break;
 800d79c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	22ff      	movs	r2, #255	; 0xff
 800d7a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d7a6:	f001 fd65 	bl	800f274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d7aa:	f001 fd33 	bl	800f214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7b6:	e011      	b.n	800d7dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	691b      	ldr	r3, [r3, #16]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d012      	beq.n	800d7e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	3310      	adds	r3, #16
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 fe0b 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d001      	beq.n	800d7d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7d0:	f000 fee2 	bl	800e598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7d4:	7bbb      	ldrb	r3, [r7, #14]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	dce9      	bgt.n	800d7b8 <prvUnlockQueue+0x60>
 800d7e4:	e000      	b.n	800d7e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	22ff      	movs	r2, #255	; 0xff
 800d7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7f0:	f001 fd40 	bl	800f274 <vPortExitCritical>
}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d804:	f001 fd06 	bl	800f214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d102      	bne.n	800d816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	e001      	b.n	800d81a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d816:	2300      	movs	r3, #0
 800d818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d81a:	f001 fd2b 	bl	800f274 <vPortExitCritical>

	return xReturn;
 800d81e:	68fb      	ldr	r3, [r7, #12]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d830:	f001 fcf0 	bl	800f214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d102      	bne.n	800d846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d840:	2301      	movs	r3, #1
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	e001      	b.n	800d84a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d84a:	f001 fd13 	bl	800f274 <vPortExitCritical>

	return xReturn;
 800d84e:	68fb      	ldr	r3, [r7, #12]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d862:	2300      	movs	r3, #0
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	e014      	b.n	800d892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d868:	4a0f      	ldr	r2, [pc, #60]	; (800d8a8 <vQueueAddToRegistry+0x50>)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10b      	bne.n	800d88c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d874:	490c      	ldr	r1, [pc, #48]	; (800d8a8 <vQueueAddToRegistry+0x50>)
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d87e:	4a0a      	ldr	r2, [pc, #40]	; (800d8a8 <vQueueAddToRegistry+0x50>)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	4413      	add	r3, r2
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d88a:	e006      	b.n	800d89a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	3301      	adds	r3, #1
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2b07      	cmp	r3, #7
 800d896:	d9e7      	bls.n	800d868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d898:	bf00      	nop
 800d89a:	bf00      	nop
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	2000162c 	.word	0x2000162c

0800d8ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8bc:	f001 fcaa 	bl	800f214 <vPortEnterCritical>
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8c6:	b25b      	sxtb	r3, r3
 800d8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8cc:	d103      	bne.n	800d8d6 <vQueueWaitForMessageRestricted+0x2a>
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8dc:	b25b      	sxtb	r3, r3
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d103      	bne.n	800d8ec <vQueueWaitForMessageRestricted+0x40>
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8ec:	f001 fcc2 	bl	800f274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d106      	bne.n	800d906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	3324      	adds	r3, #36	; 0x24
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	68b9      	ldr	r1, [r7, #8]
 800d900:	4618      	mov	r0, r3
 800d902:	f000 fd41 	bl	800e388 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d906:	6978      	ldr	r0, [r7, #20]
 800d908:	f7ff ff26 	bl	800d758 <prvUnlockQueue>
	}
 800d90c:	bf00      	nop
 800d90e:	3718      	adds	r7, #24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08e      	sub	sp, #56	; 0x38
 800d918:	af04      	add	r7, sp, #16
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10a      	bne.n	800d93e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	623b      	str	r3, [r7, #32]
}
 800d93a:	bf00      	nop
 800d93c:	e7fe      	b.n	800d93c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10a      	bne.n	800d95a <xTaskCreateStatic+0x46>
	__asm volatile
 800d944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d948:	f383 8811 	msr	BASEPRI, r3
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	61fb      	str	r3, [r7, #28]
}
 800d956:	bf00      	nop
 800d958:	e7fe      	b.n	800d958 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d95a:	236c      	movs	r3, #108	; 0x6c
 800d95c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	2b6c      	cmp	r3, #108	; 0x6c
 800d962:	d00a      	beq.n	800d97a <xTaskCreateStatic+0x66>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	61bb      	str	r3, [r7, #24]
}
 800d976:	bf00      	nop
 800d978:	e7fe      	b.n	800d978 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d97a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d01e      	beq.n	800d9c0 <xTaskCreateStatic+0xac>
 800d982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d984:	2b00      	cmp	r3, #0
 800d986:	d01b      	beq.n	800d9c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d990:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	2202      	movs	r2, #2
 800d996:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d99a:	2300      	movs	r3, #0
 800d99c:	9303      	str	r3, [sp, #12]
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	9302      	str	r3, [sp, #8]
 800d9a2:	f107 0314 	add.w	r3, r7, #20
 800d9a6:	9301      	str	r3, [sp, #4]
 800d9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	68b9      	ldr	r1, [r7, #8]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f000 f850 	bl	800da58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9ba:	f000 f8dd 	bl	800db78 <prvAddNewTaskToReadyList>
 800d9be:	e001      	b.n	800d9c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9c4:	697b      	ldr	r3, [r7, #20]
	}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3728      	adds	r7, #40	; 0x28
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b08c      	sub	sp, #48	; 0x30
 800d9d2:	af04      	add	r7, sp, #16
 800d9d4:	60f8      	str	r0, [r7, #12]
 800d9d6:	60b9      	str	r1, [r7, #8]
 800d9d8:	603b      	str	r3, [r7, #0]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d9de:	88fb      	ldrh	r3, [r7, #6]
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 fd38 	bl	800f458 <pvPortMalloc>
 800d9e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00e      	beq.n	800da0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9f0:	206c      	movs	r0, #108	; 0x6c
 800d9f2:	f001 fd31 	bl	800f458 <pvPortMalloc>
 800d9f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	631a      	str	r2, [r3, #48]	; 0x30
 800da04:	e005      	b.n	800da12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da06:	6978      	ldr	r0, [r7, #20]
 800da08:	f001 fdf2 	bl	800f5f0 <vPortFree>
 800da0c:	e001      	b.n	800da12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da0e:	2300      	movs	r3, #0
 800da10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d017      	beq.n	800da48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da20:	88fa      	ldrh	r2, [r7, #6]
 800da22:	2300      	movs	r3, #0
 800da24:	9303      	str	r3, [sp, #12]
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	9302      	str	r3, [sp, #8]
 800da2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f000 f80e 	bl	800da58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da3c:	69f8      	ldr	r0, [r7, #28]
 800da3e:	f000 f89b 	bl	800db78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da42:	2301      	movs	r3, #1
 800da44:	61bb      	str	r3, [r7, #24]
 800da46:	e002      	b.n	800da4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da48:	f04f 33ff 	mov.w	r3, #4294967295
 800da4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da4e:	69bb      	ldr	r3, [r7, #24]
	}
 800da50:	4618      	mov	r0, r3
 800da52:	3720      	adds	r7, #32
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	461a      	mov	r2, r3
 800da70:	21a5      	movs	r1, #165	; 0xa5
 800da72:	f002 fc33 	bl	80102dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800da80:	3b01      	subs	r3, #1
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	f023 0307 	bic.w	r3, r3, #7
 800da8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	f003 0307 	and.w	r3, r3, #7
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00a      	beq.n	800dab0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	617b      	str	r3, [r7, #20]
}
 800daac:	bf00      	nop
 800daae:	e7fe      	b.n	800daae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d01f      	beq.n	800daf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dab6:	2300      	movs	r3, #0
 800dab8:	61fb      	str	r3, [r7, #28]
 800daba:	e012      	b.n	800dae2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	4413      	add	r3, r2
 800dac2:	7819      	ldrb	r1, [r3, #0]
 800dac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	4413      	add	r3, r2
 800daca:	3334      	adds	r3, #52	; 0x34
 800dacc:	460a      	mov	r2, r1
 800dace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	4413      	add	r3, r2
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d006      	beq.n	800daea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	3301      	adds	r3, #1
 800dae0:	61fb      	str	r3, [r7, #28]
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	2b1d      	cmp	r3, #29
 800dae6:	d9e9      	bls.n	800dabc <prvInitialiseNewTask+0x64>
 800dae8:	e000      	b.n	800daec <prvInitialiseNewTask+0x94>
			{
				break;
 800daea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	2200      	movs	r2, #0
 800daf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800daf4:	e003      	b.n	800dafe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	2b37      	cmp	r3, #55	; 0x37
 800db02:	d901      	bls.n	800db08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db04:	2337      	movs	r3, #55	; 0x37
 800db06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db12:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800db14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db16:	2200      	movs	r2, #0
 800db18:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	3304      	adds	r3, #4
 800db1e:	4618      	mov	r0, r3
 800db20:	f7ff f93e 	bl	800cda0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	3318      	adds	r3, #24
 800db28:	4618      	mov	r0, r3
 800db2a:	f7ff f939 	bl	800cda0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	2200      	movs	r2, #0
 800db48:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	68f9      	ldr	r1, [r7, #12]
 800db56:	69b8      	ldr	r0, [r7, #24]
 800db58:	f001 fa2e 	bl	800efb8 <pxPortInitialiseStack>
 800db5c:	4602      	mov	r2, r0
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db6e:	bf00      	nop
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
	...

0800db78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db80:	f001 fb48 	bl	800f214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db84:	4b2d      	ldr	r3, [pc, #180]	; (800dc3c <prvAddNewTaskToReadyList+0xc4>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3301      	adds	r3, #1
 800db8a:	4a2c      	ldr	r2, [pc, #176]	; (800dc3c <prvAddNewTaskToReadyList+0xc4>)
 800db8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db8e:	4b2c      	ldr	r3, [pc, #176]	; (800dc40 <prvAddNewTaskToReadyList+0xc8>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d109      	bne.n	800dbaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db96:	4a2a      	ldr	r2, [pc, #168]	; (800dc40 <prvAddNewTaskToReadyList+0xc8>)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db9c:	4b27      	ldr	r3, [pc, #156]	; (800dc3c <prvAddNewTaskToReadyList+0xc4>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d110      	bne.n	800dbc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dba4:	f000 fd1c 	bl	800e5e0 <prvInitialiseTaskLists>
 800dba8:	e00d      	b.n	800dbc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dbaa:	4b26      	ldr	r3, [pc, #152]	; (800dc44 <prvAddNewTaskToReadyList+0xcc>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d109      	bne.n	800dbc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dbb2:	4b23      	ldr	r3, [pc, #140]	; (800dc40 <prvAddNewTaskToReadyList+0xc8>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d802      	bhi.n	800dbc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dbc0:	4a1f      	ldr	r2, [pc, #124]	; (800dc40 <prvAddNewTaskToReadyList+0xc8>)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dbc6:	4b20      	ldr	r3, [pc, #128]	; (800dc48 <prvAddNewTaskToReadyList+0xd0>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	4a1e      	ldr	r2, [pc, #120]	; (800dc48 <prvAddNewTaskToReadyList+0xd0>)
 800dbce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dbd0:	4b1d      	ldr	r3, [pc, #116]	; (800dc48 <prvAddNewTaskToReadyList+0xd0>)
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbdc:	4b1b      	ldr	r3, [pc, #108]	; (800dc4c <prvAddNewTaskToReadyList+0xd4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d903      	bls.n	800dbec <prvAddNewTaskToReadyList+0x74>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe8:	4a18      	ldr	r2, [pc, #96]	; (800dc4c <prvAddNewTaskToReadyList+0xd4>)
 800dbea:	6013      	str	r3, [r2, #0]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4a15      	ldr	r2, [pc, #84]	; (800dc50 <prvAddNewTaskToReadyList+0xd8>)
 800dbfa:	441a      	add	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f7ff f8d9 	bl	800cdba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc08:	f001 fb34 	bl	800f274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc0c:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <prvAddNewTaskToReadyList+0xcc>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00e      	beq.n	800dc32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc14:	4b0a      	ldr	r3, [pc, #40]	; (800dc40 <prvAddNewTaskToReadyList+0xc8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d207      	bcs.n	800dc32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc22:	4b0c      	ldr	r3, [pc, #48]	; (800dc54 <prvAddNewTaskToReadyList+0xdc>)
 800dc24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc32:	bf00      	nop
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20001b40 	.word	0x20001b40
 800dc40:	2000166c 	.word	0x2000166c
 800dc44:	20001b4c 	.word	0x20001b4c
 800dc48:	20001b5c 	.word	0x20001b5c
 800dc4c:	20001b48 	.word	0x20001b48
 800dc50:	20001670 	.word	0x20001670
 800dc54:	e000ed04 	.word	0xe000ed04

0800dc58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc60:	2300      	movs	r3, #0
 800dc62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d017      	beq.n	800dc9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc6a:	4b13      	ldr	r3, [pc, #76]	; (800dcb8 <vTaskDelay+0x60>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d00a      	beq.n	800dc88 <vTaskDelay+0x30>
	__asm volatile
 800dc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc76:	f383 8811 	msr	BASEPRI, r3
 800dc7a:	f3bf 8f6f 	isb	sy
 800dc7e:	f3bf 8f4f 	dsb	sy
 800dc82:	60bb      	str	r3, [r7, #8]
}
 800dc84:	bf00      	nop
 800dc86:	e7fe      	b.n	800dc86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc88:	f000 f986 	bl	800df98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fdf0 	bl	800e874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc94:	f000 f98e 	bl	800dfb4 <xTaskResumeAll>
 800dc98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d107      	bne.n	800dcb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dca0:	4b06      	ldr	r3, [pc, #24]	; (800dcbc <vTaskDelay+0x64>)
 800dca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca6:	601a      	str	r2, [r3, #0]
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcb0:	bf00      	nop
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20001b68 	.word	0x20001b68
 800dcbc:	e000ed04 	.word	0xe000ed04

0800dcc0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dcc8:	f001 faa4 	bl	800f214 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d102      	bne.n	800dcd8 <vTaskSuspend+0x18>
 800dcd2:	4b30      	ldr	r3, [pc, #192]	; (800dd94 <vTaskSuspend+0xd4>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	e000      	b.n	800dcda <vTaskSuspend+0x1a>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	3304      	adds	r3, #4
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff f8c7 	bl	800ce74 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d004      	beq.n	800dcf8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3318      	adds	r3, #24
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7ff f8be 	bl	800ce74 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	4826      	ldr	r0, [pc, #152]	; (800dd98 <vTaskSuspend+0xd8>)
 800dd00:	f7ff f85b 	bl	800cdba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d103      	bne.n	800dd18 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dd18:	f001 faac 	bl	800f274 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dd1c:	4b1f      	ldr	r3, [pc, #124]	; (800dd9c <vTaskSuspend+0xdc>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d005      	beq.n	800dd30 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dd24:	f001 fa76 	bl	800f214 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dd28:	f000 fcf8 	bl	800e71c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dd2c:	f001 faa2 	bl	800f274 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dd30:	4b18      	ldr	r3, [pc, #96]	; (800dd94 <vTaskSuspend+0xd4>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d127      	bne.n	800dd8a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800dd3a:	4b18      	ldr	r3, [pc, #96]	; (800dd9c <vTaskSuspend+0xdc>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d017      	beq.n	800dd72 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dd42:	4b17      	ldr	r3, [pc, #92]	; (800dda0 <vTaskSuspend+0xe0>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00a      	beq.n	800dd60 <vTaskSuspend+0xa0>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	60bb      	str	r3, [r7, #8]
}
 800dd5c:	bf00      	nop
 800dd5e:	e7fe      	b.n	800dd5e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800dd60:	4b10      	ldr	r3, [pc, #64]	; (800dda4 <vTaskSuspend+0xe4>)
 800dd62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd70:	e00b      	b.n	800dd8a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dd72:	4b09      	ldr	r3, [pc, #36]	; (800dd98 <vTaskSuspend+0xd8>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <vTaskSuspend+0xe8>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d103      	bne.n	800dd86 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800dd7e:	4b05      	ldr	r3, [pc, #20]	; (800dd94 <vTaskSuspend+0xd4>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	601a      	str	r2, [r3, #0]
	}
 800dd84:	e001      	b.n	800dd8a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800dd86:	f000 fa7d 	bl	800e284 <vTaskSwitchContext>
	}
 800dd8a:	bf00      	nop
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	2000166c 	.word	0x2000166c
 800dd98:	20001b2c 	.word	0x20001b2c
 800dd9c:	20001b4c 	.word	0x20001b4c
 800dda0:	20001b68 	.word	0x20001b68
 800dda4:	e000ed04 	.word	0xe000ed04
 800dda8:	20001b40 	.word	0x20001b40

0800ddac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d10a      	bne.n	800ddd8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ddc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc6:	f383 8811 	msr	BASEPRI, r3
 800ddca:	f3bf 8f6f 	isb	sy
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	60fb      	str	r3, [r7, #12]
}
 800ddd4:	bf00      	nop
 800ddd6:	e7fe      	b.n	800ddd6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	695b      	ldr	r3, [r3, #20]
 800dddc:	4a0a      	ldr	r2, [pc, #40]	; (800de08 <prvTaskIsTaskSuspended+0x5c>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d10a      	bne.n	800ddf8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde6:	4a09      	ldr	r2, [pc, #36]	; (800de0c <prvTaskIsTaskSuspended+0x60>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d005      	beq.n	800ddf8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d101      	bne.n	800ddf8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ddf8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	20001b2c 	.word	0x20001b2c
 800de0c:	20001b00 	.word	0x20001b00

0800de10 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10a      	bne.n	800de38 <vTaskResume+0x28>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	60bb      	str	r3, [r7, #8]
}
 800de34:	bf00      	nop
 800de36:	e7fe      	b.n	800de36 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800de38:	4b20      	ldr	r3, [pc, #128]	; (800debc <vTaskResume+0xac>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d038      	beq.n	800deb4 <vTaskResume+0xa4>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d035      	beq.n	800deb4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800de48:	f001 f9e4 	bl	800f214 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f7ff ffad 	bl	800ddac <prvTaskIsTaskSuspended>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d02b      	beq.n	800deb0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	3304      	adds	r3, #4
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7ff f809 	bl	800ce74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de66:	4b16      	ldr	r3, [pc, #88]	; (800dec0 <vTaskResume+0xb0>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d903      	bls.n	800de76 <vTaskResume+0x66>
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de72:	4a13      	ldr	r2, [pc, #76]	; (800dec0 <vTaskResume+0xb0>)
 800de74:	6013      	str	r3, [r2, #0]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de7a:	4613      	mov	r3, r2
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4413      	add	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4a10      	ldr	r2, [pc, #64]	; (800dec4 <vTaskResume+0xb4>)
 800de84:	441a      	add	r2, r3
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	3304      	adds	r3, #4
 800de8a:	4619      	mov	r1, r3
 800de8c:	4610      	mov	r0, r2
 800de8e:	f7fe ff94 	bl	800cdba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de96:	4b09      	ldr	r3, [pc, #36]	; (800debc <vTaskResume+0xac>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d307      	bcc.n	800deb0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dea0:	4b09      	ldr	r3, [pc, #36]	; (800dec8 <vTaskResume+0xb8>)
 800dea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800deb0:	f001 f9e0 	bl	800f274 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800deb4:	bf00      	nop
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	2000166c 	.word	0x2000166c
 800dec0:	20001b48 	.word	0x20001b48
 800dec4:	20001670 	.word	0x20001670
 800dec8:	e000ed04 	.word	0xe000ed04

0800decc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b08a      	sub	sp, #40	; 0x28
 800ded0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ded6:	2300      	movs	r3, #0
 800ded8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800deda:	463a      	mov	r2, r7
 800dedc:	1d39      	adds	r1, r7, #4
 800dede:	f107 0308 	add.w	r3, r7, #8
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fe ff08 	bl	800ccf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dee8:	6839      	ldr	r1, [r7, #0]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	9202      	str	r2, [sp, #8]
 800def0:	9301      	str	r3, [sp, #4]
 800def2:	2300      	movs	r3, #0
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	2300      	movs	r3, #0
 800def8:	460a      	mov	r2, r1
 800defa:	4921      	ldr	r1, [pc, #132]	; (800df80 <vTaskStartScheduler+0xb4>)
 800defc:	4821      	ldr	r0, [pc, #132]	; (800df84 <vTaskStartScheduler+0xb8>)
 800defe:	f7ff fd09 	bl	800d914 <xTaskCreateStatic>
 800df02:	4603      	mov	r3, r0
 800df04:	4a20      	ldr	r2, [pc, #128]	; (800df88 <vTaskStartScheduler+0xbc>)
 800df06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df08:	4b1f      	ldr	r3, [pc, #124]	; (800df88 <vTaskStartScheduler+0xbc>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df10:	2301      	movs	r3, #1
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e001      	b.n	800df1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df16:	2300      	movs	r3, #0
 800df18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d102      	bne.n	800df26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800df20:	f000 fcfc 	bl	800e91c <xTimerCreateTimerTask>
 800df24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d116      	bne.n	800df5a <vTaskStartScheduler+0x8e>
	__asm volatile
 800df2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df30:	f383 8811 	msr	BASEPRI, r3
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	f3bf 8f4f 	dsb	sy
 800df3c:	613b      	str	r3, [r7, #16]
}
 800df3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df40:	4b12      	ldr	r3, [pc, #72]	; (800df8c <vTaskStartScheduler+0xc0>)
 800df42:	f04f 32ff 	mov.w	r2, #4294967295
 800df46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df48:	4b11      	ldr	r3, [pc, #68]	; (800df90 <vTaskStartScheduler+0xc4>)
 800df4a:	2201      	movs	r2, #1
 800df4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df4e:	4b11      	ldr	r3, [pc, #68]	; (800df94 <vTaskStartScheduler+0xc8>)
 800df50:	2200      	movs	r2, #0
 800df52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df54:	f001 f8bc 	bl	800f0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df58:	e00e      	b.n	800df78 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df60:	d10a      	bne.n	800df78 <vTaskStartScheduler+0xac>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	60fb      	str	r3, [r7, #12]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <vTaskStartScheduler+0xaa>
}
 800df78:	bf00      	nop
 800df7a:	3718      	adds	r7, #24
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	08011b10 	.word	0x08011b10
 800df84:	0800e5b1 	.word	0x0800e5b1
 800df88:	20001b64 	.word	0x20001b64
 800df8c:	20001b60 	.word	0x20001b60
 800df90:	20001b4c 	.word	0x20001b4c
 800df94:	20001b44 	.word	0x20001b44

0800df98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df98:	b480      	push	{r7}
 800df9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800df9c:	4b04      	ldr	r3, [pc, #16]	; (800dfb0 <vTaskSuspendAll+0x18>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	4a03      	ldr	r2, [pc, #12]	; (800dfb0 <vTaskSuspendAll+0x18>)
 800dfa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dfa6:	bf00      	nop
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr
 800dfb0:	20001b68 	.word	0x20001b68

0800dfb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfc2:	4b42      	ldr	r3, [pc, #264]	; (800e0cc <xTaskResumeAll+0x118>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d10a      	bne.n	800dfe0 <xTaskResumeAll+0x2c>
	__asm volatile
 800dfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfce:	f383 8811 	msr	BASEPRI, r3
 800dfd2:	f3bf 8f6f 	isb	sy
 800dfd6:	f3bf 8f4f 	dsb	sy
 800dfda:	603b      	str	r3, [r7, #0]
}
 800dfdc:	bf00      	nop
 800dfde:	e7fe      	b.n	800dfde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dfe0:	f001 f918 	bl	800f214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dfe4:	4b39      	ldr	r3, [pc, #228]	; (800e0cc <xTaskResumeAll+0x118>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	4a38      	ldr	r2, [pc, #224]	; (800e0cc <xTaskResumeAll+0x118>)
 800dfec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfee:	4b37      	ldr	r3, [pc, #220]	; (800e0cc <xTaskResumeAll+0x118>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d162      	bne.n	800e0bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dff6:	4b36      	ldr	r3, [pc, #216]	; (800e0d0 <xTaskResumeAll+0x11c>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d05e      	beq.n	800e0bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dffe:	e02f      	b.n	800e060 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e000:	4b34      	ldr	r3, [pc, #208]	; (800e0d4 <xTaskResumeAll+0x120>)
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	3318      	adds	r3, #24
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe ff31 	bl	800ce74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	3304      	adds	r3, #4
 800e016:	4618      	mov	r0, r3
 800e018:	f7fe ff2c 	bl	800ce74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e020:	4b2d      	ldr	r3, [pc, #180]	; (800e0d8 <xTaskResumeAll+0x124>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	429a      	cmp	r2, r3
 800e026:	d903      	bls.n	800e030 <xTaskResumeAll+0x7c>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02c:	4a2a      	ldr	r2, [pc, #168]	; (800e0d8 <xTaskResumeAll+0x124>)
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e034:	4613      	mov	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4a27      	ldr	r2, [pc, #156]	; (800e0dc <xTaskResumeAll+0x128>)
 800e03e:	441a      	add	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	3304      	adds	r3, #4
 800e044:	4619      	mov	r1, r3
 800e046:	4610      	mov	r0, r2
 800e048:	f7fe feb7 	bl	800cdba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e050:	4b23      	ldr	r3, [pc, #140]	; (800e0e0 <xTaskResumeAll+0x12c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e056:	429a      	cmp	r2, r3
 800e058:	d302      	bcc.n	800e060 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e05a:	4b22      	ldr	r3, [pc, #136]	; (800e0e4 <xTaskResumeAll+0x130>)
 800e05c:	2201      	movs	r2, #1
 800e05e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e060:	4b1c      	ldr	r3, [pc, #112]	; (800e0d4 <xTaskResumeAll+0x120>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1cb      	bne.n	800e000 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d001      	beq.n	800e072 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e06e:	f000 fb55 	bl	800e71c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e072:	4b1d      	ldr	r3, [pc, #116]	; (800e0e8 <xTaskResumeAll+0x134>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d010      	beq.n	800e0a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e07e:	f000 f847 	bl	800e110 <xTaskIncrementTick>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e088:	4b16      	ldr	r3, [pc, #88]	; (800e0e4 <xTaskResumeAll+0x130>)
 800e08a:	2201      	movs	r2, #1
 800e08c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	3b01      	subs	r3, #1
 800e092:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d1f1      	bne.n	800e07e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e09a:	4b13      	ldr	r3, [pc, #76]	; (800e0e8 <xTaskResumeAll+0x134>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0a0:	4b10      	ldr	r3, [pc, #64]	; (800e0e4 <xTaskResumeAll+0x130>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d009      	beq.n	800e0bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e0ac:	4b0f      	ldr	r3, [pc, #60]	; (800e0ec <xTaskResumeAll+0x138>)
 800e0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0bc:	f001 f8da 	bl	800f274 <vPortExitCritical>

	return xAlreadyYielded;
 800e0c0:	68bb      	ldr	r3, [r7, #8]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20001b68 	.word	0x20001b68
 800e0d0:	20001b40 	.word	0x20001b40
 800e0d4:	20001b00 	.word	0x20001b00
 800e0d8:	20001b48 	.word	0x20001b48
 800e0dc:	20001670 	.word	0x20001670
 800e0e0:	2000166c 	.word	0x2000166c
 800e0e4:	20001b54 	.word	0x20001b54
 800e0e8:	20001b50 	.word	0x20001b50
 800e0ec:	e000ed04 	.word	0xe000ed04

0800e0f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e0f6:	4b05      	ldr	r3, [pc, #20]	; (800e10c <xTaskGetTickCount+0x1c>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e0fc:	687b      	ldr	r3, [r7, #4]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	370c      	adds	r7, #12
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	20001b44 	.word	0x20001b44

0800e110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e116:	2300      	movs	r3, #0
 800e118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e11a:	4b4f      	ldr	r3, [pc, #316]	; (800e258 <xTaskIncrementTick+0x148>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f040 808f 	bne.w	800e242 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e124:	4b4d      	ldr	r3, [pc, #308]	; (800e25c <xTaskIncrementTick+0x14c>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3301      	adds	r3, #1
 800e12a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e12c:	4a4b      	ldr	r2, [pc, #300]	; (800e25c <xTaskIncrementTick+0x14c>)
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d120      	bne.n	800e17a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e138:	4b49      	ldr	r3, [pc, #292]	; (800e260 <xTaskIncrementTick+0x150>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00a      	beq.n	800e158 <xTaskIncrementTick+0x48>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	603b      	str	r3, [r7, #0]
}
 800e154:	bf00      	nop
 800e156:	e7fe      	b.n	800e156 <xTaskIncrementTick+0x46>
 800e158:	4b41      	ldr	r3, [pc, #260]	; (800e260 <xTaskIncrementTick+0x150>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	4b41      	ldr	r3, [pc, #260]	; (800e264 <xTaskIncrementTick+0x154>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a3f      	ldr	r2, [pc, #252]	; (800e260 <xTaskIncrementTick+0x150>)
 800e164:	6013      	str	r3, [r2, #0]
 800e166:	4a3f      	ldr	r2, [pc, #252]	; (800e264 <xTaskIncrementTick+0x154>)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6013      	str	r3, [r2, #0]
 800e16c:	4b3e      	ldr	r3, [pc, #248]	; (800e268 <xTaskIncrementTick+0x158>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3301      	adds	r3, #1
 800e172:	4a3d      	ldr	r2, [pc, #244]	; (800e268 <xTaskIncrementTick+0x158>)
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	f000 fad1 	bl	800e71c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e17a:	4b3c      	ldr	r3, [pc, #240]	; (800e26c <xTaskIncrementTick+0x15c>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	693a      	ldr	r2, [r7, #16]
 800e180:	429a      	cmp	r2, r3
 800e182:	d349      	bcc.n	800e218 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e184:	4b36      	ldr	r3, [pc, #216]	; (800e260 <xTaskIncrementTick+0x150>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d104      	bne.n	800e198 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e18e:	4b37      	ldr	r3, [pc, #220]	; (800e26c <xTaskIncrementTick+0x15c>)
 800e190:	f04f 32ff 	mov.w	r2, #4294967295
 800e194:	601a      	str	r2, [r3, #0]
					break;
 800e196:	e03f      	b.n	800e218 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e198:	4b31      	ldr	r3, [pc, #196]	; (800e260 <xTaskIncrementTick+0x150>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e1a8:	693a      	ldr	r2, [r7, #16]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d203      	bcs.n	800e1b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e1b0:	4a2e      	ldr	r2, [pc, #184]	; (800e26c <xTaskIncrementTick+0x15c>)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e1b6:	e02f      	b.n	800e218 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	3304      	adds	r3, #4
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fe fe59 	bl	800ce74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d004      	beq.n	800e1d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	3318      	adds	r3, #24
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fe fe50 	bl	800ce74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d8:	4b25      	ldr	r3, [pc, #148]	; (800e270 <xTaskIncrementTick+0x160>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d903      	bls.n	800e1e8 <xTaskIncrementTick+0xd8>
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e4:	4a22      	ldr	r2, [pc, #136]	; (800e270 <xTaskIncrementTick+0x160>)
 800e1e6:	6013      	str	r3, [r2, #0]
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4a1f      	ldr	r2, [pc, #124]	; (800e274 <xTaskIncrementTick+0x164>)
 800e1f6:	441a      	add	r2, r3
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	3304      	adds	r3, #4
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	4610      	mov	r0, r2
 800e200:	f7fe fddb 	bl	800cdba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e208:	4b1b      	ldr	r3, [pc, #108]	; (800e278 <xTaskIncrementTick+0x168>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20e:	429a      	cmp	r2, r3
 800e210:	d3b8      	bcc.n	800e184 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e212:	2301      	movs	r3, #1
 800e214:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e216:	e7b5      	b.n	800e184 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e218:	4b17      	ldr	r3, [pc, #92]	; (800e278 <xTaskIncrementTick+0x168>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21e:	4915      	ldr	r1, [pc, #84]	; (800e274 <xTaskIncrementTick+0x164>)
 800e220:	4613      	mov	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4413      	add	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	440b      	add	r3, r1
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d901      	bls.n	800e234 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e230:	2301      	movs	r3, #1
 800e232:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e234:	4b11      	ldr	r3, [pc, #68]	; (800e27c <xTaskIncrementTick+0x16c>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d007      	beq.n	800e24c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e23c:	2301      	movs	r3, #1
 800e23e:	617b      	str	r3, [r7, #20]
 800e240:	e004      	b.n	800e24c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e242:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <xTaskIncrementTick+0x170>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3301      	adds	r3, #1
 800e248:	4a0d      	ldr	r2, [pc, #52]	; (800e280 <xTaskIncrementTick+0x170>)
 800e24a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e24c:	697b      	ldr	r3, [r7, #20]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	20001b68 	.word	0x20001b68
 800e25c:	20001b44 	.word	0x20001b44
 800e260:	20001af8 	.word	0x20001af8
 800e264:	20001afc 	.word	0x20001afc
 800e268:	20001b58 	.word	0x20001b58
 800e26c:	20001b60 	.word	0x20001b60
 800e270:	20001b48 	.word	0x20001b48
 800e274:	20001670 	.word	0x20001670
 800e278:	2000166c 	.word	0x2000166c
 800e27c:	20001b54 	.word	0x20001b54
 800e280:	20001b50 	.word	0x20001b50

0800e284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e28a:	4b28      	ldr	r3, [pc, #160]	; (800e32c <vTaskSwitchContext+0xa8>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d003      	beq.n	800e29a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e292:	4b27      	ldr	r3, [pc, #156]	; (800e330 <vTaskSwitchContext+0xac>)
 800e294:	2201      	movs	r2, #1
 800e296:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e298:	e041      	b.n	800e31e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e29a:	4b25      	ldr	r3, [pc, #148]	; (800e330 <vTaskSwitchContext+0xac>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2a0:	4b24      	ldr	r3, [pc, #144]	; (800e334 <vTaskSwitchContext+0xb0>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	60fb      	str	r3, [r7, #12]
 800e2a6:	e010      	b.n	800e2ca <vTaskSwitchContext+0x46>
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10a      	bne.n	800e2c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	607b      	str	r3, [r7, #4]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <vTaskSwitchContext+0x3e>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	491b      	ldr	r1, [pc, #108]	; (800e338 <vTaskSwitchContext+0xb4>)
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	4413      	add	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	440b      	add	r3, r1
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d0e4      	beq.n	800e2a8 <vTaskSwitchContext+0x24>
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4a13      	ldr	r2, [pc, #76]	; (800e338 <vTaskSwitchContext+0xb4>)
 800e2ea:	4413      	add	r3, r2
 800e2ec:	60bb      	str	r3, [r7, #8]
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	685a      	ldr	r2, [r3, #4]
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	605a      	str	r2, [r3, #4]
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	3308      	adds	r3, #8
 800e300:	429a      	cmp	r2, r3
 800e302:	d104      	bne.n	800e30e <vTaskSwitchContext+0x8a>
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	685a      	ldr	r2, [r3, #4]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	605a      	str	r2, [r3, #4]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	4a09      	ldr	r2, [pc, #36]	; (800e33c <vTaskSwitchContext+0xb8>)
 800e316:	6013      	str	r3, [r2, #0]
 800e318:	4a06      	ldr	r2, [pc, #24]	; (800e334 <vTaskSwitchContext+0xb0>)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6013      	str	r3, [r2, #0]
}
 800e31e:	bf00      	nop
 800e320:	3714      	adds	r7, #20
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	20001b68 	.word	0x20001b68
 800e330:	20001b54 	.word	0x20001b54
 800e334:	20001b48 	.word	0x20001b48
 800e338:	20001670 	.word	0x20001670
 800e33c:	2000166c 	.word	0x2000166c

0800e340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10a      	bne.n	800e366 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	60fb      	str	r3, [r7, #12]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e366:	4b07      	ldr	r3, [pc, #28]	; (800e384 <vTaskPlaceOnEventList+0x44>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3318      	adds	r3, #24
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7fe fd47 	bl	800ce02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e374:	2101      	movs	r1, #1
 800e376:	6838      	ldr	r0, [r7, #0]
 800e378:	f000 fa7c 	bl	800e874 <prvAddCurrentTaskToDelayedList>
}
 800e37c:	bf00      	nop
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	2000166c 	.word	0x2000166c

0800e388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10a      	bne.n	800e3b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39e:	f383 8811 	msr	BASEPRI, r3
 800e3a2:	f3bf 8f6f 	isb	sy
 800e3a6:	f3bf 8f4f 	dsb	sy
 800e3aa:	617b      	str	r3, [r7, #20]
}
 800e3ac:	bf00      	nop
 800e3ae:	e7fe      	b.n	800e3ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3b0:	4b0a      	ldr	r3, [pc, #40]	; (800e3dc <vTaskPlaceOnEventListRestricted+0x54>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3318      	adds	r3, #24
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f7fe fcfe 	bl	800cdba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d002      	beq.n	800e3ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e3ca:	6879      	ldr	r1, [r7, #4]
 800e3cc:	68b8      	ldr	r0, [r7, #8]
 800e3ce:	f000 fa51 	bl	800e874 <prvAddCurrentTaskToDelayedList>
	}
 800e3d2:	bf00      	nop
 800e3d4:	3718      	adds	r7, #24
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	2000166c 	.word	0x2000166c

0800e3e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10a      	bne.n	800e40c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	60fb      	str	r3, [r7, #12]
}
 800e408:	bf00      	nop
 800e40a:	e7fe      	b.n	800e40a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	3318      	adds	r3, #24
 800e410:	4618      	mov	r0, r3
 800e412:	f7fe fd2f 	bl	800ce74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e416:	4b1e      	ldr	r3, [pc, #120]	; (800e490 <xTaskRemoveFromEventList+0xb0>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d11d      	bne.n	800e45a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	3304      	adds	r3, #4
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe fd26 	bl	800ce74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42c:	4b19      	ldr	r3, [pc, #100]	; (800e494 <xTaskRemoveFromEventList+0xb4>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	429a      	cmp	r2, r3
 800e432:	d903      	bls.n	800e43c <xTaskRemoveFromEventList+0x5c>
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e438:	4a16      	ldr	r2, [pc, #88]	; (800e494 <xTaskRemoveFromEventList+0xb4>)
 800e43a:	6013      	str	r3, [r2, #0]
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e440:	4613      	mov	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	4413      	add	r3, r2
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4a13      	ldr	r2, [pc, #76]	; (800e498 <xTaskRemoveFromEventList+0xb8>)
 800e44a:	441a      	add	r2, r3
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	3304      	adds	r3, #4
 800e450:	4619      	mov	r1, r3
 800e452:	4610      	mov	r0, r2
 800e454:	f7fe fcb1 	bl	800cdba <vListInsertEnd>
 800e458:	e005      	b.n	800e466 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	3318      	adds	r3, #24
 800e45e:	4619      	mov	r1, r3
 800e460:	480e      	ldr	r0, [pc, #56]	; (800e49c <xTaskRemoveFromEventList+0xbc>)
 800e462:	f7fe fcaa 	bl	800cdba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46a:	4b0d      	ldr	r3, [pc, #52]	; (800e4a0 <xTaskRemoveFromEventList+0xc0>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e470:	429a      	cmp	r2, r3
 800e472:	d905      	bls.n	800e480 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e474:	2301      	movs	r3, #1
 800e476:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e478:	4b0a      	ldr	r3, [pc, #40]	; (800e4a4 <xTaskRemoveFromEventList+0xc4>)
 800e47a:	2201      	movs	r2, #1
 800e47c:	601a      	str	r2, [r3, #0]
 800e47e:	e001      	b.n	800e484 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e480:	2300      	movs	r3, #0
 800e482:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e484:	697b      	ldr	r3, [r7, #20]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	20001b68 	.word	0x20001b68
 800e494:	20001b48 	.word	0x20001b48
 800e498:	20001670 	.word	0x20001670
 800e49c:	20001b00 	.word	0x20001b00
 800e4a0:	2000166c 	.word	0x2000166c
 800e4a4:	20001b54 	.word	0x20001b54

0800e4a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4b0:	4b06      	ldr	r3, [pc, #24]	; (800e4cc <vTaskInternalSetTimeOutState+0x24>)
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4b8:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <vTaskInternalSetTimeOutState+0x28>)
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	605a      	str	r2, [r3, #4]
}
 800e4c0:	bf00      	nop
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	20001b58 	.word	0x20001b58
 800e4d0:	20001b44 	.word	0x20001b44

0800e4d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b088      	sub	sp, #32
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d10a      	bne.n	800e4fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e8:	f383 8811 	msr	BASEPRI, r3
 800e4ec:	f3bf 8f6f 	isb	sy
 800e4f0:	f3bf 8f4f 	dsb	sy
 800e4f4:	613b      	str	r3, [r7, #16]
}
 800e4f6:	bf00      	nop
 800e4f8:	e7fe      	b.n	800e4f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10a      	bne.n	800e516 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	60fb      	str	r3, [r7, #12]
}
 800e512:	bf00      	nop
 800e514:	e7fe      	b.n	800e514 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e516:	f000 fe7d 	bl	800f214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e51a:	4b1d      	ldr	r3, [pc, #116]	; (800e590 <xTaskCheckForTimeOut+0xbc>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	69ba      	ldr	r2, [r7, #24]
 800e526:	1ad3      	subs	r3, r2, r3
 800e528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e532:	d102      	bne.n	800e53a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e534:	2300      	movs	r3, #0
 800e536:	61fb      	str	r3, [r7, #28]
 800e538:	e023      	b.n	800e582 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	4b15      	ldr	r3, [pc, #84]	; (800e594 <xTaskCheckForTimeOut+0xc0>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d007      	beq.n	800e556 <xTaskCheckForTimeOut+0x82>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	69ba      	ldr	r2, [r7, #24]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d302      	bcc.n	800e556 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e550:	2301      	movs	r3, #1
 800e552:	61fb      	str	r3, [r7, #28]
 800e554:	e015      	b.n	800e582 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	697a      	ldr	r2, [r7, #20]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d20b      	bcs.n	800e578 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	1ad2      	subs	r2, r2, r3
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7ff ff9b 	bl	800e4a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e572:	2300      	movs	r3, #0
 800e574:	61fb      	str	r3, [r7, #28]
 800e576:	e004      	b.n	800e582 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e57e:	2301      	movs	r3, #1
 800e580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e582:	f000 fe77 	bl	800f274 <vPortExitCritical>

	return xReturn;
 800e586:	69fb      	ldr	r3, [r7, #28]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3720      	adds	r7, #32
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	20001b44 	.word	0x20001b44
 800e594:	20001b58 	.word	0x20001b58

0800e598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e598:	b480      	push	{r7}
 800e59a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e59c:	4b03      	ldr	r3, [pc, #12]	; (800e5ac <vTaskMissedYield+0x14>)
 800e59e:	2201      	movs	r2, #1
 800e5a0:	601a      	str	r2, [r3, #0]
}
 800e5a2:	bf00      	nop
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	20001b54 	.word	0x20001b54

0800e5b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5b8:	f000 f852 	bl	800e660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5bc:	4b06      	ldr	r3, [pc, #24]	; (800e5d8 <prvIdleTask+0x28>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d9f9      	bls.n	800e5b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e5c4:	4b05      	ldr	r3, [pc, #20]	; (800e5dc <prvIdleTask+0x2c>)
 800e5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e5d4:	e7f0      	b.n	800e5b8 <prvIdleTask+0x8>
 800e5d6:	bf00      	nop
 800e5d8:	20001670 	.word	0x20001670
 800e5dc:	e000ed04 	.word	0xe000ed04

0800e5e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	607b      	str	r3, [r7, #4]
 800e5ea:	e00c      	b.n	800e606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4413      	add	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4a12      	ldr	r2, [pc, #72]	; (800e640 <prvInitialiseTaskLists+0x60>)
 800e5f8:	4413      	add	r3, r2
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fe fbb0 	bl	800cd60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	3301      	adds	r3, #1
 800e604:	607b      	str	r3, [r7, #4]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b37      	cmp	r3, #55	; 0x37
 800e60a:	d9ef      	bls.n	800e5ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e60c:	480d      	ldr	r0, [pc, #52]	; (800e644 <prvInitialiseTaskLists+0x64>)
 800e60e:	f7fe fba7 	bl	800cd60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e612:	480d      	ldr	r0, [pc, #52]	; (800e648 <prvInitialiseTaskLists+0x68>)
 800e614:	f7fe fba4 	bl	800cd60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e618:	480c      	ldr	r0, [pc, #48]	; (800e64c <prvInitialiseTaskLists+0x6c>)
 800e61a:	f7fe fba1 	bl	800cd60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e61e:	480c      	ldr	r0, [pc, #48]	; (800e650 <prvInitialiseTaskLists+0x70>)
 800e620:	f7fe fb9e 	bl	800cd60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e624:	480b      	ldr	r0, [pc, #44]	; (800e654 <prvInitialiseTaskLists+0x74>)
 800e626:	f7fe fb9b 	bl	800cd60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e62a:	4b0b      	ldr	r3, [pc, #44]	; (800e658 <prvInitialiseTaskLists+0x78>)
 800e62c:	4a05      	ldr	r2, [pc, #20]	; (800e644 <prvInitialiseTaskLists+0x64>)
 800e62e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e630:	4b0a      	ldr	r3, [pc, #40]	; (800e65c <prvInitialiseTaskLists+0x7c>)
 800e632:	4a05      	ldr	r2, [pc, #20]	; (800e648 <prvInitialiseTaskLists+0x68>)
 800e634:	601a      	str	r2, [r3, #0]
}
 800e636:	bf00      	nop
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	20001670 	.word	0x20001670
 800e644:	20001ad0 	.word	0x20001ad0
 800e648:	20001ae4 	.word	0x20001ae4
 800e64c:	20001b00 	.word	0x20001b00
 800e650:	20001b14 	.word	0x20001b14
 800e654:	20001b2c 	.word	0x20001b2c
 800e658:	20001af8 	.word	0x20001af8
 800e65c:	20001afc 	.word	0x20001afc

0800e660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e666:	e019      	b.n	800e69c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e668:	f000 fdd4 	bl	800f214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e66c:	4b10      	ldr	r3, [pc, #64]	; (800e6b0 <prvCheckTasksWaitingTermination+0x50>)
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3304      	adds	r3, #4
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe fbfb 	bl	800ce74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e67e:	4b0d      	ldr	r3, [pc, #52]	; (800e6b4 <prvCheckTasksWaitingTermination+0x54>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	3b01      	subs	r3, #1
 800e684:	4a0b      	ldr	r2, [pc, #44]	; (800e6b4 <prvCheckTasksWaitingTermination+0x54>)
 800e686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e688:	4b0b      	ldr	r3, [pc, #44]	; (800e6b8 <prvCheckTasksWaitingTermination+0x58>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	3b01      	subs	r3, #1
 800e68e:	4a0a      	ldr	r2, [pc, #40]	; (800e6b8 <prvCheckTasksWaitingTermination+0x58>)
 800e690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e692:	f000 fdef 	bl	800f274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 f810 	bl	800e6bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e69c:	4b06      	ldr	r3, [pc, #24]	; (800e6b8 <prvCheckTasksWaitingTermination+0x58>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1e1      	bne.n	800e668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e6a4:	bf00      	nop
 800e6a6:	bf00      	nop
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20001b14 	.word	0x20001b14
 800e6b4:	20001b40 	.word	0x20001b40
 800e6b8:	20001b28 	.word	0x20001b28

0800e6bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d108      	bne.n	800e6e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f000 ff8c 	bl	800f5f0 <vPortFree>
				vPortFree( pxTCB );
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 ff89 	bl	800f5f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6de:	e018      	b.n	800e712 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d103      	bne.n	800e6f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 ff80 	bl	800f5f0 <vPortFree>
	}
 800e6f0:	e00f      	b.n	800e712 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d00a      	beq.n	800e712 <prvDeleteTCB+0x56>
	__asm volatile
 800e6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e700:	f383 8811 	msr	BASEPRI, r3
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	60fb      	str	r3, [r7, #12]
}
 800e70e:	bf00      	nop
 800e710:	e7fe      	b.n	800e710 <prvDeleteTCB+0x54>
	}
 800e712:	bf00      	nop
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
	...

0800e71c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e722:	4b0c      	ldr	r3, [pc, #48]	; (800e754 <prvResetNextTaskUnblockTime+0x38>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d104      	bne.n	800e736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e72c:	4b0a      	ldr	r3, [pc, #40]	; (800e758 <prvResetNextTaskUnblockTime+0x3c>)
 800e72e:	f04f 32ff 	mov.w	r2, #4294967295
 800e732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e734:	e008      	b.n	800e748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e736:	4b07      	ldr	r3, [pc, #28]	; (800e754 <prvResetNextTaskUnblockTime+0x38>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	4a04      	ldr	r2, [pc, #16]	; (800e758 <prvResetNextTaskUnblockTime+0x3c>)
 800e746:	6013      	str	r3, [r2, #0]
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	20001af8 	.word	0x20001af8
 800e758:	20001b60 	.word	0x20001b60

0800e75c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e762:	4b0b      	ldr	r3, [pc, #44]	; (800e790 <xTaskGetSchedulerState+0x34>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d102      	bne.n	800e770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e76a:	2301      	movs	r3, #1
 800e76c:	607b      	str	r3, [r7, #4]
 800e76e:	e008      	b.n	800e782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e770:	4b08      	ldr	r3, [pc, #32]	; (800e794 <xTaskGetSchedulerState+0x38>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d102      	bne.n	800e77e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e778:	2302      	movs	r3, #2
 800e77a:	607b      	str	r3, [r7, #4]
 800e77c:	e001      	b.n	800e782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e77e:	2300      	movs	r3, #0
 800e780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e782:	687b      	ldr	r3, [r7, #4]
	}
 800e784:	4618      	mov	r0, r3
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	20001b4c 	.word	0x20001b4c
 800e794:	20001b68 	.word	0x20001b68

0800e798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d056      	beq.n	800e85c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e7ae:	4b2e      	ldr	r3, [pc, #184]	; (800e868 <xTaskPriorityDisinherit+0xd0>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	693a      	ldr	r2, [r7, #16]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d00a      	beq.n	800e7ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	60fb      	str	r3, [r7, #12]
}
 800e7ca:	bf00      	nop
 800e7cc:	e7fe      	b.n	800e7cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10a      	bne.n	800e7ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	60bb      	str	r3, [r7, #8]
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7f0:	1e5a      	subs	r2, r3, #1
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d02c      	beq.n	800e85c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e806:	2b00      	cmp	r3, #0
 800e808:	d128      	bne.n	800e85c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe fb30 	bl	800ce74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e820:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82c:	4b0f      	ldr	r3, [pc, #60]	; (800e86c <xTaskPriorityDisinherit+0xd4>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d903      	bls.n	800e83c <xTaskPriorityDisinherit+0xa4>
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e838:	4a0c      	ldr	r2, [pc, #48]	; (800e86c <xTaskPriorityDisinherit+0xd4>)
 800e83a:	6013      	str	r3, [r2, #0]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e840:	4613      	mov	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	4a09      	ldr	r2, [pc, #36]	; (800e870 <xTaskPriorityDisinherit+0xd8>)
 800e84a:	441a      	add	r2, r3
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	3304      	adds	r3, #4
 800e850:	4619      	mov	r1, r3
 800e852:	4610      	mov	r0, r2
 800e854:	f7fe fab1 	bl	800cdba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e858:	2301      	movs	r3, #1
 800e85a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e85c:	697b      	ldr	r3, [r7, #20]
	}
 800e85e:	4618      	mov	r0, r3
 800e860:	3718      	adds	r7, #24
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	2000166c 	.word	0x2000166c
 800e86c:	20001b48 	.word	0x20001b48
 800e870:	20001670 	.word	0x20001670

0800e874 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e87e:	4b21      	ldr	r3, [pc, #132]	; (800e904 <prvAddCurrentTaskToDelayedList+0x90>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e884:	4b20      	ldr	r3, [pc, #128]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3304      	adds	r3, #4
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fe faf2 	bl	800ce74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e896:	d10a      	bne.n	800e8ae <prvAddCurrentTaskToDelayedList+0x3a>
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d007      	beq.n	800e8ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e89e:	4b1a      	ldr	r3, [pc, #104]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4819      	ldr	r0, [pc, #100]	; (800e90c <prvAddCurrentTaskToDelayedList+0x98>)
 800e8a8:	f7fe fa87 	bl	800cdba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e8ac:	e026      	b.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8b6:	4b14      	ldr	r3, [pc, #80]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d209      	bcs.n	800e8da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8c6:	4b12      	ldr	r3, [pc, #72]	; (800e910 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	f7fe fa95 	bl	800ce02 <vListInsert>
}
 800e8d8:	e010      	b.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8da:	4b0e      	ldr	r3, [pc, #56]	; (800e914 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	4b0a      	ldr	r3, [pc, #40]	; (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	f7fe fa8b 	bl	800ce02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	; (800e918 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d202      	bcs.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8f6:	4a08      	ldr	r2, [pc, #32]	; (800e918 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	6013      	str	r3, [r2, #0]
}
 800e8fc:	bf00      	nop
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	20001b44 	.word	0x20001b44
 800e908:	2000166c 	.word	0x2000166c
 800e90c:	20001b2c 	.word	0x20001b2c
 800e910:	20001afc 	.word	0x20001afc
 800e914:	20001af8 	.word	0x20001af8
 800e918:	20001b60 	.word	0x20001b60

0800e91c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08a      	sub	sp, #40	; 0x28
 800e920:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e922:	2300      	movs	r3, #0
 800e924:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e926:	f000 fb07 	bl	800ef38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e92a:	4b1c      	ldr	r3, [pc, #112]	; (800e99c <xTimerCreateTimerTask+0x80>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d021      	beq.n	800e976 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e932:	2300      	movs	r3, #0
 800e934:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e936:	2300      	movs	r3, #0
 800e938:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e93a:	1d3a      	adds	r2, r7, #4
 800e93c:	f107 0108 	add.w	r1, r7, #8
 800e940:	f107 030c 	add.w	r3, r7, #12
 800e944:	4618      	mov	r0, r3
 800e946:	f7fe f9f1 	bl	800cd2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e94a:	6879      	ldr	r1, [r7, #4]
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	9202      	str	r2, [sp, #8]
 800e952:	9301      	str	r3, [sp, #4]
 800e954:	2302      	movs	r3, #2
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	2300      	movs	r3, #0
 800e95a:	460a      	mov	r2, r1
 800e95c:	4910      	ldr	r1, [pc, #64]	; (800e9a0 <xTimerCreateTimerTask+0x84>)
 800e95e:	4811      	ldr	r0, [pc, #68]	; (800e9a4 <xTimerCreateTimerTask+0x88>)
 800e960:	f7fe ffd8 	bl	800d914 <xTaskCreateStatic>
 800e964:	4603      	mov	r3, r0
 800e966:	4a10      	ldr	r2, [pc, #64]	; (800e9a8 <xTimerCreateTimerTask+0x8c>)
 800e968:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e96a:	4b0f      	ldr	r3, [pc, #60]	; (800e9a8 <xTimerCreateTimerTask+0x8c>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e972:	2301      	movs	r3, #1
 800e974:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10a      	bne.n	800e992 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	613b      	str	r3, [r7, #16]
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e992:	697b      	ldr	r3, [r7, #20]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	20001b9c 	.word	0x20001b9c
 800e9a0:	08011b18 	.word	0x08011b18
 800e9a4:	0800eae1 	.word	0x0800eae1
 800e9a8:	20001ba0 	.word	0x20001ba0

0800e9ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08a      	sub	sp, #40	; 0x28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10a      	bne.n	800e9da <xTimerGenericCommand+0x2e>
	__asm volatile
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	623b      	str	r3, [r7, #32]
}
 800e9d6:	bf00      	nop
 800e9d8:	e7fe      	b.n	800e9d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e9da:	4b1a      	ldr	r3, [pc, #104]	; (800ea44 <xTimerGenericCommand+0x98>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d02a      	beq.n	800ea38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2b05      	cmp	r3, #5
 800e9f2:	dc18      	bgt.n	800ea26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9f4:	f7ff feb2 	bl	800e75c <xTaskGetSchedulerState>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d109      	bne.n	800ea12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9fe:	4b11      	ldr	r3, [pc, #68]	; (800ea44 <xTimerGenericCommand+0x98>)
 800ea00:	6818      	ldr	r0, [r3, #0]
 800ea02:	f107 0110 	add.w	r1, r7, #16
 800ea06:	2300      	movs	r3, #0
 800ea08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea0a:	f7fe fb9b 	bl	800d144 <xQueueGenericSend>
 800ea0e:	6278      	str	r0, [r7, #36]	; 0x24
 800ea10:	e012      	b.n	800ea38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ea12:	4b0c      	ldr	r3, [pc, #48]	; (800ea44 <xTimerGenericCommand+0x98>)
 800ea14:	6818      	ldr	r0, [r3, #0]
 800ea16:	f107 0110 	add.w	r1, r7, #16
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f7fe fb91 	bl	800d144 <xQueueGenericSend>
 800ea22:	6278      	str	r0, [r7, #36]	; 0x24
 800ea24:	e008      	b.n	800ea38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea26:	4b07      	ldr	r3, [pc, #28]	; (800ea44 <xTimerGenericCommand+0x98>)
 800ea28:	6818      	ldr	r0, [r3, #0]
 800ea2a:	f107 0110 	add.w	r1, r7, #16
 800ea2e:	2300      	movs	r3, #0
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	f7fe fc85 	bl	800d340 <xQueueGenericSendFromISR>
 800ea36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3728      	adds	r7, #40	; 0x28
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20001b9c 	.word	0x20001b9c

0800ea48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b088      	sub	sp, #32
 800ea4c:	af02      	add	r7, sp, #8
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea52:	4b22      	ldr	r3, [pc, #136]	; (800eadc <prvProcessExpiredTimer+0x94>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	68db      	ldr	r3, [r3, #12]
 800ea5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	3304      	adds	r3, #4
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fe fa07 	bl	800ce74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea6c:	f003 0304 	and.w	r3, r3, #4
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d022      	beq.n	800eaba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	699a      	ldr	r2, [r3, #24]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	18d1      	adds	r1, r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	6978      	ldr	r0, [r7, #20]
 800ea82:	f000 f8d1 	bl	800ec28 <prvInsertTimerInActiveList>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01f      	beq.n	800eacc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	2300      	movs	r3, #0
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	2100      	movs	r1, #0
 800ea96:	6978      	ldr	r0, [r7, #20]
 800ea98:	f7ff ff88 	bl	800e9ac <xTimerGenericCommand>
 800ea9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d113      	bne.n	800eacc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	60fb      	str	r3, [r7, #12]
}
 800eab6:	bf00      	nop
 800eab8:	e7fe      	b.n	800eab8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eac0:	f023 0301 	bic.w	r3, r3, #1
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	6a1b      	ldr	r3, [r3, #32]
 800ead0:	6978      	ldr	r0, [r7, #20]
 800ead2:	4798      	blx	r3
}
 800ead4:	bf00      	nop
 800ead6:	3718      	adds	r7, #24
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	20001b94 	.word	0x20001b94

0800eae0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eae8:	f107 0308 	add.w	r3, r7, #8
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 f857 	bl	800eba0 <prvGetNextExpireTime>
 800eaf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f000 f803 	bl	800eb04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eafe:	f000 f8d5 	bl	800ecac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb02:	e7f1      	b.n	800eae8 <prvTimerTask+0x8>

0800eb04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eb0e:	f7ff fa43 	bl	800df98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb12:	f107 0308 	add.w	r3, r7, #8
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 f866 	bl	800ebe8 <prvSampleTimeNow>
 800eb1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d130      	bne.n	800eb86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10a      	bne.n	800eb40 <prvProcessTimerOrBlockTask+0x3c>
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d806      	bhi.n	800eb40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb32:	f7ff fa3f 	bl	800dfb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb36:	68f9      	ldr	r1, [r7, #12]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff ff85 	bl	800ea48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb3e:	e024      	b.n	800eb8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d008      	beq.n	800eb58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb46:	4b13      	ldr	r3, [pc, #76]	; (800eb94 <prvProcessTimerOrBlockTask+0x90>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d101      	bne.n	800eb54 <prvProcessTimerOrBlockTask+0x50>
 800eb50:	2301      	movs	r3, #1
 800eb52:	e000      	b.n	800eb56 <prvProcessTimerOrBlockTask+0x52>
 800eb54:	2300      	movs	r3, #0
 800eb56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb58:	4b0f      	ldr	r3, [pc, #60]	; (800eb98 <prvProcessTimerOrBlockTask+0x94>)
 800eb5a:	6818      	ldr	r0, [r3, #0]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	4619      	mov	r1, r3
 800eb66:	f7fe fea1 	bl	800d8ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb6a:	f7ff fa23 	bl	800dfb4 <xTaskResumeAll>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10a      	bne.n	800eb8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb74:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <prvProcessTimerOrBlockTask+0x98>)
 800eb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb7a:	601a      	str	r2, [r3, #0]
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	f3bf 8f6f 	isb	sy
}
 800eb84:	e001      	b.n	800eb8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb86:	f7ff fa15 	bl	800dfb4 <xTaskResumeAll>
}
 800eb8a:	bf00      	nop
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	20001b98 	.word	0x20001b98
 800eb98:	20001b9c 	.word	0x20001b9c
 800eb9c:	e000ed04 	.word	0xe000ed04

0800eba0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eba8:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <prvGetNextExpireTime+0x44>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d101      	bne.n	800ebb6 <prvGetNextExpireTime+0x16>
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	e000      	b.n	800ebb8 <prvGetNextExpireTime+0x18>
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d105      	bne.n	800ebd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebc4:	4b07      	ldr	r3, [pc, #28]	; (800ebe4 <prvGetNextExpireTime+0x44>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	e001      	b.n	800ebd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	20001b94 	.word	0x20001b94

0800ebe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebf0:	f7ff fa7e 	bl	800e0f0 <xTaskGetTickCount>
 800ebf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebf6:	4b0b      	ldr	r3, [pc, #44]	; (800ec24 <prvSampleTimeNow+0x3c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d205      	bcs.n	800ec0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec00:	f000 f936 	bl	800ee70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	e002      	b.n	800ec12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ec12:	4a04      	ldr	r2, [pc, #16]	; (800ec24 <prvSampleTimeNow+0x3c>)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec18:	68fb      	ldr	r3, [r7, #12]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	20001ba4 	.word	0x20001ba4

0800ec28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
 800ec34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec36:	2300      	movs	r3, #0
 800ec38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d812      	bhi.n	800ec74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	1ad2      	subs	r2, r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d302      	bcc.n	800ec62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	617b      	str	r3, [r7, #20]
 800ec60:	e01b      	b.n	800ec9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec62:	4b10      	ldr	r3, [pc, #64]	; (800eca4 <prvInsertTimerInActiveList+0x7c>)
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	3304      	adds	r3, #4
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f7fe f8c8 	bl	800ce02 <vListInsert>
 800ec72:	e012      	b.n	800ec9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d206      	bcs.n	800ec8a <prvInsertTimerInActiveList+0x62>
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d302      	bcc.n	800ec8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec84:	2301      	movs	r3, #1
 800ec86:	617b      	str	r3, [r7, #20]
 800ec88:	e007      	b.n	800ec9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec8a:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <prvInsertTimerInActiveList+0x80>)
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3304      	adds	r3, #4
 800ec92:	4619      	mov	r1, r3
 800ec94:	4610      	mov	r0, r2
 800ec96:	f7fe f8b4 	bl	800ce02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec9a:	697b      	ldr	r3, [r7, #20]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	20001b98 	.word	0x20001b98
 800eca8:	20001b94 	.word	0x20001b94

0800ecac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b08e      	sub	sp, #56	; 0x38
 800ecb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecb2:	e0ca      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	da18      	bge.n	800ecec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ecba:	1d3b      	adds	r3, r7, #4
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ecc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10a      	bne.n	800ecdc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ecc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecca:	f383 8811 	msr	BASEPRI, r3
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	f3bf 8f4f 	dsb	sy
 800ecd6:	61fb      	str	r3, [r7, #28]
}
 800ecd8:	bf00      	nop
 800ecda:	e7fe      	b.n	800ecda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ecdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ece2:	6850      	ldr	r0, [r2, #4]
 800ece4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ece6:	6892      	ldr	r2, [r2, #8]
 800ece8:	4611      	mov	r1, r2
 800ecea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f2c0 80aa 	blt.w	800ee48 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ecf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfa:	695b      	ldr	r3, [r3, #20]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d004      	beq.n	800ed0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed02:	3304      	adds	r3, #4
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fe f8b5 	bl	800ce74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed0a:	463b      	mov	r3, r7
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7ff ff6b 	bl	800ebe8 <prvSampleTimeNow>
 800ed12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b09      	cmp	r3, #9
 800ed18:	f200 8097 	bhi.w	800ee4a <prvProcessReceivedCommands+0x19e>
 800ed1c:	a201      	add	r2, pc, #4	; (adr r2, 800ed24 <prvProcessReceivedCommands+0x78>)
 800ed1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed22:	bf00      	nop
 800ed24:	0800ed4d 	.word	0x0800ed4d
 800ed28:	0800ed4d 	.word	0x0800ed4d
 800ed2c:	0800ed4d 	.word	0x0800ed4d
 800ed30:	0800edc1 	.word	0x0800edc1
 800ed34:	0800edd5 	.word	0x0800edd5
 800ed38:	0800ee1f 	.word	0x0800ee1f
 800ed3c:	0800ed4d 	.word	0x0800ed4d
 800ed40:	0800ed4d 	.word	0x0800ed4d
 800ed44:	0800edc1 	.word	0x0800edc1
 800ed48:	0800edd5 	.word	0x0800edd5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed52:	f043 0301 	orr.w	r3, r3, #1
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	18d1      	adds	r1, r2, r3
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed6c:	f7ff ff5c 	bl	800ec28 <prvInsertTimerInActiveList>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d069      	beq.n	800ee4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	6a1b      	ldr	r3, [r3, #32]
 800ed7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed84:	f003 0304 	and.w	r3, r3, #4
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d05e      	beq.n	800ee4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed90:	699b      	ldr	r3, [r3, #24]
 800ed92:	441a      	add	r2, r3
 800ed94:	2300      	movs	r3, #0
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	2300      	movs	r3, #0
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed9e:	f7ff fe05 	bl	800e9ac <xTimerGenericCommand>
 800eda2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d14f      	bne.n	800ee4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800edaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edae:	f383 8811 	msr	BASEPRI, r3
 800edb2:	f3bf 8f6f 	isb	sy
 800edb6:	f3bf 8f4f 	dsb	sy
 800edba:	61bb      	str	r3, [r7, #24]
}
 800edbc:	bf00      	nop
 800edbe:	e7fe      	b.n	800edbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edc6:	f023 0301 	bic.w	r3, r3, #1
 800edca:	b2da      	uxtb	r2, r3
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800edd2:	e03a      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edda:	f043 0301 	orr.w	r3, r3, #1
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ede6:	68ba      	ldr	r2, [r7, #8]
 800ede8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edee:	699b      	ldr	r3, [r3, #24]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10a      	bne.n	800ee0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	617b      	str	r3, [r7, #20]
}
 800ee06:	bf00      	nop
 800ee08:	e7fe      	b.n	800ee08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	699a      	ldr	r2, [r3, #24]
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee10:	18d1      	adds	r1, r2, r3
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee18:	f7ff ff06 	bl	800ec28 <prvInsertTimerInActiveList>
					break;
 800ee1c:	e015      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee24:	f003 0302 	and.w	r3, r3, #2
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d103      	bne.n	800ee34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ee2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee2e:	f000 fbdf 	bl	800f5f0 <vPortFree>
 800ee32:	e00a      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee3a:	f023 0301 	bic.w	r3, r3, #1
 800ee3e:	b2da      	uxtb	r2, r3
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee46:	e000      	b.n	800ee4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ee48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee4a:	4b08      	ldr	r3, [pc, #32]	; (800ee6c <prvProcessReceivedCommands+0x1c0>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	1d39      	adds	r1, r7, #4
 800ee50:	2200      	movs	r2, #0
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fe fb10 	bl	800d478 <xQueueReceive>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f47f af2a 	bne.w	800ecb4 <prvProcessReceivedCommands+0x8>
	}
}
 800ee60:	bf00      	nop
 800ee62:	bf00      	nop
 800ee64:	3730      	adds	r7, #48	; 0x30
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20001b9c 	.word	0x20001b9c

0800ee70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b088      	sub	sp, #32
 800ee74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee76:	e048      	b.n	800ef0a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee78:	4b2d      	ldr	r3, [pc, #180]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee82:	4b2b      	ldr	r3, [pc, #172]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fd ffef 	bl	800ce74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eea4:	f003 0304 	and.w	r3, r3, #4
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d02e      	beq.n	800ef0a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	693a      	ldr	r2, [r7, #16]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d90e      	bls.n	800eedc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eeca:	4b19      	ldr	r3, [pc, #100]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	3304      	adds	r3, #4
 800eed2:	4619      	mov	r1, r3
 800eed4:	4610      	mov	r0, r2
 800eed6:	f7fd ff94 	bl	800ce02 <vListInsert>
 800eeda:	e016      	b.n	800ef0a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eedc:	2300      	movs	r3, #0
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	2300      	movs	r3, #0
 800eee2:	693a      	ldr	r2, [r7, #16]
 800eee4:	2100      	movs	r1, #0
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f7ff fd60 	bl	800e9ac <xTimerGenericCommand>
 800eeec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10a      	bne.n	800ef0a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef8:	f383 8811 	msr	BASEPRI, r3
 800eefc:	f3bf 8f6f 	isb	sy
 800ef00:	f3bf 8f4f 	dsb	sy
 800ef04:	603b      	str	r3, [r7, #0]
}
 800ef06:	bf00      	nop
 800ef08:	e7fe      	b.n	800ef08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef0a:	4b09      	ldr	r3, [pc, #36]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1b1      	bne.n	800ee78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef14:	4b06      	ldr	r3, [pc, #24]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef1a:	4b06      	ldr	r3, [pc, #24]	; (800ef34 <prvSwitchTimerLists+0xc4>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a04      	ldr	r2, [pc, #16]	; (800ef30 <prvSwitchTimerLists+0xc0>)
 800ef20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef22:	4a04      	ldr	r2, [pc, #16]	; (800ef34 <prvSwitchTimerLists+0xc4>)
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	6013      	str	r3, [r2, #0]
}
 800ef28:	bf00      	nop
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20001b94 	.word	0x20001b94
 800ef34:	20001b98 	.word	0x20001b98

0800ef38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef3e:	f000 f969 	bl	800f214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef42:	4b15      	ldr	r3, [pc, #84]	; (800ef98 <prvCheckForValidListAndQueue+0x60>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d120      	bne.n	800ef8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef4a:	4814      	ldr	r0, [pc, #80]	; (800ef9c <prvCheckForValidListAndQueue+0x64>)
 800ef4c:	f7fd ff08 	bl	800cd60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef50:	4813      	ldr	r0, [pc, #76]	; (800efa0 <prvCheckForValidListAndQueue+0x68>)
 800ef52:	f7fd ff05 	bl	800cd60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef56:	4b13      	ldr	r3, [pc, #76]	; (800efa4 <prvCheckForValidListAndQueue+0x6c>)
 800ef58:	4a10      	ldr	r2, [pc, #64]	; (800ef9c <prvCheckForValidListAndQueue+0x64>)
 800ef5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef5c:	4b12      	ldr	r3, [pc, #72]	; (800efa8 <prvCheckForValidListAndQueue+0x70>)
 800ef5e:	4a10      	ldr	r2, [pc, #64]	; (800efa0 <prvCheckForValidListAndQueue+0x68>)
 800ef60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef62:	2300      	movs	r3, #0
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	4b11      	ldr	r3, [pc, #68]	; (800efac <prvCheckForValidListAndQueue+0x74>)
 800ef68:	4a11      	ldr	r2, [pc, #68]	; (800efb0 <prvCheckForValidListAndQueue+0x78>)
 800ef6a:	2110      	movs	r1, #16
 800ef6c:	200a      	movs	r0, #10
 800ef6e:	f7fe f813 	bl	800cf98 <xQueueGenericCreateStatic>
 800ef72:	4603      	mov	r3, r0
 800ef74:	4a08      	ldr	r2, [pc, #32]	; (800ef98 <prvCheckForValidListAndQueue+0x60>)
 800ef76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef78:	4b07      	ldr	r3, [pc, #28]	; (800ef98 <prvCheckForValidListAndQueue+0x60>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d005      	beq.n	800ef8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef80:	4b05      	ldr	r3, [pc, #20]	; (800ef98 <prvCheckForValidListAndQueue+0x60>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	490b      	ldr	r1, [pc, #44]	; (800efb4 <prvCheckForValidListAndQueue+0x7c>)
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fc66 	bl	800d858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef8c:	f000 f972 	bl	800f274 <vPortExitCritical>
}
 800ef90:	bf00      	nop
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	20001b9c 	.word	0x20001b9c
 800ef9c:	20001b6c 	.word	0x20001b6c
 800efa0:	20001b80 	.word	0x20001b80
 800efa4:	20001b94 	.word	0x20001b94
 800efa8:	20001b98 	.word	0x20001b98
 800efac:	20001c48 	.word	0x20001c48
 800efb0:	20001ba8 	.word	0x20001ba8
 800efb4:	08011b20 	.word	0x08011b20

0800efb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3b04      	subs	r3, #4
 800efc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800efd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	3b04      	subs	r3, #4
 800efd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	f023 0201 	bic.w	r2, r3, #1
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	3b04      	subs	r3, #4
 800efe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efe8:	4a0c      	ldr	r2, [pc, #48]	; (800f01c <pxPortInitialiseStack+0x64>)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	3b14      	subs	r3, #20
 800eff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	3b04      	subs	r3, #4
 800effe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f06f 0202 	mvn.w	r2, #2
 800f006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	3b20      	subs	r3, #32
 800f00c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f00e:	68fb      	ldr	r3, [r7, #12]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3714      	adds	r7, #20
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr
 800f01c:	0800f021 	.word	0x0800f021

0800f020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f020:	b480      	push	{r7}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f02a:	4b12      	ldr	r3, [pc, #72]	; (800f074 <prvTaskExitError+0x54>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f032:	d00a      	beq.n	800f04a <prvTaskExitError+0x2a>
	__asm volatile
 800f034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	60fb      	str	r3, [r7, #12]
}
 800f046:	bf00      	nop
 800f048:	e7fe      	b.n	800f048 <prvTaskExitError+0x28>
	__asm volatile
 800f04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	60bb      	str	r3, [r7, #8]
}
 800f05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f05e:	bf00      	nop
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d0fc      	beq.n	800f060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f066:	bf00      	nop
 800f068:	bf00      	nop
 800f06a:	3714      	adds	r7, #20
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr
 800f074:	20000648 	.word	0x20000648
	...

0800f080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f080:	4b07      	ldr	r3, [pc, #28]	; (800f0a0 <pxCurrentTCBConst2>)
 800f082:	6819      	ldr	r1, [r3, #0]
 800f084:	6808      	ldr	r0, [r1, #0]
 800f086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08a:	f380 8809 	msr	PSP, r0
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f04f 0000 	mov.w	r0, #0
 800f096:	f380 8811 	msr	BASEPRI, r0
 800f09a:	4770      	bx	lr
 800f09c:	f3af 8000 	nop.w

0800f0a0 <pxCurrentTCBConst2>:
 800f0a0:	2000166c 	.word	0x2000166c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0a4:	bf00      	nop
 800f0a6:	bf00      	nop

0800f0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0a8:	4808      	ldr	r0, [pc, #32]	; (800f0cc <prvPortStartFirstTask+0x24>)
 800f0aa:	6800      	ldr	r0, [r0, #0]
 800f0ac:	6800      	ldr	r0, [r0, #0]
 800f0ae:	f380 8808 	msr	MSP, r0
 800f0b2:	f04f 0000 	mov.w	r0, #0
 800f0b6:	f380 8814 	msr	CONTROL, r0
 800f0ba:	b662      	cpsie	i
 800f0bc:	b661      	cpsie	f
 800f0be:	f3bf 8f4f 	dsb	sy
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	df00      	svc	0
 800f0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0ca:	bf00      	nop
 800f0cc:	e000ed08 	.word	0xe000ed08

0800f0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b086      	sub	sp, #24
 800f0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f0d6:	4b46      	ldr	r3, [pc, #280]	; (800f1f0 <xPortStartScheduler+0x120>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a46      	ldr	r2, [pc, #280]	; (800f1f4 <xPortStartScheduler+0x124>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d10a      	bne.n	800f0f6 <xPortStartScheduler+0x26>
	__asm volatile
 800f0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	613b      	str	r3, [r7, #16]
}
 800f0f2:	bf00      	nop
 800f0f4:	e7fe      	b.n	800f0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0f6:	4b3e      	ldr	r3, [pc, #248]	; (800f1f0 <xPortStartScheduler+0x120>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a3f      	ldr	r2, [pc, #252]	; (800f1f8 <xPortStartScheduler+0x128>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d10a      	bne.n	800f116 <xPortStartScheduler+0x46>
	__asm volatile
 800f100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	60fb      	str	r3, [r7, #12]
}
 800f112:	bf00      	nop
 800f114:	e7fe      	b.n	800f114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f116:	4b39      	ldr	r3, [pc, #228]	; (800f1fc <xPortStartScheduler+0x12c>)
 800f118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	22ff      	movs	r2, #255	; 0xff
 800f126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f130:	78fb      	ldrb	r3, [r7, #3]
 800f132:	b2db      	uxtb	r3, r3
 800f134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	4b31      	ldr	r3, [pc, #196]	; (800f200 <xPortStartScheduler+0x130>)
 800f13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f13e:	4b31      	ldr	r3, [pc, #196]	; (800f204 <xPortStartScheduler+0x134>)
 800f140:	2207      	movs	r2, #7
 800f142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f144:	e009      	b.n	800f15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f146:	4b2f      	ldr	r3, [pc, #188]	; (800f204 <xPortStartScheduler+0x134>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	3b01      	subs	r3, #1
 800f14c:	4a2d      	ldr	r2, [pc, #180]	; (800f204 <xPortStartScheduler+0x134>)
 800f14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f150:	78fb      	ldrb	r3, [r7, #3]
 800f152:	b2db      	uxtb	r3, r3
 800f154:	005b      	lsls	r3, r3, #1
 800f156:	b2db      	uxtb	r3, r3
 800f158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f15a:	78fb      	ldrb	r3, [r7, #3]
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f162:	2b80      	cmp	r3, #128	; 0x80
 800f164:	d0ef      	beq.n	800f146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f166:	4b27      	ldr	r3, [pc, #156]	; (800f204 <xPortStartScheduler+0x134>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f1c3 0307 	rsb	r3, r3, #7
 800f16e:	2b04      	cmp	r3, #4
 800f170:	d00a      	beq.n	800f188 <xPortStartScheduler+0xb8>
	__asm volatile
 800f172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	60bb      	str	r3, [r7, #8]
}
 800f184:	bf00      	nop
 800f186:	e7fe      	b.n	800f186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f188:	4b1e      	ldr	r3, [pc, #120]	; (800f204 <xPortStartScheduler+0x134>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	021b      	lsls	r3, r3, #8
 800f18e:	4a1d      	ldr	r2, [pc, #116]	; (800f204 <xPortStartScheduler+0x134>)
 800f190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f192:	4b1c      	ldr	r3, [pc, #112]	; (800f204 <xPortStartScheduler+0x134>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f19a:	4a1a      	ldr	r2, [pc, #104]	; (800f204 <xPortStartScheduler+0x134>)
 800f19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f1a6:	4b18      	ldr	r3, [pc, #96]	; (800f208 <xPortStartScheduler+0x138>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a17      	ldr	r2, [pc, #92]	; (800f208 <xPortStartScheduler+0x138>)
 800f1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f1b2:	4b15      	ldr	r3, [pc, #84]	; (800f208 <xPortStartScheduler+0x138>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4a14      	ldr	r2, [pc, #80]	; (800f208 <xPortStartScheduler+0x138>)
 800f1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1be:	f000 f8dd 	bl	800f37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1c2:	4b12      	ldr	r3, [pc, #72]	; (800f20c <xPortStartScheduler+0x13c>)
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f1c8:	f000 f8fc 	bl	800f3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f1cc:	4b10      	ldr	r3, [pc, #64]	; (800f210 <xPortStartScheduler+0x140>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a0f      	ldr	r2, [pc, #60]	; (800f210 <xPortStartScheduler+0x140>)
 800f1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1d8:	f7ff ff66 	bl	800f0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1dc:	f7ff f852 	bl	800e284 <vTaskSwitchContext>
	prvTaskExitError();
 800f1e0:	f7ff ff1e 	bl	800f020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3718      	adds	r7, #24
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	e000ed00 	.word	0xe000ed00
 800f1f4:	410fc271 	.word	0x410fc271
 800f1f8:	410fc270 	.word	0x410fc270
 800f1fc:	e000e400 	.word	0xe000e400
 800f200:	20001c98 	.word	0x20001c98
 800f204:	20001c9c 	.word	0x20001c9c
 800f208:	e000ed20 	.word	0xe000ed20
 800f20c:	20000648 	.word	0x20000648
 800f210:	e000ef34 	.word	0xe000ef34

0800f214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
	__asm volatile
 800f21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21e:	f383 8811 	msr	BASEPRI, r3
 800f222:	f3bf 8f6f 	isb	sy
 800f226:	f3bf 8f4f 	dsb	sy
 800f22a:	607b      	str	r3, [r7, #4]
}
 800f22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f22e:	4b0f      	ldr	r3, [pc, #60]	; (800f26c <vPortEnterCritical+0x58>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	3301      	adds	r3, #1
 800f234:	4a0d      	ldr	r2, [pc, #52]	; (800f26c <vPortEnterCritical+0x58>)
 800f236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f238:	4b0c      	ldr	r3, [pc, #48]	; (800f26c <vPortEnterCritical+0x58>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d10f      	bne.n	800f260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f240:	4b0b      	ldr	r3, [pc, #44]	; (800f270 <vPortEnterCritical+0x5c>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	b2db      	uxtb	r3, r3
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00a      	beq.n	800f260 <vPortEnterCritical+0x4c>
	__asm volatile
 800f24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	603b      	str	r3, [r7, #0]
}
 800f25c:	bf00      	nop
 800f25e:	e7fe      	b.n	800f25e <vPortEnterCritical+0x4a>
	}
}
 800f260:	bf00      	nop
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	20000648 	.word	0x20000648
 800f270:	e000ed04 	.word	0xe000ed04

0800f274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f27a:	4b12      	ldr	r3, [pc, #72]	; (800f2c4 <vPortExitCritical+0x50>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d10a      	bne.n	800f298 <vPortExitCritical+0x24>
	__asm volatile
 800f282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f286:	f383 8811 	msr	BASEPRI, r3
 800f28a:	f3bf 8f6f 	isb	sy
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	607b      	str	r3, [r7, #4]
}
 800f294:	bf00      	nop
 800f296:	e7fe      	b.n	800f296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f298:	4b0a      	ldr	r3, [pc, #40]	; (800f2c4 <vPortExitCritical+0x50>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	4a09      	ldr	r2, [pc, #36]	; (800f2c4 <vPortExitCritical+0x50>)
 800f2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f2a2:	4b08      	ldr	r3, [pc, #32]	; (800f2c4 <vPortExitCritical+0x50>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d105      	bne.n	800f2b6 <vPortExitCritical+0x42>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	f383 8811 	msr	BASEPRI, r3
}
 800f2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f2b6:	bf00      	nop
 800f2b8:	370c      	adds	r7, #12
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	20000648 	.word	0x20000648
	...

0800f2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2d0:	f3ef 8009 	mrs	r0, PSP
 800f2d4:	f3bf 8f6f 	isb	sy
 800f2d8:	4b15      	ldr	r3, [pc, #84]	; (800f330 <pxCurrentTCBConst>)
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	f01e 0f10 	tst.w	lr, #16
 800f2e0:	bf08      	it	eq
 800f2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ea:	6010      	str	r0, [r2, #0]
 800f2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2f4:	f380 8811 	msr	BASEPRI, r0
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	f3bf 8f6f 	isb	sy
 800f300:	f7fe ffc0 	bl	800e284 <vTaskSwitchContext>
 800f304:	f04f 0000 	mov.w	r0, #0
 800f308:	f380 8811 	msr	BASEPRI, r0
 800f30c:	bc09      	pop	{r0, r3}
 800f30e:	6819      	ldr	r1, [r3, #0]
 800f310:	6808      	ldr	r0, [r1, #0]
 800f312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f316:	f01e 0f10 	tst.w	lr, #16
 800f31a:	bf08      	it	eq
 800f31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f320:	f380 8809 	msr	PSP, r0
 800f324:	f3bf 8f6f 	isb	sy
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	f3af 8000 	nop.w

0800f330 <pxCurrentTCBConst>:
 800f330:	2000166c 	.word	0x2000166c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f334:	bf00      	nop
 800f336:	bf00      	nop

0800f338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	607b      	str	r3, [r7, #4]
}
 800f350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f352:	f7fe fedd 	bl	800e110 <xTaskIncrementTick>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d003      	beq.n	800f364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f35c:	4b06      	ldr	r3, [pc, #24]	; (800f378 <xPortSysTickHandler+0x40>)
 800f35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f362:	601a      	str	r2, [r3, #0]
 800f364:	2300      	movs	r3, #0
 800f366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	f383 8811 	msr	BASEPRI, r3
}
 800f36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f370:	bf00      	nop
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	e000ed04 	.word	0xe000ed04

0800f37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f37c:	b480      	push	{r7}
 800f37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f380:	4b0b      	ldr	r3, [pc, #44]	; (800f3b0 <vPortSetupTimerInterrupt+0x34>)
 800f382:	2200      	movs	r2, #0
 800f384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f386:	4b0b      	ldr	r3, [pc, #44]	; (800f3b4 <vPortSetupTimerInterrupt+0x38>)
 800f388:	2200      	movs	r2, #0
 800f38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f38c:	4b0a      	ldr	r3, [pc, #40]	; (800f3b8 <vPortSetupTimerInterrupt+0x3c>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4a0a      	ldr	r2, [pc, #40]	; (800f3bc <vPortSetupTimerInterrupt+0x40>)
 800f392:	fba2 2303 	umull	r2, r3, r2, r3
 800f396:	099b      	lsrs	r3, r3, #6
 800f398:	4a09      	ldr	r2, [pc, #36]	; (800f3c0 <vPortSetupTimerInterrupt+0x44>)
 800f39a:	3b01      	subs	r3, #1
 800f39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f39e:	4b04      	ldr	r3, [pc, #16]	; (800f3b0 <vPortSetupTimerInterrupt+0x34>)
 800f3a0:	2207      	movs	r2, #7
 800f3a2:	601a      	str	r2, [r3, #0]
}
 800f3a4:	bf00      	nop
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	e000e010 	.word	0xe000e010
 800f3b4:	e000e018 	.word	0xe000e018
 800f3b8:	200005b0 	.word	0x200005b0
 800f3bc:	10624dd3 	.word	0x10624dd3
 800f3c0:	e000e014 	.word	0xe000e014

0800f3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f3d4 <vPortEnableVFP+0x10>
 800f3c8:	6801      	ldr	r1, [r0, #0]
 800f3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f3ce:	6001      	str	r1, [r0, #0]
 800f3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3d2:	bf00      	nop
 800f3d4:	e000ed88 	.word	0xe000ed88

0800f3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3d8:	b480      	push	{r7}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3de:	f3ef 8305 	mrs	r3, IPSR
 800f3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2b0f      	cmp	r3, #15
 800f3e8:	d914      	bls.n	800f414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3ea:	4a17      	ldr	r2, [pc, #92]	; (800f448 <vPortValidateInterruptPriority+0x70>)
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	4413      	add	r3, r2
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3f4:	4b15      	ldr	r3, [pc, #84]	; (800f44c <vPortValidateInterruptPriority+0x74>)
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	7afa      	ldrb	r2, [r7, #11]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d20a      	bcs.n	800f414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f402:	f383 8811 	msr	BASEPRI, r3
 800f406:	f3bf 8f6f 	isb	sy
 800f40a:	f3bf 8f4f 	dsb	sy
 800f40e:	607b      	str	r3, [r7, #4]
}
 800f410:	bf00      	nop
 800f412:	e7fe      	b.n	800f412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f414:	4b0e      	ldr	r3, [pc, #56]	; (800f450 <vPortValidateInterruptPriority+0x78>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f41c:	4b0d      	ldr	r3, [pc, #52]	; (800f454 <vPortValidateInterruptPriority+0x7c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	429a      	cmp	r2, r3
 800f422:	d90a      	bls.n	800f43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	603b      	str	r3, [r7, #0]
}
 800f436:	bf00      	nop
 800f438:	e7fe      	b.n	800f438 <vPortValidateInterruptPriority+0x60>
	}
 800f43a:	bf00      	nop
 800f43c:	3714      	adds	r7, #20
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr
 800f446:	bf00      	nop
 800f448:	e000e3f0 	.word	0xe000e3f0
 800f44c:	20001c98 	.word	0x20001c98
 800f450:	e000ed0c 	.word	0xe000ed0c
 800f454:	20001c9c 	.word	0x20001c9c

0800f458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b08a      	sub	sp, #40	; 0x28
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f460:	2300      	movs	r3, #0
 800f462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f464:	f7fe fd98 	bl	800df98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f468:	4b5b      	ldr	r3, [pc, #364]	; (800f5d8 <pvPortMalloc+0x180>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d101      	bne.n	800f474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f470:	f000 f920 	bl	800f6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f474:	4b59      	ldr	r3, [pc, #356]	; (800f5dc <pvPortMalloc+0x184>)
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4013      	ands	r3, r2
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f040 8093 	bne.w	800f5a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d01d      	beq.n	800f4c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f488:	2208      	movs	r2, #8
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4413      	add	r3, r2
 800f48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f003 0307 	and.w	r3, r3, #7
 800f496:	2b00      	cmp	r3, #0
 800f498:	d014      	beq.n	800f4c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f023 0307 	bic.w	r3, r3, #7
 800f4a0:	3308      	adds	r3, #8
 800f4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f003 0307 	and.w	r3, r3, #7
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00a      	beq.n	800f4c4 <pvPortMalloc+0x6c>
	__asm volatile
 800f4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	617b      	str	r3, [r7, #20]
}
 800f4c0:	bf00      	nop
 800f4c2:	e7fe      	b.n	800f4c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d06e      	beq.n	800f5a8 <pvPortMalloc+0x150>
 800f4ca:	4b45      	ldr	r3, [pc, #276]	; (800f5e0 <pvPortMalloc+0x188>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d869      	bhi.n	800f5a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4d4:	4b43      	ldr	r3, [pc, #268]	; (800f5e4 <pvPortMalloc+0x18c>)
 800f4d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4d8:	4b42      	ldr	r3, [pc, #264]	; (800f5e4 <pvPortMalloc+0x18c>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4de:	e004      	b.n	800f4ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d903      	bls.n	800f4fc <pvPortMalloc+0xa4>
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1f1      	bne.n	800f4e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4fc:	4b36      	ldr	r3, [pc, #216]	; (800f5d8 <pvPortMalloc+0x180>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f502:	429a      	cmp	r2, r3
 800f504:	d050      	beq.n	800f5a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f506:	6a3b      	ldr	r3, [r7, #32]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2208      	movs	r2, #8
 800f50c:	4413      	add	r3, r2
 800f50e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	6a3b      	ldr	r3, [r7, #32]
 800f516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51a:	685a      	ldr	r2, [r3, #4]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	1ad2      	subs	r2, r2, r3
 800f520:	2308      	movs	r3, #8
 800f522:	005b      	lsls	r3, r3, #1
 800f524:	429a      	cmp	r2, r3
 800f526:	d91f      	bls.n	800f568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4413      	add	r3, r2
 800f52e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	f003 0307 	and.w	r3, r3, #7
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00a      	beq.n	800f550 <pvPortMalloc+0xf8>
	__asm volatile
 800f53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53e:	f383 8811 	msr	BASEPRI, r3
 800f542:	f3bf 8f6f 	isb	sy
 800f546:	f3bf 8f4f 	dsb	sy
 800f54a:	613b      	str	r3, [r7, #16]
}
 800f54c:	bf00      	nop
 800f54e:	e7fe      	b.n	800f54e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	685a      	ldr	r2, [r3, #4]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	1ad2      	subs	r2, r2, r3
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f562:	69b8      	ldr	r0, [r7, #24]
 800f564:	f000 f908 	bl	800f778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f568:	4b1d      	ldr	r3, [pc, #116]	; (800f5e0 <pvPortMalloc+0x188>)
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	1ad3      	subs	r3, r2, r3
 800f572:	4a1b      	ldr	r2, [pc, #108]	; (800f5e0 <pvPortMalloc+0x188>)
 800f574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f576:	4b1a      	ldr	r3, [pc, #104]	; (800f5e0 <pvPortMalloc+0x188>)
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	4b1b      	ldr	r3, [pc, #108]	; (800f5e8 <pvPortMalloc+0x190>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d203      	bcs.n	800f58a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f582:	4b17      	ldr	r3, [pc, #92]	; (800f5e0 <pvPortMalloc+0x188>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4a18      	ldr	r2, [pc, #96]	; (800f5e8 <pvPortMalloc+0x190>)
 800f588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58c:	685a      	ldr	r2, [r3, #4]
 800f58e:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <pvPortMalloc+0x184>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	431a      	orrs	r2, r3
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59a:	2200      	movs	r2, #0
 800f59c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f59e:	4b13      	ldr	r3, [pc, #76]	; (800f5ec <pvPortMalloc+0x194>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	4a11      	ldr	r2, [pc, #68]	; (800f5ec <pvPortMalloc+0x194>)
 800f5a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f5a8:	f7fe fd04 	bl	800dfb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	f003 0307 	and.w	r3, r3, #7
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00a      	beq.n	800f5cc <pvPortMalloc+0x174>
	__asm volatile
 800f5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	60fb      	str	r3, [r7, #12]
}
 800f5c8:	bf00      	nop
 800f5ca:	e7fe      	b.n	800f5ca <pvPortMalloc+0x172>
	return pvReturn;
 800f5cc:	69fb      	ldr	r3, [r7, #28]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3728      	adds	r7, #40	; 0x28
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	20007e50 	.word	0x20007e50
 800f5dc:	20007e64 	.word	0x20007e64
 800f5e0:	20007e54 	.word	0x20007e54
 800f5e4:	20007e48 	.word	0x20007e48
 800f5e8:	20007e58 	.word	0x20007e58
 800f5ec:	20007e5c 	.word	0x20007e5c

0800f5f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d04d      	beq.n	800f69e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f602:	2308      	movs	r3, #8
 800f604:	425b      	negs	r3, r3
 800f606:	697a      	ldr	r2, [r7, #20]
 800f608:	4413      	add	r3, r2
 800f60a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	4b24      	ldr	r3, [pc, #144]	; (800f6a8 <vPortFree+0xb8>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4013      	ands	r3, r2
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d10a      	bne.n	800f634 <vPortFree+0x44>
	__asm volatile
 800f61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f622:	f383 8811 	msr	BASEPRI, r3
 800f626:	f3bf 8f6f 	isb	sy
 800f62a:	f3bf 8f4f 	dsb	sy
 800f62e:	60fb      	str	r3, [r7, #12]
}
 800f630:	bf00      	nop
 800f632:	e7fe      	b.n	800f632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d00a      	beq.n	800f652 <vPortFree+0x62>
	__asm volatile
 800f63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	60bb      	str	r3, [r7, #8]
}
 800f64e:	bf00      	nop
 800f650:	e7fe      	b.n	800f650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	685a      	ldr	r2, [r3, #4]
 800f656:	4b14      	ldr	r3, [pc, #80]	; (800f6a8 <vPortFree+0xb8>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	4013      	ands	r3, r2
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d01e      	beq.n	800f69e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d11a      	bne.n	800f69e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	685a      	ldr	r2, [r3, #4]
 800f66c:	4b0e      	ldr	r3, [pc, #56]	; (800f6a8 <vPortFree+0xb8>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	43db      	mvns	r3, r3
 800f672:	401a      	ands	r2, r3
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f678:	f7fe fc8e 	bl	800df98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	685a      	ldr	r2, [r3, #4]
 800f680:	4b0a      	ldr	r3, [pc, #40]	; (800f6ac <vPortFree+0xbc>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4413      	add	r3, r2
 800f686:	4a09      	ldr	r2, [pc, #36]	; (800f6ac <vPortFree+0xbc>)
 800f688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f68a:	6938      	ldr	r0, [r7, #16]
 800f68c:	f000 f874 	bl	800f778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f690:	4b07      	ldr	r3, [pc, #28]	; (800f6b0 <vPortFree+0xc0>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3301      	adds	r3, #1
 800f696:	4a06      	ldr	r2, [pc, #24]	; (800f6b0 <vPortFree+0xc0>)
 800f698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f69a:	f7fe fc8b 	bl	800dfb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f69e:	bf00      	nop
 800f6a0:	3718      	adds	r7, #24
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20007e64 	.word	0x20007e64
 800f6ac:	20007e54 	.word	0x20007e54
 800f6b0:	20007e60 	.word	0x20007e60

0800f6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f6ba:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800f6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f6c0:	4b27      	ldr	r3, [pc, #156]	; (800f760 <prvHeapInit+0xac>)
 800f6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f003 0307 	and.w	r3, r3, #7
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00c      	beq.n	800f6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	3307      	adds	r3, #7
 800f6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f023 0307 	bic.w	r3, r3, #7
 800f6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6dc:	68ba      	ldr	r2, [r7, #8]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	4a1f      	ldr	r2, [pc, #124]	; (800f760 <prvHeapInit+0xac>)
 800f6e4:	4413      	add	r3, r2
 800f6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6ec:	4a1d      	ldr	r2, [pc, #116]	; (800f764 <prvHeapInit+0xb0>)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6f2:	4b1c      	ldr	r3, [pc, #112]	; (800f764 <prvHeapInit+0xb0>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	68ba      	ldr	r2, [r7, #8]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f700:	2208      	movs	r2, #8
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	1a9b      	subs	r3, r3, r2
 800f706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f023 0307 	bic.w	r3, r3, #7
 800f70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	4a15      	ldr	r2, [pc, #84]	; (800f768 <prvHeapInit+0xb4>)
 800f714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f716:	4b14      	ldr	r3, [pc, #80]	; (800f768 <prvHeapInit+0xb4>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	2200      	movs	r2, #0
 800f71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f71e:	4b12      	ldr	r3, [pc, #72]	; (800f768 <prvHeapInit+0xb4>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2200      	movs	r2, #0
 800f724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	68fa      	ldr	r2, [r7, #12]
 800f72e:	1ad2      	subs	r2, r2, r3
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f734:	4b0c      	ldr	r3, [pc, #48]	; (800f768 <prvHeapInit+0xb4>)
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	4a0a      	ldr	r2, [pc, #40]	; (800f76c <prvHeapInit+0xb8>)
 800f742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	4a09      	ldr	r2, [pc, #36]	; (800f770 <prvHeapInit+0xbc>)
 800f74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f74c:	4b09      	ldr	r3, [pc, #36]	; (800f774 <prvHeapInit+0xc0>)
 800f74e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f752:	601a      	str	r2, [r3, #0]
}
 800f754:	bf00      	nop
 800f756:	3714      	adds	r7, #20
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr
 800f760:	20001ca0 	.word	0x20001ca0
 800f764:	20007e48 	.word	0x20007e48
 800f768:	20007e50 	.word	0x20007e50
 800f76c:	20007e58 	.word	0x20007e58
 800f770:	20007e54 	.word	0x20007e54
 800f774:	20007e64 	.word	0x20007e64

0800f778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f778:	b480      	push	{r7}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f780:	4b28      	ldr	r3, [pc, #160]	; (800f824 <prvInsertBlockIntoFreeList+0xac>)
 800f782:	60fb      	str	r3, [r7, #12]
 800f784:	e002      	b.n	800f78c <prvInsertBlockIntoFreeList+0x14>
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	60fb      	str	r3, [r7, #12]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	429a      	cmp	r2, r3
 800f794:	d8f7      	bhi.n	800f786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d108      	bne.n	800f7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	685a      	ldr	r2, [r3, #4]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	441a      	add	r2, r3
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	68ba      	ldr	r2, [r7, #8]
 800f7c4:	441a      	add	r2, r3
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d118      	bne.n	800f800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	4b15      	ldr	r3, [pc, #84]	; (800f828 <prvInsertBlockIntoFreeList+0xb0>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d00d      	beq.n	800f7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	685a      	ldr	r2, [r3, #4]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	441a      	add	r2, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	601a      	str	r2, [r3, #0]
 800f7f4:	e008      	b.n	800f808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7f6:	4b0c      	ldr	r3, [pc, #48]	; (800f828 <prvInsertBlockIntoFreeList+0xb0>)
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	e003      	b.n	800f808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d002      	beq.n	800f816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f816:	bf00      	nop
 800f818:	3714      	adds	r7, #20
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	20007e48 	.word	0x20007e48
 800f828:	20007e50 	.word	0x20007e50

0800f82c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f830:	2200      	movs	r2, #0
 800f832:	4912      	ldr	r1, [pc, #72]	; (800f87c <MX_USB_DEVICE_Init+0x50>)
 800f834:	4812      	ldr	r0, [pc, #72]	; (800f880 <MX_USB_DEVICE_Init+0x54>)
 800f836:	f7fb fdbd 	bl	800b3b4 <USBD_Init>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d001      	beq.n	800f844 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f840:	f7f3 ff96 	bl	8003770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f844:	490f      	ldr	r1, [pc, #60]	; (800f884 <MX_USB_DEVICE_Init+0x58>)
 800f846:	480e      	ldr	r0, [pc, #56]	; (800f880 <MX_USB_DEVICE_Init+0x54>)
 800f848:	f7fb fde4 	bl	800b414 <USBD_RegisterClass>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f852:	f7f3 ff8d 	bl	8003770 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f856:	490c      	ldr	r1, [pc, #48]	; (800f888 <MX_USB_DEVICE_Init+0x5c>)
 800f858:	4809      	ldr	r0, [pc, #36]	; (800f880 <MX_USB_DEVICE_Init+0x54>)
 800f85a:	f7fb fcd5 	bl	800b208 <USBD_CDC_RegisterInterface>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d001      	beq.n	800f868 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f864:	f7f3 ff84 	bl	8003770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f868:	4805      	ldr	r0, [pc, #20]	; (800f880 <MX_USB_DEVICE_Init+0x54>)
 800f86a:	f7fb fe09 	bl	800b480 <USBD_Start>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d001      	beq.n	800f878 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f874:	f7f3 ff7c 	bl	8003770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f878:	bf00      	nop
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	20000660 	.word	0x20000660
 800f880:	20007e68 	.word	0x20007e68
 800f884:	200005c8 	.word	0x200005c8
 800f888:	2000064c 	.word	0x2000064c

0800f88c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f890:	2200      	movs	r2, #0
 800f892:	4905      	ldr	r1, [pc, #20]	; (800f8a8 <CDC_Init_FS+0x1c>)
 800f894:	4805      	ldr	r0, [pc, #20]	; (800f8ac <CDC_Init_FS+0x20>)
 800f896:	f7fb fcd1 	bl	800b23c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f89a:	4905      	ldr	r1, [pc, #20]	; (800f8b0 <CDC_Init_FS+0x24>)
 800f89c:	4803      	ldr	r0, [pc, #12]	; (800f8ac <CDC_Init_FS+0x20>)
 800f89e:	f7fb fcef 	bl	800b280 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f8a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	20008544 	.word	0x20008544
 800f8ac:	20007e68 	.word	0x20007e68
 800f8b0:	20008144 	.word	0x20008144

0800f8b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f8b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	6039      	str	r1, [r7, #0]
 800f8ce:	71fb      	strb	r3, [r7, #7]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	2b23      	cmp	r3, #35	; 0x23
 800f8d8:	d84a      	bhi.n	800f970 <CDC_Control_FS+0xac>
 800f8da:	a201      	add	r2, pc, #4	; (adr r2, 800f8e0 <CDC_Control_FS+0x1c>)
 800f8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e0:	0800f971 	.word	0x0800f971
 800f8e4:	0800f971 	.word	0x0800f971
 800f8e8:	0800f971 	.word	0x0800f971
 800f8ec:	0800f971 	.word	0x0800f971
 800f8f0:	0800f971 	.word	0x0800f971
 800f8f4:	0800f971 	.word	0x0800f971
 800f8f8:	0800f971 	.word	0x0800f971
 800f8fc:	0800f971 	.word	0x0800f971
 800f900:	0800f971 	.word	0x0800f971
 800f904:	0800f971 	.word	0x0800f971
 800f908:	0800f971 	.word	0x0800f971
 800f90c:	0800f971 	.word	0x0800f971
 800f910:	0800f971 	.word	0x0800f971
 800f914:	0800f971 	.word	0x0800f971
 800f918:	0800f971 	.word	0x0800f971
 800f91c:	0800f971 	.word	0x0800f971
 800f920:	0800f971 	.word	0x0800f971
 800f924:	0800f971 	.word	0x0800f971
 800f928:	0800f971 	.word	0x0800f971
 800f92c:	0800f971 	.word	0x0800f971
 800f930:	0800f971 	.word	0x0800f971
 800f934:	0800f971 	.word	0x0800f971
 800f938:	0800f971 	.word	0x0800f971
 800f93c:	0800f971 	.word	0x0800f971
 800f940:	0800f971 	.word	0x0800f971
 800f944:	0800f971 	.word	0x0800f971
 800f948:	0800f971 	.word	0x0800f971
 800f94c:	0800f971 	.word	0x0800f971
 800f950:	0800f971 	.word	0x0800f971
 800f954:	0800f971 	.word	0x0800f971
 800f958:	0800f971 	.word	0x0800f971
 800f95c:	0800f971 	.word	0x0800f971
 800f960:	0800f971 	.word	0x0800f971
 800f964:	0800f971 	.word	0x0800f971
 800f968:	0800f971 	.word	0x0800f971
 800f96c:	0800f971 	.word	0x0800f971
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f970:	bf00      	nop
  }

  return (USBD_OK);
 800f972:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f974:	4618      	mov	r0, r3
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f98a:	6879      	ldr	r1, [r7, #4]
 800f98c:	4805      	ldr	r0, [pc, #20]	; (800f9a4 <CDC_Receive_FS+0x24>)
 800f98e:	f7fb fc77 	bl	800b280 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f992:	4804      	ldr	r0, [pc, #16]	; (800f9a4 <CDC_Receive_FS+0x24>)
 800f994:	f7fb fcd8 	bl	800b348 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f998:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3708      	adds	r7, #8
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	20007e68 	.word	0x20007e68

0800f9a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f9b8:	4b0d      	ldr	r3, [pc, #52]	; (800f9f0 <CDC_Transmit_FS+0x48>)
 800f9ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d001      	beq.n	800f9ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e00b      	b.n	800f9e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f9ce:	887b      	ldrh	r3, [r7, #2]
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	6879      	ldr	r1, [r7, #4]
 800f9d4:	4806      	ldr	r0, [pc, #24]	; (800f9f0 <CDC_Transmit_FS+0x48>)
 800f9d6:	f7fb fc31 	bl	800b23c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f9da:	4805      	ldr	r0, [pc, #20]	; (800f9f0 <CDC_Transmit_FS+0x48>)
 800f9dc:	f7fb fc6e 	bl	800b2bc <USBD_CDC_TransmitPacket>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20007e68 	.word	0x20007e68

0800f9f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b087      	sub	sp, #28
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fa02:	2300      	movs	r3, #0
 800fa04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fa06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	371c      	adds	r7, #28
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr
	...

0800fa18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b083      	sub	sp, #12
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	4603      	mov	r3, r0
 800fa20:	6039      	str	r1, [r7, #0]
 800fa22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	2212      	movs	r2, #18
 800fa28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa2a:	4b03      	ldr	r3, [pc, #12]	; (800fa38 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr
 800fa38:	2000067c 	.word	0x2000067c

0800fa3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	4603      	mov	r3, r0
 800fa44:	6039      	str	r1, [r7, #0]
 800fa46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	2204      	movs	r2, #4
 800fa4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa4e:	4b03      	ldr	r3, [pc, #12]	; (800fa5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	20000690 	.word	0x20000690

0800fa60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	4603      	mov	r3, r0
 800fa68:	6039      	str	r1, [r7, #0]
 800fa6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa6c:	79fb      	ldrb	r3, [r7, #7]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d105      	bne.n	800fa7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa72:	683a      	ldr	r2, [r7, #0]
 800fa74:	4907      	ldr	r1, [pc, #28]	; (800fa94 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa76:	4808      	ldr	r0, [pc, #32]	; (800fa98 <USBD_FS_ProductStrDescriptor+0x38>)
 800fa78:	f7fc feae 	bl	800c7d8 <USBD_GetString>
 800fa7c:	e004      	b.n	800fa88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa7e:	683a      	ldr	r2, [r7, #0]
 800fa80:	4904      	ldr	r1, [pc, #16]	; (800fa94 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa82:	4805      	ldr	r0, [pc, #20]	; (800fa98 <USBD_FS_ProductStrDescriptor+0x38>)
 800fa84:	f7fc fea8 	bl	800c7d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa88:	4b02      	ldr	r3, [pc, #8]	; (800fa94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3708      	adds	r7, #8
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	20008944 	.word	0x20008944
 800fa98:	08011b28 	.word	0x08011b28

0800fa9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	4603      	mov	r3, r0
 800faa4:	6039      	str	r1, [r7, #0]
 800faa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800faa8:	683a      	ldr	r2, [r7, #0]
 800faaa:	4904      	ldr	r1, [pc, #16]	; (800fabc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800faac:	4804      	ldr	r0, [pc, #16]	; (800fac0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800faae:	f7fc fe93 	bl	800c7d8 <USBD_GetString>
  return USBD_StrDesc;
 800fab2:	4b02      	ldr	r3, [pc, #8]	; (800fabc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3708      	adds	r7, #8
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	20008944 	.word	0x20008944
 800fac0:	08011b40 	.word	0x08011b40

0800fac4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	4603      	mov	r3, r0
 800facc:	6039      	str	r1, [r7, #0]
 800face:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	221a      	movs	r2, #26
 800fad4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fad6:	f000 f843 	bl	800fb60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fada:	4b02      	ldr	r3, [pc, #8]	; (800fae4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	20000694 	.word	0x20000694

0800fae8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	4603      	mov	r3, r0
 800faf0:	6039      	str	r1, [r7, #0]
 800faf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800faf4:	79fb      	ldrb	r3, [r7, #7]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d105      	bne.n	800fb06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fafa:	683a      	ldr	r2, [r7, #0]
 800fafc:	4907      	ldr	r1, [pc, #28]	; (800fb1c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fafe:	4808      	ldr	r0, [pc, #32]	; (800fb20 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb00:	f7fc fe6a 	bl	800c7d8 <USBD_GetString>
 800fb04:	e004      	b.n	800fb10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb06:	683a      	ldr	r2, [r7, #0]
 800fb08:	4904      	ldr	r1, [pc, #16]	; (800fb1c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb0a:	4805      	ldr	r0, [pc, #20]	; (800fb20 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb0c:	f7fc fe64 	bl	800c7d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb10:	4b02      	ldr	r3, [pc, #8]	; (800fb1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20008944 	.word	0x20008944
 800fb20:	08011b54 	.word	0x08011b54

0800fb24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	6039      	str	r1, [r7, #0]
 800fb2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb30:	79fb      	ldrb	r3, [r7, #7]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d105      	bne.n	800fb42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	4907      	ldr	r1, [pc, #28]	; (800fb58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb3a:	4808      	ldr	r0, [pc, #32]	; (800fb5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb3c:	f7fc fe4c 	bl	800c7d8 <USBD_GetString>
 800fb40:	e004      	b.n	800fb4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb42:	683a      	ldr	r2, [r7, #0]
 800fb44:	4904      	ldr	r1, [pc, #16]	; (800fb58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb46:	4805      	ldr	r0, [pc, #20]	; (800fb5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb48:	f7fc fe46 	bl	800c7d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb4c:	4b02      	ldr	r3, [pc, #8]	; (800fb58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3708      	adds	r7, #8
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	20008944 	.word	0x20008944
 800fb5c:	08011b60 	.word	0x08011b60

0800fb60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb66:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <Get_SerialNum+0x44>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb6c:	4b0e      	ldr	r3, [pc, #56]	; (800fba8 <Get_SerialNum+0x48>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fb72:	4b0e      	ldr	r3, [pc, #56]	; (800fbac <Get_SerialNum+0x4c>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d009      	beq.n	800fb9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fb86:	2208      	movs	r2, #8
 800fb88:	4909      	ldr	r1, [pc, #36]	; (800fbb0 <Get_SerialNum+0x50>)
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f000 f814 	bl	800fbb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fb90:	2204      	movs	r2, #4
 800fb92:	4908      	ldr	r1, [pc, #32]	; (800fbb4 <Get_SerialNum+0x54>)
 800fb94:	68b8      	ldr	r0, [r7, #8]
 800fb96:	f000 f80f 	bl	800fbb8 <IntToUnicode>
  }
}
 800fb9a:	bf00      	nop
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	1fff7a10 	.word	0x1fff7a10
 800fba8:	1fff7a14 	.word	0x1fff7a14
 800fbac:	1fff7a18 	.word	0x1fff7a18
 800fbb0:	20000696 	.word	0x20000696
 800fbb4:	200006a6 	.word	0x200006a6

0800fbb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b087      	sub	sp, #28
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fbca:	2300      	movs	r3, #0
 800fbcc:	75fb      	strb	r3, [r7, #23]
 800fbce:	e027      	b.n	800fc20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	0f1b      	lsrs	r3, r3, #28
 800fbd4:	2b09      	cmp	r3, #9
 800fbd6:	d80b      	bhi.n	800fbf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	0f1b      	lsrs	r3, r3, #28
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	7dfb      	ldrb	r3, [r7, #23]
 800fbe0:	005b      	lsls	r3, r3, #1
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	440b      	add	r3, r1
 800fbe8:	3230      	adds	r2, #48	; 0x30
 800fbea:	b2d2      	uxtb	r2, r2
 800fbec:	701a      	strb	r2, [r3, #0]
 800fbee:	e00a      	b.n	800fc06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	0f1b      	lsrs	r3, r3, #28
 800fbf4:	b2da      	uxtb	r2, r3
 800fbf6:	7dfb      	ldrb	r3, [r7, #23]
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	440b      	add	r3, r1
 800fc00:	3237      	adds	r2, #55	; 0x37
 800fc02:	b2d2      	uxtb	r2, r2
 800fc04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	011b      	lsls	r3, r3, #4
 800fc0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc0c:	7dfb      	ldrb	r3, [r7, #23]
 800fc0e:	005b      	lsls	r3, r3, #1
 800fc10:	3301      	adds	r3, #1
 800fc12:	68ba      	ldr	r2, [r7, #8]
 800fc14:	4413      	add	r3, r2
 800fc16:	2200      	movs	r2, #0
 800fc18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc1a:	7dfb      	ldrb	r3, [r7, #23]
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	75fb      	strb	r3, [r7, #23]
 800fc20:	7dfa      	ldrb	r2, [r7, #23]
 800fc22:	79fb      	ldrb	r3, [r7, #7]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d3d3      	bcc.n	800fbd0 <IntToUnicode+0x18>
  }
}
 800fc28:	bf00      	nop
 800fc2a:	bf00      	nop
 800fc2c:	371c      	adds	r7, #28
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
	...

0800fc38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b08a      	sub	sp, #40	; 0x28
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc40:	f107 0314 	add.w	r3, r7, #20
 800fc44:	2200      	movs	r2, #0
 800fc46:	601a      	str	r2, [r3, #0]
 800fc48:	605a      	str	r2, [r3, #4]
 800fc4a:	609a      	str	r2, [r3, #8]
 800fc4c:	60da      	str	r2, [r3, #12]
 800fc4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc58:	d13a      	bne.n	800fcd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	613b      	str	r3, [r7, #16]
 800fc5e:	4b1e      	ldr	r3, [pc, #120]	; (800fcd8 <HAL_PCD_MspInit+0xa0>)
 800fc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc62:	4a1d      	ldr	r2, [pc, #116]	; (800fcd8 <HAL_PCD_MspInit+0xa0>)
 800fc64:	f043 0301 	orr.w	r3, r3, #1
 800fc68:	6313      	str	r3, [r2, #48]	; 0x30
 800fc6a:	4b1b      	ldr	r3, [pc, #108]	; (800fcd8 <HAL_PCD_MspInit+0xa0>)
 800fc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc6e:	f003 0301 	and.w	r3, r3, #1
 800fc72:	613b      	str	r3, [r7, #16]
 800fc74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fc76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fc7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc7c:	2302      	movs	r3, #2
 800fc7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc80:	2300      	movs	r3, #0
 800fc82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc84:	2303      	movs	r3, #3
 800fc86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fc88:	230a      	movs	r3, #10
 800fc8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc8c:	f107 0314 	add.w	r3, r7, #20
 800fc90:	4619      	mov	r1, r3
 800fc92:	4812      	ldr	r0, [pc, #72]	; (800fcdc <HAL_PCD_MspInit+0xa4>)
 800fc94:	f7f4 fcd0 	bl	8004638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc98:	4b0f      	ldr	r3, [pc, #60]	; (800fcd8 <HAL_PCD_MspInit+0xa0>)
 800fc9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc9c:	4a0e      	ldr	r2, [pc, #56]	; (800fcd8 <HAL_PCD_MspInit+0xa0>)
 800fc9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fca2:	6353      	str	r3, [r2, #52]	; 0x34
 800fca4:	2300      	movs	r3, #0
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	4b0b      	ldr	r3, [pc, #44]	; (800fcd8 <HAL_PCD_MspInit+0xa0>)
 800fcaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcac:	4a0a      	ldr	r2, [pc, #40]	; (800fcd8 <HAL_PCD_MspInit+0xa0>)
 800fcae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fcb2:	6453      	str	r3, [r2, #68]	; 0x44
 800fcb4:	4b08      	ldr	r3, [pc, #32]	; (800fcd8 <HAL_PCD_MspInit+0xa0>)
 800fcb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fcbc:	60fb      	str	r3, [r7, #12]
 800fcbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	2105      	movs	r1, #5
 800fcc4:	2043      	movs	r0, #67	; 0x43
 800fcc6:	f7f4 fc8d 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fcca:	2043      	movs	r0, #67	; 0x43
 800fccc:	f7f4 fca6 	bl	800461c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fcd0:	bf00      	nop
 800fcd2:	3728      	adds	r7, #40	; 0x28
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	40023800 	.word	0x40023800
 800fcdc:	40020000 	.word	0x40020000

0800fce0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	4610      	mov	r0, r2
 800fcf8:	f7fb fc0f 	bl	800b51a <USBD_LL_SetupStage>
}
 800fcfc:	bf00      	nop
 800fcfe:	3708      	adds	r7, #8
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fd16:	78fa      	ldrb	r2, [r7, #3]
 800fd18:	6879      	ldr	r1, [r7, #4]
 800fd1a:	4613      	mov	r3, r2
 800fd1c:	00db      	lsls	r3, r3, #3
 800fd1e:	4413      	add	r3, r2
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	440b      	add	r3, r1
 800fd24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	78fb      	ldrb	r3, [r7, #3]
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	f7fb fc49 	bl	800b5c4 <USBD_LL_DataOutStage>
}
 800fd32:	bf00      	nop
 800fd34:	3708      	adds	r7, #8
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}

0800fd3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd3a:	b580      	push	{r7, lr}
 800fd3c:	b082      	sub	sp, #8
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
 800fd42:	460b      	mov	r3, r1
 800fd44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fd4c:	78fa      	ldrb	r2, [r7, #3]
 800fd4e:	6879      	ldr	r1, [r7, #4]
 800fd50:	4613      	mov	r3, r2
 800fd52:	00db      	lsls	r3, r3, #3
 800fd54:	4413      	add	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	440b      	add	r3, r1
 800fd5a:	334c      	adds	r3, #76	; 0x4c
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	78fb      	ldrb	r3, [r7, #3]
 800fd60:	4619      	mov	r1, r3
 800fd62:	f7fb fce2 	bl	800b72a <USBD_LL_DataInStage>
}
 800fd66:	bf00      	nop
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b082      	sub	sp, #8
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fb fe16 	bl	800b9ae <USBD_LL_SOF>
}
 800fd82:	bf00      	nop
 800fd84:	3708      	adds	r7, #8
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fd92:	2301      	movs	r3, #1
 800fd94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	2b02      	cmp	r3, #2
 800fd9c:	d001      	beq.n	800fda2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fd9e:	f7f3 fce7 	bl	8003770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fda8:	7bfa      	ldrb	r2, [r7, #15]
 800fdaa:	4611      	mov	r1, r2
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fb fdc0 	bl	800b932 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fb fd68 	bl	800b88e <USBD_LL_Reset>
}
 800fdbe:	bf00      	nop
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
	...

0800fdc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fb fdbb 	bl	800b952 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	6812      	ldr	r2, [r2, #0]
 800fdea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fdee:	f043 0301 	orr.w	r3, r3, #1
 800fdf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6a1b      	ldr	r3, [r3, #32]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d005      	beq.n	800fe08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fdfc:	4b04      	ldr	r3, [pc, #16]	; (800fe10 <HAL_PCD_SuspendCallback+0x48>)
 800fdfe:	691b      	ldr	r3, [r3, #16]
 800fe00:	4a03      	ldr	r2, [pc, #12]	; (800fe10 <HAL_PCD_SuspendCallback+0x48>)
 800fe02:	f043 0306 	orr.w	r3, r3, #6
 800fe06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe08:	bf00      	nop
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	e000ed00 	.word	0xe000ed00

0800fe14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fb fdab 	bl	800b97e <USBD_LL_Resume>
}
 800fe28:	bf00      	nop
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe42:	78fa      	ldrb	r2, [r7, #3]
 800fe44:	4611      	mov	r1, r2
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fb fe03 	bl	800ba52 <USBD_LL_IsoOUTIncomplete>
}
 800fe4c:	bf00      	nop
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe66:	78fa      	ldrb	r2, [r7, #3]
 800fe68:	4611      	mov	r1, r2
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fb fdbf 	bl	800b9ee <USBD_LL_IsoINIncomplete>
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fb fe15 	bl	800bab6 <USBD_LL_DevConnected>
}
 800fe8c:	bf00      	nop
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fb fe12 	bl	800bacc <USBD_LL_DevDisconnected>
}
 800fea8:	bf00      	nop
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d13c      	bne.n	800ff3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fec0:	4a20      	ldr	r2, [pc, #128]	; (800ff44 <USBD_LL_Init+0x94>)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4a1e      	ldr	r2, [pc, #120]	; (800ff44 <USBD_LL_Init+0x94>)
 800fecc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fed0:	4b1c      	ldr	r3, [pc, #112]	; (800ff44 <USBD_LL_Init+0x94>)
 800fed2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fed6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fed8:	4b1a      	ldr	r3, [pc, #104]	; (800ff44 <USBD_LL_Init+0x94>)
 800feda:	2204      	movs	r2, #4
 800fedc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fede:	4b19      	ldr	r3, [pc, #100]	; (800ff44 <USBD_LL_Init+0x94>)
 800fee0:	2202      	movs	r2, #2
 800fee2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fee4:	4b17      	ldr	r3, [pc, #92]	; (800ff44 <USBD_LL_Init+0x94>)
 800fee6:	2200      	movs	r2, #0
 800fee8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800feea:	4b16      	ldr	r3, [pc, #88]	; (800ff44 <USBD_LL_Init+0x94>)
 800feec:	2202      	movs	r2, #2
 800feee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fef0:	4b14      	ldr	r3, [pc, #80]	; (800ff44 <USBD_LL_Init+0x94>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fef6:	4b13      	ldr	r3, [pc, #76]	; (800ff44 <USBD_LL_Init+0x94>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fefc:	4b11      	ldr	r3, [pc, #68]	; (800ff44 <USBD_LL_Init+0x94>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff02:	4b10      	ldr	r3, [pc, #64]	; (800ff44 <USBD_LL_Init+0x94>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff08:	4b0e      	ldr	r3, [pc, #56]	; (800ff44 <USBD_LL_Init+0x94>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff0e:	480d      	ldr	r0, [pc, #52]	; (800ff44 <USBD_LL_Init+0x94>)
 800ff10:	f7f5 fd1f 	bl	8005952 <HAL_PCD_Init>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d001      	beq.n	800ff1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ff1a:	f7f3 fc29 	bl	8003770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ff1e:	2180      	movs	r1, #128	; 0x80
 800ff20:	4808      	ldr	r0, [pc, #32]	; (800ff44 <USBD_LL_Init+0x94>)
 800ff22:	f7f6 ff76 	bl	8006e12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ff26:	2240      	movs	r2, #64	; 0x40
 800ff28:	2100      	movs	r1, #0
 800ff2a:	4806      	ldr	r0, [pc, #24]	; (800ff44 <USBD_LL_Init+0x94>)
 800ff2c:	f7f6 ff2a 	bl	8006d84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ff30:	2280      	movs	r2, #128	; 0x80
 800ff32:	2101      	movs	r1, #1
 800ff34:	4803      	ldr	r0, [pc, #12]	; (800ff44 <USBD_LL_Init+0x94>)
 800ff36:	f7f6 ff25 	bl	8006d84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	20008b44 	.word	0x20008b44

0800ff48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff50:	2300      	movs	r3, #0
 800ff52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff54:	2300      	movs	r3, #0
 800ff56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7f5 fe14 	bl	8005b8c <HAL_PCD_Start>
 800ff64:	4603      	mov	r3, r0
 800ff66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f000 f942 	bl	80101f4 <USBD_Get_USB_Status>
 800ff70:	4603      	mov	r3, r0
 800ff72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b084      	sub	sp, #16
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	4608      	mov	r0, r1
 800ff88:	4611      	mov	r1, r2
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	70fb      	strb	r3, [r7, #3]
 800ff90:	460b      	mov	r3, r1
 800ff92:	70bb      	strb	r3, [r7, #2]
 800ff94:	4613      	mov	r3, r2
 800ff96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ffa6:	78bb      	ldrb	r3, [r7, #2]
 800ffa8:	883a      	ldrh	r2, [r7, #0]
 800ffaa:	78f9      	ldrb	r1, [r7, #3]
 800ffac:	f7f6 fae5 	bl	800657a <HAL_PCD_EP_Open>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f000 f91c 	bl	80101f4 <USBD_Get_USB_Status>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffe4:	78fa      	ldrb	r2, [r7, #3]
 800ffe6:	4611      	mov	r1, r2
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7f6 fb2e 	bl	800664a <HAL_PCD_EP_Close>
 800ffee:	4603      	mov	r3, r0
 800fff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fff2:	7bfb      	ldrb	r3, [r7, #15]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f000 f8fd 	bl	80101f4 <USBD_Get_USB_Status>
 800fffa:	4603      	mov	r3, r0
 800fffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010000:	4618      	mov	r0, r3
 8010002:	3710      	adds	r7, #16
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	460b      	mov	r3, r1
 8010012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010014:	2300      	movs	r3, #0
 8010016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010022:	78fa      	ldrb	r2, [r7, #3]
 8010024:	4611      	mov	r1, r2
 8010026:	4618      	mov	r0, r3
 8010028:	f7f6 fc06 	bl	8006838 <HAL_PCD_EP_SetStall>
 801002c:	4603      	mov	r3, r0
 801002e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010030:	7bfb      	ldrb	r3, [r7, #15]
 8010032:	4618      	mov	r0, r3
 8010034:	f000 f8de 	bl	80101f4 <USBD_Get_USB_Status>
 8010038:	4603      	mov	r3, r0
 801003a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801003c:	7bbb      	ldrb	r3, [r7, #14]
}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b084      	sub	sp, #16
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
 801004e:	460b      	mov	r3, r1
 8010050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010052:	2300      	movs	r3, #0
 8010054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010060:	78fa      	ldrb	r2, [r7, #3]
 8010062:	4611      	mov	r1, r2
 8010064:	4618      	mov	r0, r3
 8010066:	f7f6 fc4b 	bl	8006900 <HAL_PCD_EP_ClrStall>
 801006a:	4603      	mov	r3, r0
 801006c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801006e:	7bfb      	ldrb	r3, [r7, #15]
 8010070:	4618      	mov	r0, r3
 8010072:	f000 f8bf 	bl	80101f4 <USBD_Get_USB_Status>
 8010076:	4603      	mov	r3, r0
 8010078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801007a:	7bbb      	ldrb	r3, [r7, #14]
}
 801007c:	4618      	mov	r0, r3
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	460b      	mov	r3, r1
 801008e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010096:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801009c:	2b00      	cmp	r3, #0
 801009e:	da0b      	bge.n	80100b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80100a0:	78fb      	ldrb	r3, [r7, #3]
 80100a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80100a6:	68f9      	ldr	r1, [r7, #12]
 80100a8:	4613      	mov	r3, r2
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	4413      	add	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	440b      	add	r3, r1
 80100b2:	333e      	adds	r3, #62	; 0x3e
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	e00b      	b.n	80100d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80100b8:	78fb      	ldrb	r3, [r7, #3]
 80100ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80100be:	68f9      	ldr	r1, [r7, #12]
 80100c0:	4613      	mov	r3, r2
 80100c2:	00db      	lsls	r3, r3, #3
 80100c4:	4413      	add	r3, r2
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	440b      	add	r3, r1
 80100ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80100ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	460b      	mov	r3, r1
 80100e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100e8:	2300      	movs	r3, #0
 80100ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100f6:	78fa      	ldrb	r2, [r7, #3]
 80100f8:	4611      	mov	r1, r2
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7f6 fa18 	bl	8006530 <HAL_PCD_SetAddress>
 8010100:	4603      	mov	r3, r0
 8010102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010104:	7bfb      	ldrb	r3, [r7, #15]
 8010106:	4618      	mov	r0, r3
 8010108:	f000 f874 	bl	80101f4 <USBD_Get_USB_Status>
 801010c:	4603      	mov	r3, r0
 801010e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010110:	7bbb      	ldrb	r3, [r7, #14]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b086      	sub	sp, #24
 801011e:	af00      	add	r7, sp, #0
 8010120:	60f8      	str	r0, [r7, #12]
 8010122:	607a      	str	r2, [r7, #4]
 8010124:	603b      	str	r3, [r7, #0]
 8010126:	460b      	mov	r3, r1
 8010128:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801012a:	2300      	movs	r3, #0
 801012c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801012e:	2300      	movs	r3, #0
 8010130:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010138:	7af9      	ldrb	r1, [r7, #11]
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	f7f6 fb31 	bl	80067a4 <HAL_PCD_EP_Transmit>
 8010142:	4603      	mov	r3, r0
 8010144:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010146:	7dfb      	ldrb	r3, [r7, #23]
 8010148:	4618      	mov	r0, r3
 801014a:	f000 f853 	bl	80101f4 <USBD_Get_USB_Status>
 801014e:	4603      	mov	r3, r0
 8010150:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010152:	7dbb      	ldrb	r3, [r7, #22]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3718      	adds	r7, #24
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b086      	sub	sp, #24
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	607a      	str	r2, [r7, #4]
 8010166:	603b      	str	r3, [r7, #0]
 8010168:	460b      	mov	r3, r1
 801016a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801016c:	2300      	movs	r3, #0
 801016e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010170:	2300      	movs	r3, #0
 8010172:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801017a:	7af9      	ldrb	r1, [r7, #11]
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	f7f6 faad 	bl	80066de <HAL_PCD_EP_Receive>
 8010184:	4603      	mov	r3, r0
 8010186:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010188:	7dfb      	ldrb	r3, [r7, #23]
 801018a:	4618      	mov	r0, r3
 801018c:	f000 f832 	bl	80101f4 <USBD_Get_USB_Status>
 8010190:	4603      	mov	r3, r0
 8010192:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010194:	7dbb      	ldrb	r3, [r7, #22]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3718      	adds	r7, #24
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b082      	sub	sp, #8
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	460b      	mov	r3, r1
 80101a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80101b0:	78fa      	ldrb	r2, [r7, #3]
 80101b2:	4611      	mov	r1, r2
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7f6 fadd 	bl	8006774 <HAL_PCD_EP_GetRxCount>
 80101ba:	4603      	mov	r3, r0
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3708      	adds	r7, #8
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80101cc:	4b03      	ldr	r3, [pc, #12]	; (80101dc <USBD_static_malloc+0x18>)
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	20009050 	.word	0x20009050

080101e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]

}
 80101e8:	bf00      	nop
 80101ea:	370c      	adds	r7, #12
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr

080101f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b085      	sub	sp, #20
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	4603      	mov	r3, r0
 80101fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101fe:	2300      	movs	r3, #0
 8010200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	2b03      	cmp	r3, #3
 8010206:	d817      	bhi.n	8010238 <USBD_Get_USB_Status+0x44>
 8010208:	a201      	add	r2, pc, #4	; (adr r2, 8010210 <USBD_Get_USB_Status+0x1c>)
 801020a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801020e:	bf00      	nop
 8010210:	08010221 	.word	0x08010221
 8010214:	08010227 	.word	0x08010227
 8010218:	0801022d 	.word	0x0801022d
 801021c:	08010233 	.word	0x08010233
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010220:	2300      	movs	r3, #0
 8010222:	73fb      	strb	r3, [r7, #15]
    break;
 8010224:	e00b      	b.n	801023e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010226:	2303      	movs	r3, #3
 8010228:	73fb      	strb	r3, [r7, #15]
    break;
 801022a:	e008      	b.n	801023e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801022c:	2301      	movs	r3, #1
 801022e:	73fb      	strb	r3, [r7, #15]
    break;
 8010230:	e005      	b.n	801023e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010232:	2303      	movs	r3, #3
 8010234:	73fb      	strb	r3, [r7, #15]
    break;
 8010236:	e002      	b.n	801023e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010238:	2303      	movs	r3, #3
 801023a:	73fb      	strb	r3, [r7, #15]
    break;
 801023c:	bf00      	nop
  }
  return usb_status;
 801023e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010240:	4618      	mov	r0, r3
 8010242:	3714      	adds	r7, #20
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <__errno>:
 801024c:	4b01      	ldr	r3, [pc, #4]	; (8010254 <__errno+0x8>)
 801024e:	6818      	ldr	r0, [r3, #0]
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop
 8010254:	200006b0 	.word	0x200006b0

08010258 <__libc_init_array>:
 8010258:	b570      	push	{r4, r5, r6, lr}
 801025a:	4d0d      	ldr	r5, [pc, #52]	; (8010290 <__libc_init_array+0x38>)
 801025c:	4c0d      	ldr	r4, [pc, #52]	; (8010294 <__libc_init_array+0x3c>)
 801025e:	1b64      	subs	r4, r4, r5
 8010260:	10a4      	asrs	r4, r4, #2
 8010262:	2600      	movs	r6, #0
 8010264:	42a6      	cmp	r6, r4
 8010266:	d109      	bne.n	801027c <__libc_init_array+0x24>
 8010268:	4d0b      	ldr	r5, [pc, #44]	; (8010298 <__libc_init_array+0x40>)
 801026a:	4c0c      	ldr	r4, [pc, #48]	; (801029c <__libc_init_array+0x44>)
 801026c:	f001 fa32 	bl	80116d4 <_init>
 8010270:	1b64      	subs	r4, r4, r5
 8010272:	10a4      	asrs	r4, r4, #2
 8010274:	2600      	movs	r6, #0
 8010276:	42a6      	cmp	r6, r4
 8010278:	d105      	bne.n	8010286 <__libc_init_array+0x2e>
 801027a:	bd70      	pop	{r4, r5, r6, pc}
 801027c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010280:	4798      	blx	r3
 8010282:	3601      	adds	r6, #1
 8010284:	e7ee      	b.n	8010264 <__libc_init_array+0xc>
 8010286:	f855 3b04 	ldr.w	r3, [r5], #4
 801028a:	4798      	blx	r3
 801028c:	3601      	adds	r6, #1
 801028e:	e7f2      	b.n	8010276 <__libc_init_array+0x1e>
 8010290:	080121a0 	.word	0x080121a0
 8010294:	080121a0 	.word	0x080121a0
 8010298:	080121a0 	.word	0x080121a0
 801029c:	080121a4 	.word	0x080121a4

080102a0 <malloc>:
 80102a0:	4b02      	ldr	r3, [pc, #8]	; (80102ac <malloc+0xc>)
 80102a2:	4601      	mov	r1, r0
 80102a4:	6818      	ldr	r0, [r3, #0]
 80102a6:	f000 b88d 	b.w	80103c4 <_malloc_r>
 80102aa:	bf00      	nop
 80102ac:	200006b0 	.word	0x200006b0

080102b0 <free>:
 80102b0:	4b02      	ldr	r3, [pc, #8]	; (80102bc <free+0xc>)
 80102b2:	4601      	mov	r1, r0
 80102b4:	6818      	ldr	r0, [r3, #0]
 80102b6:	f000 b819 	b.w	80102ec <_free_r>
 80102ba:	bf00      	nop
 80102bc:	200006b0 	.word	0x200006b0

080102c0 <memcpy>:
 80102c0:	440a      	add	r2, r1
 80102c2:	4291      	cmp	r1, r2
 80102c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80102c8:	d100      	bne.n	80102cc <memcpy+0xc>
 80102ca:	4770      	bx	lr
 80102cc:	b510      	push	{r4, lr}
 80102ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102d6:	4291      	cmp	r1, r2
 80102d8:	d1f9      	bne.n	80102ce <memcpy+0xe>
 80102da:	bd10      	pop	{r4, pc}

080102dc <memset>:
 80102dc:	4402      	add	r2, r0
 80102de:	4603      	mov	r3, r0
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d100      	bne.n	80102e6 <memset+0xa>
 80102e4:	4770      	bx	lr
 80102e6:	f803 1b01 	strb.w	r1, [r3], #1
 80102ea:	e7f9      	b.n	80102e0 <memset+0x4>

080102ec <_free_r>:
 80102ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ee:	2900      	cmp	r1, #0
 80102f0:	d044      	beq.n	801037c <_free_r+0x90>
 80102f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102f6:	9001      	str	r0, [sp, #4]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f1a1 0404 	sub.w	r4, r1, #4
 80102fe:	bfb8      	it	lt
 8010300:	18e4      	addlt	r4, r4, r3
 8010302:	f000 fc95 	bl	8010c30 <__malloc_lock>
 8010306:	4a1e      	ldr	r2, [pc, #120]	; (8010380 <_free_r+0x94>)
 8010308:	9801      	ldr	r0, [sp, #4]
 801030a:	6813      	ldr	r3, [r2, #0]
 801030c:	b933      	cbnz	r3, 801031c <_free_r+0x30>
 801030e:	6063      	str	r3, [r4, #4]
 8010310:	6014      	str	r4, [r2, #0]
 8010312:	b003      	add	sp, #12
 8010314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010318:	f000 bc90 	b.w	8010c3c <__malloc_unlock>
 801031c:	42a3      	cmp	r3, r4
 801031e:	d908      	bls.n	8010332 <_free_r+0x46>
 8010320:	6825      	ldr	r5, [r4, #0]
 8010322:	1961      	adds	r1, r4, r5
 8010324:	428b      	cmp	r3, r1
 8010326:	bf01      	itttt	eq
 8010328:	6819      	ldreq	r1, [r3, #0]
 801032a:	685b      	ldreq	r3, [r3, #4]
 801032c:	1949      	addeq	r1, r1, r5
 801032e:	6021      	streq	r1, [r4, #0]
 8010330:	e7ed      	b.n	801030e <_free_r+0x22>
 8010332:	461a      	mov	r2, r3
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	b10b      	cbz	r3, 801033c <_free_r+0x50>
 8010338:	42a3      	cmp	r3, r4
 801033a:	d9fa      	bls.n	8010332 <_free_r+0x46>
 801033c:	6811      	ldr	r1, [r2, #0]
 801033e:	1855      	adds	r5, r2, r1
 8010340:	42a5      	cmp	r5, r4
 8010342:	d10b      	bne.n	801035c <_free_r+0x70>
 8010344:	6824      	ldr	r4, [r4, #0]
 8010346:	4421      	add	r1, r4
 8010348:	1854      	adds	r4, r2, r1
 801034a:	42a3      	cmp	r3, r4
 801034c:	6011      	str	r1, [r2, #0]
 801034e:	d1e0      	bne.n	8010312 <_free_r+0x26>
 8010350:	681c      	ldr	r4, [r3, #0]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	6053      	str	r3, [r2, #4]
 8010356:	4421      	add	r1, r4
 8010358:	6011      	str	r1, [r2, #0]
 801035a:	e7da      	b.n	8010312 <_free_r+0x26>
 801035c:	d902      	bls.n	8010364 <_free_r+0x78>
 801035e:	230c      	movs	r3, #12
 8010360:	6003      	str	r3, [r0, #0]
 8010362:	e7d6      	b.n	8010312 <_free_r+0x26>
 8010364:	6825      	ldr	r5, [r4, #0]
 8010366:	1961      	adds	r1, r4, r5
 8010368:	428b      	cmp	r3, r1
 801036a:	bf04      	itt	eq
 801036c:	6819      	ldreq	r1, [r3, #0]
 801036e:	685b      	ldreq	r3, [r3, #4]
 8010370:	6063      	str	r3, [r4, #4]
 8010372:	bf04      	itt	eq
 8010374:	1949      	addeq	r1, r1, r5
 8010376:	6021      	streq	r1, [r4, #0]
 8010378:	6054      	str	r4, [r2, #4]
 801037a:	e7ca      	b.n	8010312 <_free_r+0x26>
 801037c:	b003      	add	sp, #12
 801037e:	bd30      	pop	{r4, r5, pc}
 8010380:	20009270 	.word	0x20009270

08010384 <sbrk_aligned>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	4e0e      	ldr	r6, [pc, #56]	; (80103c0 <sbrk_aligned+0x3c>)
 8010388:	460c      	mov	r4, r1
 801038a:	6831      	ldr	r1, [r6, #0]
 801038c:	4605      	mov	r5, r0
 801038e:	b911      	cbnz	r1, 8010396 <sbrk_aligned+0x12>
 8010390:	f000 f922 	bl	80105d8 <_sbrk_r>
 8010394:	6030      	str	r0, [r6, #0]
 8010396:	4621      	mov	r1, r4
 8010398:	4628      	mov	r0, r5
 801039a:	f000 f91d 	bl	80105d8 <_sbrk_r>
 801039e:	1c43      	adds	r3, r0, #1
 80103a0:	d00a      	beq.n	80103b8 <sbrk_aligned+0x34>
 80103a2:	1cc4      	adds	r4, r0, #3
 80103a4:	f024 0403 	bic.w	r4, r4, #3
 80103a8:	42a0      	cmp	r0, r4
 80103aa:	d007      	beq.n	80103bc <sbrk_aligned+0x38>
 80103ac:	1a21      	subs	r1, r4, r0
 80103ae:	4628      	mov	r0, r5
 80103b0:	f000 f912 	bl	80105d8 <_sbrk_r>
 80103b4:	3001      	adds	r0, #1
 80103b6:	d101      	bne.n	80103bc <sbrk_aligned+0x38>
 80103b8:	f04f 34ff 	mov.w	r4, #4294967295
 80103bc:	4620      	mov	r0, r4
 80103be:	bd70      	pop	{r4, r5, r6, pc}
 80103c0:	20009274 	.word	0x20009274

080103c4 <_malloc_r>:
 80103c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c8:	1ccd      	adds	r5, r1, #3
 80103ca:	f025 0503 	bic.w	r5, r5, #3
 80103ce:	3508      	adds	r5, #8
 80103d0:	2d0c      	cmp	r5, #12
 80103d2:	bf38      	it	cc
 80103d4:	250c      	movcc	r5, #12
 80103d6:	2d00      	cmp	r5, #0
 80103d8:	4607      	mov	r7, r0
 80103da:	db01      	blt.n	80103e0 <_malloc_r+0x1c>
 80103dc:	42a9      	cmp	r1, r5
 80103de:	d905      	bls.n	80103ec <_malloc_r+0x28>
 80103e0:	230c      	movs	r3, #12
 80103e2:	603b      	str	r3, [r7, #0]
 80103e4:	2600      	movs	r6, #0
 80103e6:	4630      	mov	r0, r6
 80103e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ec:	4e2e      	ldr	r6, [pc, #184]	; (80104a8 <_malloc_r+0xe4>)
 80103ee:	f000 fc1f 	bl	8010c30 <__malloc_lock>
 80103f2:	6833      	ldr	r3, [r6, #0]
 80103f4:	461c      	mov	r4, r3
 80103f6:	bb34      	cbnz	r4, 8010446 <_malloc_r+0x82>
 80103f8:	4629      	mov	r1, r5
 80103fa:	4638      	mov	r0, r7
 80103fc:	f7ff ffc2 	bl	8010384 <sbrk_aligned>
 8010400:	1c43      	adds	r3, r0, #1
 8010402:	4604      	mov	r4, r0
 8010404:	d14d      	bne.n	80104a2 <_malloc_r+0xde>
 8010406:	6834      	ldr	r4, [r6, #0]
 8010408:	4626      	mov	r6, r4
 801040a:	2e00      	cmp	r6, #0
 801040c:	d140      	bne.n	8010490 <_malloc_r+0xcc>
 801040e:	6823      	ldr	r3, [r4, #0]
 8010410:	4631      	mov	r1, r6
 8010412:	4638      	mov	r0, r7
 8010414:	eb04 0803 	add.w	r8, r4, r3
 8010418:	f000 f8de 	bl	80105d8 <_sbrk_r>
 801041c:	4580      	cmp	r8, r0
 801041e:	d13a      	bne.n	8010496 <_malloc_r+0xd2>
 8010420:	6821      	ldr	r1, [r4, #0]
 8010422:	3503      	adds	r5, #3
 8010424:	1a6d      	subs	r5, r5, r1
 8010426:	f025 0503 	bic.w	r5, r5, #3
 801042a:	3508      	adds	r5, #8
 801042c:	2d0c      	cmp	r5, #12
 801042e:	bf38      	it	cc
 8010430:	250c      	movcc	r5, #12
 8010432:	4629      	mov	r1, r5
 8010434:	4638      	mov	r0, r7
 8010436:	f7ff ffa5 	bl	8010384 <sbrk_aligned>
 801043a:	3001      	adds	r0, #1
 801043c:	d02b      	beq.n	8010496 <_malloc_r+0xd2>
 801043e:	6823      	ldr	r3, [r4, #0]
 8010440:	442b      	add	r3, r5
 8010442:	6023      	str	r3, [r4, #0]
 8010444:	e00e      	b.n	8010464 <_malloc_r+0xa0>
 8010446:	6822      	ldr	r2, [r4, #0]
 8010448:	1b52      	subs	r2, r2, r5
 801044a:	d41e      	bmi.n	801048a <_malloc_r+0xc6>
 801044c:	2a0b      	cmp	r2, #11
 801044e:	d916      	bls.n	801047e <_malloc_r+0xba>
 8010450:	1961      	adds	r1, r4, r5
 8010452:	42a3      	cmp	r3, r4
 8010454:	6025      	str	r5, [r4, #0]
 8010456:	bf18      	it	ne
 8010458:	6059      	strne	r1, [r3, #4]
 801045a:	6863      	ldr	r3, [r4, #4]
 801045c:	bf08      	it	eq
 801045e:	6031      	streq	r1, [r6, #0]
 8010460:	5162      	str	r2, [r4, r5]
 8010462:	604b      	str	r3, [r1, #4]
 8010464:	4638      	mov	r0, r7
 8010466:	f104 060b 	add.w	r6, r4, #11
 801046a:	f000 fbe7 	bl	8010c3c <__malloc_unlock>
 801046e:	f026 0607 	bic.w	r6, r6, #7
 8010472:	1d23      	adds	r3, r4, #4
 8010474:	1af2      	subs	r2, r6, r3
 8010476:	d0b6      	beq.n	80103e6 <_malloc_r+0x22>
 8010478:	1b9b      	subs	r3, r3, r6
 801047a:	50a3      	str	r3, [r4, r2]
 801047c:	e7b3      	b.n	80103e6 <_malloc_r+0x22>
 801047e:	6862      	ldr	r2, [r4, #4]
 8010480:	42a3      	cmp	r3, r4
 8010482:	bf0c      	ite	eq
 8010484:	6032      	streq	r2, [r6, #0]
 8010486:	605a      	strne	r2, [r3, #4]
 8010488:	e7ec      	b.n	8010464 <_malloc_r+0xa0>
 801048a:	4623      	mov	r3, r4
 801048c:	6864      	ldr	r4, [r4, #4]
 801048e:	e7b2      	b.n	80103f6 <_malloc_r+0x32>
 8010490:	4634      	mov	r4, r6
 8010492:	6876      	ldr	r6, [r6, #4]
 8010494:	e7b9      	b.n	801040a <_malloc_r+0x46>
 8010496:	230c      	movs	r3, #12
 8010498:	603b      	str	r3, [r7, #0]
 801049a:	4638      	mov	r0, r7
 801049c:	f000 fbce 	bl	8010c3c <__malloc_unlock>
 80104a0:	e7a1      	b.n	80103e6 <_malloc_r+0x22>
 80104a2:	6025      	str	r5, [r4, #0]
 80104a4:	e7de      	b.n	8010464 <_malloc_r+0xa0>
 80104a6:	bf00      	nop
 80104a8:	20009270 	.word	0x20009270

080104ac <iprintf>:
 80104ac:	b40f      	push	{r0, r1, r2, r3}
 80104ae:	4b0a      	ldr	r3, [pc, #40]	; (80104d8 <iprintf+0x2c>)
 80104b0:	b513      	push	{r0, r1, r4, lr}
 80104b2:	681c      	ldr	r4, [r3, #0]
 80104b4:	b124      	cbz	r4, 80104c0 <iprintf+0x14>
 80104b6:	69a3      	ldr	r3, [r4, #24]
 80104b8:	b913      	cbnz	r3, 80104c0 <iprintf+0x14>
 80104ba:	4620      	mov	r0, r4
 80104bc:	f000 fab2 	bl	8010a24 <__sinit>
 80104c0:	ab05      	add	r3, sp, #20
 80104c2:	9a04      	ldr	r2, [sp, #16]
 80104c4:	68a1      	ldr	r1, [r4, #8]
 80104c6:	9301      	str	r3, [sp, #4]
 80104c8:	4620      	mov	r0, r4
 80104ca:	f000 fd71 	bl	8010fb0 <_vfiprintf_r>
 80104ce:	b002      	add	sp, #8
 80104d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104d4:	b004      	add	sp, #16
 80104d6:	4770      	bx	lr
 80104d8:	200006b0 	.word	0x200006b0

080104dc <_puts_r>:
 80104dc:	b570      	push	{r4, r5, r6, lr}
 80104de:	460e      	mov	r6, r1
 80104e0:	4605      	mov	r5, r0
 80104e2:	b118      	cbz	r0, 80104ec <_puts_r+0x10>
 80104e4:	6983      	ldr	r3, [r0, #24]
 80104e6:	b90b      	cbnz	r3, 80104ec <_puts_r+0x10>
 80104e8:	f000 fa9c 	bl	8010a24 <__sinit>
 80104ec:	69ab      	ldr	r3, [r5, #24]
 80104ee:	68ac      	ldr	r4, [r5, #8]
 80104f0:	b913      	cbnz	r3, 80104f8 <_puts_r+0x1c>
 80104f2:	4628      	mov	r0, r5
 80104f4:	f000 fa96 	bl	8010a24 <__sinit>
 80104f8:	4b2c      	ldr	r3, [pc, #176]	; (80105ac <_puts_r+0xd0>)
 80104fa:	429c      	cmp	r4, r3
 80104fc:	d120      	bne.n	8010540 <_puts_r+0x64>
 80104fe:	686c      	ldr	r4, [r5, #4]
 8010500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010502:	07db      	lsls	r3, r3, #31
 8010504:	d405      	bmi.n	8010512 <_puts_r+0x36>
 8010506:	89a3      	ldrh	r3, [r4, #12]
 8010508:	0598      	lsls	r0, r3, #22
 801050a:	d402      	bmi.n	8010512 <_puts_r+0x36>
 801050c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801050e:	f000 fb27 	bl	8010b60 <__retarget_lock_acquire_recursive>
 8010512:	89a3      	ldrh	r3, [r4, #12]
 8010514:	0719      	lsls	r1, r3, #28
 8010516:	d51d      	bpl.n	8010554 <_puts_r+0x78>
 8010518:	6923      	ldr	r3, [r4, #16]
 801051a:	b1db      	cbz	r3, 8010554 <_puts_r+0x78>
 801051c:	3e01      	subs	r6, #1
 801051e:	68a3      	ldr	r3, [r4, #8]
 8010520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010524:	3b01      	subs	r3, #1
 8010526:	60a3      	str	r3, [r4, #8]
 8010528:	bb39      	cbnz	r1, 801057a <_puts_r+0x9e>
 801052a:	2b00      	cmp	r3, #0
 801052c:	da38      	bge.n	80105a0 <_puts_r+0xc4>
 801052e:	4622      	mov	r2, r4
 8010530:	210a      	movs	r1, #10
 8010532:	4628      	mov	r0, r5
 8010534:	f000 f89c 	bl	8010670 <__swbuf_r>
 8010538:	3001      	adds	r0, #1
 801053a:	d011      	beq.n	8010560 <_puts_r+0x84>
 801053c:	250a      	movs	r5, #10
 801053e:	e011      	b.n	8010564 <_puts_r+0x88>
 8010540:	4b1b      	ldr	r3, [pc, #108]	; (80105b0 <_puts_r+0xd4>)
 8010542:	429c      	cmp	r4, r3
 8010544:	d101      	bne.n	801054a <_puts_r+0x6e>
 8010546:	68ac      	ldr	r4, [r5, #8]
 8010548:	e7da      	b.n	8010500 <_puts_r+0x24>
 801054a:	4b1a      	ldr	r3, [pc, #104]	; (80105b4 <_puts_r+0xd8>)
 801054c:	429c      	cmp	r4, r3
 801054e:	bf08      	it	eq
 8010550:	68ec      	ldreq	r4, [r5, #12]
 8010552:	e7d5      	b.n	8010500 <_puts_r+0x24>
 8010554:	4621      	mov	r1, r4
 8010556:	4628      	mov	r0, r5
 8010558:	f000 f8dc 	bl	8010714 <__swsetup_r>
 801055c:	2800      	cmp	r0, #0
 801055e:	d0dd      	beq.n	801051c <_puts_r+0x40>
 8010560:	f04f 35ff 	mov.w	r5, #4294967295
 8010564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010566:	07da      	lsls	r2, r3, #31
 8010568:	d405      	bmi.n	8010576 <_puts_r+0x9a>
 801056a:	89a3      	ldrh	r3, [r4, #12]
 801056c:	059b      	lsls	r3, r3, #22
 801056e:	d402      	bmi.n	8010576 <_puts_r+0x9a>
 8010570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010572:	f000 faf6 	bl	8010b62 <__retarget_lock_release_recursive>
 8010576:	4628      	mov	r0, r5
 8010578:	bd70      	pop	{r4, r5, r6, pc}
 801057a:	2b00      	cmp	r3, #0
 801057c:	da04      	bge.n	8010588 <_puts_r+0xac>
 801057e:	69a2      	ldr	r2, [r4, #24]
 8010580:	429a      	cmp	r2, r3
 8010582:	dc06      	bgt.n	8010592 <_puts_r+0xb6>
 8010584:	290a      	cmp	r1, #10
 8010586:	d004      	beq.n	8010592 <_puts_r+0xb6>
 8010588:	6823      	ldr	r3, [r4, #0]
 801058a:	1c5a      	adds	r2, r3, #1
 801058c:	6022      	str	r2, [r4, #0]
 801058e:	7019      	strb	r1, [r3, #0]
 8010590:	e7c5      	b.n	801051e <_puts_r+0x42>
 8010592:	4622      	mov	r2, r4
 8010594:	4628      	mov	r0, r5
 8010596:	f000 f86b 	bl	8010670 <__swbuf_r>
 801059a:	3001      	adds	r0, #1
 801059c:	d1bf      	bne.n	801051e <_puts_r+0x42>
 801059e:	e7df      	b.n	8010560 <_puts_r+0x84>
 80105a0:	6823      	ldr	r3, [r4, #0]
 80105a2:	250a      	movs	r5, #10
 80105a4:	1c5a      	adds	r2, r3, #1
 80105a6:	6022      	str	r2, [r4, #0]
 80105a8:	701d      	strb	r5, [r3, #0]
 80105aa:	e7db      	b.n	8010564 <_puts_r+0x88>
 80105ac:	08012124 	.word	0x08012124
 80105b0:	08012144 	.word	0x08012144
 80105b4:	08012104 	.word	0x08012104

080105b8 <puts>:
 80105b8:	4b02      	ldr	r3, [pc, #8]	; (80105c4 <puts+0xc>)
 80105ba:	4601      	mov	r1, r0
 80105bc:	6818      	ldr	r0, [r3, #0]
 80105be:	f7ff bf8d 	b.w	80104dc <_puts_r>
 80105c2:	bf00      	nop
 80105c4:	200006b0 	.word	0x200006b0

080105c8 <realloc>:
 80105c8:	4b02      	ldr	r3, [pc, #8]	; (80105d4 <realloc+0xc>)
 80105ca:	460a      	mov	r2, r1
 80105cc:	4601      	mov	r1, r0
 80105ce:	6818      	ldr	r0, [r3, #0]
 80105d0:	f000 bb3a 	b.w	8010c48 <_realloc_r>
 80105d4:	200006b0 	.word	0x200006b0

080105d8 <_sbrk_r>:
 80105d8:	b538      	push	{r3, r4, r5, lr}
 80105da:	4d06      	ldr	r5, [pc, #24]	; (80105f4 <_sbrk_r+0x1c>)
 80105dc:	2300      	movs	r3, #0
 80105de:	4604      	mov	r4, r0
 80105e0:	4608      	mov	r0, r1
 80105e2:	602b      	str	r3, [r5, #0]
 80105e4:	f7f3 fe6e 	bl	80042c4 <_sbrk>
 80105e8:	1c43      	adds	r3, r0, #1
 80105ea:	d102      	bne.n	80105f2 <_sbrk_r+0x1a>
 80105ec:	682b      	ldr	r3, [r5, #0]
 80105ee:	b103      	cbz	r3, 80105f2 <_sbrk_r+0x1a>
 80105f0:	6023      	str	r3, [r4, #0]
 80105f2:	bd38      	pop	{r3, r4, r5, pc}
 80105f4:	2000927c 	.word	0x2000927c

080105f8 <siprintf>:
 80105f8:	b40e      	push	{r1, r2, r3}
 80105fa:	b500      	push	{lr}
 80105fc:	b09c      	sub	sp, #112	; 0x70
 80105fe:	ab1d      	add	r3, sp, #116	; 0x74
 8010600:	9002      	str	r0, [sp, #8]
 8010602:	9006      	str	r0, [sp, #24]
 8010604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010608:	4809      	ldr	r0, [pc, #36]	; (8010630 <siprintf+0x38>)
 801060a:	9107      	str	r1, [sp, #28]
 801060c:	9104      	str	r1, [sp, #16]
 801060e:	4909      	ldr	r1, [pc, #36]	; (8010634 <siprintf+0x3c>)
 8010610:	f853 2b04 	ldr.w	r2, [r3], #4
 8010614:	9105      	str	r1, [sp, #20]
 8010616:	6800      	ldr	r0, [r0, #0]
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	a902      	add	r1, sp, #8
 801061c:	f000 fb9e 	bl	8010d5c <_svfiprintf_r>
 8010620:	9b02      	ldr	r3, [sp, #8]
 8010622:	2200      	movs	r2, #0
 8010624:	701a      	strb	r2, [r3, #0]
 8010626:	b01c      	add	sp, #112	; 0x70
 8010628:	f85d eb04 	ldr.w	lr, [sp], #4
 801062c:	b003      	add	sp, #12
 801062e:	4770      	bx	lr
 8010630:	200006b0 	.word	0x200006b0
 8010634:	ffff0208 	.word	0xffff0208

08010638 <strcpy>:
 8010638:	4603      	mov	r3, r0
 801063a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801063e:	f803 2b01 	strb.w	r2, [r3], #1
 8010642:	2a00      	cmp	r2, #0
 8010644:	d1f9      	bne.n	801063a <strcpy+0x2>
 8010646:	4770      	bx	lr

08010648 <strncpy>:
 8010648:	b510      	push	{r4, lr}
 801064a:	3901      	subs	r1, #1
 801064c:	4603      	mov	r3, r0
 801064e:	b132      	cbz	r2, 801065e <strncpy+0x16>
 8010650:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010654:	f803 4b01 	strb.w	r4, [r3], #1
 8010658:	3a01      	subs	r2, #1
 801065a:	2c00      	cmp	r4, #0
 801065c:	d1f7      	bne.n	801064e <strncpy+0x6>
 801065e:	441a      	add	r2, r3
 8010660:	2100      	movs	r1, #0
 8010662:	4293      	cmp	r3, r2
 8010664:	d100      	bne.n	8010668 <strncpy+0x20>
 8010666:	bd10      	pop	{r4, pc}
 8010668:	f803 1b01 	strb.w	r1, [r3], #1
 801066c:	e7f9      	b.n	8010662 <strncpy+0x1a>
	...

08010670 <__swbuf_r>:
 8010670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010672:	460e      	mov	r6, r1
 8010674:	4614      	mov	r4, r2
 8010676:	4605      	mov	r5, r0
 8010678:	b118      	cbz	r0, 8010682 <__swbuf_r+0x12>
 801067a:	6983      	ldr	r3, [r0, #24]
 801067c:	b90b      	cbnz	r3, 8010682 <__swbuf_r+0x12>
 801067e:	f000 f9d1 	bl	8010a24 <__sinit>
 8010682:	4b21      	ldr	r3, [pc, #132]	; (8010708 <__swbuf_r+0x98>)
 8010684:	429c      	cmp	r4, r3
 8010686:	d12b      	bne.n	80106e0 <__swbuf_r+0x70>
 8010688:	686c      	ldr	r4, [r5, #4]
 801068a:	69a3      	ldr	r3, [r4, #24]
 801068c:	60a3      	str	r3, [r4, #8]
 801068e:	89a3      	ldrh	r3, [r4, #12]
 8010690:	071a      	lsls	r2, r3, #28
 8010692:	d52f      	bpl.n	80106f4 <__swbuf_r+0x84>
 8010694:	6923      	ldr	r3, [r4, #16]
 8010696:	b36b      	cbz	r3, 80106f4 <__swbuf_r+0x84>
 8010698:	6923      	ldr	r3, [r4, #16]
 801069a:	6820      	ldr	r0, [r4, #0]
 801069c:	1ac0      	subs	r0, r0, r3
 801069e:	6963      	ldr	r3, [r4, #20]
 80106a0:	b2f6      	uxtb	r6, r6
 80106a2:	4283      	cmp	r3, r0
 80106a4:	4637      	mov	r7, r6
 80106a6:	dc04      	bgt.n	80106b2 <__swbuf_r+0x42>
 80106a8:	4621      	mov	r1, r4
 80106aa:	4628      	mov	r0, r5
 80106ac:	f000 f926 	bl	80108fc <_fflush_r>
 80106b0:	bb30      	cbnz	r0, 8010700 <__swbuf_r+0x90>
 80106b2:	68a3      	ldr	r3, [r4, #8]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	60a3      	str	r3, [r4, #8]
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	1c5a      	adds	r2, r3, #1
 80106bc:	6022      	str	r2, [r4, #0]
 80106be:	701e      	strb	r6, [r3, #0]
 80106c0:	6963      	ldr	r3, [r4, #20]
 80106c2:	3001      	adds	r0, #1
 80106c4:	4283      	cmp	r3, r0
 80106c6:	d004      	beq.n	80106d2 <__swbuf_r+0x62>
 80106c8:	89a3      	ldrh	r3, [r4, #12]
 80106ca:	07db      	lsls	r3, r3, #31
 80106cc:	d506      	bpl.n	80106dc <__swbuf_r+0x6c>
 80106ce:	2e0a      	cmp	r6, #10
 80106d0:	d104      	bne.n	80106dc <__swbuf_r+0x6c>
 80106d2:	4621      	mov	r1, r4
 80106d4:	4628      	mov	r0, r5
 80106d6:	f000 f911 	bl	80108fc <_fflush_r>
 80106da:	b988      	cbnz	r0, 8010700 <__swbuf_r+0x90>
 80106dc:	4638      	mov	r0, r7
 80106de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106e0:	4b0a      	ldr	r3, [pc, #40]	; (801070c <__swbuf_r+0x9c>)
 80106e2:	429c      	cmp	r4, r3
 80106e4:	d101      	bne.n	80106ea <__swbuf_r+0x7a>
 80106e6:	68ac      	ldr	r4, [r5, #8]
 80106e8:	e7cf      	b.n	801068a <__swbuf_r+0x1a>
 80106ea:	4b09      	ldr	r3, [pc, #36]	; (8010710 <__swbuf_r+0xa0>)
 80106ec:	429c      	cmp	r4, r3
 80106ee:	bf08      	it	eq
 80106f0:	68ec      	ldreq	r4, [r5, #12]
 80106f2:	e7ca      	b.n	801068a <__swbuf_r+0x1a>
 80106f4:	4621      	mov	r1, r4
 80106f6:	4628      	mov	r0, r5
 80106f8:	f000 f80c 	bl	8010714 <__swsetup_r>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d0cb      	beq.n	8010698 <__swbuf_r+0x28>
 8010700:	f04f 37ff 	mov.w	r7, #4294967295
 8010704:	e7ea      	b.n	80106dc <__swbuf_r+0x6c>
 8010706:	bf00      	nop
 8010708:	08012124 	.word	0x08012124
 801070c:	08012144 	.word	0x08012144
 8010710:	08012104 	.word	0x08012104

08010714 <__swsetup_r>:
 8010714:	4b32      	ldr	r3, [pc, #200]	; (80107e0 <__swsetup_r+0xcc>)
 8010716:	b570      	push	{r4, r5, r6, lr}
 8010718:	681d      	ldr	r5, [r3, #0]
 801071a:	4606      	mov	r6, r0
 801071c:	460c      	mov	r4, r1
 801071e:	b125      	cbz	r5, 801072a <__swsetup_r+0x16>
 8010720:	69ab      	ldr	r3, [r5, #24]
 8010722:	b913      	cbnz	r3, 801072a <__swsetup_r+0x16>
 8010724:	4628      	mov	r0, r5
 8010726:	f000 f97d 	bl	8010a24 <__sinit>
 801072a:	4b2e      	ldr	r3, [pc, #184]	; (80107e4 <__swsetup_r+0xd0>)
 801072c:	429c      	cmp	r4, r3
 801072e:	d10f      	bne.n	8010750 <__swsetup_r+0x3c>
 8010730:	686c      	ldr	r4, [r5, #4]
 8010732:	89a3      	ldrh	r3, [r4, #12]
 8010734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010738:	0719      	lsls	r1, r3, #28
 801073a:	d42c      	bmi.n	8010796 <__swsetup_r+0x82>
 801073c:	06dd      	lsls	r5, r3, #27
 801073e:	d411      	bmi.n	8010764 <__swsetup_r+0x50>
 8010740:	2309      	movs	r3, #9
 8010742:	6033      	str	r3, [r6, #0]
 8010744:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010748:	81a3      	strh	r3, [r4, #12]
 801074a:	f04f 30ff 	mov.w	r0, #4294967295
 801074e:	e03e      	b.n	80107ce <__swsetup_r+0xba>
 8010750:	4b25      	ldr	r3, [pc, #148]	; (80107e8 <__swsetup_r+0xd4>)
 8010752:	429c      	cmp	r4, r3
 8010754:	d101      	bne.n	801075a <__swsetup_r+0x46>
 8010756:	68ac      	ldr	r4, [r5, #8]
 8010758:	e7eb      	b.n	8010732 <__swsetup_r+0x1e>
 801075a:	4b24      	ldr	r3, [pc, #144]	; (80107ec <__swsetup_r+0xd8>)
 801075c:	429c      	cmp	r4, r3
 801075e:	bf08      	it	eq
 8010760:	68ec      	ldreq	r4, [r5, #12]
 8010762:	e7e6      	b.n	8010732 <__swsetup_r+0x1e>
 8010764:	0758      	lsls	r0, r3, #29
 8010766:	d512      	bpl.n	801078e <__swsetup_r+0x7a>
 8010768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801076a:	b141      	cbz	r1, 801077e <__swsetup_r+0x6a>
 801076c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010770:	4299      	cmp	r1, r3
 8010772:	d002      	beq.n	801077a <__swsetup_r+0x66>
 8010774:	4630      	mov	r0, r6
 8010776:	f7ff fdb9 	bl	80102ec <_free_r>
 801077a:	2300      	movs	r3, #0
 801077c:	6363      	str	r3, [r4, #52]	; 0x34
 801077e:	89a3      	ldrh	r3, [r4, #12]
 8010780:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010784:	81a3      	strh	r3, [r4, #12]
 8010786:	2300      	movs	r3, #0
 8010788:	6063      	str	r3, [r4, #4]
 801078a:	6923      	ldr	r3, [r4, #16]
 801078c:	6023      	str	r3, [r4, #0]
 801078e:	89a3      	ldrh	r3, [r4, #12]
 8010790:	f043 0308 	orr.w	r3, r3, #8
 8010794:	81a3      	strh	r3, [r4, #12]
 8010796:	6923      	ldr	r3, [r4, #16]
 8010798:	b94b      	cbnz	r3, 80107ae <__swsetup_r+0x9a>
 801079a:	89a3      	ldrh	r3, [r4, #12]
 801079c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107a4:	d003      	beq.n	80107ae <__swsetup_r+0x9a>
 80107a6:	4621      	mov	r1, r4
 80107a8:	4630      	mov	r0, r6
 80107aa:	f000 fa01 	bl	8010bb0 <__smakebuf_r>
 80107ae:	89a0      	ldrh	r0, [r4, #12]
 80107b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107b4:	f010 0301 	ands.w	r3, r0, #1
 80107b8:	d00a      	beq.n	80107d0 <__swsetup_r+0xbc>
 80107ba:	2300      	movs	r3, #0
 80107bc:	60a3      	str	r3, [r4, #8]
 80107be:	6963      	ldr	r3, [r4, #20]
 80107c0:	425b      	negs	r3, r3
 80107c2:	61a3      	str	r3, [r4, #24]
 80107c4:	6923      	ldr	r3, [r4, #16]
 80107c6:	b943      	cbnz	r3, 80107da <__swsetup_r+0xc6>
 80107c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107cc:	d1ba      	bne.n	8010744 <__swsetup_r+0x30>
 80107ce:	bd70      	pop	{r4, r5, r6, pc}
 80107d0:	0781      	lsls	r1, r0, #30
 80107d2:	bf58      	it	pl
 80107d4:	6963      	ldrpl	r3, [r4, #20]
 80107d6:	60a3      	str	r3, [r4, #8]
 80107d8:	e7f4      	b.n	80107c4 <__swsetup_r+0xb0>
 80107da:	2000      	movs	r0, #0
 80107dc:	e7f7      	b.n	80107ce <__swsetup_r+0xba>
 80107de:	bf00      	nop
 80107e0:	200006b0 	.word	0x200006b0
 80107e4:	08012124 	.word	0x08012124
 80107e8:	08012144 	.word	0x08012144
 80107ec:	08012104 	.word	0x08012104

080107f0 <__sflush_r>:
 80107f0:	898a      	ldrh	r2, [r1, #12]
 80107f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107f6:	4605      	mov	r5, r0
 80107f8:	0710      	lsls	r0, r2, #28
 80107fa:	460c      	mov	r4, r1
 80107fc:	d458      	bmi.n	80108b0 <__sflush_r+0xc0>
 80107fe:	684b      	ldr	r3, [r1, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	dc05      	bgt.n	8010810 <__sflush_r+0x20>
 8010804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010806:	2b00      	cmp	r3, #0
 8010808:	dc02      	bgt.n	8010810 <__sflush_r+0x20>
 801080a:	2000      	movs	r0, #0
 801080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010812:	2e00      	cmp	r6, #0
 8010814:	d0f9      	beq.n	801080a <__sflush_r+0x1a>
 8010816:	2300      	movs	r3, #0
 8010818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801081c:	682f      	ldr	r7, [r5, #0]
 801081e:	602b      	str	r3, [r5, #0]
 8010820:	d032      	beq.n	8010888 <__sflush_r+0x98>
 8010822:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010824:	89a3      	ldrh	r3, [r4, #12]
 8010826:	075a      	lsls	r2, r3, #29
 8010828:	d505      	bpl.n	8010836 <__sflush_r+0x46>
 801082a:	6863      	ldr	r3, [r4, #4]
 801082c:	1ac0      	subs	r0, r0, r3
 801082e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010830:	b10b      	cbz	r3, 8010836 <__sflush_r+0x46>
 8010832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010834:	1ac0      	subs	r0, r0, r3
 8010836:	2300      	movs	r3, #0
 8010838:	4602      	mov	r2, r0
 801083a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801083c:	6a21      	ldr	r1, [r4, #32]
 801083e:	4628      	mov	r0, r5
 8010840:	47b0      	blx	r6
 8010842:	1c43      	adds	r3, r0, #1
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	d106      	bne.n	8010856 <__sflush_r+0x66>
 8010848:	6829      	ldr	r1, [r5, #0]
 801084a:	291d      	cmp	r1, #29
 801084c:	d82c      	bhi.n	80108a8 <__sflush_r+0xb8>
 801084e:	4a2a      	ldr	r2, [pc, #168]	; (80108f8 <__sflush_r+0x108>)
 8010850:	40ca      	lsrs	r2, r1
 8010852:	07d6      	lsls	r6, r2, #31
 8010854:	d528      	bpl.n	80108a8 <__sflush_r+0xb8>
 8010856:	2200      	movs	r2, #0
 8010858:	6062      	str	r2, [r4, #4]
 801085a:	04d9      	lsls	r1, r3, #19
 801085c:	6922      	ldr	r2, [r4, #16]
 801085e:	6022      	str	r2, [r4, #0]
 8010860:	d504      	bpl.n	801086c <__sflush_r+0x7c>
 8010862:	1c42      	adds	r2, r0, #1
 8010864:	d101      	bne.n	801086a <__sflush_r+0x7a>
 8010866:	682b      	ldr	r3, [r5, #0]
 8010868:	b903      	cbnz	r3, 801086c <__sflush_r+0x7c>
 801086a:	6560      	str	r0, [r4, #84]	; 0x54
 801086c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801086e:	602f      	str	r7, [r5, #0]
 8010870:	2900      	cmp	r1, #0
 8010872:	d0ca      	beq.n	801080a <__sflush_r+0x1a>
 8010874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010878:	4299      	cmp	r1, r3
 801087a:	d002      	beq.n	8010882 <__sflush_r+0x92>
 801087c:	4628      	mov	r0, r5
 801087e:	f7ff fd35 	bl	80102ec <_free_r>
 8010882:	2000      	movs	r0, #0
 8010884:	6360      	str	r0, [r4, #52]	; 0x34
 8010886:	e7c1      	b.n	801080c <__sflush_r+0x1c>
 8010888:	6a21      	ldr	r1, [r4, #32]
 801088a:	2301      	movs	r3, #1
 801088c:	4628      	mov	r0, r5
 801088e:	47b0      	blx	r6
 8010890:	1c41      	adds	r1, r0, #1
 8010892:	d1c7      	bne.n	8010824 <__sflush_r+0x34>
 8010894:	682b      	ldr	r3, [r5, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d0c4      	beq.n	8010824 <__sflush_r+0x34>
 801089a:	2b1d      	cmp	r3, #29
 801089c:	d001      	beq.n	80108a2 <__sflush_r+0xb2>
 801089e:	2b16      	cmp	r3, #22
 80108a0:	d101      	bne.n	80108a6 <__sflush_r+0xb6>
 80108a2:	602f      	str	r7, [r5, #0]
 80108a4:	e7b1      	b.n	801080a <__sflush_r+0x1a>
 80108a6:	89a3      	ldrh	r3, [r4, #12]
 80108a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108ac:	81a3      	strh	r3, [r4, #12]
 80108ae:	e7ad      	b.n	801080c <__sflush_r+0x1c>
 80108b0:	690f      	ldr	r7, [r1, #16]
 80108b2:	2f00      	cmp	r7, #0
 80108b4:	d0a9      	beq.n	801080a <__sflush_r+0x1a>
 80108b6:	0793      	lsls	r3, r2, #30
 80108b8:	680e      	ldr	r6, [r1, #0]
 80108ba:	bf08      	it	eq
 80108bc:	694b      	ldreq	r3, [r1, #20]
 80108be:	600f      	str	r7, [r1, #0]
 80108c0:	bf18      	it	ne
 80108c2:	2300      	movne	r3, #0
 80108c4:	eba6 0807 	sub.w	r8, r6, r7
 80108c8:	608b      	str	r3, [r1, #8]
 80108ca:	f1b8 0f00 	cmp.w	r8, #0
 80108ce:	dd9c      	ble.n	801080a <__sflush_r+0x1a>
 80108d0:	6a21      	ldr	r1, [r4, #32]
 80108d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108d4:	4643      	mov	r3, r8
 80108d6:	463a      	mov	r2, r7
 80108d8:	4628      	mov	r0, r5
 80108da:	47b0      	blx	r6
 80108dc:	2800      	cmp	r0, #0
 80108de:	dc06      	bgt.n	80108ee <__sflush_r+0xfe>
 80108e0:	89a3      	ldrh	r3, [r4, #12]
 80108e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108e6:	81a3      	strh	r3, [r4, #12]
 80108e8:	f04f 30ff 	mov.w	r0, #4294967295
 80108ec:	e78e      	b.n	801080c <__sflush_r+0x1c>
 80108ee:	4407      	add	r7, r0
 80108f0:	eba8 0800 	sub.w	r8, r8, r0
 80108f4:	e7e9      	b.n	80108ca <__sflush_r+0xda>
 80108f6:	bf00      	nop
 80108f8:	20400001 	.word	0x20400001

080108fc <_fflush_r>:
 80108fc:	b538      	push	{r3, r4, r5, lr}
 80108fe:	690b      	ldr	r3, [r1, #16]
 8010900:	4605      	mov	r5, r0
 8010902:	460c      	mov	r4, r1
 8010904:	b913      	cbnz	r3, 801090c <_fflush_r+0x10>
 8010906:	2500      	movs	r5, #0
 8010908:	4628      	mov	r0, r5
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	b118      	cbz	r0, 8010916 <_fflush_r+0x1a>
 801090e:	6983      	ldr	r3, [r0, #24]
 8010910:	b90b      	cbnz	r3, 8010916 <_fflush_r+0x1a>
 8010912:	f000 f887 	bl	8010a24 <__sinit>
 8010916:	4b14      	ldr	r3, [pc, #80]	; (8010968 <_fflush_r+0x6c>)
 8010918:	429c      	cmp	r4, r3
 801091a:	d11b      	bne.n	8010954 <_fflush_r+0x58>
 801091c:	686c      	ldr	r4, [r5, #4]
 801091e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d0ef      	beq.n	8010906 <_fflush_r+0xa>
 8010926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010928:	07d0      	lsls	r0, r2, #31
 801092a:	d404      	bmi.n	8010936 <_fflush_r+0x3a>
 801092c:	0599      	lsls	r1, r3, #22
 801092e:	d402      	bmi.n	8010936 <_fflush_r+0x3a>
 8010930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010932:	f000 f915 	bl	8010b60 <__retarget_lock_acquire_recursive>
 8010936:	4628      	mov	r0, r5
 8010938:	4621      	mov	r1, r4
 801093a:	f7ff ff59 	bl	80107f0 <__sflush_r>
 801093e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010940:	07da      	lsls	r2, r3, #31
 8010942:	4605      	mov	r5, r0
 8010944:	d4e0      	bmi.n	8010908 <_fflush_r+0xc>
 8010946:	89a3      	ldrh	r3, [r4, #12]
 8010948:	059b      	lsls	r3, r3, #22
 801094a:	d4dd      	bmi.n	8010908 <_fflush_r+0xc>
 801094c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801094e:	f000 f908 	bl	8010b62 <__retarget_lock_release_recursive>
 8010952:	e7d9      	b.n	8010908 <_fflush_r+0xc>
 8010954:	4b05      	ldr	r3, [pc, #20]	; (801096c <_fflush_r+0x70>)
 8010956:	429c      	cmp	r4, r3
 8010958:	d101      	bne.n	801095e <_fflush_r+0x62>
 801095a:	68ac      	ldr	r4, [r5, #8]
 801095c:	e7df      	b.n	801091e <_fflush_r+0x22>
 801095e:	4b04      	ldr	r3, [pc, #16]	; (8010970 <_fflush_r+0x74>)
 8010960:	429c      	cmp	r4, r3
 8010962:	bf08      	it	eq
 8010964:	68ec      	ldreq	r4, [r5, #12]
 8010966:	e7da      	b.n	801091e <_fflush_r+0x22>
 8010968:	08012124 	.word	0x08012124
 801096c:	08012144 	.word	0x08012144
 8010970:	08012104 	.word	0x08012104

08010974 <std>:
 8010974:	2300      	movs	r3, #0
 8010976:	b510      	push	{r4, lr}
 8010978:	4604      	mov	r4, r0
 801097a:	e9c0 3300 	strd	r3, r3, [r0]
 801097e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010982:	6083      	str	r3, [r0, #8]
 8010984:	8181      	strh	r1, [r0, #12]
 8010986:	6643      	str	r3, [r0, #100]	; 0x64
 8010988:	81c2      	strh	r2, [r0, #14]
 801098a:	6183      	str	r3, [r0, #24]
 801098c:	4619      	mov	r1, r3
 801098e:	2208      	movs	r2, #8
 8010990:	305c      	adds	r0, #92	; 0x5c
 8010992:	f7ff fca3 	bl	80102dc <memset>
 8010996:	4b05      	ldr	r3, [pc, #20]	; (80109ac <std+0x38>)
 8010998:	6263      	str	r3, [r4, #36]	; 0x24
 801099a:	4b05      	ldr	r3, [pc, #20]	; (80109b0 <std+0x3c>)
 801099c:	62a3      	str	r3, [r4, #40]	; 0x28
 801099e:	4b05      	ldr	r3, [pc, #20]	; (80109b4 <std+0x40>)
 80109a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80109a2:	4b05      	ldr	r3, [pc, #20]	; (80109b8 <std+0x44>)
 80109a4:	6224      	str	r4, [r4, #32]
 80109a6:	6323      	str	r3, [r4, #48]	; 0x30
 80109a8:	bd10      	pop	{r4, pc}
 80109aa:	bf00      	nop
 80109ac:	08011539 	.word	0x08011539
 80109b0:	0801155b 	.word	0x0801155b
 80109b4:	08011593 	.word	0x08011593
 80109b8:	080115b7 	.word	0x080115b7

080109bc <_cleanup_r>:
 80109bc:	4901      	ldr	r1, [pc, #4]	; (80109c4 <_cleanup_r+0x8>)
 80109be:	f000 b8af 	b.w	8010b20 <_fwalk_reent>
 80109c2:	bf00      	nop
 80109c4:	080108fd 	.word	0x080108fd

080109c8 <__sfmoreglue>:
 80109c8:	b570      	push	{r4, r5, r6, lr}
 80109ca:	2268      	movs	r2, #104	; 0x68
 80109cc:	1e4d      	subs	r5, r1, #1
 80109ce:	4355      	muls	r5, r2
 80109d0:	460e      	mov	r6, r1
 80109d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80109d6:	f7ff fcf5 	bl	80103c4 <_malloc_r>
 80109da:	4604      	mov	r4, r0
 80109dc:	b140      	cbz	r0, 80109f0 <__sfmoreglue+0x28>
 80109de:	2100      	movs	r1, #0
 80109e0:	e9c0 1600 	strd	r1, r6, [r0]
 80109e4:	300c      	adds	r0, #12
 80109e6:	60a0      	str	r0, [r4, #8]
 80109e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80109ec:	f7ff fc76 	bl	80102dc <memset>
 80109f0:	4620      	mov	r0, r4
 80109f2:	bd70      	pop	{r4, r5, r6, pc}

080109f4 <__sfp_lock_acquire>:
 80109f4:	4801      	ldr	r0, [pc, #4]	; (80109fc <__sfp_lock_acquire+0x8>)
 80109f6:	f000 b8b3 	b.w	8010b60 <__retarget_lock_acquire_recursive>
 80109fa:	bf00      	nop
 80109fc:	20009279 	.word	0x20009279

08010a00 <__sfp_lock_release>:
 8010a00:	4801      	ldr	r0, [pc, #4]	; (8010a08 <__sfp_lock_release+0x8>)
 8010a02:	f000 b8ae 	b.w	8010b62 <__retarget_lock_release_recursive>
 8010a06:	bf00      	nop
 8010a08:	20009279 	.word	0x20009279

08010a0c <__sinit_lock_acquire>:
 8010a0c:	4801      	ldr	r0, [pc, #4]	; (8010a14 <__sinit_lock_acquire+0x8>)
 8010a0e:	f000 b8a7 	b.w	8010b60 <__retarget_lock_acquire_recursive>
 8010a12:	bf00      	nop
 8010a14:	2000927a 	.word	0x2000927a

08010a18 <__sinit_lock_release>:
 8010a18:	4801      	ldr	r0, [pc, #4]	; (8010a20 <__sinit_lock_release+0x8>)
 8010a1a:	f000 b8a2 	b.w	8010b62 <__retarget_lock_release_recursive>
 8010a1e:	bf00      	nop
 8010a20:	2000927a 	.word	0x2000927a

08010a24 <__sinit>:
 8010a24:	b510      	push	{r4, lr}
 8010a26:	4604      	mov	r4, r0
 8010a28:	f7ff fff0 	bl	8010a0c <__sinit_lock_acquire>
 8010a2c:	69a3      	ldr	r3, [r4, #24]
 8010a2e:	b11b      	cbz	r3, 8010a38 <__sinit+0x14>
 8010a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a34:	f7ff bff0 	b.w	8010a18 <__sinit_lock_release>
 8010a38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010a3c:	6523      	str	r3, [r4, #80]	; 0x50
 8010a3e:	4b13      	ldr	r3, [pc, #76]	; (8010a8c <__sinit+0x68>)
 8010a40:	4a13      	ldr	r2, [pc, #76]	; (8010a90 <__sinit+0x6c>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	62a2      	str	r2, [r4, #40]	; 0x28
 8010a46:	42a3      	cmp	r3, r4
 8010a48:	bf04      	itt	eq
 8010a4a:	2301      	moveq	r3, #1
 8010a4c:	61a3      	streq	r3, [r4, #24]
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f000 f820 	bl	8010a94 <__sfp>
 8010a54:	6060      	str	r0, [r4, #4]
 8010a56:	4620      	mov	r0, r4
 8010a58:	f000 f81c 	bl	8010a94 <__sfp>
 8010a5c:	60a0      	str	r0, [r4, #8]
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f000 f818 	bl	8010a94 <__sfp>
 8010a64:	2200      	movs	r2, #0
 8010a66:	60e0      	str	r0, [r4, #12]
 8010a68:	2104      	movs	r1, #4
 8010a6a:	6860      	ldr	r0, [r4, #4]
 8010a6c:	f7ff ff82 	bl	8010974 <std>
 8010a70:	68a0      	ldr	r0, [r4, #8]
 8010a72:	2201      	movs	r2, #1
 8010a74:	2109      	movs	r1, #9
 8010a76:	f7ff ff7d 	bl	8010974 <std>
 8010a7a:	68e0      	ldr	r0, [r4, #12]
 8010a7c:	2202      	movs	r2, #2
 8010a7e:	2112      	movs	r1, #18
 8010a80:	f7ff ff78 	bl	8010974 <std>
 8010a84:	2301      	movs	r3, #1
 8010a86:	61a3      	str	r3, [r4, #24]
 8010a88:	e7d2      	b.n	8010a30 <__sinit+0xc>
 8010a8a:	bf00      	nop
 8010a8c:	08012100 	.word	0x08012100
 8010a90:	080109bd 	.word	0x080109bd

08010a94 <__sfp>:
 8010a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a96:	4607      	mov	r7, r0
 8010a98:	f7ff ffac 	bl	80109f4 <__sfp_lock_acquire>
 8010a9c:	4b1e      	ldr	r3, [pc, #120]	; (8010b18 <__sfp+0x84>)
 8010a9e:	681e      	ldr	r6, [r3, #0]
 8010aa0:	69b3      	ldr	r3, [r6, #24]
 8010aa2:	b913      	cbnz	r3, 8010aaa <__sfp+0x16>
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f7ff ffbd 	bl	8010a24 <__sinit>
 8010aaa:	3648      	adds	r6, #72	; 0x48
 8010aac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ab0:	3b01      	subs	r3, #1
 8010ab2:	d503      	bpl.n	8010abc <__sfp+0x28>
 8010ab4:	6833      	ldr	r3, [r6, #0]
 8010ab6:	b30b      	cbz	r3, 8010afc <__sfp+0x68>
 8010ab8:	6836      	ldr	r6, [r6, #0]
 8010aba:	e7f7      	b.n	8010aac <__sfp+0x18>
 8010abc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ac0:	b9d5      	cbnz	r5, 8010af8 <__sfp+0x64>
 8010ac2:	4b16      	ldr	r3, [pc, #88]	; (8010b1c <__sfp+0x88>)
 8010ac4:	60e3      	str	r3, [r4, #12]
 8010ac6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010aca:	6665      	str	r5, [r4, #100]	; 0x64
 8010acc:	f000 f847 	bl	8010b5e <__retarget_lock_init_recursive>
 8010ad0:	f7ff ff96 	bl	8010a00 <__sfp_lock_release>
 8010ad4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ad8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010adc:	6025      	str	r5, [r4, #0]
 8010ade:	61a5      	str	r5, [r4, #24]
 8010ae0:	2208      	movs	r2, #8
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ae8:	f7ff fbf8 	bl	80102dc <memset>
 8010aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010af4:	4620      	mov	r0, r4
 8010af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010af8:	3468      	adds	r4, #104	; 0x68
 8010afa:	e7d9      	b.n	8010ab0 <__sfp+0x1c>
 8010afc:	2104      	movs	r1, #4
 8010afe:	4638      	mov	r0, r7
 8010b00:	f7ff ff62 	bl	80109c8 <__sfmoreglue>
 8010b04:	4604      	mov	r4, r0
 8010b06:	6030      	str	r0, [r6, #0]
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	d1d5      	bne.n	8010ab8 <__sfp+0x24>
 8010b0c:	f7ff ff78 	bl	8010a00 <__sfp_lock_release>
 8010b10:	230c      	movs	r3, #12
 8010b12:	603b      	str	r3, [r7, #0]
 8010b14:	e7ee      	b.n	8010af4 <__sfp+0x60>
 8010b16:	bf00      	nop
 8010b18:	08012100 	.word	0x08012100
 8010b1c:	ffff0001 	.word	0xffff0001

08010b20 <_fwalk_reent>:
 8010b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b24:	4606      	mov	r6, r0
 8010b26:	4688      	mov	r8, r1
 8010b28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b2c:	2700      	movs	r7, #0
 8010b2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b32:	f1b9 0901 	subs.w	r9, r9, #1
 8010b36:	d505      	bpl.n	8010b44 <_fwalk_reent+0x24>
 8010b38:	6824      	ldr	r4, [r4, #0]
 8010b3a:	2c00      	cmp	r4, #0
 8010b3c:	d1f7      	bne.n	8010b2e <_fwalk_reent+0xe>
 8010b3e:	4638      	mov	r0, r7
 8010b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b44:	89ab      	ldrh	r3, [r5, #12]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d907      	bls.n	8010b5a <_fwalk_reent+0x3a>
 8010b4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	d003      	beq.n	8010b5a <_fwalk_reent+0x3a>
 8010b52:	4629      	mov	r1, r5
 8010b54:	4630      	mov	r0, r6
 8010b56:	47c0      	blx	r8
 8010b58:	4307      	orrs	r7, r0
 8010b5a:	3568      	adds	r5, #104	; 0x68
 8010b5c:	e7e9      	b.n	8010b32 <_fwalk_reent+0x12>

08010b5e <__retarget_lock_init_recursive>:
 8010b5e:	4770      	bx	lr

08010b60 <__retarget_lock_acquire_recursive>:
 8010b60:	4770      	bx	lr

08010b62 <__retarget_lock_release_recursive>:
 8010b62:	4770      	bx	lr

08010b64 <__swhatbuf_r>:
 8010b64:	b570      	push	{r4, r5, r6, lr}
 8010b66:	460e      	mov	r6, r1
 8010b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b6c:	2900      	cmp	r1, #0
 8010b6e:	b096      	sub	sp, #88	; 0x58
 8010b70:	4614      	mov	r4, r2
 8010b72:	461d      	mov	r5, r3
 8010b74:	da08      	bge.n	8010b88 <__swhatbuf_r+0x24>
 8010b76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	602a      	str	r2, [r5, #0]
 8010b7e:	061a      	lsls	r2, r3, #24
 8010b80:	d410      	bmi.n	8010ba4 <__swhatbuf_r+0x40>
 8010b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b86:	e00e      	b.n	8010ba6 <__swhatbuf_r+0x42>
 8010b88:	466a      	mov	r2, sp
 8010b8a:	f000 fd3b 	bl	8011604 <_fstat_r>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	dbf1      	blt.n	8010b76 <__swhatbuf_r+0x12>
 8010b92:	9a01      	ldr	r2, [sp, #4]
 8010b94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b9c:	425a      	negs	r2, r3
 8010b9e:	415a      	adcs	r2, r3
 8010ba0:	602a      	str	r2, [r5, #0]
 8010ba2:	e7ee      	b.n	8010b82 <__swhatbuf_r+0x1e>
 8010ba4:	2340      	movs	r3, #64	; 0x40
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	6023      	str	r3, [r4, #0]
 8010baa:	b016      	add	sp, #88	; 0x58
 8010bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08010bb0 <__smakebuf_r>:
 8010bb0:	898b      	ldrh	r3, [r1, #12]
 8010bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bb4:	079d      	lsls	r5, r3, #30
 8010bb6:	4606      	mov	r6, r0
 8010bb8:	460c      	mov	r4, r1
 8010bba:	d507      	bpl.n	8010bcc <__smakebuf_r+0x1c>
 8010bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010bc0:	6023      	str	r3, [r4, #0]
 8010bc2:	6123      	str	r3, [r4, #16]
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	6163      	str	r3, [r4, #20]
 8010bc8:	b002      	add	sp, #8
 8010bca:	bd70      	pop	{r4, r5, r6, pc}
 8010bcc:	ab01      	add	r3, sp, #4
 8010bce:	466a      	mov	r2, sp
 8010bd0:	f7ff ffc8 	bl	8010b64 <__swhatbuf_r>
 8010bd4:	9900      	ldr	r1, [sp, #0]
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f7ff fbf3 	bl	80103c4 <_malloc_r>
 8010bde:	b948      	cbnz	r0, 8010bf4 <__smakebuf_r+0x44>
 8010be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010be4:	059a      	lsls	r2, r3, #22
 8010be6:	d4ef      	bmi.n	8010bc8 <__smakebuf_r+0x18>
 8010be8:	f023 0303 	bic.w	r3, r3, #3
 8010bec:	f043 0302 	orr.w	r3, r3, #2
 8010bf0:	81a3      	strh	r3, [r4, #12]
 8010bf2:	e7e3      	b.n	8010bbc <__smakebuf_r+0xc>
 8010bf4:	4b0d      	ldr	r3, [pc, #52]	; (8010c2c <__smakebuf_r+0x7c>)
 8010bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010bf8:	89a3      	ldrh	r3, [r4, #12]
 8010bfa:	6020      	str	r0, [r4, #0]
 8010bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c00:	81a3      	strh	r3, [r4, #12]
 8010c02:	9b00      	ldr	r3, [sp, #0]
 8010c04:	6163      	str	r3, [r4, #20]
 8010c06:	9b01      	ldr	r3, [sp, #4]
 8010c08:	6120      	str	r0, [r4, #16]
 8010c0a:	b15b      	cbz	r3, 8010c24 <__smakebuf_r+0x74>
 8010c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c10:	4630      	mov	r0, r6
 8010c12:	f000 fd09 	bl	8011628 <_isatty_r>
 8010c16:	b128      	cbz	r0, 8010c24 <__smakebuf_r+0x74>
 8010c18:	89a3      	ldrh	r3, [r4, #12]
 8010c1a:	f023 0303 	bic.w	r3, r3, #3
 8010c1e:	f043 0301 	orr.w	r3, r3, #1
 8010c22:	81a3      	strh	r3, [r4, #12]
 8010c24:	89a0      	ldrh	r0, [r4, #12]
 8010c26:	4305      	orrs	r5, r0
 8010c28:	81a5      	strh	r5, [r4, #12]
 8010c2a:	e7cd      	b.n	8010bc8 <__smakebuf_r+0x18>
 8010c2c:	080109bd 	.word	0x080109bd

08010c30 <__malloc_lock>:
 8010c30:	4801      	ldr	r0, [pc, #4]	; (8010c38 <__malloc_lock+0x8>)
 8010c32:	f7ff bf95 	b.w	8010b60 <__retarget_lock_acquire_recursive>
 8010c36:	bf00      	nop
 8010c38:	20009278 	.word	0x20009278

08010c3c <__malloc_unlock>:
 8010c3c:	4801      	ldr	r0, [pc, #4]	; (8010c44 <__malloc_unlock+0x8>)
 8010c3e:	f7ff bf90 	b.w	8010b62 <__retarget_lock_release_recursive>
 8010c42:	bf00      	nop
 8010c44:	20009278 	.word	0x20009278

08010c48 <_realloc_r>:
 8010c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c4c:	4680      	mov	r8, r0
 8010c4e:	4614      	mov	r4, r2
 8010c50:	460e      	mov	r6, r1
 8010c52:	b921      	cbnz	r1, 8010c5e <_realloc_r+0x16>
 8010c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c58:	4611      	mov	r1, r2
 8010c5a:	f7ff bbb3 	b.w	80103c4 <_malloc_r>
 8010c5e:	b92a      	cbnz	r2, 8010c6c <_realloc_r+0x24>
 8010c60:	f7ff fb44 	bl	80102ec <_free_r>
 8010c64:	4625      	mov	r5, r4
 8010c66:	4628      	mov	r0, r5
 8010c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c6c:	f000 fd18 	bl	80116a0 <_malloc_usable_size_r>
 8010c70:	4284      	cmp	r4, r0
 8010c72:	4607      	mov	r7, r0
 8010c74:	d802      	bhi.n	8010c7c <_realloc_r+0x34>
 8010c76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010c7a:	d812      	bhi.n	8010ca2 <_realloc_r+0x5a>
 8010c7c:	4621      	mov	r1, r4
 8010c7e:	4640      	mov	r0, r8
 8010c80:	f7ff fba0 	bl	80103c4 <_malloc_r>
 8010c84:	4605      	mov	r5, r0
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d0ed      	beq.n	8010c66 <_realloc_r+0x1e>
 8010c8a:	42bc      	cmp	r4, r7
 8010c8c:	4622      	mov	r2, r4
 8010c8e:	4631      	mov	r1, r6
 8010c90:	bf28      	it	cs
 8010c92:	463a      	movcs	r2, r7
 8010c94:	f7ff fb14 	bl	80102c0 <memcpy>
 8010c98:	4631      	mov	r1, r6
 8010c9a:	4640      	mov	r0, r8
 8010c9c:	f7ff fb26 	bl	80102ec <_free_r>
 8010ca0:	e7e1      	b.n	8010c66 <_realloc_r+0x1e>
 8010ca2:	4635      	mov	r5, r6
 8010ca4:	e7df      	b.n	8010c66 <_realloc_r+0x1e>

08010ca6 <__ssputs_r>:
 8010ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010caa:	688e      	ldr	r6, [r1, #8]
 8010cac:	429e      	cmp	r6, r3
 8010cae:	4682      	mov	sl, r0
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	4690      	mov	r8, r2
 8010cb4:	461f      	mov	r7, r3
 8010cb6:	d838      	bhi.n	8010d2a <__ssputs_r+0x84>
 8010cb8:	898a      	ldrh	r2, [r1, #12]
 8010cba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010cbe:	d032      	beq.n	8010d26 <__ssputs_r+0x80>
 8010cc0:	6825      	ldr	r5, [r4, #0]
 8010cc2:	6909      	ldr	r1, [r1, #16]
 8010cc4:	eba5 0901 	sub.w	r9, r5, r1
 8010cc8:	6965      	ldr	r5, [r4, #20]
 8010cca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	444b      	add	r3, r9
 8010cd6:	106d      	asrs	r5, r5, #1
 8010cd8:	429d      	cmp	r5, r3
 8010cda:	bf38      	it	cc
 8010cdc:	461d      	movcc	r5, r3
 8010cde:	0553      	lsls	r3, r2, #21
 8010ce0:	d531      	bpl.n	8010d46 <__ssputs_r+0xa0>
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	f7ff fb6e 	bl	80103c4 <_malloc_r>
 8010ce8:	4606      	mov	r6, r0
 8010cea:	b950      	cbnz	r0, 8010d02 <__ssputs_r+0x5c>
 8010cec:	230c      	movs	r3, #12
 8010cee:	f8ca 3000 	str.w	r3, [sl]
 8010cf2:	89a3      	ldrh	r3, [r4, #12]
 8010cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cf8:	81a3      	strh	r3, [r4, #12]
 8010cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8010cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d02:	6921      	ldr	r1, [r4, #16]
 8010d04:	464a      	mov	r2, r9
 8010d06:	f7ff fadb 	bl	80102c0 <memcpy>
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d14:	81a3      	strh	r3, [r4, #12]
 8010d16:	6126      	str	r6, [r4, #16]
 8010d18:	6165      	str	r5, [r4, #20]
 8010d1a:	444e      	add	r6, r9
 8010d1c:	eba5 0509 	sub.w	r5, r5, r9
 8010d20:	6026      	str	r6, [r4, #0]
 8010d22:	60a5      	str	r5, [r4, #8]
 8010d24:	463e      	mov	r6, r7
 8010d26:	42be      	cmp	r6, r7
 8010d28:	d900      	bls.n	8010d2c <__ssputs_r+0x86>
 8010d2a:	463e      	mov	r6, r7
 8010d2c:	6820      	ldr	r0, [r4, #0]
 8010d2e:	4632      	mov	r2, r6
 8010d30:	4641      	mov	r1, r8
 8010d32:	f000 fc9b 	bl	801166c <memmove>
 8010d36:	68a3      	ldr	r3, [r4, #8]
 8010d38:	1b9b      	subs	r3, r3, r6
 8010d3a:	60a3      	str	r3, [r4, #8]
 8010d3c:	6823      	ldr	r3, [r4, #0]
 8010d3e:	4433      	add	r3, r6
 8010d40:	6023      	str	r3, [r4, #0]
 8010d42:	2000      	movs	r0, #0
 8010d44:	e7db      	b.n	8010cfe <__ssputs_r+0x58>
 8010d46:	462a      	mov	r2, r5
 8010d48:	f7ff ff7e 	bl	8010c48 <_realloc_r>
 8010d4c:	4606      	mov	r6, r0
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d1e1      	bne.n	8010d16 <__ssputs_r+0x70>
 8010d52:	6921      	ldr	r1, [r4, #16]
 8010d54:	4650      	mov	r0, sl
 8010d56:	f7ff fac9 	bl	80102ec <_free_r>
 8010d5a:	e7c7      	b.n	8010cec <__ssputs_r+0x46>

08010d5c <_svfiprintf_r>:
 8010d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d60:	4698      	mov	r8, r3
 8010d62:	898b      	ldrh	r3, [r1, #12]
 8010d64:	061b      	lsls	r3, r3, #24
 8010d66:	b09d      	sub	sp, #116	; 0x74
 8010d68:	4607      	mov	r7, r0
 8010d6a:	460d      	mov	r5, r1
 8010d6c:	4614      	mov	r4, r2
 8010d6e:	d50e      	bpl.n	8010d8e <_svfiprintf_r+0x32>
 8010d70:	690b      	ldr	r3, [r1, #16]
 8010d72:	b963      	cbnz	r3, 8010d8e <_svfiprintf_r+0x32>
 8010d74:	2140      	movs	r1, #64	; 0x40
 8010d76:	f7ff fb25 	bl	80103c4 <_malloc_r>
 8010d7a:	6028      	str	r0, [r5, #0]
 8010d7c:	6128      	str	r0, [r5, #16]
 8010d7e:	b920      	cbnz	r0, 8010d8a <_svfiprintf_r+0x2e>
 8010d80:	230c      	movs	r3, #12
 8010d82:	603b      	str	r3, [r7, #0]
 8010d84:	f04f 30ff 	mov.w	r0, #4294967295
 8010d88:	e0d1      	b.n	8010f2e <_svfiprintf_r+0x1d2>
 8010d8a:	2340      	movs	r3, #64	; 0x40
 8010d8c:	616b      	str	r3, [r5, #20]
 8010d8e:	2300      	movs	r3, #0
 8010d90:	9309      	str	r3, [sp, #36]	; 0x24
 8010d92:	2320      	movs	r3, #32
 8010d94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d9c:	2330      	movs	r3, #48	; 0x30
 8010d9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010f48 <_svfiprintf_r+0x1ec>
 8010da2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010da6:	f04f 0901 	mov.w	r9, #1
 8010daa:	4623      	mov	r3, r4
 8010dac:	469a      	mov	sl, r3
 8010dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010db2:	b10a      	cbz	r2, 8010db8 <_svfiprintf_r+0x5c>
 8010db4:	2a25      	cmp	r2, #37	; 0x25
 8010db6:	d1f9      	bne.n	8010dac <_svfiprintf_r+0x50>
 8010db8:	ebba 0b04 	subs.w	fp, sl, r4
 8010dbc:	d00b      	beq.n	8010dd6 <_svfiprintf_r+0x7a>
 8010dbe:	465b      	mov	r3, fp
 8010dc0:	4622      	mov	r2, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	4638      	mov	r0, r7
 8010dc6:	f7ff ff6e 	bl	8010ca6 <__ssputs_r>
 8010dca:	3001      	adds	r0, #1
 8010dcc:	f000 80aa 	beq.w	8010f24 <_svfiprintf_r+0x1c8>
 8010dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dd2:	445a      	add	r2, fp
 8010dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8010dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f000 80a2 	beq.w	8010f24 <_svfiprintf_r+0x1c8>
 8010de0:	2300      	movs	r3, #0
 8010de2:	f04f 32ff 	mov.w	r2, #4294967295
 8010de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dea:	f10a 0a01 	add.w	sl, sl, #1
 8010dee:	9304      	str	r3, [sp, #16]
 8010df0:	9307      	str	r3, [sp, #28]
 8010df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010df6:	931a      	str	r3, [sp, #104]	; 0x68
 8010df8:	4654      	mov	r4, sl
 8010dfa:	2205      	movs	r2, #5
 8010dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e00:	4851      	ldr	r0, [pc, #324]	; (8010f48 <_svfiprintf_r+0x1ec>)
 8010e02:	f7ef f9f5 	bl	80001f0 <memchr>
 8010e06:	9a04      	ldr	r2, [sp, #16]
 8010e08:	b9d8      	cbnz	r0, 8010e42 <_svfiprintf_r+0xe6>
 8010e0a:	06d0      	lsls	r0, r2, #27
 8010e0c:	bf44      	itt	mi
 8010e0e:	2320      	movmi	r3, #32
 8010e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e14:	0711      	lsls	r1, r2, #28
 8010e16:	bf44      	itt	mi
 8010e18:	232b      	movmi	r3, #43	; 0x2b
 8010e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8010e22:	2b2a      	cmp	r3, #42	; 0x2a
 8010e24:	d015      	beq.n	8010e52 <_svfiprintf_r+0xf6>
 8010e26:	9a07      	ldr	r2, [sp, #28]
 8010e28:	4654      	mov	r4, sl
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	f04f 0c0a 	mov.w	ip, #10
 8010e30:	4621      	mov	r1, r4
 8010e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e36:	3b30      	subs	r3, #48	; 0x30
 8010e38:	2b09      	cmp	r3, #9
 8010e3a:	d94e      	bls.n	8010eda <_svfiprintf_r+0x17e>
 8010e3c:	b1b0      	cbz	r0, 8010e6c <_svfiprintf_r+0x110>
 8010e3e:	9207      	str	r2, [sp, #28]
 8010e40:	e014      	b.n	8010e6c <_svfiprintf_r+0x110>
 8010e42:	eba0 0308 	sub.w	r3, r0, r8
 8010e46:	fa09 f303 	lsl.w	r3, r9, r3
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	9304      	str	r3, [sp, #16]
 8010e4e:	46a2      	mov	sl, r4
 8010e50:	e7d2      	b.n	8010df8 <_svfiprintf_r+0x9c>
 8010e52:	9b03      	ldr	r3, [sp, #12]
 8010e54:	1d19      	adds	r1, r3, #4
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	9103      	str	r1, [sp, #12]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	bfbb      	ittet	lt
 8010e5e:	425b      	neglt	r3, r3
 8010e60:	f042 0202 	orrlt.w	r2, r2, #2
 8010e64:	9307      	strge	r3, [sp, #28]
 8010e66:	9307      	strlt	r3, [sp, #28]
 8010e68:	bfb8      	it	lt
 8010e6a:	9204      	strlt	r2, [sp, #16]
 8010e6c:	7823      	ldrb	r3, [r4, #0]
 8010e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8010e70:	d10c      	bne.n	8010e8c <_svfiprintf_r+0x130>
 8010e72:	7863      	ldrb	r3, [r4, #1]
 8010e74:	2b2a      	cmp	r3, #42	; 0x2a
 8010e76:	d135      	bne.n	8010ee4 <_svfiprintf_r+0x188>
 8010e78:	9b03      	ldr	r3, [sp, #12]
 8010e7a:	1d1a      	adds	r2, r3, #4
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	9203      	str	r2, [sp, #12]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	bfb8      	it	lt
 8010e84:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e88:	3402      	adds	r4, #2
 8010e8a:	9305      	str	r3, [sp, #20]
 8010e8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010f58 <_svfiprintf_r+0x1fc>
 8010e90:	7821      	ldrb	r1, [r4, #0]
 8010e92:	2203      	movs	r2, #3
 8010e94:	4650      	mov	r0, sl
 8010e96:	f7ef f9ab 	bl	80001f0 <memchr>
 8010e9a:	b140      	cbz	r0, 8010eae <_svfiprintf_r+0x152>
 8010e9c:	2340      	movs	r3, #64	; 0x40
 8010e9e:	eba0 000a 	sub.w	r0, r0, sl
 8010ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8010ea6:	9b04      	ldr	r3, [sp, #16]
 8010ea8:	4303      	orrs	r3, r0
 8010eaa:	3401      	adds	r4, #1
 8010eac:	9304      	str	r3, [sp, #16]
 8010eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eb2:	4826      	ldr	r0, [pc, #152]	; (8010f4c <_svfiprintf_r+0x1f0>)
 8010eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010eb8:	2206      	movs	r2, #6
 8010eba:	f7ef f999 	bl	80001f0 <memchr>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	d038      	beq.n	8010f34 <_svfiprintf_r+0x1d8>
 8010ec2:	4b23      	ldr	r3, [pc, #140]	; (8010f50 <_svfiprintf_r+0x1f4>)
 8010ec4:	bb1b      	cbnz	r3, 8010f0e <_svfiprintf_r+0x1b2>
 8010ec6:	9b03      	ldr	r3, [sp, #12]
 8010ec8:	3307      	adds	r3, #7
 8010eca:	f023 0307 	bic.w	r3, r3, #7
 8010ece:	3308      	adds	r3, #8
 8010ed0:	9303      	str	r3, [sp, #12]
 8010ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ed4:	4433      	add	r3, r6
 8010ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ed8:	e767      	b.n	8010daa <_svfiprintf_r+0x4e>
 8010eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ede:	460c      	mov	r4, r1
 8010ee0:	2001      	movs	r0, #1
 8010ee2:	e7a5      	b.n	8010e30 <_svfiprintf_r+0xd4>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	3401      	adds	r4, #1
 8010ee8:	9305      	str	r3, [sp, #20]
 8010eea:	4619      	mov	r1, r3
 8010eec:	f04f 0c0a 	mov.w	ip, #10
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ef6:	3a30      	subs	r2, #48	; 0x30
 8010ef8:	2a09      	cmp	r2, #9
 8010efa:	d903      	bls.n	8010f04 <_svfiprintf_r+0x1a8>
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d0c5      	beq.n	8010e8c <_svfiprintf_r+0x130>
 8010f00:	9105      	str	r1, [sp, #20]
 8010f02:	e7c3      	b.n	8010e8c <_svfiprintf_r+0x130>
 8010f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f08:	4604      	mov	r4, r0
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e7f0      	b.n	8010ef0 <_svfiprintf_r+0x194>
 8010f0e:	ab03      	add	r3, sp, #12
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	462a      	mov	r2, r5
 8010f14:	4b0f      	ldr	r3, [pc, #60]	; (8010f54 <_svfiprintf_r+0x1f8>)
 8010f16:	a904      	add	r1, sp, #16
 8010f18:	4638      	mov	r0, r7
 8010f1a:	f3af 8000 	nop.w
 8010f1e:	1c42      	adds	r2, r0, #1
 8010f20:	4606      	mov	r6, r0
 8010f22:	d1d6      	bne.n	8010ed2 <_svfiprintf_r+0x176>
 8010f24:	89ab      	ldrh	r3, [r5, #12]
 8010f26:	065b      	lsls	r3, r3, #25
 8010f28:	f53f af2c 	bmi.w	8010d84 <_svfiprintf_r+0x28>
 8010f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f2e:	b01d      	add	sp, #116	; 0x74
 8010f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f34:	ab03      	add	r3, sp, #12
 8010f36:	9300      	str	r3, [sp, #0]
 8010f38:	462a      	mov	r2, r5
 8010f3a:	4b06      	ldr	r3, [pc, #24]	; (8010f54 <_svfiprintf_r+0x1f8>)
 8010f3c:	a904      	add	r1, sp, #16
 8010f3e:	4638      	mov	r0, r7
 8010f40:	f000 f9d4 	bl	80112ec <_printf_i>
 8010f44:	e7eb      	b.n	8010f1e <_svfiprintf_r+0x1c2>
 8010f46:	bf00      	nop
 8010f48:	08012164 	.word	0x08012164
 8010f4c:	0801216e 	.word	0x0801216e
 8010f50:	00000000 	.word	0x00000000
 8010f54:	08010ca7 	.word	0x08010ca7
 8010f58:	0801216a 	.word	0x0801216a

08010f5c <__sfputc_r>:
 8010f5c:	6893      	ldr	r3, [r2, #8]
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	b410      	push	{r4}
 8010f64:	6093      	str	r3, [r2, #8]
 8010f66:	da08      	bge.n	8010f7a <__sfputc_r+0x1e>
 8010f68:	6994      	ldr	r4, [r2, #24]
 8010f6a:	42a3      	cmp	r3, r4
 8010f6c:	db01      	blt.n	8010f72 <__sfputc_r+0x16>
 8010f6e:	290a      	cmp	r1, #10
 8010f70:	d103      	bne.n	8010f7a <__sfputc_r+0x1e>
 8010f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f76:	f7ff bb7b 	b.w	8010670 <__swbuf_r>
 8010f7a:	6813      	ldr	r3, [r2, #0]
 8010f7c:	1c58      	adds	r0, r3, #1
 8010f7e:	6010      	str	r0, [r2, #0]
 8010f80:	7019      	strb	r1, [r3, #0]
 8010f82:	4608      	mov	r0, r1
 8010f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f88:	4770      	bx	lr

08010f8a <__sfputs_r>:
 8010f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	460f      	mov	r7, r1
 8010f90:	4614      	mov	r4, r2
 8010f92:	18d5      	adds	r5, r2, r3
 8010f94:	42ac      	cmp	r4, r5
 8010f96:	d101      	bne.n	8010f9c <__sfputs_r+0x12>
 8010f98:	2000      	movs	r0, #0
 8010f9a:	e007      	b.n	8010fac <__sfputs_r+0x22>
 8010f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fa0:	463a      	mov	r2, r7
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	f7ff ffda 	bl	8010f5c <__sfputc_r>
 8010fa8:	1c43      	adds	r3, r0, #1
 8010faa:	d1f3      	bne.n	8010f94 <__sfputs_r+0xa>
 8010fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010fb0 <_vfiprintf_r>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	460d      	mov	r5, r1
 8010fb6:	b09d      	sub	sp, #116	; 0x74
 8010fb8:	4614      	mov	r4, r2
 8010fba:	4698      	mov	r8, r3
 8010fbc:	4606      	mov	r6, r0
 8010fbe:	b118      	cbz	r0, 8010fc8 <_vfiprintf_r+0x18>
 8010fc0:	6983      	ldr	r3, [r0, #24]
 8010fc2:	b90b      	cbnz	r3, 8010fc8 <_vfiprintf_r+0x18>
 8010fc4:	f7ff fd2e 	bl	8010a24 <__sinit>
 8010fc8:	4b89      	ldr	r3, [pc, #548]	; (80111f0 <_vfiprintf_r+0x240>)
 8010fca:	429d      	cmp	r5, r3
 8010fcc:	d11b      	bne.n	8011006 <_vfiprintf_r+0x56>
 8010fce:	6875      	ldr	r5, [r6, #4]
 8010fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fd2:	07d9      	lsls	r1, r3, #31
 8010fd4:	d405      	bmi.n	8010fe2 <_vfiprintf_r+0x32>
 8010fd6:	89ab      	ldrh	r3, [r5, #12]
 8010fd8:	059a      	lsls	r2, r3, #22
 8010fda:	d402      	bmi.n	8010fe2 <_vfiprintf_r+0x32>
 8010fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fde:	f7ff fdbf 	bl	8010b60 <__retarget_lock_acquire_recursive>
 8010fe2:	89ab      	ldrh	r3, [r5, #12]
 8010fe4:	071b      	lsls	r3, r3, #28
 8010fe6:	d501      	bpl.n	8010fec <_vfiprintf_r+0x3c>
 8010fe8:	692b      	ldr	r3, [r5, #16]
 8010fea:	b9eb      	cbnz	r3, 8011028 <_vfiprintf_r+0x78>
 8010fec:	4629      	mov	r1, r5
 8010fee:	4630      	mov	r0, r6
 8010ff0:	f7ff fb90 	bl	8010714 <__swsetup_r>
 8010ff4:	b1c0      	cbz	r0, 8011028 <_vfiprintf_r+0x78>
 8010ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ff8:	07dc      	lsls	r4, r3, #31
 8010ffa:	d50e      	bpl.n	801101a <_vfiprintf_r+0x6a>
 8010ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8011000:	b01d      	add	sp, #116	; 0x74
 8011002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011006:	4b7b      	ldr	r3, [pc, #492]	; (80111f4 <_vfiprintf_r+0x244>)
 8011008:	429d      	cmp	r5, r3
 801100a:	d101      	bne.n	8011010 <_vfiprintf_r+0x60>
 801100c:	68b5      	ldr	r5, [r6, #8]
 801100e:	e7df      	b.n	8010fd0 <_vfiprintf_r+0x20>
 8011010:	4b79      	ldr	r3, [pc, #484]	; (80111f8 <_vfiprintf_r+0x248>)
 8011012:	429d      	cmp	r5, r3
 8011014:	bf08      	it	eq
 8011016:	68f5      	ldreq	r5, [r6, #12]
 8011018:	e7da      	b.n	8010fd0 <_vfiprintf_r+0x20>
 801101a:	89ab      	ldrh	r3, [r5, #12]
 801101c:	0598      	lsls	r0, r3, #22
 801101e:	d4ed      	bmi.n	8010ffc <_vfiprintf_r+0x4c>
 8011020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011022:	f7ff fd9e 	bl	8010b62 <__retarget_lock_release_recursive>
 8011026:	e7e9      	b.n	8010ffc <_vfiprintf_r+0x4c>
 8011028:	2300      	movs	r3, #0
 801102a:	9309      	str	r3, [sp, #36]	; 0x24
 801102c:	2320      	movs	r3, #32
 801102e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011032:	f8cd 800c 	str.w	r8, [sp, #12]
 8011036:	2330      	movs	r3, #48	; 0x30
 8011038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80111fc <_vfiprintf_r+0x24c>
 801103c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011040:	f04f 0901 	mov.w	r9, #1
 8011044:	4623      	mov	r3, r4
 8011046:	469a      	mov	sl, r3
 8011048:	f813 2b01 	ldrb.w	r2, [r3], #1
 801104c:	b10a      	cbz	r2, 8011052 <_vfiprintf_r+0xa2>
 801104e:	2a25      	cmp	r2, #37	; 0x25
 8011050:	d1f9      	bne.n	8011046 <_vfiprintf_r+0x96>
 8011052:	ebba 0b04 	subs.w	fp, sl, r4
 8011056:	d00b      	beq.n	8011070 <_vfiprintf_r+0xc0>
 8011058:	465b      	mov	r3, fp
 801105a:	4622      	mov	r2, r4
 801105c:	4629      	mov	r1, r5
 801105e:	4630      	mov	r0, r6
 8011060:	f7ff ff93 	bl	8010f8a <__sfputs_r>
 8011064:	3001      	adds	r0, #1
 8011066:	f000 80aa 	beq.w	80111be <_vfiprintf_r+0x20e>
 801106a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801106c:	445a      	add	r2, fp
 801106e:	9209      	str	r2, [sp, #36]	; 0x24
 8011070:	f89a 3000 	ldrb.w	r3, [sl]
 8011074:	2b00      	cmp	r3, #0
 8011076:	f000 80a2 	beq.w	80111be <_vfiprintf_r+0x20e>
 801107a:	2300      	movs	r3, #0
 801107c:	f04f 32ff 	mov.w	r2, #4294967295
 8011080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011084:	f10a 0a01 	add.w	sl, sl, #1
 8011088:	9304      	str	r3, [sp, #16]
 801108a:	9307      	str	r3, [sp, #28]
 801108c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011090:	931a      	str	r3, [sp, #104]	; 0x68
 8011092:	4654      	mov	r4, sl
 8011094:	2205      	movs	r2, #5
 8011096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801109a:	4858      	ldr	r0, [pc, #352]	; (80111fc <_vfiprintf_r+0x24c>)
 801109c:	f7ef f8a8 	bl	80001f0 <memchr>
 80110a0:	9a04      	ldr	r2, [sp, #16]
 80110a2:	b9d8      	cbnz	r0, 80110dc <_vfiprintf_r+0x12c>
 80110a4:	06d1      	lsls	r1, r2, #27
 80110a6:	bf44      	itt	mi
 80110a8:	2320      	movmi	r3, #32
 80110aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110ae:	0713      	lsls	r3, r2, #28
 80110b0:	bf44      	itt	mi
 80110b2:	232b      	movmi	r3, #43	; 0x2b
 80110b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110b8:	f89a 3000 	ldrb.w	r3, [sl]
 80110bc:	2b2a      	cmp	r3, #42	; 0x2a
 80110be:	d015      	beq.n	80110ec <_vfiprintf_r+0x13c>
 80110c0:	9a07      	ldr	r2, [sp, #28]
 80110c2:	4654      	mov	r4, sl
 80110c4:	2000      	movs	r0, #0
 80110c6:	f04f 0c0a 	mov.w	ip, #10
 80110ca:	4621      	mov	r1, r4
 80110cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110d0:	3b30      	subs	r3, #48	; 0x30
 80110d2:	2b09      	cmp	r3, #9
 80110d4:	d94e      	bls.n	8011174 <_vfiprintf_r+0x1c4>
 80110d6:	b1b0      	cbz	r0, 8011106 <_vfiprintf_r+0x156>
 80110d8:	9207      	str	r2, [sp, #28]
 80110da:	e014      	b.n	8011106 <_vfiprintf_r+0x156>
 80110dc:	eba0 0308 	sub.w	r3, r0, r8
 80110e0:	fa09 f303 	lsl.w	r3, r9, r3
 80110e4:	4313      	orrs	r3, r2
 80110e6:	9304      	str	r3, [sp, #16]
 80110e8:	46a2      	mov	sl, r4
 80110ea:	e7d2      	b.n	8011092 <_vfiprintf_r+0xe2>
 80110ec:	9b03      	ldr	r3, [sp, #12]
 80110ee:	1d19      	adds	r1, r3, #4
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	9103      	str	r1, [sp, #12]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	bfbb      	ittet	lt
 80110f8:	425b      	neglt	r3, r3
 80110fa:	f042 0202 	orrlt.w	r2, r2, #2
 80110fe:	9307      	strge	r3, [sp, #28]
 8011100:	9307      	strlt	r3, [sp, #28]
 8011102:	bfb8      	it	lt
 8011104:	9204      	strlt	r2, [sp, #16]
 8011106:	7823      	ldrb	r3, [r4, #0]
 8011108:	2b2e      	cmp	r3, #46	; 0x2e
 801110a:	d10c      	bne.n	8011126 <_vfiprintf_r+0x176>
 801110c:	7863      	ldrb	r3, [r4, #1]
 801110e:	2b2a      	cmp	r3, #42	; 0x2a
 8011110:	d135      	bne.n	801117e <_vfiprintf_r+0x1ce>
 8011112:	9b03      	ldr	r3, [sp, #12]
 8011114:	1d1a      	adds	r2, r3, #4
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	9203      	str	r2, [sp, #12]
 801111a:	2b00      	cmp	r3, #0
 801111c:	bfb8      	it	lt
 801111e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011122:	3402      	adds	r4, #2
 8011124:	9305      	str	r3, [sp, #20]
 8011126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801120c <_vfiprintf_r+0x25c>
 801112a:	7821      	ldrb	r1, [r4, #0]
 801112c:	2203      	movs	r2, #3
 801112e:	4650      	mov	r0, sl
 8011130:	f7ef f85e 	bl	80001f0 <memchr>
 8011134:	b140      	cbz	r0, 8011148 <_vfiprintf_r+0x198>
 8011136:	2340      	movs	r3, #64	; 0x40
 8011138:	eba0 000a 	sub.w	r0, r0, sl
 801113c:	fa03 f000 	lsl.w	r0, r3, r0
 8011140:	9b04      	ldr	r3, [sp, #16]
 8011142:	4303      	orrs	r3, r0
 8011144:	3401      	adds	r4, #1
 8011146:	9304      	str	r3, [sp, #16]
 8011148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801114c:	482c      	ldr	r0, [pc, #176]	; (8011200 <_vfiprintf_r+0x250>)
 801114e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011152:	2206      	movs	r2, #6
 8011154:	f7ef f84c 	bl	80001f0 <memchr>
 8011158:	2800      	cmp	r0, #0
 801115a:	d03f      	beq.n	80111dc <_vfiprintf_r+0x22c>
 801115c:	4b29      	ldr	r3, [pc, #164]	; (8011204 <_vfiprintf_r+0x254>)
 801115e:	bb1b      	cbnz	r3, 80111a8 <_vfiprintf_r+0x1f8>
 8011160:	9b03      	ldr	r3, [sp, #12]
 8011162:	3307      	adds	r3, #7
 8011164:	f023 0307 	bic.w	r3, r3, #7
 8011168:	3308      	adds	r3, #8
 801116a:	9303      	str	r3, [sp, #12]
 801116c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801116e:	443b      	add	r3, r7
 8011170:	9309      	str	r3, [sp, #36]	; 0x24
 8011172:	e767      	b.n	8011044 <_vfiprintf_r+0x94>
 8011174:	fb0c 3202 	mla	r2, ip, r2, r3
 8011178:	460c      	mov	r4, r1
 801117a:	2001      	movs	r0, #1
 801117c:	e7a5      	b.n	80110ca <_vfiprintf_r+0x11a>
 801117e:	2300      	movs	r3, #0
 8011180:	3401      	adds	r4, #1
 8011182:	9305      	str	r3, [sp, #20]
 8011184:	4619      	mov	r1, r3
 8011186:	f04f 0c0a 	mov.w	ip, #10
 801118a:	4620      	mov	r0, r4
 801118c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011190:	3a30      	subs	r2, #48	; 0x30
 8011192:	2a09      	cmp	r2, #9
 8011194:	d903      	bls.n	801119e <_vfiprintf_r+0x1ee>
 8011196:	2b00      	cmp	r3, #0
 8011198:	d0c5      	beq.n	8011126 <_vfiprintf_r+0x176>
 801119a:	9105      	str	r1, [sp, #20]
 801119c:	e7c3      	b.n	8011126 <_vfiprintf_r+0x176>
 801119e:	fb0c 2101 	mla	r1, ip, r1, r2
 80111a2:	4604      	mov	r4, r0
 80111a4:	2301      	movs	r3, #1
 80111a6:	e7f0      	b.n	801118a <_vfiprintf_r+0x1da>
 80111a8:	ab03      	add	r3, sp, #12
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	462a      	mov	r2, r5
 80111ae:	4b16      	ldr	r3, [pc, #88]	; (8011208 <_vfiprintf_r+0x258>)
 80111b0:	a904      	add	r1, sp, #16
 80111b2:	4630      	mov	r0, r6
 80111b4:	f3af 8000 	nop.w
 80111b8:	4607      	mov	r7, r0
 80111ba:	1c78      	adds	r0, r7, #1
 80111bc:	d1d6      	bne.n	801116c <_vfiprintf_r+0x1bc>
 80111be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111c0:	07d9      	lsls	r1, r3, #31
 80111c2:	d405      	bmi.n	80111d0 <_vfiprintf_r+0x220>
 80111c4:	89ab      	ldrh	r3, [r5, #12]
 80111c6:	059a      	lsls	r2, r3, #22
 80111c8:	d402      	bmi.n	80111d0 <_vfiprintf_r+0x220>
 80111ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111cc:	f7ff fcc9 	bl	8010b62 <__retarget_lock_release_recursive>
 80111d0:	89ab      	ldrh	r3, [r5, #12]
 80111d2:	065b      	lsls	r3, r3, #25
 80111d4:	f53f af12 	bmi.w	8010ffc <_vfiprintf_r+0x4c>
 80111d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111da:	e711      	b.n	8011000 <_vfiprintf_r+0x50>
 80111dc:	ab03      	add	r3, sp, #12
 80111de:	9300      	str	r3, [sp, #0]
 80111e0:	462a      	mov	r2, r5
 80111e2:	4b09      	ldr	r3, [pc, #36]	; (8011208 <_vfiprintf_r+0x258>)
 80111e4:	a904      	add	r1, sp, #16
 80111e6:	4630      	mov	r0, r6
 80111e8:	f000 f880 	bl	80112ec <_printf_i>
 80111ec:	e7e4      	b.n	80111b8 <_vfiprintf_r+0x208>
 80111ee:	bf00      	nop
 80111f0:	08012124 	.word	0x08012124
 80111f4:	08012144 	.word	0x08012144
 80111f8:	08012104 	.word	0x08012104
 80111fc:	08012164 	.word	0x08012164
 8011200:	0801216e 	.word	0x0801216e
 8011204:	00000000 	.word	0x00000000
 8011208:	08010f8b 	.word	0x08010f8b
 801120c:	0801216a 	.word	0x0801216a

08011210 <_printf_common>:
 8011210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011214:	4616      	mov	r6, r2
 8011216:	4699      	mov	r9, r3
 8011218:	688a      	ldr	r2, [r1, #8]
 801121a:	690b      	ldr	r3, [r1, #16]
 801121c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011220:	4293      	cmp	r3, r2
 8011222:	bfb8      	it	lt
 8011224:	4613      	movlt	r3, r2
 8011226:	6033      	str	r3, [r6, #0]
 8011228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801122c:	4607      	mov	r7, r0
 801122e:	460c      	mov	r4, r1
 8011230:	b10a      	cbz	r2, 8011236 <_printf_common+0x26>
 8011232:	3301      	adds	r3, #1
 8011234:	6033      	str	r3, [r6, #0]
 8011236:	6823      	ldr	r3, [r4, #0]
 8011238:	0699      	lsls	r1, r3, #26
 801123a:	bf42      	ittt	mi
 801123c:	6833      	ldrmi	r3, [r6, #0]
 801123e:	3302      	addmi	r3, #2
 8011240:	6033      	strmi	r3, [r6, #0]
 8011242:	6825      	ldr	r5, [r4, #0]
 8011244:	f015 0506 	ands.w	r5, r5, #6
 8011248:	d106      	bne.n	8011258 <_printf_common+0x48>
 801124a:	f104 0a19 	add.w	sl, r4, #25
 801124e:	68e3      	ldr	r3, [r4, #12]
 8011250:	6832      	ldr	r2, [r6, #0]
 8011252:	1a9b      	subs	r3, r3, r2
 8011254:	42ab      	cmp	r3, r5
 8011256:	dc26      	bgt.n	80112a6 <_printf_common+0x96>
 8011258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801125c:	1e13      	subs	r3, r2, #0
 801125e:	6822      	ldr	r2, [r4, #0]
 8011260:	bf18      	it	ne
 8011262:	2301      	movne	r3, #1
 8011264:	0692      	lsls	r2, r2, #26
 8011266:	d42b      	bmi.n	80112c0 <_printf_common+0xb0>
 8011268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801126c:	4649      	mov	r1, r9
 801126e:	4638      	mov	r0, r7
 8011270:	47c0      	blx	r8
 8011272:	3001      	adds	r0, #1
 8011274:	d01e      	beq.n	80112b4 <_printf_common+0xa4>
 8011276:	6823      	ldr	r3, [r4, #0]
 8011278:	68e5      	ldr	r5, [r4, #12]
 801127a:	6832      	ldr	r2, [r6, #0]
 801127c:	f003 0306 	and.w	r3, r3, #6
 8011280:	2b04      	cmp	r3, #4
 8011282:	bf08      	it	eq
 8011284:	1aad      	subeq	r5, r5, r2
 8011286:	68a3      	ldr	r3, [r4, #8]
 8011288:	6922      	ldr	r2, [r4, #16]
 801128a:	bf0c      	ite	eq
 801128c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011290:	2500      	movne	r5, #0
 8011292:	4293      	cmp	r3, r2
 8011294:	bfc4      	itt	gt
 8011296:	1a9b      	subgt	r3, r3, r2
 8011298:	18ed      	addgt	r5, r5, r3
 801129a:	2600      	movs	r6, #0
 801129c:	341a      	adds	r4, #26
 801129e:	42b5      	cmp	r5, r6
 80112a0:	d11a      	bne.n	80112d8 <_printf_common+0xc8>
 80112a2:	2000      	movs	r0, #0
 80112a4:	e008      	b.n	80112b8 <_printf_common+0xa8>
 80112a6:	2301      	movs	r3, #1
 80112a8:	4652      	mov	r2, sl
 80112aa:	4649      	mov	r1, r9
 80112ac:	4638      	mov	r0, r7
 80112ae:	47c0      	blx	r8
 80112b0:	3001      	adds	r0, #1
 80112b2:	d103      	bne.n	80112bc <_printf_common+0xac>
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295
 80112b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112bc:	3501      	adds	r5, #1
 80112be:	e7c6      	b.n	801124e <_printf_common+0x3e>
 80112c0:	18e1      	adds	r1, r4, r3
 80112c2:	1c5a      	adds	r2, r3, #1
 80112c4:	2030      	movs	r0, #48	; 0x30
 80112c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112ca:	4422      	add	r2, r4
 80112cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112d4:	3302      	adds	r3, #2
 80112d6:	e7c7      	b.n	8011268 <_printf_common+0x58>
 80112d8:	2301      	movs	r3, #1
 80112da:	4622      	mov	r2, r4
 80112dc:	4649      	mov	r1, r9
 80112de:	4638      	mov	r0, r7
 80112e0:	47c0      	blx	r8
 80112e2:	3001      	adds	r0, #1
 80112e4:	d0e6      	beq.n	80112b4 <_printf_common+0xa4>
 80112e6:	3601      	adds	r6, #1
 80112e8:	e7d9      	b.n	801129e <_printf_common+0x8e>
	...

080112ec <_printf_i>:
 80112ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112f0:	7e0f      	ldrb	r7, [r1, #24]
 80112f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112f4:	2f78      	cmp	r7, #120	; 0x78
 80112f6:	4691      	mov	r9, r2
 80112f8:	4680      	mov	r8, r0
 80112fa:	460c      	mov	r4, r1
 80112fc:	469a      	mov	sl, r3
 80112fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011302:	d807      	bhi.n	8011314 <_printf_i+0x28>
 8011304:	2f62      	cmp	r7, #98	; 0x62
 8011306:	d80a      	bhi.n	801131e <_printf_i+0x32>
 8011308:	2f00      	cmp	r7, #0
 801130a:	f000 80d8 	beq.w	80114be <_printf_i+0x1d2>
 801130e:	2f58      	cmp	r7, #88	; 0x58
 8011310:	f000 80a3 	beq.w	801145a <_printf_i+0x16e>
 8011314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801131c:	e03a      	b.n	8011394 <_printf_i+0xa8>
 801131e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011322:	2b15      	cmp	r3, #21
 8011324:	d8f6      	bhi.n	8011314 <_printf_i+0x28>
 8011326:	a101      	add	r1, pc, #4	; (adr r1, 801132c <_printf_i+0x40>)
 8011328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801132c:	08011385 	.word	0x08011385
 8011330:	08011399 	.word	0x08011399
 8011334:	08011315 	.word	0x08011315
 8011338:	08011315 	.word	0x08011315
 801133c:	08011315 	.word	0x08011315
 8011340:	08011315 	.word	0x08011315
 8011344:	08011399 	.word	0x08011399
 8011348:	08011315 	.word	0x08011315
 801134c:	08011315 	.word	0x08011315
 8011350:	08011315 	.word	0x08011315
 8011354:	08011315 	.word	0x08011315
 8011358:	080114a5 	.word	0x080114a5
 801135c:	080113c9 	.word	0x080113c9
 8011360:	08011487 	.word	0x08011487
 8011364:	08011315 	.word	0x08011315
 8011368:	08011315 	.word	0x08011315
 801136c:	080114c7 	.word	0x080114c7
 8011370:	08011315 	.word	0x08011315
 8011374:	080113c9 	.word	0x080113c9
 8011378:	08011315 	.word	0x08011315
 801137c:	08011315 	.word	0x08011315
 8011380:	0801148f 	.word	0x0801148f
 8011384:	682b      	ldr	r3, [r5, #0]
 8011386:	1d1a      	adds	r2, r3, #4
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	602a      	str	r2, [r5, #0]
 801138c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011394:	2301      	movs	r3, #1
 8011396:	e0a3      	b.n	80114e0 <_printf_i+0x1f4>
 8011398:	6820      	ldr	r0, [r4, #0]
 801139a:	6829      	ldr	r1, [r5, #0]
 801139c:	0606      	lsls	r6, r0, #24
 801139e:	f101 0304 	add.w	r3, r1, #4
 80113a2:	d50a      	bpl.n	80113ba <_printf_i+0xce>
 80113a4:	680e      	ldr	r6, [r1, #0]
 80113a6:	602b      	str	r3, [r5, #0]
 80113a8:	2e00      	cmp	r6, #0
 80113aa:	da03      	bge.n	80113b4 <_printf_i+0xc8>
 80113ac:	232d      	movs	r3, #45	; 0x2d
 80113ae:	4276      	negs	r6, r6
 80113b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113b4:	485e      	ldr	r0, [pc, #376]	; (8011530 <_printf_i+0x244>)
 80113b6:	230a      	movs	r3, #10
 80113b8:	e019      	b.n	80113ee <_printf_i+0x102>
 80113ba:	680e      	ldr	r6, [r1, #0]
 80113bc:	602b      	str	r3, [r5, #0]
 80113be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80113c2:	bf18      	it	ne
 80113c4:	b236      	sxthne	r6, r6
 80113c6:	e7ef      	b.n	80113a8 <_printf_i+0xbc>
 80113c8:	682b      	ldr	r3, [r5, #0]
 80113ca:	6820      	ldr	r0, [r4, #0]
 80113cc:	1d19      	adds	r1, r3, #4
 80113ce:	6029      	str	r1, [r5, #0]
 80113d0:	0601      	lsls	r1, r0, #24
 80113d2:	d501      	bpl.n	80113d8 <_printf_i+0xec>
 80113d4:	681e      	ldr	r6, [r3, #0]
 80113d6:	e002      	b.n	80113de <_printf_i+0xf2>
 80113d8:	0646      	lsls	r6, r0, #25
 80113da:	d5fb      	bpl.n	80113d4 <_printf_i+0xe8>
 80113dc:	881e      	ldrh	r6, [r3, #0]
 80113de:	4854      	ldr	r0, [pc, #336]	; (8011530 <_printf_i+0x244>)
 80113e0:	2f6f      	cmp	r7, #111	; 0x6f
 80113e2:	bf0c      	ite	eq
 80113e4:	2308      	moveq	r3, #8
 80113e6:	230a      	movne	r3, #10
 80113e8:	2100      	movs	r1, #0
 80113ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113ee:	6865      	ldr	r5, [r4, #4]
 80113f0:	60a5      	str	r5, [r4, #8]
 80113f2:	2d00      	cmp	r5, #0
 80113f4:	bfa2      	ittt	ge
 80113f6:	6821      	ldrge	r1, [r4, #0]
 80113f8:	f021 0104 	bicge.w	r1, r1, #4
 80113fc:	6021      	strge	r1, [r4, #0]
 80113fe:	b90e      	cbnz	r6, 8011404 <_printf_i+0x118>
 8011400:	2d00      	cmp	r5, #0
 8011402:	d04d      	beq.n	80114a0 <_printf_i+0x1b4>
 8011404:	4615      	mov	r5, r2
 8011406:	fbb6 f1f3 	udiv	r1, r6, r3
 801140a:	fb03 6711 	mls	r7, r3, r1, r6
 801140e:	5dc7      	ldrb	r7, [r0, r7]
 8011410:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011414:	4637      	mov	r7, r6
 8011416:	42bb      	cmp	r3, r7
 8011418:	460e      	mov	r6, r1
 801141a:	d9f4      	bls.n	8011406 <_printf_i+0x11a>
 801141c:	2b08      	cmp	r3, #8
 801141e:	d10b      	bne.n	8011438 <_printf_i+0x14c>
 8011420:	6823      	ldr	r3, [r4, #0]
 8011422:	07de      	lsls	r6, r3, #31
 8011424:	d508      	bpl.n	8011438 <_printf_i+0x14c>
 8011426:	6923      	ldr	r3, [r4, #16]
 8011428:	6861      	ldr	r1, [r4, #4]
 801142a:	4299      	cmp	r1, r3
 801142c:	bfde      	ittt	le
 801142e:	2330      	movle	r3, #48	; 0x30
 8011430:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011434:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011438:	1b52      	subs	r2, r2, r5
 801143a:	6122      	str	r2, [r4, #16]
 801143c:	f8cd a000 	str.w	sl, [sp]
 8011440:	464b      	mov	r3, r9
 8011442:	aa03      	add	r2, sp, #12
 8011444:	4621      	mov	r1, r4
 8011446:	4640      	mov	r0, r8
 8011448:	f7ff fee2 	bl	8011210 <_printf_common>
 801144c:	3001      	adds	r0, #1
 801144e:	d14c      	bne.n	80114ea <_printf_i+0x1fe>
 8011450:	f04f 30ff 	mov.w	r0, #4294967295
 8011454:	b004      	add	sp, #16
 8011456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801145a:	4835      	ldr	r0, [pc, #212]	; (8011530 <_printf_i+0x244>)
 801145c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011460:	6829      	ldr	r1, [r5, #0]
 8011462:	6823      	ldr	r3, [r4, #0]
 8011464:	f851 6b04 	ldr.w	r6, [r1], #4
 8011468:	6029      	str	r1, [r5, #0]
 801146a:	061d      	lsls	r5, r3, #24
 801146c:	d514      	bpl.n	8011498 <_printf_i+0x1ac>
 801146e:	07df      	lsls	r7, r3, #31
 8011470:	bf44      	itt	mi
 8011472:	f043 0320 	orrmi.w	r3, r3, #32
 8011476:	6023      	strmi	r3, [r4, #0]
 8011478:	b91e      	cbnz	r6, 8011482 <_printf_i+0x196>
 801147a:	6823      	ldr	r3, [r4, #0]
 801147c:	f023 0320 	bic.w	r3, r3, #32
 8011480:	6023      	str	r3, [r4, #0]
 8011482:	2310      	movs	r3, #16
 8011484:	e7b0      	b.n	80113e8 <_printf_i+0xfc>
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	f043 0320 	orr.w	r3, r3, #32
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	2378      	movs	r3, #120	; 0x78
 8011490:	4828      	ldr	r0, [pc, #160]	; (8011534 <_printf_i+0x248>)
 8011492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011496:	e7e3      	b.n	8011460 <_printf_i+0x174>
 8011498:	0659      	lsls	r1, r3, #25
 801149a:	bf48      	it	mi
 801149c:	b2b6      	uxthmi	r6, r6
 801149e:	e7e6      	b.n	801146e <_printf_i+0x182>
 80114a0:	4615      	mov	r5, r2
 80114a2:	e7bb      	b.n	801141c <_printf_i+0x130>
 80114a4:	682b      	ldr	r3, [r5, #0]
 80114a6:	6826      	ldr	r6, [r4, #0]
 80114a8:	6961      	ldr	r1, [r4, #20]
 80114aa:	1d18      	adds	r0, r3, #4
 80114ac:	6028      	str	r0, [r5, #0]
 80114ae:	0635      	lsls	r5, r6, #24
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	d501      	bpl.n	80114b8 <_printf_i+0x1cc>
 80114b4:	6019      	str	r1, [r3, #0]
 80114b6:	e002      	b.n	80114be <_printf_i+0x1d2>
 80114b8:	0670      	lsls	r0, r6, #25
 80114ba:	d5fb      	bpl.n	80114b4 <_printf_i+0x1c8>
 80114bc:	8019      	strh	r1, [r3, #0]
 80114be:	2300      	movs	r3, #0
 80114c0:	6123      	str	r3, [r4, #16]
 80114c2:	4615      	mov	r5, r2
 80114c4:	e7ba      	b.n	801143c <_printf_i+0x150>
 80114c6:	682b      	ldr	r3, [r5, #0]
 80114c8:	1d1a      	adds	r2, r3, #4
 80114ca:	602a      	str	r2, [r5, #0]
 80114cc:	681d      	ldr	r5, [r3, #0]
 80114ce:	6862      	ldr	r2, [r4, #4]
 80114d0:	2100      	movs	r1, #0
 80114d2:	4628      	mov	r0, r5
 80114d4:	f7ee fe8c 	bl	80001f0 <memchr>
 80114d8:	b108      	cbz	r0, 80114de <_printf_i+0x1f2>
 80114da:	1b40      	subs	r0, r0, r5
 80114dc:	6060      	str	r0, [r4, #4]
 80114de:	6863      	ldr	r3, [r4, #4]
 80114e0:	6123      	str	r3, [r4, #16]
 80114e2:	2300      	movs	r3, #0
 80114e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114e8:	e7a8      	b.n	801143c <_printf_i+0x150>
 80114ea:	6923      	ldr	r3, [r4, #16]
 80114ec:	462a      	mov	r2, r5
 80114ee:	4649      	mov	r1, r9
 80114f0:	4640      	mov	r0, r8
 80114f2:	47d0      	blx	sl
 80114f4:	3001      	adds	r0, #1
 80114f6:	d0ab      	beq.n	8011450 <_printf_i+0x164>
 80114f8:	6823      	ldr	r3, [r4, #0]
 80114fa:	079b      	lsls	r3, r3, #30
 80114fc:	d413      	bmi.n	8011526 <_printf_i+0x23a>
 80114fe:	68e0      	ldr	r0, [r4, #12]
 8011500:	9b03      	ldr	r3, [sp, #12]
 8011502:	4298      	cmp	r0, r3
 8011504:	bfb8      	it	lt
 8011506:	4618      	movlt	r0, r3
 8011508:	e7a4      	b.n	8011454 <_printf_i+0x168>
 801150a:	2301      	movs	r3, #1
 801150c:	4632      	mov	r2, r6
 801150e:	4649      	mov	r1, r9
 8011510:	4640      	mov	r0, r8
 8011512:	47d0      	blx	sl
 8011514:	3001      	adds	r0, #1
 8011516:	d09b      	beq.n	8011450 <_printf_i+0x164>
 8011518:	3501      	adds	r5, #1
 801151a:	68e3      	ldr	r3, [r4, #12]
 801151c:	9903      	ldr	r1, [sp, #12]
 801151e:	1a5b      	subs	r3, r3, r1
 8011520:	42ab      	cmp	r3, r5
 8011522:	dcf2      	bgt.n	801150a <_printf_i+0x21e>
 8011524:	e7eb      	b.n	80114fe <_printf_i+0x212>
 8011526:	2500      	movs	r5, #0
 8011528:	f104 0619 	add.w	r6, r4, #25
 801152c:	e7f5      	b.n	801151a <_printf_i+0x22e>
 801152e:	bf00      	nop
 8011530:	08012175 	.word	0x08012175
 8011534:	08012186 	.word	0x08012186

08011538 <__sread>:
 8011538:	b510      	push	{r4, lr}
 801153a:	460c      	mov	r4, r1
 801153c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011540:	f000 f8b6 	bl	80116b0 <_read_r>
 8011544:	2800      	cmp	r0, #0
 8011546:	bfab      	itete	ge
 8011548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801154a:	89a3      	ldrhlt	r3, [r4, #12]
 801154c:	181b      	addge	r3, r3, r0
 801154e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011552:	bfac      	ite	ge
 8011554:	6563      	strge	r3, [r4, #84]	; 0x54
 8011556:	81a3      	strhlt	r3, [r4, #12]
 8011558:	bd10      	pop	{r4, pc}

0801155a <__swrite>:
 801155a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801155e:	461f      	mov	r7, r3
 8011560:	898b      	ldrh	r3, [r1, #12]
 8011562:	05db      	lsls	r3, r3, #23
 8011564:	4605      	mov	r5, r0
 8011566:	460c      	mov	r4, r1
 8011568:	4616      	mov	r6, r2
 801156a:	d505      	bpl.n	8011578 <__swrite+0x1e>
 801156c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011570:	2302      	movs	r3, #2
 8011572:	2200      	movs	r2, #0
 8011574:	f000 f868 	bl	8011648 <_lseek_r>
 8011578:	89a3      	ldrh	r3, [r4, #12]
 801157a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801157e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011582:	81a3      	strh	r3, [r4, #12]
 8011584:	4632      	mov	r2, r6
 8011586:	463b      	mov	r3, r7
 8011588:	4628      	mov	r0, r5
 801158a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801158e:	f000 b817 	b.w	80115c0 <_write_r>

08011592 <__sseek>:
 8011592:	b510      	push	{r4, lr}
 8011594:	460c      	mov	r4, r1
 8011596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801159a:	f000 f855 	bl	8011648 <_lseek_r>
 801159e:	1c43      	adds	r3, r0, #1
 80115a0:	89a3      	ldrh	r3, [r4, #12]
 80115a2:	bf15      	itete	ne
 80115a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80115a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115ae:	81a3      	strheq	r3, [r4, #12]
 80115b0:	bf18      	it	ne
 80115b2:	81a3      	strhne	r3, [r4, #12]
 80115b4:	bd10      	pop	{r4, pc}

080115b6 <__sclose>:
 80115b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ba:	f000 b813 	b.w	80115e4 <_close_r>
	...

080115c0 <_write_r>:
 80115c0:	b538      	push	{r3, r4, r5, lr}
 80115c2:	4d07      	ldr	r5, [pc, #28]	; (80115e0 <_write_r+0x20>)
 80115c4:	4604      	mov	r4, r0
 80115c6:	4608      	mov	r0, r1
 80115c8:	4611      	mov	r1, r2
 80115ca:	2200      	movs	r2, #0
 80115cc:	602a      	str	r2, [r5, #0]
 80115ce:	461a      	mov	r2, r3
 80115d0:	f7f1 fcae 	bl	8002f30 <_write>
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	d102      	bne.n	80115de <_write_r+0x1e>
 80115d8:	682b      	ldr	r3, [r5, #0]
 80115da:	b103      	cbz	r3, 80115de <_write_r+0x1e>
 80115dc:	6023      	str	r3, [r4, #0]
 80115de:	bd38      	pop	{r3, r4, r5, pc}
 80115e0:	2000927c 	.word	0x2000927c

080115e4 <_close_r>:
 80115e4:	b538      	push	{r3, r4, r5, lr}
 80115e6:	4d06      	ldr	r5, [pc, #24]	; (8011600 <_close_r+0x1c>)
 80115e8:	2300      	movs	r3, #0
 80115ea:	4604      	mov	r4, r0
 80115ec:	4608      	mov	r0, r1
 80115ee:	602b      	str	r3, [r5, #0]
 80115f0:	f7f2 fe33 	bl	800425a <_close>
 80115f4:	1c43      	adds	r3, r0, #1
 80115f6:	d102      	bne.n	80115fe <_close_r+0x1a>
 80115f8:	682b      	ldr	r3, [r5, #0]
 80115fa:	b103      	cbz	r3, 80115fe <_close_r+0x1a>
 80115fc:	6023      	str	r3, [r4, #0]
 80115fe:	bd38      	pop	{r3, r4, r5, pc}
 8011600:	2000927c 	.word	0x2000927c

08011604 <_fstat_r>:
 8011604:	b538      	push	{r3, r4, r5, lr}
 8011606:	4d07      	ldr	r5, [pc, #28]	; (8011624 <_fstat_r+0x20>)
 8011608:	2300      	movs	r3, #0
 801160a:	4604      	mov	r4, r0
 801160c:	4608      	mov	r0, r1
 801160e:	4611      	mov	r1, r2
 8011610:	602b      	str	r3, [r5, #0]
 8011612:	f7f2 fe2e 	bl	8004272 <_fstat>
 8011616:	1c43      	adds	r3, r0, #1
 8011618:	d102      	bne.n	8011620 <_fstat_r+0x1c>
 801161a:	682b      	ldr	r3, [r5, #0]
 801161c:	b103      	cbz	r3, 8011620 <_fstat_r+0x1c>
 801161e:	6023      	str	r3, [r4, #0]
 8011620:	bd38      	pop	{r3, r4, r5, pc}
 8011622:	bf00      	nop
 8011624:	2000927c 	.word	0x2000927c

08011628 <_isatty_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	4d06      	ldr	r5, [pc, #24]	; (8011644 <_isatty_r+0x1c>)
 801162c:	2300      	movs	r3, #0
 801162e:	4604      	mov	r4, r0
 8011630:	4608      	mov	r0, r1
 8011632:	602b      	str	r3, [r5, #0]
 8011634:	f7f2 fe2d 	bl	8004292 <_isatty>
 8011638:	1c43      	adds	r3, r0, #1
 801163a:	d102      	bne.n	8011642 <_isatty_r+0x1a>
 801163c:	682b      	ldr	r3, [r5, #0]
 801163e:	b103      	cbz	r3, 8011642 <_isatty_r+0x1a>
 8011640:	6023      	str	r3, [r4, #0]
 8011642:	bd38      	pop	{r3, r4, r5, pc}
 8011644:	2000927c 	.word	0x2000927c

08011648 <_lseek_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	4d07      	ldr	r5, [pc, #28]	; (8011668 <_lseek_r+0x20>)
 801164c:	4604      	mov	r4, r0
 801164e:	4608      	mov	r0, r1
 8011650:	4611      	mov	r1, r2
 8011652:	2200      	movs	r2, #0
 8011654:	602a      	str	r2, [r5, #0]
 8011656:	461a      	mov	r2, r3
 8011658:	f7f2 fe26 	bl	80042a8 <_lseek>
 801165c:	1c43      	adds	r3, r0, #1
 801165e:	d102      	bne.n	8011666 <_lseek_r+0x1e>
 8011660:	682b      	ldr	r3, [r5, #0]
 8011662:	b103      	cbz	r3, 8011666 <_lseek_r+0x1e>
 8011664:	6023      	str	r3, [r4, #0]
 8011666:	bd38      	pop	{r3, r4, r5, pc}
 8011668:	2000927c 	.word	0x2000927c

0801166c <memmove>:
 801166c:	4288      	cmp	r0, r1
 801166e:	b510      	push	{r4, lr}
 8011670:	eb01 0402 	add.w	r4, r1, r2
 8011674:	d902      	bls.n	801167c <memmove+0x10>
 8011676:	4284      	cmp	r4, r0
 8011678:	4623      	mov	r3, r4
 801167a:	d807      	bhi.n	801168c <memmove+0x20>
 801167c:	1e43      	subs	r3, r0, #1
 801167e:	42a1      	cmp	r1, r4
 8011680:	d008      	beq.n	8011694 <memmove+0x28>
 8011682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011686:	f803 2f01 	strb.w	r2, [r3, #1]!
 801168a:	e7f8      	b.n	801167e <memmove+0x12>
 801168c:	4402      	add	r2, r0
 801168e:	4601      	mov	r1, r0
 8011690:	428a      	cmp	r2, r1
 8011692:	d100      	bne.n	8011696 <memmove+0x2a>
 8011694:	bd10      	pop	{r4, pc}
 8011696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801169a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801169e:	e7f7      	b.n	8011690 <memmove+0x24>

080116a0 <_malloc_usable_size_r>:
 80116a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116a4:	1f18      	subs	r0, r3, #4
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	bfbc      	itt	lt
 80116aa:	580b      	ldrlt	r3, [r1, r0]
 80116ac:	18c0      	addlt	r0, r0, r3
 80116ae:	4770      	bx	lr

080116b0 <_read_r>:
 80116b0:	b538      	push	{r3, r4, r5, lr}
 80116b2:	4d07      	ldr	r5, [pc, #28]	; (80116d0 <_read_r+0x20>)
 80116b4:	4604      	mov	r4, r0
 80116b6:	4608      	mov	r0, r1
 80116b8:	4611      	mov	r1, r2
 80116ba:	2200      	movs	r2, #0
 80116bc:	602a      	str	r2, [r5, #0]
 80116be:	461a      	mov	r2, r3
 80116c0:	f7f2 fdae 	bl	8004220 <_read>
 80116c4:	1c43      	adds	r3, r0, #1
 80116c6:	d102      	bne.n	80116ce <_read_r+0x1e>
 80116c8:	682b      	ldr	r3, [r5, #0]
 80116ca:	b103      	cbz	r3, 80116ce <_read_r+0x1e>
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	bd38      	pop	{r3, r4, r5, pc}
 80116d0:	2000927c 	.word	0x2000927c

080116d4 <_init>:
 80116d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116d6:	bf00      	nop
 80116d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116da:	bc08      	pop	{r3}
 80116dc:	469e      	mov	lr, r3
 80116de:	4770      	bx	lr

080116e0 <_fini>:
 80116e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116e2:	bf00      	nop
 80116e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116e6:	bc08      	pop	{r3}
 80116e8:	469e      	mov	lr, r3
 80116ea:	4770      	bx	lr
