
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0800f770  0800f770  0001f770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf4  0800fdf4  0002067c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdf4  0800fdf4  0001fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdfc  0800fdfc  0002067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdfc  0800fdfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe00  0800fe00  0001fe00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000067c  20000000  0800fe04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065ac  2000067c  08010480  0002067c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c28  08010480  00026c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f6c  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059dc  00000000  00000000  00048618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f8  00000000  00000000  0004dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb8  00000000  00000000  000500f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d72b  00000000  00000000  00051fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002731e  00000000  00000000  0006f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed71  00000000  00000000  000969f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008eb4  00000000  00000000  001357b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000067c 	.word	0x2000067c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f758 	.word	0x0800f758

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000680 	.word	0x20000680
 80001dc:	0800f758 	.word	0x0800f758

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f003 f97a 	bl	80038b8 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000698 	.word	0x20000698

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f003 fa55 	bl	8003aac <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000698 	.word	0x20000698

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f003 f937 	bl	80038b8 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 fd17 	bl	8003088 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000698 	.word	0x20000698

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f003 fa03 	bl	8003aac <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 fce9 	bl	8003088 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000698 	.word	0x20000698

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 fc79 	bl	8003088 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fef3 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 feee 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 fc49 	bl	8003088 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fee6 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 fc41 	bl	8003088 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 fbeb 	bl	8003088 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000908:	f242 0393 	movw	r3, #8339	; 0x2093
 800090c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	200e      	movs	r0, #14
 8000912:	f7ff fef8 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000916:	f107 000c 	add.w	r0, r7, #12
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2305      	movs	r3, #5
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	2102      	movs	r1, #2
 8000924:	f7ff ff8a 	bl	800083c <MFRC_TRANSCEIVE>
 8000928:	4603      	mov	r3, r0
 800092a:	2bcc      	cmp	r3, #204	; 0xcc
 800092c:	d001      	beq.n	8000932 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 800092e:	23aa      	movs	r3, #170	; 0xaa
 8000930:	e000      	b.n	8000934 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000932:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000946:	f247 0393 	movw	r3, #28819	; 0x7093
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	3302      	adds	r3, #2
 800095c:	2205      	movs	r2, #5
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f00e fa6f 	bl	800ee44 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000966:	f107 0208 	add.w	r2, r7, #8
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2107      	movs	r1, #7
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	3307      	adds	r3, #7
 800097c:	893a      	ldrh	r2, [r7, #8]
 800097e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000980:	f107 000c 	add.w	r0, r7, #12
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2303      	movs	r3, #3
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	2109      	movs	r1, #9
 800098e:	f7ff ff55 	bl	800083c <MFRC_TRANSCEIVE>
 8000992:	4603      	mov	r3, r0
 8000994:	2bcc      	cmp	r3, #204	; 0xcc
 8000996:	d001      	beq.n	800099c <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000998:	23aa      	movs	r3, #170	; 0xaa
 800099a:	e000      	b.n	800099e <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 800099c:	23cc      	movs	r3, #204	; 0xcc
	}

}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 80009ae:	f242 0395 	movw	r3, #8341	; 0x2095
 80009b2:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	200e      	movs	r0, #14
 80009b8:	f7ff fea5 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009bc:	f107 000c 	add.w	r0, r7, #12
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2305      	movs	r3, #5
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	2102      	movs	r1, #2
 80009ca:	f7ff ff37 	bl	800083c <MFRC_TRANSCEIVE>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2bcc      	cmp	r3, #204	; 0xcc
 80009d2:	d001      	beq.n	80009d8 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 80009d4:	23aa      	movs	r3, #170	; 0xaa
 80009d6:	e000      	b.n	80009da <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 80009d8:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b088      	sub	sp, #32
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 80009ec:	f247 0395 	movw	r3, #28821	; 0x7095
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	3302      	adds	r3, #2
 8000a02:	2205      	movs	r2, #5
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00e fa1c 	bl	800ee44 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2107      	movs	r1, #7
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe9e 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	3307      	adds	r3, #7
 8000a22:	893a      	ldrh	r2, [r7, #8]
 8000a24:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a26:	f107 000c 	add.w	r0, r7, #12
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2303      	movs	r3, #3
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	2109      	movs	r1, #9
 8000a34:	f7ff ff02 	bl	800083c <MFRC_TRANSCEIVE>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2bcc      	cmp	r3, #204	; 0xcc
 8000a3c:	d001      	beq.n	8000a42 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000a3e:	23aa      	movs	r3, #170	; 0xaa
 8000a40:	e000      	b.n	8000a44 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000a42:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  if (PICC_CHECK() != PCD_OK) {
 8000a52:	f000 f832 	bl	8000aba <PICC_CHECK>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2bcc      	cmp	r3, #204	; 0xcc
 8000a5a:	d001      	beq.n	8000a60 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 8000a5c:	23aa      	movs	r3, #170	; 0xaa
 8000a5e:	e028      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  MFRC_ANTICOL1(ANTICOL1);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff4b 	bl	8000900 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000a6a:	7c3b      	ldrb	r3, [r7, #16]
 8000a6c:	2b88      	cmp	r3, #136	; 0x88
 8000a6e:	d001      	beq.n	8000a74 <PICC_Select+0x28>
		  return(PCD_COMM_ERR);
 8000a70:	23aa      	movs	r3, #170	; 0xaa
 8000a72:	e01e      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  HAL_Delay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f002 fb07 	bl	8003088 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff59 	bl	800093c <MFRC_SEL1>
	  HAL_Delay(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f002 fafc 	bl	8003088 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff87 	bl	80009a6 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f002 faf5 	bl	8003088 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff9c 	bl	80009e2 <MFRC_SEL2>
	  HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f002 faec 	bl	8003088 <HAL_Delay>
	  return(PCD_OK);
 8000ab0:	23cc      	movs	r3, #204	; 0xcc
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff feff 	bl	80008c6 <MFRC_REQA>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2bcc      	cmp	r3, #204	; 0xcc
 8000acc:	d001      	beq.n	8000ad2 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000ace:	23aa      	movs	r3, #170	; 0xaa
 8000ad0:	e008      	b.n	8000ae4 <PICC_CHECK+0x2a>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	2b44      	cmp	r3, #68	; 0x44
 8000ad6:	d102      	bne.n	8000ade <PICC_CHECK+0x24>
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 8000ade:	23aa      	movs	r3, #170	; 0xaa
 8000ae0:	e000      	b.n	8000ae4 <PICC_CHECK+0x2a>
		}
		else{
			return(PCD_OK);
 8000ae2:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	2330      	movs	r3, #48	; 0x30
 8000afe:	733b      	strb	r3, [r7, #12]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8000b04:	f107 0208 	add.w	r2, r7, #8
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe22 	bl	8000758 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	3302      	adds	r3, #2
 8000b1a:	893a      	ldrh	r2, [r7, #8]
 8000b1c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8000b1e:	f107 000c 	add.w	r0, r7, #12
 8000b22:	2300      	movs	r3, #0
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2310      	movs	r3, #16
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	f7ff fe86 	bl	800083c <MFRC_TRANSCEIVE>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2bcc      	cmp	r3, #204	; 0xcc
 8000b34:	d001      	beq.n	8000b3a <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 8000b36:	23aa      	movs	r3, #170	; 0xaa
 8000b38:	e000      	b.n	8000b3c <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 8000b3a:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	4619      	mov	r1, r3
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ffca 	bl	8000aec <UL_READ>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b5c:	d001      	beq.n	8000b62 <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8000b5e:	23aa      	movs	r3, #170	; 0xaa
 8000b60:	e007      	b.n	8000b72 <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2207      	movs	r2, #7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f00e f96a 	bl	800ee44 <memcpy>
	return PCD_OK;
 8000b70:	23cc      	movs	r3, #204	; 0xcc
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e010      	b.n	8000baa <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffac 	bl	8000aec <UL_READ>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2bcc      	cmp	r3, #204	; 0xcc
 8000b98:	d001      	beq.n	8000b9e <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8000b9a:	23aa      	movs	r3, #170	; 0xaa
 8000b9c:	e009      	b.n	8000bb2 <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b0e      	cmp	r3, #14
 8000bae:	ddeb      	ble.n	8000b88 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8000bb0:	23cc      	movs	r3, #204	; 0xcc
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	uint8_t* uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f00e f92d 	bl	800ee24 <malloc>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60fb      	str	r3, [r7, #12]
	uint8_t* contents = malloc(UL_MEMSIZE);
 8000bce:	2040      	movs	r0, #64	; 0x40
 8000bd0:	f00e f928 	bl	800ee24 <malloc>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60bb      	str	r3, [r7, #8]

	result->type = "MIFARE Ultralight";
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <UL_readcard+0x7c>)
 8000bdc:	60da      	str	r2, [r3, #12]
	result->name = "Test1";
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <UL_readcard+0x80>)
 8000be2:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2207      	movs	r2, #7
 8000be8:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2240      	movs	r2, #64	; 0x40
 8000bee:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 8000bf6:	f7ff ff29 	bl	8000a4c <PICC_Select>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2bcc      	cmp	r3, #204	; 0xcc
 8000bfe:	d001      	beq.n	8000c04 <UL_readcard+0x48>
		return PCD_NO_PICC;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e014      	b.n	8000c2e <UL_readcard+0x72>
	}
	if ((UL_getuid(uid) != PCD_OK) || (UL_getalldata(contents) !=  PCD_OK)) {
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff ff9d 	bl	8000b44 <UL_getuid>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2bcc      	cmp	r3, #204	; 0xcc
 8000c0e:	d105      	bne.n	8000c1c <UL_readcard+0x60>
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f7ff ffb2 	bl	8000b7a <UL_getalldata>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2bcc      	cmp	r3, #204	; 0xcc
 8000c1a:	d001      	beq.n	8000c20 <UL_readcard+0x64>
		return PCD_COMM_ERR;
 8000c1c:	23aa      	movs	r3, #170	; 0xaa
 8000c1e:	e006      	b.n	8000c2e <UL_readcard+0x72>
	}
	result->uid = uid;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	601a      	str	r2, [r3, #0]
	result->contents = contents;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	615a      	str	r2, [r3, #20]
	return PCD_OK;
 8000c2c:	23cc      	movs	r3, #204	; 0xcc
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	0800f7d0 	.word	0x0800f7d0
 8000c3c:	0800f7e4 	.word	0x0800f7e4

08000c40 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	3301      	adds	r3, #1
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00e f8e6 	bl	800ee24 <malloc>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e023      	b.n	8000caa <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d80d      	bhi.n	8000c8a <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	461a      	mov	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1898      	adds	r0, r3, r2
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4912      	ldr	r1, [pc, #72]	; (8000ccc <uid_tostring+0x8c>)
 8000c84:	f00e f9e4 	bl	800f050 <siprintf>
 8000c88:	e00c      	b.n	8000ca4 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1898      	adds	r0, r3, r2
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <uid_tostring+0x90>)
 8000ca0:	f00e f9d6 	bl	800f050 <siprintf>
	for (int i = 0; i < size; i++) {
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbd7      	blt.n	8000c62 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	return result;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	0800f7ec 	.word	0x0800f7ec
 8000cd0:	0800f7f0 	.word	0x0800f7f0

08000cd4 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000cda:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000cdc:	463b      	mov	r3, r7
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00e f8bb 	bl	800ee60 <memset>
	OLED_FLUSH(zeros);
 8000cea:	463b      	mov	r3, r7
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f87b 	bl	8000de8 <OLED_FLUSH>

}
 8000cf2:	bf00      	nop
 8000cf4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <OLED_cmd+0x68>)
 8000d10:	f002 fc5c 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <OLED_cmd+0x6c>)
 8000d1a:	f002 fc57 	bl	80035cc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000d1e:	f107 010f 	add.w	r1, r7, #15
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2201      	movs	r2, #1
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <OLED_cmd+0x70>)
 8000d2a:	f005 fbfa 	bl	8006522 <HAL_SPI_Transmit>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d009      	beq.n	8000d48 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2110      	movs	r1, #16
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <OLED_cmd+0x68>)
 8000d3a:	f002 fc47 	bl	80035cc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f002 f9a2 	bl	8003088 <HAL_Delay>
		return(HAL_ERROR);
 8000d44:	2301      	movs	r3, #1
 8000d46:	e008      	b.n	8000d5a <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <OLED_cmd+0x68>)
 8000d4e:	f002 fc3d 	bl	80035cc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f002 f998 	bl	8003088 <HAL_Delay>
		return(HAL_OK);
 8000d58:	2300      	movs	r3, #0
	}

}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	200006ec 	.word	0x200006ec

08000d70 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4816      	ldr	r0, [pc, #88]	; (8000ddc <OLED_data+0x6c>)
 8000d82:	f002 fc23 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <OLED_data+0x70>)
 8000d8c:	f002 fc1e 	bl	80035cc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4812      	ldr	r0, [pc, #72]	; (8000de4 <OLED_data+0x74>)
 8000d9c:	f005 fbc1 	bl	8006522 <HAL_SPI_Transmit>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <OLED_data+0x70>)
 8000dac:	f002 fc0e 	bl	80035cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <OLED_data+0x6c>)
 8000db6:	f002 fc09 	bl	80035cc <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00a      	b.n	8000dd4 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <OLED_data+0x70>)
 8000dc4:	f002 fc02 	bl	80035cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <OLED_data+0x6c>)
 8000dce:	f002 fbfd 	bl	80035cc <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000dd2:	2300      	movs	r3, #0
	}



}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	200006ec 	.word	0x200006ec

08000de8 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	e023      	b.n	8000e3e <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3b50      	subs	r3, #80	; 0x50
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff7c 	bl	8000cfc <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff ff79 	bl	8000cfc <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000e0a:	2010      	movs	r0, #16
 8000e0c:	f7ff ff76 	bl	8000cfc <OLED_cmd>
		for(int i=0;i<128;i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	e00d      	b.n	8000e32 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	01da      	lsls	r2, r3, #7
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffa2 	bl	8000d70 <OLED_data>
		for(int i=0;i<128;i++){
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b7f      	cmp	r3, #127	; 0x7f
 8000e36:	ddee      	ble.n	8000e16 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	ddd8      	ble.n	8000df6 <OLED_FLUSH+0xe>
		}


	}
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	482f      	ldr	r0, [pc, #188]	; (8000f18 <OLED_INIT+0xc8>)
 8000e5c:	f002 fbb6 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2108      	movs	r1, #8
 8000e64:	482c      	ldr	r0, [pc, #176]	; (8000f18 <OLED_INIT+0xc8>)
 8000e66:	f002 fbb1 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	482b      	ldr	r0, [pc, #172]	; (8000f1c <OLED_INIT+0xcc>)
 8000e70:	f002 fbac 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e74:	2064      	movs	r0, #100	; 0x64
 8000e76:	f002 f907 	bl	8003088 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	4826      	ldr	r0, [pc, #152]	; (8000f18 <OLED_INIT+0xc8>)
 8000e80:	f002 fba4 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f002 f8ff 	bl	8003088 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <OLED_INIT+0xc8>)
 8000e90:	f002 fb9c 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e94:	2064      	movs	r0, #100	; 0x64
 8000e96:	f002 f8f7 	bl	8003088 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <OLED_INIT+0xd0>)
 8000e9c:	463c      	mov	r4, r7
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ea8:	c403      	stmia	r4!, {r0, r1}
 8000eaa:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	e00c      	b.n	8000ecc <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000eb2:	463a      	mov	r2, r7
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff1e 	bl	8000cfc <OLED_cmd>
		HAL_Delay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f002 f8e1 	bl	8003088 <HAL_Delay>
	for(int i=0;i<25;i++){
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	2b18      	cmp	r3, #24
 8000ed0:	ddef      	ble.n	8000eb2 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000ed2:	20a7      	movs	r0, #167	; 0xa7
 8000ed4:	f7ff ff12 	bl	8000cfc <OLED_cmd>
	OLED_FLUSH(HVE);
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <OLED_INIT+0xd4>)
 8000eda:	f7ff ff85 	bl	8000de8 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8000ede:	20af      	movs	r0, #175	; 0xaf
 8000ee0:	f7ff ff0c 	bl	8000cfc <OLED_cmd>
	HAL_Delay(1000);
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f002 f8ce 	bl	8003088 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8000eec:	20ae      	movs	r0, #174	; 0xae
 8000eee:	f7ff ff05 	bl	8000cfc <OLED_cmd>
	HAL_Delay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f002 f8c8 	bl	8003088 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8000ef8:	20a6      	movs	r0, #166	; 0xa6
 8000efa:	f7ff feff 	bl	8000cfc <OLED_cmd>
	HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f002 f8c2 	bl	8003088 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8000f04:	20af      	movs	r0, #175	; 0xaf
 8000f06:	f7ff fef9 	bl	8000cfc <OLED_cmd>
	OLED_Clear();
 8000f0a:	f7ff fee3 	bl	8000cd4 <OLED_Clear>
	return HAL_OK;
 8000f0e:	2300      	movs	r3, #0

}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	0800f7f4 	.word	0x0800f7f4
 8000f24:	20000000 	.word	0x20000000

08000f28 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8000f34:	2005      	movs	r0, #5
 8000f36:	f00d ff75 	bl	800ee24 <malloc>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e013      	b.n	8000f6c <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f1a3 0220 	sub.w	r2, r3, #32
 8000f4a:	4910      	ldr	r1, [pc, #64]	; (8000f8c <OLED_InvChar+0x64>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	18ca      	adds	r2, r1, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	440b      	add	r3, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	dde8      	ble.n	8000f44 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8000f72:	2205      	movs	r2, #5
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f00d ff64 	bl	800ee44 <memcpy>
	free(temp);
 8000f7c:	68b8      	ldr	r0, [r7, #8]
 8000f7e:	f00d ff59 	bl	800ee34 <free>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	0800f9dc 	.word	0x0800f9dc

08000f90 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4604      	mov	r4, r0
 8000f98:	4608      	mov	r0, r1
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71bb      	strb	r3, [r7, #6]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	717b      	strb	r3, [r7, #5]
 8000faa:	4613      	mov	r3, r2
 8000fac:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	3b50      	subs	r3, #80	; 0x50
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fea1 	bl	8000cfc <OLED_cmd>
	OLED_cmd(col&0x0F);
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe9a 	bl	8000cfc <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe91 	bl	8000cfc <OLED_cmd>
	uint8_t* data=malloc(6);
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f00d ff22 	bl	800ee24 <malloc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10d      	bne.n	8001006 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8000fea:	797b      	ldrb	r3, [r7, #5]
 8000fec:	f1a3 0220 	sub.w	r2, r3, #32
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <OLED_drawChar+0xa0>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2205      	movs	r2, #5
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f00d ff20 	bl	800ee44 <memcpy>
 8001004:	e004      	b.n	8001010 <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff8c 	bl	8000f28 <OLED_InvChar>
	}

	*(data+5)=0x00;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3305      	adds	r3, #5
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001018:	2106      	movs	r1, #6
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff fea8 	bl	8000d70 <OLED_data>
	free(data);
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f00d ff07 	bl	800ee34 <free>
	}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	0800f9dc 	.word	0x0800f9dc

08001034 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	603a      	str	r2, [r7, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	460b      	mov	r3, r1
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	4613      	mov	r3, r2
 8001048:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e014      	b.n	800107a <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	4413      	add	r3, r2
 8001062:	b2d9      	uxtb	r1, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	79f8      	ldrb	r0, [r7, #7]
 8001070:	f7ff ff8e 	bl	8000f90 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f7ff f8b0 	bl	80001e0 <strlen>
 8001080:	4602      	mov	r2, r0
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8e3      	bhi.n	8001050 <OLED_Printlin+0x1c>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	6039      	str	r1, [r7, #0]
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	4613      	mov	r3, r2
 80010a0:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f7ff f89c 	bl	80001e0 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	0fda      	lsrs	r2, r3, #31
 80010b0:	4413      	add	r3, r2
 80010b2:	105b      	asrs	r3, r3, #1
 80010b4:	425b      	negs	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3340      	adds	r3, #64	; 0x40
 80010c2:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	b2d9      	uxtb	r1, r3
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	79f8      	ldrb	r0, [r7, #7]
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	f7ff ffb1 	bl	8001034 <OLED_Printlin>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80010da:	b580      	push	{r7, lr}
 80010dc:	b094      	sub	sp, #80	; 0x50
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80010e2:	2320      	movs	r3, #32
 80010e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
 80010fc:	e018      	b.n	8001130 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80010fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b20      	cmp	r3, #32
 800110e:	d10b      	bne.n	8001128 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111a:	4413      	add	r3, r2
 800111c:	460a      	mov	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
	                i++;
 8001120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001122:	3301      	adds	r3, #1
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001126:	e000      	b.n	800112a <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001128:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 800112a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800112c:	3301      	adds	r3, #1
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	2b15      	cmp	r3, #21
 8001134:	dde3      	ble.n	80010fe <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d102      	bne.n	8001148 <OLED_Print+0x6e>
	            last_ind++;
 8001142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001144:	3301      	adds	r3, #1
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f846 	bl	80001e0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	2b15      	cmp	r3, #21
 8001158:	d828      	bhi.n	80011ac <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 800115a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f83d 	bl	80001e0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 800116a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	18d1      	adds	r1, r2, r3
 8001170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f00d ff8a 	bl	800f090 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 800117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117e:	f107 0220 	add.w	r2, r7, #32
 8001182:	18d0      	adds	r0, r2, r3
 8001184:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118a:	f1c3 0315 	rsb	r3, r3, #21
 800118e:	461a      	mov	r2, r3
 8001190:	f00d fe66 	bl	800ee60 <memset>
	            thisline[21]=' ';
 8001194:	2320      	movs	r3, #32
 8001196:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 800119a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119c:	b2d8      	uxtb	r0, r3
 800119e:	f107 0220 	add.w	r2, r7, #32
 80011a2:	2300      	movs	r3, #0
 80011a4:	2102      	movs	r1, #2
 80011a6:	f7ff ff45 	bl	8001034 <OLED_Printlin>




	    }
}
 80011aa:	e05e      	b.n	800126a <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80011ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ae:	3314      	adds	r3, #20
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d03a      	beq.n	8001230 <OLED_Print+0x156>
 80011ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011bc:	3315      	adds	r3, #21
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d033      	beq.n	8001230 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80011c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	18d1      	adds	r1, r2, r3
 80011ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d0:	3b01      	subs	r3, #1
 80011d2:	3350      	adds	r3, #80	; 0x50
 80011d4:	443b      	add	r3, r7
 80011d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011da:	461a      	mov	r2, r3
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d ff55 	bl	800f090 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80011e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e8:	3b01      	subs	r3, #1
 80011ea:	3350      	adds	r3, #80	; 0x50
 80011ec:	443b      	add	r3, r7
 80011ee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011f2:	461a      	mov	r2, r3
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	1898      	adds	r0, r3, r2
 80011fa:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80011fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001200:	3b01      	subs	r3, #1
 8001202:	3350      	adds	r3, #80	; 0x50
 8001204:	443b      	add	r3, r7
 8001206:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800120a:	f1c3 0315 	rsb	r3, r3, #21
 800120e:	461a      	mov	r2, r3
 8001210:	f00d fe26 	bl	800ee60 <memset>
	            thisline[21]=' ';
 8001214:	2320      	movs	r3, #32
 8001216:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 800121a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121c:	3b01      	subs	r3, #1
 800121e:	3350      	adds	r3, #80	; 0x50
 8001220:	443b      	add	r3, r7
 8001222:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001226:	461a      	mov	r2, r3
 8001228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800122a:	4413      	add	r3, r2
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
 800122e:	e00e      	b.n	800124e <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	18d1      	adds	r1, r2, r3
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2215      	movs	r2, #21
 800123c:	4618      	mov	r0, r3
 800123e:	f00d ff27 	bl	800f090 <strncpy>
	            thisline[21]=' ';
 8001242:	2320      	movs	r3, #32
 8001244:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800124a:	3315      	adds	r3, #21
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800124e:	2300      	movs	r3, #0
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	f107 0220 	add.w	r2, r7, #32
 800125a:	2300      	movs	r3, #0
 800125c:	2102      	movs	r1, #2
 800125e:	f7ff fee9 	bl	8001034 <OLED_Printlin>
	        line++;
 8001262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001264:	3301      	adds	r3, #1
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001268:	e746      	b.n	80010f8 <OLED_Print+0x1e>
}
 800126a:	3750      	adds	r7, #80	; 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 800127c:	f7ff fd2a 	bl	8000cd4 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	4619      	mov	r1, r3
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff01 	bl	8001092 <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e01a      	b.n	80012cc <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	7818      	ldrb	r0, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	7859      	ldrb	r1, [r3, #1]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	f7ff feb7 	bl	8001034 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbde      	blt.n	8001296 <OLED_SCREEN+0x26>
	}
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	460b      	mov	r3, r1
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff6f 	bl	80001e0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	4619      	mov	r1, r3
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	440b      	add	r3, r1
 8001320:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	7818      	ldrb	r0, [r3, #0]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	b2d9      	uxtb	r1, r3
 8001332:	2300      	movs	r3, #0
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	f7ff fe7d 	bl	8001034 <OLED_Printlin>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	460b      	mov	r3, r1
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001352:	4a35      	ldr	r2, [pc, #212]	; (8001428 <OLED_SELECT+0xe4>)
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
 800135c:	8019      	strh	r1, [r3, #0]
 800135e:	3302      	adds	r3, #2
 8001360:	0c12      	lsrs	r2, r2, #16
 8001362:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	    if(selopt == 0){
 8001364:	7afb      	ldrb	r3, [r7, #11]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d105      	bne.n	8001376 <OLED_SELECT+0x32>
	    	index = screen->selsize - 1;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3b01      	subs	r3, #1
 8001372:	77fb      	strb	r3, [r7, #31]
 8001374:	e002      	b.n	800137c <OLED_SELECT+0x38>
	    }
		else{
			index = selopt - 1;
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	3b01      	subs	r3, #1
 800137a:	77fb      	strb	r3, [r7, #31]
	    }

	    prevpage=screen->seldata[index][0];
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	75fb      	strb	r3, [r7, #23]
	    prevcol=screen->seldata[index][1];
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	75bb      	strb	r3, [r7, #22]
	    thispage=screen->seldata[selopt][0];
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	757b      	strb	r3, [r7, #21]
	    thiscol=screen->seldata[selopt][1];
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	753b      	strb	r3, [r7, #20]

	    if(restore == OLED_RESTORE){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d122      	bne.n	8001400 <OLED_SELECT+0xbc>
	    	if (selopt == 0) {
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d110      	bne.n	80013e2 <OLED_SELECT+0x9e>
	    		rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	689c      	ldr	r4, [r3, #8]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 f893 	bl	80014fc <find_restore_string>
 80013d6:	4603      	mov	r3, r0
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4423      	add	r3, r4
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	e010      	b.n	8001404 <OLED_SELECT+0xc0>
	    	} else {
	    		rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	689c      	ldr	r4, [r3, #8]
 80013e6:	7afb      	ldrb	r3, [r7, #11]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f884 	bl	80014fc <find_restore_string>
 80013f4:	4603      	mov	r3, r0
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4423      	add	r3, r4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	e001      	b.n	8001404 <OLED_SELECT+0xc0>
	    	}
	    } else {
	    	rest = "  ";
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <OLED_SELECT+0xe8>)
 8001402:	61bb      	str	r3, [r7, #24]
	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001404:	7db9      	ldrb	r1, [r7, #22]
 8001406:	7df8      	ldrb	r0, [r7, #23]
 8001408:	2300      	movs	r3, #0
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	f7ff fe12 	bl	8001034 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001410:	f107 0210 	add.w	r2, r7, #16
 8001414:	7d39      	ldrb	r1, [r7, #20]
 8001416:	7d78      	ldrb	r0, [r7, #21]
 8001418:	2300      	movs	r3, #0
 800141a:	f7ff fe0b 	bl	8001034 <OLED_Printlin>

}
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	0800f814 	.word	0x0800f814
 800142c:	0800f810 	.word	0x0800f810

08001430 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 800143c:	f001 fac0 	bl	80029c0 <get_number_files>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <OLED_display_files+0x1a>
		return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e034      	b.n	80014b4 <OLED_display_files+0x84>
	}
	uint16_t file_count = get_number_files();
 800144a:	f001 fab9 	bl	80029c0 <get_number_files>
 800144e:	4603      	mov	r3, r0
 8001450:	827b      	strh	r3, [r7, #18]

	char** file_names = malloc(file_count * sizeof(char*));
 8001452:	8a7b      	ldrh	r3, [r7, #18]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4618      	mov	r0, r3
 8001458:	f00d fce4 	bl	800ee24 <malloc>
 800145c:	4603      	mov	r3, r0
 800145e:	60fb      	str	r3, [r7, #12]

	if (get_all_files(file_names) != RFS_OK) {
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f001 face 	bl	8002a02 <get_all_files>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <OLED_display_files+0x4a>
		free_filenames(file_names, file_count);
 800146c:	8a7b      	ldrh	r3, [r7, #18]
 800146e:	4619      	mov	r1, r3
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f825 	bl	80014c0 <free_filenames>
		return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e01c      	b.n	80014b4 <OLED_display_files+0x84>
	}

	for (int i = 0; i < file_count; i++) {
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e00f      	b.n	80014a0 <OLED_display_files+0x70>
		OLED_SCRNREF(&SCRN_ShowFiles, i + 1, file_names[i]);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3301      	adds	r3, #1
 8001486:	b2d9      	uxtb	r1, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <OLED_display_files+0x8c>)
 8001496:	f7ff ff24 	bl	80012e2 <OLED_SCRNREF>
	for (int i = 0; i < file_count; i++) {
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	8a7b      	ldrh	r3, [r7, #18]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbeb      	blt.n	8001480 <OLED_display_files+0x50>
	}

	free_filenames(file_names, file_count);
 80014a8:	8a7b      	ldrh	r3, [r7, #18]
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f807 	bl	80014c0 <free_filenames>
	return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800fd80 	.word	0x0800fd80

080014c0 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e00a      	b.n	80014e6 <free_filenames+0x26>
		free(file_names[i]);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f00d fcaa 	bl	800ee34 <free>
	for (int i = 0; i < size; i++) {
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbf0      	blt.n	80014d0 <free_filenames+0x10>
	}
	free(file_names);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f00d fca0 	bl	800ee34 <free>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001508:	2301      	movs	r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	e021      	b.n	8001552 <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6919      	ldr	r1, [r3, #16]
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	440b      	add	r3, r1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d110      	bne.n	800154c <find_restore_string+0x50>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	785a      	ldrb	r2, [r3, #1]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6919      	ldr	r1, [r3, #16]
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	440b      	add	r3, r1
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	429a      	cmp	r2, r3
 8001544:	d102      	bne.n	800154c <find_restore_string+0x50>
			index_of_string = i;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	73fb      	strb	r3, [r7, #15]
			break;
 800154a:	e007      	b.n	800155c <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3301      	adds	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbd8      	blt.n	800150e <find_restore_string+0x12>
		}
	}

	return index_of_string;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fa98 	bl	8002aae <entry_present>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d12d      	bne.n	80015e0 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	4618      	mov	r0, r3
 8001588:	f001 f8c1 	bl	800270e <read_card_entry>
 800158c:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 800158e:	2100      	movs	r1, #0
 8001590:	4815      	ldr	r0, [pc, #84]	; (80015e8 <oled_show_file+0x7c>)
 8001592:	f7ff fe6d 	bl	8001270 <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	461a      	mov	r2, r3
 800159c:	2100      	movs	r1, #0
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <oled_show_file+0x7c>)
 80015a0:	f7ff fe9f 	bl	80012e2 <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	461a      	mov	r2, r3
 80015aa:	2101      	movs	r1, #1
 80015ac:	480e      	ldr	r0, [pc, #56]	; (80015e8 <oled_show_file+0x7c>)
 80015ae:	f7ff fe98 	bl	80012e2 <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	791b      	ldrb	r3, [r3, #4]
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f7ff fb3f 	bl	8000c40 <uid_tostring>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	2102      	movs	r1, #2
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <oled_show_file+0x7c>)
 80015ca:	f7ff fe8a 	bl	80012e2 <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <oled_show_file+0x7c>)
 80015d4:	f7ff feb6 	bl	8001344 <OLED_SELECT>

	free(work);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f00d fc2b 	bl	800ee34 <free>
 80015de:	e000      	b.n	80015e2 <oled_show_file+0x76>
		return; //No card entry present
 80015e0:	bf00      	nop
}
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	0800fd94 	.word	0x0800fd94

080015ec <oled_move_selection>:

/***/
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	4613      	mov	r3, r2
 80015f8:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	3b01      	subs	r3, #1
 800160a:	429a      	cmp	r2, r3
 800160c:	db03      	blt.n	8001616 <oled_move_selection+0x2a>
		*arrow_index = 0;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e005      	b.n	8001622 <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	4619      	mov	r1, r3
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fe8a 	bl	8001344 <OLED_SELECT>
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af02      	add	r7, sp, #8
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 8001642:	230f      	movs	r3, #15
 8001644:	733b      	strb	r3, [r7, #12]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	737b      	strb	r3, [r7, #13]
 800164a:	2300      	movs	r3, #0
 800164c:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <STAT_READ+0x54>)
 8001656:	f001 ffb9 	bl	80035cc <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800165a:	bf00      	nop
 800165c:	f107 0208 	add.w	r2, r7, #8
 8001660:	f107 010c 	add.w	r1, r7, #12
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2303      	movs	r3, #3
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <STAT_READ+0x58>)
 800166c:	f005 f895 	bl	800679a <HAL_SPI_TransmitReceive>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f2      	bne.n	800165c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <STAT_READ+0x54>)
 800167e:	f001 ffa5 	bl	80035cc <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 8001682:	7abb      	ldrb	r3, [r7, #10]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40020000 	.word	0x40020000
 8001690:	20000744 	.word	0x20000744

08001694 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80016a4:	231f      	movs	r3, #31
 80016a6:	733b      	strb	r3, [r7, #12]
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	737b      	strb	r3, [r7, #13]
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b6:	480a      	ldr	r0, [pc, #40]	; (80016e0 <STAT_WRITE+0x4c>)
 80016b8:	f001 ff88 	bl	80035cc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80016bc:	f107 010c 	add.w	r1, r7, #12
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	2203      	movs	r2, #3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <STAT_WRITE+0x50>)
 80016c6:	f004 ff2c 	bl	8006522 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <STAT_WRITE+0x4c>)
 80016d2:	f001 ff7b 	bl	80035cc <HAL_GPIO_WritePin>

	return(HAL_OK);
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40020000 	.word	0x40020000
 80016e4:	20000744 	.word	0x20000744

080016e8 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 80016ee:	2306      	movs	r3, #6
 80016f0:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80016f2:	f000 f825 	bl	8001740 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80016f6:	e011      	b.n	800171c <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fe:	480e      	ldr	r0, [pc, #56]	; (8001738 <WRIT_EN+0x50>)
 8001700:	f001 ff64 	bl	80035cc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8001704:	1df9      	adds	r1, r7, #7
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	2201      	movs	r2, #1
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <WRIT_EN+0x54>)
 800170c:	f004 ff09 	bl	8006522 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001716:	4808      	ldr	r0, [pc, #32]	; (8001738 <WRIT_EN+0x50>)
 8001718:	f001 ff58 	bl	80035cc <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 800171c:	20c0      	movs	r0, #192	; 0xc0
 800171e:	f7ff ff8b 	bl	8001638 <STAT_READ>
 8001722:	4603      	mov	r3, r0
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b02      	cmp	r3, #2
 800172a:	d1e5      	bne.n	80016f8 <WRIT_EN+0x10>
	}


}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40020000 	.word	0x40020000
 800173c:	20000744 	.word	0x20000744

08001740 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001746:	2304      	movs	r3, #4
 8001748:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800174a:	e011      	b.n	8001770 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <WRITE_DIS+0x4c>)
 8001754:	f001 ff3a 	bl	80035cc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001758:	1df9      	adds	r1, r7, #7
 800175a:	2364      	movs	r3, #100	; 0x64
 800175c:	2201      	movs	r2, #1
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <WRITE_DIS+0x50>)
 8001760:	f004 fedf 	bl	8006522 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <WRITE_DIS+0x4c>)
 800176c:	f001 ff2e 	bl	80035cc <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001770:	20c0      	movs	r0, #192	; 0xc0
 8001772:	f7ff ff61 	bl	8001638 <STAT_READ>
 8001776:	4603      	mov	r3, r0
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b02      	cmp	r3, #2
 800177e:	d0e5      	beq.n	800174c <WRITE_DIS+0xc>
		}
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020000 	.word	0x40020000
 8001790:	20000744 	.word	0x20000744

08001794 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 80017a4:	23d8      	movs	r3, #216	; 0xd8
 80017a6:	723b      	strb	r3, [r7, #8]
 80017a8:	2300      	movs	r3, #0
 80017aa:	727b      	strb	r3, [r7, #9]
 80017ac:	89fb      	ldrh	r3, [r7, #14]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	72bb      	strb	r3, [r7, #10]
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 80017bc:	f7ff ff94 	bl	80016e8 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c6:	480f      	ldr	r0, [pc, #60]	; (8001804 <block_erase+0x70>)
 80017c8:	f001 ff00 	bl	80035cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 80017cc:	f107 0108 	add.w	r1, r7, #8
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	2204      	movs	r2, #4
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <block_erase+0x74>)
 80017d6:	f004 fea4 	bl	8006522 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e0:	4808      	ldr	r0, [pc, #32]	; (8001804 <block_erase+0x70>)
 80017e2:	f001 fef3 	bl	80035cc <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80017e6:	bf00      	nop
 80017e8:	20c0      	movs	r0, #192	; 0xc0
 80017ea:	f7ff ff25 	bl	8001638 <STAT_READ>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d0f7      	beq.n	80017e8 <block_erase+0x54>
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020000 	.word	0x40020000
 8001808:	20000744 	.word	0x20000744

0800180c <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <MEM_INIT+0x34>)
 8001818:	f001 fed8 	bl	80035cc <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 800181c:	2100      	movs	r1, #0
 800181e:	20a0      	movs	r0, #160	; 0xa0
 8001820:	f7ff ff38 	bl	8001694 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8001824:	20a0      	movs	r0, #160	; 0xa0
 8001826:	f7ff ff07 	bl	8001638 <STAT_READ>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MEM_INIT+0x28>
		return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e002      	b.n	800183a <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 8001834:	f7ff ff84 	bl	8001740 <WRITE_DIS>
	return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40020000 	.word	0x40020000

08001844 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4603      	mov	r3, r0
 8001850:	81fb      	strh	r3, [r7, #14]
 8001852:	460b      	mov	r3, r1
 8001854:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3303      	adds	r3, #3
 800185a:	4618      	mov	r0, r3
 800185c:	f00d fae2 	bl	800ee24 <malloc>
 8001860:	4603      	mov	r3, r0
 8001862:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8001864:	2310      	movs	r3, #16
 8001866:	743b      	strb	r3, [r7, #16]
 8001868:	2300      	movs	r3, #0
 800186a:	747b      	strb	r3, [r7, #17]
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	0a1b      	lsrs	r3, r3, #8
 8001870:	b29b      	uxth	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	74bb      	strb	r3, [r7, #18]
 8001876:	89fb      	ldrh	r3, [r7, #14]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2202      	movs	r2, #2
 8001880:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 8001882:	89bb      	ldrh	r3, [r7, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	b29a      	uxth	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3302      	adds	r3, #2
 8001894:	89ba      	ldrh	r2, [r7, #12]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3303      	adds	r3, #3
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00d face 	bl	800ee44 <memcpy>

	WRIT_EN();
 80018a8:	f7ff ff1e 	bl	80016e8 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b2:	482d      	ldr	r0, [pc, #180]	; (8001968 <MEM_WRITE+0x124>)
 80018b4:	f001 fe8a 	bl	80035cc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3303      	adds	r3, #3
 80018be:	b29a      	uxth	r2, r3
 80018c0:	2364      	movs	r3, #100	; 0x64
 80018c2:	6979      	ldr	r1, [r7, #20]
 80018c4:	4829      	ldr	r0, [pc, #164]	; (800196c <MEM_WRITE+0x128>)
 80018c6:	f004 fe2c 	bl	8006522 <HAL_SPI_Transmit>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d6:	4824      	ldr	r0, [pc, #144]	; (8001968 <MEM_WRITE+0x124>)
 80018d8:	f001 fe78 	bl	80035cc <HAL_GPIO_WritePin>
		free(setup);
 80018dc:	6978      	ldr	r0, [r7, #20]
 80018de:	f00d faa9 	bl	800ee34 <free>
		return(HAL_ERROR);
 80018e2:	2301      	movs	r3, #1
 80018e4:	e03c      	b.n	8001960 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ec:	481e      	ldr	r0, [pc, #120]	; (8001968 <MEM_WRITE+0x124>)
 80018ee:	f001 fe6d 	bl	80035cc <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 80018f2:	bf00      	nop
 80018f4:	20c0      	movs	r0, #192	; 0xc0
 80018f6:	f7ff fe9f 	bl	8001638 <STAT_READ>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d0f7      	beq.n	80018f4 <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190a:	4817      	ldr	r0, [pc, #92]	; (8001968 <MEM_WRITE+0x124>)
 800190c:	f001 fe5e 	bl	80035cc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 8001910:	f107 0110 	add.w	r1, r7, #16
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	2204      	movs	r2, #4
 8001918:	4814      	ldr	r0, [pc, #80]	; (800196c <MEM_WRITE+0x128>)
 800191a:	f004 fe02 	bl	8006522 <HAL_SPI_Transmit>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00a      	beq.n	800193a <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192a:	480f      	ldr	r0, [pc, #60]	; (8001968 <MEM_WRITE+0x124>)
 800192c:	f001 fe4e 	bl	80035cc <HAL_GPIO_WritePin>
		free(setup);
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f00d fa7f 	bl	800ee34 <free>
		return(HAL_ERROR);
 8001936:	2301      	movs	r3, #1
 8001938:	e012      	b.n	8001960 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800193a:	2201      	movs	r2, #1
 800193c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <MEM_WRITE+0x124>)
 8001942:	f001 fe43 	bl	80035cc <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001946:	bf00      	nop
 8001948:	20c0      	movs	r0, #192	; 0xc0
 800194a:	f7ff fe75 	bl	8001638 <STAT_READ>
 800194e:	4603      	mov	r3, r0
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d0f7      	beq.n	8001948 <MEM_WRITE+0x104>
	free(setup);
 8001958:	6978      	ldr	r0, [r7, #20]
 800195a:	f00d fa6b 	bl	800ee34 <free>
	return(HAL_OK);
 800195e:	2300      	movs	r3, #0

}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40020000 	.word	0x40020000
 800196c:	20000744 	.word	0x20000744

08001970 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af02      	add	r7, sp, #8
 8001976:	60ba      	str	r2, [r7, #8]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4603      	mov	r3, r0
 800197c:	81fb      	strh	r3, [r7, #14]
 800197e:	460b      	mov	r3, r1
 8001980:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 8001982:	2313      	movs	r3, #19
 8001984:	753b      	strb	r3, [r7, #20]
 8001986:	2300      	movs	r3, #0
 8001988:	757b      	strb	r3, [r7, #21]
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	75bb      	strb	r3, [r7, #22]
 8001994:	89fb      	ldrh	r3, [r7, #14]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 800199a:	2304      	movs	r3, #4
 800199c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 80019a0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00d fa3b 	bl	800ee24 <malloc>
 80019ae:	4603      	mov	r3, r0
 80019b0:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 80019b2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00d fa32 	bl	800ee24 <malloc>
 80019c0:	4603      	mov	r3, r0
 80019c2:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 80019c4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	2100      	movs	r1, #0
 80019d0:	69f8      	ldr	r0, [r7, #28]
 80019d2:	f00d fa45 	bl	800ee60 <memset>
	read_command[0]=READ_BUF;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	2203      	movs	r2, #3
 80019da:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 80019dc:	89bb      	ldrh	r3, [r7, #12]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3302      	adds	r3, #2
 80019ee:	89ba      	ldrh	r2, [r7, #12]
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	3303      	adds	r3, #3
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a02:	4842      	ldr	r0, [pc, #264]	; (8001b0c <MEM_READPAGE+0x19c>)
 8001a04:	f001 fde2 	bl	80035cc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8001a08:	f107 0114 	add.w	r1, r7, #20
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	2204      	movs	r2, #4
 8001a10:	483f      	ldr	r0, [pc, #252]	; (8001b10 <MEM_READPAGE+0x1a0>)
 8001a12:	f004 fd86 	bl	8006522 <HAL_SPI_Transmit>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a22:	483a      	ldr	r0, [pc, #232]	; (8001b0c <MEM_READPAGE+0x19c>)
 8001a24:	f001 fdd2 	bl	80035cc <HAL_GPIO_WritePin>
		free(read_command);
 8001a28:	69f8      	ldr	r0, [r7, #28]
 8001a2a:	f00d fa03 	bl	800ee34 <free>
		free(rec_data);
 8001a2e:	69b8      	ldr	r0, [r7, #24]
 8001a30:	f00d fa00 	bl	800ee34 <free>
		return(HAL_ERROR);
 8001a34:	2301      	movs	r3, #1
 8001a36:	e064      	b.n	8001b02 <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3e:	4833      	ldr	r0, [pc, #204]	; (8001b0c <MEM_READPAGE+0x19c>)
 8001a40:	f001 fdc4 	bl	80035cc <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 8001a44:	bf00      	nop
 8001a46:	20c0      	movs	r0, #192	; 0xc0
 8001a48:	f7ff fdf6 	bl	8001638 <STAT_READ>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d0f7      	beq.n	8001a46 <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a5c:	482b      	ldr	r0, [pc, #172]	; (8001b0c <MEM_READPAGE+0x19c>)
 8001a5e:	f001 fdb5 	bl	80035cc <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 8001a62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2264      	movs	r2, #100	; 0x64
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	69f9      	ldr	r1, [r7, #28]
 8001a78:	4825      	ldr	r0, [pc, #148]	; (8001b10 <MEM_READPAGE+0x1a0>)
 8001a7a:	f004 fe8e 	bl	800679a <HAL_SPI_TransmitReceive>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8a:	4820      	ldr	r0, [pc, #128]	; (8001b0c <MEM_READPAGE+0x19c>)
 8001a8c:	f001 fd9e 	bl	80035cc <HAL_GPIO_WritePin>
		free(read_command);
 8001a90:	69f8      	ldr	r0, [r7, #28]
 8001a92:	f00d f9cf 	bl	800ee34 <free>
		free(rec_data);
 8001a96:	69b8      	ldr	r0, [r7, #24]
 8001a98:	f00d f9cc 	bl	800ee34 <free>
		return(HAL_ERROR);
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e030      	b.n	8001b02 <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	4819      	ldr	r0, [pc, #100]	; (8001b0c <MEM_READPAGE+0x19c>)
 8001aa8:	f001 fd90 	bl	80035cc <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001aac:	bf00      	nop
 8001aae:	20c0      	movs	r0, #192	; 0xc0
 8001ab0:	f7ff fdc2 	bl	8001638 <STAT_READ>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d0f7      	beq.n	8001aae <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d104      	bne.n	8001ace <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	791a      	ldrb	r2, [r3, #4]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e012      	b.n	8001af4 <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	e00b      	b.n	8001aec <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	441a      	add	r2, r3
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	440b      	add	r3, r1
 8001ae2:	7812      	ldrb	r2, [r2, #0]
 8001ae4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8ef      	bhi.n	8001ad4 <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 8001af4:	69f8      	ldr	r0, [r7, #28]
 8001af6:	f00d f99d 	bl	800ee34 <free>
	free(rec_data);
 8001afa:	69b8      	ldr	r0, [r7, #24]
 8001afc:	f00d f99a 	bl	800ee34 <free>
	return(HAL_OK);
 8001b00:	2300      	movs	r3, #0

}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	20000744 	.word	0x20000744

08001b14 <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e016      	b.n	8001b4e <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	019b      	lsls	r3, r3, #6
 8001b26:	b298      	uxth	r0, r3
 8001b28:	1cfa      	adds	r2, r7, #3
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f7ff ff1f 	bl	8001970 <MEM_READPAGE>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <mem_find_free_block+0x2a>
			return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	e00d      	b.n	8001b5a <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	2bff      	cmp	r3, #255	; 0xff
 8001b42:	d101      	bne.n	8001b48 <mem_find_free_block+0x34>
			return i;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	e008      	b.n	8001b5a <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b54:	dbe4      	blt.n	8001b20 <mem_find_free_block+0xc>
		}
	}
	return -1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <memory_reset>:

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	e007      	b.n	8001b7e <memory_reset+0x1c>
		block_erase(i);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe0e 	bl	8001794 <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b84:	dbf3      	blt.n	8001b6e <memory_reset+0xc>
	}
}
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4815      	ldr	r0, [pc, #84]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x70>)
 8001baa:	f001 fcf7 	bl	800359c <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d11b      	bne.n	8001bec <HAL_GPIO_EXTI_Callback+0x5c>
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d018      	beq.n	8001bec <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x6c>)
 8001bbc:	f005 f904 	bl	8006dc8 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x6c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bce:	d902      	bls.n	8001bd6 <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	737b      	strb	r3, [r7, #13]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x74>)
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f107 010d 	add.w	r1, r7, #13
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	f00a f993 	bl	800bf10 <xQueueGenericSendFromISR>
 8001bea:	e003      	b.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x64>
	} else {
		HAL_TIM_Base_Start(&htim3);
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x6c>)
 8001bee:	f005 f891 	bl	8006d14 <HAL_TIM_Base_Start>
	}
}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200007e4 	.word	0x200007e4
 8001c00:	40020000 	.word	0x40020000
 8001c04:	20000848 	.word	0x20000848

08001c08 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <BUZZ+0x20>)
 8001c10:	f005 f9be 	bl	8006f90 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c18:	f001 fa36 	bl	8003088 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	4802      	ldr	r0, [pc, #8]	; (8001c28 <BUZZ+0x20>)
 8001c20:	f005 fa66 	bl	80070f0 <HAL_TIM_PWM_Stop>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000079c 	.word	0x2000079c

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c30:	f001 f9e8 	bl	8003004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c34:	f000 f87e 	bl	8001d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c38:	f000 fa46 	bl	80020c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c3c:	f000 f8e4 	bl	8001e08 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c40:	f000 f910 	bl	8001e64 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c44:	f000 f946 	bl	8001ed4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c48:	f000 f97a 	bl	8001f40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c4c:	f000 f9ee 	bl	800202c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c50:	f009 fcce 	bl	800b5f0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <main+0xb0>)
 8001c56:	2104      	movs	r1, #4
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f009 fdc1 	bl	800b7e0 <osMessageQueueNew>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <main+0xb4>)
 8001c62:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 8001c64:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <main+0xb8>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f009 fdb9 	bl	800b7e0 <osMessageQueueNew>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <main+0xbc>)
 8001c72:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <main+0xc0>)
 8001c76:	2100      	movs	r1, #0
 8001c78:	481d      	ldr	r0, [pc, #116]	; (8001cf0 <main+0xc4>)
 8001c7a:	f009 fd03 	bl	800b684 <osThreadNew>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <main+0xc8>)
 8001c82:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001c84:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <main+0xcc>)
 8001c86:	2100      	movs	r1, #0
 8001c88:	481c      	ldr	r0, [pc, #112]	; (8001cfc <main+0xd0>)
 8001c8a:	f009 fcfb 	bl	800b684 <osThreadNew>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <main+0xd4>)
 8001c92:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <main+0xd8>)
 8001c96:	2100      	movs	r1, #0
 8001c98:	481b      	ldr	r0, [pc, #108]	; (8001d08 <main+0xdc>)
 8001c9a:	f009 fcf3 	bl	800b684 <osThreadNew>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <main+0xe0>)
 8001ca2:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <main+0xe4>)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	481a      	ldr	r0, [pc, #104]	; (8001d14 <main+0xe8>)
 8001caa:	f009 fceb 	bl	800b684 <osThreadNew>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <main+0xec>)
 8001cb2:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <main+0xf0>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4819      	ldr	r0, [pc, #100]	; (8001d20 <main+0xf4>)
 8001cba:	f009 fce3 	bl	800b684 <osThreadNew>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <main+0xf8>)
 8001cc2:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <main+0xfc>)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4818      	ldr	r0, [pc, #96]	; (8001d2c <main+0x100>)
 8001cca:	f009 fcdb 	bl	800b684 <osThreadNew>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <main+0x104>)
 8001cd2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001cd4:	f009 fcb0 	bl	800b638 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <main+0xac>
 8001cda:	bf00      	nop
 8001cdc:	0800fc94 	.word	0x0800fc94
 8001ce0:	20000844 	.word	0x20000844
 8001ce4:	0800fcac 	.word	0x0800fcac
 8001ce8:	20000848 	.word	0x20000848
 8001cec:	0800fbbc 	.word	0x0800fbbc
 8001cf0:	080021c1 	.word	0x080021c1
 8001cf4:	2000082c 	.word	0x2000082c
 8001cf8:	0800fbe0 	.word	0x0800fbe0
 8001cfc:	08002275 	.word	0x08002275
 8001d00:	20000830 	.word	0x20000830
 8001d04:	0800fc04 	.word	0x0800fc04
 8001d08:	080022f9 	.word	0x080022f9
 8001d0c:	20000834 	.word	0x20000834
 8001d10:	0800fc28 	.word	0x0800fc28
 8001d14:	08002325 	.word	0x08002325
 8001d18:	20000838 	.word	0x20000838
 8001d1c:	0800fc4c 	.word	0x0800fc4c
 8001d20:	080023f1 	.word	0x080023f1
 8001d24:	2000083c 	.word	0x2000083c
 8001d28:	0800fc70 	.word	0x0800fc70
 8001d2c:	080024b9 	.word	0x080024b9
 8001d30:	20000840 	.word	0x20000840

08001d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b094      	sub	sp, #80	; 0x50
 8001d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3a:	f107 0320 	add.w	r3, r7, #32
 8001d3e:	2230      	movs	r2, #48	; 0x30
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00d f88c 	bl	800ee60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <SystemClock_Config+0xcc>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <SystemClock_Config+0xcc>)
 8001d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d66:	6413      	str	r3, [r2, #64]	; 0x40
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <SystemClock_Config+0xcc>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <SystemClock_Config+0xd0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d80:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <SystemClock_Config+0xd0>)
 8001d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <SystemClock_Config+0xd0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d94:	2301      	movs	r3, #1
 8001d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001da8:	2308      	movs	r3, #8
 8001daa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dac:	23a8      	movs	r3, #168	; 0xa8
 8001dae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001db0:	2304      	movs	r3, #4
 8001db2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001db4:	2307      	movs	r3, #7
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db8:	f107 0320 	add.w	r3, r7, #32
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fe73 	bl	8005aa8 <HAL_RCC_OscConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dc8:	f000 fbe8 	bl	800259c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dcc:	230f      	movs	r3, #15
 8001dce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ddc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2102      	movs	r1, #2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 f8d5 	bl	8005f98 <HAL_RCC_ClockConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001df4:	f000 fbd2 	bl	800259c <Error_Handler>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3750      	adds	r7, #80	; 0x50
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000

08001e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e0e:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <MX_I2C1_Init+0x54>)
 8001e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <MX_I2C1_Init+0x58>)
 8001e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e46:	f001 fbf3 	bl	8003630 <HAL_I2C_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e50:	f000 fba4 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000698 	.word	0x20000698
 8001e5c:	40005400 	.word	0x40005400
 8001e60:	000186a0 	.word	0x000186a0

08001e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e6a:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <MX_SPI1_Init+0x6c>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e9a:	2218      	movs	r2, #24
 8001e9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001eb2:	220a      	movs	r2, #10
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001eb8:	f004 faaa 	bl	8006410 <HAL_SPI_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001ec2:	f000 fb6b 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200006ec 	.word	0x200006ec
 8001ed0:	40013000 	.word	0x40013000

08001ed4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001eda:	4a18      	ldr	r2, [pc, #96]	; (8001f3c <MX_SPI2_Init+0x68>)
 8001edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001f20:	220a      	movs	r2, #10
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_SPI2_Init+0x64>)
 8001f26:	f004 fa73 	bl	8006410 <HAL_SPI_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f30:	f000 fb34 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000744 	.word	0x20000744
 8001f3c:	40003800 	.word	0x40003800

08001f40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	f107 0320 	add.w	r3, r7, #32
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
 8001f6c:	615a      	str	r2, [r3, #20]
 8001f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001f7a:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001f88:	2231      	movs	r2, #49	; 0x31
 8001f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f98:	4823      	ldr	r0, [pc, #140]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001f9a:	f004 fe6b 	bl	8006c74 <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fa4:	f000 fafa 	bl	800259c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	481c      	ldr	r0, [pc, #112]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001fb6:	f005 fac9 	bl	800754c <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fc0:	f000 faec 	bl	800259c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fc4:	4818      	ldr	r0, [pc, #96]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001fc6:	f004 ff89 	bl	8006edc <HAL_TIM_PWM_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001fd0:	f000 fae4 	bl	800259c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4811      	ldr	r0, [pc, #68]	; (8002028 <MX_TIM2_Init+0xe8>)
 8001fe4:	f005 fe6e 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fee:	f000 fad5 	bl	800259c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff2:	2360      	movs	r3, #96	; 0x60
 8001ff4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001ff6:	2318      	movs	r3, #24
 8001ff8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2208      	movs	r2, #8
 8002006:	4619      	mov	r1, r3
 8002008:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM2_Init+0xe8>)
 800200a:	f005 f9dd 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002014:	f000 fac2 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM2_Init+0xe8>)
 800201a:	f000 fe9b 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 800201e:	bf00      	nop
 8002020:	3738      	adds	r7, #56	; 0x38
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000079c 	.word	0x2000079c

0800202c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	463b      	mov	r3, r7
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <MX_TIM3_Init+0x94>)
 800204a:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <MX_TIM3_Init+0x98>)
 800204c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <MX_TIM3_Init+0x94>)
 8002050:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002054:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_TIM3_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_TIM3_Init+0x94>)
 800205e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002062:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_TIM3_Init+0x94>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_TIM3_Init+0x94>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002070:	4813      	ldr	r0, [pc, #76]	; (80020c0 <MX_TIM3_Init+0x94>)
 8002072:	f004 fdff 	bl	8006c74 <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800207c:	f000 fa8e 	bl	800259c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002086:	f107 0308 	add.w	r3, r7, #8
 800208a:	4619      	mov	r1, r3
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <MX_TIM3_Init+0x94>)
 800208e:	f005 fa5d 	bl	800754c <HAL_TIM_ConfigClockSource>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002098:	f000 fa80 	bl	800259c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020a4:	463b      	mov	r3, r7
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_TIM3_Init+0x94>)
 80020aa:	f005 fe0b 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020b4:	f000 fa72 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200007e4 	.word	0x200007e4
 80020c4:	40000400 	.word	0x40000400

080020c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <MX_GPIO_Init+0xec>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a33      	ldr	r2, [pc, #204]	; (80021b4 <MX_GPIO_Init+0xec>)
 80020e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <MX_GPIO_Init+0xec>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <MX_GPIO_Init+0xec>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <MX_GPIO_Init+0xec>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <MX_GPIO_Init+0xec>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <MX_GPIO_Init+0xec>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <MX_GPIO_Init+0xec>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <MX_GPIO_Init+0xec>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002138:	481f      	ldr	r0, [pc, #124]	; (80021b8 <MX_GPIO_Init+0xf0>)
 800213a:	f001 fa47 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	2122      	movs	r1, #34	; 0x22
 8002142:	481e      	ldr	r0, [pc, #120]	; (80021bc <MX_GPIO_Init+0xf4>)
 8002144:	f001 fa42 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002148:	2302      	movs	r3, #2
 800214a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800214c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4619      	mov	r1, r3
 800215c:	4816      	ldr	r0, [pc, #88]	; (80021b8 <MX_GPIO_Init+0xf0>)
 800215e:	f001 f899 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002162:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4619      	mov	r1, r3
 800217a:	480f      	ldr	r0, [pc, #60]	; (80021b8 <MX_GPIO_Init+0xf0>)
 800217c:	f001 f88a 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002180:	2322      	movs	r3, #34	; 0x22
 8002182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002184:	2301      	movs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	4619      	mov	r1, r3
 8002196:	4809      	ldr	r0, [pc, #36]	; (80021bc <MX_GPIO_Init+0xf4>)
 8002198:	f001 f87c 	bl	8003294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2105      	movs	r1, #5
 80021a0:	2007      	movs	r0, #7
 80021a2:	f001 f84d 	bl	8003240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021a6:	2007      	movs	r0, #7
 80021a8:	f001 f866 	bl	8003278 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400

080021c0 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80021c8:	f00c f918 	bl	800e3fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <Start_Init+0x94>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00a fb5d 	bl	800c890 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <Start_Init+0x98>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f00a fb58 	bl	800c890 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <Start_Init+0x9c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00a fb53 	bl	800c890 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <Start_Init+0xa0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00a fb4e 	bl	800c890 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <Start_Init+0xa4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f00a fb49 	bl	800c890 <vTaskSuspend>

    MFRC_INIT();
 80021fe:	f7fe faeb 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8002202:	f7fe faa1 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 8002206:	f7fe fe23 	bl	8000e50 <OLED_INIT>
    OLED_Print(TC);
 800220a:	4817      	ldr	r0, [pc, #92]	; (8002268 <Start_Init+0xa8>)
 800220c:	f7fe ff65 	bl	80010da <OLED_Print>
    MEM_INIT();
 8002210:	f7ff fafc 	bl	800180c <MEM_INIT>
    memory_reset();
 8002214:	f7ff fca5 	bl	8001b62 <memory_reset>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8002218:	bf00      	nop
 800221a:	2102      	movs	r1, #2
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <Start_Init+0xac>)
 800221e:	f001 f9bd 	bl	800359c <HAL_GPIO_ReadPin>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f8      	bne.n	800221a <Start_Init+0x5a>
    osDelay(10);
 8002228:	200a      	movs	r0, #10
 800222a:	f009 fabe 	bl	800b7aa <osDelay>
    uint8_t clear = NO_PRESS;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
    xQueueSend(UserInputHandle, &clear, 0);
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <Start_Init+0xb0>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	f107 010f 	add.w	r1, r7, #15
 800223a:	2300      	movs	r3, #0
 800223c:	2200      	movs	r2, #0
 800223e:	f009 fd69 	bl	800bd14 <xQueueGenericSend>
    vTaskResume(HomeHandle);
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <Start_Init+0x9c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f00a fbca 	bl	800c9e0 <vTaskResume>
    vTaskSuspend(NULL);
 800224c:	2000      	movs	r0, #0
 800224e:	f00a fb1f 	bl	800c890 <vTaskSuspend>
  {
 8002252:	e7bb      	b.n	80021cc <Start_Init+0xc>
 8002254:	20000830 	.word	0x20000830
 8002258:	20000834 	.word	0x20000834
 800225c:	20000838 	.word	0x20000838
 8002260:	2000083c 	.word	0x2000083c
 8002264:	20000840 	.word	0x20000840
 8002268:	20000400 	.word	0x20000400
 800226c:	40020000 	.word	0x40020000
 8002270:	20000848 	.word	0x20000848

08002274 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 800227c:	201c      	movs	r0, #28
 800227e:	f00c fdd1 	bl	800ee24 <malloc>
 8002282:	4603      	mov	r3, r0
 8002284:	60fb      	str	r3, [r7, #12]
	int ranonce = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
	MFRC_ANTON();
 800228e:	f7fe fa21 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002298:	2100      	movs	r1, #0
 800229a:	4814      	ldr	r0, [pc, #80]	; (80022ec <StartReadCard+0x78>)
 800229c:	f7fe ffe8 	bl	8001270 <OLED_SCREEN>
		ranonce++;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
	}
	if(UL_readcard(read_card) == PCD_OK){
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fc87 	bl	8000bbc <UL_readcard>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2bcc      	cmp	r3, #204	; 0xcc
 80022b2:	d10d      	bne.n	80022d0 <StartReadCard+0x5c>
			BUZZ();
 80022b4:	f7ff fca8 	bl	8001c08 <BUZZ>
			MFRC_ANTOFF();
 80022b8:	f7fe fa46 	bl	8000748 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0); //Send a pointer to our string to the Card Found task to use
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <StartReadCard+0x7c>)
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	f107 010c 	add.w	r1, r7, #12
 80022c4:	2300      	movs	r3, #0
 80022c6:	2200      	movs	r2, #0
 80022c8:	f009 fd24 	bl	800bd14 <xQueueGenericSend>
			suspend = 1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
		}
	if (suspend == 1) {
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d1d9      	bne.n	800228a <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <StartReadCard+0x80>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f00a fb80 	bl	800c9e0 <vTaskResume>
		ranonce = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f00a fad3 	bl	800c890 <vTaskSuspend>
  {
 80022ea:	e7ce      	b.n	800228a <StartReadCard+0x16>
 80022ec:	0800fd44 	.word	0x0800fd44
 80022f0:	20000844 	.word	0x20000844
 80022f4:	2000083c 	.word	0x2000083c

080022f8 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 800230a:	2100      	movs	r1, #0
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <StartWriteCard+0x28>)
 800230e:	f7fe ffaf 	bl	8001270 <OLED_SCREEN>
	  	ranonce++;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3301      	adds	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 8002318:	2001      	movs	r0, #1
 800231a:	f009 fa46 	bl	800b7aa <osDelay>
	  if (ranonce == 0){
 800231e:	e7f1      	b.n	8002304 <StartWriteCard+0xc>
 8002320:	0800fd6c 	.word	0x0800fd6c

08002324 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
	int ranonce = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
	Button_StateTypeDef button_state = NO_PRESS;
 8002334:	2300      	movs	r3, #0
 8002336:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
	  if (ranonce == 0) {
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <StartHome+0x38>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8002342:	2100      	movs	r1, #0
 8002344:	4825      	ldr	r0, [pc, #148]	; (80023dc <StartHome+0xb8>)
 8002346:	f7fe ff93 	bl	8001270 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2201      	movs	r2, #1
 800234e:	4619      	mov	r1, r3
 8002350:	4822      	ldr	r0, [pc, #136]	; (80023dc <StartHome+0xb8>)
 8002352:	f7fe fff7 	bl	8001344 <OLED_SELECT>
		  ranonce++;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <StartHome+0xbc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f107 010e 	add.w	r1, r7, #14
 8002364:	2200      	movs	r2, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f009 fe6e 	bl	800c048 <xQueueReceive>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10f      	bne.n	8002392 <StartHome+0x6e>
		  if (button_state == SHORT_PRESS) {
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d107      	bne.n	8002388 <StartHome+0x64>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8002378:	f107 030f 	add.w	r3, r7, #15
 800237c:	2201      	movs	r2, #1
 800237e:	4619      	mov	r1, r3
 8002380:	4816      	ldr	r0, [pc, #88]	; (80023dc <StartHome+0xb8>)
 8002382:	f7ff f933 	bl	80015ec <oled_move_selection>
 8002386:	e004      	b.n	8002392 <StartHome+0x6e>
		  } else if (button_state == LONG_PRESS){
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <StartHome+0x6e>
			  suspend = 1;
 800238e:	2301      	movs	r3, #1
 8002390:	613b      	str	r3, [r7, #16]
		  }
	  }
	  if (suspend == 1) {
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d1cf      	bne.n	8002338 <StartHome+0x14>
		switch(select_index) {
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d012      	beq.n	80023c4 <StartHome+0xa0>
 800239e:	2b02      	cmp	r3, #2
 80023a0:	dc16      	bgt.n	80023d0 <StartHome+0xac>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <StartHome+0x88>
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d006      	beq.n	80023b8 <StartHome+0x94>
 80023aa:	e011      	b.n	80023d0 <StartHome+0xac>
			case 0:
				vTaskResume(ReadCardHandle);
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <StartHome+0xc0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00a fb15 	bl	800c9e0 <vTaskResume>
				break;
 80023b6:	e00b      	b.n	80023d0 <StartHome+0xac>
			case 1:
				vTaskResume(WriteCardHandle);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <StartHome+0xc4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f00a fb0f 	bl	800c9e0 <vTaskResume>
				break;
 80023c2:	e005      	b.n	80023d0 <StartHome+0xac>
			case 2:
				vTaskResume(ShowFilesHandle);
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <StartHome+0xc8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f00a fb09 	bl	800c9e0 <vTaskResume>
				break;
 80023ce:	bf00      	nop
		}
		ranonce = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f00a fa5b 	bl	800c890 <vTaskSuspend>
  {
 80023da:	e7ad      	b.n	8002338 <StartHome+0x14>
 80023dc:	0800fd30 	.word	0x0800fd30
 80023e0:	20000848 	.word	0x20000848
 80023e4:	20000830 	.word	0x20000830
 80023e8:	20000834 	.word	0x20000834
 80023ec:	20000840 	.word	0x20000840

080023f0 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
	 int ranonce = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
	 Card* read_card;
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
	if (ranonce == 0) {
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d131      	bne.n	800246e <CardFoundStart+0x7e>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 800240a:	bf00      	nop
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <CardFoundStart+0xbc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f107 0108 	add.w	r1, r7, #8
 8002414:	2200      	movs	r2, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f009 fe16 	bl	800c048 <xQueueReceive>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d1f4      	bne.n	800240c <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f7fe fc07 	bl	8000c40 <uid_tostring>
 8002432:	6138      	str	r0, [r7, #16]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8002434:	2100      	movs	r1, #0
 8002436:	481e      	ldr	r0, [pc, #120]	; (80024b0 <CardFoundStart+0xc0>)
 8002438:	f7fe ff1a 	bl	8001270 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	2101      	movs	r1, #1
 8002440:	481b      	ldr	r0, [pc, #108]	; (80024b0 <CardFoundStart+0xc0>)
 8002442:	f7fe ff4e 	bl	80012e2 <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	461a      	mov	r2, r3
 800244c:	2102      	movs	r1, #2
 800244e:	4818      	ldr	r0, [pc, #96]	; (80024b0 <CardFoundStart+0xc0>)
 8002450:	f7fe ff47 	bl	80012e2 <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2200      	movs	r2, #0
 800245a:	4619      	mov	r1, r3
 800245c:	4814      	ldr	r0, [pc, #80]	; (80024b0 <CardFoundStart+0xc0>)
 800245e:	f7fe ff71 	bl	8001344 <OLED_SELECT>
		ranonce++;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	3301      	adds	r3, #1
 8002466:	61bb      	str	r3, [r7, #24]
		free(uid_str);
 8002468:	6938      	ldr	r0, [r7, #16]
 800246a:	f00c fce3 	bl	800ee34 <free>
	}

 	if (suspend == 1) {
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d1c5      	bne.n	8002400 <CardFoundStart+0x10>
 		if (count == 0) {
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10b      	bne.n	8002492 <CardFoundStart+0xa2>
 			int free_block = mem_find_free_block();
 800247a:	f7ff fb4b 	bl	8001b14 <mem_find_free_block>
 800247e:	60f8      	str	r0, [r7, #12]
 			enter_card(read_card, mem_find_free_block());
 8002480:	68bc      	ldr	r4, [r7, #8]
 8002482:	f7ff fb47 	bl	8001b14 <mem_find_free_block>
 8002486:	4603      	mov	r3, r0
 8002488:	b29b      	uxth	r3, r3
 800248a:	4619      	mov	r1, r3
 800248c:	4620      	mov	r0, r4
 800248e:	f000 f88a 	bl	80025a6 <enter_card>
 		}
 		vTaskResume(HomeHandle);
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <CardFoundStart+0xc4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f00a faa2 	bl	800c9e0 <vTaskResume>
 		ranonce = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
 		count = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
 		vTaskSuspend(NULL);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f00a f9f3 	bl	800c890 <vTaskSuspend>
  {
 80024aa:	e7a9      	b.n	8002400 <CardFoundStart+0x10>
 80024ac:	20000844 	.word	0x20000844
 80024b0:	0800fd58 	.word	0x0800fd58
 80024b4:	20000838 	.word	0x20000838

080024b8 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
  int count = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  int ranonce = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <StartShowFiles+0x3a>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 80024d2:	2100      	movs	r1, #0
 80024d4:	4826      	ldr	r0, [pc, #152]	; (8002570 <StartShowFiles+0xb8>)
 80024d6:	f7fe fecb 	bl	8001270 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_RESTORE);
 80024da:	2201      	movs	r2, #1
 80024dc:	2100      	movs	r1, #0
 80024de:	4824      	ldr	r0, [pc, #144]	; (8002570 <StartShowFiles+0xb8>)
 80024e0:	f7fe ff30 	bl	8001344 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 80024e4:	2100      	movs	r1, #0
 80024e6:	4822      	ldr	r0, [pc, #136]	; (8002570 <StartShowFiles+0xb8>)
 80024e8:	f7fe ffa2 	bl	8001430 <OLED_display_files>
		  ranonce++;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	3301      	adds	r3, #1
 80024f0:	613b      	str	r3, [r7, #16]
	  }

	  if (suspend == 1) {
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d1e7      	bne.n	80024c8 <StartShowFiles+0x10>
		  if (count == 3) {
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d10b      	bne.n	8002516 <StartShowFiles+0x5e>
			  vTaskResume(HomeHandle);
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <StartShowFiles+0xbc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f00a fa6c 	bl	800c9e0 <vTaskResume>
			  count = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
			  ranonce = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
			  vTaskSuspend(NULL);
 8002510:	2000      	movs	r0, #0
 8002512:	f00a f9bd 	bl	800c890 <vTaskSuspend>
		  }
		  if ((entry_present(count) == RFS_OK)) {
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	b29b      	uxth	r3, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fac7 	bl	8002aae <entry_present>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1d0      	bne.n	80024c8 <StartShowFiles+0x10>
			  suspend = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
			  ranonce = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
			  uint16_t entry = count;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	817b      	strh	r3, [r7, #10]
			  oled_show_file(entry);
 8002532:	897b      	ldrh	r3, [r7, #10]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f819 	bl	800156c <oled_show_file>
			  count = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]

			  while(1) {

				  if (suspend == 1) {
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d1fc      	bne.n	800253e <StartShowFiles+0x86>
					  if (count == 1) {
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <StartShowFiles+0x9e>
						  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_RESTORE);
 800254a:	2201      	movs	r2, #1
 800254c:	2100      	movs	r1, #0
 800254e:	4808      	ldr	r0, [pc, #32]	; (8002570 <StartShowFiles+0xb8>)
 8002550:	f7fe fef8 	bl	8001344 <OLED_SELECT>
						  break;
 8002554:	e00b      	b.n	800256e <StartShowFiles+0xb6>
					  } else if (count == 0) {
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <StartShowFiles+0x86>
						  remove_card(entry);
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fac2 	bl	8002ae8 <remove_card>
						  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_RESTORE);
 8002564:	2201      	movs	r2, #1
 8002566:	2100      	movs	r1, #0
 8002568:	4801      	ldr	r0, [pc, #4]	; (8002570 <StartShowFiles+0xb8>)
 800256a:	f7fe feeb 	bl	8001344 <OLED_SELECT>
  {
 800256e:	e7ab      	b.n	80024c8 <StartShowFiles+0x10>
 8002570:	0800fd80 	.word	0x0800fd80
 8002574:	20000838 	.word	0x20000838

08002578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800258a:	f000 fd5d 	bl	8003048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40000c00 	.word	0x40000c00

0800259c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a0:	b672      	cpsid	i
}
 80025a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <Error_Handler+0x8>

080025a6 <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry) {
 80025a6:	b5b0      	push	{r4, r5, r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	019b      	lsls	r3, r3, #6
 80025b6:	81fb      	strh	r3, [r7, #14]
	block_erase(entry); //Erase entire block ready for new data
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f8ea 	bl	8001794 <block_erase>
	enter_metadata(card, entry);
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f83f 	bl	8002648 <enter_metadata>

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	3301      	adds	r3, #1
 80025ce:	b29c      	uxth	r4, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689d      	ldr	r5, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd fe01 	bl	80001e0 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	462a      	mov	r2, r5
 80025e2:	2100      	movs	r1, #0
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff f92d 	bl	8001844 <MEM_WRITE>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <enter_card+0x4e>
		return RFS_WRITE_ERROR;
 80025f0:	2304      	movs	r3, #4
 80025f2:	e025      	b.n	8002640 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b29c      	uxth	r4, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd fdee 	bl	80001e0 <strlen>
 8002604:	4603      	mov	r3, r0
 8002606:	b299      	uxth	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff f917 	bl	8001844 <MEM_WRITE>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <enter_card+0x7a>
		return RFS_WRITE_ERROR;
 800261c:	2304      	movs	r3, #4
 800261e:	e00f      	b.n	8002640 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 8002620:	89fb      	ldrh	r3, [r7, #14]
 8002622:	3302      	adds	r3, #2
 8002624:	b298      	uxth	r0, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	8b1b      	ldrh	r3, [r3, #24]
 800262e:	2100      	movs	r1, #0
 8002630:	f7ff f908 	bl	8001844 <MEM_WRITE>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <enter_card+0x98>
		return RFS_WRITE_ERROR;
 800263a:	2304      	movs	r3, #4
 800263c:	e000      	b.n	8002640 <enter_card+0x9a>
	}

	return RFS_OK;
 800263e:	2300      	movs	r3, #0

}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bdb0      	pop	{r4, r5, r7, pc}

08002648 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8b1b      	ldrh	r3, [r3, #24]
 8002658:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7c1b      	ldrb	r3, [r3, #16]
 800265e:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd fdb8 	bl	80001e0 <strlen>
 8002670:	4603      	mov	r3, r0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3303      	adds	r3, #3
 8002676:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8002678:	7b3b      	ldrb	r3, [r7, #12]
 800267a:	4618      	mov	r0, r3
 800267c:	f00c fbd2 	bl	800ee24 <malloc>
 8002680:	4603      	mov	r3, r0
 8002682:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68dc      	ldr	r4, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd fda7 	bl	80001e0 <strlen>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	4621      	mov	r1, r4
 8002698:	68b8      	ldr	r0, [r7, #8]
 800269a:	f00c fbd3 	bl	800ee44 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fd9c 	bl	80001e0 <strlen>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4413      	add	r3, r2
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd fd92 	bl	80001e0 <strlen>
 80026bc:	4603      	mov	r3, r0
 80026be:	3301      	adds	r3, #1
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	4413      	add	r3, r2
 80026c4:	7b7a      	ldrb	r2, [r7, #13]
 80026c6:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fd87 	bl	80001e0 <strlen>
 80026d2:	4603      	mov	r3, r0
 80026d4:	3302      	adds	r3, #2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	7bba      	ldrb	r2, [r7, #14]
 80026dc:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	b298      	uxth	r0, r3
 80026e4:	7b3b      	ldrb	r3, [r7, #12]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	2100      	movs	r1, #0
 80026ea:	f7ff f8ab 	bl	8001844 <MEM_WRITE>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <enter_metadata+0xb6>
		free(metadata);
 80026f4:	68b8      	ldr	r0, [r7, #8]
 80026f6:	f00c fb9d 	bl	800ee34 <free>
		return RFS_WRITE_ERROR;
 80026fa:	2304      	movs	r3, #4
 80026fc:	e003      	b.n	8002706 <enter_metadata+0xbe>
	}
	free(metadata);
 80026fe:	68b8      	ldr	r0, [r7, #8]
 8002700:	f00c fb98 	bl	800ee34 <free>
	return RFS_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bd90      	pop	{r4, r7, pc}

0800270e <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 8002718:	201c      	movs	r0, #28
 800271a:	f00c fb83 	bl	800ee24 <malloc>
 800271e:	4603      	mov	r3, r0
 8002720:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	4619      	mov	r1, r3
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f81e 	bl	8002768 <read_metadata>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <read_card_entry+0x28>
		return NULL;
 8002732:	2300      	movs	r3, #0
 8002734:	e014      	b.n	8002760 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	4619      	mov	r1, r3
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f881 	bl	8002842 <read_nameuid>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <read_card_entry+0x3c>
		return NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	e00a      	b.n	8002760 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	4619      	mov	r1, r3
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f8e2 	bl	8002918 <read_cardcontents>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <read_card_entry+0x50>
		return NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <read_card_entry+0x52>
	}

	return result;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f8f5 	bl	8002968 <get_datasize>
 800277e:	4603      	mov	r3, r0
 8002780:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8002782:	8afb      	ldrh	r3, [r7, #22]
 8002784:	4618      	mov	r0, r3
 8002786:	f00c fb4d 	bl	800ee24 <malloc>
 800278a:	4603      	mov	r3, r0
 800278c:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 800278e:	8afb      	ldrh	r3, [r7, #22]
 8002790:	3b02      	subs	r3, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f00c fb46 	bl	800ee24 <malloc>
 8002798:	4603      	mov	r3, r0
 800279a:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	019b      	lsls	r3, r3, #6
 80027a0:	b298      	uxth	r0, r3
 80027a2:	8afb      	ldrh	r3, [r7, #22]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	2100      	movs	r1, #0
 80027a8:	f7ff f8e2 	bl	8001970 <MEM_READPAGE>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <read_metadata+0x54>
		free(metadata);
 80027b2:	6938      	ldr	r0, [r7, #16]
 80027b4:	f00c fb3e 	bl	800ee34 <free>
		return RFS_READ_ERROR;
 80027b8:	2305      	movs	r3, #5
 80027ba:	e03e      	b.n	800283a <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2bff      	cmp	r3, #255	; 0xff
 80027c2:	d104      	bne.n	80027ce <read_metadata+0x66>
		free(metadata);
 80027c4:	6938      	ldr	r0, [r7, #16]
 80027c6:	f00c fb35 	bl	800ee34 <free>
		return RFS_NO_CARD;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e035      	b.n	800283a <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 80027ce:	8afb      	ldrh	r3, [r7, #22]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6939      	ldr	r1, [r7, #16]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f00c fb34 	bl	800ee44 <memcpy>
	type[metadata_size - 3] = '\0';
 80027dc:	8afb      	ldrh	r3, [r7, #22]
 80027de:	3b03      	subs	r3, #3
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80027ee:	8afb      	ldrh	r3, [r7, #22]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80027fe:	8afb      	ldrh	r3, [r7, #22]
 8002800:	3b02      	subs	r3, #2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 800280c:	8afb      	ldrh	r3, [r7, #22]
 800280e:	3b01      	subs	r3, #1
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d104      	bne.n	8002824 <read_metadata+0xbc>
		free(metadata);
 800281a:	6938      	ldr	r0, [r7, #16]
 800281c:	f00c fb0a 	bl	800ee34 <free>
		return RFS_CARD_PROTECTED;
 8002820:	2303      	movs	r3, #3
 8002822:	e00a      	b.n	800283a <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 8002824:	8afb      	ldrh	r3, [r7, #22]
 8002826:	3b01      	subs	r3, #1
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8002832:	6938      	ldr	r0, [r7, #16]
 8002834:	f00c fafe 	bl	800ee34 <free>

	return RFS_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f888 	bl	8002968 <get_datasize>
 8002858:	4603      	mov	r3, r0
 800285a:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 800285c:	8afb      	ldrh	r3, [r7, #22]
 800285e:	4618      	mov	r0, r3
 8002860:	f00c fae0 	bl	800ee24 <malloc>
 8002864:	4603      	mov	r3, r0
 8002866:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8002868:	8afb      	ldrh	r3, [r7, #22]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	7912      	ldrb	r2, [r2, #4]
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	3301      	adds	r3, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f00c fad6 	bl	800ee24 <malloc>
 8002878:	4603      	mov	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	791b      	ldrb	r3, [r3, #4]
 8002880:	4618      	mov	r0, r3
 8002882:	f00c facf 	bl	800ee24 <malloc>
 8002886:	4603      	mov	r3, r0
 8002888:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	b29b      	uxth	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	b298      	uxth	r0, r3
 8002894:	8afb      	ldrh	r3, [r7, #22]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	2100      	movs	r1, #0
 800289a:	f7ff f869 	bl	8001970 <MEM_READPAGE>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <read_nameuid+0x6c>
		free(raw_data);
 80028a4:	6938      	ldr	r0, [r7, #16]
 80028a6:	f00c fac5 	bl	800ee34 <free>
		return RFS_READ_ERROR;
 80028aa:	2305      	movs	r3, #5
 80028ac:	e030      	b.n	8002910 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2bff      	cmp	r3, #255	; 0xff
 80028b4:	d104      	bne.n	80028c0 <read_nameuid+0x7e>
		free(raw_data);
 80028b6:	6938      	ldr	r0, [r7, #16]
 80028b8:	f00c fabc 	bl	800ee34 <free>
		return RFS_NO_CARD;
 80028bc:	2301      	movs	r3, #1
 80028be:	e027      	b.n	8002910 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 80028c0:	8afb      	ldrh	r3, [r7, #22]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	7912      	ldrb	r2, [r2, #4]
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	6939      	ldr	r1, [r7, #16]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f00c fab9 	bl	800ee44 <memcpy>
	name[datasize - result->uidsize] = '\0';
 80028d2:	8afb      	ldrh	r3, [r7, #22]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	7912      	ldrb	r2, [r2, #4]
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
	result->name = name;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7fd fc78 	bl	80001e0 <strlen>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1899      	adds	r1, r3, r2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	791b      	ldrb	r3, [r3, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68b8      	ldr	r0, [r7, #8]
 80028fe:	f00c faa1 	bl	800ee44 <memcpy>
	result->uid = uid;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	601a      	str	r2, [r3, #0]
	free(raw_data);
 8002908:	6938      	ldr	r0, [r7, #16]
 800290a:	f00c fa93 	bl	800ee34 <free>

	return RFS_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8b1b      	ldrh	r3, [r3, #24]
 8002928:	4618      	mov	r0, r3
 800292a:	f00c fa7b 	bl	800ee24 <malloc>
 800292e:	4603      	mov	r3, r0
 8002930:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	019b      	lsls	r3, r3, #6
 8002936:	b29b      	uxth	r3, r3
 8002938:	3302      	adds	r3, #2
 800293a:	b298      	uxth	r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8b1b      	ldrh	r3, [r3, #24]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	2100      	movs	r1, #0
 8002944:	f7ff f814 	bl	8001970 <MEM_READPAGE>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d004      	beq.n	8002958 <read_cardcontents+0x40>
		free(contents);
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f00c fa70 	bl	800ee34 <free>
		return RFS_READ_ERROR;
 8002954:	2305      	movs	r3, #5
 8002956:	e003      	b.n	8002960 <read_cardcontents+0x48>
	}

	result->contents = contents;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	460a      	mov	r2, r1
 8002972:	80fb      	strh	r3, [r7, #6]
 8002974:	4613      	mov	r3, r2
 8002976:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 800297c:	2300      	movs	r3, #0
 800297e:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8002980:	e014      	b.n	80029ac <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	b29a      	uxth	r2, r3
 8002988:	797b      	ldrb	r3, [r7, #5]
 800298a:	b29b      	uxth	r3, r3
 800298c:	4413      	add	r3, r2
 800298e:	b298      	uxth	r0, r3
 8002990:	f107 020d 	add.w	r2, r7, #13
 8002994:	89f9      	ldrh	r1, [r7, #14]
 8002996:	2301      	movs	r3, #1
 8002998:	f7fe ffea 	bl	8001970 <MEM_READPAGE>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 80029a2:	2300      	movs	r3, #0
 80029a4:	e008      	b.n	80029b8 <get_datasize+0x50>
		}
		size++;
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	3301      	adds	r3, #1
 80029aa:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 80029ac:	7b7b      	ldrb	r3, [r7, #13]
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d1e7      	bne.n	8002982 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 80029b2:	89fb      	ldrh	r3, [r7, #14]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29b      	uxth	r3, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
	int count = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	e00d      	b.n	80029ec <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f86a 	bl	8002aae <entry_present>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <get_number_files+0x36>
			count++;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3301      	adds	r3, #1
 80029e4:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	dbed      	blt.n	80029d0 <get_number_files+0x10>
 80029f4:	e000      	b.n	80029f8 <get_number_files+0x38>
		} else {
			break;
 80029f6:	bf00      	nop
		}

	}

	return count;
 80029f8:	687b      	ldr	r3, [r7, #4]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 8002a02:	b5b0      	push	{r4, r5, r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	e040      	b.n	8002a92 <get_all_files+0x90>
		if (entry_present(i) == RFS_OK) {
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 f84a 	bl	8002aae <entry_present>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d13d      	bne.n	8002a9c <get_all_files+0x9a>
			work = read_card_entry(i);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fe72 	bl	800270e <read_card_entry>
 8002a2a:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fbd5 	bl	80001e0 <strlen>
 8002a36:	4603      	mov	r3, r0
 8002a38:	1c59      	adds	r1, r3, #1
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	18d4      	adds	r4, r2, r3
 8002a42:	4608      	mov	r0, r1
 8002a44:	f00c f9ee 	bl	800ee24 <malloc>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	681c      	ldr	r4, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689d      	ldr	r5, [r3, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fbbe 	bl	80001e0 <strlen>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4629      	mov	r1, r5
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f00c f9ea 	bl	800ee44 <memcpy>
			result[i][strlen(work->name)] = '\0';
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	681c      	ldr	r4, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fbae 	bl	80001e0 <strlen>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4423      	add	r3, r4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a98:	dbba      	blt.n	8002a10 <get_all_files+0xe>
 8002a9a:	e000      	b.n	8002a9e <get_all_files+0x9c>
		} else {
			break;
 8002a9c:	bf00      	nop
		}
	}

	free(work);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f00c f9c8 	bl	800ee34 <free>
	return RFS_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bdb0      	pop	{r4, r5, r7, pc}

08002aae <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	019b      	lsls	r3, r3, #6
 8002abc:	b298      	uxth	r0, r3
 8002abe:	f107 020f 	add.w	r2, r7, #15
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f7fe ff53 	bl	8001970 <MEM_READPAGE>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <entry_present+0x26>
		return RFS_READ_ERROR;
 8002ad0:	2305      	movs	r3, #5
 8002ad2:	e005      	b.n	8002ae0 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2bff      	cmp	r3, #255	; 0xff
 8002ad8:	d101      	bne.n	8002ade <entry_present+0x30>
		return RFS_NO_CARD;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <entry_present+0x32>
	}

	return RFS_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe fe4d 	bl	8001794 <block_erase>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_MspInit+0x54>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_MspInit+0x54>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_MspInit+0x54>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_MspInit+0x54>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_MspInit+0x54>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_MspInit+0x54>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	210f      	movs	r1, #15
 8002b46:	f06f 0001 	mvn.w	r0, #1
 8002b4a:	f000 fb79 	bl	8003240 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <HAL_I2C_MspInit+0x84>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12b      	bne.n	8002bd6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_I2C_MspInit+0x88>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a17      	ldr	r2, [pc, #92]	; (8002be4 <HAL_I2C_MspInit+0x88>)
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_I2C_MspInit+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b9a:	23c0      	movs	r3, #192	; 0xc0
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9e:	2312      	movs	r3, #18
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002baa:	2304      	movs	r3, #4
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480c      	ldr	r0, [pc, #48]	; (8002be8 <HAL_I2C_MspInit+0x8c>)
 8002bb6:	f000 fb6d 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_I2C_MspInit+0x88>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_I2C_MspInit+0x88>)
 8002bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_I2C_MspInit+0x88>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3728      	adds	r7, #40	; 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40005400 	.word	0x40005400
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020400 	.word	0x40020400

08002bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	; 0x30
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a32      	ldr	r2, [pc, #200]	; (8002cd4 <HAL_SPI_MspInit+0xe8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d12c      	bne.n	8002c68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a29      	ldr	r2, [pc, #164]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c46:	23a0      	movs	r3, #160	; 0xa0
 8002c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c52:	2303      	movs	r3, #3
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c56:	2305      	movs	r3, #5
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	4619      	mov	r1, r3
 8002c60:	481e      	ldr	r0, [pc, #120]	; (8002cdc <HAL_SPI_MspInit+0xf0>)
 8002c62:	f000 fb17 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c66:	e031      	b.n	8002ccc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_SPI_MspInit+0xf4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d12c      	bne.n	8002ccc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_SPI_MspInit+0xec>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002caa:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cbc:	2305      	movs	r3, #5
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc0:	f107 031c 	add.w	r3, r7, #28
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4807      	ldr	r0, [pc, #28]	; (8002ce4 <HAL_SPI_MspInit+0xf8>)
 8002cc8:	f000 fae4 	bl	8003294 <HAL_GPIO_Init>
}
 8002ccc:	bf00      	nop
 8002cce:	3730      	adds	r7, #48	; 0x30
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40013000 	.word	0x40013000
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40003800 	.word	0x40003800
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d16:	e012      	b.n	8002d3e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_TIM_Base_MspInit+0x68>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10d      	bne.n	8002d3e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40000400 	.word	0x40000400

08002d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d74:	d11d      	bne.n	8002db2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_TIM_MspPostInit+0x68>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_TIM_MspPostInit+0x68>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_TIM_MspPostInit+0x68>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d92:	2304      	movs	r3, #4
 8002d94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002da2:	2301      	movs	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	4619      	mov	r1, r3
 8002dac:	4804      	ldr	r0, [pc, #16]	; (8002dc0 <HAL_TIM_MspPostInit+0x6c>)
 8002dae:	f000 fa71 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002db2:	bf00      	nop
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	; 0x38
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <HAL_InitTick+0xe4>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <HAL_InitTick+0xe4>)
 8002dde:	f043 0308 	orr.w	r3, r3, #8
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
 8002de4:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_InitTick+0xe4>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002df0:	f107 0210 	add.w	r2, r7, #16
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fad6 	bl	80063ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e0a:	f003 fabb 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8002e0e:	6378      	str	r0, [r7, #52]	; 0x34
 8002e10:	e004      	b.n	8002e1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e12:	f003 fab7 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8002e16:	4603      	mov	r3, r0
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1e:	4a23      	ldr	r2, [pc, #140]	; (8002eac <HAL_InitTick+0xe8>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	3b01      	subs	r3, #1
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002e2a:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_InitTick+0xec>)
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <HAL_InitTick+0xf0>)
 8002e2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_InitTick+0xec>)
 8002e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e36:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_InitTick+0xec>)
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_InitTick+0xec>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_InitTick+0xec>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4a:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_InitTick+0xec>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002e50:	4817      	ldr	r0, [pc, #92]	; (8002eb0 <HAL_InitTick+0xec>)
 8002e52:	f003 ff0f 	bl	8006c74 <HAL_TIM_Base_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d11b      	bne.n	8002e9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002e64:	4812      	ldr	r0, [pc, #72]	; (8002eb0 <HAL_InitTick+0xec>)
 8002e66:	f003 ffd7 	bl	8006e18 <HAL_TIM_Base_Start_IT>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002e70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e78:	2032      	movs	r0, #50	; 0x32
 8002e7a:	f000 f9fd 	bl	8003278 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d808      	bhi.n	8002e96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002e84:	2200      	movs	r2, #0
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	2032      	movs	r0, #50	; 0x32
 8002e8a:	f000 f9d9 	bl	8003240 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <HAL_InitTick+0xf4>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e002      	b.n	8002e9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	431bde83 	.word	0x431bde83
 8002eb0:	2000084c 	.word	0x2000084c
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	2000051c 	.word	0x2000051c

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <NMI_Handler+0x4>

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <MemManage_Handler+0x4>

08002ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002eec:	2002      	movs	r0, #2
 8002eee:	f000 fb87 	bl	8003600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <TIM5_IRQHandler+0x10>)
 8002efe:	f004 f95b 	bl	80071b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	2000084c 	.word	0x2000084c

08002f0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <OTG_FS_IRQHandler+0x10>)
 8002f12:	f001 fc9c 	bl	800484e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200064ec 	.word	0x200064ec

08002f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <_sbrk+0x5c>)
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <_sbrk+0x60>)
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <_sbrk+0x64>)
 8002f3e:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <_sbrk+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f50:	f00b ff3e 	bl	800edd0 <__errno>
 8002f54:	4603      	mov	r3, r0
 8002f56:	220c      	movs	r2, #12
 8002f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	e009      	b.n	8002f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <_sbrk+0x64>)
 8002f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20010000 	.word	0x20010000
 8002f80:	00000400 	.word	0x00000400
 8002f84:	20000894 	.word	0x20000894
 8002f88:	20006c28 	.word	0x20006c28

08002f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <SystemInit+0x20>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <SystemInit+0x20>)
 8002f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb4:	480d      	ldr	r0, [pc, #52]	; (8002fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fb6:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fbc:	e002      	b.n	8002fc4 <LoopCopyDataInit>

08002fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc2:	3304      	adds	r3, #4

08002fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc8:	d3f9      	bcc.n	8002fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fca:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fcc:	4c0b      	ldr	r4, [pc, #44]	; (8002ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd0:	e001      	b.n	8002fd6 <LoopFillZerobss>

08002fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd4:	3204      	adds	r2, #4

08002fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd8:	d3fb      	bcc.n	8002fd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fda:	f7ff ffd7 	bl	8002f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fde:	f00b fefd 	bl	800eddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fe2:	f7fe fe23 	bl	8001c2c <main>
  bx  lr    
 8002fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fe8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff0:	2000067c 	.word	0x2000067c
  ldr r2, =_sidata
 8002ff4:	0800fe04 	.word	0x0800fe04
  ldr r2, =_sbss
 8002ff8:	2000067c 	.word	0x2000067c
  ldr r4, =_ebss
 8002ffc:	20006c28 	.word	0x20006c28

08003000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC_IRQHandler>
	...

08003004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_Init+0x40>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_Init+0x40>)
 800300e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_Init+0x40>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_Init+0x40>)
 800301a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_Init+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_Init+0x40>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800302c:	2003      	movs	r0, #3
 800302e:	f000 f8fc 	bl	800322a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003032:	200f      	movs	r0, #15
 8003034:	f7ff fec6 	bl	8002dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003038:	f7ff fd64 	bl	8002b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00

08003048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_IncTick+0x20>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_IncTick+0x24>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4413      	add	r3, r2
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <HAL_IncTick+0x24>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000520 	.word	0x20000520
 800306c:	20000898 	.word	0x20000898

08003070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return uwTick;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_GetTick+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000898 	.word	0x20000898

08003088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff ffee 	bl	8003070 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d005      	beq.n	80030ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_Delay+0x44>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ae:	bf00      	nop
 80030b0:	f7ff ffde 	bl	8003070 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f7      	bhi.n	80030b0 <HAL_Delay+0x28>
  {
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000520 	.word	0x20000520

080030d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	; (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4907      	ldr	r1, [pc, #28]	; (800316c <__NVIC_EnableIRQ+0x38>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	; (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	; (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ff4c 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003252:	f7ff ff61 	bl	8003118 <__NVIC_GetPriorityGrouping>
 8003256:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	6978      	ldr	r0, [r7, #20]
 800325e:	f7ff ffb1 	bl	80031c4 <NVIC_EncodePriority>
 8003262:	4602      	mov	r2, r0
 8003264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff80 	bl	8003170 <__NVIC_SetPriority>
}
 8003270:	bf00      	nop
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff54 	bl	8003134 <__NVIC_EnableIRQ>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e159      	b.n	8003564 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032b0:	2201      	movs	r2, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	f040 8148 	bne.w	800355e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d005      	beq.n	80032e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b03      	cmp	r3, #3
 8003352:	d017      	beq.n	8003384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d123      	bne.n	80033d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	220f      	movs	r2, #15
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	08da      	lsrs	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3208      	adds	r2, #8
 80033d2:	69b9      	ldr	r1, [r7, #24]
 80033d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	2203      	movs	r2, #3
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0203 	and.w	r2, r3, #3
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a2 	beq.w	800355e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	4b57      	ldr	r3, [pc, #348]	; (800357c <HAL_GPIO_Init+0x2e8>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	4a56      	ldr	r2, [pc, #344]	; (800357c <HAL_GPIO_Init+0x2e8>)
 8003424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003428:	6453      	str	r3, [r2, #68]	; 0x44
 800342a:	4b54      	ldr	r3, [pc, #336]	; (800357c <HAL_GPIO_Init+0x2e8>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003436:	4a52      	ldr	r2, [pc, #328]	; (8003580 <HAL_GPIO_Init+0x2ec>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a49      	ldr	r2, [pc, #292]	; (8003584 <HAL_GPIO_Init+0x2f0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d019      	beq.n	8003496 <HAL_GPIO_Init+0x202>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a48      	ldr	r2, [pc, #288]	; (8003588 <HAL_GPIO_Init+0x2f4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_GPIO_Init+0x1fe>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a47      	ldr	r2, [pc, #284]	; (800358c <HAL_GPIO_Init+0x2f8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00d      	beq.n	800348e <HAL_GPIO_Init+0x1fa>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a46      	ldr	r2, [pc, #280]	; (8003590 <HAL_GPIO_Init+0x2fc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <HAL_GPIO_Init+0x1f6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a45      	ldr	r2, [pc, #276]	; (8003594 <HAL_GPIO_Init+0x300>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_GPIO_Init+0x1f2>
 8003482:	2304      	movs	r3, #4
 8003484:	e008      	b.n	8003498 <HAL_GPIO_Init+0x204>
 8003486:	2307      	movs	r3, #7
 8003488:	e006      	b.n	8003498 <HAL_GPIO_Init+0x204>
 800348a:	2303      	movs	r3, #3
 800348c:	e004      	b.n	8003498 <HAL_GPIO_Init+0x204>
 800348e:	2302      	movs	r3, #2
 8003490:	e002      	b.n	8003498 <HAL_GPIO_Init+0x204>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_GPIO_Init+0x204>
 8003496:	2300      	movs	r3, #0
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	f002 0203 	and.w	r2, r2, #3
 800349e:	0092      	lsls	r2, r2, #2
 80034a0:	4093      	lsls	r3, r2
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034a8:	4935      	ldr	r1, [pc, #212]	; (8003580 <HAL_GPIO_Init+0x2ec>)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3302      	adds	r3, #2
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034b6:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_GPIO_Init+0x304>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034da:	4a2f      	ldr	r2, [pc, #188]	; (8003598 <HAL_GPIO_Init+0x304>)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034e0:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_GPIO_Init+0x304>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <HAL_GPIO_Init+0x304>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800350a:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_GPIO_Init+0x304>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_GPIO_Init+0x304>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_GPIO_Init+0x304>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003558:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <HAL_GPIO_Init+0x304>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3301      	adds	r3, #1
 8003562:	61fb      	str	r3, [r7, #28]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b0f      	cmp	r3, #15
 8003568:	f67f aea2 	bls.w	80032b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40013800 	.word	0x40013800
 8003584:	40020000 	.word	0x40020000
 8003588:	40020400 	.word	0x40020400
 800358c:	40020800 	.word	0x40020800
 8003590:	40020c00 	.word	0x40020c00
 8003594:	40021000 	.word	0x40021000
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e001      	b.n	80035be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
 80035d8:	4613      	mov	r3, r2
 80035da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035dc:	787b      	ldrb	r3, [r7, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e8:	e003      	b.n	80035f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	041a      	lsls	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	619a      	str	r2, [r3, #24]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fab6 	bl	8001b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40013c00 	.word	0x40013c00

08003630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e12b      	b.n	800389a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fa80 	bl	8002b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2224      	movs	r2, #36	; 0x24
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003694:	f002 fe76 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4a81      	ldr	r2, [pc, #516]	; (80038a4 <HAL_I2C_Init+0x274>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d807      	bhi.n	80036b4 <HAL_I2C_Init+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a80      	ldr	r2, [pc, #512]	; (80038a8 <HAL_I2C_Init+0x278>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e006      	b.n	80036c2 <HAL_I2C_Init+0x92>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a7d      	ldr	r2, [pc, #500]	; (80038ac <HAL_I2C_Init+0x27c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0e7      	b.n	800389a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a78      	ldr	r2, [pc, #480]	; (80038b0 <HAL_I2C_Init+0x280>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9b      	lsrs	r3, r3, #18
 80036d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a6a      	ldr	r2, [pc, #424]	; (80038a4 <HAL_I2C_Init+0x274>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <HAL_I2C_Init+0xd4>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3301      	adds	r3, #1
 8003702:	e009      	b.n	8003718 <HAL_I2C_Init+0xe8>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	4a69      	ldr	r2, [pc, #420]	; (80038b4 <HAL_I2C_Init+0x284>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	3301      	adds	r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	430b      	orrs	r3, r1
 800371e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800372a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	495c      	ldr	r1, [pc, #368]	; (80038a4 <HAL_I2C_Init+0x274>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d819      	bhi.n	800376c <HAL_I2C_Init+0x13c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1e59      	subs	r1, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fbb1 f3f3 	udiv	r3, r1, r3
 8003746:	1c59      	adds	r1, r3, #1
 8003748:	f640 73fc 	movw	r3, #4092	; 0xffc
 800374c:	400b      	ands	r3, r1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_I2C_Init+0x138>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e59      	subs	r1, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003766:	e051      	b.n	800380c <HAL_I2C_Init+0x1dc>
 8003768:	2304      	movs	r3, #4
 800376a:	e04f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d111      	bne.n	8003798 <HAL_I2C_Init+0x168>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e58      	subs	r0, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e012      	b.n	80037be <HAL_I2C_Init+0x18e>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x196>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e022      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_I2C_Init+0x1bc>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1e58      	subs	r0, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	e00f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6809      	ldr	r1, [r1, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800383a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6911      	ldr	r1, [r2, #16]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	000186a0 	.word	0x000186a0
 80038a8:	001e847f 	.word	0x001e847f
 80038ac:	003d08ff 	.word	0x003d08ff
 80038b0:	431bde83 	.word	0x431bde83
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	461a      	mov	r2, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	460b      	mov	r3, r1
 80038cc:	813b      	strh	r3, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038d2:	f7ff fbcd 	bl	8003070 <HAL_GetTick>
 80038d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	f040 80d9 	bne.w	8003a98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2319      	movs	r3, #25
 80038ec:	2201      	movs	r2, #1
 80038ee:	496d      	ldr	r1, [pc, #436]	; (8003aa4 <HAL_I2C_Mem_Write+0x1ec>)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fc7f 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0cc      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_I2C_Mem_Write+0x56>
 800390a:	2302      	movs	r3, #2
 800390c:	e0c5      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d007      	beq.n	8003934 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2221      	movs	r2, #33	; 0x21
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a4d      	ldr	r2, [pc, #308]	; (8003aa8 <HAL_I2C_Mem_Write+0x1f0>)
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003976:	88f8      	ldrh	r0, [r7, #6]
 8003978:	893a      	ldrh	r2, [r7, #8]
 800397a:	8979      	ldrh	r1, [r7, #10]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4603      	mov	r3, r0
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fab6 	bl	8003ef8 <I2C_RequestMemoryWrite>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d052      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e081      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fd00 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d107      	bne.n	80039be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06b      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d11b      	bne.n	8003a38 <HAL_I2C_Mem_Write+0x180>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d017      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1aa      	bne.n	8003996 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fcec 	bl	8004422 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d107      	bne.n	8003a68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e016      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	00100002 	.word	0x00100002
 8003aa8:	ffff0000 	.word	0xffff0000

08003aac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	817b      	strh	r3, [r7, #10]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	813b      	strh	r3, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ac6:	f7ff fad3 	bl	8003070 <HAL_GetTick>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	f040 8208 	bne.w	8003eea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2319      	movs	r3, #25
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	497b      	ldr	r1, [pc, #492]	; (8003cd0 <HAL_I2C_Mem_Read+0x224>)
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fb85 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
 8003af2:	e1fb      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Mem_Read+0x56>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e1f4      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d007      	beq.n	8003b28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	; 0x22
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2240      	movs	r2, #64	; 0x40
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a5b      	ldr	r2, [pc, #364]	; (8003cd4 <HAL_I2C_Mem_Read+0x228>)
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b6a:	88f8      	ldrh	r0, [r7, #6]
 8003b6c:	893a      	ldrh	r2, [r7, #8]
 8003b6e:	8979      	ldrh	r1, [r7, #10]
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4603      	mov	r3, r0
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa52 	bl	8004024 <I2C_RequestMemoryRead>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e1b0      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d113      	bne.n	8003bba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b92:	2300      	movs	r3, #0
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	623b      	str	r3, [r7, #32]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e184      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d11b      	bne.n	8003bfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e164      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d11b      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	e144      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c50:	e138      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	f200 80f1 	bhi.w	8003e3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d123      	bne.n	8003cac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fc1b 	bl	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e139      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003caa:	e10b      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d14e      	bne.n	8003d52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4906      	ldr	r1, [pc, #24]	; (8003cd8 <HAL_I2C_Mem_Read+0x22c>)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fa98 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e10e      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
 8003cce:	bf00      	nop
 8003cd0:	00100002 	.word	0x00100002
 8003cd4:	ffff0000 	.word	0xffff0000
 8003cd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d50:	e0b8      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4966      	ldr	r1, [pc, #408]	; (8003ef4 <HAL_I2C_Mem_Read+0x448>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fa49 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0bf      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2200      	movs	r2, #0
 8003db6:	494f      	ldr	r1, [pc, #316]	; (8003ef4 <HAL_I2C_Mem_Read+0x448>)
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fa1b 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e091      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e3c:	e042      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fb2e 	bl	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e04c      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d118      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f aec2 	bne.w	8003c52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	00010004 	.word	0x00010004

08003ef8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f960 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f48:	d103      	bne.n	8003f52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e05f      	b.n	8004016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	6a3a      	ldr	r2, [r7, #32]
 8003f6a:	492d      	ldr	r1, [pc, #180]	; (8004020 <I2C_RequestMemoryWrite+0x128>)
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f998 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e04c      	b.n	8004016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fa02 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d107      	bne.n	8003fba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e02b      	b.n	8004016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d105      	bne.n	8003fd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	e021      	b.n	8004014 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd0:	893b      	ldrh	r3, [r7, #8]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f9dc 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d107      	bne.n	8004006 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004004:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e005      	b.n	8004016 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800400a:	893b      	ldrh	r3, [r7, #8]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	00010002 	.word	0x00010002

08004024 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	817b      	strh	r3, [r7, #10]
 8004036:	460b      	mov	r3, r1
 8004038:	813b      	strh	r3, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800404c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	2200      	movs	r2, #0
 8004066:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f8c2 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004084:	d103      	bne.n	800408e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0aa      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	4952      	ldr	r1, [pc, #328]	; (80041f0 <I2C_RequestMemoryRead+0x1cc>)
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8fa 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e097      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	6a39      	ldr	r1, [r7, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f964 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d107      	bne.n	80040f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e076      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004100:	893b      	ldrh	r3, [r7, #8]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]
 800410a:	e021      	b.n	8004150 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800410c:	893b      	ldrh	r3, [r7, #8]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	b29b      	uxth	r3, r3
 8004112:	b2da      	uxtb	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f93e 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b04      	cmp	r3, #4
 8004130:	d107      	bne.n	8004142 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004140:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e050      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004146:	893b      	ldrh	r3, [r7, #8]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f923 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e035      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2200      	movs	r2, #0
 8004194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f82b 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b2:	d103      	bne.n	80041bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e013      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041c0:	897b      	ldrh	r3, [r7, #10]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	6a3a      	ldr	r2, [r7, #32]
 80041d4:	4906      	ldr	r1, [pc, #24]	; (80041f0 <I2C_RequestMemoryRead+0x1cc>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f863 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	00010002 	.word	0x00010002

080041f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004204:	e025      	b.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d021      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7fe ff2f 	bl	8003070 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e023      	b.n	800429a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10d      	bne.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x84>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	e00c      	b.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	429a      	cmp	r2, r3
 8004296:	d0b6      	beq.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b0:	e051      	b.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d123      	bne.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0204 	orr.w	r2, r3, #4
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e046      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d021      	beq.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fead 	bl	8003070 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e020      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10c      	bne.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e00b      	b.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	43da      	mvns	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d18d      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ac:	e02d      	b.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f8ce 	bl	8004550 <I2C_IsAcknowledgeFailed>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02d      	b.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d021      	beq.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fe53 	bl	8003070 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d1ca      	bne.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442e:	e02d      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f88d 	bl	8004550 <I2C_IsAcknowledgeFailed>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e02d      	b.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d021      	beq.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fe fe12 	bl	8003070 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e007      	b.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b04      	cmp	r3, #4
 8004498:	d1ca      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b0:	e042      	b.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d119      	bne.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e029      	b.n	8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f4:	f7fe fdbc 	bl	8003070 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e007      	b.n	8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d1b5      	bne.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d11b      	bne.n	80045a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004570:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b0:	b08f      	sub	sp, #60	; 0x3c
 80045b2:	af0a      	add	r7, sp, #40	; 0x28
 80045b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e10f      	b.n	80047e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f00a f8ee 	bl	800e7bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2203      	movs	r2, #3
 80045e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f003 fcf7 	bl	8007ff2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	687e      	ldr	r6, [r7, #4]
 800460c:	466d      	mov	r5, sp
 800460e:	f106 0410 	add.w	r4, r6, #16
 8004612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800461e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004622:	1d33      	adds	r3, r6, #4
 8004624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004626:	6838      	ldr	r0, [r7, #0]
 8004628:	f003 fbce 	bl	8007dc8 <USB_CoreInit>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0d0      	b.n	80047e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f003 fce5 	bl	8008014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e04a      	b.n	80046e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	333d      	adds	r3, #61	; 0x3d
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	333c      	adds	r3, #60	; 0x3c
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	b298      	uxth	r0, r3
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	3344      	adds	r3, #68	; 0x44
 800468c:	4602      	mov	r2, r0
 800468e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3340      	adds	r3, #64	; 0x40
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3348      	adds	r3, #72	; 0x48
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	334c      	adds	r3, #76	; 0x4c
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3354      	adds	r3, #84	; 0x54
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	3301      	adds	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d3af      	bcc.n	8004650 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	e044      	b.n	8004780 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046f6:	7bfa      	ldrb	r2, [r7, #15]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004722:	7bfa      	ldrb	r2, [r7, #15]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	3301      	adds	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	429a      	cmp	r2, r3
 8004788:	d3b5      	bcc.n	80046f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	687e      	ldr	r6, [r7, #4]
 8004792:	466d      	mov	r5, sp
 8004794:	f106 0410 	add.w	r4, r6, #16
 8004798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800479a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800479c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800479e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80047a8:	1d33      	adds	r3, r6, #4
 80047aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ac:	6838      	ldr	r0, [r7, #0]
 80047ae:	f003 fc7d 	bl	80080ac <USB_DevInit>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e00d      	b.n	80047e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f004 fdcc 	bl	8009376 <USB_DevDisconnect>

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_PCD_Start+0x1c>
 8004800:	2302      	movs	r3, #2
 8004802:	e020      	b.n	8004846 <HAL_PCD_Start+0x5e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	2b01      	cmp	r3, #1
 8004812:	d109      	bne.n	8004828 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004818:	2b01      	cmp	r3, #1
 800481a:	d005      	beq.n	8004828 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f003 fbcf 	bl	8007fd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f004 fd7c 	bl	8009334 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800484e:	b590      	push	{r4, r7, lr}
 8004850:	b08d      	sub	sp, #52	; 0x34
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f004 fe3a 	bl	80094de <USB_GetMode>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	f040 848a 	bne.w	8005186 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f004 fd9e 	bl	80093b8 <USB_ReadInterrupts>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8480 	beq.w	8005184 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f004 fd8b 	bl	80093b8 <USB_ReadInterrupts>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d107      	bne.n	80048bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f002 0202 	and.w	r2, r2, #2
 80048ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f004 fd79 	bl	80093b8 <USB_ReadInterrupts>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d161      	bne.n	8004994 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0210 	bic.w	r2, r2, #16
 80048de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f003 020f 	and.w	r2, r3, #15
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4413      	add	r3, r2
 80048fc:	3304      	adds	r3, #4
 80048fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	0c5b      	lsrs	r3, r3, #17
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	2b02      	cmp	r3, #2
 800490a:	d124      	bne.n	8004956 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d035      	beq.n	8004984 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004926:	b29b      	uxth	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	6a38      	ldr	r0, [r7, #32]
 800492c:	f004 fbb0 	bl	8009090 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800493c:	441a      	add	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800494e:	441a      	add	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
 8004954:	e016      	b.n	8004984 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	0c5b      	lsrs	r3, r3, #17
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2b06      	cmp	r3, #6
 8004960:	d110      	bne.n	8004984 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004968:	2208      	movs	r2, #8
 800496a:	4619      	mov	r1, r3
 800496c:	6a38      	ldr	r0, [r7, #32]
 800496e:	f004 fb8f 	bl	8009090 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800497e:	441a      	add	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0210 	orr.w	r2, r2, #16
 8004992:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f004 fd0d 	bl	80093b8 <USB_ReadInterrupts>
 800499e:	4603      	mov	r3, r0
 80049a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049a8:	f040 80a7 	bne.w	8004afa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f004 fd12 	bl	80093de <USB_ReadDevAllOutEpInterrupt>
 80049ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049bc:	e099      	b.n	8004af2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 808e 	beq.w	8004ae6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f004 fd36 	bl	8009446 <USB_ReadDevOutEPInterrupt>
 80049da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	461a      	mov	r2, r3
 80049f4:	2301      	movs	r3, #1
 80049f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80049f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fec2 	bl	8005784 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	461a      	mov	r2, r3
 8004a18:	2308      	movs	r3, #8
 8004a1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 ff98 	bl	8005954 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d030      	beq.n	8004aac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b80      	cmp	r3, #128	; 0x80
 8004a54:	d109      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a68:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	78db      	ldrb	r3, [r3, #3]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d108      	bne.n	8004a9a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f009 ff8d 	bl	800e9b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ae4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	3301      	adds	r3, #1
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f47f af62 	bne.w	80049be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f004 fc5a 	bl	80093b8 <USB_ReadInterrupts>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b0e:	f040 80db 	bne.w	8004cc8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f004 fc7b 	bl	8009412 <USB_ReadDevAllInEpInterrupt>
 8004b1c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004b22:	e0cd      	b.n	8004cc0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80c2 	beq.w	8004cb4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f004 fca1 	bl	8009482 <USB_ReadDevInEPInterrupt>
 8004b40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d057      	beq.n	8004bfc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	2201      	movs	r2, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69f9      	ldr	r1, [r7, #28]
 8004b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2301      	movs	r3, #1
 8004b80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d132      	bne.n	8004bf0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8e:	4613      	mov	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	440b      	add	r3, r1
 8004b98:	334c      	adds	r3, #76	; 0x4c
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4403      	add	r3, r0
 8004baa:	3348      	adds	r3, #72	; 0x48
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4419      	add	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4403      	add	r3, r0
 8004bbe:	334c      	adds	r3, #76	; 0x4c
 8004bc0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d113      	bne.n	8004bf0 <HAL_PCD_IRQHandler+0x3a2>
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3354      	adds	r3, #84	; 0x54
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d108      	bne.n	8004bf0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004be8:	461a      	mov	r2, r3
 8004bea:	2101      	movs	r1, #1
 8004bec:	f004 fca8 	bl	8009540 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f009 fe61 	bl	800e8be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	461a      	mov	r2, r3
 8004c14:	2308      	movs	r3, #8
 8004c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2310      	movs	r3, #16
 8004c32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d023      	beq.n	8004ca2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c5c:	6a38      	ldr	r0, [r7, #32]
 8004c5e:	f003 fb89 	bl	8008374 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	3338      	adds	r3, #56	; 0x38
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4413      	add	r3, r2
 8004c72:	3304      	adds	r3, #4
 8004c74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	78db      	ldrb	r3, [r3, #3]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d108      	bne.n	8004c90 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f009 fea4 	bl	800e9d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fcdb 	bl	800566a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f47f af2e 	bne.w	8004b24 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f004 fb73 	bl	80093b8 <USB_ReadInterrupts>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cdc:	d122      	bne.n	8004d24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d108      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d04:	2100      	movs	r1, #0
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fec2 	bl	8005a90 <HAL_PCDEx_LPM_Callback>
 8004d0c:	e002      	b.n	8004d14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f009 fe42 	bl	800e998 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f004 fb45 	bl	80093b8 <USB_ReadInterrupts>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d38:	d112      	bne.n	8004d60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d102      	bne.n	8004d50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f009 fdfe 	bl	800e94c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004d5e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f004 fb27 	bl	80093b8 <USB_ReadInterrupts>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	f040 80b7 	bne.w	8004ee6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2110      	movs	r1, #16
 8004d92:	4618      	mov	r0, r3
 8004d94:	f003 faee 	bl	8008374 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9c:	e046      	b.n	8004e2c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004daa:	461a      	mov	r2, r3
 8004dac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004db0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	461a      	mov	r2, r3
 8004de0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004de4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	3301      	adds	r3, #1
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d3b3      	bcc.n	8004d9e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e44:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004e48:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e62:	f043 030b 	orr.w	r3, r3, #11
 8004e66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e78:	f043 030b 	orr.w	r3, r3, #11
 8004e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7e:	e015      	b.n	8004eac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e92:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e96:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea6:	f043 030b 	orr.w	r3, r3, #11
 8004eaa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ebe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f004 fb35 	bl	8009540 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f004 fa64 	bl	80093b8 <USB_ReadInterrupts>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	d124      	bne.n	8004f46 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f004 fafa 	bl	80094fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f003 faaf 	bl	800846e <USB_GetDevSpeed>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681c      	ldr	r4, [r3, #0]
 8004f1c:	f001 fa26 	bl	800636c <HAL_RCC_GetHCLKFreq>
 8004f20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f002 ffae 	bl	8007e8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f009 fcec 	bl	800e90e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f004 fa34 	bl	80093b8 <USB_ReadInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d10a      	bne.n	8004f70 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f009 fcc9 	bl	800e8f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f002 0208 	and.w	r2, r2, #8
 8004f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f004 fa1f 	bl	80093b8 <USB_ReadInterrupts>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f80:	2b80      	cmp	r3, #128	; 0x80
 8004f82:	d122      	bne.n	8004fca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f90:	2301      	movs	r3, #1
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
 8004f94:	e014      	b.n	8004fc0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d105      	bne.n	8004fba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fb27 	bl	8005608 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d3e5      	bcc.n	8004f96 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f004 f9f2 	bl	80093b8 <USB_ReadInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fde:	d13b      	bne.n	8005058 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe4:	e02b      	b.n	800503e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3340      	adds	r3, #64	; 0x40
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d115      	bne.n	8005038 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800500c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800500e:	2b00      	cmp	r3, #0
 8005010:	da12      	bge.n	8005038 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005016:	4613      	mov	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	333f      	adds	r3, #63	; 0x3f
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800502e:	b2db      	uxtb	r3, r3
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fae8 	bl	8005608 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	3301      	adds	r3, #1
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	429a      	cmp	r2, r3
 8005046:	d3ce      	bcc.n	8004fe6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f004 f9ab 	bl	80093b8 <USB_ReadInterrupts>
 8005062:	4603      	mov	r3, r0
 8005064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800506c:	d155      	bne.n	800511a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800506e:	2301      	movs	r3, #1
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	e045      	b.n	8005100 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d12e      	bne.n	80050fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800509c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800509e:	2b00      	cmp	r3, #0
 80050a0:	da2b      	bge.n	80050fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80050ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d121      	bne.n	80050fa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f6:	6053      	str	r3, [r2, #4]
            break;
 80050f8:	e007      	b.n	800510a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	3301      	adds	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005106:	429a      	cmp	r2, r3
 8005108:	d3b4      	bcc.n	8005074 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f004 f94a 	bl	80093b8 <USB_ReadInterrupts>
 8005124:	4603      	mov	r3, r0
 8005126:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512e:	d10a      	bne.n	8005146 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f009 fc63 	bl	800e9fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f004 f934 	bl	80093b8 <USB_ReadInterrupts>
 8005150:	4603      	mov	r3, r0
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b04      	cmp	r3, #4
 8005158:	d115      	bne.n	8005186 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f009 fc53 	bl	800ea18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	e000      	b.n	8005186 <HAL_PCD_IRQHandler+0x938>
      return;
 8005184:	bf00      	nop
    }
  }
}
 8005186:	3734      	adds	r7, #52	; 0x34
 8005188:	46bd      	mov	sp, r7
 800518a:	bd90      	pop	{r4, r7, pc}

0800518c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_PCD_SetAddress+0x1a>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e013      	b.n	80051ce <HAL_PCD_SetAddress+0x42>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	4611      	mov	r1, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 f892 	bl	80092e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	4608      	mov	r0, r1
 80051e0:	4611      	mov	r1, r2
 80051e2:	461a      	mov	r2, r3
 80051e4:	4603      	mov	r3, r0
 80051e6:	70fb      	strb	r3, [r7, #3]
 80051e8:	460b      	mov	r3, r1
 80051ea:	803b      	strh	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	da0f      	bge.n	800521c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	f003 020f 	and.w	r2, r3, #15
 8005202:	4613      	mov	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	3338      	adds	r3, #56	; 0x38
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	705a      	strb	r2, [r3, #1]
 800521a:	e00f      	b.n	800523c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	3304      	adds	r3, #4
 8005234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	b2da      	uxtb	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005248:	883a      	ldrh	r2, [r7, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	78ba      	ldrb	r2, [r7, #2]
 8005252:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005266:	78bb      	ldrb	r3, [r7, #2]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d102      	bne.n	8005272 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_PCD_EP_Open+0xaa>
 800527c:	2302      	movs	r3, #2
 800527e:	e00e      	b.n	800529e <HAL_PCD_EP_Open+0xc8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	4618      	mov	r0, r3
 8005290:	f003 f912 	bl	80084b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800529c:	7afb      	ldrb	r3, [r7, #11]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	da0f      	bge.n	80052da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	3338      	adds	r3, #56	; 0x38
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4413      	add	r3, r2
 80052ce:	3304      	adds	r3, #4
 80052d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	705a      	strb	r2, [r3, #1]
 80052d8:	e00f      	b.n	80052fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	f003 020f 	and.w	r2, r3, #15
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	4413      	add	r3, r2
 80052f0:	3304      	adds	r3, #4
 80052f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_PCD_EP_Close+0x6e>
 8005310:	2302      	movs	r3, #2
 8005312:	e00e      	b.n	8005332 <HAL_PCD_EP_Close+0x8c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	4618      	mov	r0, r3
 8005324:	f003 f950 	bl	80085c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	460b      	mov	r3, r1
 8005348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800534a:	7afb      	ldrb	r3, [r7, #11]
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	3304      	adds	r3, #4
 8005362:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2200      	movs	r2, #0
 800537a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800537c:	7afb      	ldrb	r3, [r7, #11]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	b2da      	uxtb	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d102      	bne.n	8005396 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005396:	7afb      	ldrb	r3, [r7, #11]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	6979      	ldr	r1, [r7, #20]
 80053ae:	f003 fc2f 	bl	8008c10 <USB_EP0StartXfer>
 80053b2:	e008      	b.n	80053c6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	f003 f9dd 	bl	8008780 <USB_EPStartXfer>
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	f003 020f 	and.w	r2, r3, #15
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80053f2:	681b      	ldr	r3, [r3, #0]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	607a      	str	r2, [r7, #4]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	460b      	mov	r3, r1
 800540e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	f003 020f 	and.w	r2, r3, #15
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	3338      	adds	r3, #56	; 0x38
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	3304      	adds	r3, #4
 8005426:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2200      	movs	r2, #0
 8005438:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2201      	movs	r2, #1
 800543e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	b2da      	uxtb	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d102      	bne.n	800545a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800545a:	7afb      	ldrb	r3, [r7, #11]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	6979      	ldr	r1, [r7, #20]
 8005472:	f003 fbcd 	bl	8008c10 <USB_EP0StartXfer>
 8005476:	e008      	b.n	800548a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	6979      	ldr	r1, [r7, #20]
 8005486:	f003 f97b 	bl	8008780 <USB_EPStartXfer>
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d901      	bls.n	80054b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e050      	b.n	8005554 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	da0f      	bge.n	80054da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	f003 020f 	and.w	r2, r3, #15
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	3338      	adds	r3, #56	; 0x38
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	3304      	adds	r3, #4
 80054d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	705a      	strb	r2, [r3, #1]
 80054d8:	e00d      	b.n	80054f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	4613      	mov	r3, r2
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	3304      	adds	r3, #4
 80054ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	b2da      	uxtb	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_PCD_EP_SetStall+0x82>
 8005512:	2302      	movs	r3, #2
 8005514:	e01e      	b.n	8005554 <HAL_PCD_EP_SetStall+0xc0>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	4618      	mov	r0, r3
 8005526:	f003 fe0b 	bl	8009140 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	b2d9      	uxtb	r1, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005544:	461a      	mov	r2, r3
 8005546:	f003 fffb 	bl	8009540 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 020f 	and.w	r2, r3, #15
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d901      	bls.n	800557a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e042      	b.n	8005600 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800557a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800557e:	2b00      	cmp	r3, #0
 8005580:	da0f      	bge.n	80055a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f003 020f 	and.w	r2, r3, #15
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	3338      	adds	r3, #56	; 0x38
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	3304      	adds	r3, #4
 8005598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	705a      	strb	r2, [r3, #1]
 80055a0:	e00f      	b.n	80055c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	3304      	adds	r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_PCD_EP_ClrStall+0x86>
 80055de:	2302      	movs	r3, #2
 80055e0:	e00e      	b.n	8005600 <HAL_PCD_EP_ClrStall+0xa4>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f003 fe13 	bl	800921c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005618:	2b00      	cmp	r3, #0
 800561a:	da0c      	bge.n	8005636 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	3338      	adds	r3, #56	; 0x38
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	3304      	adds	r3, #4
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e00c      	b.n	8005650 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	f003 020f 	and.w	r2, r3, #15
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4413      	add	r3, r2
 800564c:	3304      	adds	r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	4618      	mov	r0, r3
 8005658:	f003 fc32 	bl	8008ec0 <USB_EPStopXfer>
 800565c:	4603      	mov	r3, r0
 800565e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005660:	7afb      	ldrb	r3, [r7, #11]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08a      	sub	sp, #40	; 0x28
 800566e:	af02      	add	r7, sp, #8
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	3338      	adds	r3, #56	; 0x38
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	3304      	adds	r3, #4
 8005690:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	429a      	cmp	r2, r3
 800569c:	d901      	bls.n	80056a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e06c      	b.n	800577c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d902      	bls.n	80056be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3303      	adds	r3, #3
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056c6:	e02b      	b.n	8005720 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d902      	bls.n	80056e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3303      	adds	r3, #3
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6919      	ldr	r1, [r3, #16]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	4603      	mov	r3, r0
 8005702:	6978      	ldr	r0, [r7, #20]
 8005704:	f003 fc86 	bl	8009014 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	441a      	add	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1a      	ldr	r2, [r3, #32]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	441a      	add	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	b29b      	uxth	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	429a      	cmp	r2, r3
 8005734:	d809      	bhi.n	800574a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800573e:	429a      	cmp	r2, r3
 8005740:	d203      	bcs.n	800574a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1be      	bne.n	80056c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	429a      	cmp	r2, r3
 8005754:	d811      	bhi.n	800577a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	2201      	movs	r2, #1
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	43db      	mvns	r3, r3
 8005770:	6939      	ldr	r1, [r7, #16]
 8005772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005776:	4013      	ands	r3, r2
 8005778:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	333c      	adds	r3, #60	; 0x3c
 800579c:	3304      	adds	r3, #4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d17b      	bne.n	80058b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	4a61      	ldr	r2, [pc, #388]	; (800594c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	f240 80b9 	bls.w	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80b3 	beq.w	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	461a      	mov	r2, r3
 80057e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ec:	6093      	str	r3, [r2, #8]
 80057ee:	e0a7      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	461a      	mov	r2, r3
 8005808:	2320      	movs	r3, #32
 800580a:	6093      	str	r3, [r2, #8]
 800580c:	e098      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	f040 8093 	bne.w	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	4a4b      	ldr	r2, [pc, #300]	; (800594c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d90f      	bls.n	8005842 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	461a      	mov	r2, r3
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	6093      	str	r3, [r2, #8]
 8005840:	e07e      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	0159      	lsls	r1, r3, #5
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	440b      	add	r3, r1
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d114      	bne.n	80058a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800588c:	461a      	mov	r2, r3
 800588e:	2101      	movs	r1, #1
 8005890:	f003 fe56 	bl	8009540 <USB_EP0_OutStart>
 8005894:	e006      	b.n	80058a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	441a      	add	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f008 ffec 	bl	800e888 <HAL_PCD_DataOutStageCallback>
 80058b0:	e046      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d124      	bne.n	8005904 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	6093      	str	r3, [r2, #8]
 80058d8:	e032      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	461a      	mov	r2, r3
 80058f2:	2320      	movs	r3, #32
 80058f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f008 ffc3 	bl	800e888 <HAL_PCD_DataOutStageCallback>
 8005902:	e01d      	b.n	8005940 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d114      	bne.n	8005934 <PCD_EP_OutXfrComplete_int+0x1b0>
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800592c:	461a      	mov	r2, r3
 800592e:	2100      	movs	r1, #0
 8005930:	f003 fe06 	bl	8009540 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f008 ffa4 	bl	800e888 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	4f54300a 	.word	0x4f54300a
 8005950:	4f54310a 	.word	0x4f54310a

08005954 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	333c      	adds	r3, #60	; 0x3c
 800596c:	3304      	adds	r3, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <PCD_EP_OutSetupPacket_int+0x88>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d90e      	bls.n	80059a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	461a      	mov	r2, r3
 80059a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f008 ff5b 	bl	800e864 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <PCD_EP_OutSetupPacket_int+0x88>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d90c      	bls.n	80059d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d108      	bne.n	80059d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059c8:	461a      	mov	r2, r3
 80059ca:	2101      	movs	r1, #1
 80059cc:	f003 fdb8 	bl	8009540 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	4f54300a 	.word	0x4f54300a

080059e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
 80059ec:	4613      	mov	r3, r2
 80059ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059fe:	883b      	ldrh	r3, [r7, #0]
 8005a00:	0419      	lsls	r1, r3, #16
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a0c:	e028      	b.n	8005a60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	4413      	add	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	e00d      	b.n	8005a3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	3340      	adds	r3, #64	; 0x40
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4413      	add	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	7bfa      	ldrb	r2, [r7, #15]
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d3ec      	bcc.n	8005a22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a48:	883b      	ldrh	r3, [r7, #0]
 8005a4a:	0418      	lsls	r0, r3, #16
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	4302      	orrs	r2, r0
 8005a58:	3340      	adds	r3, #64	; 0x40
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e267      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d075      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ac6:	4b88      	ldr	r3, [pc, #544]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d00c      	beq.n	8005aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ad2:	4b85      	ldr	r3, [pc, #532]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d112      	bne.n	8005b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ade:	4b82      	ldr	r3, [pc, #520]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aea:	d10b      	bne.n	8005b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	4b7e      	ldr	r3, [pc, #504]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05b      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x108>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d157      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e242      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b0c:	d106      	bne.n	8005b1c <HAL_RCC_OscConfig+0x74>
 8005b0e:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a75      	ldr	r2, [pc, #468]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e01d      	b.n	8005b58 <HAL_RCC_OscConfig+0xb0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCC_OscConfig+0x98>
 8005b26:	4b70      	ldr	r3, [pc, #448]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6f      	ldr	r2, [pc, #444]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	4b6d      	ldr	r3, [pc, #436]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6c      	ldr	r2, [pc, #432]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e00b      	b.n	8005b58 <HAL_RCC_OscConfig+0xb0>
 8005b40:	4b69      	ldr	r3, [pc, #420]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a68      	ldr	r2, [pc, #416]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4b66      	ldr	r3, [pc, #408]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a65      	ldr	r2, [pc, #404]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d013      	beq.n	8005b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b60:	f7fd fa86 	bl	8003070 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fd fa82 	bl	8003070 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	; 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e207      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0xc0>
 8005b86:	e014      	b.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fd fa72 	bl	8003070 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b90:	f7fd fa6e 	bl	8003070 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	; 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e1f3      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba2:	4b51      	ldr	r3, [pc, #324]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0xe8>
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d063      	beq.n	8005c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d11c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd6:	4b44      	ldr	r3, [pc, #272]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d116      	bne.n	8005c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <HAL_RCC_OscConfig+0x152>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e1c7      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4937      	ldr	r1, [pc, #220]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c0e:	e03a      	b.n	8005c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d020      	beq.n	8005c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c18:	4b34      	ldr	r3, [pc, #208]	; (8005cec <HAL_RCC_OscConfig+0x244>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fd fa27 	bl	8003070 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c26:	f7fd fa23 	bl	8003070 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e1a8      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c38:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c44:	4b28      	ldr	r3, [pc, #160]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4925      	ldr	r1, [pc, #148]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	600b      	str	r3, [r1, #0]
 8005c58:	e015      	b.n	8005c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c5a:	4b24      	ldr	r3, [pc, #144]	; (8005cec <HAL_RCC_OscConfig+0x244>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fd fa06 	bl	8003070 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c68:	f7fd fa02 	bl	8003070 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e187      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d036      	beq.n	8005d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d016      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <HAL_RCC_OscConfig+0x248>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca0:	f7fd f9e6 	bl	8003070 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca8:	f7fd f9e2 	bl	8003070 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e167      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x200>
 8005cc6:	e01b      	b.n	8005d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc8:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <HAL_RCC_OscConfig+0x248>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cce:	f7fd f9cf 	bl	8003070 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd4:	e00e      	b.n	8005cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd6:	f7fd f9cb 	bl	8003070 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d907      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e150      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	42470000 	.word	0x42470000
 8005cf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf4:	4b88      	ldr	r3, [pc, #544]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ea      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8097 	beq.w	8005e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d12:	4b81      	ldr	r3, [pc, #516]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	4b7d      	ldr	r3, [pc, #500]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	4a7c      	ldr	r2, [pc, #496]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d2e:	4b7a      	ldr	r3, [pc, #488]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3e:	4b77      	ldr	r3, [pc, #476]	; (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d118      	bne.n	8005d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d4a:	4b74      	ldr	r3, [pc, #464]	; (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a73      	ldr	r2, [pc, #460]	; (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d56:	f7fd f98b 	bl	8003070 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5e:	f7fd f987 	bl	8003070 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e10c      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d70:	4b6a      	ldr	r3, [pc, #424]	; (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d106      	bne.n	8005d92 <HAL_RCC_OscConfig+0x2ea>
 8005d84:	4b64      	ldr	r3, [pc, #400]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	4a63      	ldr	r2, [pc, #396]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d90:	e01c      	b.n	8005dcc <HAL_RCC_OscConfig+0x324>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x30c>
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	4a5e      	ldr	r2, [pc, #376]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005da0:	f043 0304 	orr.w	r3, r3, #4
 8005da4:	6713      	str	r3, [r2, #112]	; 0x70
 8005da6:	4b5c      	ldr	r3, [pc, #368]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	4a5b      	ldr	r2, [pc, #364]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	6713      	str	r3, [r2, #112]	; 0x70
 8005db2:	e00b      	b.n	8005dcc <HAL_RCC_OscConfig+0x324>
 8005db4:	4b58      	ldr	r3, [pc, #352]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	4a57      	ldr	r2, [pc, #348]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc0:	4b55      	ldr	r3, [pc, #340]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	4a54      	ldr	r2, [pc, #336]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dc6:	f023 0304 	bic.w	r3, r3, #4
 8005dca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d015      	beq.n	8005e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd4:	f7fd f94c 	bl	8003070 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ddc:	f7fd f948 	bl	8003070 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e0cb      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df2:	4b49      	ldr	r3, [pc, #292]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ee      	beq.n	8005ddc <HAL_RCC_OscConfig+0x334>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e00:	f7fd f936 	bl	8003070 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e06:	e00a      	b.n	8005e1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e08:	f7fd f932 	bl	8003070 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e0b5      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e1e:	4b3e      	ldr	r3, [pc, #248]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1ee      	bne.n	8005e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e30:	4b39      	ldr	r3, [pc, #228]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	4a38      	ldr	r2, [pc, #224]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80a1 	beq.w	8005f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e46:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d05c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d141      	bne.n	8005ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5a:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e60:	f7fd f906 	bl	8003070 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e68:	f7fd f902 	bl	8003070 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e087      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7a:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	061b      	lsls	r3, r3, #24
 8005eaa:	491b      	ldr	r1, [pc, #108]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7fd f8db 	bl	8003070 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ebe:	f7fd f8d7 	bl	8003070 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e05c      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x416>
 8005edc:	e054      	b.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ede:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fd f8c4 	bl	8003070 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eec:	f7fd f8c0 	bl	8003070 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e045      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x444>
 8005f0a:	e03d      	b.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e038      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40007000 	.word	0x40007000
 8005f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCC_OscConfig+0x4ec>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d028      	beq.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d121      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d11a      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d111      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40023800 	.word	0x40023800

08005f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0cc      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fac:	4b68      	ldr	r3, [pc, #416]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d90c      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b65      	ldr	r3, [pc, #404]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b63      	ldr	r3, [pc, #396]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0b8      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fec:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4a58      	ldr	r2, [pc, #352]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006004:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a52      	ldr	r2, [pc, #328]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800600e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b50      	ldr	r3, [pc, #320]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	494d      	ldr	r1, [pc, #308]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d044      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	4b47      	ldr	r3, [pc, #284]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d119      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e07f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d003      	beq.n	8006056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006052:	2b03      	cmp	r3, #3
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006056:	4b3f      	ldr	r3, [pc, #252]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e06f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006066:	4b3b      	ldr	r3, [pc, #236]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e067      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006076:	4b37      	ldr	r3, [pc, #220]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 0203 	bic.w	r2, r3, #3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4934      	ldr	r1, [pc, #208]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006088:	f7fc fff2 	bl	8003070 <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006090:	f7fc ffee 	bl	8003070 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	; 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e04f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a6:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 020c 	and.w	r2, r3, #12
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d1eb      	bne.n	8006090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b8:	4b25      	ldr	r3, [pc, #148]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d20c      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c6:	4b22      	ldr	r3, [pc, #136]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e032      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4916      	ldr	r1, [pc, #88]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	490e      	ldr	r1, [pc, #56]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800611e:	f000 f821 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8006122:	4602      	mov	r2, r0
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	490a      	ldr	r1, [pc, #40]	; (8006158 <HAL_RCC_ClockConfig+0x1c0>)
 8006130:	5ccb      	ldrb	r3, [r1, r3]
 8006132:	fa22 f303 	lsr.w	r3, r2, r3
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <HAL_RCC_ClockConfig+0x1c4>)
 8006138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fc fe40 	bl	8002dc4 <HAL_InitTick>

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023c00 	.word	0x40023c00
 8006154:	40023800 	.word	0x40023800
 8006158:	0800fda8 	.word	0x0800fda8
 800615c:	20000518 	.word	0x20000518
 8006160:	2000051c 	.word	0x2000051c

08006164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006168:	b094      	sub	sp, #80	; 0x50
 800616a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	647b      	str	r3, [r7, #68]	; 0x44
 8006170:	2300      	movs	r3, #0
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006174:	2300      	movs	r3, #0
 8006176:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800617c:	4b79      	ldr	r3, [pc, #484]	; (8006364 <HAL_RCC_GetSysClockFreq+0x200>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f003 030c 	and.w	r3, r3, #12
 8006184:	2b08      	cmp	r3, #8
 8006186:	d00d      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006188:	2b08      	cmp	r3, #8
 800618a:	f200 80e1 	bhi.w	8006350 <HAL_RCC_GetSysClockFreq+0x1ec>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_RCC_GetSysClockFreq+0x34>
 8006192:	2b04      	cmp	r3, #4
 8006194:	d003      	beq.n	800619e <HAL_RCC_GetSysClockFreq+0x3a>
 8006196:	e0db      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006198:	4b73      	ldr	r3, [pc, #460]	; (8006368 <HAL_RCC_GetSysClockFreq+0x204>)
 800619a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800619c:	e0db      	b.n	8006356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800619e:	4b72      	ldr	r3, [pc, #456]	; (8006368 <HAL_RCC_GetSysClockFreq+0x204>)
 80061a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061a2:	e0d8      	b.n	8006356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061a4:	4b6f      	ldr	r3, [pc, #444]	; (8006364 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ae:	4b6d      	ldr	r3, [pc, #436]	; (8006364 <HAL_RCC_GetSysClockFreq+0x200>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d063      	beq.n	8006282 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ba:	4b6a      	ldr	r3, [pc, #424]	; (8006364 <HAL_RCC_GetSysClockFreq+0x200>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	099b      	lsrs	r3, r3, #6
 80061c0:	2200      	movs	r2, #0
 80061c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061cc:	633b      	str	r3, [r7, #48]	; 0x30
 80061ce:	2300      	movs	r3, #0
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
 80061d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061d6:	4622      	mov	r2, r4
 80061d8:	462b      	mov	r3, r5
 80061da:	f04f 0000 	mov.w	r0, #0
 80061de:	f04f 0100 	mov.w	r1, #0
 80061e2:	0159      	lsls	r1, r3, #5
 80061e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061e8:	0150      	lsls	r0, r2, #5
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4621      	mov	r1, r4
 80061f0:	1a51      	subs	r1, r2, r1
 80061f2:	6139      	str	r1, [r7, #16]
 80061f4:	4629      	mov	r1, r5
 80061f6:	eb63 0301 	sbc.w	r3, r3, r1
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006208:	4659      	mov	r1, fp
 800620a:	018b      	lsls	r3, r1, #6
 800620c:	4651      	mov	r1, sl
 800620e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006212:	4651      	mov	r1, sl
 8006214:	018a      	lsls	r2, r1, #6
 8006216:	4651      	mov	r1, sl
 8006218:	ebb2 0801 	subs.w	r8, r2, r1
 800621c:	4659      	mov	r1, fp
 800621e:	eb63 0901 	sbc.w	r9, r3, r1
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	f04f 0300 	mov.w	r3, #0
 800622a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800622e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006236:	4690      	mov	r8, r2
 8006238:	4699      	mov	r9, r3
 800623a:	4623      	mov	r3, r4
 800623c:	eb18 0303 	adds.w	r3, r8, r3
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	462b      	mov	r3, r5
 8006244:	eb49 0303 	adc.w	r3, r9, r3
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	f04f 0200 	mov.w	r2, #0
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006256:	4629      	mov	r1, r5
 8006258:	028b      	lsls	r3, r1, #10
 800625a:	4621      	mov	r1, r4
 800625c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006260:	4621      	mov	r1, r4
 8006262:	028a      	lsls	r2, r1, #10
 8006264:	4610      	mov	r0, r2
 8006266:	4619      	mov	r1, r3
 8006268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800626a:	2200      	movs	r2, #0
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
 800626e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006274:	f7fa f80c 	bl	8000290 <__aeabi_uldivmod>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4613      	mov	r3, r2
 800627e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006280:	e058      	b.n	8006334 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006282:	4b38      	ldr	r3, [pc, #224]	; (8006364 <HAL_RCC_GetSysClockFreq+0x200>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	099b      	lsrs	r3, r3, #6
 8006288:	2200      	movs	r2, #0
 800628a:	4618      	mov	r0, r3
 800628c:	4611      	mov	r1, r2
 800628e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006292:	623b      	str	r3, [r7, #32]
 8006294:	2300      	movs	r3, #0
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
 8006298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800629c:	4642      	mov	r2, r8
 800629e:	464b      	mov	r3, r9
 80062a0:	f04f 0000 	mov.w	r0, #0
 80062a4:	f04f 0100 	mov.w	r1, #0
 80062a8:	0159      	lsls	r1, r3, #5
 80062aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062ae:	0150      	lsls	r0, r2, #5
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4641      	mov	r1, r8
 80062b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80062ba:	4649      	mov	r1, r9
 80062bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062d4:	ebb2 040a 	subs.w	r4, r2, sl
 80062d8:	eb63 050b 	sbc.w	r5, r3, fp
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	00eb      	lsls	r3, r5, #3
 80062e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ea:	00e2      	lsls	r2, r4, #3
 80062ec:	4614      	mov	r4, r2
 80062ee:	461d      	mov	r5, r3
 80062f0:	4643      	mov	r3, r8
 80062f2:	18e3      	adds	r3, r4, r3
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	464b      	mov	r3, r9
 80062f8:	eb45 0303 	adc.w	r3, r5, r3
 80062fc:	607b      	str	r3, [r7, #4]
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800630a:	4629      	mov	r1, r5
 800630c:	028b      	lsls	r3, r1, #10
 800630e:	4621      	mov	r1, r4
 8006310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006314:	4621      	mov	r1, r4
 8006316:	028a      	lsls	r2, r1, #10
 8006318:	4610      	mov	r0, r2
 800631a:	4619      	mov	r1, r3
 800631c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631e:	2200      	movs	r2, #0
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	61fa      	str	r2, [r7, #28]
 8006324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006328:	f7f9 ffb2 	bl	8000290 <__aeabi_uldivmod>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4613      	mov	r3, r2
 8006332:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006334:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <HAL_RCC_GetSysClockFreq+0x200>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	3301      	adds	r3, #1
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800634e:	e002      	b.n	8006356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006350:	4b05      	ldr	r3, [pc, #20]	; (8006368 <HAL_RCC_GetSysClockFreq+0x204>)
 8006352:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006358:	4618      	mov	r0, r3
 800635a:	3750      	adds	r7, #80	; 0x50
 800635c:	46bd      	mov	sp, r7
 800635e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800
 8006368:	00f42400 	.word	0x00f42400

0800636c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006370:	4b03      	ldr	r3, [pc, #12]	; (8006380 <HAL_RCC_GetHCLKFreq+0x14>)
 8006372:	681b      	ldr	r3, [r3, #0]
}
 8006374:	4618      	mov	r0, r3
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000518 	.word	0x20000518

08006384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006388:	f7ff fff0 	bl	800636c <HAL_RCC_GetHCLKFreq>
 800638c:	4602      	mov	r2, r0
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	0a9b      	lsrs	r3, r3, #10
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	4903      	ldr	r1, [pc, #12]	; (80063a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800639a:	5ccb      	ldrb	r3, [r1, r3]
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40023800 	.word	0x40023800
 80063a8:	0800fdb8 	.word	0x0800fdb8

080063ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	220f      	movs	r2, #15
 80063ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063bc:	4b12      	ldr	r3, [pc, #72]	; (8006408 <HAL_RCC_GetClockConfig+0x5c>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 0203 	and.w	r2, r3, #3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063c8:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <HAL_RCC_GetClockConfig+0x5c>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063d4:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <HAL_RCC_GetClockConfig+0x5c>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80063e0:	4b09      	ldr	r3, [pc, #36]	; (8006408 <HAL_RCC_GetClockConfig+0x5c>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063ee:	4b07      	ldr	r3, [pc, #28]	; (800640c <HAL_RCC_GetClockConfig+0x60>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0207 	and.w	r2, r3, #7
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	601a      	str	r2, [r3, #0]
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40023800 	.word	0x40023800
 800640c:	40023c00 	.word	0x40023c00

08006410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e07b      	b.n	800651a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	d108      	bne.n	800643c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006432:	d009      	beq.n	8006448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	61da      	str	r2, [r3, #28]
 800643a:	e005      	b.n	8006448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fc fbc2 	bl	8002bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064cc:	ea42 0103 	orr.w	r1, r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	0c1b      	lsrs	r3, r3, #16
 80064e6:	f003 0104 	and.w	r1, r3, #4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	f003 0210 	and.w	r2, r3, #16
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b088      	sub	sp, #32
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	603b      	str	r3, [r7, #0]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_SPI_Transmit+0x22>
 8006540:	2302      	movs	r3, #2
 8006542:	e126      	b.n	8006792 <HAL_SPI_Transmit+0x270>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800654c:	f7fc fd90 	bl	8003070 <HAL_GetTick>
 8006550:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d002      	beq.n	8006568 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006562:	2302      	movs	r3, #2
 8006564:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006566:	e10b      	b.n	8006780 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_SPI_Transmit+0x52>
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006578:	e102      	b.n	8006780 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2203      	movs	r2, #3
 800657e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	88fa      	ldrh	r2, [r7, #6]
 8006598:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c0:	d10f      	bne.n	80065e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	d007      	beq.n	8006600 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006608:	d14b      	bne.n	80066a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_SPI_Transmit+0xf6>
 8006612:	8afb      	ldrh	r3, [r7, #22]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d13e      	bne.n	8006696 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	881a      	ldrh	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	1c9a      	adds	r2, r3, #2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800663c:	e02b      	b.n	8006696 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d112      	bne.n	8006672 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	881a      	ldrh	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	1c9a      	adds	r2, r3, #2
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006670:	e011      	b.n	8006696 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006672:	f7fc fcfd 	bl	8003070 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d803      	bhi.n	800668a <HAL_SPI_Transmit+0x168>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d102      	bne.n	8006690 <HAL_SPI_Transmit+0x16e>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d102      	bne.n	8006696 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006694:	e074      	b.n	8006780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1ce      	bne.n	800663e <HAL_SPI_Transmit+0x11c>
 80066a0:	e04c      	b.n	800673c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_SPI_Transmit+0x18e>
 80066aa:	8afb      	ldrh	r3, [r7, #22]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d140      	bne.n	8006732 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	7812      	ldrb	r2, [r2, #0]
 80066bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066d6:	e02c      	b.n	8006732 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d113      	bne.n	800670e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	330c      	adds	r3, #12
 80066f0:	7812      	ldrb	r2, [r2, #0]
 80066f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	86da      	strh	r2, [r3, #54]	; 0x36
 800670c:	e011      	b.n	8006732 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800670e:	f7fc fcaf 	bl	8003070 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d803      	bhi.n	8006726 <HAL_SPI_Transmit+0x204>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d102      	bne.n	800672c <HAL_SPI_Transmit+0x20a>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006730:	e026      	b.n	8006780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1cd      	bne.n	80066d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fa55 	bl	8006bf0 <SPI_EndRxTxTransaction>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e000      	b.n	8006780 <HAL_SPI_Transmit+0x25e>
  }

error:
 800677e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006790:	7ffb      	ldrb	r3, [r7, #31]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3720      	adds	r7, #32
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b08c      	sub	sp, #48	; 0x30
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067a8:	2301      	movs	r3, #1
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_SPI_TransmitReceive+0x26>
 80067bc:	2302      	movs	r3, #2
 80067be:	e18a      	b.n	8006ad6 <HAL_SPI_TransmitReceive+0x33c>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067c8:	f7fc fc52 	bl	8003070 <HAL_GetTick>
 80067cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80067de:	887b      	ldrh	r3, [r7, #2]
 80067e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d00f      	beq.n	800680a <HAL_SPI_TransmitReceive+0x70>
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f0:	d107      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x68>
 80067fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d003      	beq.n	800680a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006802:	2302      	movs	r3, #2
 8006804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006808:	e15b      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <HAL_SPI_TransmitReceive+0x82>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <HAL_SPI_TransmitReceive+0x82>
 8006816:	887b      	ldrh	r3, [r7, #2]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006822:	e14e      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b04      	cmp	r3, #4
 800682e:	d003      	beq.n	8006838 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2205      	movs	r2, #5
 8006834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	887a      	ldrh	r2, [r7, #2]
 8006848:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	887a      	ldrh	r2, [r7, #2]
 800684e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	887a      	ldrh	r2, [r7, #2]
 800685a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	887a      	ldrh	r2, [r7, #2]
 8006860:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d007      	beq.n	800688c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006894:	d178      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x10a>
 800689e:	8b7b      	ldrh	r3, [r7, #26]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d166      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	881a      	ldrh	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	1c9a      	adds	r2, r3, #2
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068c8:	e053      	b.n	8006972 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d11b      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x176>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d016      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x176>
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d113      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	881a      	ldrh	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f8:	1c9a      	adds	r2, r3, #2
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	d119      	bne.n	8006952 <HAL_SPI_TransmitReceive+0x1b8>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d014      	beq.n	8006952 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	b292      	uxth	r2, r2
 8006934:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	1c9a      	adds	r2, r3, #2
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800694e:	2301      	movs	r3, #1
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006952:	f7fc fb8d 	bl	8003070 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800695e:	429a      	cmp	r2, r3
 8006960:	d807      	bhi.n	8006972 <HAL_SPI_TransmitReceive+0x1d8>
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d003      	beq.n	8006972 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006970:	e0a7      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1a6      	bne.n	80068ca <HAL_SPI_TransmitReceive+0x130>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1a1      	bne.n	80068ca <HAL_SPI_TransmitReceive+0x130>
 8006986:	e07c      	b.n	8006a82 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x1fc>
 8006990:	8b7b      	ldrh	r3, [r7, #26]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d16b      	bne.n	8006a6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	330c      	adds	r3, #12
 80069a0:	7812      	ldrb	r2, [r2, #0]
 80069a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069bc:	e057      	b.n	8006a6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d11c      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x26c>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d017      	beq.n	8006a06 <HAL_SPI_TransmitReceive+0x26c>
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d114      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	330c      	adds	r3, #12
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d119      	bne.n	8006a48 <HAL_SPI_TransmitReceive+0x2ae>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d014      	beq.n	8006a48 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a44:	2301      	movs	r3, #1
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a48:	f7fc fb12 	bl	8003070 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d803      	bhi.n	8006a60 <HAL_SPI_TransmitReceive+0x2c6>
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5e:	d102      	bne.n	8006a66 <HAL_SPI_TransmitReceive+0x2cc>
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d103      	bne.n	8006a6e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a6c:	e029      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1a2      	bne.n	80069be <HAL_SPI_TransmitReceive+0x224>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d19d      	bne.n	80069be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f8b2 	bl	8006bf0 <SPI_EndRxTxTransaction>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d006      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a9e:	e010      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	e000      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006ac0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3730      	adds	r7, #48	; 0x30
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	4613      	mov	r3, r2
 8006aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006af0:	f7fc fabe 	bl	8003070 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	4413      	add	r3, r2
 8006afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b00:	f7fc fab6 	bl	8003070 <HAL_GetTick>
 8006b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b06:	4b39      	ldr	r3, [pc, #228]	; (8006bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	015b      	lsls	r3, r3, #5
 8006b0c:	0d1b      	lsrs	r3, r3, #20
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	fb02 f303 	mul.w	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b16:	e054      	b.n	8006bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1e:	d050      	beq.n	8006bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b20:	f7fc faa6 	bl	8003070 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d902      	bls.n	8006b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d13d      	bne.n	8006bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b4e:	d111      	bne.n	8006b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b58:	d004      	beq.n	8006b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b62:	d107      	bne.n	8006b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7c:	d10f      	bne.n	8006b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e017      	b.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	bf0c      	ite	eq
 8006bd2:	2301      	moveq	r3, #1
 8006bd4:	2300      	movne	r3, #0
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d19b      	bne.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000518 	.word	0x20000518

08006bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bfc:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <SPI_EndRxTxTransaction+0x7c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <SPI_EndRxTxTransaction+0x80>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	0d5b      	lsrs	r3, r3, #21
 8006c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c0c:	fb02 f303 	mul.w	r3, r2, r3
 8006c10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c1a:	d112      	bne.n	8006c42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	2180      	movs	r1, #128	; 0x80
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff ff5a 	bl	8006ae0 <SPI_WaitFlagStateUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d016      	beq.n	8006c60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e00f      	b.n	8006c62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c58:	2b80      	cmp	r3, #128	; 0x80
 8006c5a:	d0f2      	beq.n	8006c42 <SPI_EndRxTxTransaction+0x52>
 8006c5c:	e000      	b.n	8006c60 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c5e:	bf00      	nop
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000518 	.word	0x20000518
 8006c70:	165e9f81 	.word	0x165e9f81

08006c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e041      	b.n	8006d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fc f824 	bl	8002ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	f000 fd3a 	bl	800772c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d001      	beq.n	8006d2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e03c      	b.n	8006da6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <HAL_TIM_Base_Start+0xa0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_TIM_Base_Start+0x5c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d46:	d013      	beq.n	8006d70 <HAL_TIM_Base_Start+0x5c>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <HAL_TIM_Base_Start+0xa4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_TIM_Base_Start+0x5c>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <HAL_TIM_Base_Start+0xa8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_TIM_Base_Start+0x5c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <HAL_TIM_Base_Start+0xac>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_TIM_Base_Start+0x5c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a16      	ldr	r2, [pc, #88]	; (8006dc4 <HAL_TIM_Base_Start+0xb0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d111      	bne.n	8006d94 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d010      	beq.n	8006da4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0201 	orr.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	e007      	b.n	8006da4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	40014000 	.word	0x40014000

08006dc8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a1a      	ldr	r2, [r3, #32]
 8006dd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10f      	bne.n	8006e00 <HAL_TIM_Base_Stop+0x38>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6a1a      	ldr	r2, [r3, #32]
 8006de6:	f240 4344 	movw	r3, #1092	; 0x444
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_Base_Stop+0x38>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d001      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e044      	b.n	8006eba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1e      	ldr	r2, [pc, #120]	; (8006ec8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d018      	beq.n	8006e84 <HAL_TIM_Base_Start_IT+0x6c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5a:	d013      	beq.n	8006e84 <HAL_TIM_Base_Start_IT+0x6c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1a      	ldr	r2, [pc, #104]	; (8006ecc <HAL_TIM_Base_Start_IT+0xb4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00e      	beq.n	8006e84 <HAL_TIM_Base_Start_IT+0x6c>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a19      	ldr	r2, [pc, #100]	; (8006ed0 <HAL_TIM_Base_Start_IT+0xb8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d009      	beq.n	8006e84 <HAL_TIM_Base_Start_IT+0x6c>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d004      	beq.n	8006e84 <HAL_TIM_Base_Start_IT+0x6c>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a16      	ldr	r2, [pc, #88]	; (8006ed8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d111      	bne.n	8006ea8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b06      	cmp	r3, #6
 8006e94:	d010      	beq.n	8006eb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0201 	orr.w	r2, r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea6:	e007      	b.n	8006eb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	40000800 	.word	0x40000800
 8006ed4:	40000c00 	.word	0x40000c00
 8006ed8:	40014000 	.word	0x40014000

08006edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e041      	b.n	8006f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f839 	bl	8006f7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f000 fc06 	bl	800772c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d109      	bne.n	8006fb4 <HAL_TIM_PWM_Start+0x24>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	e022      	b.n	8006ffa <HAL_TIM_PWM_Start+0x6a>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d109      	bne.n	8006fce <HAL_TIM_PWM_Start+0x3e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	e015      	b.n	8006ffa <HAL_TIM_PWM_Start+0x6a>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d109      	bne.n	8006fe8 <HAL_TIM_PWM_Start+0x58>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	e008      	b.n	8006ffa <HAL_TIM_PWM_Start+0x6a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e068      	b.n	80070d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_Start+0x82>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007010:	e013      	b.n	800703a <HAL_TIM_PWM_Start+0xaa>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b04      	cmp	r3, #4
 8007016:	d104      	bne.n	8007022 <HAL_TIM_PWM_Start+0x92>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007020:	e00b      	b.n	800703a <HAL_TIM_PWM_Start+0xaa>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d104      	bne.n	8007032 <HAL_TIM_PWM_Start+0xa2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007030:	e003      	b.n	800703a <HAL_TIM_PWM_Start+0xaa>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2201      	movs	r2, #1
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fe18 	bl	8007c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a23      	ldr	r2, [pc, #140]	; (80070dc <HAL_TIM_PWM_Start+0x14c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d107      	bne.n	8007062 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007060:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1d      	ldr	r2, [pc, #116]	; (80070dc <HAL_TIM_PWM_Start+0x14c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d018      	beq.n	800709e <HAL_TIM_PWM_Start+0x10e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007074:	d013      	beq.n	800709e <HAL_TIM_PWM_Start+0x10e>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a19      	ldr	r2, [pc, #100]	; (80070e0 <HAL_TIM_PWM_Start+0x150>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00e      	beq.n	800709e <HAL_TIM_PWM_Start+0x10e>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <HAL_TIM_PWM_Start+0x154>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_TIM_PWM_Start+0x10e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <HAL_TIM_PWM_Start+0x158>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_TIM_PWM_Start+0x10e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a14      	ldr	r2, [pc, #80]	; (80070ec <HAL_TIM_PWM_Start+0x15c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d111      	bne.n	80070c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b06      	cmp	r3, #6
 80070ae:	d010      	beq.n	80070d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0201 	orr.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c0:	e007      	b.n	80070d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0201 	orr.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00
 80070ec:	40014000 	.word	0x40014000

080070f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2200      	movs	r2, #0
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fdb8 	bl	8007c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a29      	ldr	r2, [pc, #164]	; (80071b4 <HAL_TIM_PWM_Stop+0xc4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d117      	bne.n	8007142 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6a1a      	ldr	r2, [r3, #32]
 8007118:	f241 1311 	movw	r3, #4369	; 0x1111
 800711c:	4013      	ands	r3, r2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10f      	bne.n	8007142 <HAL_TIM_PWM_Stop+0x52>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6a1a      	ldr	r2, [r3, #32]
 8007128:	f240 4344 	movw	r3, #1092	; 0x444
 800712c:	4013      	ands	r3, r2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d107      	bne.n	8007142 <HAL_TIM_PWM_Stop+0x52>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6a1a      	ldr	r2, [r3, #32]
 8007148:	f241 1311 	movw	r3, #4369	; 0x1111
 800714c:	4013      	ands	r3, r2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10f      	bne.n	8007172 <HAL_TIM_PWM_Stop+0x82>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6a1a      	ldr	r2, [r3, #32]
 8007158:	f240 4344 	movw	r3, #1092	; 0x444
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d107      	bne.n	8007172 <HAL_TIM_PWM_Stop+0x82>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0201 	bic.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <HAL_TIM_PWM_Stop+0x92>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007180:	e013      	b.n	80071aa <HAL_TIM_PWM_Stop+0xba>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d104      	bne.n	8007192 <HAL_TIM_PWM_Stop+0xa2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007190:	e00b      	b.n	80071aa <HAL_TIM_PWM_Stop+0xba>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d104      	bne.n	80071a2 <HAL_TIM_PWM_Stop+0xb2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071a0:	e003      	b.n	80071aa <HAL_TIM_PWM_Stop+0xba>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40010000 	.word	0x40010000

080071b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d122      	bne.n	8007214 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d11b      	bne.n	8007214 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0202 	mvn.w	r2, #2
 80071e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa77 	bl	80076ee <HAL_TIM_IC_CaptureCallback>
 8007200:	e005      	b.n	800720e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa69 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa7a 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b04      	cmp	r3, #4
 8007220:	d122      	bne.n	8007268 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b04      	cmp	r3, #4
 800722e:	d11b      	bne.n	8007268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0204 	mvn.w	r2, #4
 8007238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa4d 	bl	80076ee <HAL_TIM_IC_CaptureCallback>
 8007254:	e005      	b.n	8007262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa3f 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa50 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b08      	cmp	r3, #8
 8007274:	d122      	bne.n	80072bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b08      	cmp	r3, #8
 8007282:	d11b      	bne.n	80072bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0208 	mvn.w	r2, #8
 800728c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2204      	movs	r2, #4
 8007292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa23 	bl	80076ee <HAL_TIM_IC_CaptureCallback>
 80072a8:	e005      	b.n	80072b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa15 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa26 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d122      	bne.n	8007310 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d11b      	bne.n	8007310 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0210 	mvn.w	r2, #16
 80072e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2208      	movs	r2, #8
 80072e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f9f9 	bl	80076ee <HAL_TIM_IC_CaptureCallback>
 80072fc:	e005      	b.n	800730a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f9eb 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f9fc 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b01      	cmp	r3, #1
 800731c:	d10e      	bne.n	800733c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b01      	cmp	r3, #1
 800732a:	d107      	bne.n	800733c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0201 	mvn.w	r2, #1
 8007334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fb f91e 	bl	8002578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b80      	cmp	r3, #128	; 0x80
 8007348:	d10e      	bne.n	8007368 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007354:	2b80      	cmp	r3, #128	; 0x80
 8007356:	d107      	bne.n	8007368 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fd26 	bl	8007db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d10e      	bne.n	8007394 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d107      	bne.n	8007394 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800738c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9c1 	bl	8007716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d10e      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d107      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0220 	mvn.w	r2, #32
 80073b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fcf0 	bl	8007da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e0ae      	b.n	8007544 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b0c      	cmp	r3, #12
 80073f2:	f200 809f 	bhi.w	8007534 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007535 	.word	0x08007535
 8007404:	08007535 	.word	0x08007535
 8007408:	08007535 	.word	0x08007535
 800740c:	08007471 	.word	0x08007471
 8007410:	08007535 	.word	0x08007535
 8007414:	08007535 	.word	0x08007535
 8007418:	08007535 	.word	0x08007535
 800741c:	080074b3 	.word	0x080074b3
 8007420:	08007535 	.word	0x08007535
 8007424:	08007535 	.word	0x08007535
 8007428:	08007535 	.word	0x08007535
 800742c:	080074f3 	.word	0x080074f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68b9      	ldr	r1, [r7, #8]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f9f8 	bl	800782c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0208 	orr.w	r2, r2, #8
 800744a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0204 	bic.w	r2, r2, #4
 800745a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6999      	ldr	r1, [r3, #24]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	619a      	str	r2, [r3, #24]
      break;
 800746e:	e064      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fa3e 	bl	80078f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800748a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6999      	ldr	r1, [r3, #24]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	021a      	lsls	r2, r3, #8
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	619a      	str	r2, [r3, #24]
      break;
 80074b0:	e043      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fa89 	bl	80079d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0208 	orr.w	r2, r2, #8
 80074cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69da      	ldr	r2, [r3, #28]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0204 	bic.w	r2, r2, #4
 80074dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69d9      	ldr	r1, [r3, #28]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	61da      	str	r2, [r3, #28]
      break;
 80074f0:	e023      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fad3 	bl	8007aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800750c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800751c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69d9      	ldr	r1, [r3, #28]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	021a      	lsls	r2, r3, #8
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	61da      	str	r2, [r3, #28]
      break;
 8007532:	e002      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
      break;
 8007538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_TIM_ConfigClockSource+0x1c>
 8007564:	2302      	movs	r3, #2
 8007566:	e0b4      	b.n	80076d2 <HAL_TIM_ConfigClockSource+0x186>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800758e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a0:	d03e      	beq.n	8007620 <HAL_TIM_ConfigClockSource+0xd4>
 80075a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a6:	f200 8087 	bhi.w	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	f000 8086 	beq.w	80076be <HAL_TIM_ConfigClockSource+0x172>
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b6:	d87f      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075b8:	2b70      	cmp	r3, #112	; 0x70
 80075ba:	d01a      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0xa6>
 80075bc:	2b70      	cmp	r3, #112	; 0x70
 80075be:	d87b      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075c0:	2b60      	cmp	r3, #96	; 0x60
 80075c2:	d050      	beq.n	8007666 <HAL_TIM_ConfigClockSource+0x11a>
 80075c4:	2b60      	cmp	r3, #96	; 0x60
 80075c6:	d877      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075c8:	2b50      	cmp	r3, #80	; 0x50
 80075ca:	d03c      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0xfa>
 80075cc:	2b50      	cmp	r3, #80	; 0x50
 80075ce:	d873      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d058      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x13a>
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d86f      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075d8:	2b30      	cmp	r3, #48	; 0x30
 80075da:	d064      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15a>
 80075dc:	2b30      	cmp	r3, #48	; 0x30
 80075de:	d86b      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d060      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15a>
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d867      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d05c      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15a>
 80075ec:	2b10      	cmp	r3, #16
 80075ee:	d05a      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15a>
 80075f0:	e062      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6899      	ldr	r1, [r3, #8]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f000 fb19 	bl	8007c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	609a      	str	r2, [r3, #8]
      break;
 800761e:	e04f      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	6899      	ldr	r1, [r3, #8]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f000 fb02 	bl	8007c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007642:	609a      	str	r2, [r3, #8]
      break;
 8007644:	e03c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6859      	ldr	r1, [r3, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	461a      	mov	r2, r3
 8007654:	f000 fa76 	bl	8007b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2150      	movs	r1, #80	; 0x50
 800765e:	4618      	mov	r0, r3
 8007660:	f000 facf 	bl	8007c02 <TIM_ITRx_SetConfig>
      break;
 8007664:	e02c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	6859      	ldr	r1, [r3, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	461a      	mov	r2, r3
 8007674:	f000 fa95 	bl	8007ba2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2160      	movs	r1, #96	; 0x60
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fabf 	bl	8007c02 <TIM_ITRx_SetConfig>
      break;
 8007684:	e01c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6859      	ldr	r1, [r3, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	461a      	mov	r2, r3
 8007694:	f000 fa56 	bl	8007b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2140      	movs	r1, #64	; 0x40
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 faaf 	bl	8007c02 <TIM_ITRx_SetConfig>
      break;
 80076a4:	e00c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f000 faa6 	bl	8007c02 <TIM_ITRx_SetConfig>
      break;
 80076b6:	e003      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
      break;
 80076bc:	e000      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a34      	ldr	r2, [pc, #208]	; (8007810 <TIM_Base_SetConfig+0xe4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00f      	beq.n	8007764 <TIM_Base_SetConfig+0x38>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d00b      	beq.n	8007764 <TIM_Base_SetConfig+0x38>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a31      	ldr	r2, [pc, #196]	; (8007814 <TIM_Base_SetConfig+0xe8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d007      	beq.n	8007764 <TIM_Base_SetConfig+0x38>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a30      	ldr	r2, [pc, #192]	; (8007818 <TIM_Base_SetConfig+0xec>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_Base_SetConfig+0x38>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a2f      	ldr	r2, [pc, #188]	; (800781c <TIM_Base_SetConfig+0xf0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d108      	bne.n	8007776 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a25      	ldr	r2, [pc, #148]	; (8007810 <TIM_Base_SetConfig+0xe4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01b      	beq.n	80077b6 <TIM_Base_SetConfig+0x8a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007784:	d017      	beq.n	80077b6 <TIM_Base_SetConfig+0x8a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a22      	ldr	r2, [pc, #136]	; (8007814 <TIM_Base_SetConfig+0xe8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d013      	beq.n	80077b6 <TIM_Base_SetConfig+0x8a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a21      	ldr	r2, [pc, #132]	; (8007818 <TIM_Base_SetConfig+0xec>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00f      	beq.n	80077b6 <TIM_Base_SetConfig+0x8a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a20      	ldr	r2, [pc, #128]	; (800781c <TIM_Base_SetConfig+0xf0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00b      	beq.n	80077b6 <TIM_Base_SetConfig+0x8a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1f      	ldr	r2, [pc, #124]	; (8007820 <TIM_Base_SetConfig+0xf4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d007      	beq.n	80077b6 <TIM_Base_SetConfig+0x8a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a1e      	ldr	r2, [pc, #120]	; (8007824 <TIM_Base_SetConfig+0xf8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d003      	beq.n	80077b6 <TIM_Base_SetConfig+0x8a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a1d      	ldr	r2, [pc, #116]	; (8007828 <TIM_Base_SetConfig+0xfc>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d108      	bne.n	80077c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a08      	ldr	r2, [pc, #32]	; (8007810 <TIM_Base_SetConfig+0xe4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d103      	bne.n	80077fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	615a      	str	r2, [r3, #20]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40010000 	.word	0x40010000
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40000c00 	.word	0x40000c00
 8007820:	40014000 	.word	0x40014000
 8007824:	40014400 	.word	0x40014400
 8007828:	40014800 	.word	0x40014800

0800782c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f023 0201 	bic.w	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 0303 	bic.w	r3, r3, #3
 8007862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f023 0302 	bic.w	r3, r3, #2
 8007874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a1c      	ldr	r2, [pc, #112]	; (80078f4 <TIM_OC1_SetConfig+0xc8>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d10c      	bne.n	80078a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 0308 	bic.w	r3, r3, #8
 800788e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f023 0304 	bic.w	r3, r3, #4
 80078a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <TIM_OC1_SetConfig+0xc8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d111      	bne.n	80078ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40010000 	.word	0x40010000

080078f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f023 0210 	bic.w	r2, r3, #16
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800792e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f023 0320 	bic.w	r3, r3, #32
 8007942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	4313      	orrs	r3, r2
 800794e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <TIM_OC2_SetConfig+0xd4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d10d      	bne.n	8007974 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800795e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a15      	ldr	r2, [pc, #84]	; (80079cc <TIM_OC2_SetConfig+0xd4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d113      	bne.n	80079a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800798a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40010000 	.word	0x40010000

080079d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0303 	bic.w	r3, r3, #3
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	021b      	lsls	r3, r3, #8
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <TIM_OC3_SetConfig+0xd0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d10d      	bne.n	8007a4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a14      	ldr	r2, [pc, #80]	; (8007aa0 <TIM_OC3_SetConfig+0xd0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d113      	bne.n	8007a7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	621a      	str	r2, [r3, #32]
}
 8007a94:	bf00      	nop
 8007a96:	371c      	adds	r7, #28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	40010000 	.word	0x40010000

08007aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	031b      	lsls	r3, r3, #12
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a10      	ldr	r2, [pc, #64]	; (8007b40 <TIM_OC4_SetConfig+0x9c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d109      	bne.n	8007b18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	019b      	lsls	r3, r3, #6
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40010000 	.word	0x40010000

08007b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f023 0201 	bic.w	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f023 030a 	bic.w	r3, r3, #10
 8007b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	621a      	str	r2, [r3, #32]
}
 8007b96:	bf00      	nop
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b087      	sub	sp, #28
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	f023 0210 	bic.w	r2, r3, #16
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	031b      	lsls	r3, r3, #12
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	011b      	lsls	r3, r3, #4
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	621a      	str	r2, [r3, #32]
}
 8007bf6:	bf00      	nop
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f043 0307 	orr.w	r3, r3, #7
 8007c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	609a      	str	r2, [r3, #8]
}
 8007c2c:	bf00      	nop
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	021a      	lsls	r2, r3, #8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	609a      	str	r2, [r3, #8]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1a      	ldr	r2, [r3, #32]
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	401a      	ands	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a1a      	ldr	r2, [r3, #32]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f003 031f 	and.w	r3, r3, #31
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	621a      	str	r2, [r3, #32]
}
 8007cb6:	bf00      	nop
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e050      	b.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1c      	ldr	r2, [pc, #112]	; (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d018      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d28:	d013      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00e      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a16      	ldr	r2, [pc, #88]	; (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d009      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d004      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a13      	ldr	r2, [pc, #76]	; (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10c      	bne.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40010000 	.word	0x40010000
 8007d90:	40000400 	.word	0x40000400
 8007d94:	40000800 	.word	0x40000800
 8007d98:	40000c00 	.word	0x40000c00
 8007d9c:	40014000 	.word	0x40014000

08007da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dc8:	b084      	sub	sp, #16
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	f107 001c 	add.w	r0, r7, #28
 8007dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d122      	bne.n	8007e26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d105      	bne.n	8007e1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fbee 	bl	80095fc <USB_CoreReset>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
 8007e24:	e01a      	b.n	8007e5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fbe2 	bl	80095fc <USB_CoreReset>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8007e4e:	e005      	b.n	8007e5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d10b      	bne.n	8007e7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f043 0206 	orr.w	r2, r3, #6
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f043 0220 	orr.w	r2, r3, #32
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e86:	b004      	add	sp, #16
 8007e88:	4770      	bx	lr
	...

08007e8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	4613      	mov	r3, r2
 8007e98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d165      	bne.n	8007f6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4a41      	ldr	r2, [pc, #260]	; (8007fa8 <USB_SetTurnaroundTime+0x11c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d906      	bls.n	8007eb6 <USB_SetTurnaroundTime+0x2a>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4a40      	ldr	r2, [pc, #256]	; (8007fac <USB_SetTurnaroundTime+0x120>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d202      	bcs.n	8007eb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007eb0:	230f      	movs	r3, #15
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e062      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4a3c      	ldr	r2, [pc, #240]	; (8007fac <USB_SetTurnaroundTime+0x120>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d306      	bcc.n	8007ecc <USB_SetTurnaroundTime+0x40>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4a3b      	ldr	r2, [pc, #236]	; (8007fb0 <USB_SetTurnaroundTime+0x124>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d202      	bcs.n	8007ecc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ec6:	230e      	movs	r3, #14
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	e057      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a38      	ldr	r2, [pc, #224]	; (8007fb0 <USB_SetTurnaroundTime+0x124>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d306      	bcc.n	8007ee2 <USB_SetTurnaroundTime+0x56>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4a37      	ldr	r2, [pc, #220]	; (8007fb4 <USB_SetTurnaroundTime+0x128>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d202      	bcs.n	8007ee2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007edc:	230d      	movs	r3, #13
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e04c      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4a33      	ldr	r2, [pc, #204]	; (8007fb4 <USB_SetTurnaroundTime+0x128>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d306      	bcc.n	8007ef8 <USB_SetTurnaroundTime+0x6c>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4a32      	ldr	r2, [pc, #200]	; (8007fb8 <USB_SetTurnaroundTime+0x12c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d802      	bhi.n	8007ef8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e041      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4a2f      	ldr	r2, [pc, #188]	; (8007fb8 <USB_SetTurnaroundTime+0x12c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d906      	bls.n	8007f0e <USB_SetTurnaroundTime+0x82>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4a2e      	ldr	r2, [pc, #184]	; (8007fbc <USB_SetTurnaroundTime+0x130>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d802      	bhi.n	8007f0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f08:	230b      	movs	r3, #11
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e036      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4a2a      	ldr	r2, [pc, #168]	; (8007fbc <USB_SetTurnaroundTime+0x130>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d906      	bls.n	8007f24 <USB_SetTurnaroundTime+0x98>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4a29      	ldr	r2, [pc, #164]	; (8007fc0 <USB_SetTurnaroundTime+0x134>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d802      	bhi.n	8007f24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f1e:	230a      	movs	r3, #10
 8007f20:	617b      	str	r3, [r7, #20]
 8007f22:	e02b      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <USB_SetTurnaroundTime+0x134>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d906      	bls.n	8007f3a <USB_SetTurnaroundTime+0xae>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4a25      	ldr	r2, [pc, #148]	; (8007fc4 <USB_SetTurnaroundTime+0x138>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d202      	bcs.n	8007f3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f34:	2309      	movs	r3, #9
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e020      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	4a21      	ldr	r2, [pc, #132]	; (8007fc4 <USB_SetTurnaroundTime+0x138>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d306      	bcc.n	8007f50 <USB_SetTurnaroundTime+0xc4>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4a20      	ldr	r2, [pc, #128]	; (8007fc8 <USB_SetTurnaroundTime+0x13c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d802      	bhi.n	8007f50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f4a:	2308      	movs	r3, #8
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e015      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <USB_SetTurnaroundTime+0x13c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d906      	bls.n	8007f66 <USB_SetTurnaroundTime+0xda>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4a1c      	ldr	r2, [pc, #112]	; (8007fcc <USB_SetTurnaroundTime+0x140>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d202      	bcs.n	8007f66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f60:	2307      	movs	r3, #7
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e00a      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f66:	2306      	movs	r3, #6
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	e007      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d102      	bne.n	8007f78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f72:	2309      	movs	r3, #9
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	e001      	b.n	8007f7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f78:	2309      	movs	r3, #9
 8007f7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68da      	ldr	r2, [r3, #12]
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	029b      	lsls	r3, r3, #10
 8007f90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007f94:	431a      	orrs	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	00d8acbf 	.word	0x00d8acbf
 8007fac:	00e4e1c0 	.word	0x00e4e1c0
 8007fb0:	00f42400 	.word	0x00f42400
 8007fb4:	01067380 	.word	0x01067380
 8007fb8:	011a499f 	.word	0x011a499f
 8007fbc:	01312cff 	.word	0x01312cff
 8007fc0:	014ca43f 	.word	0x014ca43f
 8007fc4:	016e3600 	.word	0x016e3600
 8007fc8:	01a6ab1f 	.word	0x01a6ab1f
 8007fcc:	01e84800 	.word	0x01e84800

08007fd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f043 0201 	orr.w	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f023 0201 	bic.w	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d115      	bne.n	8008062 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008042:	2001      	movs	r0, #1
 8008044:	f7fb f820 	bl	8003088 <HAL_Delay>
      ms++;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fa45 	bl	80094de <USB_GetMode>
 8008054:	4603      	mov	r3, r0
 8008056:	2b01      	cmp	r3, #1
 8008058:	d01e      	beq.n	8008098 <USB_SetCurrentMode+0x84>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2b31      	cmp	r3, #49	; 0x31
 800805e:	d9f0      	bls.n	8008042 <USB_SetCurrentMode+0x2e>
 8008060:	e01a      	b.n	8008098 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d115      	bne.n	8008094 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008074:	2001      	movs	r0, #1
 8008076:	f7fb f807 	bl	8003088 <HAL_Delay>
      ms++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 fa2c 	bl	80094de <USB_GetMode>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <USB_SetCurrentMode+0x84>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b31      	cmp	r3, #49	; 0x31
 8008090:	d9f0      	bls.n	8008074 <USB_SetCurrentMode+0x60>
 8008092:	e001      	b.n	8008098 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e005      	b.n	80080a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b32      	cmp	r3, #50	; 0x32
 800809c:	d101      	bne.n	80080a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080ac:	b084      	sub	sp, #16
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b086      	sub	sp, #24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080c6:	2300      	movs	r3, #0
 80080c8:	613b      	str	r3, [r7, #16]
 80080ca:	e009      	b.n	80080e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3340      	adds	r3, #64	; 0x40
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	3301      	adds	r3, #1
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b0e      	cmp	r3, #14
 80080e4:	d9f2      	bls.n	80080cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11c      	bne.n	8008126 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080fa:	f043 0302 	orr.w	r3, r3, #2
 80080fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
 8008124:	e00b      	b.n	800813e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008144:	461a      	mov	r2, r3
 8008146:	2300      	movs	r3, #0
 8008148:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008150:	4619      	mov	r1, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008158:	461a      	mov	r2, r3
 800815a:	680b      	ldr	r3, [r1, #0]
 800815c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	2b01      	cmp	r3, #1
 8008162:	d10c      	bne.n	800817e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d104      	bne.n	8008174 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800816a:	2100      	movs	r1, #0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f965 	bl	800843c <USB_SetDevSpeed>
 8008172:	e008      	b.n	8008186 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008174:	2101      	movs	r1, #1
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f960 	bl	800843c <USB_SetDevSpeed>
 800817c:	e003      	b.n	8008186 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800817e:	2103      	movs	r1, #3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f95b 	bl	800843c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008186:	2110      	movs	r1, #16
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f8f3 	bl	8008374 <USB_FlushTxFifo>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f91f 	bl	80083dc <USB_FlushRxFifo>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ae:	461a      	mov	r2, r3
 80081b0:	2300      	movs	r3, #0
 80081b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ba:	461a      	mov	r2, r3
 80081bc:	2300      	movs	r3, #0
 80081be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c6:	461a      	mov	r2, r3
 80081c8:	2300      	movs	r3, #0
 80081ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081cc:	2300      	movs	r3, #0
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	e043      	b.n	800825a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081e8:	d118      	bne.n	800821c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fc:	461a      	mov	r2, r3
 80081fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e013      	b.n	800822e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	461a      	mov	r2, r3
 8008214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e008      	b.n	800822e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008228:	461a      	mov	r2, r3
 800822a:	2300      	movs	r3, #0
 800822c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823a:	461a      	mov	r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	461a      	mov	r2, r3
 800824e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3301      	adds	r3, #1
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	429a      	cmp	r2, r3
 8008260:	d3b7      	bcc.n	80081d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008262:	2300      	movs	r3, #0
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	e043      	b.n	80082f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800827a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800827e:	d118      	bne.n	80082b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	461a      	mov	r2, r3
 8008294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e013      	b.n	80082c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a8:	461a      	mov	r2, r3
 80082aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	e008      	b.n	80082c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082be:	461a      	mov	r2, r3
 80082c0:	2300      	movs	r3, #0
 80082c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d0:	461a      	mov	r2, r3
 80082d2:	2300      	movs	r3, #0
 80082d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e2:	461a      	mov	r2, r3
 80082e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	3301      	adds	r3, #1
 80082ee:	613b      	str	r3, [r7, #16]
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d3b7      	bcc.n	8008268 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800830a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008318:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	2b00      	cmp	r3, #0
 800831e:	d105      	bne.n	800832c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f043 0210 	orr.w	r2, r3, #16
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	699a      	ldr	r2, [r3, #24]
 8008330:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <USB_DevInit+0x2c4>)
 8008332:	4313      	orrs	r3, r2
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	f043 0208 	orr.w	r2, r3, #8
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800834a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834c:	2b01      	cmp	r3, #1
 800834e:	d107      	bne.n	8008360 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008358:	f043 0304 	orr.w	r3, r3, #4
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800836c:	b004      	add	sp, #16
 800836e:	4770      	bx	lr
 8008370:	803c3800 	.word	0x803c3800

08008374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4a13      	ldr	r2, [pc, #76]	; (80083d8 <USB_FlushTxFifo+0x64>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d901      	bls.n	8008394 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e01b      	b.n	80083cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	daf2      	bge.n	8008382 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	019b      	lsls	r3, r3, #6
 80083a4:	f043 0220 	orr.w	r2, r3, #32
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4a08      	ldr	r2, [pc, #32]	; (80083d8 <USB_FlushTxFifo+0x64>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d901      	bls.n	80083be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e006      	b.n	80083cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	d0f0      	beq.n	80083ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	00030d40 	.word	0x00030d40

080083dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3301      	adds	r3, #1
 80083ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4a11      	ldr	r2, [pc, #68]	; (8008438 <USB_FlushRxFifo+0x5c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e018      	b.n	800842c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	daf2      	bge.n	80083e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2210      	movs	r2, #16
 800840a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a08      	ldr	r2, [pc, #32]	; (8008438 <USB_FlushRxFifo+0x5c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d901      	bls.n	800841e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e006      	b.n	800842c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0310 	and.w	r3, r3, #16
 8008426:	2b10      	cmp	r3, #16
 8008428:	d0f0      	beq.n	800840c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	00030d40 	.word	0x00030d40

0800843c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	68f9      	ldr	r1, [r7, #12]
 8008458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800845c:	4313      	orrs	r3, r2
 800845e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800846e:	b480      	push	{r7}
 8008470:	b087      	sub	sp, #28
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 0306 	and.w	r3, r3, #6
 8008486:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800848e:	2300      	movs	r3, #0
 8008490:	75fb      	strb	r3, [r7, #23]
 8008492:	e00a      	b.n	80084aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d002      	beq.n	80084a0 <USB_GetDevSpeed+0x32>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b06      	cmp	r3, #6
 800849e:	d102      	bne.n	80084a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80084a0:	2302      	movs	r3, #2
 80084a2:	75fb      	strb	r3, [r7, #23]
 80084a4:	e001      	b.n	80084aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80084a6:	230f      	movs	r3, #15
 80084a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d13a      	bne.n	800854a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	f003 030f 	and.w	r3, r3, #15
 80084e4:	2101      	movs	r1, #1
 80084e6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	68f9      	ldr	r1, [r7, #12]
 80084ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084f2:	4313      	orrs	r3, r2
 80084f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d155      	bne.n	80085b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	791b      	ldrb	r3, [r3, #4]
 8008526:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008528:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	059b      	lsls	r3, r3, #22
 800852e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008530:	4313      	orrs	r3, r2
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	e036      	b.n	80085b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008550:	69da      	ldr	r2, [r3, #28]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 030f 	and.w	r3, r3, #15
 800855a:	2101      	movs	r1, #1
 800855c:	fa01 f303 	lsl.w	r3, r1, r3
 8008560:	041b      	lsls	r3, r3, #16
 8008562:	68f9      	ldr	r1, [r7, #12]
 8008564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008568:	4313      	orrs	r3, r2
 800856a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d11a      	bne.n	80085b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	791b      	ldrb	r3, [r3, #4]
 800859c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800859e:	430b      	orrs	r3, r1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
	...

080085c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d161      	bne.n	80086a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085fa:	d11f      	bne.n	800863c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	0151      	lsls	r1, r2, #5
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	440a      	add	r2, r1
 8008612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800861a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	440a      	add	r2, r1
 8008632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800863a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	2101      	movs	r1, #1
 800864e:	fa01 f303 	lsl.w	r3, r1, r3
 8008652:	b29b      	uxth	r3, r3
 8008654:	43db      	mvns	r3, r3
 8008656:	68f9      	ldr	r1, [r7, #12]
 8008658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800865c:	4013      	ands	r3, r2
 800865e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f003 030f 	and.w	r3, r3, #15
 8008670:	2101      	movs	r1, #1
 8008672:	fa01 f303 	lsl.w	r3, r1, r3
 8008676:	b29b      	uxth	r3, r3
 8008678:	43db      	mvns	r3, r3
 800867a:	68f9      	ldr	r1, [r7, #12]
 800867c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008680:	4013      	ands	r3, r2
 8008682:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	0159      	lsls	r1, r3, #5
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	440b      	add	r3, r1
 800869a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869e:	4619      	mov	r1, r3
 80086a0:	4b35      	ldr	r3, [pc, #212]	; (8008778 <USB_DeactivateEndpoint+0x1b0>)
 80086a2:	4013      	ands	r3, r2
 80086a4:	600b      	str	r3, [r1, #0]
 80086a6:	e060      	b.n	800876a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086be:	d11f      	bne.n	8008700 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	f003 030f 	and.w	r3, r3, #15
 8008710:	2101      	movs	r1, #1
 8008712:	fa01 f303 	lsl.w	r3, r1, r3
 8008716:	041b      	lsls	r3, r3, #16
 8008718:	43db      	mvns	r3, r3
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008720:	4013      	ands	r3, r2
 8008722:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872a:	69da      	ldr	r2, [r3, #28]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	f003 030f 	and.w	r3, r3, #15
 8008734:	2101      	movs	r1, #1
 8008736:	fa01 f303 	lsl.w	r3, r1, r3
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	43db      	mvns	r3, r3
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008744:	4013      	ands	r3, r2
 8008746:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	0159      	lsls	r1, r3, #5
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	440b      	add	r3, r1
 800875e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008762:	4619      	mov	r1, r3
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <USB_DeactivateEndpoint+0x1b4>)
 8008766:	4013      	ands	r3, r2
 8008768:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	ec337800 	.word	0xec337800
 800877c:	eff37800 	.word	0xeff37800

08008780 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08a      	sub	sp, #40	; 0x28
 8008784:	af02      	add	r7, sp, #8
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	2b01      	cmp	r3, #1
 800879e:	f040 815c 	bne.w	8008a5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d132      	bne.n	8008810 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	0151      	lsls	r1, r2, #5
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	440a      	add	r2, r1
 80087e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	0151      	lsls	r1, r2, #5
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	440a      	add	r2, r1
 8008804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008808:	0cdb      	lsrs	r3, r3, #19
 800880a:	04db      	lsls	r3, r3, #19
 800880c:	6113      	str	r3, [r2, #16]
 800880e:	e074      	b.n	80088fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882a:	0cdb      	lsrs	r3, r3, #19
 800882c:	04db      	lsls	r3, r3, #19
 800882e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	69fa      	ldr	r2, [r7, #28]
 8008844:	440a      	add	r2, r1
 8008846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800884a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800884e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008860:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	6999      	ldr	r1, [r3, #24]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	440b      	add	r3, r1
 800886c:	1e59      	subs	r1, r3, #1
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	fbb1 f3f3 	udiv	r3, r1, r3
 8008876:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008878:	4b9d      	ldr	r3, [pc, #628]	; (8008af0 <USB_EPStartXfer+0x370>)
 800887a:	400b      	ands	r3, r1
 800887c:	69b9      	ldr	r1, [r7, #24]
 800887e:	0148      	lsls	r0, r1, #5
 8008880:	69f9      	ldr	r1, [r7, #28]
 8008882:	4401      	add	r1, r0
 8008884:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008888:	4313      	orrs	r3, r2
 800888a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a2:	69b9      	ldr	r1, [r7, #24]
 80088a4:	0148      	lsls	r0, r1, #5
 80088a6:	69f9      	ldr	r1, [r7, #28]
 80088a8:	4401      	add	r1, r0
 80088aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088ae:	4313      	orrs	r3, r2
 80088b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	791b      	ldrb	r3, [r3, #4]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d11f      	bne.n	80088fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	69fa      	ldr	r2, [r7, #28]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d14b      	bne.n	8008998 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008914:	461a      	mov	r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	791b      	ldrb	r3, [r3, #4]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d128      	bne.n	8008976 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008930:	2b00      	cmp	r3, #0
 8008932:	d110      	bne.n	8008956 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800894e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	e00f      	b.n	8008976 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	440a      	add	r2, r1
 800896c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008974:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008990:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	e133      	b.n	8008c00 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	0151      	lsls	r1, r2, #5
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	440a      	add	r2, r1
 80089ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	791b      	ldrb	r3, [r3, #4]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d015      	beq.n	80089ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 811b 	beq.w	8008c00 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	2101      	movs	r1, #1
 80089dc:	fa01 f303 	lsl.w	r3, r1, r3
 80089e0:	69f9      	ldr	r1, [r7, #28]
 80089e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089e6:	4313      	orrs	r3, r2
 80089e8:	634b      	str	r3, [r1, #52]	; 0x34
 80089ea:	e109      	b.n	8008c00 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d110      	bne.n	8008a1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	e00f      	b.n	8008a3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	0151      	lsls	r1, r2, #5
 8008a30:	69fa      	ldr	r2, [r7, #28]
 8008a32:	440a      	add	r2, r1
 8008a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6919      	ldr	r1, [r3, #16]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	b298      	uxth	r0, r3
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	4603      	mov	r3, r0
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 fade 	bl	8009014 <USB_WritePacket>
 8008a58:	e0d2      	b.n	8008c00 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a74:	0cdb      	lsrs	r3, r3, #19
 8008a76:	04db      	lsls	r3, r3, #19
 8008a78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	0151      	lsls	r1, r2, #5
 8008a8c:	69fa      	ldr	r2, [r7, #28]
 8008a8e:	440a      	add	r2, r1
 8008a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d126      	bne.n	8008af4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008abc:	69b9      	ldr	r1, [r7, #24]
 8008abe:	0148      	lsls	r0, r1, #5
 8008ac0:	69f9      	ldr	r1, [r7, #28]
 8008ac2:	4401      	add	r1, r0
 8008ac4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	0151      	lsls	r1, r2, #5
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	440a      	add	r2, r1
 8008ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008aea:	6113      	str	r3, [r2, #16]
 8008aec:	e03a      	b.n	8008b64 <USB_EPStartXfer+0x3e4>
 8008aee:	bf00      	nop
 8008af0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	699a      	ldr	r2, [r3, #24]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	4413      	add	r3, r2
 8008afe:	1e5a      	subs	r2, r3, #1
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b08:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	8afa      	ldrh	r2, [r7, #22]
 8008b10:	fb03 f202 	mul.w	r2, r3, r2
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b24:	691a      	ldr	r2, [r3, #16]
 8008b26:	8afb      	ldrh	r3, [r7, #22]
 8008b28:	04d9      	lsls	r1, r3, #19
 8008b2a:	4b38      	ldr	r3, [pc, #224]	; (8008c0c <USB_EPStartXfer+0x48c>)
 8008b2c:	400b      	ands	r3, r1
 8008b2e:	69b9      	ldr	r1, [r7, #24]
 8008b30:	0148      	lsls	r0, r1, #5
 8008b32:	69f9      	ldr	r1, [r7, #28]
 8008b34:	4401      	add	r1, r0
 8008b36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b54:	69b9      	ldr	r1, [r7, #24]
 8008b56:	0148      	lsls	r0, r1, #5
 8008b58:	69f9      	ldr	r1, [r7, #28]
 8008b5a:	4401      	add	r1, r0
 8008b5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b60:	4313      	orrs	r3, r2
 8008b62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d10d      	bne.n	8008b86 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d009      	beq.n	8008b86 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6919      	ldr	r1, [r3, #16]
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b82:	460a      	mov	r2, r1
 8008b84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	791b      	ldrb	r3, [r3, #4]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d128      	bne.n	8008be0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d110      	bne.n	8008bc0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	0151      	lsls	r1, r2, #5
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	440a      	add	r2, r1
 8008bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	e00f      	b.n	8008be0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	0151      	lsls	r1, r2, #5
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	440a      	add	r2, r1
 8008bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3720      	adds	r7, #32
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	1ff80000 	.word	0x1ff80000

08008c10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	f040 80ce 	bne.w	8008dce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d132      	bne.n	8008ca0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	0151      	lsls	r1, r2, #5
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	440a      	add	r2, r1
 8008c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	0151      	lsls	r1, r2, #5
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	440a      	add	r2, r1
 8008c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c98:	0cdb      	lsrs	r3, r3, #19
 8008c9a:	04db      	lsls	r3, r3, #19
 8008c9c:	6113      	str	r3, [r2, #16]
 8008c9e:	e04e      	b.n	8008d3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cba:	0cdb      	lsrs	r3, r3, #19
 8008cbc:	04db      	lsls	r3, r3, #19
 8008cbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ce2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	699a      	ldr	r2, [r3, #24]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d903      	bls.n	8008cf8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	691a      	ldr	r2, [r3, #16]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d2e:	6939      	ldr	r1, [r7, #16]
 8008d30:	0148      	lsls	r0, r1, #5
 8008d32:	6979      	ldr	r1, [r7, #20]
 8008d34:	4401      	add	r1, r0
 8008d36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d11e      	bne.n	8008d82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d58:	461a      	mov	r2, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	0151      	lsls	r1, r2, #5
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	440a      	add	r2, r1
 8008d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	e097      	b.n	8008eb2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	0151      	lsls	r1, r2, #5
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	440a      	add	r2, r1
 8008d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008da0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 8083 	beq.w	8008eb2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	6979      	ldr	r1, [r7, #20]
 8008dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	634b      	str	r3, [r1, #52]	; 0x34
 8008dcc:	e071      	b.n	8008eb2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	0151      	lsls	r1, r2, #5
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	440a      	add	r2, r1
 8008de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de8:	0cdb      	lsrs	r3, r3, #19
 8008dea:	04db      	lsls	r3, r3, #19
 8008dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	0151      	lsls	r1, r2, #5
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	440a      	add	r2, r1
 8008e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	0151      	lsls	r1, r2, #5
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	440a      	add	r2, r1
 8008e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e56:	691a      	ldr	r2, [r3, #16]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e60:	6939      	ldr	r1, [r7, #16]
 8008e62:	0148      	lsls	r0, r1, #5
 8008e64:	6979      	ldr	r1, [r7, #20]
 8008e66:	4401      	add	r1, r0
 8008e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d10d      	bne.n	8008e92 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6919      	ldr	r1, [r3, #16]
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8e:	460a      	mov	r2, r1
 8008e90:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008eb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	785b      	ldrb	r3, [r3, #1]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d14a      	bne.n	8008f74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ef6:	f040 8086 	bne.w	8009006 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	7812      	ldrb	r2, [r2, #0]
 8008f0e:	0151      	lsls	r1, r2, #5
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	440a      	add	r2, r1
 8008f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d902      	bls.n	8008f58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	75fb      	strb	r3, [r7, #23]
          break;
 8008f56:	e056      	b.n	8009006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f70:	d0e7      	beq.n	8008f42 <USB_EPStopXfer+0x82>
 8008f72:	e048      	b.n	8009006 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f8c:	d13b      	bne.n	8009006 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	7812      	ldrb	r2, [r2, #0]
 8008fa2:	0151      	lsls	r1, r2, #5
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	440a      	add	r2, r1
 8008fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	7812      	ldrb	r2, [r2, #0]
 8008fc6:	0151      	lsls	r1, r2, #5
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	440a      	add	r2, r1
 8008fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f242 7210 	movw	r2, #10000	; 0x2710
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d902      	bls.n	8008fec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8008fea:	e00c      	b.n	8009006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009004:	d0e7      	beq.n	8008fd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
}
 8009008:	4618      	mov	r0, r3
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009014:	b480      	push	{r7}
 8009016:	b089      	sub	sp, #36	; 0x24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4611      	mov	r1, r2
 8009020:	461a      	mov	r2, r3
 8009022:	460b      	mov	r3, r1
 8009024:	71fb      	strb	r3, [r7, #7]
 8009026:	4613      	mov	r3, r2
 8009028:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009032:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009036:	2b00      	cmp	r3, #0
 8009038:	d123      	bne.n	8009082 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800903a:	88bb      	ldrh	r3, [r7, #4]
 800903c:	3303      	adds	r3, #3
 800903e:	089b      	lsrs	r3, r3, #2
 8009040:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009042:	2300      	movs	r3, #0
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	e018      	b.n	800907a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	031a      	lsls	r2, r3, #12
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	4413      	add	r3, r2
 8009050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009054:	461a      	mov	r2, r3
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	3301      	adds	r3, #1
 8009060:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	3301      	adds	r3, #1
 8009066:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	3301      	adds	r3, #1
 800906c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	3301      	adds	r3, #1
 8009072:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	3301      	adds	r3, #1
 8009078:	61bb      	str	r3, [r7, #24]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	429a      	cmp	r2, r3
 8009080:	d3e2      	bcc.n	8009048 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3724      	adds	r7, #36	; 0x24
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009090:	b480      	push	{r7}
 8009092:	b08b      	sub	sp, #44	; 0x2c
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	4613      	mov	r3, r2
 800909c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090a6:	88fb      	ldrh	r3, [r7, #6]
 80090a8:	089b      	lsrs	r3, r3, #2
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090b6:	2300      	movs	r3, #0
 80090b8:	623b      	str	r3, [r7, #32]
 80090ba:	e014      	b.n	80090e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	3301      	adds	r3, #1
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	3301      	adds	r3, #1
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	3301      	adds	r3, #1
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	3301      	adds	r3, #1
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	3301      	adds	r3, #1
 80090e4:	623b      	str	r3, [r7, #32]
 80090e6:	6a3a      	ldr	r2, [r7, #32]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d3e6      	bcc.n	80090bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090ee:	8bfb      	ldrh	r3, [r7, #30]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01e      	beq.n	8009132 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fe:	461a      	mov	r2, r3
 8009100:	f107 0310 	add.w	r3, r7, #16
 8009104:	6812      	ldr	r2, [r2, #0]
 8009106:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	fa22 f303 	lsr.w	r3, r2, r3
 8009114:	b2da      	uxtb	r2, r3
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	701a      	strb	r2, [r3, #0]
      i++;
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	3301      	adds	r3, #1
 800911e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	3301      	adds	r3, #1
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009126:	8bfb      	ldrh	r3, [r7, #30]
 8009128:	3b01      	subs	r3, #1
 800912a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800912c:	8bfb      	ldrh	r3, [r7, #30]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1ea      	bne.n	8009108 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009134:	4618      	mov	r0, r3
 8009136:	372c      	adds	r7, #44	; 0x2c
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	785b      	ldrb	r3, [r3, #1]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d12c      	bne.n	80091b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	db12      	blt.n	8009194 <USB_EPSetStall+0x54>
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00f      	beq.n	8009194 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	440a      	add	r2, r1
 800918a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009192:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	e02b      	b.n	800920e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	db12      	blt.n	80091ee <USB_EPSetStall+0xae>
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00f      	beq.n	80091ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	0151      	lsls	r1, r2, #5
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	440a      	add	r2, r1
 80091e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	0151      	lsls	r1, r2, #5
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	440a      	add	r2, r1
 8009204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800920c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d128      	bne.n	800928a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009256:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	791b      	ldrb	r3, [r3, #4]
 800925c:	2b03      	cmp	r3, #3
 800925e:	d003      	beq.n	8009268 <USB_EPClearStall+0x4c>
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	791b      	ldrb	r3, [r3, #4]
 8009264:	2b02      	cmp	r3, #2
 8009266:	d138      	bne.n	80092da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	0151      	lsls	r1, r2, #5
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	440a      	add	r2, r1
 800927e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009286:	6013      	str	r3, [r2, #0]
 8009288:	e027      	b.n	80092da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	0151      	lsls	r1, r2, #5
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	440a      	add	r2, r1
 80092a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	791b      	ldrb	r3, [r3, #4]
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d003      	beq.n	80092ba <USB_EPClearStall+0x9e>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	791b      	ldrb	r3, [r3, #4]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d10f      	bne.n	80092da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009306:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800930a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	78fb      	ldrb	r3, [r7, #3]
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800931c:	68f9      	ldr	r1, [r7, #12]
 800931e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009322:	4313      	orrs	r3, r2
 8009324:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800934e:	f023 0303 	bic.w	r3, r3, #3
 8009352:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009362:	f023 0302 	bic.w	r3, r3, #2
 8009366:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009376:	b480      	push	{r7}
 8009378:	b085      	sub	sp, #20
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093a4:	f043 0302 	orr.w	r3, r3, #2
 80093a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4013      	ands	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093d0:	68fb      	ldr	r3, [r7, #12]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093de:	b480      	push	{r7}
 80093e0:	b085      	sub	sp, #20
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4013      	ands	r3, r2
 8009400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	0c1b      	lsrs	r3, r3, #16
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009412:	b480      	push	{r7}
 8009414:	b085      	sub	sp, #20
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	4013      	ands	r3, r2
 8009434:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	b29b      	uxth	r3, r3
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009456:	78fb      	ldrb	r3, [r7, #3]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4013      	ands	r3, r2
 8009472:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009474:	68bb      	ldr	r3, [r7, #8]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009482:	b480      	push	{r7}
 8009484:	b087      	sub	sp, #28
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80094a6:	78fb      	ldrb	r3, [r7, #3]
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	fa22 f303 	lsr.w	r3, r2, r3
 80094b2:	01db      	lsls	r3, r3, #7
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094bc:	78fb      	ldrb	r3, [r7, #3]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4013      	ands	r3, r2
 80094ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094d0:	68bb      	ldr	r3, [r7, #8]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	f003 0301 	and.w	r3, r3, #1
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009514:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009518:	f023 0307 	bic.w	r3, r3, #7
 800951c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800952c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	460b      	mov	r3, r1
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	333c      	adds	r3, #60	; 0x3c
 8009556:	3304      	adds	r3, #4
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	4a26      	ldr	r2, [pc, #152]	; (80095f8 <USB_EP0_OutStart+0xb8>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d90a      	bls.n	800957a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009574:	d101      	bne.n	800957a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	e037      	b.n	80095ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	461a      	mov	r2, r3
 8009582:	2300      	movs	r3, #0
 8009584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095a8:	f043 0318 	orr.w	r3, r3, #24
 80095ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095c2:	7afb      	ldrb	r3, [r7, #11]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d10f      	bne.n	80095e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	4f54300a 	.word	0x4f54300a

080095fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	3301      	adds	r3, #1
 800960c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4a13      	ldr	r2, [pc, #76]	; (8009660 <USB_CoreReset+0x64>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d901      	bls.n	800961a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e01b      	b.n	8009652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	daf2      	bge.n	8009608 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	f043 0201 	orr.w	r2, r3, #1
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3301      	adds	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4a09      	ldr	r2, [pc, #36]	; (8009660 <USB_CoreReset+0x64>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d901      	bls.n	8009644 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e006      	b.n	8009652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b01      	cmp	r3, #1
 800964e:	d0f0      	beq.n	8009632 <USB_CoreReset+0x36>

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	00030d40 	.word	0x00030d40

08009664 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009670:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009674:	f005 fb68 	bl	800ed48 <USBD_static_malloc>
 8009678:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	32b0      	adds	r2, #176	; 0xb0
 800968a:	2100      	movs	r1, #0
 800968c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009690:	2302      	movs	r3, #2
 8009692:	e0d4      	b.n	800983e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009694:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009698:	2100      	movs	r1, #0
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f005 fbe0 	bl	800ee60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	32b0      	adds	r2, #176	; 0xb0
 80096aa:	68f9      	ldr	r1, [r7, #12]
 80096ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	32b0      	adds	r2, #176	; 0xb0
 80096ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	7c1b      	ldrb	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d138      	bne.n	800973e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096cc:	4b5e      	ldr	r3, [pc, #376]	; (8009848 <USBD_CDC_Init+0x1e4>)
 80096ce:	7819      	ldrb	r1, [r3, #0]
 80096d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096d4:	2202      	movs	r2, #2
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f005 fa13 	bl	800eb02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096dc:	4b5a      	ldr	r3, [pc, #360]	; (8009848 <USBD_CDC_Init+0x1e4>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	f003 020f 	and.w	r2, r3, #15
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	440b      	add	r3, r1
 80096f0:	3324      	adds	r3, #36	; 0x24
 80096f2:	2201      	movs	r2, #1
 80096f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096f6:	4b55      	ldr	r3, [pc, #340]	; (800984c <USBD_CDC_Init+0x1e8>)
 80096f8:	7819      	ldrb	r1, [r3, #0]
 80096fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096fe:	2202      	movs	r2, #2
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f005 f9fe 	bl	800eb02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009706:	4b51      	ldr	r3, [pc, #324]	; (800984c <USBD_CDC_Init+0x1e8>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	f003 020f 	and.w	r2, r3, #15
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800971e:	2201      	movs	r2, #1
 8009720:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009722:	4b4b      	ldr	r3, [pc, #300]	; (8009850 <USBD_CDC_Init+0x1ec>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	f003 020f 	and.w	r2, r3, #15
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	3326      	adds	r3, #38	; 0x26
 8009738:	2210      	movs	r2, #16
 800973a:	801a      	strh	r2, [r3, #0]
 800973c:	e035      	b.n	80097aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800973e:	4b42      	ldr	r3, [pc, #264]	; (8009848 <USBD_CDC_Init+0x1e4>)
 8009740:	7819      	ldrb	r1, [r3, #0]
 8009742:	2340      	movs	r3, #64	; 0x40
 8009744:	2202      	movs	r2, #2
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f005 f9db 	bl	800eb02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800974c:	4b3e      	ldr	r3, [pc, #248]	; (8009848 <USBD_CDC_Init+0x1e4>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	f003 020f 	and.w	r2, r3, #15
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	440b      	add	r3, r1
 8009760:	3324      	adds	r3, #36	; 0x24
 8009762:	2201      	movs	r2, #1
 8009764:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009766:	4b39      	ldr	r3, [pc, #228]	; (800984c <USBD_CDC_Init+0x1e8>)
 8009768:	7819      	ldrb	r1, [r3, #0]
 800976a:	2340      	movs	r3, #64	; 0x40
 800976c:	2202      	movs	r2, #2
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f005 f9c7 	bl	800eb02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009774:	4b35      	ldr	r3, [pc, #212]	; (800984c <USBD_CDC_Init+0x1e8>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	f003 020f 	and.w	r2, r3, #15
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800978c:	2201      	movs	r2, #1
 800978e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009790:	4b2f      	ldr	r3, [pc, #188]	; (8009850 <USBD_CDC_Init+0x1ec>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	f003 020f 	and.w	r2, r3, #15
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	440b      	add	r3, r1
 80097a4:	3326      	adds	r3, #38	; 0x26
 80097a6:	2210      	movs	r2, #16
 80097a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097aa:	4b29      	ldr	r3, [pc, #164]	; (8009850 <USBD_CDC_Init+0x1ec>)
 80097ac:	7819      	ldrb	r1, [r3, #0]
 80097ae:	2308      	movs	r3, #8
 80097b0:	2203      	movs	r2, #3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f005 f9a5 	bl	800eb02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80097b8:	4b25      	ldr	r3, [pc, #148]	; (8009850 <USBD_CDC_Init+0x1ec>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	f003 020f 	and.w	r2, r3, #15
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	4613      	mov	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	440b      	add	r3, r1
 80097cc:	3324      	adds	r3, #36	; 0x24
 80097ce:	2201      	movs	r2, #1
 80097d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	33b0      	adds	r3, #176	; 0xb0
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009808:	2302      	movs	r3, #2
 800980a:	e018      	b.n	800983e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	7c1b      	ldrb	r3, [r3, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10a      	bne.n	800982a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009814:	4b0d      	ldr	r3, [pc, #52]	; (800984c <USBD_CDC_Init+0x1e8>)
 8009816:	7819      	ldrb	r1, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800981e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f005 fa5c 	bl	800ece0 <USBD_LL_PrepareReceive>
 8009828:	e008      	b.n	800983c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800982a:	4b08      	ldr	r3, [pc, #32]	; (800984c <USBD_CDC_Init+0x1e8>)
 800982c:	7819      	ldrb	r1, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f005 fa52 	bl	800ece0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	200005ab 	.word	0x200005ab
 800984c:	200005ac 	.word	0x200005ac
 8009850:	200005ad 	.word	0x200005ad

08009854 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009860:	4b3a      	ldr	r3, [pc, #232]	; (800994c <USBD_CDC_DeInit+0xf8>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f005 f971 	bl	800eb4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800986c:	4b37      	ldr	r3, [pc, #220]	; (800994c <USBD_CDC_DeInit+0xf8>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f003 020f 	and.w	r2, r3, #15
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	3324      	adds	r3, #36	; 0x24
 8009882:	2200      	movs	r2, #0
 8009884:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009886:	4b32      	ldr	r3, [pc, #200]	; (8009950 <USBD_CDC_DeInit+0xfc>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f005 f95e 	bl	800eb4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009892:	4b2f      	ldr	r3, [pc, #188]	; (8009950 <USBD_CDC_DeInit+0xfc>)
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	f003 020f 	and.w	r2, r3, #15
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4613      	mov	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098aa:	2200      	movs	r2, #0
 80098ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80098ae:	4b29      	ldr	r3, [pc, #164]	; (8009954 <USBD_CDC_DeInit+0x100>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f005 f94a 	bl	800eb4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80098ba:	4b26      	ldr	r3, [pc, #152]	; (8009954 <USBD_CDC_DeInit+0x100>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	f003 020f 	and.w	r2, r3, #15
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	3324      	adds	r3, #36	; 0x24
 80098d0:	2200      	movs	r2, #0
 80098d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80098d4:	4b1f      	ldr	r3, [pc, #124]	; (8009954 <USBD_CDC_DeInit+0x100>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	f003 020f 	and.w	r2, r3, #15
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	4613      	mov	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	440b      	add	r3, r1
 80098e8:	3326      	adds	r3, #38	; 0x26
 80098ea:	2200      	movs	r2, #0
 80098ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	32b0      	adds	r2, #176	; 0xb0
 80098f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01f      	beq.n	8009940 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	33b0      	adds	r3, #176	; 0xb0
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	32b0      	adds	r2, #176	; 0xb0
 800991e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009922:	4618      	mov	r0, r3
 8009924:	f005 fa1e 	bl	800ed64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	32b0      	adds	r2, #176	; 0xb0
 8009932:	2100      	movs	r1, #0
 8009934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200005ab 	.word	0x200005ab
 8009950:	200005ac 	.word	0x200005ac
 8009954:	200005ad 	.word	0x200005ad

08009958 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	32b0      	adds	r2, #176	; 0xb0
 800996c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009970:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009984:	2303      	movs	r3, #3
 8009986:	e0bf      	b.n	8009b08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009990:	2b00      	cmp	r3, #0
 8009992:	d050      	beq.n	8009a36 <USBD_CDC_Setup+0xde>
 8009994:	2b20      	cmp	r3, #32
 8009996:	f040 80af 	bne.w	8009af8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	88db      	ldrh	r3, [r3, #6]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d03a      	beq.n	8009a18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	b25b      	sxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	da1b      	bge.n	80099e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	33b0      	adds	r3, #176	; 0xb0
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80099c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	88d2      	ldrh	r2, [r2, #6]
 80099c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88db      	ldrh	r3, [r3, #6]
 80099ce:	2b07      	cmp	r3, #7
 80099d0:	bf28      	it	cs
 80099d2:	2307      	movcs	r3, #7
 80099d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	89fa      	ldrh	r2, [r7, #14]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f001 fd43 	bl	800b468 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80099e2:	e090      	b.n	8009b06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	785a      	ldrb	r2, [r3, #1]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88db      	ldrh	r3, [r3, #6]
 80099f2:	2b3f      	cmp	r3, #63	; 0x3f
 80099f4:	d803      	bhi.n	80099fe <USBD_CDC_Setup+0xa6>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88db      	ldrh	r3, [r3, #6]
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	e000      	b.n	8009a00 <USBD_CDC_Setup+0xa8>
 80099fe:	2240      	movs	r2, #64	; 0x40
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009a06:	6939      	ldr	r1, [r7, #16]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009a0e:	461a      	mov	r2, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 fd55 	bl	800b4c0 <USBD_CtlPrepareRx>
      break;
 8009a16:	e076      	b.n	8009b06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	33b0      	adds	r3, #176	; 0xb0
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	7850      	ldrb	r0, [r2, #1]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	4798      	blx	r3
      break;
 8009a34:	e067      	b.n	8009b06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	785b      	ldrb	r3, [r3, #1]
 8009a3a:	2b0b      	cmp	r3, #11
 8009a3c:	d851      	bhi.n	8009ae2 <USBD_CDC_Setup+0x18a>
 8009a3e:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <USBD_CDC_Setup+0xec>)
 8009a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a44:	08009a75 	.word	0x08009a75
 8009a48:	08009af1 	.word	0x08009af1
 8009a4c:	08009ae3 	.word	0x08009ae3
 8009a50:	08009ae3 	.word	0x08009ae3
 8009a54:	08009ae3 	.word	0x08009ae3
 8009a58:	08009ae3 	.word	0x08009ae3
 8009a5c:	08009ae3 	.word	0x08009ae3
 8009a60:	08009ae3 	.word	0x08009ae3
 8009a64:	08009ae3 	.word	0x08009ae3
 8009a68:	08009ae3 	.word	0x08009ae3
 8009a6c:	08009a9f 	.word	0x08009a9f
 8009a70:	08009ac9 	.word	0x08009ac9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d107      	bne.n	8009a90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a80:	f107 030a 	add.w	r3, r7, #10
 8009a84:	2202      	movs	r2, #2
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 fced 	bl	800b468 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a8e:	e032      	b.n	8009af6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f001 fc77 	bl	800b386 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	75fb      	strb	r3, [r7, #23]
          break;
 8009a9c:	e02b      	b.n	8009af6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d107      	bne.n	8009aba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009aaa:	f107 030d 	add.w	r3, r7, #13
 8009aae:	2201      	movs	r2, #1
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fcd8 	bl	800b468 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ab8:	e01d      	b.n	8009af6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f001 fc62 	bl	800b386 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ac6:	e016      	b.n	8009af6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d00f      	beq.n	8009af4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 fc55 	bl	800b386 <USBD_CtlError>
            ret = USBD_FAIL;
 8009adc:	2303      	movs	r3, #3
 8009ade:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ae0:	e008      	b.n	8009af4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 fc4e 	bl	800b386 <USBD_CtlError>
          ret = USBD_FAIL;
 8009aea:	2303      	movs	r3, #3
 8009aec:	75fb      	strb	r3, [r7, #23]
          break;
 8009aee:	e002      	b.n	8009af6 <USBD_CDC_Setup+0x19e>
          break;
 8009af0:	bf00      	nop
 8009af2:	e008      	b.n	8009b06 <USBD_CDC_Setup+0x1ae>
          break;
 8009af4:	bf00      	nop
      }
      break;
 8009af6:	e006      	b.n	8009b06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 fc43 	bl	800b386 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b00:	2303      	movs	r3, #3
 8009b02:	75fb      	strb	r3, [r7, #23]
      break;
 8009b04:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	32b0      	adds	r2, #176	; 0xb0
 8009b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e065      	b.n	8009c06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	32b0      	adds	r2, #176	; 0xb0
 8009b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	f003 020f 	and.w	r2, r3, #15
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	440b      	add	r3, r1
 8009b5c:	3318      	adds	r3, #24
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d02f      	beq.n	8009bc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	f003 020f 	and.w	r2, r3, #15
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	440b      	add	r3, r1
 8009b76:	3318      	adds	r3, #24
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	78fb      	ldrb	r3, [r7, #3]
 8009b7c:	f003 010f 	and.w	r1, r3, #15
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	460b      	mov	r3, r1
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	440b      	add	r3, r1
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4403      	add	r3, r0
 8009b8c:	3348      	adds	r3, #72	; 0x48
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b94:	fb01 f303 	mul.w	r3, r1, r3
 8009b98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d112      	bne.n	8009bc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b9e:	78fb      	ldrb	r3, [r7, #3]
 8009ba0:	f003 020f 	and.w	r2, r3, #15
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	440b      	add	r3, r1
 8009bb0:	3318      	adds	r3, #24
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bb6:	78f9      	ldrb	r1, [r7, #3]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	2200      	movs	r2, #0
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f005 f86e 	bl	800ec9e <USBD_LL_Transmit>
 8009bc2:	e01f      	b.n	8009c04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	33b0      	adds	r3, #176	; 0xb0
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d010      	beq.n	8009c04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	33b0      	adds	r3, #176	; 0xb0
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	32b0      	adds	r2, #176	; 0xb0
 8009c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	32b0      	adds	r2, #176	; 0xb0
 8009c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e01a      	b.n	8009c76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f005 f86c 	bl	800ed22 <USBD_LL_GetRxDataSize>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	33b0      	adds	r3, #176	; 0xb0
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c70:	4611      	mov	r1, r2
 8009c72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	32b0      	adds	r2, #176	; 0xb0
 8009c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e025      	b.n	8009cec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	33b0      	adds	r3, #176	; 0xb0
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d01a      	beq.n	8009cea <USBD_CDC_EP0_RxReady+0x6c>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009cba:	2bff      	cmp	r3, #255	; 0xff
 8009cbc:	d015      	beq.n	8009cea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	33b0      	adds	r3, #176	; 0xb0
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009cd6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cde:	b292      	uxth	r2, r2
 8009ce0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cfc:	2182      	movs	r1, #130	; 0x82
 8009cfe:	4818      	ldr	r0, [pc, #96]	; (8009d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d00:	f000 fd09 	bl	800a716 <USBD_GetEpDesc>
 8009d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d06:	2101      	movs	r1, #1
 8009d08:	4815      	ldr	r0, [pc, #84]	; (8009d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d0a:	f000 fd04 	bl	800a716 <USBD_GetEpDesc>
 8009d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d10:	2181      	movs	r1, #129	; 0x81
 8009d12:	4813      	ldr	r0, [pc, #76]	; (8009d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d14:	f000 fcff 	bl	800a716 <USBD_GetEpDesc>
 8009d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	2210      	movs	r2, #16
 8009d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d006      	beq.n	8009d3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d34:	711a      	strb	r2, [r3, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d006      	beq.n	8009d4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d48:	711a      	strb	r2, [r3, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2243      	movs	r2, #67	; 0x43
 8009d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d54:	4b02      	ldr	r3, [pc, #8]	; (8009d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000568 	.word	0x20000568

08009d64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d6c:	2182      	movs	r1, #130	; 0x82
 8009d6e:	4818      	ldr	r0, [pc, #96]	; (8009dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d70:	f000 fcd1 	bl	800a716 <USBD_GetEpDesc>
 8009d74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d76:	2101      	movs	r1, #1
 8009d78:	4815      	ldr	r0, [pc, #84]	; (8009dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d7a:	f000 fccc 	bl	800a716 <USBD_GetEpDesc>
 8009d7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d80:	2181      	movs	r1, #129	; 0x81
 8009d82:	4813      	ldr	r0, [pc, #76]	; (8009dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d84:	f000 fcc7 	bl	800a716 <USBD_GetEpDesc>
 8009d88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2210      	movs	r2, #16
 8009d94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d006      	beq.n	8009daa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	711a      	strb	r2, [r3, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f042 0202 	orr.w	r2, r2, #2
 8009da8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d006      	beq.n	8009dbe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	711a      	strb	r2, [r3, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f042 0202 	orr.w	r2, r2, #2
 8009dbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2243      	movs	r2, #67	; 0x43
 8009dc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009dc4:	4b02      	ldr	r3, [pc, #8]	; (8009dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000568 	.word	0x20000568

08009dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ddc:	2182      	movs	r1, #130	; 0x82
 8009dde:	4818      	ldr	r0, [pc, #96]	; (8009e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009de0:	f000 fc99 	bl	800a716 <USBD_GetEpDesc>
 8009de4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009de6:	2101      	movs	r1, #1
 8009de8:	4815      	ldr	r0, [pc, #84]	; (8009e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009dea:	f000 fc94 	bl	800a716 <USBD_GetEpDesc>
 8009dee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009df0:	2181      	movs	r1, #129	; 0x81
 8009df2:	4813      	ldr	r0, [pc, #76]	; (8009e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009df4:	f000 fc8f 	bl	800a716 <USBD_GetEpDesc>
 8009df8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2210      	movs	r2, #16
 8009e04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d006      	beq.n	8009e1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e14:	711a      	strb	r2, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d006      	beq.n	8009e2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e28:	711a      	strb	r2, [r3, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2243      	movs	r2, #67	; 0x43
 8009e32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e34:	4b02      	ldr	r3, [pc, #8]	; (8009e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20000568 	.word	0x20000568

08009e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	220a      	movs	r2, #10
 8009e50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e52:	4b03      	ldr	r3, [pc, #12]	; (8009e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	20000524 	.word	0x20000524

08009e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e009      	b.n	8009e8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	33b0      	adds	r3, #176	; 0xb0
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	32b0      	adds	r2, #176	; 0xb0
 8009eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e008      	b.n	8009ed0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	32b0      	adds	r2, #176	; 0xb0
 8009ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e004      	b.n	8009f0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
	...

08009f18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	32b0      	adds	r2, #176	; 0xb0
 8009f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	32b0      	adds	r2, #176	; 0xb0
 8009f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e018      	b.n	8009f78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	7c1b      	ldrb	r3, [r3, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10a      	bne.n	8009f64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f4e:	4b0c      	ldr	r3, [pc, #48]	; (8009f80 <USBD_CDC_ReceivePacket+0x68>)
 8009f50:	7819      	ldrb	r1, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f004 febf 	bl	800ece0 <USBD_LL_PrepareReceive>
 8009f62:	e008      	b.n	8009f76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f64:	4b06      	ldr	r3, [pc, #24]	; (8009f80 <USBD_CDC_ReceivePacket+0x68>)
 8009f66:	7819      	ldrb	r1, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f6e:	2340      	movs	r3, #64	; 0x40
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f004 feb5 	bl	800ece0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	200005ac 	.word	0x200005ac

08009f84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e01f      	b.n	8009fdc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	79fa      	ldrb	r2, [r7, #7]
 8009fce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f004 fd2f 	bl	800ea34 <USBD_LL_Init>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e025      	b.n	800a048 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	683a      	ldr	r2, [r7, #0]
 800a000:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	32ae      	adds	r2, #174	; 0xae
 800a00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00f      	beq.n	800a038 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	32ae      	adds	r2, #174	; 0xae
 800a022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	f107 020e 	add.w	r2, r7, #14
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3
 800a030:	4602      	mov	r2, r0
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a03e:	1c5a      	adds	r2, r3, #1
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f004 fd37 	bl	800eacc <USBD_LL_Start>
 800a05e:	4603      	mov	r3, r0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a070:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a094:	2b00      	cmp	r3, #0
 800a096:	d009      	beq.n	800a0ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	4798      	blx	r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	78fa      	ldrb	r2, [r7, #3]
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	4798      	blx	r3
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 f908 	bl	800b312 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a110:	461a      	mov	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a11e:	f003 031f 	and.w	r3, r3, #31
 800a122:	2b02      	cmp	r3, #2
 800a124:	d01a      	beq.n	800a15c <USBD_LL_SetupStage+0x72>
 800a126:	2b02      	cmp	r3, #2
 800a128:	d822      	bhi.n	800a170 <USBD_LL_SetupStage+0x86>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <USBD_LL_SetupStage+0x4a>
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d00a      	beq.n	800a148 <USBD_LL_SetupStage+0x5e>
 800a132:	e01d      	b.n	800a170 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fb5f 	bl	800a800 <USBD_StdDevReq>
 800a142:	4603      	mov	r3, r0
 800a144:	73fb      	strb	r3, [r7, #15]
      break;
 800a146:	e020      	b.n	800a18a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fbc7 	bl	800a8e4 <USBD_StdItfReq>
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]
      break;
 800a15a:	e016      	b.n	800a18a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fc29 	bl	800a9bc <USBD_StdEPReq>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
      break;
 800a16e:	e00c      	b.n	800a18a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a176:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f004 fd04 	bl	800eb8c <USBD_LL_StallEP>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]
      break;
 800a188:	bf00      	nop
  }

  return ret;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	460b      	mov	r3, r1
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d16e      	bne.n	800a28a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	f040 8098 	bne.w	800a2f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d913      	bls.n	800a1f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	1ad2      	subs	r2, r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	68da      	ldr	r2, [r3, #12]
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	bf28      	it	cs
 800a1e6:	4613      	movcs	r3, r2
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f001 f984 	bl	800b4fa <USBD_CtlContinueRx>
 800a1f2:	e07d      	b.n	800a2f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1fa:	f003 031f 	and.w	r3, r3, #31
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d014      	beq.n	800a22c <USBD_LL_DataOutStage+0x98>
 800a202:	2b02      	cmp	r3, #2
 800a204:	d81d      	bhi.n	800a242 <USBD_LL_DataOutStage+0xae>
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <USBD_LL_DataOutStage+0x7c>
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d003      	beq.n	800a216 <USBD_LL_DataOutStage+0x82>
 800a20e:	e018      	b.n	800a242 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a210:	2300      	movs	r3, #0
 800a212:	75bb      	strb	r3, [r7, #22]
            break;
 800a214:	e018      	b.n	800a248 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	4619      	mov	r1, r3
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 fa5e 	bl	800a6e2 <USBD_CoreFindIF>
 800a226:	4603      	mov	r3, r0
 800a228:	75bb      	strb	r3, [r7, #22]
            break;
 800a22a:	e00d      	b.n	800a248 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a232:	b2db      	uxtb	r3, r3
 800a234:	4619      	mov	r1, r3
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 fa60 	bl	800a6fc <USBD_CoreFindEP>
 800a23c:	4603      	mov	r3, r0
 800a23e:	75bb      	strb	r3, [r7, #22]
            break;
 800a240:	e002      	b.n	800a248 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a242:	2300      	movs	r3, #0
 800a244:	75bb      	strb	r3, [r7, #22]
            break;
 800a246:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a248:	7dbb      	ldrb	r3, [r7, #22]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d119      	bne.n	800a282 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b03      	cmp	r3, #3
 800a258:	d113      	bne.n	800a282 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a25a:	7dba      	ldrb	r2, [r7, #22]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	32ae      	adds	r2, #174	; 0xae
 800a260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00b      	beq.n	800a282 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a26a:	7dba      	ldrb	r2, [r7, #22]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a272:	7dba      	ldrb	r2, [r7, #22]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	32ae      	adds	r2, #174	; 0xae
 800a278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f001 f94a 	bl	800b51c <USBD_CtlSendStatus>
 800a288:	e032      	b.n	800a2f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a290:	b2db      	uxtb	r3, r3
 800a292:	4619      	mov	r1, r3
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 fa31 	bl	800a6fc <USBD_CoreFindEP>
 800a29a:	4603      	mov	r3, r0
 800a29c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a29e:	7dbb      	ldrb	r3, [r7, #22]
 800a2a0:	2bff      	cmp	r3, #255	; 0xff
 800a2a2:	d025      	beq.n	800a2f0 <USBD_LL_DataOutStage+0x15c>
 800a2a4:	7dbb      	ldrb	r3, [r7, #22]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d122      	bne.n	800a2f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d117      	bne.n	800a2e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a2b6:	7dba      	ldrb	r2, [r7, #22]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	32ae      	adds	r2, #174	; 0xae
 800a2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00f      	beq.n	800a2e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a2c6:	7dba      	ldrb	r2, [r7, #22]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a2ce:	7dba      	ldrb	r2, [r7, #22]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	32ae      	adds	r2, #174	; 0xae
 800a2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	7afa      	ldrb	r2, [r7, #11]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	4798      	blx	r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
 800a2ee:	e000      	b.n	800a2f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b086      	sub	sp, #24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	460b      	mov	r3, r1
 800a304:	607a      	str	r2, [r7, #4]
 800a306:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a308:	7afb      	ldrb	r3, [r7, #11]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d16f      	bne.n	800a3ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3314      	adds	r3, #20
 800a312:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d15a      	bne.n	800a3d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	429a      	cmp	r2, r3
 800a328:	d914      	bls.n	800a354 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	1ad2      	subs	r2, r2, r3
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	461a      	mov	r2, r3
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f001 f8ac 	bl	800b49e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a346:	2300      	movs	r3, #0
 800a348:	2200      	movs	r2, #0
 800a34a:	2100      	movs	r1, #0
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f004 fcc7 	bl	800ece0 <USBD_LL_PrepareReceive>
 800a352:	e03f      	b.n	800a3d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	68da      	ldr	r2, [r3, #12]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d11c      	bne.n	800a39a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a368:	429a      	cmp	r2, r3
 800a36a:	d316      	bcc.n	800a39a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a376:	429a      	cmp	r2, r3
 800a378:	d20f      	bcs.n	800a39a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a37a:	2200      	movs	r2, #0
 800a37c:	2100      	movs	r1, #0
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f001 f88d 	bl	800b49e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a38c:	2300      	movs	r3, #0
 800a38e:	2200      	movs	r2, #0
 800a390:	2100      	movs	r1, #0
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f004 fca4 	bl	800ece0 <USBD_LL_PrepareReceive>
 800a398:	e01c      	b.n	800a3d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d10f      	bne.n	800a3c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d009      	beq.n	800a3c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3c6:	2180      	movs	r1, #128	; 0x80
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f004 fbdf 	bl	800eb8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f001 f8b7 	bl	800b542 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d03a      	beq.n	800a454 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7ff fe42 	bl	800a068 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3ec:	e032      	b.n	800a454 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a3ee:	7afb      	ldrb	r3, [r7, #11]
 800a3f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f97f 	bl	800a6fc <USBD_CoreFindEP>
 800a3fe:	4603      	mov	r3, r0
 800a400:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	2bff      	cmp	r3, #255	; 0xff
 800a406:	d025      	beq.n	800a454 <USBD_LL_DataInStage+0x15a>
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d122      	bne.n	800a454 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b03      	cmp	r3, #3
 800a418:	d11c      	bne.n	800a454 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a41a:	7dfa      	ldrb	r2, [r7, #23]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	32ae      	adds	r2, #174	; 0xae
 800a420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d014      	beq.n	800a454 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a42a:	7dfa      	ldrb	r2, [r7, #23]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a432:	7dfa      	ldrb	r2, [r7, #23]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	32ae      	adds	r2, #174	; 0xae
 800a438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	7afa      	ldrb	r2, [r7, #11]
 800a440:	4611      	mov	r1, r2
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	4798      	blx	r3
 800a446:	4603      	mov	r3, r0
 800a448:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a44a:	7dbb      	ldrb	r3, [r7, #22]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a450:	7dbb      	ldrb	r3, [r7, #22]
 800a452:	e000      	b.n	800a456 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b084      	sub	sp, #16
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a496:	2b00      	cmp	r3, #0
 800a498:	d014      	beq.n	800a4c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00e      	beq.n	800a4c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	6852      	ldr	r2, [r2, #4]
 800a4b2:	b2d2      	uxtb	r2, r2
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	4798      	blx	r3
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4c4:	2340      	movs	r3, #64	; 0x40
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f004 fb19 	bl	800eb02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2240      	movs	r2, #64	; 0x40
 800a4dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4e0:	2340      	movs	r3, #64	; 0x40
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2180      	movs	r1, #128	; 0x80
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f004 fb0b 	bl	800eb02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2240      	movs	r2, #64	; 0x40
 800a4f6:	621a      	str	r2, [r3, #32]

  return ret;
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	460b      	mov	r3, r1
 800a50c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	78fa      	ldrb	r2, [r7, #3]
 800a512:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a530:	b2da      	uxtb	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2204      	movs	r2, #4
 800a53c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a54e:	b480      	push	{r7}
 800a550:	b083      	sub	sp, #12
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d106      	bne.n	800a570 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b03      	cmp	r3, #3
 800a590:	d110      	bne.n	800a5b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	32ae      	adds	r2, #174	; 0xae
 800a5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e01c      	b.n	800a61a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d115      	bne.n	800a618 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	32ae      	adds	r2, #174	; 0xae
 800a5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fa:	6a1b      	ldr	r3, [r3, #32]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00b      	beq.n	800a618 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	32ae      	adds	r2, #174	; 0xae
 800a60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	78fa      	ldrb	r2, [r7, #3]
 800a612:	4611      	mov	r1, r2
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b082      	sub	sp, #8
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	32ae      	adds	r2, #174	; 0xae
 800a638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a640:	2303      	movs	r3, #3
 800a642:	e01c      	b.n	800a67e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	d115      	bne.n	800a67c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	32ae      	adds	r2, #174	; 0xae
 800a65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00b      	beq.n	800a67c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	32ae      	adds	r2, #174	; 0xae
 800a66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	78fa      	ldrb	r2, [r7, #3]
 800a676:	4611      	mov	r1, r2
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00e      	beq.n	800a6d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6852      	ldr	r2, [r2, #4]
 800a6c6:	b2d2      	uxtb	r2, r2
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	4798      	blx	r3
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b083      	sub	sp, #12
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a708:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b086      	sub	sp, #24
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	460b      	mov	r3, r1
 800a720:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	885b      	ldrh	r3, [r3, #2]
 800a732:	b29a      	uxth	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d920      	bls.n	800a780 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	b29b      	uxth	r3, r3
 800a744:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a746:	e013      	b.n	800a770 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a748:	f107 030a 	add.w	r3, r7, #10
 800a74c:	4619      	mov	r1, r3
 800a74e:	6978      	ldr	r0, [r7, #20]
 800a750:	f000 f81b 	bl	800a78a <USBD_GetNextDesc>
 800a754:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	785b      	ldrb	r3, [r3, #1]
 800a75a:	2b05      	cmp	r3, #5
 800a75c:	d108      	bne.n	800a770 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	789b      	ldrb	r3, [r3, #2]
 800a766:	78fa      	ldrb	r2, [r7, #3]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d008      	beq.n	800a77e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a76c:	2300      	movs	r3, #0
 800a76e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	885b      	ldrh	r3, [r3, #2]
 800a774:	b29a      	uxth	r2, r3
 800a776:	897b      	ldrh	r3, [r7, #10]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d8e5      	bhi.n	800a748 <USBD_GetEpDesc+0x32>
 800a77c:	e000      	b.n	800a780 <USBD_GetEpDesc+0x6a>
          break;
 800a77e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a780:	693b      	ldr	r3, [r7, #16]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b085      	sub	sp, #20
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	881a      	ldrh	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	4413      	add	r3, r2
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7e2:	8a3b      	ldrh	r3, [r7, #16]
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	b21a      	sxth	r2, r3
 800a7e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	b21b      	sxth	r3, r3
 800a7f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7f2:	89fb      	ldrh	r3, [r7, #14]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	371c      	adds	r7, #28
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a816:	2b40      	cmp	r3, #64	; 0x40
 800a818:	d005      	beq.n	800a826 <USBD_StdDevReq+0x26>
 800a81a:	2b40      	cmp	r3, #64	; 0x40
 800a81c:	d857      	bhi.n	800a8ce <USBD_StdDevReq+0xce>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00f      	beq.n	800a842 <USBD_StdDevReq+0x42>
 800a822:	2b20      	cmp	r3, #32
 800a824:	d153      	bne.n	800a8ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	32ae      	adds	r2, #174	; 0xae
 800a830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	4798      	blx	r3
 800a83c:	4603      	mov	r3, r0
 800a83e:	73fb      	strb	r3, [r7, #15]
      break;
 800a840:	e04a      	b.n	800a8d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	2b09      	cmp	r3, #9
 800a848:	d83b      	bhi.n	800a8c2 <USBD_StdDevReq+0xc2>
 800a84a:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <USBD_StdDevReq+0x50>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a8a5 	.word	0x0800a8a5
 800a854:	0800a8b9 	.word	0x0800a8b9
 800a858:	0800a8c3 	.word	0x0800a8c3
 800a85c:	0800a8af 	.word	0x0800a8af
 800a860:	0800a8c3 	.word	0x0800a8c3
 800a864:	0800a883 	.word	0x0800a883
 800a868:	0800a879 	.word	0x0800a879
 800a86c:	0800a8c3 	.word	0x0800a8c3
 800a870:	0800a89b 	.word	0x0800a89b
 800a874:	0800a88d 	.word	0x0800a88d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa3c 	bl	800acf8 <USBD_GetDescriptor>
          break;
 800a880:	e024      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fba1 	bl	800afcc <USBD_SetAddress>
          break;
 800a88a:	e01f      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fbe0 	bl	800b054 <USBD_SetConfig>
 800a894:	4603      	mov	r3, r0
 800a896:	73fb      	strb	r3, [r7, #15]
          break;
 800a898:	e018      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fc83 	bl	800b1a8 <USBD_GetConfig>
          break;
 800a8a2:	e013      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fcb4 	bl	800b214 <USBD_GetStatus>
          break;
 800a8ac:	e00e      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fce3 	bl	800b27c <USBD_SetFeature>
          break;
 800a8b6:	e009      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fd07 	bl	800b2ce <USBD_ClrFeature>
          break;
 800a8c0:	e004      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fd5e 	bl	800b386 <USBD_CtlError>
          break;
 800a8ca:	bf00      	nop
      }
      break;
 800a8cc:	e004      	b.n	800a8d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fd58 	bl	800b386 <USBD_CtlError>
      break;
 800a8d6:	bf00      	nop
  }

  return ret;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop

0800a8e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8fa:	2b40      	cmp	r3, #64	; 0x40
 800a8fc:	d005      	beq.n	800a90a <USBD_StdItfReq+0x26>
 800a8fe:	2b40      	cmp	r3, #64	; 0x40
 800a900:	d852      	bhi.n	800a9a8 <USBD_StdItfReq+0xc4>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <USBD_StdItfReq+0x26>
 800a906:	2b20      	cmp	r3, #32
 800a908:	d14e      	bne.n	800a9a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a910:	b2db      	uxtb	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	2b02      	cmp	r3, #2
 800a916:	d840      	bhi.n	800a99a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	889b      	ldrh	r3, [r3, #4]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d836      	bhi.n	800a990 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	889b      	ldrh	r3, [r3, #4]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff fed9 	bl	800a6e2 <USBD_CoreFindIF>
 800a930:	4603      	mov	r3, r0
 800a932:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2bff      	cmp	r3, #255	; 0xff
 800a938:	d01d      	beq.n	800a976 <USBD_StdItfReq+0x92>
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d11a      	bne.n	800a976 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a940:	7bba      	ldrb	r2, [r7, #14]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	32ae      	adds	r2, #174	; 0xae
 800a946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00f      	beq.n	800a970 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a950:	7bba      	ldrb	r2, [r7, #14]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a958:	7bba      	ldrb	r2, [r7, #14]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	32ae      	adds	r2, #174	; 0xae
 800a95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	4798      	blx	r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a96e:	e004      	b.n	800a97a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a970:	2303      	movs	r3, #3
 800a972:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a974:	e001      	b.n	800a97a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a976:	2303      	movs	r3, #3
 800a978:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	88db      	ldrh	r3, [r3, #6]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d110      	bne.n	800a9a4 <USBD_StdItfReq+0xc0>
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10d      	bne.n	800a9a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fdc7 	bl	800b51c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a98e:	e009      	b.n	800a9a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fcf7 	bl	800b386 <USBD_CtlError>
          break;
 800a998:	e004      	b.n	800a9a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fcf2 	bl	800b386 <USBD_CtlError>
          break;
 800a9a2:	e000      	b.n	800a9a6 <USBD_StdItfReq+0xc2>
          break;
 800a9a4:	bf00      	nop
      }
      break;
 800a9a6:	e004      	b.n	800a9b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fceb 	bl	800b386 <USBD_CtlError>
      break;
 800a9b0:	bf00      	nop
  }

  return ret;
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	889b      	ldrh	r3, [r3, #4]
 800a9ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9d8:	2b40      	cmp	r3, #64	; 0x40
 800a9da:	d007      	beq.n	800a9ec <USBD_StdEPReq+0x30>
 800a9dc:	2b40      	cmp	r3, #64	; 0x40
 800a9de:	f200 817f 	bhi.w	800ace0 <USBD_StdEPReq+0x324>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d02a      	beq.n	800aa3c <USBD_StdEPReq+0x80>
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	f040 817a 	bne.w	800ace0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7ff fe83 	bl	800a6fc <USBD_CoreFindEP>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9fa:	7b7b      	ldrb	r3, [r7, #13]
 800a9fc:	2bff      	cmp	r3, #255	; 0xff
 800a9fe:	f000 8174 	beq.w	800acea <USBD_StdEPReq+0x32e>
 800aa02:	7b7b      	ldrb	r3, [r7, #13]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 8170 	bne.w	800acea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aa0a:	7b7a      	ldrb	r2, [r7, #13]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aa12:	7b7a      	ldrb	r2, [r7, #13]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	32ae      	adds	r2, #174	; 0xae
 800aa18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 8163 	beq.w	800acea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa24:	7b7a      	ldrb	r2, [r7, #13]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	32ae      	adds	r2, #174	; 0xae
 800aa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa3a:	e156      	b.n	800acea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	785b      	ldrb	r3, [r3, #1]
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d008      	beq.n	800aa56 <USBD_StdEPReq+0x9a>
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	f300 8145 	bgt.w	800acd4 <USBD_StdEPReq+0x318>
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 809b 	beq.w	800ab86 <USBD_StdEPReq+0x1ca>
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d03c      	beq.n	800aace <USBD_StdEPReq+0x112>
 800aa54:	e13e      	b.n	800acd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d002      	beq.n	800aa68 <USBD_StdEPReq+0xac>
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d016      	beq.n	800aa94 <USBD_StdEPReq+0xd8>
 800aa66:	e02c      	b.n	800aac2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00d      	beq.n	800aa8a <USBD_StdEPReq+0xce>
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b80      	cmp	r3, #128	; 0x80
 800aa72:	d00a      	beq.n	800aa8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f004 f887 	bl	800eb8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa7e:	2180      	movs	r1, #128	; 0x80
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f004 f883 	bl	800eb8c <USBD_LL_StallEP>
 800aa86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa88:	e020      	b.n	800aacc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fc7a 	bl	800b386 <USBD_CtlError>
              break;
 800aa92:	e01b      	b.n	800aacc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	885b      	ldrh	r3, [r3, #2]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10e      	bne.n	800aaba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <USBD_StdEPReq+0xfe>
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	2b80      	cmp	r3, #128	; 0x80
 800aaa6:	d008      	beq.n	800aaba <USBD_StdEPReq+0xfe>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	88db      	ldrh	r3, [r3, #6]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d104      	bne.n	800aaba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f004 f869 	bl	800eb8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fd2e 	bl	800b51c <USBD_CtlSendStatus>

              break;
 800aac0:	e004      	b.n	800aacc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fc5e 	bl	800b386 <USBD_CtlError>
              break;
 800aaca:	bf00      	nop
          }
          break;
 800aacc:	e107      	b.n	800acde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d002      	beq.n	800aae0 <USBD_StdEPReq+0x124>
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d016      	beq.n	800ab0c <USBD_StdEPReq+0x150>
 800aade:	e04b      	b.n	800ab78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00d      	beq.n	800ab02 <USBD_StdEPReq+0x146>
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	2b80      	cmp	r3, #128	; 0x80
 800aaea:	d00a      	beq.n	800ab02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f004 f84b 	bl	800eb8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaf6:	2180      	movs	r1, #128	; 0x80
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f004 f847 	bl	800eb8c <USBD_LL_StallEP>
 800aafe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab00:	e040      	b.n	800ab84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fc3e 	bl	800b386 <USBD_CtlError>
              break;
 800ab0a:	e03b      	b.n	800ab84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	885b      	ldrh	r3, [r3, #2]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d136      	bne.n	800ab82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d004      	beq.n	800ab28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f004 f851 	bl	800ebca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fcf7 	bl	800b51c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff fde2 	bl	800a6fc <USBD_CoreFindEP>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab3c:	7b7b      	ldrb	r3, [r7, #13]
 800ab3e:	2bff      	cmp	r3, #255	; 0xff
 800ab40:	d01f      	beq.n	800ab82 <USBD_StdEPReq+0x1c6>
 800ab42:	7b7b      	ldrb	r3, [r7, #13]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d11c      	bne.n	800ab82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab48:	7b7a      	ldrb	r2, [r7, #13]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab50:	7b7a      	ldrb	r2, [r7, #13]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	32ae      	adds	r2, #174	; 0xae
 800ab56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d010      	beq.n	800ab82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab60:	7b7a      	ldrb	r2, [r7, #13]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	32ae      	adds	r2, #174	; 0xae
 800ab66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	4798      	blx	r3
 800ab72:	4603      	mov	r3, r0
 800ab74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab76:	e004      	b.n	800ab82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fc03 	bl	800b386 <USBD_CtlError>
              break;
 800ab80:	e000      	b.n	800ab84 <USBD_StdEPReq+0x1c8>
              break;
 800ab82:	bf00      	nop
          }
          break;
 800ab84:	e0ab      	b.n	800acde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d002      	beq.n	800ab98 <USBD_StdEPReq+0x1dc>
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d032      	beq.n	800abfc <USBD_StdEPReq+0x240>
 800ab96:	e097      	b.n	800acc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <USBD_StdEPReq+0x1f2>
 800ab9e:	7bbb      	ldrb	r3, [r7, #14]
 800aba0:	2b80      	cmp	r3, #128	; 0x80
 800aba2:	d004      	beq.n	800abae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fbed 	bl	800b386 <USBD_CtlError>
                break;
 800abac:	e091      	b.n	800acd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	da0b      	bge.n	800abce <USBD_StdEPReq+0x212>
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	3310      	adds	r3, #16
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	4413      	add	r3, r2
 800abca:	3304      	adds	r3, #4
 800abcc:	e00b      	b.n	800abe6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abd4:	4613      	mov	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	4413      	add	r3, r2
 800abe4:	3304      	adds	r3, #4
 800abe6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2202      	movs	r2, #2
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fc37 	bl	800b468 <USBD_CtlSendData>
              break;
 800abfa:	e06a      	b.n	800acd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	da11      	bge.n	800ac28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	f003 020f 	and.w	r2, r3, #15
 800ac0a:	6879      	ldr	r1, [r7, #4]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	440b      	add	r3, r1
 800ac16:	3324      	adds	r3, #36	; 0x24
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d117      	bne.n	800ac4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fbb0 	bl	800b386 <USBD_CtlError>
                  break;
 800ac26:	e054      	b.n	800acd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
 800ac2a:	f003 020f 	and.w	r2, r3, #15
 800ac2e:	6879      	ldr	r1, [r7, #4]
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	440b      	add	r3, r1
 800ac3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d104      	bne.n	800ac4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb9d 	bl	800b386 <USBD_CtlError>
                  break;
 800ac4c:	e041      	b.n	800acd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	da0b      	bge.n	800ac6e <USBD_StdEPReq+0x2b2>
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	3310      	adds	r3, #16
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	e00b      	b.n	800ac86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
 800ac70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	4413      	add	r3, r2
 800ac84:	3304      	adds	r3, #4
 800ac86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <USBD_StdEPReq+0x2d8>
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	2b80      	cmp	r3, #128	; 0x80
 800ac92:	d103      	bne.n	800ac9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	e00e      	b.n	800acba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f003 ffb1 	bl	800ec08 <USBD_LL_IsStallEP>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2201      	movs	r2, #1
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	e002      	b.n	800acba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2202      	movs	r2, #2
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fbd1 	bl	800b468 <USBD_CtlSendData>
              break;
 800acc6:	e004      	b.n	800acd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fb5b 	bl	800b386 <USBD_CtlError>
              break;
 800acd0:	bf00      	nop
          }
          break;
 800acd2:	e004      	b.n	800acde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fb55 	bl	800b386 <USBD_CtlError>
          break;
 800acdc:	bf00      	nop
      }
      break;
 800acde:	e005      	b.n	800acec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fb4f 	bl	800b386 <USBD_CtlError>
      break;
 800ace8:	e000      	b.n	800acec <USBD_StdEPReq+0x330>
      break;
 800acea:	bf00      	nop
  }

  return ret;
 800acec:	7bfb      	ldrb	r3, [r7, #15]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad02:	2300      	movs	r3, #0
 800ad04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	885b      	ldrh	r3, [r3, #2]
 800ad12:	0a1b      	lsrs	r3, r3, #8
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	3b01      	subs	r3, #1
 800ad18:	2b06      	cmp	r3, #6
 800ad1a:	f200 8128 	bhi.w	800af6e <USBD_GetDescriptor+0x276>
 800ad1e:	a201      	add	r2, pc, #4	; (adr r2, 800ad24 <USBD_GetDescriptor+0x2c>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800ad41 	.word	0x0800ad41
 800ad28:	0800ad59 	.word	0x0800ad59
 800ad2c:	0800ad99 	.word	0x0800ad99
 800ad30:	0800af6f 	.word	0x0800af6f
 800ad34:	0800af6f 	.word	0x0800af6f
 800ad38:	0800af0f 	.word	0x0800af0f
 800ad3c:	0800af3b 	.word	0x0800af3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	7c12      	ldrb	r2, [r2, #16]
 800ad4c:	f107 0108 	add.w	r1, r7, #8
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
 800ad54:	60f8      	str	r0, [r7, #12]
      break;
 800ad56:	e112      	b.n	800af7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	7c1b      	ldrb	r3, [r3, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10d      	bne.n	800ad7c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad68:	f107 0208 	add.w	r2, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3301      	adds	r3, #1
 800ad76:	2202      	movs	r2, #2
 800ad78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad7a:	e100      	b.n	800af7e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	f107 0208 	add.w	r2, r7, #8
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4798      	blx	r3
 800ad8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3301      	adds	r3, #1
 800ad92:	2202      	movs	r2, #2
 800ad94:	701a      	strb	r2, [r3, #0]
      break;
 800ad96:	e0f2      	b.n	800af7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	885b      	ldrh	r3, [r3, #2]
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b05      	cmp	r3, #5
 800ada0:	f200 80ac 	bhi.w	800aefc <USBD_GetDescriptor+0x204>
 800ada4:	a201      	add	r2, pc, #4	; (adr r2, 800adac <USBD_GetDescriptor+0xb4>)
 800ada6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adaa:	bf00      	nop
 800adac:	0800adc5 	.word	0x0800adc5
 800adb0:	0800adf9 	.word	0x0800adf9
 800adb4:	0800ae2d 	.word	0x0800ae2d
 800adb8:	0800ae61 	.word	0x0800ae61
 800adbc:	0800ae95 	.word	0x0800ae95
 800adc0:	0800aec9 	.word	0x0800aec9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00b      	beq.n	800ade8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	7c12      	ldrb	r2, [r2, #16]
 800addc:	f107 0108 	add.w	r1, r7, #8
 800ade0:	4610      	mov	r0, r2
 800ade2:	4798      	blx	r3
 800ade4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ade6:	e091      	b.n	800af0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 facb 	bl	800b386 <USBD_CtlError>
            err++;
 800adf0:	7afb      	ldrb	r3, [r7, #11]
 800adf2:	3301      	adds	r3, #1
 800adf4:	72fb      	strb	r3, [r7, #11]
          break;
 800adf6:	e089      	b.n	800af0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	7c12      	ldrb	r2, [r2, #16]
 800ae10:	f107 0108 	add.w	r1, r7, #8
 800ae14:	4610      	mov	r0, r2
 800ae16:	4798      	blx	r3
 800ae18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae1a:	e077      	b.n	800af0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fab1 	bl	800b386 <USBD_CtlError>
            err++;
 800ae24:	7afb      	ldrb	r3, [r7, #11]
 800ae26:	3301      	adds	r3, #1
 800ae28:	72fb      	strb	r3, [r7, #11]
          break;
 800ae2a:	e06f      	b.n	800af0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00b      	beq.n	800ae50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	7c12      	ldrb	r2, [r2, #16]
 800ae44:	f107 0108 	add.w	r1, r7, #8
 800ae48:	4610      	mov	r0, r2
 800ae4a:	4798      	blx	r3
 800ae4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae4e:	e05d      	b.n	800af0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fa97 	bl	800b386 <USBD_CtlError>
            err++;
 800ae58:	7afb      	ldrb	r3, [r7, #11]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae5e:	e055      	b.n	800af0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00b      	beq.n	800ae84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	7c12      	ldrb	r2, [r2, #16]
 800ae78:	f107 0108 	add.w	r1, r7, #8
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
 800ae80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae82:	e043      	b.n	800af0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fa7d 	bl	800b386 <USBD_CtlError>
            err++;
 800ae8c:	7afb      	ldrb	r3, [r7, #11]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	72fb      	strb	r3, [r7, #11]
          break;
 800ae92:	e03b      	b.n	800af0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	7c12      	ldrb	r2, [r2, #16]
 800aeac:	f107 0108 	add.w	r1, r7, #8
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4798      	blx	r3
 800aeb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeb6:	e029      	b.n	800af0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fa63 	bl	800b386 <USBD_CtlError>
            err++;
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	3301      	adds	r3, #1
 800aec4:	72fb      	strb	r3, [r7, #11]
          break;
 800aec6:	e021      	b.n	800af0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00b      	beq.n	800aeec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	7c12      	ldrb	r2, [r2, #16]
 800aee0:	f107 0108 	add.w	r1, r7, #8
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeea:	e00f      	b.n	800af0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fa49 	bl	800b386 <USBD_CtlError>
            err++;
 800aef4:	7afb      	ldrb	r3, [r7, #11]
 800aef6:	3301      	adds	r3, #1
 800aef8:	72fb      	strb	r3, [r7, #11]
          break;
 800aefa:	e007      	b.n	800af0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fa41 	bl	800b386 <USBD_CtlError>
          err++;
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	3301      	adds	r3, #1
 800af08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af0a:	bf00      	nop
      }
      break;
 800af0c:	e037      	b.n	800af7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	7c1b      	ldrb	r3, [r3, #16]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d109      	bne.n	800af2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af1e:	f107 0208 	add.w	r2, r7, #8
 800af22:	4610      	mov	r0, r2
 800af24:	4798      	blx	r3
 800af26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af28:	e029      	b.n	800af7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 fa2a 	bl	800b386 <USBD_CtlError>
        err++;
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	3301      	adds	r3, #1
 800af36:	72fb      	strb	r3, [r7, #11]
      break;
 800af38:	e021      	b.n	800af7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	7c1b      	ldrb	r3, [r3, #16]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10d      	bne.n	800af5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4a:	f107 0208 	add.w	r2, r7, #8
 800af4e:	4610      	mov	r0, r2
 800af50:	4798      	blx	r3
 800af52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3301      	adds	r3, #1
 800af58:	2207      	movs	r2, #7
 800af5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af5c:	e00f      	b.n	800af7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fa10 	bl	800b386 <USBD_CtlError>
        err++;
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	3301      	adds	r3, #1
 800af6a:	72fb      	strb	r3, [r7, #11]
      break;
 800af6c:	e007      	b.n	800af7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fa08 	bl	800b386 <USBD_CtlError>
      err++;
 800af76:	7afb      	ldrb	r3, [r7, #11]
 800af78:	3301      	adds	r3, #1
 800af7a:	72fb      	strb	r3, [r7, #11]
      break;
 800af7c:	bf00      	nop
  }

  if (err != 0U)
 800af7e:	7afb      	ldrb	r3, [r7, #11]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d11e      	bne.n	800afc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	88db      	ldrh	r3, [r3, #6]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d016      	beq.n	800afba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af8c:	893b      	ldrh	r3, [r7, #8]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00e      	beq.n	800afb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	88da      	ldrh	r2, [r3, #6]
 800af96:	893b      	ldrh	r3, [r7, #8]
 800af98:	4293      	cmp	r3, r2
 800af9a:	bf28      	it	cs
 800af9c:	4613      	movcs	r3, r2
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afa2:	893b      	ldrh	r3, [r7, #8]
 800afa4:	461a      	mov	r2, r3
 800afa6:	68f9      	ldr	r1, [r7, #12]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fa5d 	bl	800b468 <USBD_CtlSendData>
 800afae:	e009      	b.n	800afc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f9e7 	bl	800b386 <USBD_CtlError>
 800afb8:	e004      	b.n	800afc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 faae 	bl	800b51c <USBD_CtlSendStatus>
 800afc0:	e000      	b.n	800afc4 <USBD_GetDescriptor+0x2cc>
    return;
 800afc2:	bf00      	nop
  }
}
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop

0800afcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	889b      	ldrh	r3, [r3, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d131      	bne.n	800b042 <USBD_SetAddress+0x76>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	88db      	ldrh	r3, [r3, #6]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d12d      	bne.n	800b042 <USBD_SetAddress+0x76>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	885b      	ldrh	r3, [r3, #2]
 800afea:	2b7f      	cmp	r3, #127	; 0x7f
 800afec:	d829      	bhi.n	800b042 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	885b      	ldrh	r3, [r3, #2]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aff8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b03      	cmp	r3, #3
 800b004:	d104      	bne.n	800b010 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f9bc 	bl	800b386 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00e:	e01d      	b.n	800b04c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	7bfa      	ldrb	r2, [r7, #15]
 800b014:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f003 fe1f 	bl	800ec60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fa7a 	bl	800b51c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d004      	beq.n	800b038 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2202      	movs	r2, #2
 800b032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b036:	e009      	b.n	800b04c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b040:	e004      	b.n	800b04c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f99e 	bl	800b386 <USBD_CtlError>
  }
}
 800b04a:	bf00      	nop
 800b04c:	bf00      	nop
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	885b      	ldrh	r3, [r3, #2]
 800b066:	b2da      	uxtb	r2, r3
 800b068:	4b4e      	ldr	r3, [pc, #312]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b06a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b06c:	4b4d      	ldr	r3, [pc, #308]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d905      	bls.n	800b080 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f985 	bl	800b386 <USBD_CtlError>
    return USBD_FAIL;
 800b07c:	2303      	movs	r3, #3
 800b07e:	e08c      	b.n	800b19a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d002      	beq.n	800b092 <USBD_SetConfig+0x3e>
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d029      	beq.n	800b0e4 <USBD_SetConfig+0x90>
 800b090:	e075      	b.n	800b17e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b092:	4b44      	ldr	r3, [pc, #272]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d020      	beq.n	800b0dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b09a:	4b42      	ldr	r3, [pc, #264]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0a4:	4b3f      	ldr	r3, [pc, #252]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7fe ffe7 	bl	800a07e <USBD_SetClassConfig>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d008      	beq.n	800b0cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f962 	bl	800b386 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0ca:	e065      	b.n	800b198 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fa25 	bl	800b51c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b0da:	e05d      	b.n	800b198 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fa1d 	bl	800b51c <USBD_CtlSendStatus>
      break;
 800b0e2:	e059      	b.n	800b198 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b0e4:	4b2f      	ldr	r3, [pc, #188]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d112      	bne.n	800b112 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b0f4:	4b2b      	ldr	r3, [pc, #172]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0fe:	4b29      	ldr	r3, [pc, #164]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7fe ffd6 	bl	800a0b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fa06 	bl	800b51c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b110:	e042      	b.n	800b198 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b112:	4b24      	ldr	r3, [pc, #144]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d02a      	beq.n	800b176 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	4619      	mov	r1, r3
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7fe ffc4 	bl	800a0b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b12e:	4b1d      	ldr	r3, [pc, #116]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b138:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7fe ff9d 	bl	800a07e <USBD_SetClassConfig>
 800b144:	4603      	mov	r3, r0
 800b146:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b148:	7bfb      	ldrb	r3, [r7, #15]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00f      	beq.n	800b16e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f918 	bl	800b386 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7fe ffa9 	bl	800a0b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2202      	movs	r2, #2
 800b168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b16c:	e014      	b.n	800b198 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f9d4 	bl	800b51c <USBD_CtlSendStatus>
      break;
 800b174:	e010      	b.n	800b198 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f9d0 	bl	800b51c <USBD_CtlSendStatus>
      break;
 800b17c:	e00c      	b.n	800b198 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b17e:	6839      	ldr	r1, [r7, #0]
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f900 	bl	800b386 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b186:	4b07      	ldr	r3, [pc, #28]	; (800b1a4 <USBD_SetConfig+0x150>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fe ff92 	bl	800a0b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b192:	2303      	movs	r3, #3
 800b194:	73fb      	strb	r3, [r7, #15]
      break;
 800b196:	bf00      	nop
  }

  return ret;
 800b198:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	2000089c 	.word	0x2000089c

0800b1a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	88db      	ldrh	r3, [r3, #6]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d004      	beq.n	800b1c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f8e2 	bl	800b386 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1c2:	e023      	b.n	800b20c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	dc02      	bgt.n	800b1d6 <USBD_GetConfig+0x2e>
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dc03      	bgt.n	800b1dc <USBD_GetConfig+0x34>
 800b1d4:	e015      	b.n	800b202 <USBD_GetConfig+0x5a>
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	d00b      	beq.n	800b1f2 <USBD_GetConfig+0x4a>
 800b1da:	e012      	b.n	800b202 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f93c 	bl	800b468 <USBD_CtlSendData>
        break;
 800b1f0:	e00c      	b.n	800b20c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f934 	bl	800b468 <USBD_CtlSendData>
        break;
 800b200:	e004      	b.n	800b20c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f8be 	bl	800b386 <USBD_CtlError>
        break;
 800b20a:	bf00      	nop
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b224:	b2db      	uxtb	r3, r3
 800b226:	3b01      	subs	r3, #1
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d81e      	bhi.n	800b26a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	88db      	ldrh	r3, [r3, #6]
 800b230:	2b02      	cmp	r3, #2
 800b232:	d004      	beq.n	800b23e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f8a5 	bl	800b386 <USBD_CtlError>
        break;
 800b23c:	e01a      	b.n	800b274 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d005      	beq.n	800b25a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f043 0202 	orr.w	r2, r3, #2
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	330c      	adds	r3, #12
 800b25e:	2202      	movs	r2, #2
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f900 	bl	800b468 <USBD_CtlSendData>
      break;
 800b268:	e004      	b.n	800b274 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 f88a 	bl	800b386 <USBD_CtlError>
      break;
 800b272:	bf00      	nop
  }
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	885b      	ldrh	r3, [r3, #2]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d107      	bne.n	800b29e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f940 	bl	800b51c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b29c:	e013      	b.n	800b2c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	885b      	ldrh	r3, [r3, #2]
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d10b      	bne.n	800b2be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	889b      	ldrh	r3, [r3, #4]
 800b2aa:	0a1b      	lsrs	r3, r3, #8
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	b2da      	uxtb	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f930 	bl	800b51c <USBD_CtlSendStatus>
}
 800b2bc:	e003      	b.n	800b2c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f860 	bl	800b386 <USBD_CtlError>
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d80b      	bhi.n	800b2fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	885b      	ldrh	r3, [r3, #2]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d10c      	bne.n	800b308 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f910 	bl	800b51c <USBD_CtlSendStatus>
      }
      break;
 800b2fc:	e004      	b.n	800b308 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f840 	bl	800b386 <USBD_CtlError>
      break;
 800b306:	e000      	b.n	800b30a <USBD_ClrFeature+0x3c>
      break;
 800b308:	bf00      	nop
  }
}
 800b30a:	bf00      	nop
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	781a      	ldrb	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	3301      	adds	r3, #1
 800b32c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	781a      	ldrb	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	3301      	adds	r3, #1
 800b33a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f7ff fa41 	bl	800a7c4 <SWAPBYTE>
 800b342:	4603      	mov	r3, r0
 800b344:	461a      	mov	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3301      	adds	r3, #1
 800b34e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3301      	adds	r3, #1
 800b354:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f7ff fa34 	bl	800a7c4 <SWAPBYTE>
 800b35c:	4603      	mov	r3, r0
 800b35e:	461a      	mov	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3301      	adds	r3, #1
 800b368:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3301      	adds	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7ff fa27 	bl	800a7c4 <SWAPBYTE>
 800b376:	4603      	mov	r3, r0
 800b378:	461a      	mov	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	80da      	strh	r2, [r3, #6]
}
 800b37e:	bf00      	nop
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b390:	2180      	movs	r1, #128	; 0x80
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f003 fbfa 	bl	800eb8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b398:	2100      	movs	r1, #0
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f003 fbf6 	bl	800eb8c <USBD_LL_StallEP>
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d036      	beq.n	800b42c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3c2:	6938      	ldr	r0, [r7, #16]
 800b3c4:	f000 f836 	bl	800b434 <USBD_GetLen>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	4413      	add	r3, r2
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	7812      	ldrb	r2, [r2, #0]
 800b3e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	2203      	movs	r2, #3
 800b3f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3f8:	e013      	b.n	800b422 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b3fa:	7dfb      	ldrb	r3, [r7, #23]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	4413      	add	r3, r2
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	7812      	ldrb	r2, [r2, #0]
 800b404:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	3301      	adds	r3, #1
 800b40a:	613b      	str	r3, [r7, #16]
    idx++;
 800b40c:	7dfb      	ldrb	r3, [r7, #23]
 800b40e:	3301      	adds	r3, #1
 800b410:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	4413      	add	r3, r2
 800b418:	2200      	movs	r2, #0
 800b41a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
 800b41e:	3301      	adds	r3, #1
 800b420:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1e7      	bne.n	800b3fa <USBD_GetString+0x52>
 800b42a:	e000      	b.n	800b42e <USBD_GetString+0x86>
    return;
 800b42c:	bf00      	nop
  }
}
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b444:	e005      	b.n	800b452 <USBD_GetLen+0x1e>
  {
    len++;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
 800b448:	3301      	adds	r3, #1
 800b44a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	3301      	adds	r3, #1
 800b450:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1f5      	bne.n	800b446 <USBD_GetLen+0x12>
  }

  return len;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2202      	movs	r2, #2
 800b478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	2100      	movs	r1, #0
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f003 fc05 	bl	800ec9e <USBD_LL_Transmit>

  return USBD_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b084      	sub	sp, #16
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f003 fbf4 	bl	800ec9e <USBD_LL_Transmit>

  return USBD_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2203      	movs	r2, #3
 800b4d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f003 fbf8 	bl	800ece0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	60f8      	str	r0, [r7, #12]
 800b502:	60b9      	str	r1, [r7, #8]
 800b504:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	2100      	movs	r1, #0
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f003 fbe7 	bl	800ece0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2204      	movs	r2, #4
 800b528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b52c:	2300      	movs	r3, #0
 800b52e:	2200      	movs	r2, #0
 800b530:	2100      	movs	r1, #0
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f003 fbb3 	bl	800ec9e <USBD_LL_Transmit>

  return USBD_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2205      	movs	r2, #5
 800b54e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b552:	2300      	movs	r3, #0
 800b554:	2200      	movs	r2, #0
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f003 fbc1 	bl	800ece0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <__NVIC_SetPriority>:
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	6039      	str	r1, [r7, #0]
 800b572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	db0a      	blt.n	800b592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	490c      	ldr	r1, [pc, #48]	; (800b5b4 <__NVIC_SetPriority+0x4c>)
 800b582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b586:	0112      	lsls	r2, r2, #4
 800b588:	b2d2      	uxtb	r2, r2
 800b58a:	440b      	add	r3, r1
 800b58c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b590:	e00a      	b.n	800b5a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	b2da      	uxtb	r2, r3
 800b596:	4908      	ldr	r1, [pc, #32]	; (800b5b8 <__NVIC_SetPriority+0x50>)
 800b598:	79fb      	ldrb	r3, [r7, #7]
 800b59a:	f003 030f 	and.w	r3, r3, #15
 800b59e:	3b04      	subs	r3, #4
 800b5a0:	0112      	lsls	r2, r2, #4
 800b5a2:	b2d2      	uxtb	r2, r2
 800b5a4:	440b      	add	r3, r1
 800b5a6:	761a      	strb	r2, [r3, #24]
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	e000e100 	.word	0xe000e100
 800b5b8:	e000ed00 	.word	0xe000ed00

0800b5bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b5c0:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <SysTick_Handler+0x1c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b5c4:	f001 feb2 	bl	800d32c <xTaskGetSchedulerState>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d001      	beq.n	800b5d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b5ce:	f002 fc9b 	bl	800df08 <xPortSysTickHandler>
  }
}
 800b5d2:	bf00      	nop
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	e000e010 	.word	0xe000e010

0800b5dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	f06f 0004 	mvn.w	r0, #4
 800b5e6:	f7ff ffbf 	bl	800b568 <__NVIC_SetPriority>
#endif
}
 800b5ea:	bf00      	nop
 800b5ec:	bd80      	pop	{r7, pc}
	...

0800b5f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5f6:	f3ef 8305 	mrs	r3, IPSR
 800b5fa:	603b      	str	r3, [r7, #0]
  return(result);
 800b5fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b602:	f06f 0305 	mvn.w	r3, #5
 800b606:	607b      	str	r3, [r7, #4]
 800b608:	e00c      	b.n	800b624 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b60a:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <osKernelInitialize+0x44>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b612:	4b08      	ldr	r3, [pc, #32]	; (800b634 <osKernelInitialize+0x44>)
 800b614:	2201      	movs	r2, #1
 800b616:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b618:	2300      	movs	r3, #0
 800b61a:	607b      	str	r3, [r7, #4]
 800b61c:	e002      	b.n	800b624 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b61e:	f04f 33ff 	mov.w	r3, #4294967295
 800b622:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b624:	687b      	ldr	r3, [r7, #4]
}
 800b626:	4618      	mov	r0, r3
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	200008a0 	.word	0x200008a0

0800b638 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b63e:	f3ef 8305 	mrs	r3, IPSR
 800b642:	603b      	str	r3, [r7, #0]
  return(result);
 800b644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b64a:	f06f 0305 	mvn.w	r3, #5
 800b64e:	607b      	str	r3, [r7, #4]
 800b650:	e010      	b.n	800b674 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b652:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <osKernelStart+0x48>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d109      	bne.n	800b66e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b65a:	f7ff ffbf 	bl	800b5dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b65e:	4b08      	ldr	r3, [pc, #32]	; (800b680 <osKernelStart+0x48>)
 800b660:	2202      	movs	r2, #2
 800b662:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b664:	f001 fa1a 	bl	800ca9c <vTaskStartScheduler>
      stat = osOK;
 800b668:	2300      	movs	r3, #0
 800b66a:	607b      	str	r3, [r7, #4]
 800b66c:	e002      	b.n	800b674 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b66e:	f04f 33ff 	mov.w	r3, #4294967295
 800b672:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b674:	687b      	ldr	r3, [r7, #4]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	200008a0 	.word	0x200008a0

0800b684 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b684:	b580      	push	{r7, lr}
 800b686:	b08e      	sub	sp, #56	; 0x38
 800b688:	af04      	add	r7, sp, #16
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b694:	f3ef 8305 	mrs	r3, IPSR
 800b698:	617b      	str	r3, [r7, #20]
  return(result);
 800b69a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d17f      	bne.n	800b7a0 <osThreadNew+0x11c>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d07c      	beq.n	800b7a0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b6a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6aa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b6ac:	2318      	movs	r3, #24
 800b6ae:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d045      	beq.n	800b74c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <osThreadNew+0x4a>
        name = attr->name;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d002      	beq.n	800b6dc <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d008      	beq.n	800b6f4 <osThreadNew+0x70>
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	2b38      	cmp	r3, #56	; 0x38
 800b6e6:	d805      	bhi.n	800b6f4 <osThreadNew+0x70>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <osThreadNew+0x74>
        return (NULL);
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	e054      	b.n	800b7a2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	089b      	lsrs	r3, r3, #2
 800b706:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00e      	beq.n	800b72e <osThreadNew+0xaa>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	2b6b      	cmp	r3, #107	; 0x6b
 800b716:	d90a      	bls.n	800b72e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d006      	beq.n	800b72e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <osThreadNew+0xaa>
        mem = 1;
 800b728:	2301      	movs	r3, #1
 800b72a:	61bb      	str	r3, [r7, #24]
 800b72c:	e010      	b.n	800b750 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10c      	bne.n	800b750 <osThreadNew+0xcc>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d108      	bne.n	800b750 <osThreadNew+0xcc>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d104      	bne.n	800b750 <osThreadNew+0xcc>
          mem = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	61bb      	str	r3, [r7, #24]
 800b74a:	e001      	b.n	800b750 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b74c:	2300      	movs	r3, #0
 800b74e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d110      	bne.n	800b778 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b75e:	9202      	str	r2, [sp, #8]
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	6a3a      	ldr	r2, [r7, #32]
 800b76a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 feb9 	bl	800c4e4 <xTaskCreateStatic>
 800b772:	4603      	mov	r3, r0
 800b774:	613b      	str	r3, [r7, #16]
 800b776:	e013      	b.n	800b7a0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d110      	bne.n	800b7a0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	b29a      	uxth	r2, r3
 800b782:	f107 0310 	add.w	r3, r7, #16
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 ff04 	bl	800c59e <xTaskCreate>
 800b796:	4603      	mov	r3, r0
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d001      	beq.n	800b7a0 <osThreadNew+0x11c>
            hTask = NULL;
 800b79c:	2300      	movs	r3, #0
 800b79e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b7a0:	693b      	ldr	r3, [r7, #16]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3728      	adds	r7, #40	; 0x28
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7b2:	f3ef 8305 	mrs	r3, IPSR
 800b7b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <osDelay+0x1c>
    stat = osErrorISR;
 800b7be:	f06f 0305 	mvn.w	r3, #5
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e007      	b.n	800b7d6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f001 f829 	bl	800c828 <vTaskDelay>
    }
  }

  return (stat);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08a      	sub	sp, #40	; 0x28
 800b7e4:	af02      	add	r7, sp, #8
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7f0:	f3ef 8305 	mrs	r3, IPSR
 800b7f4:	613b      	str	r3, [r7, #16]
  return(result);
 800b7f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d15f      	bne.n	800b8bc <osMessageQueueNew+0xdc>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d05c      	beq.n	800b8bc <osMessageQueueNew+0xdc>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d059      	beq.n	800b8bc <osMessageQueueNew+0xdc>
    mem = -1;
 800b808:	f04f 33ff 	mov.w	r3, #4294967295
 800b80c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d029      	beq.n	800b868 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d012      	beq.n	800b842 <osMessageQueueNew+0x62>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	2b4f      	cmp	r3, #79	; 0x4f
 800b822:	d90e      	bls.n	800b842 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00a      	beq.n	800b842 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	695a      	ldr	r2, [r3, #20]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	fb01 f303 	mul.w	r3, r1, r3
 800b838:	429a      	cmp	r2, r3
 800b83a:	d302      	bcc.n	800b842 <osMessageQueueNew+0x62>
        mem = 1;
 800b83c:	2301      	movs	r3, #1
 800b83e:	61bb      	str	r3, [r7, #24]
 800b840:	e014      	b.n	800b86c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d110      	bne.n	800b86c <osMessageQueueNew+0x8c>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10c      	bne.n	800b86c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b856:	2b00      	cmp	r3, #0
 800b858:	d108      	bne.n	800b86c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d104      	bne.n	800b86c <osMessageQueueNew+0x8c>
          mem = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	61bb      	str	r3, [r7, #24]
 800b866:	e001      	b.n	800b86c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d10b      	bne.n	800b88a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	691a      	ldr	r2, [r3, #16]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	2100      	movs	r1, #0
 800b87c:	9100      	str	r1, [sp, #0]
 800b87e:	68b9      	ldr	r1, [r7, #8]
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 f971 	bl	800bb68 <xQueueGenericCreateStatic>
 800b886:	61f8      	str	r0, [r7, #28]
 800b888:	e008      	b.n	800b89c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d105      	bne.n	800b89c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b890:	2200      	movs	r2, #0
 800b892:	68b9      	ldr	r1, [r7, #8]
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f000 f9df 	bl	800bc58 <xQueueGenericCreate>
 800b89a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00c      	beq.n	800b8bc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	e001      	b.n	800b8b4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b8b4:	6979      	ldr	r1, [r7, #20]
 800b8b6:	69f8      	ldr	r0, [r7, #28]
 800b8b8:	f000 fdb6 	bl	800c428 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b8bc:	69fb      	ldr	r3, [r7, #28]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3720      	adds	r7, #32
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
	...

0800b8c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4a07      	ldr	r2, [pc, #28]	; (800b8f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b8d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	4a06      	ldr	r2, [pc, #24]	; (800b8f8 <vApplicationGetIdleTaskMemory+0x30>)
 800b8de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8e6:	601a      	str	r2, [r3, #0]
}
 800b8e8:	bf00      	nop
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	200008a4 	.word	0x200008a4
 800b8f8:	20000910 	.word	0x20000910

0800b8fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	4a07      	ldr	r2, [pc, #28]	; (800b928 <vApplicationGetTimerTaskMemory+0x2c>)
 800b90c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	4a06      	ldr	r2, [pc, #24]	; (800b92c <vApplicationGetTimerTaskMemory+0x30>)
 800b912:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b91a:	601a      	str	r2, [r3, #0]
}
 800b91c:	bf00      	nop
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	20000d10 	.word	0x20000d10
 800b92c:	20000d7c 	.word	0x20000d7c

0800b930 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f103 0208 	add.w	r2, r3, #8
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f04f 32ff 	mov.w	r2, #4294967295
 800b948:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f103 0208 	add.w	r2, r3, #8
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f103 0208 	add.w	r2, r3, #8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b97e:	bf00      	nop
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b98a:	b480      	push	{r7}
 800b98c:	b085      	sub	sp, #20
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	689a      	ldr	r2, [r3, #8]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	601a      	str	r2, [r3, #0]
}
 800b9c6:	bf00      	nop
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b085      	sub	sp, #20
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e8:	d103      	bne.n	800b9f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e00c      	b.n	800ba0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	e002      	b.n	800ba00 <vListInsert+0x2e>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d2f6      	bcs.n	800b9fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	1c5a      	adds	r2, r3, #1
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	601a      	str	r2, [r3, #0]
}
 800ba38:	bf00      	nop
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	6892      	ldr	r2, [r2, #8]
 800ba5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	6852      	ldr	r2, [r2, #4]
 800ba64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d103      	bne.n	800ba78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	1e5a      	subs	r2, r3, #1
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bac2:	f002 f98f 	bl	800dde4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bace:	68f9      	ldr	r1, [r7, #12]
 800bad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bad2:	fb01 f303 	mul.w	r3, r1, r3
 800bad6:	441a      	add	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf2:	3b01      	subs	r3, #1
 800baf4:	68f9      	ldr	r1, [r7, #12]
 800baf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800baf8:	fb01 f303 	mul.w	r3, r1, r3
 800bafc:	441a      	add	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	22ff      	movs	r2, #255	; 0xff
 800bb06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	22ff      	movs	r2, #255	; 0xff
 800bb0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d114      	bne.n	800bb42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d01a      	beq.n	800bb56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3310      	adds	r3, #16
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 fa43 	bl	800cfb0 <xTaskRemoveFromEventList>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d012      	beq.n	800bb56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb30:	4b0c      	ldr	r3, [pc, #48]	; (800bb64 <xQueueGenericReset+0xcc>)
 800bb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	e009      	b.n	800bb56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3310      	adds	r3, #16
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7ff fef2 	bl	800b930 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3324      	adds	r3, #36	; 0x24
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff feed 	bl	800b930 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb56:	f002 f975 	bl	800de44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb5a:	2301      	movs	r3, #1
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	e000ed04 	.word	0xe000ed04

0800bb68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b08e      	sub	sp, #56	; 0x38
 800bb6c:	af02      	add	r7, sp, #8
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10a      	bne.n	800bb92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb8e:	bf00      	nop
 800bb90:	e7fe      	b.n	800bb90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10a      	bne.n	800bbae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbaa:	bf00      	nop
 800bbac:	e7fe      	b.n	800bbac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <xQueueGenericCreateStatic+0x52>
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <xQueueGenericCreateStatic+0x56>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e000      	b.n	800bbc0 <xQueueGenericCreateStatic+0x58>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10a      	bne.n	800bbda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	623b      	str	r3, [r7, #32]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <xQueueGenericCreateStatic+0x7e>
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <xQueueGenericCreateStatic+0x82>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <xQueueGenericCreateStatic+0x84>
 800bbea:	2300      	movs	r3, #0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	61fb      	str	r3, [r7, #28]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc06:	2350      	movs	r3, #80	; 0x50
 800bc08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2b50      	cmp	r3, #80	; 0x50
 800bc0e:	d00a      	beq.n	800bc26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	61bb      	str	r3, [r7, #24]
}
 800bc22:	bf00      	nop
 800bc24:	e7fe      	b.n	800bc24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00d      	beq.n	800bc4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	4613      	mov	r3, r2
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	68b9      	ldr	r1, [r7, #8]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 f83f 	bl	800bccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3730      	adds	r7, #48	; 0x30
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b08a      	sub	sp, #40	; 0x28
 800bc5c:	af02      	add	r7, sp, #8
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	4613      	mov	r3, r2
 800bc64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	613b      	str	r3, [r7, #16]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	fb02 f303 	mul.w	r3, r2, r3
 800bc8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	3350      	adds	r3, #80	; 0x50
 800bc90:	4618      	mov	r0, r3
 800bc92:	f002 f9c9 	bl	800e028 <pvPortMalloc>
 800bc96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d011      	beq.n	800bcc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	3350      	adds	r3, #80	; 0x50
 800bca6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcb0:	79fa      	ldrb	r2, [r7, #7]
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	697a      	ldr	r2, [r7, #20]
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 f805 	bl	800bccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bcc2:	69bb      	ldr	r3, [r7, #24]
	}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3720      	adds	r7, #32
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d103      	bne.n	800bce8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	69ba      	ldr	r2, [r7, #24]
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	e002      	b.n	800bcee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	69b8      	ldr	r0, [r7, #24]
 800bcfe:	f7ff fecb 	bl	800ba98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	78fa      	ldrb	r2, [r7, #3]
 800bd06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd0a:	bf00      	nop
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08e      	sub	sp, #56	; 0x38
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd22:	2300      	movs	r3, #0
 800bd24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <xQueueGenericSend+0x32>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd42:	bf00      	nop
 800bd44:	e7fe      	b.n	800bd44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d103      	bne.n	800bd54 <xQueueGenericSend+0x40>
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <xQueueGenericSend+0x44>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e000      	b.n	800bd5a <xQueueGenericSend+0x46>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10a      	bne.n	800bd74 <xQueueGenericSend+0x60>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd70:	bf00      	nop
 800bd72:	e7fe      	b.n	800bd72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d103      	bne.n	800bd82 <xQueueGenericSend+0x6e>
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d101      	bne.n	800bd86 <xQueueGenericSend+0x72>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e000      	b.n	800bd88 <xQueueGenericSend+0x74>
 800bd86:	2300      	movs	r3, #0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10a      	bne.n	800bda2 <xQueueGenericSend+0x8e>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	623b      	str	r3, [r7, #32]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bda2:	f001 fac3 	bl	800d32c <xTaskGetSchedulerState>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <xQueueGenericSend+0x9e>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <xQueueGenericSend+0xa2>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e000      	b.n	800bdb8 <xQueueGenericSend+0xa4>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10a      	bne.n	800bdd2 <xQueueGenericSend+0xbe>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	61fb      	str	r3, [r7, #28]
}
 800bdce:	bf00      	nop
 800bdd0:	e7fe      	b.n	800bdd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdd2:	f002 f807 	bl	800dde4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d302      	bcc.n	800bde8 <xQueueGenericSend+0xd4>
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d129      	bne.n	800be3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	68b9      	ldr	r1, [r7, #8]
 800bdec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdee:	f000 fa0b 	bl	800c208 <prvCopyDataToQueue>
 800bdf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d010      	beq.n	800be1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfe:	3324      	adds	r3, #36	; 0x24
 800be00:	4618      	mov	r0, r3
 800be02:	f001 f8d5 	bl	800cfb0 <xTaskRemoveFromEventList>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d013      	beq.n	800be34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be0c:	4b3f      	ldr	r3, [pc, #252]	; (800bf0c <xQueueGenericSend+0x1f8>)
 800be0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	e00a      	b.n	800be34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	2b00      	cmp	r3, #0
 800be22:	d007      	beq.n	800be34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be24:	4b39      	ldr	r3, [pc, #228]	; (800bf0c <xQueueGenericSend+0x1f8>)
 800be26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be34:	f002 f806 	bl	800de44 <vPortExitCritical>
				return pdPASS;
 800be38:	2301      	movs	r3, #1
 800be3a:	e063      	b.n	800bf04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d103      	bne.n	800be4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be42:	f001 ffff 	bl	800de44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be46:	2300      	movs	r3, #0
 800be48:	e05c      	b.n	800bf04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d106      	bne.n	800be5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be50:	f107 0314 	add.w	r3, r7, #20
 800be54:	4618      	mov	r0, r3
 800be56:	f001 f90f 	bl	800d078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be5a:	2301      	movs	r3, #1
 800be5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be5e:	f001 fff1 	bl	800de44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be62:	f000 fe81 	bl	800cb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be66:	f001 ffbd 	bl	800dde4 <vPortEnterCritical>
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be70:	b25b      	sxtb	r3, r3
 800be72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be76:	d103      	bne.n	800be80 <xQueueGenericSend+0x16c>
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be86:	b25b      	sxtb	r3, r3
 800be88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8c:	d103      	bne.n	800be96 <xQueueGenericSend+0x182>
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be96:	f001 ffd5 	bl	800de44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be9a:	1d3a      	adds	r2, r7, #4
 800be9c:	f107 0314 	add.w	r3, r7, #20
 800bea0:	4611      	mov	r1, r2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 f8fe 	bl	800d0a4 <xTaskCheckForTimeOut>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d124      	bne.n	800bef8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800beae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beb0:	f000 faa2 	bl	800c3f8 <prvIsQueueFull>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d018      	beq.n	800beec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	3310      	adds	r3, #16
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	4611      	mov	r1, r2
 800bec2:	4618      	mov	r0, r3
 800bec4:	f001 f824 	bl	800cf10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beca:	f000 fa2d 	bl	800c328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bece:	f000 fe59 	bl	800cb84 <xTaskResumeAll>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f47f af7c 	bne.w	800bdd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800beda:	4b0c      	ldr	r3, [pc, #48]	; (800bf0c <xQueueGenericSend+0x1f8>)
 800bedc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee0:	601a      	str	r2, [r3, #0]
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	e772      	b.n	800bdd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800beec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beee:	f000 fa1b 	bl	800c328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bef2:	f000 fe47 	bl	800cb84 <xTaskResumeAll>
 800bef6:	e76c      	b.n	800bdd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800befa:	f000 fa15 	bl	800c328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800befe:	f000 fe41 	bl	800cb84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3738      	adds	r7, #56	; 0x38
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	e000ed04 	.word	0xe000ed04

0800bf10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b090      	sub	sp, #64	; 0x40
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10a      	bne.n	800bf3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <xQueueGenericSendFromISR+0x3c>
 800bf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <xQueueGenericSendFromISR+0x40>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <xQueueGenericSendFromISR+0x42>
 800bf50:	2300      	movs	r3, #0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10a      	bne.n	800bf6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d103      	bne.n	800bf7a <xQueueGenericSendFromISR+0x6a>
 800bf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d101      	bne.n	800bf7e <xQueueGenericSendFromISR+0x6e>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e000      	b.n	800bf80 <xQueueGenericSendFromISR+0x70>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10a      	bne.n	800bf9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	623b      	str	r3, [r7, #32]
}
 800bf96:	bf00      	nop
 800bf98:	e7fe      	b.n	800bf98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf9a:	f002 f805 	bl	800dfa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf9e:	f3ef 8211 	mrs	r2, BASEPRI
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	61fa      	str	r2, [r7, #28]
 800bfb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bfb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d302      	bcc.n	800bfcc <xQueueGenericSendFromISR+0xbc>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	d12f      	bne.n	800c02c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfe2:	f000 f911 	bl	800c208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bfe6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bfea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfee:	d112      	bne.n	800c016 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d016      	beq.n	800c026 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffa:	3324      	adds	r3, #36	; 0x24
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 ffd7 	bl	800cfb0 <xTaskRemoveFromEventList>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00e      	beq.n	800c026 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00b      	beq.n	800c026 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	601a      	str	r2, [r3, #0]
 800c014:	e007      	b.n	800c026 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c016:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c01a:	3301      	adds	r3, #1
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	b25a      	sxtb	r2, r3
 800c020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c026:	2301      	movs	r3, #1
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c02a:	e001      	b.n	800c030 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c02c:	2300      	movs	r3, #0
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c032:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c03a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3740      	adds	r7, #64	; 0x40
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08c      	sub	sp, #48	; 0x30
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c054:	2300      	movs	r3, #0
 800c056:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10a      	bne.n	800c078 <xQueueReceive+0x30>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	623b      	str	r3, [r7, #32]
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d103      	bne.n	800c086 <xQueueReceive+0x3e>
 800c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <xQueueReceive+0x42>
 800c086:	2301      	movs	r3, #1
 800c088:	e000      	b.n	800c08c <xQueueReceive+0x44>
 800c08a:	2300      	movs	r3, #0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10a      	bne.n	800c0a6 <xQueueReceive+0x5e>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	61fb      	str	r3, [r7, #28]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0a6:	f001 f941 	bl	800d32c <xTaskGetSchedulerState>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d102      	bne.n	800c0b6 <xQueueReceive+0x6e>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <xQueueReceive+0x72>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <xQueueReceive+0x74>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10a      	bne.n	800c0d6 <xQueueReceive+0x8e>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	61bb      	str	r3, [r7, #24]
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0d6:	f001 fe85 	bl	800dde4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d01f      	beq.n	800c126 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ea:	f000 f8f7 	bl	800c2dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	1e5a      	subs	r2, r3, #1
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00f      	beq.n	800c11e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	3310      	adds	r3, #16
 800c102:	4618      	mov	r0, r3
 800c104:	f000 ff54 	bl	800cfb0 <xTaskRemoveFromEventList>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d007      	beq.n	800c11e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c10e:	4b3d      	ldr	r3, [pc, #244]	; (800c204 <xQueueReceive+0x1bc>)
 800c110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c11e:	f001 fe91 	bl	800de44 <vPortExitCritical>
				return pdPASS;
 800c122:	2301      	movs	r3, #1
 800c124:	e069      	b.n	800c1fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d103      	bne.n	800c134 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c12c:	f001 fe8a 	bl	800de44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c130:	2300      	movs	r3, #0
 800c132:	e062      	b.n	800c1fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c136:	2b00      	cmp	r3, #0
 800c138:	d106      	bne.n	800c148 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c13a:	f107 0310 	add.w	r3, r7, #16
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 ff9a 	bl	800d078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c144:	2301      	movs	r3, #1
 800c146:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c148:	f001 fe7c 	bl	800de44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c14c:	f000 fd0c 	bl	800cb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c150:	f001 fe48 	bl	800dde4 <vPortEnterCritical>
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c15a:	b25b      	sxtb	r3, r3
 800c15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c160:	d103      	bne.n	800c16a <xQueueReceive+0x122>
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	2200      	movs	r2, #0
 800c166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c170:	b25b      	sxtb	r3, r3
 800c172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c176:	d103      	bne.n	800c180 <xQueueReceive+0x138>
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	2200      	movs	r2, #0
 800c17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c180:	f001 fe60 	bl	800de44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c184:	1d3a      	adds	r2, r7, #4
 800c186:	f107 0310 	add.w	r3, r7, #16
 800c18a:	4611      	mov	r1, r2
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 ff89 	bl	800d0a4 <xTaskCheckForTimeOut>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d123      	bne.n	800c1e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c19a:	f000 f917 	bl	800c3cc <prvIsQueueEmpty>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d017      	beq.n	800c1d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	3324      	adds	r3, #36	; 0x24
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 feaf 	bl	800cf10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b4:	f000 f8b8 	bl	800c328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1b8:	f000 fce4 	bl	800cb84 <xTaskResumeAll>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d189      	bne.n	800c0d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c1c2:	4b10      	ldr	r3, [pc, #64]	; (800c204 <xQueueReceive+0x1bc>)
 800c1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	e780      	b.n	800c0d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1d6:	f000 f8a7 	bl	800c328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1da:	f000 fcd3 	bl	800cb84 <xTaskResumeAll>
 800c1de:	e77a      	b.n	800c0d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1e2:	f000 f8a1 	bl	800c328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1e6:	f000 fccd 	bl	800cb84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ec:	f000 f8ee 	bl	800c3cc <prvIsQueueEmpty>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f43f af6f 	beq.w	800c0d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3730      	adds	r7, #48	; 0x30
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	e000ed04 	.word	0xe000ed04

0800c208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c214:	2300      	movs	r3, #0
 800c216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10d      	bne.n	800c242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d14d      	bne.n	800c2ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	4618      	mov	r0, r3
 800c234:	f001 f898 	bl	800d368 <xTaskPriorityDisinherit>
 800c238:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	609a      	str	r2, [r3, #8]
 800c240:	e043      	b.n	800c2ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d119      	bne.n	800c27c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6858      	ldr	r0, [r3, #4]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c250:	461a      	mov	r2, r3
 800c252:	68b9      	ldr	r1, [r7, #8]
 800c254:	f002 fdf6 	bl	800ee44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c260:	441a      	add	r2, r3
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d32b      	bcc.n	800c2ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	605a      	str	r2, [r3, #4]
 800c27a:	e026      	b.n	800c2ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68d8      	ldr	r0, [r3, #12]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c284:	461a      	mov	r2, r3
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	f002 fddc 	bl	800ee44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c294:	425b      	negs	r3, r3
 800c296:	441a      	add	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	68da      	ldr	r2, [r3, #12]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d207      	bcs.n	800c2b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	689a      	ldr	r2, [r3, #8]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b0:	425b      	negs	r3, r3
 800c2b2:	441a      	add	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d105      	bne.n	800c2ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c2d2:	697b      	ldr	r3, [r7, #20]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d018      	beq.n	800c320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68da      	ldr	r2, [r3, #12]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f6:	441a      	add	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	68da      	ldr	r2, [r3, #12]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	429a      	cmp	r2, r3
 800c306:	d303      	bcc.n	800c310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68d9      	ldr	r1, [r3, #12]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c318:	461a      	mov	r2, r3
 800c31a:	6838      	ldr	r0, [r7, #0]
 800c31c:	f002 fd92 	bl	800ee44 <memcpy>
	}
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c330:	f001 fd58 	bl	800dde4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c33a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c33c:	e011      	b.n	800c362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c342:	2b00      	cmp	r3, #0
 800c344:	d012      	beq.n	800c36c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	3324      	adds	r3, #36	; 0x24
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 fe30 	bl	800cfb0 <xTaskRemoveFromEventList>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c356:	f000 ff07 	bl	800d168 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	3b01      	subs	r3, #1
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c366:	2b00      	cmp	r3, #0
 800c368:	dce9      	bgt.n	800c33e <prvUnlockQueue+0x16>
 800c36a:	e000      	b.n	800c36e <prvUnlockQueue+0x46>
					break;
 800c36c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	22ff      	movs	r2, #255	; 0xff
 800c372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c376:	f001 fd65 	bl	800de44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c37a:	f001 fd33 	bl	800dde4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c386:	e011      	b.n	800c3ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d012      	beq.n	800c3b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	3310      	adds	r3, #16
 800c394:	4618      	mov	r0, r3
 800c396:	f000 fe0b 	bl	800cfb0 <xTaskRemoveFromEventList>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c3a0:	f000 fee2 	bl	800d168 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c3a4:	7bbb      	ldrb	r3, [r7, #14]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	dce9      	bgt.n	800c388 <prvUnlockQueue+0x60>
 800c3b4:	e000      	b.n	800c3b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c3b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	22ff      	movs	r2, #255	; 0xff
 800c3bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c3c0:	f001 fd40 	bl	800de44 <vPortExitCritical>
}
 800c3c4:	bf00      	nop
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3d4:	f001 fd06 	bl	800dde4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d102      	bne.n	800c3e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	60fb      	str	r3, [r7, #12]
 800c3e4:	e001      	b.n	800c3ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3ea:	f001 fd2b 	bl	800de44 <vPortExitCritical>

	return xReturn;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c400:	f001 fcf0 	bl	800dde4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d102      	bne.n	800c416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c410:	2301      	movs	r3, #1
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	e001      	b.n	800c41a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c416:	2300      	movs	r3, #0
 800c418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c41a:	f001 fd13 	bl	800de44 <vPortExitCritical>

	return xReturn;
 800c41e:	68fb      	ldr	r3, [r7, #12]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c432:	2300      	movs	r3, #0
 800c434:	60fb      	str	r3, [r7, #12]
 800c436:	e014      	b.n	800c462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c438:	4a0f      	ldr	r2, [pc, #60]	; (800c478 <vQueueAddToRegistry+0x50>)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10b      	bne.n	800c45c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c444:	490c      	ldr	r1, [pc, #48]	; (800c478 <vQueueAddToRegistry+0x50>)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c44e:	4a0a      	ldr	r2, [pc, #40]	; (800c478 <vQueueAddToRegistry+0x50>)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	4413      	add	r3, r2
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c45a:	e006      	b.n	800c46a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	3301      	adds	r3, #1
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b07      	cmp	r3, #7
 800c466:	d9e7      	bls.n	800c438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	2000157c 	.word	0x2000157c

0800c47c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c48c:	f001 fcaa 	bl	800dde4 <vPortEnterCritical>
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c496:	b25b      	sxtb	r3, r3
 800c498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49c:	d103      	bne.n	800c4a6 <vQueueWaitForMessageRestricted+0x2a>
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4ac:	b25b      	sxtb	r3, r3
 800c4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b2:	d103      	bne.n	800c4bc <vQueueWaitForMessageRestricted+0x40>
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4bc:	f001 fcc2 	bl	800de44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d106      	bne.n	800c4d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	3324      	adds	r3, #36	; 0x24
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 fd41 	bl	800cf58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c4d6:	6978      	ldr	r0, [r7, #20]
 800c4d8:	f7ff ff26 	bl	800c328 <prvUnlockQueue>
	}
 800c4dc:	bf00      	nop
 800c4de:	3718      	adds	r7, #24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08e      	sub	sp, #56	; 0x38
 800c4e8:	af04      	add	r7, sp, #16
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10a      	bne.n	800c50e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	623b      	str	r3, [r7, #32]
}
 800c50a:	bf00      	nop
 800c50c:	e7fe      	b.n	800c50c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10a      	bne.n	800c52a <xTaskCreateStatic+0x46>
	__asm volatile
 800c514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c518:	f383 8811 	msr	BASEPRI, r3
 800c51c:	f3bf 8f6f 	isb	sy
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	61fb      	str	r3, [r7, #28]
}
 800c526:	bf00      	nop
 800c528:	e7fe      	b.n	800c528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c52a:	236c      	movs	r3, #108	; 0x6c
 800c52c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	2b6c      	cmp	r3, #108	; 0x6c
 800c532:	d00a      	beq.n	800c54a <xTaskCreateStatic+0x66>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	61bb      	str	r3, [r7, #24]
}
 800c546:	bf00      	nop
 800c548:	e7fe      	b.n	800c548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c54a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d01e      	beq.n	800c590 <xTaskCreateStatic+0xac>
 800c552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c554:	2b00      	cmp	r3, #0
 800c556:	d01b      	beq.n	800c590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	2202      	movs	r2, #2
 800c566:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c56a:	2300      	movs	r3, #0
 800c56c:	9303      	str	r3, [sp, #12]
 800c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c570:	9302      	str	r3, [sp, #8]
 800c572:	f107 0314 	add.w	r3, r7, #20
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	68b9      	ldr	r1, [r7, #8]
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 f850 	bl	800c628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c58a:	f000 f8dd 	bl	800c748 <prvAddNewTaskToReadyList>
 800c58e:	e001      	b.n	800c594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c590:	2300      	movs	r3, #0
 800c592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c594:	697b      	ldr	r3, [r7, #20]
	}
 800c596:	4618      	mov	r0, r3
 800c598:	3728      	adds	r7, #40	; 0x28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b08c      	sub	sp, #48	; 0x30
 800c5a2:	af04      	add	r7, sp, #16
 800c5a4:	60f8      	str	r0, [r7, #12]
 800c5a6:	60b9      	str	r1, [r7, #8]
 800c5a8:	603b      	str	r3, [r7, #0]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c5ae:	88fb      	ldrh	r3, [r7, #6]
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f001 fd38 	bl	800e028 <pvPortMalloc>
 800c5b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00e      	beq.n	800c5de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5c0:	206c      	movs	r0, #108	; 0x6c
 800c5c2:	f001 fd31 	bl	800e028 <pvPortMalloc>
 800c5c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	697a      	ldr	r2, [r7, #20]
 800c5d2:	631a      	str	r2, [r3, #48]	; 0x30
 800c5d4:	e005      	b.n	800c5e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5d6:	6978      	ldr	r0, [r7, #20]
 800c5d8:	f001 fdf2 	bl	800e1c0 <vPortFree>
 800c5dc:	e001      	b.n	800c5e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d017      	beq.n	800c618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5f0:	88fa      	ldrh	r2, [r7, #6]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9303      	str	r3, [sp, #12]
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	9302      	str	r3, [sp, #8]
 800c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	68b9      	ldr	r1, [r7, #8]
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f000 f80e 	bl	800c628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c60c:	69f8      	ldr	r0, [r7, #28]
 800c60e:	f000 f89b 	bl	800c748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c612:	2301      	movs	r3, #1
 800c614:	61bb      	str	r3, [r7, #24]
 800c616:	e002      	b.n	800c61e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c618:	f04f 33ff 	mov.w	r3, #4294967295
 800c61c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c61e:	69bb      	ldr	r3, [r7, #24]
	}
 800c620:	4618      	mov	r0, r3
 800c622:	3720      	adds	r7, #32
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b088      	sub	sp, #32
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
 800c634:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	461a      	mov	r2, r3
 800c640:	21a5      	movs	r1, #165	; 0xa5
 800c642:	f002 fc0d 	bl	800ee60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c650:	3b01      	subs	r3, #1
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	f023 0307 	bic.w	r3, r3, #7
 800c65e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	f003 0307 	and.w	r3, r3, #7
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00a      	beq.n	800c680 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	617b      	str	r3, [r7, #20]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d01f      	beq.n	800c6c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c686:	2300      	movs	r3, #0
 800c688:	61fb      	str	r3, [r7, #28]
 800c68a:	e012      	b.n	800c6b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	4413      	add	r3, r2
 800c692:	7819      	ldrb	r1, [r3, #0]
 800c694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	4413      	add	r3, r2
 800c69a:	3334      	adds	r3, #52	; 0x34
 800c69c:	460a      	mov	r2, r1
 800c69e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d006      	beq.n	800c6ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	61fb      	str	r3, [r7, #28]
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	2b1d      	cmp	r3, #29
 800c6b6:	d9e9      	bls.n	800c68c <prvInitialiseNewTask+0x64>
 800c6b8:	e000      	b.n	800c6bc <prvInitialiseNewTask+0x94>
			{
				break;
 800c6ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800c6c4:	e003      	b.n	800c6ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	2b37      	cmp	r3, #55	; 0x37
 800c6d2:	d901      	bls.n	800c6d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6d4:	2337      	movs	r3, #55	; 0x37
 800c6d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6e2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff f93e 	bl	800b970 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	3318      	adds	r3, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff f939 	bl	800b970 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	2200      	movs	r2, #0
 800c718:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	2200      	movs	r2, #0
 800c71e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	68f9      	ldr	r1, [r7, #12]
 800c726:	69b8      	ldr	r0, [r7, #24]
 800c728:	f001 fa2e 	bl	800db88 <pxPortInitialiseStack>
 800c72c:	4602      	mov	r2, r0
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c73c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c73e:	bf00      	nop
 800c740:	3720      	adds	r7, #32
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
	...

0800c748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c750:	f001 fb48 	bl	800dde4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c754:	4b2d      	ldr	r3, [pc, #180]	; (800c80c <prvAddNewTaskToReadyList+0xc4>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3301      	adds	r3, #1
 800c75a:	4a2c      	ldr	r2, [pc, #176]	; (800c80c <prvAddNewTaskToReadyList+0xc4>)
 800c75c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c75e:	4b2c      	ldr	r3, [pc, #176]	; (800c810 <prvAddNewTaskToReadyList+0xc8>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d109      	bne.n	800c77a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c766:	4a2a      	ldr	r2, [pc, #168]	; (800c810 <prvAddNewTaskToReadyList+0xc8>)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c76c:	4b27      	ldr	r3, [pc, #156]	; (800c80c <prvAddNewTaskToReadyList+0xc4>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d110      	bne.n	800c796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c774:	f000 fd1c 	bl	800d1b0 <prvInitialiseTaskLists>
 800c778:	e00d      	b.n	800c796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c77a:	4b26      	ldr	r3, [pc, #152]	; (800c814 <prvAddNewTaskToReadyList+0xcc>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d109      	bne.n	800c796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c782:	4b23      	ldr	r3, [pc, #140]	; (800c810 <prvAddNewTaskToReadyList+0xc8>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d802      	bhi.n	800c796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c790:	4a1f      	ldr	r2, [pc, #124]	; (800c810 <prvAddNewTaskToReadyList+0xc8>)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c796:	4b20      	ldr	r3, [pc, #128]	; (800c818 <prvAddNewTaskToReadyList+0xd0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3301      	adds	r3, #1
 800c79c:	4a1e      	ldr	r2, [pc, #120]	; (800c818 <prvAddNewTaskToReadyList+0xd0>)
 800c79e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c7a0:	4b1d      	ldr	r3, [pc, #116]	; (800c818 <prvAddNewTaskToReadyList+0xd0>)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ac:	4b1b      	ldr	r3, [pc, #108]	; (800c81c <prvAddNewTaskToReadyList+0xd4>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d903      	bls.n	800c7bc <prvAddNewTaskToReadyList+0x74>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	4a18      	ldr	r2, [pc, #96]	; (800c81c <prvAddNewTaskToReadyList+0xd4>)
 800c7ba:	6013      	str	r3, [r2, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4a15      	ldr	r2, [pc, #84]	; (800c820 <prvAddNewTaskToReadyList+0xd8>)
 800c7ca:	441a      	add	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	4610      	mov	r0, r2
 800c7d4:	f7ff f8d9 	bl	800b98a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7d8:	f001 fb34 	bl	800de44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7dc:	4b0d      	ldr	r3, [pc, #52]	; (800c814 <prvAddNewTaskToReadyList+0xcc>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00e      	beq.n	800c802 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7e4:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <prvAddNewTaskToReadyList+0xc8>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d207      	bcs.n	800c802 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7f2:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <prvAddNewTaskToReadyList+0xdc>)
 800c7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c802:	bf00      	nop
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	20001a90 	.word	0x20001a90
 800c810:	200015bc 	.word	0x200015bc
 800c814:	20001a9c 	.word	0x20001a9c
 800c818:	20001aac 	.word	0x20001aac
 800c81c:	20001a98 	.word	0x20001a98
 800c820:	200015c0 	.word	0x200015c0
 800c824:	e000ed04 	.word	0xe000ed04

0800c828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c830:	2300      	movs	r3, #0
 800c832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d017      	beq.n	800c86a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c83a:	4b13      	ldr	r3, [pc, #76]	; (800c888 <vTaskDelay+0x60>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <vTaskDelay+0x30>
	__asm volatile
 800c842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	60bb      	str	r3, [r7, #8]
}
 800c854:	bf00      	nop
 800c856:	e7fe      	b.n	800c856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c858:	f000 f986 	bl	800cb68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c85c:	2100      	movs	r1, #0
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fdf0 	bl	800d444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c864:	f000 f98e 	bl	800cb84 <xTaskResumeAll>
 800c868:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d107      	bne.n	800c880 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c870:	4b06      	ldr	r3, [pc, #24]	; (800c88c <vTaskDelay+0x64>)
 800c872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c876:	601a      	str	r2, [r3, #0]
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c880:	bf00      	nop
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	20001ab8 	.word	0x20001ab8
 800c88c:	e000ed04 	.word	0xe000ed04

0800c890 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c898:	f001 faa4 	bl	800dde4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <vTaskSuspend+0x18>
 800c8a2:	4b30      	ldr	r3, [pc, #192]	; (800c964 <vTaskSuspend+0xd4>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	e000      	b.n	800c8aa <vTaskSuspend+0x1a>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3304      	adds	r3, #4
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff f8c7 	bl	800ba44 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d004      	beq.n	800c8c8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3318      	adds	r3, #24
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff f8be 	bl	800ba44 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	4826      	ldr	r0, [pc, #152]	; (800c968 <vTaskSuspend+0xd8>)
 800c8d0:	f7ff f85b 	bl	800b98a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d103      	bne.n	800c8e8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c8e8:	f001 faac 	bl	800de44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c8ec:	4b1f      	ldr	r3, [pc, #124]	; (800c96c <vTaskSuspend+0xdc>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d005      	beq.n	800c900 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c8f4:	f001 fa76 	bl	800dde4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c8f8:	f000 fcf8 	bl	800d2ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c8fc:	f001 faa2 	bl	800de44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c900:	4b18      	ldr	r3, [pc, #96]	; (800c964 <vTaskSuspend+0xd4>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	429a      	cmp	r2, r3
 800c908:	d127      	bne.n	800c95a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c90a:	4b18      	ldr	r3, [pc, #96]	; (800c96c <vTaskSuspend+0xdc>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d017      	beq.n	800c942 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c912:	4b17      	ldr	r3, [pc, #92]	; (800c970 <vTaskSuspend+0xe0>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <vTaskSuspend+0xa0>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	60bb      	str	r3, [r7, #8]
}
 800c92c:	bf00      	nop
 800c92e:	e7fe      	b.n	800c92e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c930:	4b10      	ldr	r3, [pc, #64]	; (800c974 <vTaskSuspend+0xe4>)
 800c932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c940:	e00b      	b.n	800c95a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c942:	4b09      	ldr	r3, [pc, #36]	; (800c968 <vTaskSuspend+0xd8>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <vTaskSuspend+0xe8>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d103      	bne.n	800c956 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c94e:	4b05      	ldr	r3, [pc, #20]	; (800c964 <vTaskSuspend+0xd4>)
 800c950:	2200      	movs	r2, #0
 800c952:	601a      	str	r2, [r3, #0]
	}
 800c954:	e001      	b.n	800c95a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c956:	f000 fa7d 	bl	800ce54 <vTaskSwitchContext>
	}
 800c95a:	bf00      	nop
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	200015bc 	.word	0x200015bc
 800c968:	20001a7c 	.word	0x20001a7c
 800c96c:	20001a9c 	.word	0x20001a9c
 800c970:	20001ab8 	.word	0x20001ab8
 800c974:	e000ed04 	.word	0xe000ed04
 800c978:	20001a90 	.word	0x20001a90

0800c97c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c97c:	b480      	push	{r7}
 800c97e:	b087      	sub	sp, #28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c984:	2300      	movs	r3, #0
 800c986:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10a      	bne.n	800c9a8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	60fb      	str	r3, [r7, #12]
}
 800c9a4:	bf00      	nop
 800c9a6:	e7fe      	b.n	800c9a6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	695b      	ldr	r3, [r3, #20]
 800c9ac:	4a0a      	ldr	r2, [pc, #40]	; (800c9d8 <prvTaskIsTaskSuspended+0x5c>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d10a      	bne.n	800c9c8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b6:	4a09      	ldr	r2, [pc, #36]	; (800c9dc <prvTaskIsTaskSuspended+0x60>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d005      	beq.n	800c9c8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d101      	bne.n	800c9c8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9c8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	371c      	adds	r7, #28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	20001a7c 	.word	0x20001a7c
 800c9dc:	20001a50 	.word	0x20001a50

0800c9e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d10a      	bne.n	800ca08 <vTaskResume+0x28>
	__asm volatile
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	60bb      	str	r3, [r7, #8]
}
 800ca04:	bf00      	nop
 800ca06:	e7fe      	b.n	800ca06 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ca08:	4b20      	ldr	r3, [pc, #128]	; (800ca8c <vTaskResume+0xac>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d038      	beq.n	800ca84 <vTaskResume+0xa4>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d035      	beq.n	800ca84 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800ca18:	f001 f9e4 	bl	800dde4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f7ff ffad 	bl	800c97c <prvTaskIsTaskSuspended>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d02b      	beq.n	800ca80 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3304      	adds	r3, #4
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff f809 	bl	800ba44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca36:	4b16      	ldr	r3, [pc, #88]	; (800ca90 <vTaskResume+0xb0>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d903      	bls.n	800ca46 <vTaskResume+0x66>
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca42:	4a13      	ldr	r2, [pc, #76]	; (800ca90 <vTaskResume+0xb0>)
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4a10      	ldr	r2, [pc, #64]	; (800ca94 <vTaskResume+0xb4>)
 800ca54:	441a      	add	r2, r3
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	f7fe ff94 	bl	800b98a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca66:	4b09      	ldr	r3, [pc, #36]	; (800ca8c <vTaskResume+0xac>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d307      	bcc.n	800ca80 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ca70:	4b09      	ldr	r3, [pc, #36]	; (800ca98 <vTaskResume+0xb8>)
 800ca72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ca80:	f001 f9e0 	bl	800de44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca84:	bf00      	nop
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	200015bc 	.word	0x200015bc
 800ca90:	20001a98 	.word	0x20001a98
 800ca94:	200015c0 	.word	0x200015c0
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08a      	sub	sp, #40	; 0x28
 800caa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800caa6:	2300      	movs	r3, #0
 800caa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800caaa:	463a      	mov	r2, r7
 800caac:	1d39      	adds	r1, r7, #4
 800caae:	f107 0308 	add.w	r3, r7, #8
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe ff08 	bl	800b8c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	9202      	str	r2, [sp, #8]
 800cac0:	9301      	str	r3, [sp, #4]
 800cac2:	2300      	movs	r3, #0
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	2300      	movs	r3, #0
 800cac8:	460a      	mov	r2, r1
 800caca:	4921      	ldr	r1, [pc, #132]	; (800cb50 <vTaskStartScheduler+0xb4>)
 800cacc:	4821      	ldr	r0, [pc, #132]	; (800cb54 <vTaskStartScheduler+0xb8>)
 800cace:	f7ff fd09 	bl	800c4e4 <xTaskCreateStatic>
 800cad2:	4603      	mov	r3, r0
 800cad4:	4a20      	ldr	r2, [pc, #128]	; (800cb58 <vTaskStartScheduler+0xbc>)
 800cad6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cad8:	4b1f      	ldr	r3, [pc, #124]	; (800cb58 <vTaskStartScheduler+0xbc>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cae0:	2301      	movs	r3, #1
 800cae2:	617b      	str	r3, [r7, #20]
 800cae4:	e001      	b.n	800caea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d102      	bne.n	800caf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800caf0:	f000 fcfc 	bl	800d4ec <xTimerCreateTimerTask>
 800caf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d116      	bne.n	800cb2a <vTaskStartScheduler+0x8e>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	613b      	str	r3, [r7, #16]
}
 800cb0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb10:	4b12      	ldr	r3, [pc, #72]	; (800cb5c <vTaskStartScheduler+0xc0>)
 800cb12:	f04f 32ff 	mov.w	r2, #4294967295
 800cb16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb18:	4b11      	ldr	r3, [pc, #68]	; (800cb60 <vTaskStartScheduler+0xc4>)
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb1e:	4b11      	ldr	r3, [pc, #68]	; (800cb64 <vTaskStartScheduler+0xc8>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb24:	f001 f8bc 	bl	800dca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb28:	e00e      	b.n	800cb48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb30:	d10a      	bne.n	800cb48 <vTaskStartScheduler+0xac>
	__asm volatile
 800cb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	60fb      	str	r3, [r7, #12]
}
 800cb44:	bf00      	nop
 800cb46:	e7fe      	b.n	800cb46 <vTaskStartScheduler+0xaa>
}
 800cb48:	bf00      	nop
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	0800f97c 	.word	0x0800f97c
 800cb54:	0800d181 	.word	0x0800d181
 800cb58:	20001ab4 	.word	0x20001ab4
 800cb5c:	20001ab0 	.word	0x20001ab0
 800cb60:	20001a9c 	.word	0x20001a9c
 800cb64:	20001a94 	.word	0x20001a94

0800cb68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cb6c:	4b04      	ldr	r3, [pc, #16]	; (800cb80 <vTaskSuspendAll+0x18>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3301      	adds	r3, #1
 800cb72:	4a03      	ldr	r2, [pc, #12]	; (800cb80 <vTaskSuspendAll+0x18>)
 800cb74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cb76:	bf00      	nop
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	20001ab8 	.word	0x20001ab8

0800cb84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb92:	4b42      	ldr	r3, [pc, #264]	; (800cc9c <xTaskResumeAll+0x118>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10a      	bne.n	800cbb0 <xTaskResumeAll+0x2c>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	603b      	str	r3, [r7, #0]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cbb0:	f001 f918 	bl	800dde4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cbb4:	4b39      	ldr	r3, [pc, #228]	; (800cc9c <xTaskResumeAll+0x118>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	4a38      	ldr	r2, [pc, #224]	; (800cc9c <xTaskResumeAll+0x118>)
 800cbbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbbe:	4b37      	ldr	r3, [pc, #220]	; (800cc9c <xTaskResumeAll+0x118>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d162      	bne.n	800cc8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cbc6:	4b36      	ldr	r3, [pc, #216]	; (800cca0 <xTaskResumeAll+0x11c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d05e      	beq.n	800cc8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbce:	e02f      	b.n	800cc30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbd0:	4b34      	ldr	r3, [pc, #208]	; (800cca4 <xTaskResumeAll+0x120>)
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3318      	adds	r3, #24
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fe ff31 	bl	800ba44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fe ff2c 	bl	800ba44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf0:	4b2d      	ldr	r3, [pc, #180]	; (800cca8 <xTaskResumeAll+0x124>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d903      	bls.n	800cc00 <xTaskResumeAll+0x7c>
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfc:	4a2a      	ldr	r2, [pc, #168]	; (800cca8 <xTaskResumeAll+0x124>)
 800cbfe:	6013      	str	r3, [r2, #0]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc04:	4613      	mov	r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	4413      	add	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4a27      	ldr	r2, [pc, #156]	; (800ccac <xTaskResumeAll+0x128>)
 800cc0e:	441a      	add	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	3304      	adds	r3, #4
 800cc14:	4619      	mov	r1, r3
 800cc16:	4610      	mov	r0, r2
 800cc18:	f7fe feb7 	bl	800b98a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc20:	4b23      	ldr	r3, [pc, #140]	; (800ccb0 <xTaskResumeAll+0x12c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d302      	bcc.n	800cc30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cc2a:	4b22      	ldr	r3, [pc, #136]	; (800ccb4 <xTaskResumeAll+0x130>)
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc30:	4b1c      	ldr	r3, [pc, #112]	; (800cca4 <xTaskResumeAll+0x120>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1cb      	bne.n	800cbd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc3e:	f000 fb55 	bl	800d2ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cc42:	4b1d      	ldr	r3, [pc, #116]	; (800ccb8 <xTaskResumeAll+0x134>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d010      	beq.n	800cc70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc4e:	f000 f847 	bl	800cce0 <xTaskIncrementTick>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cc58:	4b16      	ldr	r3, [pc, #88]	; (800ccb4 <xTaskResumeAll+0x130>)
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1f1      	bne.n	800cc4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cc6a:	4b13      	ldr	r3, [pc, #76]	; (800ccb8 <xTaskResumeAll+0x134>)
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc70:	4b10      	ldr	r3, [pc, #64]	; (800ccb4 <xTaskResumeAll+0x130>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d009      	beq.n	800cc8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc7c:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <xTaskResumeAll+0x138>)
 800cc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc8c:	f001 f8da 	bl	800de44 <vPortExitCritical>

	return xAlreadyYielded;
 800cc90:	68bb      	ldr	r3, [r7, #8]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20001ab8 	.word	0x20001ab8
 800cca0:	20001a90 	.word	0x20001a90
 800cca4:	20001a50 	.word	0x20001a50
 800cca8:	20001a98 	.word	0x20001a98
 800ccac:	200015c0 	.word	0x200015c0
 800ccb0:	200015bc 	.word	0x200015bc
 800ccb4:	20001aa4 	.word	0x20001aa4
 800ccb8:	20001aa0 	.word	0x20001aa0
 800ccbc:	e000ed04 	.word	0xe000ed04

0800ccc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ccc6:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <xTaskGetTickCount+0x1c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cccc:	687b      	ldr	r3, [r7, #4]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	20001a94 	.word	0x20001a94

0800cce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cce6:	2300      	movs	r3, #0
 800cce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccea:	4b4f      	ldr	r3, [pc, #316]	; (800ce28 <xTaskIncrementTick+0x148>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f040 808f 	bne.w	800ce12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ccf4:	4b4d      	ldr	r3, [pc, #308]	; (800ce2c <xTaskIncrementTick+0x14c>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ccfc:	4a4b      	ldr	r2, [pc, #300]	; (800ce2c <xTaskIncrementTick+0x14c>)
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d120      	bne.n	800cd4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd08:	4b49      	ldr	r3, [pc, #292]	; (800ce30 <xTaskIncrementTick+0x150>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00a      	beq.n	800cd28 <xTaskIncrementTick+0x48>
	__asm volatile
 800cd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	603b      	str	r3, [r7, #0]
}
 800cd24:	bf00      	nop
 800cd26:	e7fe      	b.n	800cd26 <xTaskIncrementTick+0x46>
 800cd28:	4b41      	ldr	r3, [pc, #260]	; (800ce30 <xTaskIncrementTick+0x150>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	4b41      	ldr	r3, [pc, #260]	; (800ce34 <xTaskIncrementTick+0x154>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a3f      	ldr	r2, [pc, #252]	; (800ce30 <xTaskIncrementTick+0x150>)
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	4a3f      	ldr	r2, [pc, #252]	; (800ce34 <xTaskIncrementTick+0x154>)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6013      	str	r3, [r2, #0]
 800cd3c:	4b3e      	ldr	r3, [pc, #248]	; (800ce38 <xTaskIncrementTick+0x158>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3301      	adds	r3, #1
 800cd42:	4a3d      	ldr	r2, [pc, #244]	; (800ce38 <xTaskIncrementTick+0x158>)
 800cd44:	6013      	str	r3, [r2, #0]
 800cd46:	f000 fad1 	bl	800d2ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd4a:	4b3c      	ldr	r3, [pc, #240]	; (800ce3c <xTaskIncrementTick+0x15c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d349      	bcc.n	800cde8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd54:	4b36      	ldr	r3, [pc, #216]	; (800ce30 <xTaskIncrementTick+0x150>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d104      	bne.n	800cd68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd5e:	4b37      	ldr	r3, [pc, #220]	; (800ce3c <xTaskIncrementTick+0x15c>)
 800cd60:	f04f 32ff 	mov.w	r2, #4294967295
 800cd64:	601a      	str	r2, [r3, #0]
					break;
 800cd66:	e03f      	b.n	800cde8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd68:	4b31      	ldr	r3, [pc, #196]	; (800ce30 <xTaskIncrementTick+0x150>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d203      	bcs.n	800cd88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd80:	4a2e      	ldr	r2, [pc, #184]	; (800ce3c <xTaskIncrementTick+0x15c>)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd86:	e02f      	b.n	800cde8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fe fe59 	bl	800ba44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d004      	beq.n	800cda4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	3318      	adds	r3, #24
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fe fe50 	bl	800ba44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda8:	4b25      	ldr	r3, [pc, #148]	; (800ce40 <xTaskIncrementTick+0x160>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d903      	bls.n	800cdb8 <xTaskIncrementTick+0xd8>
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb4:	4a22      	ldr	r2, [pc, #136]	; (800ce40 <xTaskIncrementTick+0x160>)
 800cdb6:	6013      	str	r3, [r2, #0]
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	4413      	add	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4a1f      	ldr	r2, [pc, #124]	; (800ce44 <xTaskIncrementTick+0x164>)
 800cdc6:	441a      	add	r2, r3
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	3304      	adds	r3, #4
 800cdcc:	4619      	mov	r1, r3
 800cdce:	4610      	mov	r0, r2
 800cdd0:	f7fe fddb 	bl	800b98a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd8:	4b1b      	ldr	r3, [pc, #108]	; (800ce48 <xTaskIncrementTick+0x168>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d3b8      	bcc.n	800cd54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cde2:	2301      	movs	r3, #1
 800cde4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cde6:	e7b5      	b.n	800cd54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cde8:	4b17      	ldr	r3, [pc, #92]	; (800ce48 <xTaskIncrementTick+0x168>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdee:	4915      	ldr	r1, [pc, #84]	; (800ce44 <xTaskIncrementTick+0x164>)
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d901      	bls.n	800ce04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ce00:	2301      	movs	r3, #1
 800ce02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce04:	4b11      	ldr	r3, [pc, #68]	; (800ce4c <xTaskIncrementTick+0x16c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d007      	beq.n	800ce1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	617b      	str	r3, [r7, #20]
 800ce10:	e004      	b.n	800ce1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce12:	4b0f      	ldr	r3, [pc, #60]	; (800ce50 <xTaskIncrementTick+0x170>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	3301      	adds	r3, #1
 800ce18:	4a0d      	ldr	r2, [pc, #52]	; (800ce50 <xTaskIncrementTick+0x170>)
 800ce1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce1c:	697b      	ldr	r3, [r7, #20]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	20001ab8 	.word	0x20001ab8
 800ce2c:	20001a94 	.word	0x20001a94
 800ce30:	20001a48 	.word	0x20001a48
 800ce34:	20001a4c 	.word	0x20001a4c
 800ce38:	20001aa8 	.word	0x20001aa8
 800ce3c:	20001ab0 	.word	0x20001ab0
 800ce40:	20001a98 	.word	0x20001a98
 800ce44:	200015c0 	.word	0x200015c0
 800ce48:	200015bc 	.word	0x200015bc
 800ce4c:	20001aa4 	.word	0x20001aa4
 800ce50:	20001aa0 	.word	0x20001aa0

0800ce54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce5a:	4b28      	ldr	r3, [pc, #160]	; (800cefc <vTaskSwitchContext+0xa8>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d003      	beq.n	800ce6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce62:	4b27      	ldr	r3, [pc, #156]	; (800cf00 <vTaskSwitchContext+0xac>)
 800ce64:	2201      	movs	r2, #1
 800ce66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce68:	e041      	b.n	800ceee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ce6a:	4b25      	ldr	r3, [pc, #148]	; (800cf00 <vTaskSwitchContext+0xac>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce70:	4b24      	ldr	r3, [pc, #144]	; (800cf04 <vTaskSwitchContext+0xb0>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	60fb      	str	r3, [r7, #12]
 800ce76:	e010      	b.n	800ce9a <vTaskSwitchContext+0x46>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d10a      	bne.n	800ce94 <vTaskSwitchContext+0x40>
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	607b      	str	r3, [r7, #4]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <vTaskSwitchContext+0x3e>
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	60fb      	str	r3, [r7, #12]
 800ce9a:	491b      	ldr	r1, [pc, #108]	; (800cf08 <vTaskSwitchContext+0xb4>)
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	440b      	add	r3, r1
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d0e4      	beq.n	800ce78 <vTaskSwitchContext+0x24>
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4413      	add	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4a13      	ldr	r2, [pc, #76]	; (800cf08 <vTaskSwitchContext+0xb4>)
 800ceba:	4413      	add	r3, r2
 800cebc:	60bb      	str	r3, [r7, #8]
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	605a      	str	r2, [r3, #4]
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	3308      	adds	r3, #8
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d104      	bne.n	800cede <vTaskSwitchContext+0x8a>
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	685a      	ldr	r2, [r3, #4]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	605a      	str	r2, [r3, #4]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	4a09      	ldr	r2, [pc, #36]	; (800cf0c <vTaskSwitchContext+0xb8>)
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	4a06      	ldr	r2, [pc, #24]	; (800cf04 <vTaskSwitchContext+0xb0>)
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6013      	str	r3, [r2, #0]
}
 800ceee:	bf00      	nop
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	20001ab8 	.word	0x20001ab8
 800cf00:	20001aa4 	.word	0x20001aa4
 800cf04:	20001a98 	.word	0x20001a98
 800cf08:	200015c0 	.word	0x200015c0
 800cf0c:	200015bc 	.word	0x200015bc

0800cf10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	60fb      	str	r3, [r7, #12]
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf36:	4b07      	ldr	r3, [pc, #28]	; (800cf54 <vTaskPlaceOnEventList+0x44>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	3318      	adds	r3, #24
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7fe fd47 	bl	800b9d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf44:	2101      	movs	r1, #1
 800cf46:	6838      	ldr	r0, [r7, #0]
 800cf48:	f000 fa7c 	bl	800d444 <prvAddCurrentTaskToDelayedList>
}
 800cf4c:	bf00      	nop
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	200015bc 	.word	0x200015bc

0800cf58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10a      	bne.n	800cf80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	617b      	str	r3, [r7, #20]
}
 800cf7c:	bf00      	nop
 800cf7e:	e7fe      	b.n	800cf7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <vTaskPlaceOnEventListRestricted+0x54>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3318      	adds	r3, #24
 800cf86:	4619      	mov	r1, r3
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f7fe fcfe 	bl	800b98a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cf94:	f04f 33ff 	mov.w	r3, #4294967295
 800cf98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf9a:	6879      	ldr	r1, [r7, #4]
 800cf9c:	68b8      	ldr	r0, [r7, #8]
 800cf9e:	f000 fa51 	bl	800d444 <prvAddCurrentTaskToDelayedList>
	}
 800cfa2:	bf00      	nop
 800cfa4:	3718      	adds	r7, #24
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	200015bc 	.word	0x200015bc

0800cfb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10a      	bne.n	800cfdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	60fb      	str	r3, [r7, #12]
}
 800cfd8:	bf00      	nop
 800cfda:	e7fe      	b.n	800cfda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	3318      	adds	r3, #24
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fe fd2f 	bl	800ba44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfe6:	4b1e      	ldr	r3, [pc, #120]	; (800d060 <xTaskRemoveFromEventList+0xb0>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d11d      	bne.n	800d02a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	3304      	adds	r3, #4
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fd26 	bl	800ba44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cffc:	4b19      	ldr	r3, [pc, #100]	; (800d064 <xTaskRemoveFromEventList+0xb4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	429a      	cmp	r2, r3
 800d002:	d903      	bls.n	800d00c <xTaskRemoveFromEventList+0x5c>
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	4a16      	ldr	r2, [pc, #88]	; (800d064 <xTaskRemoveFromEventList+0xb4>)
 800d00a:	6013      	str	r3, [r2, #0]
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d010:	4613      	mov	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4a13      	ldr	r2, [pc, #76]	; (800d068 <xTaskRemoveFromEventList+0xb8>)
 800d01a:	441a      	add	r2, r3
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	3304      	adds	r3, #4
 800d020:	4619      	mov	r1, r3
 800d022:	4610      	mov	r0, r2
 800d024:	f7fe fcb1 	bl	800b98a <vListInsertEnd>
 800d028:	e005      	b.n	800d036 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	3318      	adds	r3, #24
 800d02e:	4619      	mov	r1, r3
 800d030:	480e      	ldr	r0, [pc, #56]	; (800d06c <xTaskRemoveFromEventList+0xbc>)
 800d032:	f7fe fcaa 	bl	800b98a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03a:	4b0d      	ldr	r3, [pc, #52]	; (800d070 <xTaskRemoveFromEventList+0xc0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d040:	429a      	cmp	r2, r3
 800d042:	d905      	bls.n	800d050 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d044:	2301      	movs	r3, #1
 800d046:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d048:	4b0a      	ldr	r3, [pc, #40]	; (800d074 <xTaskRemoveFromEventList+0xc4>)
 800d04a:	2201      	movs	r2, #1
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	e001      	b.n	800d054 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d050:	2300      	movs	r3, #0
 800d052:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d054:	697b      	ldr	r3, [r7, #20]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3718      	adds	r7, #24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	20001ab8 	.word	0x20001ab8
 800d064:	20001a98 	.word	0x20001a98
 800d068:	200015c0 	.word	0x200015c0
 800d06c:	20001a50 	.word	0x20001a50
 800d070:	200015bc 	.word	0x200015bc
 800d074:	20001aa4 	.word	0x20001aa4

0800d078 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d080:	4b06      	ldr	r3, [pc, #24]	; (800d09c <vTaskInternalSetTimeOutState+0x24>)
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d088:	4b05      	ldr	r3, [pc, #20]	; (800d0a0 <vTaskInternalSetTimeOutState+0x28>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	605a      	str	r2, [r3, #4]
}
 800d090:	bf00      	nop
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	20001aa8 	.word	0x20001aa8
 800d0a0:	20001a94 	.word	0x20001a94

0800d0a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b088      	sub	sp, #32
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	613b      	str	r3, [r7, #16]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d10a      	bne.n	800d0e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	60fb      	str	r3, [r7, #12]
}
 800d0e2:	bf00      	nop
 800d0e4:	e7fe      	b.n	800d0e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d0e6:	f000 fe7d 	bl	800dde4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0ea:	4b1d      	ldr	r3, [pc, #116]	; (800d160 <xTaskCheckForTimeOut+0xbc>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	69ba      	ldr	r2, [r7, #24]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d102:	d102      	bne.n	800d10a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d104:	2300      	movs	r3, #0
 800d106:	61fb      	str	r3, [r7, #28]
 800d108:	e023      	b.n	800d152 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	4b15      	ldr	r3, [pc, #84]	; (800d164 <xTaskCheckForTimeOut+0xc0>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d007      	beq.n	800d126 <xTaskCheckForTimeOut+0x82>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	69ba      	ldr	r2, [r7, #24]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d302      	bcc.n	800d126 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d120:	2301      	movs	r3, #1
 800d122:	61fb      	str	r3, [r7, #28]
 800d124:	e015      	b.n	800d152 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	697a      	ldr	r2, [r7, #20]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d20b      	bcs.n	800d148 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	1ad2      	subs	r2, r2, r3
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7ff ff9b 	bl	800d078 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d142:	2300      	movs	r3, #0
 800d144:	61fb      	str	r3, [r7, #28]
 800d146:	e004      	b.n	800d152 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d14e:	2301      	movs	r3, #1
 800d150:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d152:	f000 fe77 	bl	800de44 <vPortExitCritical>

	return xReturn;
 800d156:	69fb      	ldr	r3, [r7, #28]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3720      	adds	r7, #32
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	20001a94 	.word	0x20001a94
 800d164:	20001aa8 	.word	0x20001aa8

0800d168 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d168:	b480      	push	{r7}
 800d16a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d16c:	4b03      	ldr	r3, [pc, #12]	; (800d17c <vTaskMissedYield+0x14>)
 800d16e:	2201      	movs	r2, #1
 800d170:	601a      	str	r2, [r3, #0]
}
 800d172:	bf00      	nop
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	20001aa4 	.word	0x20001aa4

0800d180 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d188:	f000 f852 	bl	800d230 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d18c:	4b06      	ldr	r3, [pc, #24]	; (800d1a8 <prvIdleTask+0x28>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b01      	cmp	r3, #1
 800d192:	d9f9      	bls.n	800d188 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <prvIdleTask+0x2c>)
 800d196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d19a:	601a      	str	r2, [r3, #0]
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d1a4:	e7f0      	b.n	800d188 <prvIdleTask+0x8>
 800d1a6:	bf00      	nop
 800d1a8:	200015c0 	.word	0x200015c0
 800d1ac:	e000ed04 	.word	0xe000ed04

0800d1b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	607b      	str	r3, [r7, #4]
 800d1ba:	e00c      	b.n	800d1d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	4413      	add	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4a12      	ldr	r2, [pc, #72]	; (800d210 <prvInitialiseTaskLists+0x60>)
 800d1c8:	4413      	add	r3, r2
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fbb0 	bl	800b930 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	607b      	str	r3, [r7, #4]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b37      	cmp	r3, #55	; 0x37
 800d1da:	d9ef      	bls.n	800d1bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1dc:	480d      	ldr	r0, [pc, #52]	; (800d214 <prvInitialiseTaskLists+0x64>)
 800d1de:	f7fe fba7 	bl	800b930 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1e2:	480d      	ldr	r0, [pc, #52]	; (800d218 <prvInitialiseTaskLists+0x68>)
 800d1e4:	f7fe fba4 	bl	800b930 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1e8:	480c      	ldr	r0, [pc, #48]	; (800d21c <prvInitialiseTaskLists+0x6c>)
 800d1ea:	f7fe fba1 	bl	800b930 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1ee:	480c      	ldr	r0, [pc, #48]	; (800d220 <prvInitialiseTaskLists+0x70>)
 800d1f0:	f7fe fb9e 	bl	800b930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1f4:	480b      	ldr	r0, [pc, #44]	; (800d224 <prvInitialiseTaskLists+0x74>)
 800d1f6:	f7fe fb9b 	bl	800b930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1fa:	4b0b      	ldr	r3, [pc, #44]	; (800d228 <prvInitialiseTaskLists+0x78>)
 800d1fc:	4a05      	ldr	r2, [pc, #20]	; (800d214 <prvInitialiseTaskLists+0x64>)
 800d1fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d200:	4b0a      	ldr	r3, [pc, #40]	; (800d22c <prvInitialiseTaskLists+0x7c>)
 800d202:	4a05      	ldr	r2, [pc, #20]	; (800d218 <prvInitialiseTaskLists+0x68>)
 800d204:	601a      	str	r2, [r3, #0]
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	200015c0 	.word	0x200015c0
 800d214:	20001a20 	.word	0x20001a20
 800d218:	20001a34 	.word	0x20001a34
 800d21c:	20001a50 	.word	0x20001a50
 800d220:	20001a64 	.word	0x20001a64
 800d224:	20001a7c 	.word	0x20001a7c
 800d228:	20001a48 	.word	0x20001a48
 800d22c:	20001a4c 	.word	0x20001a4c

0800d230 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d236:	e019      	b.n	800d26c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d238:	f000 fdd4 	bl	800dde4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d23c:	4b10      	ldr	r3, [pc, #64]	; (800d280 <prvCheckTasksWaitingTermination+0x50>)
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	3304      	adds	r3, #4
 800d248:	4618      	mov	r0, r3
 800d24a:	f7fe fbfb 	bl	800ba44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d24e:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <prvCheckTasksWaitingTermination+0x54>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3b01      	subs	r3, #1
 800d254:	4a0b      	ldr	r2, [pc, #44]	; (800d284 <prvCheckTasksWaitingTermination+0x54>)
 800d256:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d258:	4b0b      	ldr	r3, [pc, #44]	; (800d288 <prvCheckTasksWaitingTermination+0x58>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	4a0a      	ldr	r2, [pc, #40]	; (800d288 <prvCheckTasksWaitingTermination+0x58>)
 800d260:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d262:	f000 fdef 	bl	800de44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 f810 	bl	800d28c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d26c:	4b06      	ldr	r3, [pc, #24]	; (800d288 <prvCheckTasksWaitingTermination+0x58>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1e1      	bne.n	800d238 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d274:	bf00      	nop
 800d276:	bf00      	nop
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	20001a64 	.word	0x20001a64
 800d284:	20001a90 	.word	0x20001a90
 800d288:	20001a78 	.word	0x20001a78

0800d28c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d108      	bne.n	800d2b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 ff8c 	bl	800e1c0 <vPortFree>
				vPortFree( pxTCB );
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 ff89 	bl	800e1c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2ae:	e018      	b.n	800d2e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d103      	bne.n	800d2c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 ff80 	bl	800e1c0 <vPortFree>
	}
 800d2c0:	e00f      	b.n	800d2e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d00a      	beq.n	800d2e2 <prvDeleteTCB+0x56>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	60fb      	str	r3, [r7, #12]
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <prvDeleteTCB+0x54>
	}
 800d2e2:	bf00      	nop
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
	...

0800d2ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2f2:	4b0c      	ldr	r3, [pc, #48]	; (800d324 <prvResetNextTaskUnblockTime+0x38>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d104      	bne.n	800d306 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2fc:	4b0a      	ldr	r3, [pc, #40]	; (800d328 <prvResetNextTaskUnblockTime+0x3c>)
 800d2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d302:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d304:	e008      	b.n	800d318 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d306:	4b07      	ldr	r3, [pc, #28]	; (800d324 <prvResetNextTaskUnblockTime+0x38>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	4a04      	ldr	r2, [pc, #16]	; (800d328 <prvResetNextTaskUnblockTime+0x3c>)
 800d316:	6013      	str	r3, [r2, #0]
}
 800d318:	bf00      	nop
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	20001a48 	.word	0x20001a48
 800d328:	20001ab0 	.word	0x20001ab0

0800d32c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d332:	4b0b      	ldr	r3, [pc, #44]	; (800d360 <xTaskGetSchedulerState+0x34>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d102      	bne.n	800d340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d33a:	2301      	movs	r3, #1
 800d33c:	607b      	str	r3, [r7, #4]
 800d33e:	e008      	b.n	800d352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d340:	4b08      	ldr	r3, [pc, #32]	; (800d364 <xTaskGetSchedulerState+0x38>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d102      	bne.n	800d34e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d348:	2302      	movs	r3, #2
 800d34a:	607b      	str	r3, [r7, #4]
 800d34c:	e001      	b.n	800d352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d34e:	2300      	movs	r3, #0
 800d350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d352:	687b      	ldr	r3, [r7, #4]
	}
 800d354:	4618      	mov	r0, r3
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr
 800d360:	20001a9c 	.word	0x20001a9c
 800d364:	20001ab8 	.word	0x20001ab8

0800d368 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d374:	2300      	movs	r3, #0
 800d376:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d056      	beq.n	800d42c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d37e:	4b2e      	ldr	r3, [pc, #184]	; (800d438 <xTaskPriorityDisinherit+0xd0>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	693a      	ldr	r2, [r7, #16]
 800d384:	429a      	cmp	r2, r3
 800d386:	d00a      	beq.n	800d39e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	60fb      	str	r3, [r7, #12]
}
 800d39a:	bf00      	nop
 800d39c:	e7fe      	b.n	800d39c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10a      	bne.n	800d3bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	60bb      	str	r3, [r7, #8]
}
 800d3b8:	bf00      	nop
 800d3ba:	e7fe      	b.n	800d3ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3c0:	1e5a      	subs	r2, r3, #1
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d02c      	beq.n	800d42c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d128      	bne.n	800d42c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe fb30 	bl	800ba44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fc:	4b0f      	ldr	r3, [pc, #60]	; (800d43c <xTaskPriorityDisinherit+0xd4>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	429a      	cmp	r2, r3
 800d402:	d903      	bls.n	800d40c <xTaskPriorityDisinherit+0xa4>
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d408:	4a0c      	ldr	r2, [pc, #48]	; (800d43c <xTaskPriorityDisinherit+0xd4>)
 800d40a:	6013      	str	r3, [r2, #0]
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d410:	4613      	mov	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	4413      	add	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4a09      	ldr	r2, [pc, #36]	; (800d440 <xTaskPriorityDisinherit+0xd8>)
 800d41a:	441a      	add	r2, r3
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	3304      	adds	r3, #4
 800d420:	4619      	mov	r1, r3
 800d422:	4610      	mov	r0, r2
 800d424:	f7fe fab1 	bl	800b98a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d428:	2301      	movs	r3, #1
 800d42a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d42c:	697b      	ldr	r3, [r7, #20]
	}
 800d42e:	4618      	mov	r0, r3
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	200015bc 	.word	0x200015bc
 800d43c:	20001a98 	.word	0x20001a98
 800d440:	200015c0 	.word	0x200015c0

0800d444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d44e:	4b21      	ldr	r3, [pc, #132]	; (800d4d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d454:	4b20      	ldr	r3, [pc, #128]	; (800d4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3304      	adds	r3, #4
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe faf2 	bl	800ba44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d466:	d10a      	bne.n	800d47e <prvAddCurrentTaskToDelayedList+0x3a>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d46e:	4b1a      	ldr	r3, [pc, #104]	; (800d4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3304      	adds	r3, #4
 800d474:	4619      	mov	r1, r3
 800d476:	4819      	ldr	r0, [pc, #100]	; (800d4dc <prvAddCurrentTaskToDelayedList+0x98>)
 800d478:	f7fe fa87 	bl	800b98a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d47c:	e026      	b.n	800d4cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4413      	add	r3, r2
 800d484:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d486:	4b14      	ldr	r3, [pc, #80]	; (800d4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d48e:	68ba      	ldr	r2, [r7, #8]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	429a      	cmp	r2, r3
 800d494:	d209      	bcs.n	800d4aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d496:	4b12      	ldr	r3, [pc, #72]	; (800d4e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	4b0f      	ldr	r3, [pc, #60]	; (800d4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4610      	mov	r0, r2
 800d4a4:	f7fe fa95 	bl	800b9d2 <vListInsert>
}
 800d4a8:	e010      	b.n	800d4cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4aa:	4b0e      	ldr	r3, [pc, #56]	; (800d4e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	4b0a      	ldr	r3, [pc, #40]	; (800d4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	3304      	adds	r3, #4
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	4610      	mov	r0, r2
 800d4b8:	f7fe fa8b 	bl	800b9d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d202      	bcs.n	800d4cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d4c6:	4a08      	ldr	r2, [pc, #32]	; (800d4e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	6013      	str	r3, [r2, #0]
}
 800d4cc:	bf00      	nop
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	20001a94 	.word	0x20001a94
 800d4d8:	200015bc 	.word	0x200015bc
 800d4dc:	20001a7c 	.word	0x20001a7c
 800d4e0:	20001a4c 	.word	0x20001a4c
 800d4e4:	20001a48 	.word	0x20001a48
 800d4e8:	20001ab0 	.word	0x20001ab0

0800d4ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08a      	sub	sp, #40	; 0x28
 800d4f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d4f6:	f000 fb07 	bl	800db08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d4fa:	4b1c      	ldr	r3, [pc, #112]	; (800d56c <xTimerCreateTimerTask+0x80>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d021      	beq.n	800d546 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d502:	2300      	movs	r3, #0
 800d504:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d506:	2300      	movs	r3, #0
 800d508:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d50a:	1d3a      	adds	r2, r7, #4
 800d50c:	f107 0108 	add.w	r1, r7, #8
 800d510:	f107 030c 	add.w	r3, r7, #12
 800d514:	4618      	mov	r0, r3
 800d516:	f7fe f9f1 	bl	800b8fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d51a:	6879      	ldr	r1, [r7, #4]
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	9202      	str	r2, [sp, #8]
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	2302      	movs	r3, #2
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	2300      	movs	r3, #0
 800d52a:	460a      	mov	r2, r1
 800d52c:	4910      	ldr	r1, [pc, #64]	; (800d570 <xTimerCreateTimerTask+0x84>)
 800d52e:	4811      	ldr	r0, [pc, #68]	; (800d574 <xTimerCreateTimerTask+0x88>)
 800d530:	f7fe ffd8 	bl	800c4e4 <xTaskCreateStatic>
 800d534:	4603      	mov	r3, r0
 800d536:	4a10      	ldr	r2, [pc, #64]	; (800d578 <xTimerCreateTimerTask+0x8c>)
 800d538:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d53a:	4b0f      	ldr	r3, [pc, #60]	; (800d578 <xTimerCreateTimerTask+0x8c>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d542:	2301      	movs	r3, #1
 800d544:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	613b      	str	r3, [r7, #16]
}
 800d55e:	bf00      	nop
 800d560:	e7fe      	b.n	800d560 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d562:	697b      	ldr	r3, [r7, #20]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20001aec 	.word	0x20001aec
 800d570:	0800f984 	.word	0x0800f984
 800d574:	0800d6b1 	.word	0x0800d6b1
 800d578:	20001af0 	.word	0x20001af0

0800d57c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b08a      	sub	sp, #40	; 0x28
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
 800d588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d58a:	2300      	movs	r3, #0
 800d58c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10a      	bne.n	800d5aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800d594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d598:	f383 8811 	msr	BASEPRI, r3
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	623b      	str	r3, [r7, #32]
}
 800d5a6:	bf00      	nop
 800d5a8:	e7fe      	b.n	800d5a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d5aa:	4b1a      	ldr	r3, [pc, #104]	; (800d614 <xTimerGenericCommand+0x98>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d02a      	beq.n	800d608 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2b05      	cmp	r3, #5
 800d5c2:	dc18      	bgt.n	800d5f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d5c4:	f7ff feb2 	bl	800d32c <xTaskGetSchedulerState>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d109      	bne.n	800d5e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d5ce:	4b11      	ldr	r3, [pc, #68]	; (800d614 <xTimerGenericCommand+0x98>)
 800d5d0:	6818      	ldr	r0, [r3, #0]
 800d5d2:	f107 0110 	add.w	r1, r7, #16
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5da:	f7fe fb9b 	bl	800bd14 <xQueueGenericSend>
 800d5de:	6278      	str	r0, [r7, #36]	; 0x24
 800d5e0:	e012      	b.n	800d608 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d5e2:	4b0c      	ldr	r3, [pc, #48]	; (800d614 <xTimerGenericCommand+0x98>)
 800d5e4:	6818      	ldr	r0, [r3, #0]
 800d5e6:	f107 0110 	add.w	r1, r7, #16
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f7fe fb91 	bl	800bd14 <xQueueGenericSend>
 800d5f2:	6278      	str	r0, [r7, #36]	; 0x24
 800d5f4:	e008      	b.n	800d608 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d5f6:	4b07      	ldr	r3, [pc, #28]	; (800d614 <xTimerGenericCommand+0x98>)
 800d5f8:	6818      	ldr	r0, [r3, #0]
 800d5fa:	f107 0110 	add.w	r1, r7, #16
 800d5fe:	2300      	movs	r3, #0
 800d600:	683a      	ldr	r2, [r7, #0]
 800d602:	f7fe fc85 	bl	800bf10 <xQueueGenericSendFromISR>
 800d606:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3728      	adds	r7, #40	; 0x28
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	20001aec 	.word	0x20001aec

0800d618 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af02      	add	r7, sp, #8
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d622:	4b22      	ldr	r3, [pc, #136]	; (800d6ac <prvProcessExpiredTimer+0x94>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	3304      	adds	r3, #4
 800d630:	4618      	mov	r0, r3
 800d632:	f7fe fa07 	bl	800ba44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d63c:	f003 0304 	and.w	r3, r3, #4
 800d640:	2b00      	cmp	r3, #0
 800d642:	d022      	beq.n	800d68a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	699a      	ldr	r2, [r3, #24]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	18d1      	adds	r1, r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	6978      	ldr	r0, [r7, #20]
 800d652:	f000 f8d1 	bl	800d7f8 <prvInsertTimerInActiveList>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d01f      	beq.n	800d69c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d65c:	2300      	movs	r3, #0
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	2300      	movs	r3, #0
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	2100      	movs	r1, #0
 800d666:	6978      	ldr	r0, [r7, #20]
 800d668:	f7ff ff88 	bl	800d57c <xTimerGenericCommand>
 800d66c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d113      	bne.n	800d69c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	60fb      	str	r3, [r7, #12]
}
 800d686:	bf00      	nop
 800d688:	e7fe      	b.n	800d688 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d690:	f023 0301 	bic.w	r3, r3, #1
 800d694:	b2da      	uxtb	r2, r3
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	6a1b      	ldr	r3, [r3, #32]
 800d6a0:	6978      	ldr	r0, [r7, #20]
 800d6a2:	4798      	blx	r3
}
 800d6a4:	bf00      	nop
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	20001ae4 	.word	0x20001ae4

0800d6b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6b8:	f107 0308 	add.w	r3, r7, #8
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 f857 	bl	800d770 <prvGetNextExpireTime>
 800d6c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 f803 	bl	800d6d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d6ce:	f000 f8d5 	bl	800d87c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6d2:	e7f1      	b.n	800d6b8 <prvTimerTask+0x8>

0800d6d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d6de:	f7ff fa43 	bl	800cb68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6e2:	f107 0308 	add.w	r3, r7, #8
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f000 f866 	bl	800d7b8 <prvSampleTimeNow>
 800d6ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d130      	bne.n	800d756 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10a      	bne.n	800d710 <prvProcessTimerOrBlockTask+0x3c>
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d806      	bhi.n	800d710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d702:	f7ff fa3f 	bl	800cb84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d706:	68f9      	ldr	r1, [r7, #12]
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7ff ff85 	bl	800d618 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d70e:	e024      	b.n	800d75a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d008      	beq.n	800d728 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d716:	4b13      	ldr	r3, [pc, #76]	; (800d764 <prvProcessTimerOrBlockTask+0x90>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <prvProcessTimerOrBlockTask+0x50>
 800d720:	2301      	movs	r3, #1
 800d722:	e000      	b.n	800d726 <prvProcessTimerOrBlockTask+0x52>
 800d724:	2300      	movs	r3, #0
 800d726:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d728:	4b0f      	ldr	r3, [pc, #60]	; (800d768 <prvProcessTimerOrBlockTask+0x94>)
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	683a      	ldr	r2, [r7, #0]
 800d734:	4619      	mov	r1, r3
 800d736:	f7fe fea1 	bl	800c47c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d73a:	f7ff fa23 	bl	800cb84 <xTaskResumeAll>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10a      	bne.n	800d75a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d744:	4b09      	ldr	r3, [pc, #36]	; (800d76c <prvProcessTimerOrBlockTask+0x98>)
 800d746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	f3bf 8f6f 	isb	sy
}
 800d754:	e001      	b.n	800d75a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d756:	f7ff fa15 	bl	800cb84 <xTaskResumeAll>
}
 800d75a:	bf00      	nop
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	20001ae8 	.word	0x20001ae8
 800d768:	20001aec 	.word	0x20001aec
 800d76c:	e000ed04 	.word	0xe000ed04

0800d770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d770:	b480      	push	{r7}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d778:	4b0e      	ldr	r3, [pc, #56]	; (800d7b4 <prvGetNextExpireTime+0x44>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d101      	bne.n	800d786 <prvGetNextExpireTime+0x16>
 800d782:	2201      	movs	r2, #1
 800d784:	e000      	b.n	800d788 <prvGetNextExpireTime+0x18>
 800d786:	2200      	movs	r2, #0
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d105      	bne.n	800d7a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d794:	4b07      	ldr	r3, [pc, #28]	; (800d7b4 <prvGetNextExpireTime+0x44>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	e001      	b.n	800d7a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	20001ae4 	.word	0x20001ae4

0800d7b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d7c0:	f7ff fa7e 	bl	800ccc0 <xTaskGetTickCount>
 800d7c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d7c6:	4b0b      	ldr	r3, [pc, #44]	; (800d7f4 <prvSampleTimeNow+0x3c>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d205      	bcs.n	800d7dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d7d0:	f000 f936 	bl	800da40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	e002      	b.n	800d7e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d7e2:	4a04      	ldr	r2, [pc, #16]	; (800d7f4 <prvSampleTimeNow+0x3c>)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	20001af4 	.word	0x20001af4

0800d7f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b086      	sub	sp, #24
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d806:	2300      	movs	r3, #0
 800d808:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d812      	bhi.n	800d844 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	1ad2      	subs	r2, r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	699b      	ldr	r3, [r3, #24]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d302      	bcc.n	800d832 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d82c:	2301      	movs	r3, #1
 800d82e:	617b      	str	r3, [r7, #20]
 800d830:	e01b      	b.n	800d86a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d832:	4b10      	ldr	r3, [pc, #64]	; (800d874 <prvInsertTimerInActiveList+0x7c>)
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3304      	adds	r3, #4
 800d83a:	4619      	mov	r1, r3
 800d83c:	4610      	mov	r0, r2
 800d83e:	f7fe f8c8 	bl	800b9d2 <vListInsert>
 800d842:	e012      	b.n	800d86a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d206      	bcs.n	800d85a <prvInsertTimerInActiveList+0x62>
 800d84c:	68ba      	ldr	r2, [r7, #8]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	429a      	cmp	r2, r3
 800d852:	d302      	bcc.n	800d85a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d854:	2301      	movs	r3, #1
 800d856:	617b      	str	r3, [r7, #20]
 800d858:	e007      	b.n	800d86a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d85a:	4b07      	ldr	r3, [pc, #28]	; (800d878 <prvInsertTimerInActiveList+0x80>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3304      	adds	r3, #4
 800d862:	4619      	mov	r1, r3
 800d864:	4610      	mov	r0, r2
 800d866:	f7fe f8b4 	bl	800b9d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d86a:	697b      	ldr	r3, [r7, #20]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3718      	adds	r7, #24
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	20001ae8 	.word	0x20001ae8
 800d878:	20001ae4 	.word	0x20001ae4

0800d87c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08e      	sub	sp, #56	; 0x38
 800d880:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d882:	e0ca      	b.n	800da1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	da18      	bge.n	800d8bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d88a:	1d3b      	adds	r3, r7, #4
 800d88c:	3304      	adds	r3, #4
 800d88e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d892:	2b00      	cmp	r3, #0
 800d894:	d10a      	bne.n	800d8ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89a:	f383 8811 	msr	BASEPRI, r3
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	61fb      	str	r3, [r7, #28]
}
 800d8a8:	bf00      	nop
 800d8aa:	e7fe      	b.n	800d8aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8b2:	6850      	ldr	r0, [r2, #4]
 800d8b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8b6:	6892      	ldr	r2, [r2, #8]
 800d8b8:	4611      	mov	r1, r2
 800d8ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f2c0 80aa 	blt.w	800da18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d004      	beq.n	800d8da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	3304      	adds	r3, #4
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fe f8b5 	bl	800ba44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8da:	463b      	mov	r3, r7
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff ff6b 	bl	800d7b8 <prvSampleTimeNow>
 800d8e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b09      	cmp	r3, #9
 800d8e8:	f200 8097 	bhi.w	800da1a <prvProcessReceivedCommands+0x19e>
 800d8ec:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <prvProcessReceivedCommands+0x78>)
 800d8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f2:	bf00      	nop
 800d8f4:	0800d91d 	.word	0x0800d91d
 800d8f8:	0800d91d 	.word	0x0800d91d
 800d8fc:	0800d91d 	.word	0x0800d91d
 800d900:	0800d991 	.word	0x0800d991
 800d904:	0800d9a5 	.word	0x0800d9a5
 800d908:	0800d9ef 	.word	0x0800d9ef
 800d90c:	0800d91d 	.word	0x0800d91d
 800d910:	0800d91d 	.word	0x0800d91d
 800d914:	0800d991 	.word	0x0800d991
 800d918:	0800d9a5 	.word	0x0800d9a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d922:	f043 0301 	orr.w	r3, r3, #1
 800d926:	b2da      	uxtb	r2, r3
 800d928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d92e:	68ba      	ldr	r2, [r7, #8]
 800d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	18d1      	adds	r1, r2, r3
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d93a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d93c:	f7ff ff5c 	bl	800d7f8 <prvInsertTimerInActiveList>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d069      	beq.n	800da1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d94c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d954:	f003 0304 	and.w	r3, r3, #4
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d05e      	beq.n	800da1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d95c:	68ba      	ldr	r2, [r7, #8]
 800d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	441a      	add	r2, r3
 800d964:	2300      	movs	r3, #0
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	2300      	movs	r3, #0
 800d96a:	2100      	movs	r1, #0
 800d96c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96e:	f7ff fe05 	bl	800d57c <xTimerGenericCommand>
 800d972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d14f      	bne.n	800da1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	61bb      	str	r3, [r7, #24]
}
 800d98c:	bf00      	nop
 800d98e:	e7fe      	b.n	800d98e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d996:	f023 0301 	bic.w	r3, r3, #1
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d9a2:	e03a      	b.n	800da1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9aa:	f043 0301 	orr.w	r3, r3, #1
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9be:	699b      	ldr	r3, [r3, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10a      	bne.n	800d9da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	617b      	str	r3, [r7, #20]
}
 800d9d6:	bf00      	nop
 800d9d8:	e7fe      	b.n	800d9d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	699a      	ldr	r2, [r3, #24]
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	18d1      	adds	r1, r2, r3
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9e8:	f7ff ff06 	bl	800d7f8 <prvInsertTimerInActiveList>
					break;
 800d9ec:	e015      	b.n	800da1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9f4:	f003 0302 	and.w	r3, r3, #2
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d103      	bne.n	800da04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d9fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9fe:	f000 fbdf 	bl	800e1c0 <vPortFree>
 800da02:	e00a      	b.n	800da1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da0a:	f023 0301 	bic.w	r3, r3, #1
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da16:	e000      	b.n	800da1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800da18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da1a:	4b08      	ldr	r3, [pc, #32]	; (800da3c <prvProcessReceivedCommands+0x1c0>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	1d39      	adds	r1, r7, #4
 800da20:	2200      	movs	r2, #0
 800da22:	4618      	mov	r0, r3
 800da24:	f7fe fb10 	bl	800c048 <xQueueReceive>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f47f af2a 	bne.w	800d884 <prvProcessReceivedCommands+0x8>
	}
}
 800da30:	bf00      	nop
 800da32:	bf00      	nop
 800da34:	3730      	adds	r7, #48	; 0x30
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20001aec 	.word	0x20001aec

0800da40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b088      	sub	sp, #32
 800da44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da46:	e048      	b.n	800dada <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da48:	4b2d      	ldr	r3, [pc, #180]	; (800db00 <prvSwitchTimerLists+0xc0>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da52:	4b2b      	ldr	r3, [pc, #172]	; (800db00 <prvSwitchTimerLists+0xc0>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	3304      	adds	r3, #4
 800da60:	4618      	mov	r0, r3
 800da62:	f7fd ffef 	bl	800ba44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da74:	f003 0304 	and.w	r3, r3, #4
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d02e      	beq.n	800dada <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	693a      	ldr	r2, [r7, #16]
 800da82:	4413      	add	r3, r2
 800da84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d90e      	bls.n	800daac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da9a:	4b19      	ldr	r3, [pc, #100]	; (800db00 <prvSwitchTimerLists+0xc0>)
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4619      	mov	r1, r3
 800daa4:	4610      	mov	r0, r2
 800daa6:	f7fd ff94 	bl	800b9d2 <vListInsert>
 800daaa:	e016      	b.n	800dada <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800daac:	2300      	movs	r3, #0
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	2300      	movs	r3, #0
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	2100      	movs	r1, #0
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7ff fd60 	bl	800d57c <xTimerGenericCommand>
 800dabc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10a      	bne.n	800dada <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	603b      	str	r3, [r7, #0]
}
 800dad6:	bf00      	nop
 800dad8:	e7fe      	b.n	800dad8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dada:	4b09      	ldr	r3, [pc, #36]	; (800db00 <prvSwitchTimerLists+0xc0>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1b1      	bne.n	800da48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dae4:	4b06      	ldr	r3, [pc, #24]	; (800db00 <prvSwitchTimerLists+0xc0>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800daea:	4b06      	ldr	r3, [pc, #24]	; (800db04 <prvSwitchTimerLists+0xc4>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a04      	ldr	r2, [pc, #16]	; (800db00 <prvSwitchTimerLists+0xc0>)
 800daf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800daf2:	4a04      	ldr	r2, [pc, #16]	; (800db04 <prvSwitchTimerLists+0xc4>)
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	6013      	str	r3, [r2, #0]
}
 800daf8:	bf00      	nop
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	20001ae4 	.word	0x20001ae4
 800db04:	20001ae8 	.word	0x20001ae8

0800db08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db0e:	f000 f969 	bl	800dde4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db12:	4b15      	ldr	r3, [pc, #84]	; (800db68 <prvCheckForValidListAndQueue+0x60>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d120      	bne.n	800db5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800db1a:	4814      	ldr	r0, [pc, #80]	; (800db6c <prvCheckForValidListAndQueue+0x64>)
 800db1c:	f7fd ff08 	bl	800b930 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800db20:	4813      	ldr	r0, [pc, #76]	; (800db70 <prvCheckForValidListAndQueue+0x68>)
 800db22:	f7fd ff05 	bl	800b930 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800db26:	4b13      	ldr	r3, [pc, #76]	; (800db74 <prvCheckForValidListAndQueue+0x6c>)
 800db28:	4a10      	ldr	r2, [pc, #64]	; (800db6c <prvCheckForValidListAndQueue+0x64>)
 800db2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db2c:	4b12      	ldr	r3, [pc, #72]	; (800db78 <prvCheckForValidListAndQueue+0x70>)
 800db2e:	4a10      	ldr	r2, [pc, #64]	; (800db70 <prvCheckForValidListAndQueue+0x68>)
 800db30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800db32:	2300      	movs	r3, #0
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	4b11      	ldr	r3, [pc, #68]	; (800db7c <prvCheckForValidListAndQueue+0x74>)
 800db38:	4a11      	ldr	r2, [pc, #68]	; (800db80 <prvCheckForValidListAndQueue+0x78>)
 800db3a:	2110      	movs	r1, #16
 800db3c:	200a      	movs	r0, #10
 800db3e:	f7fe f813 	bl	800bb68 <xQueueGenericCreateStatic>
 800db42:	4603      	mov	r3, r0
 800db44:	4a08      	ldr	r2, [pc, #32]	; (800db68 <prvCheckForValidListAndQueue+0x60>)
 800db46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800db48:	4b07      	ldr	r3, [pc, #28]	; (800db68 <prvCheckForValidListAndQueue+0x60>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d005      	beq.n	800db5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800db50:	4b05      	ldr	r3, [pc, #20]	; (800db68 <prvCheckForValidListAndQueue+0x60>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	490b      	ldr	r1, [pc, #44]	; (800db84 <prvCheckForValidListAndQueue+0x7c>)
 800db56:	4618      	mov	r0, r3
 800db58:	f7fe fc66 	bl	800c428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db5c:	f000 f972 	bl	800de44 <vPortExitCritical>
}
 800db60:	bf00      	nop
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	20001aec 	.word	0x20001aec
 800db6c:	20001abc 	.word	0x20001abc
 800db70:	20001ad0 	.word	0x20001ad0
 800db74:	20001ae4 	.word	0x20001ae4
 800db78:	20001ae8 	.word	0x20001ae8
 800db7c:	20001b98 	.word	0x20001b98
 800db80:	20001af8 	.word	0x20001af8
 800db84:	0800f98c 	.word	0x0800f98c

0800db88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db88:	b480      	push	{r7}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	3b04      	subs	r3, #4
 800db98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3b04      	subs	r3, #4
 800dba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	f023 0201 	bic.w	r2, r3, #1
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	3b04      	subs	r3, #4
 800dbb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dbb8:	4a0c      	ldr	r2, [pc, #48]	; (800dbec <pxPortInitialiseStack+0x64>)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3b14      	subs	r3, #20
 800dbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3b04      	subs	r3, #4
 800dbce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f06f 0202 	mvn.w	r2, #2
 800dbd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	3b20      	subs	r3, #32
 800dbdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbde:	68fb      	ldr	r3, [r7, #12]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	0800dbf1 	.word	0x0800dbf1

0800dbf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dbfa:	4b12      	ldr	r3, [pc, #72]	; (800dc44 <prvTaskExitError+0x54>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc02:	d00a      	beq.n	800dc1a <prvTaskExitError+0x2a>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	60fb      	str	r3, [r7, #12]
}
 800dc16:	bf00      	nop
 800dc18:	e7fe      	b.n	800dc18 <prvTaskExitError+0x28>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	60bb      	str	r3, [r7, #8]
}
 800dc2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc2e:	bf00      	nop
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d0fc      	beq.n	800dc30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc36:	bf00      	nop
 800dc38:	bf00      	nop
 800dc3a:	3714      	adds	r7, #20
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	200005b0 	.word	0x200005b0
	...

0800dc50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc50:	4b07      	ldr	r3, [pc, #28]	; (800dc70 <pxCurrentTCBConst2>)
 800dc52:	6819      	ldr	r1, [r3, #0]
 800dc54:	6808      	ldr	r0, [r1, #0]
 800dc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5a:	f380 8809 	msr	PSP, r0
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f04f 0000 	mov.w	r0, #0
 800dc66:	f380 8811 	msr	BASEPRI, r0
 800dc6a:	4770      	bx	lr
 800dc6c:	f3af 8000 	nop.w

0800dc70 <pxCurrentTCBConst2>:
 800dc70:	200015bc 	.word	0x200015bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop

0800dc78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc78:	4808      	ldr	r0, [pc, #32]	; (800dc9c <prvPortStartFirstTask+0x24>)
 800dc7a:	6800      	ldr	r0, [r0, #0]
 800dc7c:	6800      	ldr	r0, [r0, #0]
 800dc7e:	f380 8808 	msr	MSP, r0
 800dc82:	f04f 0000 	mov.w	r0, #0
 800dc86:	f380 8814 	msr	CONTROL, r0
 800dc8a:	b662      	cpsie	i
 800dc8c:	b661      	cpsie	f
 800dc8e:	f3bf 8f4f 	dsb	sy
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	df00      	svc	0
 800dc98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc9a:	bf00      	nop
 800dc9c:	e000ed08 	.word	0xe000ed08

0800dca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dca6:	4b46      	ldr	r3, [pc, #280]	; (800ddc0 <xPortStartScheduler+0x120>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a46      	ldr	r2, [pc, #280]	; (800ddc4 <xPortStartScheduler+0x124>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d10a      	bne.n	800dcc6 <xPortStartScheduler+0x26>
	__asm volatile
 800dcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	613b      	str	r3, [r7, #16]
}
 800dcc2:	bf00      	nop
 800dcc4:	e7fe      	b.n	800dcc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dcc6:	4b3e      	ldr	r3, [pc, #248]	; (800ddc0 <xPortStartScheduler+0x120>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a3f      	ldr	r2, [pc, #252]	; (800ddc8 <xPortStartScheduler+0x128>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d10a      	bne.n	800dce6 <xPortStartScheduler+0x46>
	__asm volatile
 800dcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	60fb      	str	r3, [r7, #12]
}
 800dce2:	bf00      	nop
 800dce4:	e7fe      	b.n	800dce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dce6:	4b39      	ldr	r3, [pc, #228]	; (800ddcc <xPortStartScheduler+0x12c>)
 800dce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	22ff      	movs	r2, #255	; 0xff
 800dcf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd00:	78fb      	ldrb	r3, [r7, #3]
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	4b31      	ldr	r3, [pc, #196]	; (800ddd0 <xPortStartScheduler+0x130>)
 800dd0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd0e:	4b31      	ldr	r3, [pc, #196]	; (800ddd4 <xPortStartScheduler+0x134>)
 800dd10:	2207      	movs	r2, #7
 800dd12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd14:	e009      	b.n	800dd2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dd16:	4b2f      	ldr	r3, [pc, #188]	; (800ddd4 <xPortStartScheduler+0x134>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	4a2d      	ldr	r2, [pc, #180]	; (800ddd4 <xPortStartScheduler+0x134>)
 800dd1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd20:	78fb      	ldrb	r3, [r7, #3]
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	005b      	lsls	r3, r3, #1
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd2a:	78fb      	ldrb	r3, [r7, #3]
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd32:	2b80      	cmp	r3, #128	; 0x80
 800dd34:	d0ef      	beq.n	800dd16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd36:	4b27      	ldr	r3, [pc, #156]	; (800ddd4 <xPortStartScheduler+0x134>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f1c3 0307 	rsb	r3, r3, #7
 800dd3e:	2b04      	cmp	r3, #4
 800dd40:	d00a      	beq.n	800dd58 <xPortStartScheduler+0xb8>
	__asm volatile
 800dd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	60bb      	str	r3, [r7, #8]
}
 800dd54:	bf00      	nop
 800dd56:	e7fe      	b.n	800dd56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd58:	4b1e      	ldr	r3, [pc, #120]	; (800ddd4 <xPortStartScheduler+0x134>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	021b      	lsls	r3, r3, #8
 800dd5e:	4a1d      	ldr	r2, [pc, #116]	; (800ddd4 <xPortStartScheduler+0x134>)
 800dd60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd62:	4b1c      	ldr	r3, [pc, #112]	; (800ddd4 <xPortStartScheduler+0x134>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd6a:	4a1a      	ldr	r2, [pc, #104]	; (800ddd4 <xPortStartScheduler+0x134>)
 800dd6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd76:	4b18      	ldr	r3, [pc, #96]	; (800ddd8 <xPortStartScheduler+0x138>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a17      	ldr	r2, [pc, #92]	; (800ddd8 <xPortStartScheduler+0x138>)
 800dd7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd82:	4b15      	ldr	r3, [pc, #84]	; (800ddd8 <xPortStartScheduler+0x138>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a14      	ldr	r2, [pc, #80]	; (800ddd8 <xPortStartScheduler+0x138>)
 800dd88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd8e:	f000 f8dd 	bl	800df4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd92:	4b12      	ldr	r3, [pc, #72]	; (800dddc <xPortStartScheduler+0x13c>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd98:	f000 f8fc 	bl	800df94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd9c:	4b10      	ldr	r3, [pc, #64]	; (800dde0 <xPortStartScheduler+0x140>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a0f      	ldr	r2, [pc, #60]	; (800dde0 <xPortStartScheduler+0x140>)
 800dda2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dda6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dda8:	f7ff ff66 	bl	800dc78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ddac:	f7ff f852 	bl	800ce54 <vTaskSwitchContext>
	prvTaskExitError();
 800ddb0:	f7ff ff1e 	bl	800dbf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3718      	adds	r7, #24
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	e000ed00 	.word	0xe000ed00
 800ddc4:	410fc271 	.word	0x410fc271
 800ddc8:	410fc270 	.word	0x410fc270
 800ddcc:	e000e400 	.word	0xe000e400
 800ddd0:	20001be8 	.word	0x20001be8
 800ddd4:	20001bec 	.word	0x20001bec
 800ddd8:	e000ed20 	.word	0xe000ed20
 800dddc:	200005b0 	.word	0x200005b0
 800dde0:	e000ef34 	.word	0xe000ef34

0800dde4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	607b      	str	r3, [r7, #4]
}
 800ddfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ddfe:	4b0f      	ldr	r3, [pc, #60]	; (800de3c <vPortEnterCritical+0x58>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	3301      	adds	r3, #1
 800de04:	4a0d      	ldr	r2, [pc, #52]	; (800de3c <vPortEnterCritical+0x58>)
 800de06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de08:	4b0c      	ldr	r3, [pc, #48]	; (800de3c <vPortEnterCritical+0x58>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d10f      	bne.n	800de30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de10:	4b0b      	ldr	r3, [pc, #44]	; (800de40 <vPortEnterCritical+0x5c>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	b2db      	uxtb	r3, r3
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00a      	beq.n	800de30 <vPortEnterCritical+0x4c>
	__asm volatile
 800de1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	603b      	str	r3, [r7, #0]
}
 800de2c:	bf00      	nop
 800de2e:	e7fe      	b.n	800de2e <vPortEnterCritical+0x4a>
	}
}
 800de30:	bf00      	nop
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	200005b0 	.word	0x200005b0
 800de40:	e000ed04 	.word	0xe000ed04

0800de44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de4a:	4b12      	ldr	r3, [pc, #72]	; (800de94 <vPortExitCritical+0x50>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10a      	bne.n	800de68 <vPortExitCritical+0x24>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	607b      	str	r3, [r7, #4]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de68:	4b0a      	ldr	r3, [pc, #40]	; (800de94 <vPortExitCritical+0x50>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3b01      	subs	r3, #1
 800de6e:	4a09      	ldr	r2, [pc, #36]	; (800de94 <vPortExitCritical+0x50>)
 800de70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de72:	4b08      	ldr	r3, [pc, #32]	; (800de94 <vPortExitCritical+0x50>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d105      	bne.n	800de86 <vPortExitCritical+0x42>
 800de7a:	2300      	movs	r3, #0
 800de7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	f383 8811 	msr	BASEPRI, r3
}
 800de84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de86:	bf00      	nop
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	200005b0 	.word	0x200005b0
	...

0800dea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dea0:	f3ef 8009 	mrs	r0, PSP
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	4b15      	ldr	r3, [pc, #84]	; (800df00 <pxCurrentTCBConst>)
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	f01e 0f10 	tst.w	lr, #16
 800deb0:	bf08      	it	eq
 800deb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800deb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deba:	6010      	str	r0, [r2, #0]
 800debc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dec4:	f380 8811 	msr	BASEPRI, r0
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f7fe ffc0 	bl	800ce54 <vTaskSwitchContext>
 800ded4:	f04f 0000 	mov.w	r0, #0
 800ded8:	f380 8811 	msr	BASEPRI, r0
 800dedc:	bc09      	pop	{r0, r3}
 800dede:	6819      	ldr	r1, [r3, #0]
 800dee0:	6808      	ldr	r0, [r1, #0]
 800dee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee6:	f01e 0f10 	tst.w	lr, #16
 800deea:	bf08      	it	eq
 800deec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800def0:	f380 8809 	msr	PSP, r0
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	f3af 8000 	nop.w

0800df00 <pxCurrentTCBConst>:
 800df00:	200015bc 	.word	0x200015bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df04:	bf00      	nop
 800df06:	bf00      	nop

0800df08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
	__asm volatile
 800df0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	607b      	str	r3, [r7, #4]
}
 800df20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df22:	f7fe fedd 	bl	800cce0 <xTaskIncrementTick>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d003      	beq.n	800df34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df2c:	4b06      	ldr	r3, [pc, #24]	; (800df48 <xPortSysTickHandler+0x40>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	2300      	movs	r3, #0
 800df36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	f383 8811 	msr	BASEPRI, r3
}
 800df3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	e000ed04 	.word	0xe000ed04

0800df4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df4c:	b480      	push	{r7}
 800df4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df50:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <vPortSetupTimerInterrupt+0x34>)
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df56:	4b0b      	ldr	r3, [pc, #44]	; (800df84 <vPortSetupTimerInterrupt+0x38>)
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <vPortSetupTimerInterrupt+0x3c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a0a      	ldr	r2, [pc, #40]	; (800df8c <vPortSetupTimerInterrupt+0x40>)
 800df62:	fba2 2303 	umull	r2, r3, r2, r3
 800df66:	099b      	lsrs	r3, r3, #6
 800df68:	4a09      	ldr	r2, [pc, #36]	; (800df90 <vPortSetupTimerInterrupt+0x44>)
 800df6a:	3b01      	subs	r3, #1
 800df6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df6e:	4b04      	ldr	r3, [pc, #16]	; (800df80 <vPortSetupTimerInterrupt+0x34>)
 800df70:	2207      	movs	r2, #7
 800df72:	601a      	str	r2, [r3, #0]
}
 800df74:	bf00      	nop
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	e000e010 	.word	0xe000e010
 800df84:	e000e018 	.word	0xe000e018
 800df88:	20000518 	.word	0x20000518
 800df8c:	10624dd3 	.word	0x10624dd3
 800df90:	e000e014 	.word	0xe000e014

0800df94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dfa4 <vPortEnableVFP+0x10>
 800df98:	6801      	ldr	r1, [r0, #0]
 800df9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df9e:	6001      	str	r1, [r0, #0]
 800dfa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfa2:	bf00      	nop
 800dfa4:	e000ed88 	.word	0xe000ed88

0800dfa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dfae:	f3ef 8305 	mrs	r3, IPSR
 800dfb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b0f      	cmp	r3, #15
 800dfb8:	d914      	bls.n	800dfe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dfba:	4a17      	ldr	r2, [pc, #92]	; (800e018 <vPortValidateInterruptPriority+0x70>)
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dfc4:	4b15      	ldr	r3, [pc, #84]	; (800e01c <vPortValidateInterruptPriority+0x74>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	7afa      	ldrb	r2, [r7, #11]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d20a      	bcs.n	800dfe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	607b      	str	r3, [r7, #4]
}
 800dfe0:	bf00      	nop
 800dfe2:	e7fe      	b.n	800dfe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dfe4:	4b0e      	ldr	r3, [pc, #56]	; (800e020 <vPortValidateInterruptPriority+0x78>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dfec:	4b0d      	ldr	r3, [pc, #52]	; (800e024 <vPortValidateInterruptPriority+0x7c>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d90a      	bls.n	800e00a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff8:	f383 8811 	msr	BASEPRI, r3
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	603b      	str	r3, [r7, #0]
}
 800e006:	bf00      	nop
 800e008:	e7fe      	b.n	800e008 <vPortValidateInterruptPriority+0x60>
	}
 800e00a:	bf00      	nop
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	e000e3f0 	.word	0xe000e3f0
 800e01c:	20001be8 	.word	0x20001be8
 800e020:	e000ed0c 	.word	0xe000ed0c
 800e024:	20001bec 	.word	0x20001bec

0800e028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08a      	sub	sp, #40	; 0x28
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e030:	2300      	movs	r3, #0
 800e032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e034:	f7fe fd98 	bl	800cb68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e038:	4b5b      	ldr	r3, [pc, #364]	; (800e1a8 <pvPortMalloc+0x180>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e040:	f000 f920 	bl	800e284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e044:	4b59      	ldr	r3, [pc, #356]	; (800e1ac <pvPortMalloc+0x184>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4013      	ands	r3, r2
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f040 8093 	bne.w	800e178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d01d      	beq.n	800e094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e058:	2208      	movs	r2, #8
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4413      	add	r3, r2
 800e05e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f003 0307 	and.w	r3, r3, #7
 800e066:	2b00      	cmp	r3, #0
 800e068:	d014      	beq.n	800e094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f023 0307 	bic.w	r3, r3, #7
 800e070:	3308      	adds	r3, #8
 800e072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f003 0307 	and.w	r3, r3, #7
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00a      	beq.n	800e094 <pvPortMalloc+0x6c>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	617b      	str	r3, [r7, #20]
}
 800e090:	bf00      	nop
 800e092:	e7fe      	b.n	800e092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d06e      	beq.n	800e178 <pvPortMalloc+0x150>
 800e09a:	4b45      	ldr	r3, [pc, #276]	; (800e1b0 <pvPortMalloc+0x188>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d869      	bhi.n	800e178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0a4:	4b43      	ldr	r3, [pc, #268]	; (800e1b4 <pvPortMalloc+0x18c>)
 800e0a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0a8:	4b42      	ldr	r3, [pc, #264]	; (800e1b4 <pvPortMalloc+0x18c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0ae:	e004      	b.n	800e0ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d903      	bls.n	800e0cc <pvPortMalloc+0xa4>
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1f1      	bne.n	800e0b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0cc:	4b36      	ldr	r3, [pc, #216]	; (800e1a8 <pvPortMalloc+0x180>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d050      	beq.n	800e178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0d6:	6a3b      	ldr	r3, [r7, #32]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2208      	movs	r2, #8
 800e0dc:	4413      	add	r3, r2
 800e0de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	6a3b      	ldr	r3, [r7, #32]
 800e0e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	685a      	ldr	r2, [r3, #4]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	1ad2      	subs	r2, r2, r3
 800e0f0:	2308      	movs	r3, #8
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d91f      	bls.n	800e138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e100:	69bb      	ldr	r3, [r7, #24]
 800e102:	f003 0307 	and.w	r3, r3, #7
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00a      	beq.n	800e120 <pvPortMalloc+0xf8>
	__asm volatile
 800e10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	613b      	str	r3, [r7, #16]
}
 800e11c:	bf00      	nop
 800e11e:	e7fe      	b.n	800e11e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	685a      	ldr	r2, [r3, #4]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	1ad2      	subs	r2, r2, r3
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e132:	69b8      	ldr	r0, [r7, #24]
 800e134:	f000 f908 	bl	800e348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e138:	4b1d      	ldr	r3, [pc, #116]	; (800e1b0 <pvPortMalloc+0x188>)
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	4a1b      	ldr	r2, [pc, #108]	; (800e1b0 <pvPortMalloc+0x188>)
 800e144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e146:	4b1a      	ldr	r3, [pc, #104]	; (800e1b0 <pvPortMalloc+0x188>)
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	4b1b      	ldr	r3, [pc, #108]	; (800e1b8 <pvPortMalloc+0x190>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d203      	bcs.n	800e15a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e152:	4b17      	ldr	r3, [pc, #92]	; (800e1b0 <pvPortMalloc+0x188>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a18      	ldr	r2, [pc, #96]	; (800e1b8 <pvPortMalloc+0x190>)
 800e158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15c:	685a      	ldr	r2, [r3, #4]
 800e15e:	4b13      	ldr	r3, [pc, #76]	; (800e1ac <pvPortMalloc+0x184>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	431a      	orrs	r2, r3
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	2200      	movs	r2, #0
 800e16c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e16e:	4b13      	ldr	r3, [pc, #76]	; (800e1bc <pvPortMalloc+0x194>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	3301      	adds	r3, #1
 800e174:	4a11      	ldr	r2, [pc, #68]	; (800e1bc <pvPortMalloc+0x194>)
 800e176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e178:	f7fe fd04 	bl	800cb84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	f003 0307 	and.w	r3, r3, #7
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00a      	beq.n	800e19c <pvPortMalloc+0x174>
	__asm volatile
 800e186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18a:	f383 8811 	msr	BASEPRI, r3
 800e18e:	f3bf 8f6f 	isb	sy
 800e192:	f3bf 8f4f 	dsb	sy
 800e196:	60fb      	str	r3, [r7, #12]
}
 800e198:	bf00      	nop
 800e19a:	e7fe      	b.n	800e19a <pvPortMalloc+0x172>
	return pvReturn;
 800e19c:	69fb      	ldr	r3, [r7, #28]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3728      	adds	r7, #40	; 0x28
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	200057f8 	.word	0x200057f8
 800e1ac:	2000580c 	.word	0x2000580c
 800e1b0:	200057fc 	.word	0x200057fc
 800e1b4:	200057f0 	.word	0x200057f0
 800e1b8:	20005800 	.word	0x20005800
 800e1bc:	20005804 	.word	0x20005804

0800e1c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d04d      	beq.n	800e26e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1d2:	2308      	movs	r3, #8
 800e1d4:	425b      	negs	r3, r3
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	4413      	add	r3, r2
 800e1da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	685a      	ldr	r2, [r3, #4]
 800e1e4:	4b24      	ldr	r3, [pc, #144]	; (800e278 <vPortFree+0xb8>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4013      	ands	r3, r2
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10a      	bne.n	800e204 <vPortFree+0x44>
	__asm volatile
 800e1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	60fb      	str	r3, [r7, #12]
}
 800e200:	bf00      	nop
 800e202:	e7fe      	b.n	800e202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00a      	beq.n	800e222 <vPortFree+0x62>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	60bb      	str	r3, [r7, #8]
}
 800e21e:	bf00      	nop
 800e220:	e7fe      	b.n	800e220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	685a      	ldr	r2, [r3, #4]
 800e226:	4b14      	ldr	r3, [pc, #80]	; (800e278 <vPortFree+0xb8>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4013      	ands	r3, r2
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d01e      	beq.n	800e26e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d11a      	bne.n	800e26e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	4b0e      	ldr	r3, [pc, #56]	; (800e278 <vPortFree+0xb8>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	43db      	mvns	r3, r3
 800e242:	401a      	ands	r2, r3
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e248:	f7fe fc8e 	bl	800cb68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	4b0a      	ldr	r3, [pc, #40]	; (800e27c <vPortFree+0xbc>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4413      	add	r3, r2
 800e256:	4a09      	ldr	r2, [pc, #36]	; (800e27c <vPortFree+0xbc>)
 800e258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e25a:	6938      	ldr	r0, [r7, #16]
 800e25c:	f000 f874 	bl	800e348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e260:	4b07      	ldr	r3, [pc, #28]	; (800e280 <vPortFree+0xc0>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	3301      	adds	r3, #1
 800e266:	4a06      	ldr	r2, [pc, #24]	; (800e280 <vPortFree+0xc0>)
 800e268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e26a:	f7fe fc8b 	bl	800cb84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e26e:	bf00      	nop
 800e270:	3718      	adds	r7, #24
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	2000580c 	.word	0x2000580c
 800e27c:	200057fc 	.word	0x200057fc
 800e280:	20005808 	.word	0x20005808

0800e284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e28a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e28e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e290:	4b27      	ldr	r3, [pc, #156]	; (800e330 <prvHeapInit+0xac>)
 800e292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f003 0307 	and.w	r3, r3, #7
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00c      	beq.n	800e2b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	3307      	adds	r3, #7
 800e2a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f023 0307 	bic.w	r3, r3, #7
 800e2aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	4a1f      	ldr	r2, [pc, #124]	; (800e330 <prvHeapInit+0xac>)
 800e2b4:	4413      	add	r3, r2
 800e2b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2bc:	4a1d      	ldr	r2, [pc, #116]	; (800e334 <prvHeapInit+0xb0>)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2c2:	4b1c      	ldr	r3, [pc, #112]	; (800e334 <prvHeapInit+0xb0>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	1a9b      	subs	r3, r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f023 0307 	bic.w	r3, r3, #7
 800e2de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	4a15      	ldr	r2, [pc, #84]	; (800e338 <prvHeapInit+0xb4>)
 800e2e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <prvHeapInit+0xb4>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2ee:	4b12      	ldr	r3, [pc, #72]	; (800e338 <prvHeapInit+0xb4>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	1ad2      	subs	r2, r2, r3
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e304:	4b0c      	ldr	r3, [pc, #48]	; (800e338 <prvHeapInit+0xb4>)
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	4a0a      	ldr	r2, [pc, #40]	; (800e33c <prvHeapInit+0xb8>)
 800e312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	4a09      	ldr	r2, [pc, #36]	; (800e340 <prvHeapInit+0xbc>)
 800e31a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e31c:	4b09      	ldr	r3, [pc, #36]	; (800e344 <prvHeapInit+0xc0>)
 800e31e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e322:	601a      	str	r2, [r3, #0]
}
 800e324:	bf00      	nop
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	20001bf0 	.word	0x20001bf0
 800e334:	200057f0 	.word	0x200057f0
 800e338:	200057f8 	.word	0x200057f8
 800e33c:	20005800 	.word	0x20005800
 800e340:	200057fc 	.word	0x200057fc
 800e344:	2000580c 	.word	0x2000580c

0800e348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e350:	4b28      	ldr	r3, [pc, #160]	; (800e3f4 <prvInsertBlockIntoFreeList+0xac>)
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	e002      	b.n	800e35c <prvInsertBlockIntoFreeList+0x14>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	60fb      	str	r3, [r7, #12]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	429a      	cmp	r2, r3
 800e364:	d8f7      	bhi.n	800e356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	4413      	add	r3, r2
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	429a      	cmp	r2, r3
 800e376:	d108      	bne.n	800e38a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	685a      	ldr	r2, [r3, #4]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	441a      	add	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	441a      	add	r2, r3
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d118      	bne.n	800e3d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	4b15      	ldr	r3, [pc, #84]	; (800e3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d00d      	beq.n	800e3c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685a      	ldr	r2, [r3, #4]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	441a      	add	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	e008      	b.n	800e3d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3c6:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	e003      	b.n	800e3d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d002      	beq.n	800e3e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3e6:	bf00      	nop
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	200057f0 	.word	0x200057f0
 800e3f8:	200057f8 	.word	0x200057f8

0800e3fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e400:	2200      	movs	r2, #0
 800e402:	4912      	ldr	r1, [pc, #72]	; (800e44c <MX_USB_DEVICE_Init+0x50>)
 800e404:	4812      	ldr	r0, [pc, #72]	; (800e450 <MX_USB_DEVICE_Init+0x54>)
 800e406:	f7fb fdbd 	bl	8009f84 <USBD_Init>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e410:	f7f4 f8c4 	bl	800259c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e414:	490f      	ldr	r1, [pc, #60]	; (800e454 <MX_USB_DEVICE_Init+0x58>)
 800e416:	480e      	ldr	r0, [pc, #56]	; (800e450 <MX_USB_DEVICE_Init+0x54>)
 800e418:	f7fb fde4 	bl	8009fe4 <USBD_RegisterClass>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e422:	f7f4 f8bb 	bl	800259c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e426:	490c      	ldr	r1, [pc, #48]	; (800e458 <MX_USB_DEVICE_Init+0x5c>)
 800e428:	4809      	ldr	r0, [pc, #36]	; (800e450 <MX_USB_DEVICE_Init+0x54>)
 800e42a:	f7fb fd1b 	bl	8009e64 <USBD_CDC_RegisterInterface>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e434:	f7f4 f8b2 	bl	800259c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e438:	4805      	ldr	r0, [pc, #20]	; (800e450 <MX_USB_DEVICE_Init+0x54>)
 800e43a:	f7fb fe09 	bl	800a050 <USBD_Start>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e444:	f7f4 f8aa 	bl	800259c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e448:	bf00      	nop
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	200005c8 	.word	0x200005c8
 800e450:	20005810 	.word	0x20005810
 800e454:	20000530 	.word	0x20000530
 800e458:	200005b4 	.word	0x200005b4

0800e45c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e460:	2200      	movs	r2, #0
 800e462:	4905      	ldr	r1, [pc, #20]	; (800e478 <CDC_Init_FS+0x1c>)
 800e464:	4805      	ldr	r0, [pc, #20]	; (800e47c <CDC_Init_FS+0x20>)
 800e466:	f7fb fd17 	bl	8009e98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e46a:	4905      	ldr	r1, [pc, #20]	; (800e480 <CDC_Init_FS+0x24>)
 800e46c:	4803      	ldr	r0, [pc, #12]	; (800e47c <CDC_Init_FS+0x20>)
 800e46e:	f7fb fd35 	bl	8009edc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e474:	4618      	mov	r0, r3
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20005eec 	.word	0x20005eec
 800e47c:	20005810 	.word	0x20005810
 800e480:	20005aec 	.word	0x20005aec

0800e484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e484:	b480      	push	{r7}
 800e486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	4603      	mov	r3, r0
 800e49c:	6039      	str	r1, [r7, #0]
 800e49e:	71fb      	strb	r3, [r7, #7]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e4a4:	79fb      	ldrb	r3, [r7, #7]
 800e4a6:	2b23      	cmp	r3, #35	; 0x23
 800e4a8:	d84a      	bhi.n	800e540 <CDC_Control_FS+0xac>
 800e4aa:	a201      	add	r2, pc, #4	; (adr r2, 800e4b0 <CDC_Control_FS+0x1c>)
 800e4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b0:	0800e541 	.word	0x0800e541
 800e4b4:	0800e541 	.word	0x0800e541
 800e4b8:	0800e541 	.word	0x0800e541
 800e4bc:	0800e541 	.word	0x0800e541
 800e4c0:	0800e541 	.word	0x0800e541
 800e4c4:	0800e541 	.word	0x0800e541
 800e4c8:	0800e541 	.word	0x0800e541
 800e4cc:	0800e541 	.word	0x0800e541
 800e4d0:	0800e541 	.word	0x0800e541
 800e4d4:	0800e541 	.word	0x0800e541
 800e4d8:	0800e541 	.word	0x0800e541
 800e4dc:	0800e541 	.word	0x0800e541
 800e4e0:	0800e541 	.word	0x0800e541
 800e4e4:	0800e541 	.word	0x0800e541
 800e4e8:	0800e541 	.word	0x0800e541
 800e4ec:	0800e541 	.word	0x0800e541
 800e4f0:	0800e541 	.word	0x0800e541
 800e4f4:	0800e541 	.word	0x0800e541
 800e4f8:	0800e541 	.word	0x0800e541
 800e4fc:	0800e541 	.word	0x0800e541
 800e500:	0800e541 	.word	0x0800e541
 800e504:	0800e541 	.word	0x0800e541
 800e508:	0800e541 	.word	0x0800e541
 800e50c:	0800e541 	.word	0x0800e541
 800e510:	0800e541 	.word	0x0800e541
 800e514:	0800e541 	.word	0x0800e541
 800e518:	0800e541 	.word	0x0800e541
 800e51c:	0800e541 	.word	0x0800e541
 800e520:	0800e541 	.word	0x0800e541
 800e524:	0800e541 	.word	0x0800e541
 800e528:	0800e541 	.word	0x0800e541
 800e52c:	0800e541 	.word	0x0800e541
 800e530:	0800e541 	.word	0x0800e541
 800e534:	0800e541 	.word	0x0800e541
 800e538:	0800e541 	.word	0x0800e541
 800e53c:	0800e541 	.word	0x0800e541
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e540:	bf00      	nop
  }

  return (USBD_OK);
 800e542:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e544:	4618      	mov	r0, r3
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e55a:	6879      	ldr	r1, [r7, #4]
 800e55c:	4805      	ldr	r0, [pc, #20]	; (800e574 <CDC_Receive_FS+0x24>)
 800e55e:	f7fb fcbd 	bl	8009edc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e562:	4804      	ldr	r0, [pc, #16]	; (800e574 <CDC_Receive_FS+0x24>)
 800e564:	f7fb fcd8 	bl	8009f18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e568:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20005810 	.word	0x20005810

0800e578 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e578:	b480      	push	{r7}
 800e57a:	b087      	sub	sp, #28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	4613      	mov	r3, r2
 800e584:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e58a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	371c      	adds	r7, #28
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
	...

0800e59c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	6039      	str	r1, [r7, #0]
 800e5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2212      	movs	r2, #18
 800e5ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e5ae:	4b03      	ldr	r3, [pc, #12]	; (800e5bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	200005e4 	.word	0x200005e4

0800e5c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	6039      	str	r1, [r7, #0]
 800e5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2204      	movs	r2, #4
 800e5d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e5d2:	4b03      	ldr	r3, [pc, #12]	; (800e5e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr
 800e5e0:	200005f8 	.word	0x200005f8

0800e5e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	6039      	str	r1, [r7, #0]
 800e5ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d105      	bne.n	800e602 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	4907      	ldr	r1, [pc, #28]	; (800e618 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5fa:	4808      	ldr	r0, [pc, #32]	; (800e61c <USBD_FS_ProductStrDescriptor+0x38>)
 800e5fc:	f7fc fed4 	bl	800b3a8 <USBD_GetString>
 800e600:	e004      	b.n	800e60c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	4904      	ldr	r1, [pc, #16]	; (800e618 <USBD_FS_ProductStrDescriptor+0x34>)
 800e606:	4805      	ldr	r0, [pc, #20]	; (800e61c <USBD_FS_ProductStrDescriptor+0x38>)
 800e608:	f7fc fece 	bl	800b3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e60c:	4b02      	ldr	r3, [pc, #8]	; (800e618 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	200062ec 	.word	0x200062ec
 800e61c:	0800f994 	.word	0x0800f994

0800e620 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	4603      	mov	r3, r0
 800e628:	6039      	str	r1, [r7, #0]
 800e62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e62c:	683a      	ldr	r2, [r7, #0]
 800e62e:	4904      	ldr	r1, [pc, #16]	; (800e640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e630:	4804      	ldr	r0, [pc, #16]	; (800e644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e632:	f7fc feb9 	bl	800b3a8 <USBD_GetString>
  return USBD_StrDesc;
 800e636:	4b02      	ldr	r3, [pc, #8]	; (800e640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	200062ec 	.word	0x200062ec
 800e644:	0800f9ac 	.word	0x0800f9ac

0800e648 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	4603      	mov	r3, r0
 800e650:	6039      	str	r1, [r7, #0]
 800e652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	221a      	movs	r2, #26
 800e658:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e65a:	f000 f843 	bl	800e6e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e65e:	4b02      	ldr	r3, [pc, #8]	; (800e668 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e660:	4618      	mov	r0, r3
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	200005fc 	.word	0x200005fc

0800e66c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	6039      	str	r1, [r7, #0]
 800e676:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d105      	bne.n	800e68a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	4907      	ldr	r1, [pc, #28]	; (800e6a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e682:	4808      	ldr	r0, [pc, #32]	; (800e6a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e684:	f7fc fe90 	bl	800b3a8 <USBD_GetString>
 800e688:	e004      	b.n	800e694 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	4904      	ldr	r1, [pc, #16]	; (800e6a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e68e:	4805      	ldr	r0, [pc, #20]	; (800e6a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e690:	f7fc fe8a 	bl	800b3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e694:	4b02      	ldr	r3, [pc, #8]	; (800e6a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e696:	4618      	mov	r0, r3
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	200062ec 	.word	0x200062ec
 800e6a4:	0800f9c0 	.word	0x0800f9c0

0800e6a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	6039      	str	r1, [r7, #0]
 800e6b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6b4:	79fb      	ldrb	r3, [r7, #7]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d105      	bne.n	800e6c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6ba:	683a      	ldr	r2, [r7, #0]
 800e6bc:	4907      	ldr	r1, [pc, #28]	; (800e6dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6be:	4808      	ldr	r0, [pc, #32]	; (800e6e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6c0:	f7fc fe72 	bl	800b3a8 <USBD_GetString>
 800e6c4:	e004      	b.n	800e6d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	4904      	ldr	r1, [pc, #16]	; (800e6dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6ca:	4805      	ldr	r0, [pc, #20]	; (800e6e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6cc:	f7fc fe6c 	bl	800b3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6d0:	4b02      	ldr	r3, [pc, #8]	; (800e6dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	200062ec 	.word	0x200062ec
 800e6e0:	0800f9cc 	.word	0x0800f9cc

0800e6e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e6ea:	4b0f      	ldr	r3, [pc, #60]	; (800e728 <Get_SerialNum+0x44>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e6f0:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <Get_SerialNum+0x48>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e6f6:	4b0e      	ldr	r3, [pc, #56]	; (800e730 <Get_SerialNum+0x4c>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4413      	add	r3, r2
 800e702:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d009      	beq.n	800e71e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e70a:	2208      	movs	r2, #8
 800e70c:	4909      	ldr	r1, [pc, #36]	; (800e734 <Get_SerialNum+0x50>)
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f000 f814 	bl	800e73c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e714:	2204      	movs	r2, #4
 800e716:	4908      	ldr	r1, [pc, #32]	; (800e738 <Get_SerialNum+0x54>)
 800e718:	68b8      	ldr	r0, [r7, #8]
 800e71a:	f000 f80f 	bl	800e73c <IntToUnicode>
  }
}
 800e71e:	bf00      	nop
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	1fff7a10 	.word	0x1fff7a10
 800e72c:	1fff7a14 	.word	0x1fff7a14
 800e730:	1fff7a18 	.word	0x1fff7a18
 800e734:	200005fe 	.word	0x200005fe
 800e738:	2000060e 	.word	0x2000060e

0800e73c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b087      	sub	sp, #28
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	4613      	mov	r3, r2
 800e748:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e74e:	2300      	movs	r3, #0
 800e750:	75fb      	strb	r3, [r7, #23]
 800e752:	e027      	b.n	800e7a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	0f1b      	lsrs	r3, r3, #28
 800e758:	2b09      	cmp	r3, #9
 800e75a:	d80b      	bhi.n	800e774 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	0f1b      	lsrs	r3, r3, #28
 800e760:	b2da      	uxtb	r2, r3
 800e762:	7dfb      	ldrb	r3, [r7, #23]
 800e764:	005b      	lsls	r3, r3, #1
 800e766:	4619      	mov	r1, r3
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	440b      	add	r3, r1
 800e76c:	3230      	adds	r2, #48	; 0x30
 800e76e:	b2d2      	uxtb	r2, r2
 800e770:	701a      	strb	r2, [r3, #0]
 800e772:	e00a      	b.n	800e78a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	0f1b      	lsrs	r3, r3, #28
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	7dfb      	ldrb	r3, [r7, #23]
 800e77c:	005b      	lsls	r3, r3, #1
 800e77e:	4619      	mov	r1, r3
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	440b      	add	r3, r1
 800e784:	3237      	adds	r2, #55	; 0x37
 800e786:	b2d2      	uxtb	r2, r2
 800e788:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	011b      	lsls	r3, r3, #4
 800e78e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e790:	7dfb      	ldrb	r3, [r7, #23]
 800e792:	005b      	lsls	r3, r3, #1
 800e794:	3301      	adds	r3, #1
 800e796:	68ba      	ldr	r2, [r7, #8]
 800e798:	4413      	add	r3, r2
 800e79a:	2200      	movs	r2, #0
 800e79c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e79e:	7dfb      	ldrb	r3, [r7, #23]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	75fb      	strb	r3, [r7, #23]
 800e7a4:	7dfa      	ldrb	r2, [r7, #23]
 800e7a6:	79fb      	ldrb	r3, [r7, #7]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d3d3      	bcc.n	800e754 <IntToUnicode+0x18>
  }
}
 800e7ac:	bf00      	nop
 800e7ae:	bf00      	nop
 800e7b0:	371c      	adds	r7, #28
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
	...

0800e7bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08a      	sub	sp, #40	; 0x28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7c4:	f107 0314 	add.w	r3, r7, #20
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	601a      	str	r2, [r3, #0]
 800e7cc:	605a      	str	r2, [r3, #4]
 800e7ce:	609a      	str	r2, [r3, #8]
 800e7d0:	60da      	str	r2, [r3, #12]
 800e7d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7dc:	d13a      	bne.n	800e854 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7de:	2300      	movs	r3, #0
 800e7e0:	613b      	str	r3, [r7, #16]
 800e7e2:	4b1e      	ldr	r3, [pc, #120]	; (800e85c <HAL_PCD_MspInit+0xa0>)
 800e7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e6:	4a1d      	ldr	r2, [pc, #116]	; (800e85c <HAL_PCD_MspInit+0xa0>)
 800e7e8:	f043 0301 	orr.w	r3, r3, #1
 800e7ec:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ee:	4b1b      	ldr	r3, [pc, #108]	; (800e85c <HAL_PCD_MspInit+0xa0>)
 800e7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f2:	f003 0301 	and.w	r3, r3, #1
 800e7f6:	613b      	str	r3, [r7, #16]
 800e7f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e7fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e7fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e800:	2302      	movs	r3, #2
 800e802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e804:	2300      	movs	r3, #0
 800e806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e808:	2303      	movs	r3, #3
 800e80a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e80c:	230a      	movs	r3, #10
 800e80e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e810:	f107 0314 	add.w	r3, r7, #20
 800e814:	4619      	mov	r1, r3
 800e816:	4812      	ldr	r0, [pc, #72]	; (800e860 <HAL_PCD_MspInit+0xa4>)
 800e818:	f7f4 fd3c 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e81c:	4b0f      	ldr	r3, [pc, #60]	; (800e85c <HAL_PCD_MspInit+0xa0>)
 800e81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e820:	4a0e      	ldr	r2, [pc, #56]	; (800e85c <HAL_PCD_MspInit+0xa0>)
 800e822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e826:	6353      	str	r3, [r2, #52]	; 0x34
 800e828:	2300      	movs	r3, #0
 800e82a:	60fb      	str	r3, [r7, #12]
 800e82c:	4b0b      	ldr	r3, [pc, #44]	; (800e85c <HAL_PCD_MspInit+0xa0>)
 800e82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e830:	4a0a      	ldr	r2, [pc, #40]	; (800e85c <HAL_PCD_MspInit+0xa0>)
 800e832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e836:	6453      	str	r3, [r2, #68]	; 0x44
 800e838:	4b08      	ldr	r3, [pc, #32]	; (800e85c <HAL_PCD_MspInit+0xa0>)
 800e83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e83c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e840:	60fb      	str	r3, [r7, #12]
 800e842:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e844:	2200      	movs	r2, #0
 800e846:	2105      	movs	r1, #5
 800e848:	2043      	movs	r0, #67	; 0x43
 800e84a:	f7f4 fcf9 	bl	8003240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e84e:	2043      	movs	r0, #67	; 0x43
 800e850:	f7f4 fd12 	bl	8003278 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e854:	bf00      	nop
 800e856:	3728      	adds	r7, #40	; 0x28
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	40023800 	.word	0x40023800
 800e860:	40020000 	.word	0x40020000

0800e864 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e878:	4619      	mov	r1, r3
 800e87a:	4610      	mov	r0, r2
 800e87c:	f7fb fc35 	bl	800a0ea <USBD_LL_SetupStage>
}
 800e880:	bf00      	nop
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e89a:	78fa      	ldrb	r2, [r7, #3]
 800e89c:	6879      	ldr	r1, [r7, #4]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	440b      	add	r3, r1
 800e8a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	78fb      	ldrb	r3, [r7, #3]
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	f7fb fc6f 	bl	800a194 <USBD_LL_DataOutStage>
}
 800e8b6:	bf00      	nop
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b082      	sub	sp, #8
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e8d0:	78fa      	ldrb	r2, [r7, #3]
 800e8d2:	6879      	ldr	r1, [r7, #4]
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	00db      	lsls	r3, r3, #3
 800e8d8:	4413      	add	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	440b      	add	r3, r1
 800e8de:	334c      	adds	r3, #76	; 0x4c
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	78fb      	ldrb	r3, [r7, #3]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	f7fb fd08 	bl	800a2fa <USBD_LL_DataInStage>
}
 800e8ea:	bf00      	nop
 800e8ec:	3708      	adds	r7, #8
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b082      	sub	sp, #8
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e900:	4618      	mov	r0, r3
 800e902:	f7fb fe3c 	bl	800a57e <USBD_LL_SOF>
}
 800e906:	bf00      	nop
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b084      	sub	sp, #16
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e916:	2301      	movs	r3, #1
 800e918:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d001      	beq.n	800e926 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e922:	f7f3 fe3b 	bl	800259c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e92c:	7bfa      	ldrb	r2, [r7, #15]
 800e92e:	4611      	mov	r1, r2
 800e930:	4618      	mov	r0, r3
 800e932:	f7fb fde6 	bl	800a502 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7fb fd8e 	bl	800a45e <USBD_LL_Reset>
}
 800e942:	bf00      	nop
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
	...

0800e94c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fb fde1 	bl	800a522 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	6812      	ldr	r2, [r2, #0]
 800e96e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e972:	f043 0301 	orr.w	r3, r3, #1
 800e976:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6a1b      	ldr	r3, [r3, #32]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d005      	beq.n	800e98c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e980:	4b04      	ldr	r3, [pc, #16]	; (800e994 <HAL_PCD_SuspendCallback+0x48>)
 800e982:	691b      	ldr	r3, [r3, #16]
 800e984:	4a03      	ldr	r2, [pc, #12]	; (800e994 <HAL_PCD_SuspendCallback+0x48>)
 800e986:	f043 0306 	orr.w	r3, r3, #6
 800e98a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e98c:	bf00      	nop
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	e000ed00 	.word	0xe000ed00

0800e998 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fb fdd1 	bl	800a54e <USBD_LL_Resume>
}
 800e9ac:	bf00      	nop
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9c6:	78fa      	ldrb	r2, [r7, #3]
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fb fe29 	bl	800a622 <USBD_LL_IsoOUTIncomplete>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9ea:	78fa      	ldrb	r2, [r7, #3]
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fb fde5 	bl	800a5be <USBD_LL_IsoINIncomplete>
}
 800e9f4:	bf00      	nop
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fb fe3b 	bl	800a686 <USBD_LL_DevConnected>
}
 800ea10:	bf00      	nop
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fb fe38 	bl	800a69c <USBD_LL_DevDisconnected>
}
 800ea2c:	bf00      	nop
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d13c      	bne.n	800eabe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ea44:	4a20      	ldr	r2, [pc, #128]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a1e      	ldr	r2, [pc, #120]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea50:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea54:	4b1c      	ldr	r3, [pc, #112]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ea5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ea5c:	4b1a      	ldr	r3, [pc, #104]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea5e:	2204      	movs	r2, #4
 800ea60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ea62:	4b19      	ldr	r3, [pc, #100]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea64:	2202      	movs	r2, #2
 800ea66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea68:	4b17      	ldr	r3, [pc, #92]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ea6e:	4b16      	ldr	r3, [pc, #88]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea70:	2202      	movs	r2, #2
 800ea72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea74:	4b14      	ldr	r3, [pc, #80]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea76:	2200      	movs	r2, #0
 800ea78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ea7a:	4b13      	ldr	r3, [pc, #76]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ea80:	4b11      	ldr	r3, [pc, #68]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea82:	2200      	movs	r2, #0
 800ea84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ea86:	4b10      	ldr	r3, [pc, #64]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea88:	2200      	movs	r2, #0
 800ea8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ea8c:	4b0e      	ldr	r3, [pc, #56]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ea92:	480d      	ldr	r0, [pc, #52]	; (800eac8 <USBD_LL_Init+0x94>)
 800ea94:	f7f5 fd8b 	bl	80045ae <HAL_PCD_Init>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d001      	beq.n	800eaa2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ea9e:	f7f3 fd7d 	bl	800259c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eaa2:	2180      	movs	r1, #128	; 0x80
 800eaa4:	4808      	ldr	r0, [pc, #32]	; (800eac8 <USBD_LL_Init+0x94>)
 800eaa6:	f7f6 ffe2 	bl	8005a6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eaaa:	2240      	movs	r2, #64	; 0x40
 800eaac:	2100      	movs	r1, #0
 800eaae:	4806      	ldr	r0, [pc, #24]	; (800eac8 <USBD_LL_Init+0x94>)
 800eab0:	f7f6 ff96 	bl	80059e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eab4:	2280      	movs	r2, #128	; 0x80
 800eab6:	2101      	movs	r1, #1
 800eab8:	4803      	ldr	r0, [pc, #12]	; (800eac8 <USBD_LL_Init+0x94>)
 800eaba:	f7f6 ff91 	bl	80059e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	200064ec 	.word	0x200064ec

0800eacc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ead8:	2300      	movs	r3, #0
 800eada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7f5 fe80 	bl	80047e8 <HAL_PCD_Start>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f000 f942 	bl	800ed78 <USBD_Get_USB_Status>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eaf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	4608      	mov	r0, r1
 800eb0c:	4611      	mov	r1, r2
 800eb0e:	461a      	mov	r2, r3
 800eb10:	4603      	mov	r3, r0
 800eb12:	70fb      	strb	r3, [r7, #3]
 800eb14:	460b      	mov	r3, r1
 800eb16:	70bb      	strb	r3, [r7, #2]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb20:	2300      	movs	r3, #0
 800eb22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eb2a:	78bb      	ldrb	r3, [r7, #2]
 800eb2c:	883a      	ldrh	r2, [r7, #0]
 800eb2e:	78f9      	ldrb	r1, [r7, #3]
 800eb30:	f7f6 fb51 	bl	80051d6 <HAL_PCD_EP_Open>
 800eb34:	4603      	mov	r3, r0
 800eb36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb38:	7bfb      	ldrb	r3, [r7, #15]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 f91c 	bl	800ed78 <USBD_Get_USB_Status>
 800eb40:	4603      	mov	r3, r0
 800eb42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb44:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b084      	sub	sp, #16
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	460b      	mov	r3, r1
 800eb58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb68:	78fa      	ldrb	r2, [r7, #3]
 800eb6a:	4611      	mov	r1, r2
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7f6 fb9a 	bl	80052a6 <HAL_PCD_EP_Close>
 800eb72:	4603      	mov	r3, r0
 800eb74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb76:	7bfb      	ldrb	r3, [r7, #15]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 f8fd 	bl	800ed78 <USBD_Get_USB_Status>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb82:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	460b      	mov	r3, r1
 800eb96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eba6:	78fa      	ldrb	r2, [r7, #3]
 800eba8:	4611      	mov	r1, r2
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7f6 fc72 	bl	8005494 <HAL_PCD_EP_SetStall>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebb4:	7bfb      	ldrb	r3, [r7, #15]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f000 f8de 	bl	800ed78 <USBD_Get_USB_Status>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebe4:	78fa      	ldrb	r2, [r7, #3]
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7f6 fcb7 	bl	800555c <HAL_PCD_EP_ClrStall>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebf2:	7bfb      	ldrb	r3, [r7, #15]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f000 f8bf 	bl	800ed78 <USBD_Get_USB_Status>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b085      	sub	sp, #20
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	da0b      	bge.n	800ec3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec24:	78fb      	ldrb	r3, [r7, #3]
 800ec26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec2a:	68f9      	ldr	r1, [r7, #12]
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	00db      	lsls	r3, r3, #3
 800ec30:	4413      	add	r3, r2
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	440b      	add	r3, r1
 800ec36:	333e      	adds	r3, #62	; 0x3e
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	e00b      	b.n	800ec54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec3c:	78fb      	ldrb	r3, [r7, #3]
 800ec3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec42:	68f9      	ldr	r1, [r7, #12]
 800ec44:	4613      	mov	r3, r2
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	4413      	add	r3, r2
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	440b      	add	r3, r1
 800ec4e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ec52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3714      	adds	r7, #20
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec70:	2300      	movs	r3, #0
 800ec72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec7a:	78fa      	ldrb	r2, [r7, #3]
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7f6 fa84 	bl	800518c <HAL_PCD_SetAddress>
 800ec84:	4603      	mov	r3, r0
 800ec86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f000 f874 	bl	800ed78 <USBD_Get_USB_Status>
 800ec90:	4603      	mov	r3, r0
 800ec92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b086      	sub	sp, #24
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	60f8      	str	r0, [r7, #12]
 800eca6:	607a      	str	r2, [r7, #4]
 800eca8:	603b      	str	r3, [r7, #0]
 800ecaa:	460b      	mov	r3, r1
 800ecac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ecbc:	7af9      	ldrb	r1, [r7, #11]
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	f7f6 fb9d 	bl	8005400 <HAL_PCD_EP_Transmit>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecca:	7dfb      	ldrb	r3, [r7, #23]
 800eccc:	4618      	mov	r0, r3
 800ecce:	f000 f853 	bl	800ed78 <USBD_Get_USB_Status>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ecd6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	607a      	str	r2, [r7, #4]
 800ecea:	603b      	str	r3, [r7, #0]
 800ecec:	460b      	mov	r3, r1
 800ecee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ecfe:	7af9      	ldrb	r1, [r7, #11]
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	f7f6 fb19 	bl	800533a <HAL_PCD_EP_Receive>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed0c:	7dfb      	ldrb	r3, [r7, #23]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f000 f832 	bl	800ed78 <USBD_Get_USB_Status>
 800ed14:	4603      	mov	r3, r0
 800ed16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed18:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3718      	adds	r7, #24
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b082      	sub	sp, #8
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed34:	78fa      	ldrb	r2, [r7, #3]
 800ed36:	4611      	mov	r1, r2
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7f6 fb49 	bl	80053d0 <HAL_PCD_EP_GetRxCount>
 800ed3e:	4603      	mov	r3, r0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ed50:	4b03      	ldr	r3, [pc, #12]	; (800ed60 <USBD_static_malloc+0x18>)
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	370c      	adds	r7, #12
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	200069f8 	.word	0x200069f8

0800ed64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]

}
 800ed6c:	bf00      	nop
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed82:	2300      	movs	r3, #0
 800ed84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d817      	bhi.n	800edbc <USBD_Get_USB_Status+0x44>
 800ed8c:	a201      	add	r2, pc, #4	; (adr r2, 800ed94 <USBD_Get_USB_Status+0x1c>)
 800ed8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed92:	bf00      	nop
 800ed94:	0800eda5 	.word	0x0800eda5
 800ed98:	0800edab 	.word	0x0800edab
 800ed9c:	0800edb1 	.word	0x0800edb1
 800eda0:	0800edb7 	.word	0x0800edb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eda4:	2300      	movs	r3, #0
 800eda6:	73fb      	strb	r3, [r7, #15]
    break;
 800eda8:	e00b      	b.n	800edc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edaa:	2303      	movs	r3, #3
 800edac:	73fb      	strb	r3, [r7, #15]
    break;
 800edae:	e008      	b.n	800edc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800edb0:	2301      	movs	r3, #1
 800edb2:	73fb      	strb	r3, [r7, #15]
    break;
 800edb4:	e005      	b.n	800edc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800edb6:	2303      	movs	r3, #3
 800edb8:	73fb      	strb	r3, [r7, #15]
    break;
 800edba:	e002      	b.n	800edc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800edbc:	2303      	movs	r3, #3
 800edbe:	73fb      	strb	r3, [r7, #15]
    break;
 800edc0:	bf00      	nop
  }
  return usb_status;
 800edc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3714      	adds	r7, #20
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <__errno>:
 800edd0:	4b01      	ldr	r3, [pc, #4]	; (800edd8 <__errno+0x8>)
 800edd2:	6818      	ldr	r0, [r3, #0]
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	20000618 	.word	0x20000618

0800eddc <__libc_init_array>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	4d0d      	ldr	r5, [pc, #52]	; (800ee14 <__libc_init_array+0x38>)
 800ede0:	4c0d      	ldr	r4, [pc, #52]	; (800ee18 <__libc_init_array+0x3c>)
 800ede2:	1b64      	subs	r4, r4, r5
 800ede4:	10a4      	asrs	r4, r4, #2
 800ede6:	2600      	movs	r6, #0
 800ede8:	42a6      	cmp	r6, r4
 800edea:	d109      	bne.n	800ee00 <__libc_init_array+0x24>
 800edec:	4d0b      	ldr	r5, [pc, #44]	; (800ee1c <__libc_init_array+0x40>)
 800edee:	4c0c      	ldr	r4, [pc, #48]	; (800ee20 <__libc_init_array+0x44>)
 800edf0:	f000 fcb2 	bl	800f758 <_init>
 800edf4:	1b64      	subs	r4, r4, r5
 800edf6:	10a4      	asrs	r4, r4, #2
 800edf8:	2600      	movs	r6, #0
 800edfa:	42a6      	cmp	r6, r4
 800edfc:	d105      	bne.n	800ee0a <__libc_init_array+0x2e>
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee04:	4798      	blx	r3
 800ee06:	3601      	adds	r6, #1
 800ee08:	e7ee      	b.n	800ede8 <__libc_init_array+0xc>
 800ee0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee0e:	4798      	blx	r3
 800ee10:	3601      	adds	r6, #1
 800ee12:	e7f2      	b.n	800edfa <__libc_init_array+0x1e>
 800ee14:	0800fdfc 	.word	0x0800fdfc
 800ee18:	0800fdfc 	.word	0x0800fdfc
 800ee1c:	0800fdfc 	.word	0x0800fdfc
 800ee20:	0800fe00 	.word	0x0800fe00

0800ee24 <malloc>:
 800ee24:	4b02      	ldr	r3, [pc, #8]	; (800ee30 <malloc+0xc>)
 800ee26:	4601      	mov	r1, r0
 800ee28:	6818      	ldr	r0, [r3, #0]
 800ee2a:	f000 b88d 	b.w	800ef48 <_malloc_r>
 800ee2e:	bf00      	nop
 800ee30:	20000618 	.word	0x20000618

0800ee34 <free>:
 800ee34:	4b02      	ldr	r3, [pc, #8]	; (800ee40 <free+0xc>)
 800ee36:	4601      	mov	r1, r0
 800ee38:	6818      	ldr	r0, [r3, #0]
 800ee3a:	f000 b819 	b.w	800ee70 <_free_r>
 800ee3e:	bf00      	nop
 800ee40:	20000618 	.word	0x20000618

0800ee44 <memcpy>:
 800ee44:	440a      	add	r2, r1
 800ee46:	4291      	cmp	r1, r2
 800ee48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee4c:	d100      	bne.n	800ee50 <memcpy+0xc>
 800ee4e:	4770      	bx	lr
 800ee50:	b510      	push	{r4, lr}
 800ee52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee5a:	4291      	cmp	r1, r2
 800ee5c:	d1f9      	bne.n	800ee52 <memcpy+0xe>
 800ee5e:	bd10      	pop	{r4, pc}

0800ee60 <memset>:
 800ee60:	4402      	add	r2, r0
 800ee62:	4603      	mov	r3, r0
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d100      	bne.n	800ee6a <memset+0xa>
 800ee68:	4770      	bx	lr
 800ee6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee6e:	e7f9      	b.n	800ee64 <memset+0x4>

0800ee70 <_free_r>:
 800ee70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee72:	2900      	cmp	r1, #0
 800ee74:	d044      	beq.n	800ef00 <_free_r+0x90>
 800ee76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee7a:	9001      	str	r0, [sp, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ee82:	bfb8      	it	lt
 800ee84:	18e4      	addlt	r4, r4, r3
 800ee86:	f000 f917 	bl	800f0b8 <__malloc_lock>
 800ee8a:	4a1e      	ldr	r2, [pc, #120]	; (800ef04 <_free_r+0x94>)
 800ee8c:	9801      	ldr	r0, [sp, #4]
 800ee8e:	6813      	ldr	r3, [r2, #0]
 800ee90:	b933      	cbnz	r3, 800eea0 <_free_r+0x30>
 800ee92:	6063      	str	r3, [r4, #4]
 800ee94:	6014      	str	r4, [r2, #0]
 800ee96:	b003      	add	sp, #12
 800ee98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee9c:	f000 b912 	b.w	800f0c4 <__malloc_unlock>
 800eea0:	42a3      	cmp	r3, r4
 800eea2:	d908      	bls.n	800eeb6 <_free_r+0x46>
 800eea4:	6825      	ldr	r5, [r4, #0]
 800eea6:	1961      	adds	r1, r4, r5
 800eea8:	428b      	cmp	r3, r1
 800eeaa:	bf01      	itttt	eq
 800eeac:	6819      	ldreq	r1, [r3, #0]
 800eeae:	685b      	ldreq	r3, [r3, #4]
 800eeb0:	1949      	addeq	r1, r1, r5
 800eeb2:	6021      	streq	r1, [r4, #0]
 800eeb4:	e7ed      	b.n	800ee92 <_free_r+0x22>
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	b10b      	cbz	r3, 800eec0 <_free_r+0x50>
 800eebc:	42a3      	cmp	r3, r4
 800eebe:	d9fa      	bls.n	800eeb6 <_free_r+0x46>
 800eec0:	6811      	ldr	r1, [r2, #0]
 800eec2:	1855      	adds	r5, r2, r1
 800eec4:	42a5      	cmp	r5, r4
 800eec6:	d10b      	bne.n	800eee0 <_free_r+0x70>
 800eec8:	6824      	ldr	r4, [r4, #0]
 800eeca:	4421      	add	r1, r4
 800eecc:	1854      	adds	r4, r2, r1
 800eece:	42a3      	cmp	r3, r4
 800eed0:	6011      	str	r1, [r2, #0]
 800eed2:	d1e0      	bne.n	800ee96 <_free_r+0x26>
 800eed4:	681c      	ldr	r4, [r3, #0]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	6053      	str	r3, [r2, #4]
 800eeda:	4421      	add	r1, r4
 800eedc:	6011      	str	r1, [r2, #0]
 800eede:	e7da      	b.n	800ee96 <_free_r+0x26>
 800eee0:	d902      	bls.n	800eee8 <_free_r+0x78>
 800eee2:	230c      	movs	r3, #12
 800eee4:	6003      	str	r3, [r0, #0]
 800eee6:	e7d6      	b.n	800ee96 <_free_r+0x26>
 800eee8:	6825      	ldr	r5, [r4, #0]
 800eeea:	1961      	adds	r1, r4, r5
 800eeec:	428b      	cmp	r3, r1
 800eeee:	bf04      	itt	eq
 800eef0:	6819      	ldreq	r1, [r3, #0]
 800eef2:	685b      	ldreq	r3, [r3, #4]
 800eef4:	6063      	str	r3, [r4, #4]
 800eef6:	bf04      	itt	eq
 800eef8:	1949      	addeq	r1, r1, r5
 800eefa:	6021      	streq	r1, [r4, #0]
 800eefc:	6054      	str	r4, [r2, #4]
 800eefe:	e7ca      	b.n	800ee96 <_free_r+0x26>
 800ef00:	b003      	add	sp, #12
 800ef02:	bd30      	pop	{r4, r5, pc}
 800ef04:	20006c18 	.word	0x20006c18

0800ef08 <sbrk_aligned>:
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	4e0e      	ldr	r6, [pc, #56]	; (800ef44 <sbrk_aligned+0x3c>)
 800ef0c:	460c      	mov	r4, r1
 800ef0e:	6831      	ldr	r1, [r6, #0]
 800ef10:	4605      	mov	r5, r0
 800ef12:	b911      	cbnz	r1, 800ef1a <sbrk_aligned+0x12>
 800ef14:	f000 f88c 	bl	800f030 <_sbrk_r>
 800ef18:	6030      	str	r0, [r6, #0]
 800ef1a:	4621      	mov	r1, r4
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	f000 f887 	bl	800f030 <_sbrk_r>
 800ef22:	1c43      	adds	r3, r0, #1
 800ef24:	d00a      	beq.n	800ef3c <sbrk_aligned+0x34>
 800ef26:	1cc4      	adds	r4, r0, #3
 800ef28:	f024 0403 	bic.w	r4, r4, #3
 800ef2c:	42a0      	cmp	r0, r4
 800ef2e:	d007      	beq.n	800ef40 <sbrk_aligned+0x38>
 800ef30:	1a21      	subs	r1, r4, r0
 800ef32:	4628      	mov	r0, r5
 800ef34:	f000 f87c 	bl	800f030 <_sbrk_r>
 800ef38:	3001      	adds	r0, #1
 800ef3a:	d101      	bne.n	800ef40 <sbrk_aligned+0x38>
 800ef3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ef40:	4620      	mov	r0, r4
 800ef42:	bd70      	pop	{r4, r5, r6, pc}
 800ef44:	20006c1c 	.word	0x20006c1c

0800ef48 <_malloc_r>:
 800ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4c:	1ccd      	adds	r5, r1, #3
 800ef4e:	f025 0503 	bic.w	r5, r5, #3
 800ef52:	3508      	adds	r5, #8
 800ef54:	2d0c      	cmp	r5, #12
 800ef56:	bf38      	it	cc
 800ef58:	250c      	movcc	r5, #12
 800ef5a:	2d00      	cmp	r5, #0
 800ef5c:	4607      	mov	r7, r0
 800ef5e:	db01      	blt.n	800ef64 <_malloc_r+0x1c>
 800ef60:	42a9      	cmp	r1, r5
 800ef62:	d905      	bls.n	800ef70 <_malloc_r+0x28>
 800ef64:	230c      	movs	r3, #12
 800ef66:	603b      	str	r3, [r7, #0]
 800ef68:	2600      	movs	r6, #0
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef70:	4e2e      	ldr	r6, [pc, #184]	; (800f02c <_malloc_r+0xe4>)
 800ef72:	f000 f8a1 	bl	800f0b8 <__malloc_lock>
 800ef76:	6833      	ldr	r3, [r6, #0]
 800ef78:	461c      	mov	r4, r3
 800ef7a:	bb34      	cbnz	r4, 800efca <_malloc_r+0x82>
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	4638      	mov	r0, r7
 800ef80:	f7ff ffc2 	bl	800ef08 <sbrk_aligned>
 800ef84:	1c43      	adds	r3, r0, #1
 800ef86:	4604      	mov	r4, r0
 800ef88:	d14d      	bne.n	800f026 <_malloc_r+0xde>
 800ef8a:	6834      	ldr	r4, [r6, #0]
 800ef8c:	4626      	mov	r6, r4
 800ef8e:	2e00      	cmp	r6, #0
 800ef90:	d140      	bne.n	800f014 <_malloc_r+0xcc>
 800ef92:	6823      	ldr	r3, [r4, #0]
 800ef94:	4631      	mov	r1, r6
 800ef96:	4638      	mov	r0, r7
 800ef98:	eb04 0803 	add.w	r8, r4, r3
 800ef9c:	f000 f848 	bl	800f030 <_sbrk_r>
 800efa0:	4580      	cmp	r8, r0
 800efa2:	d13a      	bne.n	800f01a <_malloc_r+0xd2>
 800efa4:	6821      	ldr	r1, [r4, #0]
 800efa6:	3503      	adds	r5, #3
 800efa8:	1a6d      	subs	r5, r5, r1
 800efaa:	f025 0503 	bic.w	r5, r5, #3
 800efae:	3508      	adds	r5, #8
 800efb0:	2d0c      	cmp	r5, #12
 800efb2:	bf38      	it	cc
 800efb4:	250c      	movcc	r5, #12
 800efb6:	4629      	mov	r1, r5
 800efb8:	4638      	mov	r0, r7
 800efba:	f7ff ffa5 	bl	800ef08 <sbrk_aligned>
 800efbe:	3001      	adds	r0, #1
 800efc0:	d02b      	beq.n	800f01a <_malloc_r+0xd2>
 800efc2:	6823      	ldr	r3, [r4, #0]
 800efc4:	442b      	add	r3, r5
 800efc6:	6023      	str	r3, [r4, #0]
 800efc8:	e00e      	b.n	800efe8 <_malloc_r+0xa0>
 800efca:	6822      	ldr	r2, [r4, #0]
 800efcc:	1b52      	subs	r2, r2, r5
 800efce:	d41e      	bmi.n	800f00e <_malloc_r+0xc6>
 800efd0:	2a0b      	cmp	r2, #11
 800efd2:	d916      	bls.n	800f002 <_malloc_r+0xba>
 800efd4:	1961      	adds	r1, r4, r5
 800efd6:	42a3      	cmp	r3, r4
 800efd8:	6025      	str	r5, [r4, #0]
 800efda:	bf18      	it	ne
 800efdc:	6059      	strne	r1, [r3, #4]
 800efde:	6863      	ldr	r3, [r4, #4]
 800efe0:	bf08      	it	eq
 800efe2:	6031      	streq	r1, [r6, #0]
 800efe4:	5162      	str	r2, [r4, r5]
 800efe6:	604b      	str	r3, [r1, #4]
 800efe8:	4638      	mov	r0, r7
 800efea:	f104 060b 	add.w	r6, r4, #11
 800efee:	f000 f869 	bl	800f0c4 <__malloc_unlock>
 800eff2:	f026 0607 	bic.w	r6, r6, #7
 800eff6:	1d23      	adds	r3, r4, #4
 800eff8:	1af2      	subs	r2, r6, r3
 800effa:	d0b6      	beq.n	800ef6a <_malloc_r+0x22>
 800effc:	1b9b      	subs	r3, r3, r6
 800effe:	50a3      	str	r3, [r4, r2]
 800f000:	e7b3      	b.n	800ef6a <_malloc_r+0x22>
 800f002:	6862      	ldr	r2, [r4, #4]
 800f004:	42a3      	cmp	r3, r4
 800f006:	bf0c      	ite	eq
 800f008:	6032      	streq	r2, [r6, #0]
 800f00a:	605a      	strne	r2, [r3, #4]
 800f00c:	e7ec      	b.n	800efe8 <_malloc_r+0xa0>
 800f00e:	4623      	mov	r3, r4
 800f010:	6864      	ldr	r4, [r4, #4]
 800f012:	e7b2      	b.n	800ef7a <_malloc_r+0x32>
 800f014:	4634      	mov	r4, r6
 800f016:	6876      	ldr	r6, [r6, #4]
 800f018:	e7b9      	b.n	800ef8e <_malloc_r+0x46>
 800f01a:	230c      	movs	r3, #12
 800f01c:	603b      	str	r3, [r7, #0]
 800f01e:	4638      	mov	r0, r7
 800f020:	f000 f850 	bl	800f0c4 <__malloc_unlock>
 800f024:	e7a1      	b.n	800ef6a <_malloc_r+0x22>
 800f026:	6025      	str	r5, [r4, #0]
 800f028:	e7de      	b.n	800efe8 <_malloc_r+0xa0>
 800f02a:	bf00      	nop
 800f02c:	20006c18 	.word	0x20006c18

0800f030 <_sbrk_r>:
 800f030:	b538      	push	{r3, r4, r5, lr}
 800f032:	4d06      	ldr	r5, [pc, #24]	; (800f04c <_sbrk_r+0x1c>)
 800f034:	2300      	movs	r3, #0
 800f036:	4604      	mov	r4, r0
 800f038:	4608      	mov	r0, r1
 800f03a:	602b      	str	r3, [r5, #0]
 800f03c:	f7f3 ff70 	bl	8002f20 <_sbrk>
 800f040:	1c43      	adds	r3, r0, #1
 800f042:	d102      	bne.n	800f04a <_sbrk_r+0x1a>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	b103      	cbz	r3, 800f04a <_sbrk_r+0x1a>
 800f048:	6023      	str	r3, [r4, #0]
 800f04a:	bd38      	pop	{r3, r4, r5, pc}
 800f04c:	20006c20 	.word	0x20006c20

0800f050 <siprintf>:
 800f050:	b40e      	push	{r1, r2, r3}
 800f052:	b500      	push	{lr}
 800f054:	b09c      	sub	sp, #112	; 0x70
 800f056:	ab1d      	add	r3, sp, #116	; 0x74
 800f058:	9002      	str	r0, [sp, #8]
 800f05a:	9006      	str	r0, [sp, #24]
 800f05c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f060:	4809      	ldr	r0, [pc, #36]	; (800f088 <siprintf+0x38>)
 800f062:	9107      	str	r1, [sp, #28]
 800f064:	9104      	str	r1, [sp, #16]
 800f066:	4909      	ldr	r1, [pc, #36]	; (800f08c <siprintf+0x3c>)
 800f068:	f853 2b04 	ldr.w	r2, [r3], #4
 800f06c:	9105      	str	r1, [sp, #20]
 800f06e:	6800      	ldr	r0, [r0, #0]
 800f070:	9301      	str	r3, [sp, #4]
 800f072:	a902      	add	r1, sp, #8
 800f074:	f000 f888 	bl	800f188 <_svfiprintf_r>
 800f078:	9b02      	ldr	r3, [sp, #8]
 800f07a:	2200      	movs	r2, #0
 800f07c:	701a      	strb	r2, [r3, #0]
 800f07e:	b01c      	add	sp, #112	; 0x70
 800f080:	f85d eb04 	ldr.w	lr, [sp], #4
 800f084:	b003      	add	sp, #12
 800f086:	4770      	bx	lr
 800f088:	20000618 	.word	0x20000618
 800f08c:	ffff0208 	.word	0xffff0208

0800f090 <strncpy>:
 800f090:	b510      	push	{r4, lr}
 800f092:	3901      	subs	r1, #1
 800f094:	4603      	mov	r3, r0
 800f096:	b132      	cbz	r2, 800f0a6 <strncpy+0x16>
 800f098:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f09c:	f803 4b01 	strb.w	r4, [r3], #1
 800f0a0:	3a01      	subs	r2, #1
 800f0a2:	2c00      	cmp	r4, #0
 800f0a4:	d1f7      	bne.n	800f096 <strncpy+0x6>
 800f0a6:	441a      	add	r2, r3
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d100      	bne.n	800f0b0 <strncpy+0x20>
 800f0ae:	bd10      	pop	{r4, pc}
 800f0b0:	f803 1b01 	strb.w	r1, [r3], #1
 800f0b4:	e7f9      	b.n	800f0aa <strncpy+0x1a>
	...

0800f0b8 <__malloc_lock>:
 800f0b8:	4801      	ldr	r0, [pc, #4]	; (800f0c0 <__malloc_lock+0x8>)
 800f0ba:	f000 baf9 	b.w	800f6b0 <__retarget_lock_acquire_recursive>
 800f0be:	bf00      	nop
 800f0c0:	20006c24 	.word	0x20006c24

0800f0c4 <__malloc_unlock>:
 800f0c4:	4801      	ldr	r0, [pc, #4]	; (800f0cc <__malloc_unlock+0x8>)
 800f0c6:	f000 baf4 	b.w	800f6b2 <__retarget_lock_release_recursive>
 800f0ca:	bf00      	nop
 800f0cc:	20006c24 	.word	0x20006c24

0800f0d0 <__ssputs_r>:
 800f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	688e      	ldr	r6, [r1, #8]
 800f0d6:	429e      	cmp	r6, r3
 800f0d8:	4682      	mov	sl, r0
 800f0da:	460c      	mov	r4, r1
 800f0dc:	4690      	mov	r8, r2
 800f0de:	461f      	mov	r7, r3
 800f0e0:	d838      	bhi.n	800f154 <__ssputs_r+0x84>
 800f0e2:	898a      	ldrh	r2, [r1, #12]
 800f0e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0e8:	d032      	beq.n	800f150 <__ssputs_r+0x80>
 800f0ea:	6825      	ldr	r5, [r4, #0]
 800f0ec:	6909      	ldr	r1, [r1, #16]
 800f0ee:	eba5 0901 	sub.w	r9, r5, r1
 800f0f2:	6965      	ldr	r5, [r4, #20]
 800f0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	444b      	add	r3, r9
 800f100:	106d      	asrs	r5, r5, #1
 800f102:	429d      	cmp	r5, r3
 800f104:	bf38      	it	cc
 800f106:	461d      	movcc	r5, r3
 800f108:	0553      	lsls	r3, r2, #21
 800f10a:	d531      	bpl.n	800f170 <__ssputs_r+0xa0>
 800f10c:	4629      	mov	r1, r5
 800f10e:	f7ff ff1b 	bl	800ef48 <_malloc_r>
 800f112:	4606      	mov	r6, r0
 800f114:	b950      	cbnz	r0, 800f12c <__ssputs_r+0x5c>
 800f116:	230c      	movs	r3, #12
 800f118:	f8ca 3000 	str.w	r3, [sl]
 800f11c:	89a3      	ldrh	r3, [r4, #12]
 800f11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f122:	81a3      	strh	r3, [r4, #12]
 800f124:	f04f 30ff 	mov.w	r0, #4294967295
 800f128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f12c:	6921      	ldr	r1, [r4, #16]
 800f12e:	464a      	mov	r2, r9
 800f130:	f7ff fe88 	bl	800ee44 <memcpy>
 800f134:	89a3      	ldrh	r3, [r4, #12]
 800f136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f13e:	81a3      	strh	r3, [r4, #12]
 800f140:	6126      	str	r6, [r4, #16]
 800f142:	6165      	str	r5, [r4, #20]
 800f144:	444e      	add	r6, r9
 800f146:	eba5 0509 	sub.w	r5, r5, r9
 800f14a:	6026      	str	r6, [r4, #0]
 800f14c:	60a5      	str	r5, [r4, #8]
 800f14e:	463e      	mov	r6, r7
 800f150:	42be      	cmp	r6, r7
 800f152:	d900      	bls.n	800f156 <__ssputs_r+0x86>
 800f154:	463e      	mov	r6, r7
 800f156:	6820      	ldr	r0, [r4, #0]
 800f158:	4632      	mov	r2, r6
 800f15a:	4641      	mov	r1, r8
 800f15c:	f000 faaa 	bl	800f6b4 <memmove>
 800f160:	68a3      	ldr	r3, [r4, #8]
 800f162:	1b9b      	subs	r3, r3, r6
 800f164:	60a3      	str	r3, [r4, #8]
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	4433      	add	r3, r6
 800f16a:	6023      	str	r3, [r4, #0]
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7db      	b.n	800f128 <__ssputs_r+0x58>
 800f170:	462a      	mov	r2, r5
 800f172:	f000 fab9 	bl	800f6e8 <_realloc_r>
 800f176:	4606      	mov	r6, r0
 800f178:	2800      	cmp	r0, #0
 800f17a:	d1e1      	bne.n	800f140 <__ssputs_r+0x70>
 800f17c:	6921      	ldr	r1, [r4, #16]
 800f17e:	4650      	mov	r0, sl
 800f180:	f7ff fe76 	bl	800ee70 <_free_r>
 800f184:	e7c7      	b.n	800f116 <__ssputs_r+0x46>
	...

0800f188 <_svfiprintf_r>:
 800f188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f18c:	4698      	mov	r8, r3
 800f18e:	898b      	ldrh	r3, [r1, #12]
 800f190:	061b      	lsls	r3, r3, #24
 800f192:	b09d      	sub	sp, #116	; 0x74
 800f194:	4607      	mov	r7, r0
 800f196:	460d      	mov	r5, r1
 800f198:	4614      	mov	r4, r2
 800f19a:	d50e      	bpl.n	800f1ba <_svfiprintf_r+0x32>
 800f19c:	690b      	ldr	r3, [r1, #16]
 800f19e:	b963      	cbnz	r3, 800f1ba <_svfiprintf_r+0x32>
 800f1a0:	2140      	movs	r1, #64	; 0x40
 800f1a2:	f7ff fed1 	bl	800ef48 <_malloc_r>
 800f1a6:	6028      	str	r0, [r5, #0]
 800f1a8:	6128      	str	r0, [r5, #16]
 800f1aa:	b920      	cbnz	r0, 800f1b6 <_svfiprintf_r+0x2e>
 800f1ac:	230c      	movs	r3, #12
 800f1ae:	603b      	str	r3, [r7, #0]
 800f1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b4:	e0d1      	b.n	800f35a <_svfiprintf_r+0x1d2>
 800f1b6:	2340      	movs	r3, #64	; 0x40
 800f1b8:	616b      	str	r3, [r5, #20]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f1be:	2320      	movs	r3, #32
 800f1c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1c8:	2330      	movs	r3, #48	; 0x30
 800f1ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f374 <_svfiprintf_r+0x1ec>
 800f1ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1d2:	f04f 0901 	mov.w	r9, #1
 800f1d6:	4623      	mov	r3, r4
 800f1d8:	469a      	mov	sl, r3
 800f1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1de:	b10a      	cbz	r2, 800f1e4 <_svfiprintf_r+0x5c>
 800f1e0:	2a25      	cmp	r2, #37	; 0x25
 800f1e2:	d1f9      	bne.n	800f1d8 <_svfiprintf_r+0x50>
 800f1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f1e8:	d00b      	beq.n	800f202 <_svfiprintf_r+0x7a>
 800f1ea:	465b      	mov	r3, fp
 800f1ec:	4622      	mov	r2, r4
 800f1ee:	4629      	mov	r1, r5
 800f1f0:	4638      	mov	r0, r7
 800f1f2:	f7ff ff6d 	bl	800f0d0 <__ssputs_r>
 800f1f6:	3001      	adds	r0, #1
 800f1f8:	f000 80aa 	beq.w	800f350 <_svfiprintf_r+0x1c8>
 800f1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1fe:	445a      	add	r2, fp
 800f200:	9209      	str	r2, [sp, #36]	; 0x24
 800f202:	f89a 3000 	ldrb.w	r3, [sl]
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 80a2 	beq.w	800f350 <_svfiprintf_r+0x1c8>
 800f20c:	2300      	movs	r3, #0
 800f20e:	f04f 32ff 	mov.w	r2, #4294967295
 800f212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f216:	f10a 0a01 	add.w	sl, sl, #1
 800f21a:	9304      	str	r3, [sp, #16]
 800f21c:	9307      	str	r3, [sp, #28]
 800f21e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f222:	931a      	str	r3, [sp, #104]	; 0x68
 800f224:	4654      	mov	r4, sl
 800f226:	2205      	movs	r2, #5
 800f228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f22c:	4851      	ldr	r0, [pc, #324]	; (800f374 <_svfiprintf_r+0x1ec>)
 800f22e:	f7f0 ffdf 	bl	80001f0 <memchr>
 800f232:	9a04      	ldr	r2, [sp, #16]
 800f234:	b9d8      	cbnz	r0, 800f26e <_svfiprintf_r+0xe6>
 800f236:	06d0      	lsls	r0, r2, #27
 800f238:	bf44      	itt	mi
 800f23a:	2320      	movmi	r3, #32
 800f23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f240:	0711      	lsls	r1, r2, #28
 800f242:	bf44      	itt	mi
 800f244:	232b      	movmi	r3, #43	; 0x2b
 800f246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f24a:	f89a 3000 	ldrb.w	r3, [sl]
 800f24e:	2b2a      	cmp	r3, #42	; 0x2a
 800f250:	d015      	beq.n	800f27e <_svfiprintf_r+0xf6>
 800f252:	9a07      	ldr	r2, [sp, #28]
 800f254:	4654      	mov	r4, sl
 800f256:	2000      	movs	r0, #0
 800f258:	f04f 0c0a 	mov.w	ip, #10
 800f25c:	4621      	mov	r1, r4
 800f25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f262:	3b30      	subs	r3, #48	; 0x30
 800f264:	2b09      	cmp	r3, #9
 800f266:	d94e      	bls.n	800f306 <_svfiprintf_r+0x17e>
 800f268:	b1b0      	cbz	r0, 800f298 <_svfiprintf_r+0x110>
 800f26a:	9207      	str	r2, [sp, #28]
 800f26c:	e014      	b.n	800f298 <_svfiprintf_r+0x110>
 800f26e:	eba0 0308 	sub.w	r3, r0, r8
 800f272:	fa09 f303 	lsl.w	r3, r9, r3
 800f276:	4313      	orrs	r3, r2
 800f278:	9304      	str	r3, [sp, #16]
 800f27a:	46a2      	mov	sl, r4
 800f27c:	e7d2      	b.n	800f224 <_svfiprintf_r+0x9c>
 800f27e:	9b03      	ldr	r3, [sp, #12]
 800f280:	1d19      	adds	r1, r3, #4
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	9103      	str	r1, [sp, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	bfbb      	ittet	lt
 800f28a:	425b      	neglt	r3, r3
 800f28c:	f042 0202 	orrlt.w	r2, r2, #2
 800f290:	9307      	strge	r3, [sp, #28]
 800f292:	9307      	strlt	r3, [sp, #28]
 800f294:	bfb8      	it	lt
 800f296:	9204      	strlt	r2, [sp, #16]
 800f298:	7823      	ldrb	r3, [r4, #0]
 800f29a:	2b2e      	cmp	r3, #46	; 0x2e
 800f29c:	d10c      	bne.n	800f2b8 <_svfiprintf_r+0x130>
 800f29e:	7863      	ldrb	r3, [r4, #1]
 800f2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a2:	d135      	bne.n	800f310 <_svfiprintf_r+0x188>
 800f2a4:	9b03      	ldr	r3, [sp, #12]
 800f2a6:	1d1a      	adds	r2, r3, #4
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	9203      	str	r2, [sp, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	bfb8      	it	lt
 800f2b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2b4:	3402      	adds	r4, #2
 800f2b6:	9305      	str	r3, [sp, #20]
 800f2b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f384 <_svfiprintf_r+0x1fc>
 800f2bc:	7821      	ldrb	r1, [r4, #0]
 800f2be:	2203      	movs	r2, #3
 800f2c0:	4650      	mov	r0, sl
 800f2c2:	f7f0 ff95 	bl	80001f0 <memchr>
 800f2c6:	b140      	cbz	r0, 800f2da <_svfiprintf_r+0x152>
 800f2c8:	2340      	movs	r3, #64	; 0x40
 800f2ca:	eba0 000a 	sub.w	r0, r0, sl
 800f2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800f2d2:	9b04      	ldr	r3, [sp, #16]
 800f2d4:	4303      	orrs	r3, r0
 800f2d6:	3401      	adds	r4, #1
 800f2d8:	9304      	str	r3, [sp, #16]
 800f2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2de:	4826      	ldr	r0, [pc, #152]	; (800f378 <_svfiprintf_r+0x1f0>)
 800f2e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2e4:	2206      	movs	r2, #6
 800f2e6:	f7f0 ff83 	bl	80001f0 <memchr>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d038      	beq.n	800f360 <_svfiprintf_r+0x1d8>
 800f2ee:	4b23      	ldr	r3, [pc, #140]	; (800f37c <_svfiprintf_r+0x1f4>)
 800f2f0:	bb1b      	cbnz	r3, 800f33a <_svfiprintf_r+0x1b2>
 800f2f2:	9b03      	ldr	r3, [sp, #12]
 800f2f4:	3307      	adds	r3, #7
 800f2f6:	f023 0307 	bic.w	r3, r3, #7
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	9303      	str	r3, [sp, #12]
 800f2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f300:	4433      	add	r3, r6
 800f302:	9309      	str	r3, [sp, #36]	; 0x24
 800f304:	e767      	b.n	800f1d6 <_svfiprintf_r+0x4e>
 800f306:	fb0c 3202 	mla	r2, ip, r2, r3
 800f30a:	460c      	mov	r4, r1
 800f30c:	2001      	movs	r0, #1
 800f30e:	e7a5      	b.n	800f25c <_svfiprintf_r+0xd4>
 800f310:	2300      	movs	r3, #0
 800f312:	3401      	adds	r4, #1
 800f314:	9305      	str	r3, [sp, #20]
 800f316:	4619      	mov	r1, r3
 800f318:	f04f 0c0a 	mov.w	ip, #10
 800f31c:	4620      	mov	r0, r4
 800f31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f322:	3a30      	subs	r2, #48	; 0x30
 800f324:	2a09      	cmp	r2, #9
 800f326:	d903      	bls.n	800f330 <_svfiprintf_r+0x1a8>
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d0c5      	beq.n	800f2b8 <_svfiprintf_r+0x130>
 800f32c:	9105      	str	r1, [sp, #20]
 800f32e:	e7c3      	b.n	800f2b8 <_svfiprintf_r+0x130>
 800f330:	fb0c 2101 	mla	r1, ip, r1, r2
 800f334:	4604      	mov	r4, r0
 800f336:	2301      	movs	r3, #1
 800f338:	e7f0      	b.n	800f31c <_svfiprintf_r+0x194>
 800f33a:	ab03      	add	r3, sp, #12
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	462a      	mov	r2, r5
 800f340:	4b0f      	ldr	r3, [pc, #60]	; (800f380 <_svfiprintf_r+0x1f8>)
 800f342:	a904      	add	r1, sp, #16
 800f344:	4638      	mov	r0, r7
 800f346:	f3af 8000 	nop.w
 800f34a:	1c42      	adds	r2, r0, #1
 800f34c:	4606      	mov	r6, r0
 800f34e:	d1d6      	bne.n	800f2fe <_svfiprintf_r+0x176>
 800f350:	89ab      	ldrh	r3, [r5, #12]
 800f352:	065b      	lsls	r3, r3, #25
 800f354:	f53f af2c 	bmi.w	800f1b0 <_svfiprintf_r+0x28>
 800f358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f35a:	b01d      	add	sp, #116	; 0x74
 800f35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f360:	ab03      	add	r3, sp, #12
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	462a      	mov	r2, r5
 800f366:	4b06      	ldr	r3, [pc, #24]	; (800f380 <_svfiprintf_r+0x1f8>)
 800f368:	a904      	add	r1, sp, #16
 800f36a:	4638      	mov	r0, r7
 800f36c:	f000 f87a 	bl	800f464 <_printf_i>
 800f370:	e7eb      	b.n	800f34a <_svfiprintf_r+0x1c2>
 800f372:	bf00      	nop
 800f374:	0800fdc0 	.word	0x0800fdc0
 800f378:	0800fdca 	.word	0x0800fdca
 800f37c:	00000000 	.word	0x00000000
 800f380:	0800f0d1 	.word	0x0800f0d1
 800f384:	0800fdc6 	.word	0x0800fdc6

0800f388 <_printf_common>:
 800f388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f38c:	4616      	mov	r6, r2
 800f38e:	4699      	mov	r9, r3
 800f390:	688a      	ldr	r2, [r1, #8]
 800f392:	690b      	ldr	r3, [r1, #16]
 800f394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f398:	4293      	cmp	r3, r2
 800f39a:	bfb8      	it	lt
 800f39c:	4613      	movlt	r3, r2
 800f39e:	6033      	str	r3, [r6, #0]
 800f3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3a4:	4607      	mov	r7, r0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	b10a      	cbz	r2, 800f3ae <_printf_common+0x26>
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	6033      	str	r3, [r6, #0]
 800f3ae:	6823      	ldr	r3, [r4, #0]
 800f3b0:	0699      	lsls	r1, r3, #26
 800f3b2:	bf42      	ittt	mi
 800f3b4:	6833      	ldrmi	r3, [r6, #0]
 800f3b6:	3302      	addmi	r3, #2
 800f3b8:	6033      	strmi	r3, [r6, #0]
 800f3ba:	6825      	ldr	r5, [r4, #0]
 800f3bc:	f015 0506 	ands.w	r5, r5, #6
 800f3c0:	d106      	bne.n	800f3d0 <_printf_common+0x48>
 800f3c2:	f104 0a19 	add.w	sl, r4, #25
 800f3c6:	68e3      	ldr	r3, [r4, #12]
 800f3c8:	6832      	ldr	r2, [r6, #0]
 800f3ca:	1a9b      	subs	r3, r3, r2
 800f3cc:	42ab      	cmp	r3, r5
 800f3ce:	dc26      	bgt.n	800f41e <_printf_common+0x96>
 800f3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3d4:	1e13      	subs	r3, r2, #0
 800f3d6:	6822      	ldr	r2, [r4, #0]
 800f3d8:	bf18      	it	ne
 800f3da:	2301      	movne	r3, #1
 800f3dc:	0692      	lsls	r2, r2, #26
 800f3de:	d42b      	bmi.n	800f438 <_printf_common+0xb0>
 800f3e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3e4:	4649      	mov	r1, r9
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	47c0      	blx	r8
 800f3ea:	3001      	adds	r0, #1
 800f3ec:	d01e      	beq.n	800f42c <_printf_common+0xa4>
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	68e5      	ldr	r5, [r4, #12]
 800f3f2:	6832      	ldr	r2, [r6, #0]
 800f3f4:	f003 0306 	and.w	r3, r3, #6
 800f3f8:	2b04      	cmp	r3, #4
 800f3fa:	bf08      	it	eq
 800f3fc:	1aad      	subeq	r5, r5, r2
 800f3fe:	68a3      	ldr	r3, [r4, #8]
 800f400:	6922      	ldr	r2, [r4, #16]
 800f402:	bf0c      	ite	eq
 800f404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f408:	2500      	movne	r5, #0
 800f40a:	4293      	cmp	r3, r2
 800f40c:	bfc4      	itt	gt
 800f40e:	1a9b      	subgt	r3, r3, r2
 800f410:	18ed      	addgt	r5, r5, r3
 800f412:	2600      	movs	r6, #0
 800f414:	341a      	adds	r4, #26
 800f416:	42b5      	cmp	r5, r6
 800f418:	d11a      	bne.n	800f450 <_printf_common+0xc8>
 800f41a:	2000      	movs	r0, #0
 800f41c:	e008      	b.n	800f430 <_printf_common+0xa8>
 800f41e:	2301      	movs	r3, #1
 800f420:	4652      	mov	r2, sl
 800f422:	4649      	mov	r1, r9
 800f424:	4638      	mov	r0, r7
 800f426:	47c0      	blx	r8
 800f428:	3001      	adds	r0, #1
 800f42a:	d103      	bne.n	800f434 <_printf_common+0xac>
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295
 800f430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f434:	3501      	adds	r5, #1
 800f436:	e7c6      	b.n	800f3c6 <_printf_common+0x3e>
 800f438:	18e1      	adds	r1, r4, r3
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	2030      	movs	r0, #48	; 0x30
 800f43e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f442:	4422      	add	r2, r4
 800f444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f44c:	3302      	adds	r3, #2
 800f44e:	e7c7      	b.n	800f3e0 <_printf_common+0x58>
 800f450:	2301      	movs	r3, #1
 800f452:	4622      	mov	r2, r4
 800f454:	4649      	mov	r1, r9
 800f456:	4638      	mov	r0, r7
 800f458:	47c0      	blx	r8
 800f45a:	3001      	adds	r0, #1
 800f45c:	d0e6      	beq.n	800f42c <_printf_common+0xa4>
 800f45e:	3601      	adds	r6, #1
 800f460:	e7d9      	b.n	800f416 <_printf_common+0x8e>
	...

0800f464 <_printf_i>:
 800f464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f468:	7e0f      	ldrb	r7, [r1, #24]
 800f46a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f46c:	2f78      	cmp	r7, #120	; 0x78
 800f46e:	4691      	mov	r9, r2
 800f470:	4680      	mov	r8, r0
 800f472:	460c      	mov	r4, r1
 800f474:	469a      	mov	sl, r3
 800f476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f47a:	d807      	bhi.n	800f48c <_printf_i+0x28>
 800f47c:	2f62      	cmp	r7, #98	; 0x62
 800f47e:	d80a      	bhi.n	800f496 <_printf_i+0x32>
 800f480:	2f00      	cmp	r7, #0
 800f482:	f000 80d8 	beq.w	800f636 <_printf_i+0x1d2>
 800f486:	2f58      	cmp	r7, #88	; 0x58
 800f488:	f000 80a3 	beq.w	800f5d2 <_printf_i+0x16e>
 800f48c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f494:	e03a      	b.n	800f50c <_printf_i+0xa8>
 800f496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f49a:	2b15      	cmp	r3, #21
 800f49c:	d8f6      	bhi.n	800f48c <_printf_i+0x28>
 800f49e:	a101      	add	r1, pc, #4	; (adr r1, 800f4a4 <_printf_i+0x40>)
 800f4a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4a4:	0800f4fd 	.word	0x0800f4fd
 800f4a8:	0800f511 	.word	0x0800f511
 800f4ac:	0800f48d 	.word	0x0800f48d
 800f4b0:	0800f48d 	.word	0x0800f48d
 800f4b4:	0800f48d 	.word	0x0800f48d
 800f4b8:	0800f48d 	.word	0x0800f48d
 800f4bc:	0800f511 	.word	0x0800f511
 800f4c0:	0800f48d 	.word	0x0800f48d
 800f4c4:	0800f48d 	.word	0x0800f48d
 800f4c8:	0800f48d 	.word	0x0800f48d
 800f4cc:	0800f48d 	.word	0x0800f48d
 800f4d0:	0800f61d 	.word	0x0800f61d
 800f4d4:	0800f541 	.word	0x0800f541
 800f4d8:	0800f5ff 	.word	0x0800f5ff
 800f4dc:	0800f48d 	.word	0x0800f48d
 800f4e0:	0800f48d 	.word	0x0800f48d
 800f4e4:	0800f63f 	.word	0x0800f63f
 800f4e8:	0800f48d 	.word	0x0800f48d
 800f4ec:	0800f541 	.word	0x0800f541
 800f4f0:	0800f48d 	.word	0x0800f48d
 800f4f4:	0800f48d 	.word	0x0800f48d
 800f4f8:	0800f607 	.word	0x0800f607
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	1d1a      	adds	r2, r3, #4
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	602a      	str	r2, [r5, #0]
 800f504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f50c:	2301      	movs	r3, #1
 800f50e:	e0a3      	b.n	800f658 <_printf_i+0x1f4>
 800f510:	6820      	ldr	r0, [r4, #0]
 800f512:	6829      	ldr	r1, [r5, #0]
 800f514:	0606      	lsls	r6, r0, #24
 800f516:	f101 0304 	add.w	r3, r1, #4
 800f51a:	d50a      	bpl.n	800f532 <_printf_i+0xce>
 800f51c:	680e      	ldr	r6, [r1, #0]
 800f51e:	602b      	str	r3, [r5, #0]
 800f520:	2e00      	cmp	r6, #0
 800f522:	da03      	bge.n	800f52c <_printf_i+0xc8>
 800f524:	232d      	movs	r3, #45	; 0x2d
 800f526:	4276      	negs	r6, r6
 800f528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f52c:	485e      	ldr	r0, [pc, #376]	; (800f6a8 <_printf_i+0x244>)
 800f52e:	230a      	movs	r3, #10
 800f530:	e019      	b.n	800f566 <_printf_i+0x102>
 800f532:	680e      	ldr	r6, [r1, #0]
 800f534:	602b      	str	r3, [r5, #0]
 800f536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f53a:	bf18      	it	ne
 800f53c:	b236      	sxthne	r6, r6
 800f53e:	e7ef      	b.n	800f520 <_printf_i+0xbc>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	6820      	ldr	r0, [r4, #0]
 800f544:	1d19      	adds	r1, r3, #4
 800f546:	6029      	str	r1, [r5, #0]
 800f548:	0601      	lsls	r1, r0, #24
 800f54a:	d501      	bpl.n	800f550 <_printf_i+0xec>
 800f54c:	681e      	ldr	r6, [r3, #0]
 800f54e:	e002      	b.n	800f556 <_printf_i+0xf2>
 800f550:	0646      	lsls	r6, r0, #25
 800f552:	d5fb      	bpl.n	800f54c <_printf_i+0xe8>
 800f554:	881e      	ldrh	r6, [r3, #0]
 800f556:	4854      	ldr	r0, [pc, #336]	; (800f6a8 <_printf_i+0x244>)
 800f558:	2f6f      	cmp	r7, #111	; 0x6f
 800f55a:	bf0c      	ite	eq
 800f55c:	2308      	moveq	r3, #8
 800f55e:	230a      	movne	r3, #10
 800f560:	2100      	movs	r1, #0
 800f562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f566:	6865      	ldr	r5, [r4, #4]
 800f568:	60a5      	str	r5, [r4, #8]
 800f56a:	2d00      	cmp	r5, #0
 800f56c:	bfa2      	ittt	ge
 800f56e:	6821      	ldrge	r1, [r4, #0]
 800f570:	f021 0104 	bicge.w	r1, r1, #4
 800f574:	6021      	strge	r1, [r4, #0]
 800f576:	b90e      	cbnz	r6, 800f57c <_printf_i+0x118>
 800f578:	2d00      	cmp	r5, #0
 800f57a:	d04d      	beq.n	800f618 <_printf_i+0x1b4>
 800f57c:	4615      	mov	r5, r2
 800f57e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f582:	fb03 6711 	mls	r7, r3, r1, r6
 800f586:	5dc7      	ldrb	r7, [r0, r7]
 800f588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f58c:	4637      	mov	r7, r6
 800f58e:	42bb      	cmp	r3, r7
 800f590:	460e      	mov	r6, r1
 800f592:	d9f4      	bls.n	800f57e <_printf_i+0x11a>
 800f594:	2b08      	cmp	r3, #8
 800f596:	d10b      	bne.n	800f5b0 <_printf_i+0x14c>
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	07de      	lsls	r6, r3, #31
 800f59c:	d508      	bpl.n	800f5b0 <_printf_i+0x14c>
 800f59e:	6923      	ldr	r3, [r4, #16]
 800f5a0:	6861      	ldr	r1, [r4, #4]
 800f5a2:	4299      	cmp	r1, r3
 800f5a4:	bfde      	ittt	le
 800f5a6:	2330      	movle	r3, #48	; 0x30
 800f5a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5b0:	1b52      	subs	r2, r2, r5
 800f5b2:	6122      	str	r2, [r4, #16]
 800f5b4:	f8cd a000 	str.w	sl, [sp]
 800f5b8:	464b      	mov	r3, r9
 800f5ba:	aa03      	add	r2, sp, #12
 800f5bc:	4621      	mov	r1, r4
 800f5be:	4640      	mov	r0, r8
 800f5c0:	f7ff fee2 	bl	800f388 <_printf_common>
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	d14c      	bne.n	800f662 <_printf_i+0x1fe>
 800f5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5cc:	b004      	add	sp, #16
 800f5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5d2:	4835      	ldr	r0, [pc, #212]	; (800f6a8 <_printf_i+0x244>)
 800f5d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f5d8:	6829      	ldr	r1, [r5, #0]
 800f5da:	6823      	ldr	r3, [r4, #0]
 800f5dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5e0:	6029      	str	r1, [r5, #0]
 800f5e2:	061d      	lsls	r5, r3, #24
 800f5e4:	d514      	bpl.n	800f610 <_printf_i+0x1ac>
 800f5e6:	07df      	lsls	r7, r3, #31
 800f5e8:	bf44      	itt	mi
 800f5ea:	f043 0320 	orrmi.w	r3, r3, #32
 800f5ee:	6023      	strmi	r3, [r4, #0]
 800f5f0:	b91e      	cbnz	r6, 800f5fa <_printf_i+0x196>
 800f5f2:	6823      	ldr	r3, [r4, #0]
 800f5f4:	f023 0320 	bic.w	r3, r3, #32
 800f5f8:	6023      	str	r3, [r4, #0]
 800f5fa:	2310      	movs	r3, #16
 800f5fc:	e7b0      	b.n	800f560 <_printf_i+0xfc>
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	f043 0320 	orr.w	r3, r3, #32
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	2378      	movs	r3, #120	; 0x78
 800f608:	4828      	ldr	r0, [pc, #160]	; (800f6ac <_printf_i+0x248>)
 800f60a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f60e:	e7e3      	b.n	800f5d8 <_printf_i+0x174>
 800f610:	0659      	lsls	r1, r3, #25
 800f612:	bf48      	it	mi
 800f614:	b2b6      	uxthmi	r6, r6
 800f616:	e7e6      	b.n	800f5e6 <_printf_i+0x182>
 800f618:	4615      	mov	r5, r2
 800f61a:	e7bb      	b.n	800f594 <_printf_i+0x130>
 800f61c:	682b      	ldr	r3, [r5, #0]
 800f61e:	6826      	ldr	r6, [r4, #0]
 800f620:	6961      	ldr	r1, [r4, #20]
 800f622:	1d18      	adds	r0, r3, #4
 800f624:	6028      	str	r0, [r5, #0]
 800f626:	0635      	lsls	r5, r6, #24
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	d501      	bpl.n	800f630 <_printf_i+0x1cc>
 800f62c:	6019      	str	r1, [r3, #0]
 800f62e:	e002      	b.n	800f636 <_printf_i+0x1d2>
 800f630:	0670      	lsls	r0, r6, #25
 800f632:	d5fb      	bpl.n	800f62c <_printf_i+0x1c8>
 800f634:	8019      	strh	r1, [r3, #0]
 800f636:	2300      	movs	r3, #0
 800f638:	6123      	str	r3, [r4, #16]
 800f63a:	4615      	mov	r5, r2
 800f63c:	e7ba      	b.n	800f5b4 <_printf_i+0x150>
 800f63e:	682b      	ldr	r3, [r5, #0]
 800f640:	1d1a      	adds	r2, r3, #4
 800f642:	602a      	str	r2, [r5, #0]
 800f644:	681d      	ldr	r5, [r3, #0]
 800f646:	6862      	ldr	r2, [r4, #4]
 800f648:	2100      	movs	r1, #0
 800f64a:	4628      	mov	r0, r5
 800f64c:	f7f0 fdd0 	bl	80001f0 <memchr>
 800f650:	b108      	cbz	r0, 800f656 <_printf_i+0x1f2>
 800f652:	1b40      	subs	r0, r0, r5
 800f654:	6060      	str	r0, [r4, #4]
 800f656:	6863      	ldr	r3, [r4, #4]
 800f658:	6123      	str	r3, [r4, #16]
 800f65a:	2300      	movs	r3, #0
 800f65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f660:	e7a8      	b.n	800f5b4 <_printf_i+0x150>
 800f662:	6923      	ldr	r3, [r4, #16]
 800f664:	462a      	mov	r2, r5
 800f666:	4649      	mov	r1, r9
 800f668:	4640      	mov	r0, r8
 800f66a:	47d0      	blx	sl
 800f66c:	3001      	adds	r0, #1
 800f66e:	d0ab      	beq.n	800f5c8 <_printf_i+0x164>
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	079b      	lsls	r3, r3, #30
 800f674:	d413      	bmi.n	800f69e <_printf_i+0x23a>
 800f676:	68e0      	ldr	r0, [r4, #12]
 800f678:	9b03      	ldr	r3, [sp, #12]
 800f67a:	4298      	cmp	r0, r3
 800f67c:	bfb8      	it	lt
 800f67e:	4618      	movlt	r0, r3
 800f680:	e7a4      	b.n	800f5cc <_printf_i+0x168>
 800f682:	2301      	movs	r3, #1
 800f684:	4632      	mov	r2, r6
 800f686:	4649      	mov	r1, r9
 800f688:	4640      	mov	r0, r8
 800f68a:	47d0      	blx	sl
 800f68c:	3001      	adds	r0, #1
 800f68e:	d09b      	beq.n	800f5c8 <_printf_i+0x164>
 800f690:	3501      	adds	r5, #1
 800f692:	68e3      	ldr	r3, [r4, #12]
 800f694:	9903      	ldr	r1, [sp, #12]
 800f696:	1a5b      	subs	r3, r3, r1
 800f698:	42ab      	cmp	r3, r5
 800f69a:	dcf2      	bgt.n	800f682 <_printf_i+0x21e>
 800f69c:	e7eb      	b.n	800f676 <_printf_i+0x212>
 800f69e:	2500      	movs	r5, #0
 800f6a0:	f104 0619 	add.w	r6, r4, #25
 800f6a4:	e7f5      	b.n	800f692 <_printf_i+0x22e>
 800f6a6:	bf00      	nop
 800f6a8:	0800fdd1 	.word	0x0800fdd1
 800f6ac:	0800fde2 	.word	0x0800fde2

0800f6b0 <__retarget_lock_acquire_recursive>:
 800f6b0:	4770      	bx	lr

0800f6b2 <__retarget_lock_release_recursive>:
 800f6b2:	4770      	bx	lr

0800f6b4 <memmove>:
 800f6b4:	4288      	cmp	r0, r1
 800f6b6:	b510      	push	{r4, lr}
 800f6b8:	eb01 0402 	add.w	r4, r1, r2
 800f6bc:	d902      	bls.n	800f6c4 <memmove+0x10>
 800f6be:	4284      	cmp	r4, r0
 800f6c0:	4623      	mov	r3, r4
 800f6c2:	d807      	bhi.n	800f6d4 <memmove+0x20>
 800f6c4:	1e43      	subs	r3, r0, #1
 800f6c6:	42a1      	cmp	r1, r4
 800f6c8:	d008      	beq.n	800f6dc <memmove+0x28>
 800f6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6d2:	e7f8      	b.n	800f6c6 <memmove+0x12>
 800f6d4:	4402      	add	r2, r0
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	428a      	cmp	r2, r1
 800f6da:	d100      	bne.n	800f6de <memmove+0x2a>
 800f6dc:	bd10      	pop	{r4, pc}
 800f6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6e6:	e7f7      	b.n	800f6d8 <memmove+0x24>

0800f6e8 <_realloc_r>:
 800f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ec:	4680      	mov	r8, r0
 800f6ee:	4614      	mov	r4, r2
 800f6f0:	460e      	mov	r6, r1
 800f6f2:	b921      	cbnz	r1, 800f6fe <_realloc_r+0x16>
 800f6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	f7ff bc25 	b.w	800ef48 <_malloc_r>
 800f6fe:	b92a      	cbnz	r2, 800f70c <_realloc_r+0x24>
 800f700:	f7ff fbb6 	bl	800ee70 <_free_r>
 800f704:	4625      	mov	r5, r4
 800f706:	4628      	mov	r0, r5
 800f708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70c:	f000 f81b 	bl	800f746 <_malloc_usable_size_r>
 800f710:	4284      	cmp	r4, r0
 800f712:	4607      	mov	r7, r0
 800f714:	d802      	bhi.n	800f71c <_realloc_r+0x34>
 800f716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f71a:	d812      	bhi.n	800f742 <_realloc_r+0x5a>
 800f71c:	4621      	mov	r1, r4
 800f71e:	4640      	mov	r0, r8
 800f720:	f7ff fc12 	bl	800ef48 <_malloc_r>
 800f724:	4605      	mov	r5, r0
 800f726:	2800      	cmp	r0, #0
 800f728:	d0ed      	beq.n	800f706 <_realloc_r+0x1e>
 800f72a:	42bc      	cmp	r4, r7
 800f72c:	4622      	mov	r2, r4
 800f72e:	4631      	mov	r1, r6
 800f730:	bf28      	it	cs
 800f732:	463a      	movcs	r2, r7
 800f734:	f7ff fb86 	bl	800ee44 <memcpy>
 800f738:	4631      	mov	r1, r6
 800f73a:	4640      	mov	r0, r8
 800f73c:	f7ff fb98 	bl	800ee70 <_free_r>
 800f740:	e7e1      	b.n	800f706 <_realloc_r+0x1e>
 800f742:	4635      	mov	r5, r6
 800f744:	e7df      	b.n	800f706 <_realloc_r+0x1e>

0800f746 <_malloc_usable_size_r>:
 800f746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f74a:	1f18      	subs	r0, r3, #4
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	bfbc      	itt	lt
 800f750:	580b      	ldrlt	r3, [r1, r0]
 800f752:	18c0      	addlt	r0, r0, r3
 800f754:	4770      	bx	lr
	...

0800f758 <_init>:
 800f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75a:	bf00      	nop
 800f75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75e:	bc08      	pop	{r3}
 800f760:	469e      	mov	lr, r3
 800f762:	4770      	bx	lr

0800f764 <_fini>:
 800f764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f766:	bf00      	nop
 800f768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f76a:	bc08      	pop	{r3}
 800f76c:	469e      	mov	lr, r3
 800f76e:	4770      	bx	lr
