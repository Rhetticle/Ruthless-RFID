
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f310  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800f4b0  0800f4b0  0001f4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fad0  0800fad0  00020668  2**0
                  CONTENTS
  4 .ARM          00000008  0800fad0  0800fad0  0001fad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fad8  0800fad8  00020668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fad8  0800fad8  0001fad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fadc  0800fadc  0001fadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000668  20000000  0800fae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a8  20000668  08010148  00020668  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c10  08010148  00026c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020668  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027237  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005888  00000000  00000000  000478cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  0004d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e88  00000000  00000000  0004f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb95  00000000  00000000  00051098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002695e  00000000  00000000  0006dc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ebfb  00000000  00000000  0009458b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133186  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008df8  00000000  00000000  001331d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000668 	.word	0x20000668
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f498 	.word	0x0800f498

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000066c 	.word	0x2000066c
 80001dc:	0800f498 	.word	0x0800f498

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f003 f81c 	bl	80035fc <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000684 	.word	0x20000684

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f003 f8f7 	bl	80037f0 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000684 	.word	0x20000684

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 ffd9 	bl	80035fc <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 fbd1 	bl	8002dfc <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000684 	.word	0x20000684

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f003 f8a5 	bl	80037f0 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 fba3 	bl	8002dfc <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000684 	.word	0x20000684

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 fb33 	bl	8002dfc <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fdad 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fda8 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 fb03 	bl	8002dfc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fda0 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 fafb 	bl	8002dfc <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 faa5 	bl	8002dfc <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000908:	f242 0393 	movw	r3, #8339	; 0x2093
 800090c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	200e      	movs	r0, #14
 8000912:	f7ff fef8 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000916:	f107 000c 	add.w	r0, r7, #12
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2305      	movs	r3, #5
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	2102      	movs	r1, #2
 8000924:	f7ff ff8a 	bl	800083c <MFRC_TRANSCEIVE>
 8000928:	4603      	mov	r3, r0
 800092a:	2bcc      	cmp	r3, #204	; 0xcc
 800092c:	d001      	beq.n	8000932 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 800092e:	23aa      	movs	r3, #170	; 0xaa
 8000930:	e000      	b.n	8000934 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000932:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000946:	f247 0393 	movw	r3, #28819	; 0x7093
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	3302      	adds	r3, #2
 800095c:	2205      	movs	r2, #5
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f00e f90f 	bl	800eb84 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000966:	f107 0208 	add.w	r2, r7, #8
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2107      	movs	r1, #7
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	3307      	adds	r3, #7
 800097c:	893a      	ldrh	r2, [r7, #8]
 800097e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000980:	f107 000c 	add.w	r0, r7, #12
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2303      	movs	r3, #3
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	2109      	movs	r1, #9
 800098e:	f7ff ff55 	bl	800083c <MFRC_TRANSCEIVE>
 8000992:	4603      	mov	r3, r0
 8000994:	2bcc      	cmp	r3, #204	; 0xcc
 8000996:	d001      	beq.n	800099c <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000998:	23aa      	movs	r3, #170	; 0xaa
 800099a:	e000      	b.n	800099e <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 800099c:	23cc      	movs	r3, #204	; 0xcc
	}

}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 80009ae:	f242 0395 	movw	r3, #8341	; 0x2095
 80009b2:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	200e      	movs	r0, #14
 80009b8:	f7ff fea5 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009bc:	f107 000c 	add.w	r0, r7, #12
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2305      	movs	r3, #5
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	2102      	movs	r1, #2
 80009ca:	f7ff ff37 	bl	800083c <MFRC_TRANSCEIVE>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2bcc      	cmp	r3, #204	; 0xcc
 80009d2:	d001      	beq.n	80009d8 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 80009d4:	23aa      	movs	r3, #170	; 0xaa
 80009d6:	e000      	b.n	80009da <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 80009d8:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b088      	sub	sp, #32
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 80009ec:	f247 0395 	movw	r3, #28821	; 0x7095
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	3302      	adds	r3, #2
 8000a02:	2205      	movs	r2, #5
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00e f8bc 	bl	800eb84 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2107      	movs	r1, #7
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe9e 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	3307      	adds	r3, #7
 8000a22:	893a      	ldrh	r2, [r7, #8]
 8000a24:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a26:	f107 000c 	add.w	r0, r7, #12
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2303      	movs	r3, #3
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	2109      	movs	r1, #9
 8000a34:	f7ff ff02 	bl	800083c <MFRC_TRANSCEIVE>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2bcc      	cmp	r3, #204	; 0xcc
 8000a3c:	d001      	beq.n	8000a42 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000a3e:	23aa      	movs	r3, #170	; 0xaa
 8000a40:	e000      	b.n	8000a44 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000a42:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  if (PICC_CHECK() != PCD_OK) {
 8000a52:	f000 f832 	bl	8000aba <PICC_CHECK>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2bcc      	cmp	r3, #204	; 0xcc
 8000a5a:	d001      	beq.n	8000a60 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 8000a5c:	23aa      	movs	r3, #170	; 0xaa
 8000a5e:	e028      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  MFRC_ANTICOL1(ANTICOL1);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff4b 	bl	8000900 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000a6a:	7c3b      	ldrb	r3, [r7, #16]
 8000a6c:	2b88      	cmp	r3, #136	; 0x88
 8000a6e:	d001      	beq.n	8000a74 <PICC_Select+0x28>
		  return(PCD_COMM_ERR);
 8000a70:	23aa      	movs	r3, #170	; 0xaa
 8000a72:	e01e      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  HAL_Delay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f002 f9c1 	bl	8002dfc <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff59 	bl	800093c <MFRC_SEL1>
	  HAL_Delay(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f002 f9b6 	bl	8002dfc <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff87 	bl	80009a6 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f002 f9af 	bl	8002dfc <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff9c 	bl	80009e2 <MFRC_SEL2>
	  HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f002 f9a6 	bl	8002dfc <HAL_Delay>
	  return(PCD_OK);
 8000ab0:	23cc      	movs	r3, #204	; 0xcc
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff feff 	bl	80008c6 <MFRC_REQA>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2bcc      	cmp	r3, #204	; 0xcc
 8000acc:	d001      	beq.n	8000ad2 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000ace:	23aa      	movs	r3, #170	; 0xaa
 8000ad0:	e008      	b.n	8000ae4 <PICC_CHECK+0x2a>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	2b44      	cmp	r3, #68	; 0x44
 8000ad6:	d102      	bne.n	8000ade <PICC_CHECK+0x24>
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 8000ade:	23aa      	movs	r3, #170	; 0xaa
 8000ae0:	e000      	b.n	8000ae4 <PICC_CHECK+0x2a>
		}
		else{
			return(PCD_OK);
 8000ae2:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
	if (PICC_Select() != PCD_OK) {
 8000af8:	f7ff ffa8 	bl	8000a4c <PICC_Select>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2bcc      	cmp	r3, #204	; 0xcc
 8000b00:	d001      	beq.n	8000b06 <UL_READ+0x1a>
		return PCD_COMM_ERR; //No PICC available
 8000b02:	23aa      	movs	r3, #170	; 0xaa
 8000b04:	e021      	b.n	8000b4a <UL_READ+0x5e>
	}
	uint8_t transaction[4]={ULTRA_READ,addr};
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	2330      	movs	r3, #48	; 0x30
 8000b0c:	733b      	strb	r3, [r7, #12]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8000b12:	f107 0208 	add.w	r2, r7, #8
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fe1b 	bl	8000758 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	3302      	adds	r3, #2
 8000b28:	893a      	ldrh	r2, [r7, #8]
 8000b2a:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8000b2c:	f107 000c 	add.w	r0, r7, #12
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2312      	movs	r3, #18
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	2104      	movs	r1, #4
 8000b3a:	f7ff fe7f 	bl	800083c <MFRC_TRANSCEIVE>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2bcc      	cmp	r3, #204	; 0xcc
 8000b42:	d001      	beq.n	8000b48 <UL_READ+0x5c>
		return(PCD_COMM_ERR);
 8000b44:	23aa      	movs	r3, #170	; 0xaa
 8000b46:	e000      	b.n	8000b4a <UL_READ+0x5e>
	}

	else{
		return(PCD_OK);
 8000b48:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b088      	sub	sp, #32
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff ffc3 	bl	8000aec <UL_READ>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2bcc      	cmp	r3, #204	; 0xcc
 8000b6a:	d001      	beq.n	8000b70 <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8000b6c:	23aa      	movs	r3, #170	; 0xaa
 8000b6e:	e007      	b.n	8000b80 <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2207      	movs	r2, #7
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f00e f803 	bl	800eb84 <memcpy>
	return PCD_OK;
 8000b7e:	23cc      	movs	r3, #204	; 0xcc
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	uint8_t* uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8000b90:	2007      	movs	r0, #7
 8000b92:	f00d ffe7 	bl	800eb64 <malloc>
 8000b96:	4603      	mov	r3, r0
 8000b98:	60fb      	str	r3, [r7, #12]
	uint8_t* fake_contents = malloc(2);
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f00d ffe2 	bl	800eb64 <malloc>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60bb      	str	r3, [r7, #8]
	fake_contents[0] = 0xAA;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	22aa      	movs	r2, #170	; 0xaa
 8000ba8:	701a      	strb	r2, [r3, #0]
	fake_contents[1] = 0xBB;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3301      	adds	r3, #1
 8000bae:	22bb      	movs	r2, #187	; 0xbb
 8000bb0:	701a      	strb	r2, [r3, #0]

	result->type = "MIFARE Ultralight";
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <UL_readcard+0x70>)
 8000bb6:	60da      	str	r2, [r3, #12]
	result->name = "Test1";
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <UL_readcard+0x74>)
 8000bbc:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	711a      	strb	r2, [r3, #4]
	result->contents_size = 3;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	741a      	strb	r2, [r3, #16]

	if ((UL_getuid(uid) != PCD_OK)) {
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff ffbe 	bl	8000b52 <UL_getuid>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2bcc      	cmp	r3, #204	; 0xcc
 8000bda:	d001      	beq.n	8000be0 <UL_readcard+0x58>
		return PCD_COMM_ERR;
 8000bdc:	23aa      	movs	r3, #170	; 0xaa
 8000bde:	e006      	b.n	8000bee <UL_readcard+0x66>
	}
	result->uid = uid;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	601a      	str	r2, [r3, #0]
	result->contents = fake_contents;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	615a      	str	r2, [r3, #20]
	return PCD_OK;
 8000bec:	23cc      	movs	r3, #204	; 0xcc
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	0800f510 	.word	0x0800f510
 8000bfc:	0800f524 	.word	0x0800f524

08000c00 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	3301      	adds	r3, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00d ffa6 	bl	800eb64 <malloc>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e023      	b.n	8000c6a <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d80d      	bhi.n	8000c4a <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	461a      	mov	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1898      	adds	r0, r3, r2
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4912      	ldr	r1, [pc, #72]	; (8000c8c <uid_tostring+0x8c>)
 8000c44:	f00e f8a4 	bl	800ed90 <siprintf>
 8000c48:	e00c      	b.n	8000c64 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1898      	adds	r0, r3, r2
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	490c      	ldr	r1, [pc, #48]	; (8000c90 <uid_tostring+0x90>)
 8000c60:	f00e f896 	bl	800ed90 <siprintf>
	for (int i = 0; i < size; i++) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	dbd7      	blt.n	8000c22 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	461a      	mov	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
	return result;
 8000c80:	68bb      	ldr	r3, [r7, #8]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	0800f52c 	.word	0x0800f52c
 8000c90:	0800f530 	.word	0x0800f530

08000c94 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000c9a:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f00d ff7b 	bl	800eba0 <memset>
	OLED_FLUSH(zeros);
 8000caa:	463b      	mov	r3, r7
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f87b 	bl	8000da8 <OLED_FLUSH>

}
 8000cb2:	bf00      	nop
 8000cb4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	4815      	ldr	r0, [pc, #84]	; (8000d24 <OLED_cmd+0x68>)
 8000cd0:	f002 fb36 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <OLED_cmd+0x6c>)
 8000cda:	f002 fb31 	bl	8003340 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000cde:	f107 010f 	add.w	r1, r7, #15
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4810      	ldr	r0, [pc, #64]	; (8000d2c <OLED_cmd+0x70>)
 8000cea:	f005 fabc 	bl	8006266 <HAL_SPI_Transmit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d009      	beq.n	8000d08 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <OLED_cmd+0x68>)
 8000cfa:	f002 fb21 	bl	8003340 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f002 f87c 	bl	8002dfc <HAL_Delay>
		return(HAL_ERROR);
 8000d04:	2301      	movs	r3, #1
 8000d06:	e008      	b.n	8000d1a <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <OLED_cmd+0x68>)
 8000d0e:	f002 fb17 	bl	8003340 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f002 f872 	bl	8002dfc <HAL_Delay>
		return(HAL_OK);
 8000d18:	2300      	movs	r3, #0
	}

}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	200006d8 	.word	0x200006d8

08000d30 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4816      	ldr	r0, [pc, #88]	; (8000d9c <OLED_data+0x6c>)
 8000d42:	f002 fafd 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4815      	ldr	r0, [pc, #84]	; (8000da0 <OLED_data+0x70>)
 8000d4c:	f002 faf8 	bl	8003340 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	4812      	ldr	r0, [pc, #72]	; (8000da4 <OLED_data+0x74>)
 8000d5c:	f005 fa83 	bl	8006266 <HAL_SPI_Transmit>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00b      	beq.n	8000d7e <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2102      	movs	r1, #2
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <OLED_data+0x70>)
 8000d6c:	f002 fae8 	bl	8003340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2110      	movs	r1, #16
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <OLED_data+0x6c>)
 8000d76:	f002 fae3 	bl	8003340 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00a      	b.n	8000d94 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2102      	movs	r1, #2
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <OLED_data+0x70>)
 8000d84:	f002 fadc 	bl	8003340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <OLED_data+0x6c>)
 8000d8e:	f002 fad7 	bl	8003340 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000d92:	2300      	movs	r3, #0
	}



}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400
 8000da4:	200006d8 	.word	0x200006d8

08000da8 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e023      	b.n	8000dfe <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	3b50      	subs	r3, #80	; 0x50
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff7c 	bl	8000cbc <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f7ff ff79 	bl	8000cbc <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000dca:	2010      	movs	r0, #16
 8000dcc:	f7ff ff76 	bl	8000cbc <OLED_cmd>
		for(int i=0;i<128;i++){
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	e00d      	b.n	8000df2 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	01da      	lsls	r2, r3, #7
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	4413      	add	r3, r2
 8000dde:	461a      	mov	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	2101      	movs	r1, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ffa2 	bl	8000d30 <OLED_data>
		for(int i=0;i<128;i++){
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b7f      	cmp	r3, #127	; 0x7f
 8000df6:	ddee      	ble.n	8000dd6 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b07      	cmp	r3, #7
 8000e02:	ddd8      	ble.n	8000db6 <OLED_FLUSH+0xe>
		}


	}
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2110      	movs	r1, #16
 8000e1a:	482f      	ldr	r0, [pc, #188]	; (8000ed8 <OLED_INIT+0xc8>)
 8000e1c:	f002 fa90 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2108      	movs	r1, #8
 8000e24:	482c      	ldr	r0, [pc, #176]	; (8000ed8 <OLED_INIT+0xc8>)
 8000e26:	f002 fa8b 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	482b      	ldr	r0, [pc, #172]	; (8000edc <OLED_INIT+0xcc>)
 8000e30:	f002 fa86 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e34:	2064      	movs	r0, #100	; 0x64
 8000e36:	f001 ffe1 	bl	8002dfc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <OLED_INIT+0xc8>)
 8000e40:	f002 fa7e 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	; 0x64
 8000e46:	f001 ffd9 	bl	8002dfc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	4822      	ldr	r0, [pc, #136]	; (8000ed8 <OLED_INIT+0xc8>)
 8000e50:	f002 fa76 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e54:	2064      	movs	r0, #100	; 0x64
 8000e56:	f001 ffd1 	bl	8002dfc <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <OLED_INIT+0xd0>)
 8000e5c:	463c      	mov	r4, r7
 8000e5e:	461d      	mov	r5, r3
 8000e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e68:	c403      	stmia	r4!, {r0, r1}
 8000e6a:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	e00c      	b.n	8000e8c <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000e72:	463a      	mov	r2, r7
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff1e 	bl	8000cbc <OLED_cmd>
		HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f001 ffbb 	bl	8002dfc <HAL_Delay>
	for(int i=0;i<25;i++){
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	2b18      	cmp	r3, #24
 8000e90:	ddef      	ble.n	8000e72 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000e92:	20a7      	movs	r0, #167	; 0xa7
 8000e94:	f7ff ff12 	bl	8000cbc <OLED_cmd>
	OLED_FLUSH(HVE);
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <OLED_INIT+0xd4>)
 8000e9a:	f7ff ff85 	bl	8000da8 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8000e9e:	20af      	movs	r0, #175	; 0xaf
 8000ea0:	f7ff ff0c 	bl	8000cbc <OLED_cmd>
	HAL_Delay(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea8:	f001 ffa8 	bl	8002dfc <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8000eac:	20ae      	movs	r0, #174	; 0xae
 8000eae:	f7ff ff05 	bl	8000cbc <OLED_cmd>
	HAL_Delay(10);
 8000eb2:	200a      	movs	r0, #10
 8000eb4:	f001 ffa2 	bl	8002dfc <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8000eb8:	20a6      	movs	r0, #166	; 0xa6
 8000eba:	f7ff feff 	bl	8000cbc <OLED_cmd>
	HAL_Delay(10);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f001 ff9c 	bl	8002dfc <HAL_Delay>
	OLED_cmd(DISP_ON);
 8000ec4:	20af      	movs	r0, #175	; 0xaf
 8000ec6:	f7ff fef9 	bl	8000cbc <OLED_cmd>
	OLED_Clear();
 8000eca:	f7ff fee3 	bl	8000c94 <OLED_Clear>
	return HAL_OK;
 8000ece:	2300      	movs	r3, #0

}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	0800f534 	.word	0x0800f534
 8000ee4:	20000000 	.word	0x20000000

08000ee8 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8000ef4:	2005      	movs	r0, #5
 8000ef6:	f00d fe35 	bl	800eb64 <malloc>
 8000efa:	4603      	mov	r3, r0
 8000efc:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	e013      	b.n	8000f2c <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f1a3 0220 	sub.w	r2, r3, #32
 8000f0a:	4910      	ldr	r1, [pc, #64]	; (8000f4c <OLED_InvChar+0x64>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	18ca      	adds	r2, r1, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	440b      	add	r3, r1
 8000f20:	43d2      	mvns	r2, r2
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	dde8      	ble.n	8000f04 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8000f32:	2205      	movs	r2, #5
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6838      	ldr	r0, [r7, #0]
 8000f38:	f00d fe24 	bl	800eb84 <memcpy>
	free(temp);
 8000f3c:	68b8      	ldr	r0, [r7, #8]
 8000f3e:	f00d fe19 	bl	800eb74 <free>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	0800f6f4 	.word	0x0800f6f4

08000f50 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4623      	mov	r3, r4
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	4603      	mov	r3, r0
 8000f64:	71bb      	strb	r3, [r7, #6]
 8000f66:	460b      	mov	r3, r1
 8000f68:	717b      	strb	r3, [r7, #5]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	3b50      	subs	r3, #80	; 0x50
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fea1 	bl	8000cbc <OLED_cmd>
	OLED_cmd(col&0x0F);
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe9a 	bl	8000cbc <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe91 	bl	8000cbc <OLED_cmd>
	uint8_t* data=malloc(6);
 8000f9a:	2006      	movs	r0, #6
 8000f9c:	f00d fde2 	bl	800eb64 <malloc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8000fa4:	793b      	ldrb	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10d      	bne.n	8000fc6 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	f1a3 0220 	sub.w	r2, r3, #32
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <OLED_drawChar+0xa0>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	2205      	movs	r2, #5
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f00d fde0 	bl	800eb84 <memcpy>
 8000fc4:	e004      	b.n	8000fd0 <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8000fc6:	797b      	ldrb	r3, [r7, #5]
 8000fc8:	68f9      	ldr	r1, [r7, #12]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff8c 	bl	8000ee8 <OLED_InvChar>
	}

	*(data+5)=0x00;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3305      	adds	r3, #5
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8000fd8:	2106      	movs	r1, #6
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fea8 	bl	8000d30 <OLED_data>
	free(data);
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f00d fdc7 	bl	800eb74 <free>
	}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800f6f4 	.word	0x0800f6f4

08000ff4 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	603a      	str	r2, [r7, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	460b      	mov	r3, r1
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	4613      	mov	r3, r2
 8001008:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e014      	b.n	800103a <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	0052      	lsls	r2, r2, #1
 8001018:	4413      	add	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	4413      	add	r3, r2
 8001022:	b2d9      	uxtb	r1, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	79f8      	ldrb	r0, [r7, #7]
 8001030:	f7ff ff8e 	bl	8000f50 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f7ff f8d0 	bl	80001e0 <strlen>
 8001040:	4602      	mov	r2, r0
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8e3      	bhi.n	8001010 <OLED_Printlin+0x1c>
	}
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	6039      	str	r1, [r7, #0]
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	4613      	mov	r3, r2
 8001060:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f7ff f8bc 	bl	80001e0 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	0fda      	lsrs	r2, r3, #31
 8001070:	4413      	add	r3, r2
 8001072:	105b      	asrs	r3, r3, #1
 8001074:	425b      	negs	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	3340      	adds	r3, #64	; 0x40
 8001082:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	b2d9      	uxtb	r1, r3
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	79f8      	ldrb	r0, [r7, #7]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	f7ff ffb1 	bl	8000ff4 <OLED_Printlin>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 800109a:	b580      	push	{r7, lr}
 800109c:	b094      	sub	sp, #80	; 0x50
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80010a2:	2320      	movs	r3, #32
 80010a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	643b      	str	r3, [r7, #64]	; 0x40
 80010bc:	e018      	b.n	80010f0 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80010be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c2:	4413      	add	r3, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d10b      	bne.n	80010e8 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 80010d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d2:	b2d9      	uxtb	r1, r3
 80010d4:	f107 020c 	add.w	r2, r7, #12
 80010d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
	                i++;
 80010e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e2:	3301      	adds	r3, #1
 80010e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010e6:	e000      	b.n	80010ea <OLED_Print+0x50>
	            }
	            else{
	                continue;
 80010e8:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 80010ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ec:	3301      	adds	r3, #1
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
 80010f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010f2:	2b15      	cmp	r3, #21
 80010f4:	dde3      	ble.n	80010be <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 80010f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b20      	cmp	r3, #32
 8001100:	d102      	bne.n	8001108 <OLED_Print+0x6e>
	            last_ind++;
 8001102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001104:	3301      	adds	r3, #1
 8001106:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f866 	bl	80001e0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	2b15      	cmp	r3, #21
 8001118:	d828      	bhi.n	800116c <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 800111a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f85d 	bl	80001e0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 800112a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	18d1      	adds	r1, r2, r3
 8001130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	4618      	mov	r0, r3
 8001138:	f00d fe4a 	bl	800edd0 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 800113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800113e:	f107 0220 	add.w	r2, r7, #32
 8001142:	18d0      	adds	r0, r2, r3
 8001144:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800114a:	f1c3 0315 	rsb	r3, r3, #21
 800114e:	461a      	mov	r2, r3
 8001150:	f00d fd26 	bl	800eba0 <memset>
	            thisline[21]=' ';
 8001154:	2320      	movs	r3, #32
 8001156:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 800115a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800115c:	b2d8      	uxtb	r0, r3
 800115e:	f107 0220 	add.w	r2, r7, #32
 8001162:	2300      	movs	r3, #0
 8001164:	2102      	movs	r1, #2
 8001166:	f7ff ff45 	bl	8000ff4 <OLED_Printlin>




	    }
}
 800116a:	e05e      	b.n	800122a <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 800116c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800116e:	3314      	adds	r3, #20
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b20      	cmp	r3, #32
 8001178:	d03a      	beq.n	80011f0 <OLED_Print+0x156>
 800117a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800117c:	3315      	adds	r3, #21
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b20      	cmp	r3, #32
 8001186:	d033      	beq.n	80011f0 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	18d1      	adds	r1, r2, r3
 800118e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001190:	3b01      	subs	r3, #1
 8001192:	3350      	adds	r3, #80	; 0x50
 8001194:	443b      	add	r3, r7
 8001196:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800119a:	461a      	mov	r2, r3
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00d fe15 	bl	800edd0 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80011a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a8:	3b01      	subs	r3, #1
 80011aa:	3350      	adds	r3, #80	; 0x50
 80011ac:	443b      	add	r3, r7
 80011ae:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011b2:	461a      	mov	r2, r3
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	1898      	adds	r0, r3, r2
 80011ba:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80011be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011c0:	3b01      	subs	r3, #1
 80011c2:	3350      	adds	r3, #80	; 0x50
 80011c4:	443b      	add	r3, r7
 80011c6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011ca:	f1c3 0315 	rsb	r3, r3, #21
 80011ce:	461a      	mov	r2, r3
 80011d0:	f00d fce6 	bl	800eba0 <memset>
	            thisline[21]=' ';
 80011d4:	2320      	movs	r3, #32
 80011d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 80011da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011dc:	3b01      	subs	r3, #1
 80011de:	3350      	adds	r3, #80	; 0x50
 80011e0:	443b      	add	r3, r7
 80011e2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011e6:	461a      	mov	r2, r3
 80011e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ea:	4413      	add	r3, r2
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80011ee:	e00e      	b.n	800120e <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 80011f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	18d1      	adds	r1, r2, r3
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2215      	movs	r2, #21
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00d fde7 	bl	800edd0 <strncpy>
	            thisline[21]=' ';
 8001202:	2320      	movs	r3, #32
 8001204:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800120a:	3315      	adds	r3, #21
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800120e:	2300      	movs	r3, #0
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001214:	b2d8      	uxtb	r0, r3
 8001216:	f107 0220 	add.w	r2, r7, #32
 800121a:	2300      	movs	r3, #0
 800121c:	2102      	movs	r1, #2
 800121e:	f7ff fee9 	bl	8000ff4 <OLED_Printlin>
	        line++;
 8001222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001224:	3301      	adds	r3, #1
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001228:	e746      	b.n	80010b8 <OLED_Print+0x1e>
}
 800122a:	3750      	adds	r7, #80	; 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 800123c:	f7ff fd2a 	bl	8000c94 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	4619      	mov	r1, r3
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff ff01 	bl	8001052 <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e01a      	b.n	800128c <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3301      	adds	r3, #1
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	7818      	ldrb	r0, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3301      	adds	r3, #1
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	7859      	ldrb	r1, [r3, #1]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3301      	adds	r3, #1
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	f7ff feb7 	bl	8000ff4 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	dbde      	blt.n	8001256 <OLED_SCREEN+0x26>
	}
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	460b      	mov	r3, r1
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7fe ff8f 	bl	80001e0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3302      	adds	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	7818      	ldrb	r0, [r3, #0]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	b2d9      	uxtb	r1, r3
 80012e4:	2300      	movs	r3, #0
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	f7ff fe84 	bl	8000ff4 <OLED_Printlin>
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	460b      	mov	r3, r1
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001302:	4a46      	ldr	r2, [pc, #280]	; (800141c <OLED_SELECT+0x128>)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	4611      	mov	r1, r2
 800130c:	8019      	strh	r1, [r3, #0]
 800130e:	3302      	adds	r3, #2
 8001310:	0c12      	lsrs	r2, r2, #16
 8001312:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

	    if(selopt==0){
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d124      	bne.n	8001364 <OLED_SELECT+0x70>
	        prevpage=screen->seldata[screen->selsize-1][0];
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001326:	3b01      	subs	r3, #1
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800133c:	3b01      	subs	r3, #1
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	785b      	ldrb	r3, [r3, #1]
 8001344:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	7afb      	ldrb	r3, [r7, #11]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	785b      	ldrb	r3, [r3, #1]
 8001360:	773b      	strb	r3, [r7, #28]
 8001362:	e021      	b.n	80013a8 <OLED_SELECT+0xb4>
	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	7afb      	ldrb	r3, [r7, #11]
 800136a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800136e:	3b01      	subs	r3, #1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001382:	3b01      	subs	r3, #1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	773b      	strb	r3, [r7, #28]

	    }
	    if(restore==OLED_RESTORE){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d122      	bne.n	80013f4 <OLED_SELECT+0x100>
	    	if (selopt == 0) {
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d110      	bne.n	80013d6 <OLED_SELECT+0xe2>
	    		rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	689c      	ldr	r4, [r3, #8]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3b01      	subs	r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 f857 	bl	8001478 <find_restore_string>
 80013ca:	4603      	mov	r3, r0
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4423      	add	r3, r4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	e010      	b.n	80013f8 <OLED_SELECT+0x104>
	    	} else {
	    		rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	689c      	ldr	r4, [r3, #8]
 80013da:	7afb      	ldrb	r3, [r7, #11]
 80013dc:	3b01      	subs	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4619      	mov	r1, r3
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f848 	bl	8001478 <find_restore_string>
 80013e8:	4603      	mov	r3, r0
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4423      	add	r3, r4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	e001      	b.n	80013f8 <OLED_SELECT+0x104>
	    	}
	    } else {
	    	rest = "  ";
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <OLED_SELECT+0x12c>)
 80013f6:	61bb      	str	r3, [r7, #24]
	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 80013f8:	7fb9      	ldrb	r1, [r7, #30]
 80013fa:	7ff8      	ldrb	r0, [r7, #31]
 80013fc:	2300      	movs	r3, #0
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	f7ff fdf8 	bl	8000ff4 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001404:	f107 0214 	add.w	r2, r7, #20
 8001408:	7f39      	ldrb	r1, [r7, #28]
 800140a:	7f78      	ldrb	r0, [r7, #29]
 800140c:	2300      	movs	r3, #0
 800140e:	f7ff fdf1 	bl	8000ff4 <OLED_Printlin>

}
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}
 800141a:	bf00      	nop
 800141c:	0800f554 	.word	0x0800f554
 8001420:	0800f550 	.word	0x0800f550

08001424 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 8001430:	f001 f999 	bl	8002766 <get_number_files>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <OLED_display_files+0x1a>
		return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e018      	b.n	8001470 <OLED_display_files+0x4c>
	}
	char** file_names = malloc(get_number_files() * sizeof(char*));
 800143e:	f001 f992 	bl	8002766 <get_number_files>
 8001442:	4603      	mov	r3, r0
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4618      	mov	r0, r3
 8001448:	f00d fb8c 	bl	800eb64 <malloc>
 800144c:	4603      	mov	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]

	if (get_all_files(file_names) != RFS_OK) {
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f001 f9a9 	bl	80027a8 <get_all_files>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <OLED_display_files+0x3c>
		return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e007      	b.n	8001470 <OLED_display_files+0x4c>
	}

	OLED_SCRNREF(screen, 1, file_names[0]);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	2101      	movs	r1, #1
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff1a 	bl	80012a2 <OLED_SCRNREF>
	return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001484:	2301      	movs	r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	e021      	b.n	80014ce <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	440b      	add	r3, r1
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d110      	bne.n	80014c8 <find_restore_string+0x50>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	785a      	ldrb	r2, [r3, #1]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6919      	ldr	r1, [r3, #16]
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	440b      	add	r3, r1
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d102      	bne.n	80014c8 <find_restore_string+0x50>
			index_of_string = i;
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	73fb      	strb	r3, [r7, #15]
			break;
 80014c6:	e007      	b.n	80014d8 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbd8      	blt.n	800148a <find_restore_string+0x12>
		}
	}

	return index_of_string;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 80014f2:	230f      	movs	r3, #15
 80014f4:	733b      	strb	r3, [r7, #12]
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	737b      	strb	r3, [r7, #13]
 80014fa:	2300      	movs	r3, #0
 80014fc:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <STAT_READ+0x54>)
 8001506:	f001 ff1b 	bl	8003340 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800150a:	bf00      	nop
 800150c:	f107 0208 	add.w	r2, r7, #8
 8001510:	f107 010c 	add.w	r1, r7, #12
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2303      	movs	r3, #3
 800151a:	4809      	ldr	r0, [pc, #36]	; (8001540 <STAT_READ+0x58>)
 800151c:	f004 ffdf 	bl	80064de <HAL_SPI_TransmitReceive>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f2      	bne.n	800150c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <STAT_READ+0x54>)
 800152e:	f001 ff07 	bl	8003340 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 8001532:	7abb      	ldrb	r3, [r7, #10]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40020000 	.word	0x40020000
 8001540:	20000730 	.word	0x20000730

08001544 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 8001554:	231f      	movs	r3, #31
 8001556:	733b      	strb	r3, [r7, #12]
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	737b      	strb	r3, [r7, #13]
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	480a      	ldr	r0, [pc, #40]	; (8001590 <STAT_WRITE+0x4c>)
 8001568:	f001 feea 	bl	8003340 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 800156c:	f107 010c 	add.w	r1, r7, #12
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	2203      	movs	r2, #3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <STAT_WRITE+0x50>)
 8001576:	f004 fe76 	bl	8006266 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <STAT_WRITE+0x4c>)
 8001582:	f001 fedd 	bl	8003340 <HAL_GPIO_WritePin>

	return(HAL_OK);
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40020000 	.word	0x40020000
 8001594:	20000730 	.word	0x20000730

08001598 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800159e:	2306      	movs	r3, #6
 80015a0:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80015a2:	f000 f825 	bl	80015f0 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80015a6:	e011      	b.n	80015cc <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ae:	480e      	ldr	r0, [pc, #56]	; (80015e8 <WRIT_EN+0x50>)
 80015b0:	f001 fec6 	bl	8003340 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 80015b4:	1df9      	adds	r1, r7, #7
 80015b6:	2364      	movs	r3, #100	; 0x64
 80015b8:	2201      	movs	r2, #1
 80015ba:	480c      	ldr	r0, [pc, #48]	; (80015ec <WRIT_EN+0x54>)
 80015bc:	f004 fe53 	bl	8006266 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <WRIT_EN+0x50>)
 80015c8:	f001 feba 	bl	8003340 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80015cc:	20c0      	movs	r0, #192	; 0xc0
 80015ce:	f7ff ff8b 	bl	80014e8 <STAT_READ>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d1e5      	bne.n	80015a8 <WRIT_EN+0x10>
	}


}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40020000 	.word	0x40020000
 80015ec:	20000730 	.word	0x20000730

080015f0 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 80015f6:	2304      	movs	r3, #4
 80015f8:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80015fa:	e011      	b.n	8001620 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001602:	480e      	ldr	r0, [pc, #56]	; (800163c <WRITE_DIS+0x4c>)
 8001604:	f001 fe9c 	bl	8003340 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001608:	1df9      	adds	r1, r7, #7
 800160a:	2364      	movs	r3, #100	; 0x64
 800160c:	2201      	movs	r2, #1
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <WRITE_DIS+0x50>)
 8001610:	f004 fe29 	bl	8006266 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <WRITE_DIS+0x4c>)
 800161c:	f001 fe90 	bl	8003340 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001620:	20c0      	movs	r0, #192	; 0xc0
 8001622:	f7ff ff61 	bl	80014e8 <STAT_READ>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b02      	cmp	r3, #2
 800162e:	d0e5      	beq.n	80015fc <WRITE_DIS+0xc>
		}
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020000 	.word	0x40020000
 8001640:	20000730 	.word	0x20000730

08001644 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	019b      	lsls	r3, r3, #6
 8001652:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 8001654:	23d8      	movs	r3, #216	; 0xd8
 8001656:	723b      	strb	r3, [r7, #8]
 8001658:	2300      	movs	r3, #0
 800165a:	727b      	strb	r3, [r7, #9]
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b29b      	uxth	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	72bb      	strb	r3, [r7, #10]
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 800166c:	f7ff ff94 	bl	8001598 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <block_erase+0x70>)
 8001678:	f001 fe62 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, 4, 100);
 800167c:	f107 0108 	add.w	r1, r7, #8
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	2204      	movs	r2, #4
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <block_erase+0x74>)
 8001686:	f004 fdee 	bl	8006266 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <block_erase+0x70>)
 8001692:	f001 fe55 	bl	8003340 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001696:	bf00      	nop
 8001698:	20c0      	movs	r0, #192	; 0xc0
 800169a:	f7ff ff25 	bl	80014e8 <STAT_READ>
 800169e:	4603      	mov	r3, r0
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d0f7      	beq.n	8001698 <block_erase+0x54>
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40020000 	.word	0x40020000
 80016b8:	20000730 	.word	0x20000730

080016bc <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c6:	480a      	ldr	r0, [pc, #40]	; (80016f0 <MEM_INIT+0x34>)
 80016c8:	f001 fe3a 	bl	8003340 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 80016cc:	2100      	movs	r1, #0
 80016ce:	20a0      	movs	r0, #160	; 0xa0
 80016d0:	f7ff ff38 	bl	8001544 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 80016d4:	20a0      	movs	r0, #160	; 0xa0
 80016d6:	f7ff ff07 	bl	80014e8 <STAT_READ>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MEM_INIT+0x28>
		return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e002      	b.n	80016ea <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 80016e4:	f7ff ff84 	bl	80015f0 <WRITE_DIS>
	return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40020000 	.word	0x40020000

080016f4 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60ba      	str	r2, [r7, #8]
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4603      	mov	r3, r0
 8001700:	81fb      	strh	r3, [r7, #14]
 8001702:	460b      	mov	r3, r1
 8001704:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3303      	adds	r3, #3
 800170a:	4618      	mov	r0, r3
 800170c:	f00d fa2a 	bl	800eb64 <malloc>
 8001710:	4603      	mov	r3, r0
 8001712:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8001714:	2310      	movs	r3, #16
 8001716:	743b      	strb	r3, [r7, #16]
 8001718:	2300      	movs	r3, #0
 800171a:	747b      	strb	r3, [r7, #17]
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	b29b      	uxth	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	74bb      	strb	r3, [r7, #18]
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2202      	movs	r2, #2
 8001730:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 8001732:	89bb      	ldrh	r3, [r7, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29a      	uxth	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3302      	adds	r3, #2
 8001744:	89ba      	ldrh	r2, [r7, #12]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3303      	adds	r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	4618      	mov	r0, r3
 8001754:	f00d fa16 	bl	800eb84 <memcpy>

	WRIT_EN();
 8001758:	f7ff ff1e 	bl	8001598 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001762:	482a      	ldr	r0, [pc, #168]	; (800180c <MEM_WRITE+0x118>)
 8001764:	f001 fdec 	bl	8003340 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	b29b      	uxth	r3, r3
 800176c:	3303      	adds	r3, #3
 800176e:	b29a      	uxth	r2, r3
 8001770:	2364      	movs	r3, #100	; 0x64
 8001772:	6979      	ldr	r1, [r7, #20]
 8001774:	4826      	ldr	r0, [pc, #152]	; (8001810 <MEM_WRITE+0x11c>)
 8001776:	f004 fd76 	bl	8006266 <HAL_SPI_Transmit>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <MEM_WRITE+0x9c>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001786:	4821      	ldr	r0, [pc, #132]	; (800180c <MEM_WRITE+0x118>)
 8001788:	f001 fdda 	bl	8003340 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 800178c:	2301      	movs	r3, #1
 800178e:	e039      	b.n	8001804 <MEM_WRITE+0x110>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001796:	481d      	ldr	r0, [pc, #116]	; (800180c <MEM_WRITE+0x118>)
 8001798:	f001 fdd2 	bl	8003340 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 800179c:	bf00      	nop
 800179e:	20c0      	movs	r0, #192	; 0xc0
 80017a0:	f7ff fea2 	bl	80014e8 <STAT_READ>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d0f7      	beq.n	800179e <MEM_WRITE+0xaa>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	4815      	ldr	r0, [pc, #84]	; (800180c <MEM_WRITE+0x118>)
 80017b6:	f001 fdc3 	bl	8003340 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 80017ba:	f107 0110 	add.w	r1, r7, #16
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	2204      	movs	r2, #4
 80017c2:	4813      	ldr	r0, [pc, #76]	; (8001810 <MEM_WRITE+0x11c>)
 80017c4:	f004 fd4f 	bl	8006266 <HAL_SPI_Transmit>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <MEM_WRITE+0xea>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <MEM_WRITE+0x118>)
 80017d6:	f001 fdb3 	bl	8003340 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80017da:	2301      	movs	r3, #1
 80017dc:	e012      	b.n	8001804 <MEM_WRITE+0x110>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <MEM_WRITE+0x118>)
 80017e6:	f001 fdab 	bl	8003340 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80017ea:	bf00      	nop
 80017ec:	20c0      	movs	r0, #192	; 0xc0
 80017ee:	f7ff fe7b 	bl	80014e8 <STAT_READ>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d0f7      	beq.n	80017ec <MEM_WRITE+0xf8>
	free(setup);
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f00d f9b9 	bl	800eb74 <free>
	return(HAL_OK);
 8001802:	2300      	movs	r3, #0

}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020000 	.word	0x40020000
 8001810:	20000730 	.word	0x20000730

08001814 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af02      	add	r7, sp, #8
 800181a:	60ba      	str	r2, [r7, #8]
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4603      	mov	r3, r0
 8001820:	81fb      	strh	r3, [r7, #14]
 8001822:	460b      	mov	r3, r1
 8001824:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 8001826:	2313      	movs	r3, #19
 8001828:	753b      	strb	r3, [r7, #20]
 800182a:	2300      	movs	r3, #0
 800182c:	757b      	strb	r3, [r7, #21]
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29b      	uxth	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	75bb      	strb	r3, [r7, #22]
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 800183e:	2304      	movs	r3, #4
 8001840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 8001844:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f00d f989 	bl	800eb64 <malloc>
 8001852:	4603      	mov	r3, r0
 8001854:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 8001856:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f00d f980 	bl	800eb64 <malloc>
 8001864:	4603      	mov	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 8001868:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	461a      	mov	r2, r3
 8001872:	2100      	movs	r1, #0
 8001874:	69f8      	ldr	r0, [r7, #28]
 8001876:	f00d f993 	bl	800eba0 <memset>
	read_command[0]=READ_BUF;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	2203      	movs	r2, #3
 800187e:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	b29a      	uxth	r2, r3
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3302      	adds	r3, #2
 8001892:	89ba      	ldrh	r2, [r7, #12]
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	3303      	adds	r3, #3
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	483c      	ldr	r0, [pc, #240]	; (8001998 <MEM_READPAGE+0x184>)
 80018a8:	f001 fd4a 	bl	8003340 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 80018ac:	f107 0114 	add.w	r1, r7, #20
 80018b0:	2364      	movs	r3, #100	; 0x64
 80018b2:	2204      	movs	r2, #4
 80018b4:	4839      	ldr	r0, [pc, #228]	; (800199c <MEM_READPAGE+0x188>)
 80018b6:	f004 fcd6 	bl	8006266 <HAL_SPI_Transmit>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <MEM_READPAGE+0xbc>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c6:	4834      	ldr	r0, [pc, #208]	; (8001998 <MEM_READPAGE+0x184>)
 80018c8:	f001 fd3a 	bl	8003340 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80018cc:	2301      	movs	r3, #1
 80018ce:	e05e      	b.n	800198e <MEM_READPAGE+0x17a>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d6:	4830      	ldr	r0, [pc, #192]	; (8001998 <MEM_READPAGE+0x184>)
 80018d8:	f001 fd32 	bl	8003340 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 80018dc:	bf00      	nop
 80018de:	20c0      	movs	r0, #192	; 0xc0
 80018e0:	f7ff fe02 	bl	80014e8 <STAT_READ>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d0f7      	beq.n	80018de <MEM_READPAGE+0xca>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f4:	4828      	ldr	r0, [pc, #160]	; (8001998 <MEM_READPAGE+0x184>)
 80018f6:	f001 fd23 	bl	8003340 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){
 80018fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018fe:	b29a      	uxth	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	2264      	movs	r2, #100	; 0x64
 800190a:	9200      	str	r2, [sp, #0]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	69f9      	ldr	r1, [r7, #28]
 8001910:	4822      	ldr	r0, [pc, #136]	; (800199c <MEM_READPAGE+0x188>)
 8001912:	f004 fde4 	bl	80064de <HAL_SPI_TransmitReceive>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <MEM_READPAGE+0x118>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	481d      	ldr	r0, [pc, #116]	; (8001998 <MEM_READPAGE+0x184>)
 8001924:	f001 fd0c 	bl	8003340 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001928:	2301      	movs	r3, #1
 800192a:	e030      	b.n	800198e <MEM_READPAGE+0x17a>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001932:	4819      	ldr	r0, [pc, #100]	; (8001998 <MEM_READPAGE+0x184>)
 8001934:	f001 fd04 	bl	8003340 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001938:	bf00      	nop
 800193a:	20c0      	movs	r0, #192	; 0xc0
 800193c:	f7ff fdd4 	bl	80014e8 <STAT_READ>
 8001940:	4603      	mov	r3, r0
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b01      	cmp	r3, #1
 8001948:	d0f7      	beq.n	800193a <MEM_READPAGE+0x126>

	if (bytes == 1) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d104      	bne.n	800195a <MEM_READPAGE+0x146>
		*data = rec_data[4];
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	791a      	ldrb	r2, [r3, #4]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e012      	b.n	8001980 <MEM_READPAGE+0x16c>
	} else {
		for(int i = 0; i < bytes; i++){
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	e00b      	b.n	8001978 <MEM_READPAGE+0x164>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	3304      	adds	r3, #4
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	441a      	add	r2, r3
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	440b      	add	r3, r1
 800196e:	7812      	ldrb	r2, [r2, #0]
 8001970:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	3301      	adds	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8ef      	bhi.n	8001960 <MEM_READPAGE+0x14c>
		}
	}
	free(read_command);
 8001980:	69f8      	ldr	r0, [r7, #28]
 8001982:	f00d f8f7 	bl	800eb74 <free>
	free(rec_data);
 8001986:	69b8      	ldr	r0, [r7, #24]
 8001988:	f00d f8f4 	bl	800eb74 <free>
	return(HAL_OK);
 800198c:	2300      	movs	r3, #0

}
 800198e:	4618      	mov	r0, r3
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020000 	.word	0x40020000
 800199c:	20000730 	.word	0x20000730

080019a0 <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	e016      	b.n	80019da <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	019b      	lsls	r3, r3, #6
 80019b2:	b298      	uxth	r0, r3
 80019b4:	1cfa      	adds	r2, r7, #3
 80019b6:	2301      	movs	r3, #1
 80019b8:	2100      	movs	r1, #0
 80019ba:	f7ff ff2b 	bl	8001814 <MEM_READPAGE>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <mem_find_free_block+0x2a>
			return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	e00d      	b.n	80019e6 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	2bff      	cmp	r3, #255	; 0xff
 80019ce:	d101      	bne.n	80019d4 <mem_find_free_block+0x34>
			return i;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	e008      	b.n	80019e6 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3301      	adds	r3, #1
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e0:	dbe4      	blt.n	80019ac <mem_find_free_block+0xc>
		}
	}
	return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019f4:	2108      	movs	r1, #8
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <BUZZ+0x20>)
 80019f8:	f005 f96c 	bl	8006cd4 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80019fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a00:	f001 f9fc 	bl	8002dfc <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001a04:	2108      	movs	r1, #8
 8001a06:	4802      	ldr	r0, [pc, #8]	; (8001a10 <BUZZ+0x20>)
 8001a08:	f005 fa14 	bl	8006e34 <HAL_TIM_PWM_Stop>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000788 	.word	0x20000788

08001a14 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a22:	2102      	movs	r1, #2
 8001a24:	4820      	ldr	r0, [pc, #128]	; (8001aa8 <choose+0x94>)
 8001a26:	f001 fc73 	bl	8003310 <HAL_GPIO_ReadPin>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d136      	bne.n	8001a9e <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <choose+0x98>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a38:	e012      	b.n	8001a60 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 8001a3a:	481c      	ldr	r0, [pc, #112]	; (8001aac <choose+0x98>)
 8001a3c:	f005 f80c 	bl	8006a58 <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <choose+0x98>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d108      	bne.n	8001a60 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001a4e:	4817      	ldr	r0, [pc, #92]	; (8001aac <choose+0x98>)
 8001a50:	f005 f85c 	bl	8006b0c <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	e01e      	b.n	8001a9e <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a60:	2102      	movs	r1, #2
 8001a62:	4811      	ldr	r0, [pc, #68]	; (8001aa8 <choose+0x94>)
 8001a64:	f001 fc54 	bl	8003310 <HAL_GPIO_ReadPin>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0e5      	beq.n	8001a3a <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d102      	bne.n	8001a88 <choose+0x74>
	 	    	*count = 0;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4619      	mov	r1, r3
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7ff fc2e 	bl	80012f4 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <choose+0x98>)
 8001a9a:	f005 f837 	bl	8006b0c <HAL_TIM_Base_Stop>
	 	}
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	200007d0 	.word	0x200007d0

08001ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab4:	f001 f960 	bl	8002d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab8:	f000 f872 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001abc:	f000 fa3a 	bl	8001f34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ac0:	f000 f8d8 	bl	8001c74 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001ac4:	f000 f904 	bl	8001cd0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ac8:	f000 f93a 	bl	8001d40 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001acc:	f000 f96e 	bl	8001dac <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ad0:	f000 f9e2 	bl	8001e98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ad4:	f009 fc2e 	bl	800b334 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <main+0xa0>)
 8001ada:	2104      	movs	r1, #4
 8001adc:	2001      	movs	r0, #1
 8001ade:	f009 fd21 	bl	800b524 <osMessageQueueNew>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <main+0xa4>)
 8001ae6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <main+0xa8>)
 8001aea:	2100      	movs	r1, #0
 8001aec:	481b      	ldr	r0, [pc, #108]	; (8001b5c <main+0xac>)
 8001aee:	f009 fc6b 	bl	800b3c8 <osThreadNew>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <main+0xb0>)
 8001af6:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001af8:	4a1a      	ldr	r2, [pc, #104]	; (8001b64 <main+0xb4>)
 8001afa:	2100      	movs	r1, #0
 8001afc:	481a      	ldr	r0, [pc, #104]	; (8001b68 <main+0xb8>)
 8001afe:	f009 fc63 	bl	800b3c8 <osThreadNew>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <main+0xbc>)
 8001b06:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001b08:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <main+0xc0>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4819      	ldr	r0, [pc, #100]	; (8001b74 <main+0xc4>)
 8001b0e:	f009 fc5b 	bl	800b3c8 <osThreadNew>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <main+0xc8>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <main+0xcc>)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4818      	ldr	r0, [pc, #96]	; (8001b80 <main+0xd0>)
 8001b1e:	f009 fc53 	bl	800b3c8 <osThreadNew>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <main+0xd4>)
 8001b26:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <main+0xd8>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4817      	ldr	r0, [pc, #92]	; (8001b8c <main+0xdc>)
 8001b2e:	f009 fc4b 	bl	800b3c8 <osThreadNew>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <main+0xe0>)
 8001b36:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8001b38:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <main+0xe4>)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4816      	ldr	r0, [pc, #88]	; (8001b98 <main+0xe8>)
 8001b3e:	f009 fc43 	bl	800b3c8 <osThreadNew>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <main+0xec>)
 8001b46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b48:	f009 fc18 	bl	800b37c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <main+0x9c>
 8001b4e:	bf00      	nop
 8001b50:	0800f9ac 	.word	0x0800f9ac
 8001b54:	20000830 	.word	0x20000830
 8001b58:	0800f8d4 	.word	0x0800f8d4
 8001b5c:	0800201d 	.word	0x0800201d
 8001b60:	20000818 	.word	0x20000818
 8001b64:	0800f8f8 	.word	0x0800f8f8
 8001b68:	080020bd 	.word	0x080020bd
 8001b6c:	2000081c 	.word	0x2000081c
 8001b70:	0800f91c 	.word	0x0800f91c
 8001b74:	08002141 	.word	0x08002141
 8001b78:	20000820 	.word	0x20000820
 8001b7c:	0800f940 	.word	0x0800f940
 8001b80:	0800216d 	.word	0x0800216d
 8001b84:	20000824 	.word	0x20000824
 8001b88:	0800f964 	.word	0x0800f964
 8001b8c:	08002211 	.word	0x08002211
 8001b90:	20000828 	.word	0x20000828
 8001b94:	0800f988 	.word	0x0800f988
 8001b98:	080022e9 	.word	0x080022e9
 8001b9c:	2000082c 	.word	0x2000082c

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	; 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	2230      	movs	r2, #48	; 0x30
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f00c fff6 	bl	800eba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <SystemClock_Config+0xd0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bec:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <SystemClock_Config+0xd0>)
 8001bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c14:	2308      	movs	r3, #8
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c18:	23a8      	movs	r3, #168	; 0xa8
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c20:	2307      	movs	r3, #7
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fddf 	bl	80057ec <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c34:	f000 fb88 	bl	8002348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	2102      	movs	r1, #2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 f841 	bl	8005cdc <HAL_RCC_ClockConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c60:	f000 fb72 	bl	8002348 <Error_Handler>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3750      	adds	r7, #80	; 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40007000 	.word	0x40007000

08001c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <MX_I2C1_Init+0x54>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <MX_I2C1_Init+0x58>)
 8001c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001cb2:	f001 fb5f 	bl	8003374 <HAL_I2C_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cbc:	f000 fb44 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000684 	.word	0x20000684
 8001cc8:	40005400 	.word	0x40005400
 8001ccc:	000186a0 	.word	0x000186a0

08001cd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <MX_SPI1_Init+0x6c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001ce4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ce8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001d06:	2218      	movs	r2, #24
 8001d08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001d1e:	220a      	movs	r2, #10
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_SPI1_Init+0x68>)
 8001d24:	f004 fa16 	bl	8006154 <HAL_SPI_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d2e:	f000 fb0b 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200006d8 	.word	0x200006d8
 8001d3c:	40013000 	.word	0x40013000

08001d40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <MX_SPI2_Init+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d8c:	220a      	movs	r2, #10
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <MX_SPI2_Init+0x64>)
 8001d92:	f004 f9df 	bl	8006154 <HAL_SPI_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d9c:	f000 fad4 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000730 	.word	0x20000730
 8001da8:	40003800 	.word	0x40003800

08001dac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	615a      	str	r2, [r3, #20]
 8001dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001de6:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001dea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001df4:	2231      	movs	r2, #49	; 0x31
 8001df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e04:	4823      	ldr	r0, [pc, #140]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001e06:	f004 fdd7 	bl	80069b8 <HAL_TIM_Base_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e10:	f000 fa9a 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	481c      	ldr	r0, [pc, #112]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001e22:	f005 fa35 	bl	8007290 <HAL_TIM_ConfigClockSource>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e2c:	f000 fa8c 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e30:	4818      	ldr	r0, [pc, #96]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001e32:	f004 fef5 	bl	8006c20 <HAL_TIM_PWM_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e3c:	f000 fa84 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e48:	f107 0320 	add.w	r3, r7, #32
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4811      	ldr	r0, [pc, #68]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001e50:	f005 fdda 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e5a:	f000 fa75 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5e:	2360      	movs	r3, #96	; 0x60
 8001e60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001e62:	2318      	movs	r3, #24
 8001e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2208      	movs	r2, #8
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001e76:	f005 f949 	bl	800710c <HAL_TIM_PWM_ConfigChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e80:	f000 fa62 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <MX_TIM2_Init+0xe8>)
 8001e86:	f000 fe27 	bl	8002ad8 <HAL_TIM_MspPostInit>

}
 8001e8a:	bf00      	nop
 8001e8c:	3738      	adds	r7, #56	; 0x38
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000788 	.word	0x20000788

08001e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	463b      	mov	r3, r7
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <MX_TIM3_Init+0x98>)
 8001eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001ebc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001ec0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001eca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ece:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001edc:	4813      	ldr	r0, [pc, #76]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001ede:	f004 fd6b 	bl	80069b8 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ee8:	f000 fa2e 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001efa:	f005 f9c9 	bl	8007290 <HAL_TIM_ConfigClockSource>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f04:	f000 fa20 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_TIM3_Init+0x94>)
 8001f16:	f005 fd77 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f20:	f000 fa12 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200007d0 	.word	0x200007d0
 8001f30:	40000400 	.word	0x40000400

08001f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a28      	ldr	r2, [pc, #160]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a21      	ldr	r2, [pc, #132]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <MX_GPIO_Init+0xdc>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001fa4:	481b      	ldr	r0, [pc, #108]	; (8002014 <MX_GPIO_Init+0xe0>)
 8001fa6:	f001 f9cb 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2122      	movs	r1, #34	; 0x22
 8001fae:	481a      	ldr	r0, [pc, #104]	; (8002018 <MX_GPIO_Init+0xe4>)
 8001fb0:	f001 f9c6 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4813      	ldr	r0, [pc, #76]	; (8002014 <MX_GPIO_Init+0xe0>)
 8001fc8:	f001 f81e 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8001fcc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480b      	ldr	r0, [pc, #44]	; (8002014 <MX_GPIO_Init+0xe0>)
 8001fe6:	f001 f80f 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8001fea:	2322      	movs	r3, #34	; 0x22
 8001fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_GPIO_Init+0xe4>)
 8002002:	f001 f801 	bl	8003008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002006:	bf00      	nop
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400

0800201c <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002024:	f00c f88a 	bl	800e13c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <Start_Init+0x84>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f00a fad1 	bl	800c5d4 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <Start_Init+0x88>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f00a facc 	bl	800c5d4 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <Start_Init+0x8c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f00a fac7 	bl	800c5d4 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <Start_Init+0x90>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f00a fac2 	bl	800c5d4 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <Start_Init+0x94>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f00a fabd 	bl	800c5d4 <vTaskSuspend>

    MFRC_INIT();
 800205a:	f7fe fbbd 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 800205e:	f7fe fb73 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 8002062:	f7fe fed5 	bl	8000e10 <OLED_INIT>
    OLED_Print(TC);
 8002066:	4813      	ldr	r0, [pc, #76]	; (80020b4 <Start_Init+0x98>)
 8002068:	f7ff f817 	bl	800109a <OLED_Print>
    MEM_INIT();
 800206c:	f7ff fb26 	bl	80016bc <MEM_INIT>
    block_erase(0x0000);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fae7 	bl	8001644 <block_erase>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8002076:	bf00      	nop
 8002078:	2102      	movs	r1, #2
 800207a:	480f      	ldr	r0, [pc, #60]	; (80020b8 <Start_Init+0x9c>)
 800207c:	f001 f948 	bl	8003310 <HAL_GPIO_ReadPin>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f8      	bne.n	8002078 <Start_Init+0x5c>
    vTaskResume(HomeHandle);
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <Start_Init+0x8c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f00a fb4a 	bl	800c724 <vTaskResume>
    osDelay(10);
 8002090:	200a      	movs	r0, #10
 8002092:	f009 fa2c 	bl	800b4ee <osDelay>
    vTaskSuspend(NULL);
 8002096:	2000      	movs	r0, #0
 8002098:	f00a fa9c 	bl	800c5d4 <vTaskSuspend>
	vTaskSuspend(ReadCardHandle);
 800209c:	e7c4      	b.n	8002028 <Start_Init+0xc>
 800209e:	bf00      	nop
 80020a0:	2000081c 	.word	0x2000081c
 80020a4:	20000820 	.word	0x20000820
 80020a8:	20000824 	.word	0x20000824
 80020ac:	20000828 	.word	0x20000828
 80020b0:	2000082c 	.word	0x2000082c
 80020b4:	20000400 	.word	0x20000400
 80020b8:	40020000 	.word	0x40020000

080020bc <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 80020c4:	201c      	movs	r0, #28
 80020c6:	f00c fd4d 	bl	800eb64 <malloc>
 80020ca:	4603      	mov	r3, r0
 80020cc:	60fb      	str	r3, [r7, #12]
	int ranonce = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
	MFRC_ANTON();
 80020d6:	f7fe fafd 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 80020e0:	2100      	movs	r1, #0
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <StartReadCard+0x78>)
 80020e4:	f7ff f8a4 	bl	8001230 <OLED_SCREEN>
		ranonce++;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
	}
	if(UL_readcard(read_card) == PCD_OK){
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fd49 	bl	8000b88 <UL_readcard>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2bcc      	cmp	r3, #204	; 0xcc
 80020fa:	d10d      	bne.n	8002118 <StartReadCard+0x5c>
			BUZZ();
 80020fc:	f7ff fc78 	bl	80019f0 <BUZZ>
			MFRC_ANTOFF();
 8002100:	f7fe fb22 	bl	8000748 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0); //Send a pointer to our string to the Card Found task to use
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <StartReadCard+0x7c>)
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	f107 010c 	add.w	r1, r7, #12
 800210c:	2300      	movs	r3, #0
 800210e:	2200      	movs	r2, #0
 8002110:	f009 fca2 	bl	800ba58 <xQueueGenericSend>
			suspend = 1;
 8002114:	2301      	movs	r3, #1
 8002116:	613b      	str	r3, [r7, #16]
		}
	if (suspend == 1) {
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d1d9      	bne.n	80020d2 <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <StartReadCard+0x80>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f00a fafe 	bl	800c724 <vTaskResume>
		ranonce = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 800212c:	2000      	movs	r0, #0
 800212e:	f00a fa51 	bl	800c5d4 <vTaskSuspend>
  {
 8002132:	e7ce      	b.n	80020d2 <StartReadCard+0x16>
 8002134:	0800fa34 	.word	0x0800fa34
 8002138:	20000830 	.word	0x20000830
 800213c:	20000828 	.word	0x20000828

08002140 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8002152:	2100      	movs	r1, #0
 8002154:	4804      	ldr	r0, [pc, #16]	; (8002168 <StartWriteCard+0x28>)
 8002156:	f7ff f86b 	bl	8001230 <OLED_SCREEN>
	  	ranonce++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3301      	adds	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 8002160:	2001      	movs	r0, #1
 8002162:	f009 f9c4 	bl	800b4ee <osDelay>
	  if (ranonce == 0){
 8002166:	e7f1      	b.n	800214c <StartWriteCard+0xc>
 8002168:	0800fa5c 	.word	0x0800fa5c

0800216c <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af02      	add	r7, sp, #8
 8002172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10d      	bne.n	80021a2 <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8002186:	2100      	movs	r1, #0
 8002188:	481d      	ldr	r0, [pc, #116]	; (8002200 <StartHome+0x94>)
 800218a:	f7ff f851 	bl	8001230 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2201      	movs	r2, #1
 8002194:	4619      	mov	r1, r3
 8002196:	481a      	ldr	r0, [pc, #104]	; (8002200 <StartHome+0x94>)
 8002198:	f7ff f8ac 	bl	80012f4 <OLED_SELECT>
		  ranonce++;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 80021a2:	f107 0210 	add.w	r2, r7, #16
 80021a6:	f107 010c 	add.w	r1, r7, #12
 80021aa:	2301      	movs	r3, #1
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2306      	movs	r3, #6
 80021b0:	4813      	ldr	r0, [pc, #76]	; (8002200 <StartHome+0x94>)
 80021b2:	f7ff fc2f 	bl	8001a14 <choose>
	  if (suspend == 1) {
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d1df      	bne.n	800217c <StartHome+0x10>
		switch(count) {
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d012      	beq.n	80021e8 <StartHome+0x7c>
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d816      	bhi.n	80021f4 <StartHome+0x88>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <StartHome+0x64>
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d006      	beq.n	80021dc <StartHome+0x70>
 80021ce:	e011      	b.n	80021f4 <StartHome+0x88>
			case 0:
				vTaskResume(ReadCardHandle);
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <StartHome+0x98>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f00a faa5 	bl	800c724 <vTaskResume>
				break;
 80021da:	e00b      	b.n	80021f4 <StartHome+0x88>
			case 1:
				vTaskResume(WriteCardHandle);
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <StartHome+0x9c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00a fa9f 	bl	800c724 <vTaskResume>
				break;
 80021e6:	e005      	b.n	80021f4 <StartHome+0x88>
			case 2:
				vTaskResume(ShowFilesHandle);
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <StartHome+0xa0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00a fa99 	bl	800c724 <vTaskResume>
				break;
 80021f2:	bf00      	nop
		}
		ranonce = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f00a f9eb 	bl	800c5d4 <vTaskSuspend>
  {
 80021fe:	e7bd      	b.n	800217c <StartHome+0x10>
 8002200:	0800fa20 	.word	0x0800fa20
 8002204:	2000081c 	.word	0x2000081c
 8002208:	20000820 	.word	0x20000820
 800220c:	2000082c 	.word	0x2000082c

08002210 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08b      	sub	sp, #44	; 0x2c
 8002214:	af02      	add	r7, sp, #8
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
	 int ranonce = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
	 Card* read_card;
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d131      	bne.n	800228e <CardFoundStart+0x7e>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 800222a:	bf00      	nop
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <CardFoundStart+0xcc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f107 0110 	add.w	r1, r7, #16
 8002234:	2200      	movs	r2, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f009 fda8 	bl	800bd8c <xQueueReceive>
 800223c:	4603      	mov	r3, r0
 800223e:	2b01      	cmp	r3, #1
 8002240:	d1f4      	bne.n	800222c <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	791b      	ldrb	r3, [r3, #4]
 800224a:	4619      	mov	r1, r3
 800224c:	4610      	mov	r0, r2
 800224e:	f7fe fcd7 	bl	8000c00 <uid_tostring>
 8002252:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8002254:	2100      	movs	r1, #0
 8002256:	4822      	ldr	r0, [pc, #136]	; (80022e0 <CardFoundStart+0xd0>)
 8002258:	f7fe ffea 	bl	8001230 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, UID_LOC, uid_str);
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	2101      	movs	r1, #1
 8002260:	481f      	ldr	r0, [pc, #124]	; (80022e0 <CardFoundStart+0xd0>)
 8002262:	f7ff f81e 	bl	80012a2 <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, CARDTYPE_LOC, read_card->type);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	461a      	mov	r2, r3
 800226c:	2102      	movs	r1, #2
 800226e:	481c      	ldr	r0, [pc, #112]	; (80022e0 <CardFoundStart+0xd0>)
 8002270:	f7ff f817 	bl	80012a2 <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	4818      	ldr	r0, [pc, #96]	; (80022e0 <CardFoundStart+0xd0>)
 800227e:	f7ff f839 	bl	80012f4 <OLED_SELECT>
		ranonce++;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 8002288:	69b8      	ldr	r0, [r7, #24]
 800228a:	f00c fc73 	bl	800eb74 <free>
	}

	choose(&SCRN_CardFound, &suspend, &count, 2, OLED_NORESTORE);
 800228e:	f107 0214 	add.w	r2, r7, #20
 8002292:	f107 010c 	add.w	r1, r7, #12
 8002296:	2300      	movs	r3, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2302      	movs	r3, #2
 800229c:	4810      	ldr	r0, [pc, #64]	; (80022e0 <CardFoundStart+0xd0>)
 800229e:	f7ff fbb9 	bl	8001a14 <choose>
 	if (suspend == 1) {
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d1bb      	bne.n	8002220 <CardFoundStart+0x10>
 		vTaskResume(HomeHandle);
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <CardFoundStart+0xd4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00a fa39 	bl	800c724 <vTaskResume>
 		ranonce = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 		count = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 		if (count == 0) {
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d108      	bne.n	80022d2 <CardFoundStart+0xc2>
 			enter_card(read_card, mem_find_free_block());
 80022c0:	693c      	ldr	r4, [r7, #16]
 80022c2:	f7ff fb6d 	bl	80019a0 <mem_find_free_block>
 80022c6:	4603      	mov	r3, r0
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	4620      	mov	r0, r4
 80022ce:	f000 f840 	bl	8002352 <enter_card>
 		}
 		vTaskSuspend(NULL);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f00a f97e 	bl	800c5d4 <vTaskSuspend>
  {
 80022d8:	e7a2      	b.n	8002220 <CardFoundStart+0x10>
 80022da:	bf00      	nop
 80022dc:	20000830 	.word	0x20000830
 80022e0:	0800fa48 	.word	0x0800fa48
 80022e4:	20000824 	.word	0x20000824

080022e8 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
  int count = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  int ranonce = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1fc      	bne.n	80022f8 <StartShowFiles+0x10>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 80022fe:	2100      	movs	r1, #0
 8002300:	4807      	ldr	r0, [pc, #28]	; (8002320 <StartShowFiles+0x38>)
 8002302:	f7fe ff95 	bl	8001230 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_RESTORE);
 8002306:	2201      	movs	r2, #1
 8002308:	2100      	movs	r1, #0
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <StartShowFiles+0x38>)
 800230c:	f7fe fff2 	bl	80012f4 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 8002310:	2100      	movs	r1, #0
 8002312:	4803      	ldr	r0, [pc, #12]	; (8002320 <StartShowFiles+0x38>)
 8002314:	f7ff f886 	bl	8001424 <OLED_display_files>
		  ranonce++;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3301      	adds	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 800231e:	e7eb      	b.n	80022f8 <StartShowFiles+0x10>
 8002320:	0800fa70 	.word	0x0800fa70

08002324 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002336:	f000 fd41 	bl	8002dbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40000c00 	.word	0x40000c00

08002348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002350:	e7fe      	b.n	8002350 <Error_Handler+0x8>

08002352 <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry) {
 8002352:	b5b0      	push	{r4, r5, r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	807b      	strh	r3, [r7, #2]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	019b      	lsls	r3, r3, #6
 8002362:	81fb      	strh	r3, [r7, #14]
	block_erase(entry); //Erase entire block ready for new data
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f96c 	bl	8001644 <block_erase>
	enter_metadata(card, entry);
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f83f 	bl	80023f4 <enter_metadata>

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 8002376:	89fb      	ldrh	r3, [r7, #14]
 8002378:	3301      	adds	r3, #1
 800237a:	b29c      	uxth	r4, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689d      	ldr	r5, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fd ff2b 	bl	80001e0 <strlen>
 800238a:	4603      	mov	r3, r0
 800238c:	462a      	mov	r2, r5
 800238e:	2100      	movs	r1, #0
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff f9af 	bl	80016f4 <MEM_WRITE>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <enter_card+0x4e>
		return RFS_WRITE_ERROR;
 800239c:	2304      	movs	r3, #4
 800239e:	e025      	b.n	80023ec <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80023a0:	89fb      	ldrh	r3, [r7, #14]
 80023a2:	3301      	adds	r3, #1
 80023a4:	b29c      	uxth	r4, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fd ff18 	bl	80001e0 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b299      	uxth	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	791b      	ldrb	r3, [r3, #4]
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff f999 	bl	80016f4 <MEM_WRITE>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <enter_card+0x7a>
		return RFS_WRITE_ERROR;
 80023c8:	2304      	movs	r3, #4
 80023ca:	e00f      	b.n	80023ec <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	3302      	adds	r3, #2
 80023d0:	b298      	uxth	r0, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8b1b      	ldrh	r3, [r3, #24]
 80023da:	2100      	movs	r1, #0
 80023dc:	f7ff f98a 	bl	80016f4 <MEM_WRITE>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <enter_card+0x98>
		return RFS_WRITE_ERROR;
 80023e6:	2304      	movs	r3, #4
 80023e8:	e000      	b.n	80023ec <enter_card+0x9a>
	}

	return RFS_OK;
 80023ea:	2300      	movs	r3, #0

}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}

080023f4 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8b1b      	ldrh	r3, [r3, #24]
 8002404:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7c1b      	ldrb	r3, [r3, #16]
 800240a:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	791b      	ldrb	r3, [r3, #4]
 8002410:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fd fee2 	bl	80001e0 <strlen>
 800241c:	4603      	mov	r3, r0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	3303      	adds	r3, #3
 8002422:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8002424:	7b3b      	ldrb	r3, [r7, #12]
 8002426:	4618      	mov	r0, r3
 8002428:	f00c fb9c 	bl	800eb64 <malloc>
 800242c:	4603      	mov	r3, r0
 800242e:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68dc      	ldr	r4, [r3, #12]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fd fed1 	bl	80001e0 <strlen>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	4621      	mov	r1, r4
 8002444:	68b8      	ldr	r0, [r7, #8]
 8002446:	f00c fb9d 	bl	800eb84 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fd fec6 	bl	80001e0 <strlen>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4413      	add	r3, r2
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd febc 	bl	80001e0 <strlen>
 8002468:	4603      	mov	r3, r0
 800246a:	3301      	adds	r3, #1
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	4413      	add	r3, r2
 8002470:	7b7a      	ldrb	r2, [r7, #13]
 8002472:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd feb1 	bl	80001e0 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	3302      	adds	r3, #2
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	4413      	add	r3, r2
 8002486:	7bba      	ldrb	r2, [r7, #14]
 8002488:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	019b      	lsls	r3, r3, #6
 800248e:	b298      	uxth	r0, r3
 8002490:	7b3b      	ldrb	r3, [r7, #12]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	2100      	movs	r1, #0
 8002496:	f7ff f92d 	bl	80016f4 <MEM_WRITE>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <enter_metadata+0xb0>
		return RFS_WRITE_ERROR;
 80024a0:	2304      	movs	r3, #4
 80024a2:	e003      	b.n	80024ac <enter_metadata+0xb8>
	}
	free(metadata);
 80024a4:	68b8      	ldr	r0, [r7, #8]
 80024a6:	f00c fb65 	bl	800eb74 <free>
	return RFS_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 80024be:	201c      	movs	r0, #28
 80024c0:	f00c fb50 	bl	800eb64 <malloc>
 80024c4:	4603      	mov	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f81e 	bl	800250e <read_metadata>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <read_card_entry+0x28>
		return NULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	e014      	b.n	8002506 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	4619      	mov	r1, r3
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f881 	bl	80025e8 <read_nameuid>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <read_card_entry+0x3c>
		return NULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e00a      	b.n	8002506 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	4619      	mov	r1, r3
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f8e2 	bl	80026be <read_cardcontents>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <read_card_entry+0x50>
		return NULL;
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <read_card_entry+0x52>
	}

	return result;
 8002504:	68fb      	ldr	r3, [r7, #12]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 800251a:	887b      	ldrh	r3, [r7, #2]
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f8f5 	bl	800270e <get_datasize>
 8002524:	4603      	mov	r3, r0
 8002526:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8002528:	8afb      	ldrh	r3, [r7, #22]
 800252a:	4618      	mov	r0, r3
 800252c:	f00c fb1a 	bl	800eb64 <malloc>
 8002530:	4603      	mov	r3, r0
 8002532:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 8002534:	8afb      	ldrh	r3, [r7, #22]
 8002536:	3b02      	subs	r3, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f00c fb13 	bl	800eb64 <malloc>
 800253e:	4603      	mov	r3, r0
 8002540:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	b298      	uxth	r0, r3
 8002548:	8afb      	ldrh	r3, [r7, #22]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	2100      	movs	r1, #0
 800254e:	f7ff f961 	bl	8001814 <MEM_READPAGE>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <read_metadata+0x54>
		free(metadata);
 8002558:	6938      	ldr	r0, [r7, #16]
 800255a:	f00c fb0b 	bl	800eb74 <free>
		return RFS_READ_ERROR;
 800255e:	2305      	movs	r3, #5
 8002560:	e03e      	b.n	80025e0 <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2bff      	cmp	r3, #255	; 0xff
 8002568:	d104      	bne.n	8002574 <read_metadata+0x66>
		free(metadata);
 800256a:	6938      	ldr	r0, [r7, #16]
 800256c:	f00c fb02 	bl	800eb74 <free>
		return RFS_NO_CARD;
 8002570:	2301      	movs	r3, #1
 8002572:	e035      	b.n	80025e0 <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 8002574:	8afb      	ldrh	r3, [r7, #22]
 8002576:	3b03      	subs	r3, #3
 8002578:	461a      	mov	r2, r3
 800257a:	6939      	ldr	r1, [r7, #16]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f00c fb01 	bl	800eb84 <memcpy>
	type[metadata_size - 3] = '\0';
 8002582:	8afb      	ldrh	r3, [r7, #22]
 8002584:	3b03      	subs	r3, #3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
	result->type = type;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 8002594:	8afb      	ldrh	r3, [r7, #22]
 8002596:	3b03      	subs	r3, #3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80025a4:	8afb      	ldrh	r3, [r7, #22]
 80025a6:	3b02      	subs	r3, #2
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 80025b2:	8afb      	ldrh	r3, [r7, #22]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d104      	bne.n	80025ca <read_metadata+0xbc>
		free(metadata);
 80025c0:	6938      	ldr	r0, [r7, #16]
 80025c2:	f00c fad7 	bl	800eb74 <free>
		return RFS_CARD_PROTECTED;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e00a      	b.n	80025e0 <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 80025ca:	8afb      	ldrh	r3, [r7, #22]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	741a      	strb	r2, [r3, #16]
	free(metadata);
 80025d8:	6938      	ldr	r0, [r7, #16]
 80025da:	f00c facb 	bl	800eb74 <free>

	return RFS_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	2101      	movs	r1, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f888 	bl	800270e <get_datasize>
 80025fe:	4603      	mov	r3, r0
 8002600:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 8002602:	8afb      	ldrh	r3, [r7, #22]
 8002604:	4618      	mov	r0, r3
 8002606:	f00c faad 	bl	800eb64 <malloc>
 800260a:	4603      	mov	r3, r0
 800260c:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 800260e:	8afb      	ldrh	r3, [r7, #22]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	7912      	ldrb	r2, [r2, #4]
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	3301      	adds	r3, #1
 8002618:	4618      	mov	r0, r3
 800261a:	f00c faa3 	bl	800eb64 <malloc>
 800261e:	4603      	mov	r3, r0
 8002620:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	791b      	ldrb	r3, [r3, #4]
 8002626:	4618      	mov	r0, r3
 8002628:	f00c fa9c 	bl	800eb64 <malloc>
 800262c:	4603      	mov	r3, r0
 800262e:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	019b      	lsls	r3, r3, #6
 8002634:	b29b      	uxth	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	b298      	uxth	r0, r3
 800263a:	8afb      	ldrh	r3, [r7, #22]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	2100      	movs	r1, #0
 8002640:	f7ff f8e8 	bl	8001814 <MEM_READPAGE>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <read_nameuid+0x6c>
		free(raw_data);
 800264a:	6938      	ldr	r0, [r7, #16]
 800264c:	f00c fa92 	bl	800eb74 <free>
		return RFS_READ_ERROR;
 8002650:	2305      	movs	r3, #5
 8002652:	e030      	b.n	80026b6 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2bff      	cmp	r3, #255	; 0xff
 800265a:	d104      	bne.n	8002666 <read_nameuid+0x7e>
		free(raw_data);
 800265c:	6938      	ldr	r0, [r7, #16]
 800265e:	f00c fa89 	bl	800eb74 <free>
		return RFS_NO_CARD;
 8002662:	2301      	movs	r3, #1
 8002664:	e027      	b.n	80026b6 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8002666:	8afb      	ldrh	r3, [r7, #22]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	7912      	ldrb	r2, [r2, #4]
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	461a      	mov	r2, r3
 8002670:	6939      	ldr	r1, [r7, #16]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f00c fa86 	bl	800eb84 <memcpy>
	name[datasize - result->uidsize] = '\0';
 8002678:	8afb      	ldrh	r3, [r7, #22]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	7912      	ldrb	r2, [r2, #4]
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	461a      	mov	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
	result->name = name;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7fd fda5 	bl	80001e0 <strlen>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1899      	adds	r1, r3, r2
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	791b      	ldrb	r3, [r3, #4]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68b8      	ldr	r0, [r7, #8]
 80026a4:	f00c fa6e 	bl	800eb84 <memcpy>
	result->uid = uid;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	601a      	str	r2, [r3, #0]
	free(raw_data);
 80026ae:	6938      	ldr	r0, [r7, #16]
 80026b0:	f00c fa60 	bl	800eb74 <free>

	return RFS_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8b1b      	ldrh	r3, [r3, #24]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f00c fa48 	bl	800eb64 <malloc>
 80026d4:	4603      	mov	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	019b      	lsls	r3, r3, #6
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3302      	adds	r3, #2
 80026e0:	b298      	uxth	r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8b1b      	ldrh	r3, [r3, #24]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	2100      	movs	r1, #0
 80026ea:	f7ff f893 	bl	8001814 <MEM_READPAGE>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <read_cardcontents+0x40>
		free(contents);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f00c fa3d 	bl	800eb74 <free>
		return RFS_READ_ERROR;
 80026fa:	2305      	movs	r3, #5
 80026fc:	e003      	b.n	8002706 <read_cardcontents+0x48>
	}

	result->contents = contents;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	460a      	mov	r2, r1
 8002718:	80fb      	strh	r3, [r7, #6]
 800271a:	4613      	mov	r3, r2
 800271c:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8002726:	e014      	b.n	8002752 <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	019b      	lsls	r3, r3, #6
 800272c:	b29a      	uxth	r2, r3
 800272e:	797b      	ldrb	r3, [r7, #5]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4413      	add	r3, r2
 8002734:	b298      	uxth	r0, r3
 8002736:	f107 020d 	add.w	r2, r7, #13
 800273a:	89f9      	ldrh	r1, [r7, #14]
 800273c:	2301      	movs	r3, #1
 800273e:	f7ff f869 	bl	8001814 <MEM_READPAGE>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8002748:	2300      	movs	r3, #0
 800274a:	e008      	b.n	800275e <get_datasize+0x50>
		}
		size++;
 800274c:	89fb      	ldrh	r3, [r7, #14]
 800274e:	3301      	adds	r3, #1
 8002750:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 8002752:	7b7b      	ldrb	r3, [r7, #13]
 8002754:	2bff      	cmp	r3, #255	; 0xff
 8002756:	d1e7      	bne.n	8002728 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 8002758:	89fb      	ldrh	r3, [r7, #14]
 800275a:	3b01      	subs	r3, #1
 800275c:	b29b      	uxth	r3, r3
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
	int count = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002770:	2300      	movs	r3, #0
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	e00d      	b.n	8002792 <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f867 	bl	800284e <entry_present>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <get_number_files+0x36>
			count++;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3301      	adds	r3, #1
 800278a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002798:	dbed      	blt.n	8002776 <get_number_files+0x10>
 800279a:	e000      	b.n	800279e <get_number_files+0x38>
		} else {
			break;
 800279c:	bf00      	nop
		}

	}

	return count;
 800279e:	687b      	ldr	r3, [r7, #4]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 80027a8:	b5b0      	push	{r4, r5, r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	e03d      	b.n	8002832 <get_all_files+0x8a>
		if (entry_present(i) == RFS_OK) {
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f847 	bl	800284e <entry_present>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d13a      	bne.n	800283c <get_all_files+0x94>
			work = read_card_entry(i);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fe72 	bl	80024b4 <read_card_entry>
 80027d0:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fd02 	bl	80001e0 <strlen>
 80027dc:	4603      	mov	r3, r0
 80027de:	1c59      	adds	r1, r3, #1
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	18d4      	adds	r4, r2, r3
 80027e8:	4608      	mov	r0, r1
 80027ea:	f00c f9bb 	bl	800eb64 <malloc>
 80027ee:	4603      	mov	r3, r0
 80027f0:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	681c      	ldr	r4, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689d      	ldr	r5, [r3, #8]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fceb 	bl	80001e0 <strlen>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	4629      	mov	r1, r5
 8002810:	4620      	mov	r0, r4
 8002812:	f00c f9b7 	bl	800eb84 <memcpy>
			result[strlen(work->name)] = '\0';
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fce0 	bl	80001e0 <strlen>
 8002820:	4603      	mov	r3, r0
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002838:	dbbd      	blt.n	80027b6 <get_all_files+0xe>
 800283a:	e000      	b.n	800283e <get_all_files+0x96>
		} else {
			break;
 800283c:	bf00      	nop
		}
	}

	free(work);
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f00c f998 	bl	800eb74 <free>
	return RFS_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bdb0      	pop	{r4, r5, r7, pc}

0800284e <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	019b      	lsls	r3, r3, #6
 800285c:	b298      	uxth	r0, r3
 800285e:	f107 020f 	add.w	r2, r7, #15
 8002862:	2301      	movs	r3, #1
 8002864:	2100      	movs	r1, #0
 8002866:	f7fe ffd5 	bl	8001814 <MEM_READPAGE>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <entry_present+0x26>
		return RFS_READ_ERROR;
 8002870:	2305      	movs	r3, #5
 8002872:	e005      	b.n	8002880 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2bff      	cmp	r3, #255	; 0xff
 8002878:	d101      	bne.n	800287e <entry_present+0x30>
		return RFS_NO_CARD;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <entry_present+0x32>
	}

	return RFS_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_MspInit+0x54>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a11      	ldr	r2, [pc, #68]	; (80028dc <HAL_MspInit+0x54>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_MspInit+0x54>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_MspInit+0x54>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_MspInit+0x54>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_MspInit+0x54>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	210f      	movs	r1, #15
 80028ca:	f06f 0001 	mvn.w	r0, #1
 80028ce:	f000 fb71 	bl	8002fb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800

080028e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_I2C_MspInit+0x84>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d12b      	bne.n	800295a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_I2C_MspInit+0x88>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800291e:	23c0      	movs	r3, #192	; 0xc0
 8002920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002922:	2312      	movs	r3, #18
 8002924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800292e:	2304      	movs	r3, #4
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <HAL_I2C_MspInit+0x8c>)
 800293a:	f000 fb65 	bl	8003008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a08      	ldr	r2, [pc, #32]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800295a:	bf00      	nop
 800295c:	3728      	adds	r7, #40	; 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40005400 	.word	0x40005400
 8002968:	40023800 	.word	0x40023800
 800296c:	40020400 	.word	0x40020400

08002970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a32      	ldr	r2, [pc, #200]	; (8002a58 <HAL_SPI_MspInit+0xe8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d12c      	bne.n	80029ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 800299c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80029ca:	23a0      	movs	r3, #160	; 0xa0
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029da:	2305      	movs	r3, #5
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	4619      	mov	r1, r3
 80029e4:	481e      	ldr	r0, [pc, #120]	; (8002a60 <HAL_SPI_MspInit+0xf0>)
 80029e6:	f000 fb0f 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029ea:	e031      	b.n	8002a50 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_SPI_MspInit+0xf4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d12c      	bne.n	8002a50 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_SPI_MspInit+0xec>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002a2e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a40:	2305      	movs	r3, #5
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4807      	ldr	r0, [pc, #28]	; (8002a68 <HAL_SPI_MspInit+0xf8>)
 8002a4c:	f000 fadc 	bl	8003008 <HAL_GPIO_Init>
}
 8002a50:	bf00      	nop
 8002a52:	3730      	adds	r7, #48	; 0x30
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40013000 	.word	0x40013000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40003800 	.word	0x40003800
 8002a68:	40020400 	.word	0x40020400

08002a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d10e      	bne.n	8002a9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <HAL_TIM_Base_MspInit+0x64>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <HAL_TIM_Base_MspInit+0x64>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_TIM_Base_MspInit+0x64>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a9a:	e012      	b.n	8002ac2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <HAL_TIM_Base_MspInit+0x68>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_TIM_Base_MspInit+0x64>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_TIM_Base_MspInit+0x64>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_TIM_Base_MspInit+0x64>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40000400 	.word	0x40000400

08002ad8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d11d      	bne.n	8002b36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a0f      	ldr	r2, [pc, #60]	; (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b16:	2304      	movs	r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4804      	ldr	r0, [pc, #16]	; (8002b44 <HAL_TIM_MspPostInit+0x6c>)
 8002b32:	f000 fa69 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b36:	bf00      	nop
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000

08002b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	; 0x38
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <HAL_InitTick+0xe4>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	4a32      	ldr	r2, [pc, #200]	; (8002c2c <HAL_InitTick+0xe4>)
 8002b62:	f043 0308 	orr.w	r3, r3, #8
 8002b66:	6413      	str	r3, [r2, #64]	; 0x40
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_InitTick+0xe4>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b74:	f107 0210 	add.w	r2, r7, #16
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fab6 	bl	80060f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b8e:	f003 fa9b 	bl	80060c8 <HAL_RCC_GetPCLK1Freq>
 8002b92:	6378      	str	r0, [r7, #52]	; 0x34
 8002b94:	e004      	b.n	8002ba0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b96:	f003 fa97 	bl	80060c8 <HAL_RCC_GetPCLK1Freq>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba2:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_InitTick+0xe8>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	3b01      	subs	r3, #1
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002bae:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_InitTick+0xec>)
 8002bb0:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <HAL_InitTick+0xf0>)
 8002bb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <HAL_InitTick+0xec>)
 8002bb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bba:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_InitTick+0xec>)
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_InitTick+0xec>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_InitTick+0xec>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_InitTick+0xec>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002bd4:	4817      	ldr	r0, [pc, #92]	; (8002c34 <HAL_InitTick+0xec>)
 8002bd6:	f003 feef 	bl	80069b8 <HAL_TIM_Base_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002be0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11b      	bne.n	8002c20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002be8:	4812      	ldr	r0, [pc, #72]	; (8002c34 <HAL_InitTick+0xec>)
 8002bea:	f003 ffb7 	bl	8006b5c <HAL_TIM_Base_Start_IT>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d111      	bne.n	8002c20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002bfc:	2032      	movs	r0, #50	; 0x32
 8002bfe:	f000 f9f5 	bl	8002fec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d808      	bhi.n	8002c1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	2032      	movs	r0, #50	; 0x32
 8002c0e:	f000 f9d1 	bl	8002fb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_InitTick+0xf4>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e002      	b.n	8002c20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3738      	adds	r7, #56	; 0x38
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	20000834 	.word	0x20000834
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	20000508 	.word	0x20000508

08002c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <NMI_Handler+0x4>

08002c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c4a:	e7fe      	b.n	8002c4a <HardFault_Handler+0x4>

08002c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c50:	e7fe      	b.n	8002c50 <MemManage_Handler+0x4>

08002c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c56:	e7fe      	b.n	8002c56 <BusFault_Handler+0x4>

08002c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <UsageFault_Handler+0x4>

08002c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <TIM5_IRQHandler+0x10>)
 8002c72:	f004 f943 	bl	8006efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000834 	.word	0x20000834

08002c80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <OTG_FS_IRQHandler+0x10>)
 8002c86:	f001 fc84 	bl	8004592 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200064d4 	.word	0x200064d4

08002c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <_sbrk+0x5c>)
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <_sbrk+0x60>)
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <_sbrk+0x64>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <_sbrk+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d207      	bcs.n	8002cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc4:	f00b ff24 	bl	800eb10 <__errno>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	220c      	movs	r2, #12
 8002ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e009      	b.n	8002ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <_sbrk+0x64>)
 8002ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20010000 	.word	0x20010000
 8002cf4:	00000400 	.word	0x00000400
 8002cf8:	2000087c 	.word	0x2000087c
 8002cfc:	20006c10 	.word	0x20006c10

08002d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <SystemInit+0x20>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <SystemInit+0x20>)
 8002d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d28:	480d      	ldr	r0, [pc, #52]	; (8002d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d2a:	490e      	ldr	r1, [pc, #56]	; (8002d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d40:	4c0b      	ldr	r4, [pc, #44]	; (8002d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d4e:	f7ff ffd7 	bl	8002d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d52:	f00b fee3 	bl	800eb1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d56:	f7fe feab 	bl	8001ab0 <main>
  bx  lr    
 8002d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d64:	20000668 	.word	0x20000668
  ldr r2, =_sidata
 8002d68:	0800fae0 	.word	0x0800fae0
  ldr r2, =_sbss
 8002d6c:	20000668 	.word	0x20000668
  ldr r4, =_ebss
 8002d70:	20006c10 	.word	0x20006c10

08002d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC_IRQHandler>
	...

08002d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_Init+0x40>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <HAL_Init+0x40>)
 8002d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_Init+0x40>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_Init+0x40>)
 8002d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_Init+0x40>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_Init+0x40>)
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da0:	2003      	movs	r0, #3
 8002da2:	f000 f8fc 	bl	8002f9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da6:	200f      	movs	r0, #15
 8002da8:	f7ff fece 	bl	8002b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dac:	f7ff fd6c 	bl	8002888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023c00 	.word	0x40023c00

08002dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_IncTick+0x20>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_IncTick+0x24>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_IncTick+0x24>)
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	2000050c 	.word	0x2000050c
 8002de0:	20000880 	.word	0x20000880

08002de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return uwTick;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_GetTick+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000880 	.word	0x20000880

08002dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff ffee 	bl	8002de4 <HAL_GetTick>
 8002e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d005      	beq.n	8002e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_Delay+0x44>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e22:	bf00      	nop
 8002e24:	f7ff ffde 	bl	8002de4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d8f7      	bhi.n	8002e24 <HAL_Delay+0x28>
  {
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000050c 	.word	0x2000050c

08002e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e76:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60d3      	str	r3, [r2, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 0307 	and.w	r3, r3, #7
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db0b      	blt.n	8002ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	4907      	ldr	r1, [pc, #28]	; (8002ee0 <__NVIC_EnableIRQ+0x38>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000e100 	.word	0xe000e100

08002ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	db0a      	blt.n	8002f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	490c      	ldr	r1, [pc, #48]	; (8002f30 <__NVIC_SetPriority+0x4c>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	0112      	lsls	r2, r2, #4
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	440b      	add	r3, r1
 8002f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f0c:	e00a      	b.n	8002f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4908      	ldr	r1, [pc, #32]	; (8002f34 <__NVIC_SetPriority+0x50>)
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	3b04      	subs	r3, #4
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	440b      	add	r3, r1
 8002f22:	761a      	strb	r2, [r3, #24]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000e100 	.word	0xe000e100
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	bf28      	it	cs
 8002f56:	2304      	movcs	r3, #4
 8002f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d902      	bls.n	8002f68 <NVIC_EncodePriority+0x30>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3b03      	subs	r3, #3
 8002f66:	e000      	b.n	8002f6a <NVIC_EncodePriority+0x32>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f80:	f04f 31ff 	mov.w	r1, #4294967295
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43d9      	mvns	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	4313      	orrs	r3, r2
         );
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ff4c 	bl	8002e44 <__NVIC_SetPriorityGrouping>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc6:	f7ff ff61 	bl	8002e8c <__NVIC_GetPriorityGrouping>
 8002fca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	6978      	ldr	r0, [r7, #20]
 8002fd2:	f7ff ffb1 	bl	8002f38 <NVIC_EncodePriority>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff ff80 	bl	8002ee4 <__NVIC_SetPriority>
}
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff54 	bl	8002ea8 <__NVIC_EnableIRQ>
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e159      	b.n	80032d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003024:	2201      	movs	r2, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	f040 8148 	bne.w	80032d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d005      	beq.n	800305a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003056:	2b02      	cmp	r3, #2
 8003058:	d130      	bne.n	80030bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 0201 	and.w	r2, r3, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d017      	beq.n	80030f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d123      	bne.n	800314c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a2 	beq.w	80032d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <HAL_GPIO_Init+0x2e8>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_GPIO_Init+0x2e8>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <HAL_GPIO_Init+0x2e8>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031aa:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_GPIO_Init+0x2ec>)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a49      	ldr	r2, [pc, #292]	; (80032f8 <HAL_GPIO_Init+0x2f0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d019      	beq.n	800320a <HAL_GPIO_Init+0x202>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a48      	ldr	r2, [pc, #288]	; (80032fc <HAL_GPIO_Init+0x2f4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0x1fe>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a47      	ldr	r2, [pc, #284]	; (8003300 <HAL_GPIO_Init+0x2f8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_GPIO_Init+0x1fa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a46      	ldr	r2, [pc, #280]	; (8003304 <HAL_GPIO_Init+0x2fc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x1f6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a45      	ldr	r2, [pc, #276]	; (8003308 <HAL_GPIO_Init+0x300>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_GPIO_Init+0x1f2>
 80031f6:	2304      	movs	r3, #4
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x204>
 80031fa:	2307      	movs	r3, #7
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x204>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x204>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x204>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x204>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321c:	4935      	ldr	r1, [pc, #212]	; (80032f4 <HAL_GPIO_Init+0x2ec>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_GPIO_Init+0x304>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324e:	4a2f      	ldr	r2, [pc, #188]	; (800330c <HAL_GPIO_Init+0x304>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003254:	4b2d      	ldr	r3, [pc, #180]	; (800330c <HAL_GPIO_Init+0x304>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <HAL_GPIO_Init+0x304>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_GPIO_Init+0x304>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_GPIO_Init+0x304>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a8:	4b18      	ldr	r3, [pc, #96]	; (800330c <HAL_GPIO_Init+0x304>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032cc:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_GPIO_Init+0x304>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f aea2 	bls.w	8003024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40013c00 	.word	0x40013c00

08003310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e001      	b.n	8003332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e12b      	b.n	80035de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff faa0 	bl	80028e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d8:	f002 fe76 	bl	80060c8 <HAL_RCC_GetPCLK1Freq>
 80033dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a81      	ldr	r2, [pc, #516]	; (80035e8 <HAL_I2C_Init+0x274>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d807      	bhi.n	80033f8 <HAL_I2C_Init+0x84>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a80      	ldr	r2, [pc, #512]	; (80035ec <HAL_I2C_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e006      	b.n	8003406 <HAL_I2C_Init+0x92>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a7d      	ldr	r2, [pc, #500]	; (80035f0 <HAL_I2C_Init+0x27c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0e7      	b.n	80035de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a78      	ldr	r2, [pc, #480]	; (80035f4 <HAL_I2C_Init+0x280>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0c9b      	lsrs	r3, r3, #18
 8003418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a6a      	ldr	r2, [pc, #424]	; (80035e8 <HAL_I2C_Init+0x274>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d802      	bhi.n	8003448 <HAL_I2C_Init+0xd4>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	e009      	b.n	800345c <HAL_I2C_Init+0xe8>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a69      	ldr	r2, [pc, #420]	; (80035f8 <HAL_I2C_Init+0x284>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800346e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	495c      	ldr	r1, [pc, #368]	; (80035e8 <HAL_I2C_Init+0x274>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d819      	bhi.n	80034b0 <HAL_I2C_Init+0x13c>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e59      	subs	r1, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb1 f3f3 	udiv	r3, r1, r3
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003490:	400b      	ands	r3, r1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_I2C_Init+0x138>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e59      	subs	r1, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034aa:	e051      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e04f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_I2C_Init+0x168>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e012      	b.n	8003502 <HAL_I2C_Init+0x18e>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Init+0x196>
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <HAL_I2C_Init+0x1bc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e58      	subs	r0, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	fbb0 f3f3 	udiv	r3, r0, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352e:	e00f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	0099      	lsls	r1, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6809      	ldr	r1, [r1, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800357e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6911      	ldr	r1, [r2, #16]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	4311      	orrs	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	430b      	orrs	r3, r1
 8003592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	000186a0 	.word	0x000186a0
 80035ec:	001e847f 	.word	0x001e847f
 80035f0:	003d08ff 	.word	0x003d08ff
 80035f4:	431bde83 	.word	0x431bde83
 80035f8:	10624dd3 	.word	0x10624dd3

080035fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	460b      	mov	r3, r1
 8003610:	813b      	strh	r3, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003616:	f7ff fbe5 	bl	8002de4 <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b20      	cmp	r3, #32
 8003626:	f040 80d9 	bne.w	80037dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2319      	movs	r3, #25
 8003630:	2201      	movs	r2, #1
 8003632:	496d      	ldr	r1, [pc, #436]	; (80037e8 <HAL_I2C_Mem_Write+0x1ec>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fc7f 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
 8003642:	e0cc      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Mem_Write+0x56>
 800364e:	2302      	movs	r3, #2
 8003650:	e0c5      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d007      	beq.n	8003678 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2221      	movs	r2, #33	; 0x21
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a4d      	ldr	r2, [pc, #308]	; (80037ec <HAL_I2C_Mem_Write+0x1f0>)
 80036b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ba:	88f8      	ldrh	r0, [r7, #6]
 80036bc:	893a      	ldrh	r2, [r7, #8]
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fab6 	bl	8003c3c <I2C_RequestMemoryWrite>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d052      	beq.n	800377c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e081      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fd00 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d107      	bne.n	8003702 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06b      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b04      	cmp	r3, #4
 8003742:	d11b      	bne.n	800377c <HAL_I2C_Mem_Write+0x180>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d017      	beq.n	800377c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1aa      	bne.n	80036da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fcec 	bl	8004166 <I2C_WaitOnBTFFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00d      	beq.n	80037b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	2b04      	cmp	r3, #4
 800379a:	d107      	bne.n	80037ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e016      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	00100002 	.word	0x00100002
 80037ec:	ffff0000 	.word	0xffff0000

080037f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	817b      	strh	r3, [r7, #10]
 8003802:	460b      	mov	r3, r1
 8003804:	813b      	strh	r3, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800380a:	f7ff faeb 	bl	8002de4 <HAL_GetTick>
 800380e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	f040 8208 	bne.w	8003c2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2319      	movs	r3, #25
 8003824:	2201      	movs	r2, #1
 8003826:	497b      	ldr	r1, [pc, #492]	; (8003a14 <HAL_I2C_Mem_Read+0x224>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fb85 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
 8003836:	e1fb      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_I2C_Mem_Read+0x56>
 8003842:	2302      	movs	r3, #2
 8003844:	e1f4      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d007      	beq.n	800386c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2222      	movs	r2, #34	; 0x22
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	; 0x40
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_I2C_Mem_Read+0x228>)
 80038ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ae:	88f8      	ldrh	r0, [r7, #6]
 80038b0:	893a      	ldrh	r2, [r7, #8]
 80038b2:	8979      	ldrh	r1, [r7, #10]
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	4603      	mov	r3, r0
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fa52 	bl	8003d68 <I2C_RequestMemoryRead>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e1b0      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d113      	bne.n	80038fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	623b      	str	r3, [r7, #32]
 80038ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e184      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	2b01      	cmp	r3, #1
 8003904:	d11b      	bne.n	800393e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e164      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	2b02      	cmp	r3, #2
 8003944:	d11b      	bne.n	800397e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003954:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	e144      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003994:	e138      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	2b03      	cmp	r3, #3
 800399c:	f200 80f1 	bhi.w	8003b82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d123      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fc1b 	bl	80041e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e139      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ee:	e10b      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d14e      	bne.n	8003a96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	2200      	movs	r2, #0
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <HAL_I2C_Mem_Read+0x22c>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fa98 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e10e      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
 8003a12:	bf00      	nop
 8003a14:	00100002 	.word	0x00100002
 8003a18:	ffff0000 	.word	0xffff0000
 8003a1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a94:	e0b8      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4966      	ldr	r1, [pc, #408]	; (8003c38 <HAL_I2C_Mem_Read+0x448>)
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fa49 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0bf      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	2200      	movs	r2, #0
 8003afa:	494f      	ldr	r1, [pc, #316]	; (8003c38 <HAL_I2C_Mem_Read+0x448>)
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fa1b 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e091      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b80:	e042      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb2e 	bl	80041e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e04c      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d118      	bne.n	8003c08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f47f aec2 	bne.w	8003996 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010004 	.word	0x00010004

08003c3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	817b      	strh	r3, [r7, #10]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	813b      	strh	r3, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f960 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8c:	d103      	bne.n	8003c96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e05f      	b.n	8003d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ca8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	492d      	ldr	r1, [pc, #180]	; (8003d64 <I2C_RequestMemoryWrite+0x128>)
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f998 	bl	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e04c      	b.n	8003d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd8:	6a39      	ldr	r1, [r7, #32]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fa02 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d107      	bne.n	8003cfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e02b      	b.n	8003d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d08:	893b      	ldrh	r3, [r7, #8]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]
 8003d12:	e021      	b.n	8003d58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d14:	893b      	ldrh	r3, [r7, #8]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	6a39      	ldr	r1, [r7, #32]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f9dc 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d107      	bne.n	8003d4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e005      	b.n	8003d5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4e:	893b      	ldrh	r3, [r7, #8]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	00010002 	.word	0x00010002

08003d68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	813b      	strh	r3, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f8c2 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc8:	d103      	bne.n	8003dd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0aa      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003de4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	4952      	ldr	r1, [pc, #328]	; (8003f34 <I2C_RequestMemoryRead+0x1cc>)
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f8fa 	bl	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e097      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	6a39      	ldr	r1, [r7, #32]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f964 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e076      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e44:	893b      	ldrh	r3, [r7, #8]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	611a      	str	r2, [r3, #16]
 8003e4e:	e021      	b.n	8003e94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e50:	893b      	ldrh	r3, [r7, #8]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	6a39      	ldr	r1, [r7, #32]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f93e 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d107      	bne.n	8003e86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e050      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8a:	893b      	ldrh	r3, [r7, #8]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	6a39      	ldr	r1, [r7, #32]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f923 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d107      	bne.n	8003ebc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e035      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f82b 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef6:	d103      	bne.n	8003f00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e013      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f04:	897b      	ldrh	r3, [r7, #10]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	6a3a      	ldr	r2, [r7, #32]
 8003f18:	4906      	ldr	r1, [pc, #24]	; (8003f34 <I2C_RequestMemoryRead+0x1cc>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f863 	bl	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	00010002 	.word	0x00010002

08003f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f48:	e025      	b.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d021      	beq.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fe ff47 	bl	8002de4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d116      	bne.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e023      	b.n	8003fde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10d      	bne.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4013      	ands	r3, r2
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	e00c      	b.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf0c      	ite	eq
 8003fce:	2301      	moveq	r3, #1
 8003fd0:	2300      	movne	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d0b6      	beq.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff4:	e051      	b.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004004:	d123      	bne.n	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800401e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e046      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d021      	beq.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004056:	f7fe fec5 	bl	8002de4 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d302      	bcc.n	800406c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d116      	bne.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e020      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10c      	bne.n	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	43da      	mvns	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	e00b      	b.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	43da      	mvns	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4013      	ands	r3, r2
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d18d      	bne.n	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f0:	e02d      	b.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f8ce 	bl	8004294 <I2C_IsAcknowledgeFailed>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e02d      	b.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d021      	beq.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fe fe6b 	bl	8002de4 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d116      	bne.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e007      	b.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d1ca      	bne.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004172:	e02d      	b.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f88d 	bl	8004294 <I2C_IsAcknowledgeFailed>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e02d      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d021      	beq.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418c:	f7fe fe2a 	bl	8002de4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f043 0220 	orr.w	r2, r3, #32
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e007      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d1ca      	bne.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041f4:	e042      	b.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d119      	bne.n	8004238 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0210 	mvn.w	r2, #16
 800420c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e029      	b.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004238:	f7fe fdd4 	bl	8002de4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e007      	b.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d1b5      	bne.n	80041f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d11b      	bne.n	80042e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f043 0204 	orr.w	r2, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f4:	b08f      	sub	sp, #60	; 0x3c
 80042f6:	af0a      	add	r7, sp, #40	; 0x28
 80042f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e10f      	b.n	8004524 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f00a f8ec 	bl	800e4fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2203      	movs	r2, #3
 8004328:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f003 fcf7 	bl	8007d36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	687e      	ldr	r6, [r7, #4]
 8004350:	466d      	mov	r5, sp
 8004352:	f106 0410 	add.w	r4, r6, #16
 8004356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004362:	e885 0003 	stmia.w	r5, {r0, r1}
 8004366:	1d33      	adds	r3, r6, #4
 8004368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800436a:	6838      	ldr	r0, [r7, #0]
 800436c:	f003 fbce 	bl	8007b0c <USB_CoreInit>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e0d0      	b.n	8004524 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f003 fce5 	bl	8007d58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
 8004392:	e04a      	b.n	800442a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	333d      	adds	r3, #61	; 0x3d
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	333c      	adds	r3, #60	; 0x3c
 80043b8:	7bfa      	ldrb	r2, [r7, #15]
 80043ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	b298      	uxth	r0, r3
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	3344      	adds	r3, #68	; 0x44
 80043d0:	4602      	mov	r2, r0
 80043d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043d4:	7bfa      	ldrb	r2, [r7, #15]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3340      	adds	r3, #64	; 0x40
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043e8:	7bfa      	ldrb	r2, [r7, #15]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3348      	adds	r3, #72	; 0x48
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	334c      	adds	r3, #76	; 0x4c
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004410:	7bfa      	ldrb	r2, [r7, #15]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3354      	adds	r3, #84	; 0x54
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	3301      	adds	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d3af      	bcc.n	8004394 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e044      	b.n	80044c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800443a:	7bfa      	ldrb	r2, [r7, #15]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004462:	7bfa      	ldrb	r2, [r7, #15]
 8004464:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800447c:	7bfa      	ldrb	r2, [r7, #15]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004492:	7bfa      	ldrb	r2, [r7, #15]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044a8:	7bfa      	ldrb	r2, [r7, #15]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	3301      	adds	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3b5      	bcc.n	800443a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	687e      	ldr	r6, [r7, #4]
 80044d6:	466d      	mov	r5, sp
 80044d8:	f106 0410 	add.w	r4, r6, #16
 80044dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80044ec:	1d33      	adds	r3, r6, #4
 80044ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	f003 fc7d 	bl	8007df0 <USB_DevInit>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e00d      	b.n	8004524 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f004 fdcc 	bl	80090ba <USB_DevDisconnect>

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800452c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_PCD_Start+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e020      	b.n	800458a <HAL_PCD_Start+0x5e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	2b01      	cmp	r3, #1
 8004556:	d109      	bne.n	800456c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800455c:	2b01      	cmp	r3, #1
 800455e:	d005      	beq.n	800456c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f003 fbcf 	bl	8007d14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f004 fd7c 	bl	8009078 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004592:	b590      	push	{r4, r7, lr}
 8004594:	b08d      	sub	sp, #52	; 0x34
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f004 fe3a 	bl	8009222 <USB_GetMode>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f040 848a 	bne.w	8004eca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f004 fd9e 	bl	80090fc <USB_ReadInterrupts>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8480 	beq.w	8004ec8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f004 fd8b 	bl	80090fc <USB_ReadInterrupts>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d107      	bne.n	8004600 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f002 0202 	and.w	r2, r2, #2
 80045fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f004 fd79 	bl	80090fc <USB_ReadInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b10      	cmp	r3, #16
 8004612:	d161      	bne.n	80046d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0210 	bic.w	r2, r2, #16
 8004622:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	3304      	adds	r3, #4
 8004642:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	0c5b      	lsrs	r3, r3, #17
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	2b02      	cmp	r3, #2
 800464e:	d124      	bne.n	800469a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d035      	beq.n	80046c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	6a38      	ldr	r0, [r7, #32]
 8004670:	f004 fbb0 	bl	8008dd4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004680:	441a      	add	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004692:	441a      	add	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
 8004698:	e016      	b.n	80046c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	0c5b      	lsrs	r3, r3, #17
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d110      	bne.n	80046c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046ac:	2208      	movs	r2, #8
 80046ae:	4619      	mov	r1, r3
 80046b0:	6a38      	ldr	r0, [r7, #32]
 80046b2:	f004 fb8f 	bl	8008dd4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	6a1a      	ldr	r2, [r3, #32]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046c2:	441a      	add	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0210 	orr.w	r2, r2, #16
 80046d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f004 fd0d 	bl	80090fc <USB_ReadInterrupts>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046ec:	f040 80a7 	bne.w	800483e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f004 fd12 	bl	8009122 <USB_ReadDevAllOutEpInterrupt>
 80046fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004700:	e099      	b.n	8004836 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 808e 	beq.w	800482a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	4611      	mov	r1, r2
 8004718:	4618      	mov	r0, r3
 800471a:	f004 fd36 	bl	800918a <USB_ReadDevOutEPInterrupt>
 800471e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00c      	beq.n	8004744 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	461a      	mov	r2, r3
 8004738:	2301      	movs	r3, #1
 800473a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800473c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fec2 	bl	80054c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475a:	461a      	mov	r2, r3
 800475c:	2308      	movs	r3, #8
 800475e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 ff98 	bl	8005698 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	461a      	mov	r2, r3
 8004780:	2310      	movs	r3, #16
 8004782:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d030      	beq.n	80047f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d109      	bne.n	80047ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	3304      	adds	r3, #4
 80047c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	78db      	ldrb	r3, [r3, #3]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d108      	bne.n	80047de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f009 ff8b 	bl	800e6f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	461a      	mov	r2, r3
 80047ec:	2302      	movs	r3, #2
 80047ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	461a      	mov	r2, r3
 8004808:	2320      	movs	r3, #32
 800480a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004828:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	3301      	adds	r3, #1
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	f47f af62 	bne.w	8004702 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f004 fc5a 	bl	80090fc <USB_ReadInterrupts>
 8004848:	4603      	mov	r3, r0
 800484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004852:	f040 80db 	bne.w	8004a0c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f004 fc7b 	bl	8009156 <USB_ReadDevAllInEpInterrupt>
 8004860:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004866:	e0cd      	b.n	8004a04 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80c2 	beq.w	80049f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f004 fca1 	bl	80091c6 <USB_ReadDevInEPInterrupt>
 8004884:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d057      	beq.n	8004940 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	2201      	movs	r2, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69f9      	ldr	r1, [r7, #28]
 80048ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b0:	4013      	ands	r3, r2
 80048b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	461a      	mov	r2, r3
 80048c2:	2301      	movs	r3, #1
 80048c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d132      	bne.n	8004934 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	334c      	adds	r3, #76	; 0x4c
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4403      	add	r3, r0
 80048ee:	3348      	adds	r3, #72	; 0x48
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4419      	add	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4403      	add	r3, r0
 8004902:	334c      	adds	r3, #76	; 0x4c
 8004904:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d113      	bne.n	8004934 <HAL_PCD_IRQHandler+0x3a2>
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	3354      	adds	r3, #84	; 0x54
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d108      	bne.n	8004934 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800492c:	461a      	mov	r2, r3
 800492e:	2101      	movs	r1, #1
 8004930:	f004 fca8 	bl	8009284 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	b2db      	uxtb	r3, r3
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f009 fe5f 	bl	800e5fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	461a      	mov	r2, r3
 8004958:	2308      	movs	r3, #8
 800495a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	461a      	mov	r2, r3
 8004974:	2310      	movs	r3, #16
 8004976:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	461a      	mov	r2, r3
 8004990:	2340      	movs	r3, #64	; 0x40
 8004992:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d023      	beq.n	80049e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800499e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a0:	6a38      	ldr	r0, [r7, #32]
 80049a2:	f003 fb89 	bl	80080b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	3338      	adds	r3, #56	; 0x38
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4413      	add	r3, r2
 80049b6:	3304      	adds	r3, #4
 80049b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	78db      	ldrb	r3, [r3, #3]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d108      	bne.n	80049d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f009 fea2 	bl	800e718 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	461a      	mov	r2, r3
 80049e2:	2302      	movs	r3, #2
 80049e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80049f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fcdb 	bl	80053ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	3301      	adds	r3, #1
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f47f af2e 	bne.w	8004868 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f004 fb73 	bl	80090fc <USB_ReadInterrupts>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a20:	d122      	bne.n	8004a68 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d108      	bne.n	8004a52 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a48:	2100      	movs	r1, #0
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fec2 	bl	80057d4 <HAL_PCDEx_LPM_Callback>
 8004a50:	e002      	b.n	8004a58 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f009 fe40 	bl	800e6d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f004 fb45 	bl	80090fc <USB_ReadInterrupts>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7c:	d112      	bne.n	8004aa4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d102      	bne.n	8004a94 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f009 fdfc 	bl	800e68c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004aa2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f004 fb27 	bl	80090fc <USB_ReadInterrupts>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab8:	f040 80b7 	bne.w	8004c2a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2110      	movs	r1, #16
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f003 faee 	bl	80080b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004adc:	2300      	movs	r3, #0
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae0:	e046      	b.n	8004b70 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	461a      	mov	r2, r3
 8004af0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004af4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	461a      	mov	r2, r3
 8004b24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d3b3      	bcc.n	8004ae2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004b8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba6:	f043 030b 	orr.w	r3, r3, #11
 8004baa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bbc:	f043 030b 	orr.w	r3, r3, #11
 8004bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bc2:	e015      	b.n	8004bf0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bd6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004bda:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bea:	f043 030b 	orr.w	r3, r3, #11
 8004bee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c14:	461a      	mov	r2, r3
 8004c16:	f004 fb35 	bl	8009284 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f004 fa64 	bl	80090fc <USB_ReadInterrupts>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3e:	d124      	bne.n	8004c8a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f004 fafa 	bl	800923e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f003 faaf 	bl	80081b2 <USB_GetDevSpeed>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681c      	ldr	r4, [r3, #0]
 8004c60:	f001 fa26 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 8004c64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f002 ffae 	bl	8007bd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f009 fcea 	bl	800e64e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f004 fa34 	bl	80090fc <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f009 fcc7 	bl	800e632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f002 0208 	and.w	r2, r2, #8
 8004cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f004 fa1f 	bl	80090fc <USB_ReadInterrupts>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	2b80      	cmp	r3, #128	; 0x80
 8004cc6:	d122      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd8:	e014      	b.n	8004d04 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d105      	bne.n	8004cfe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fb27 	bl	800534c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	3301      	adds	r3, #1
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d3e5      	bcc.n	8004cda <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f004 f9f2 	bl	80090fc <USB_ReadInterrupts>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d22:	d13b      	bne.n	8004d9c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d24:	2301      	movs	r3, #1
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	e02b      	b.n	8004d82 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3340      	adds	r3, #64	; 0x40
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d115      	bne.n	8004d7c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da12      	bge.n	8004d7c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	333f      	adds	r3, #63	; 0x3f
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fae8 	bl	800534c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	3301      	adds	r3, #1
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d3ce      	bcc.n	8004d2a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f004 f9ab 	bl	80090fc <USB_ReadInterrupts>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004db0:	d155      	bne.n	8004e5e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004db2:	2301      	movs	r3, #1
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	e045      	b.n	8004e44 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d12e      	bne.n	8004e3e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004de0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da2b      	bge.n	8004e3e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004df2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d121      	bne.n	8004e3e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e3a:	6053      	str	r3, [r2, #4]
            break;
 8004e3c:	e007      	b.n	8004e4e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	3301      	adds	r3, #1
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d3b4      	bcc.n	8004db8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f004 f94a 	bl	80090fc <USB_ReadInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d10a      	bne.n	8004e8a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f009 fc61 	bl	800e73c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f004 f934 	bl	80090fc <USB_ReadInterrupts>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d115      	bne.n	8004eca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f009 fc51 	bl	800e758 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6859      	ldr	r1, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	e000      	b.n	8004eca <HAL_PCD_IRQHandler+0x938>
      return;
 8004ec8:	bf00      	nop
    }
  }
}
 8004eca:	3734      	adds	r7, #52	; 0x34
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_PCD_SetAddress+0x1a>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e013      	b.n	8004f12 <HAL_PCD_SetAddress+0x42>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f004 f892 	bl	800902c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	461a      	mov	r2, r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	70fb      	strb	r3, [r7, #3]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	803b      	strh	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	da0f      	bge.n	8004f60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	f003 020f 	and.w	r2, r3, #15
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	3338      	adds	r3, #56	; 0x38
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3304      	adds	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	705a      	strb	r2, [r3, #1]
 8004f5e:	e00f      	b.n	8004f80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	f003 020f 	and.w	r2, r3, #15
 8004f66:	4613      	mov	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4413      	add	r3, r2
 8004f76:	3304      	adds	r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f8c:	883a      	ldrh	r2, [r7, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	78ba      	ldrb	r2, [r7, #2]
 8004f96:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004faa:	78bb      	ldrb	r3, [r7, #2]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d102      	bne.n	8004fb6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_PCD_EP_Open+0xaa>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e00e      	b.n	8004fe2 <HAL_PCD_EP_Open+0xc8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68f9      	ldr	r1, [r7, #12]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f003 f912 	bl	80081fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004fe0:	7afb      	ldrb	r3, [r7, #11]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da0f      	bge.n	800501e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	3338      	adds	r3, #56	; 0x38
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	3304      	adds	r3, #4
 8005014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	705a      	strb	r2, [r3, #1]
 800501c:	e00f      	b.n	800503e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 020f 	and.w	r2, r3, #15
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	3304      	adds	r3, #4
 8005036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_PCD_EP_Close+0x6e>
 8005054:	2302      	movs	r3, #2
 8005056:	e00e      	b.n	8005076 <HAL_PCD_EP_Close+0x8c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68f9      	ldr	r1, [r7, #12]
 8005066:	4618      	mov	r0, r3
 8005068:	f003 f950 	bl	800830c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	460b      	mov	r3, r1
 800508c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800508e:	7afb      	ldrb	r3, [r7, #11]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	3304      	adds	r3, #4
 80050a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2200      	movs	r2, #0
 80050b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2200      	movs	r2, #0
 80050be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050c0:	7afb      	ldrb	r3, [r7, #11]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d102      	bne.n	80050da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	6979      	ldr	r1, [r7, #20]
 80050f2:	f003 fc2f 	bl	8008954 <USB_EP0StartXfer>
 80050f6:	e008      	b.n	800510a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	6979      	ldr	r1, [r7, #20]
 8005106:	f003 f9dd 	bl	80084c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	f003 020f 	and.w	r2, r3, #15
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005136:	681b      	ldr	r3, [r3, #0]
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	460b      	mov	r3, r1
 8005152:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005154:	7afb      	ldrb	r3, [r7, #11]
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	3338      	adds	r3, #56	; 0x38
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	3304      	adds	r3, #4
 800516a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2200      	movs	r2, #0
 800517c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2201      	movs	r2, #1
 8005182:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005184:	7afb      	ldrb	r3, [r7, #11]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	b2da      	uxtb	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d102      	bne.n	800519e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800519e:	7afb      	ldrb	r3, [r7, #11]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	6979      	ldr	r1, [r7, #20]
 80051b6:	f003 fbcd 	bl	8008954 <USB_EP0StartXfer>
 80051ba:	e008      	b.n	80051ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	f003 f97b 	bl	80084c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d901      	bls.n	80051f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e050      	b.n	8005298 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da0f      	bge.n	800521e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	f003 020f 	and.w	r2, r3, #15
 8005204:	4613      	mov	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	3338      	adds	r3, #56	; 0x38
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4413      	add	r3, r2
 8005212:	3304      	adds	r3, #4
 8005214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	705a      	strb	r2, [r3, #1]
 800521c:	e00d      	b.n	800523a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800521e:	78fa      	ldrb	r2, [r7, #3]
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4413      	add	r3, r2
 8005230:	3304      	adds	r3, #4
 8005232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	b2da      	uxtb	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_PCD_EP_SetStall+0x82>
 8005256:	2302      	movs	r3, #2
 8005258:	e01e      	b.n	8005298 <HAL_PCD_EP_SetStall+0xc0>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	4618      	mov	r0, r3
 800526a:	f003 fe0b 	bl	8008e84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	b2d9      	uxtb	r1, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005288:	461a      	mov	r2, r3
 800528a:	f003 fffb 	bl	8009284 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	f003 020f 	and.w	r2, r3, #15
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d901      	bls.n	80052be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e042      	b.n	8005344 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	da0f      	bge.n	80052e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	3338      	adds	r3, #56	; 0x38
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	3304      	adds	r3, #4
 80052dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	705a      	strb	r2, [r3, #1]
 80052e4:	e00f      	b.n	8005306 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 020f 	and.w	r2, r3, #15
 80052ec:	4613      	mov	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	3304      	adds	r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	b2da      	uxtb	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_PCD_EP_ClrStall+0x86>
 8005322:	2302      	movs	r3, #2
 8005324:	e00e      	b.n	8005344 <HAL_PCD_EP_ClrStall+0xa4>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	4618      	mov	r0, r3
 8005336:	f003 fe13 	bl	8008f60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800535c:	2b00      	cmp	r3, #0
 800535e:	da0c      	bge.n	800537a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	f003 020f 	and.w	r2, r3, #15
 8005366:	4613      	mov	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	3338      	adds	r3, #56	; 0x38
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	4413      	add	r3, r2
 8005374:	3304      	adds	r3, #4
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e00c      	b.n	8005394 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	f003 020f 	and.w	r2, r3, #15
 8005380:	4613      	mov	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	4413      	add	r3, r2
 8005390:	3304      	adds	r3, #4
 8005392:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	4618      	mov	r0, r3
 800539c:	f003 fc32 	bl	8008c04 <USB_EPStopXfer>
 80053a0:	4603      	mov	r3, r0
 80053a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80053a4:	7afb      	ldrb	r3, [r7, #11]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b08a      	sub	sp, #40	; 0x28
 80053b2:	af02      	add	r7, sp, #8
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	3338      	adds	r3, #56	; 0x38
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	4413      	add	r3, r2
 80053d2:	3304      	adds	r3, #4
 80053d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1a      	ldr	r2, [r3, #32]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d901      	bls.n	80053e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e06c      	b.n	80054c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d902      	bls.n	8005402 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3303      	adds	r3, #3
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800540a:	e02b      	b.n	8005464 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	699a      	ldr	r2, [r3, #24]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	429a      	cmp	r2, r3
 8005420:	d902      	bls.n	8005428 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3303      	adds	r3, #3
 800542c:	089b      	lsrs	r3, r3, #2
 800542e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6919      	ldr	r1, [r3, #16]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005440:	b2db      	uxtb	r3, r3
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	4603      	mov	r3, r0
 8005446:	6978      	ldr	r0, [r7, #20]
 8005448:	f003 fc86 	bl	8008d58 <USB_WritePacket>

    ep->xfer_buff  += len;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	441a      	add	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	441a      	add	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	b29b      	uxth	r3, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	429a      	cmp	r2, r3
 8005478:	d809      	bhi.n	800548e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005482:	429a      	cmp	r2, r3
 8005484:	d203      	bcs.n	800548e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1be      	bne.n	800540c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	429a      	cmp	r2, r3
 8005498:	d811      	bhi.n	80054be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	2201      	movs	r2, #1
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	43db      	mvns	r3, r3
 80054b4:	6939      	ldr	r1, [r7, #16]
 80054b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ba:	4013      	ands	r3, r2
 80054bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	333c      	adds	r3, #60	; 0x3c
 80054e0:	3304      	adds	r3, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d17b      	bne.n	80055f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4a61      	ldr	r2, [pc, #388]	; (8005690 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	f240 80b9 	bls.w	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80b3 	beq.w	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	461a      	mov	r2, r3
 800552c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005530:	6093      	str	r3, [r2, #8]
 8005532:	e0a7      	b.n	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	461a      	mov	r2, r3
 800554c:	2320      	movs	r3, #32
 800554e:	6093      	str	r3, [r2, #8]
 8005550:	e098      	b.n	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 8093 	bne.w	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4a4b      	ldr	r2, [pc, #300]	; (8005690 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d90f      	bls.n	8005586 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	461a      	mov	r2, r3
 800557e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005582:	6093      	str	r3, [r2, #8]
 8005584:	e07e      	b.n	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	4413      	add	r3, r2
 8005598:	3304      	adds	r3, #4
 800559a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	0159      	lsls	r1, r3, #5
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	440b      	add	r3, r1
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d114      	bne.n	80055e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055d0:	461a      	mov	r2, r3
 80055d2:	2101      	movs	r1, #1
 80055d4:	f003 fe56 	bl	8009284 <USB_EP0_OutStart>
 80055d8:	e006      	b.n	80055e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	441a      	add	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f008 ffea 	bl	800e5c8 <HAL_PCD_DataOutStageCallback>
 80055f4:	e046      	b.n	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	4a26      	ldr	r2, [pc, #152]	; (8005694 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d124      	bne.n	8005648 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	461a      	mov	r2, r3
 8005616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561a:	6093      	str	r3, [r2, #8]
 800561c:	e032      	b.n	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	461a      	mov	r2, r3
 8005636:	2320      	movs	r3, #32
 8005638:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f008 ffc1 	bl	800e5c8 <HAL_PCD_DataOutStageCallback>
 8005646:	e01d      	b.n	8005684 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d114      	bne.n	8005678 <PCD_EP_OutXfrComplete_int+0x1b0>
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005670:	461a      	mov	r2, r3
 8005672:	2100      	movs	r1, #0
 8005674:	f003 fe06 	bl	8009284 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f008 ffa2 	bl	800e5c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	4f54300a 	.word	0x4f54300a
 8005694:	4f54310a 	.word	0x4f54310a

08005698 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	333c      	adds	r3, #60	; 0x3c
 80056b0:	3304      	adds	r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <PCD_EP_OutSetupPacket_int+0x88>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d90e      	bls.n	80056ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d009      	beq.n	80056ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	461a      	mov	r2, r3
 80056e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f008 ff59 	bl	800e5a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <PCD_EP_OutSetupPacket_int+0x88>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d90c      	bls.n	8005714 <PCD_EP_OutSetupPacket_int+0x7c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d108      	bne.n	8005714 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800570c:	461a      	mov	r2, r3
 800570e:	2101      	movs	r1, #1
 8005710:	f003 fdb8 	bl	8009284 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	4f54300a 	.word	0x4f54300a

08005724 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
 8005730:	4613      	mov	r3, r2
 8005732:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d107      	bne.n	8005752 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005742:	883b      	ldrh	r3, [r7, #0]
 8005744:	0419      	lsls	r1, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	430a      	orrs	r2, r1
 800574e:	629a      	str	r2, [r3, #40]	; 0x28
 8005750:	e028      	b.n	80057a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005760:	2300      	movs	r3, #0
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e00d      	b.n	8005782 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	3340      	adds	r3, #64	; 0x40
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	0c1b      	lsrs	r3, r3, #16
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	4413      	add	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	3301      	adds	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
 8005782:	7bfa      	ldrb	r2, [r7, #15]
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	3b01      	subs	r3, #1
 8005788:	429a      	cmp	r2, r3
 800578a:	d3ec      	bcc.n	8005766 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800578c:	883b      	ldrh	r3, [r7, #0]
 800578e:	0418      	lsls	r0, r3, #16
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	3b01      	subs	r3, #1
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	4302      	orrs	r2, r0
 800579c:	3340      	adds	r3, #64	; 0x40
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	887a      	ldrh	r2, [r7, #2]
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e267      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d075      	beq.n	80058f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800580a:	4b88      	ldr	r3, [pc, #544]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00c      	beq.n	8005830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005816:	4b85      	ldr	r3, [pc, #532]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800581e:	2b08      	cmp	r3, #8
 8005820:	d112      	bne.n	8005848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005822:	4b82      	ldr	r3, [pc, #520]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800582e:	d10b      	bne.n	8005848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005830:	4b7e      	ldr	r3, [pc, #504]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d05b      	beq.n	80058f4 <HAL_RCC_OscConfig+0x108>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d157      	bne.n	80058f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e242      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d106      	bne.n	8005860 <HAL_RCC_OscConfig+0x74>
 8005852:	4b76      	ldr	r3, [pc, #472]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a75      	ldr	r2, [pc, #468]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e01d      	b.n	800589c <HAL_RCC_OscConfig+0xb0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x98>
 800586a:	4b70      	ldr	r3, [pc, #448]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6f      	ldr	r2, [pc, #444]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4b6d      	ldr	r3, [pc, #436]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6c      	ldr	r2, [pc, #432]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800587c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e00b      	b.n	800589c <HAL_RCC_OscConfig+0xb0>
 8005884:	4b69      	ldr	r3, [pc, #420]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a68      	ldr	r2, [pc, #416]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800588a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	4b66      	ldr	r3, [pc, #408]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a65      	ldr	r2, [pc, #404]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d013      	beq.n	80058cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a4:	f7fd fa9e 	bl	8002de4 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fd fa9a 	bl	8002de4 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e207      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	4b5b      	ldr	r3, [pc, #364]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0xc0>
 80058ca:	e014      	b.n	80058f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fd fa8a 	bl	8002de4 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d4:	f7fd fa86 	bl	8002de4 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	; 0x64
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e1f3      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	4b51      	ldr	r3, [pc, #324]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0xe8>
 80058f2:	e000      	b.n	80058f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d063      	beq.n	80059ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005902:	4b4a      	ldr	r3, [pc, #296]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590e:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005916:	2b08      	cmp	r3, #8
 8005918:	d11c      	bne.n	8005954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800591a:	4b44      	ldr	r3, [pc, #272]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d116      	bne.n	8005954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_RCC_OscConfig+0x152>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d001      	beq.n	800593e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e1c7      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4937      	ldr	r1, [pc, #220]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800594e:	4313      	orrs	r3, r2
 8005950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005952:	e03a      	b.n	80059ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800595c:	4b34      	ldr	r3, [pc, #208]	; (8005a30 <HAL_RCC_OscConfig+0x244>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fd fa3f 	bl	8002de4 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800596a:	f7fd fa3b 	bl	8002de4 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e1a8      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005988:	4b28      	ldr	r3, [pc, #160]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4925      	ldr	r1, [pc, #148]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]
 800599c:	e015      	b.n	80059ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800599e:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <HAL_RCC_OscConfig+0x244>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fd fa1e 	bl	8002de4 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ac:	f7fd fa1a 	bl	8002de4 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e187      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059be:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d036      	beq.n	8005a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d016      	beq.n	8005a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059de:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <HAL_RCC_OscConfig+0x248>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fd f9fe 	bl	8002de4 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ec:	f7fd f9fa 	bl	8002de4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e167      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x200>
 8005a0a:	e01b      	b.n	8005a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_OscConfig+0x248>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a12:	f7fd f9e7 	bl	8002de4 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a18:	e00e      	b.n	8005a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a1a:	f7fd f9e3 	bl	8002de4 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d907      	bls.n	8005a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e150      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	42470000 	.word	0x42470000
 8005a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a38:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1ea      	bne.n	8005a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8097 	beq.w	8005b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a56:	4b81      	ldr	r3, [pc, #516]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10f      	bne.n	8005a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	4b7d      	ldr	r3, [pc, #500]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	4a7c      	ldr	r2, [pc, #496]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a70:	6413      	str	r3, [r2, #64]	; 0x40
 8005a72:	4b7a      	ldr	r3, [pc, #488]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a82:	4b77      	ldr	r3, [pc, #476]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d118      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a8e:	4b74      	ldr	r3, [pc, #464]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a73      	ldr	r2, [pc, #460]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a9a:	f7fd f9a3 	bl	8002de4 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa2:	f7fd f99f 	bl	8002de4 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e10c      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	4b6a      	ldr	r3, [pc, #424]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x2ea>
 8005ac8:	4b64      	ldr	r3, [pc, #400]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	4a63      	ldr	r2, [pc, #396]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad4:	e01c      	b.n	8005b10 <HAL_RCC_OscConfig+0x324>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x30c>
 8005ade:	4b5f      	ldr	r3, [pc, #380]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	4a5e      	ldr	r2, [pc, #376]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ae4:	f043 0304 	orr.w	r3, r3, #4
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aea:	4b5c      	ldr	r3, [pc, #368]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aee:	4a5b      	ldr	r2, [pc, #364]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	6713      	str	r3, [r2, #112]	; 0x70
 8005af6:	e00b      	b.n	8005b10 <HAL_RCC_OscConfig+0x324>
 8005af8:	4b58      	ldr	r3, [pc, #352]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	4a57      	ldr	r2, [pc, #348]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	6713      	str	r3, [r2, #112]	; 0x70
 8005b04:	4b55      	ldr	r3, [pc, #340]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	4a54      	ldr	r2, [pc, #336]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b0a:	f023 0304 	bic.w	r3, r3, #4
 8005b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d015      	beq.n	8005b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b18:	f7fd f964 	bl	8002de4 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b20:	f7fd f960 	bl	8002de4 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e0cb      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b36:	4b49      	ldr	r3, [pc, #292]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0ee      	beq.n	8005b20 <HAL_RCC_OscConfig+0x334>
 8005b42:	e014      	b.n	8005b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b44:	f7fd f94e 	bl	8002de4 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b4c:	f7fd f94a 	bl	8002de4 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e0b5      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b62:	4b3e      	ldr	r3, [pc, #248]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ee      	bne.n	8005b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b74:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	4a38      	ldr	r2, [pc, #224]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a1 	beq.w	8005ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b8a:	4b34      	ldr	r3, [pc, #208]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d05c      	beq.n	8005c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d141      	bne.n	8005c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba4:	f7fd f91e 	bl	8002de4 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fd f91a 	bl	8002de4 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e087      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bbe:	4b27      	ldr	r3, [pc, #156]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	019b      	lsls	r3, r3, #6
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	3b01      	subs	r3, #1
 8005be4:	041b      	lsls	r3, r3, #16
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	061b      	lsls	r3, r3, #24
 8005bee:	491b      	ldr	r1, [pc, #108]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfa:	f7fd f8f3 	bl	8002de4 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c02:	f7fd f8ef 	bl	8002de4 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e05c      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x416>
 8005c20:	e054      	b.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c22:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fd f8dc 	bl	8002de4 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c30:	f7fd f8d8 	bl	8002de4 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e045      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c42:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x444>
 8005c4e:	e03d      	b.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e038      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40007000 	.word	0x40007000
 8005c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c68:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_RCC_OscConfig+0x4ec>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d028      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d121      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d11a      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c98:	4013      	ands	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d111      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800

08005cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0cc      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d90c      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0b8      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d020      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a58      	ldr	r2, [pc, #352]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d48:	4b53      	ldr	r3, [pc, #332]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4a52      	ldr	r2, [pc, #328]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d54:	4b50      	ldr	r3, [pc, #320]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	494d      	ldr	r1, [pc, #308]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d044      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d119      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e07f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d003      	beq.n	8005d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9a:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e06f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b3b      	ldr	r3, [pc, #236]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e067      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dba:	4b37      	ldr	r3, [pc, #220]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4934      	ldr	r1, [pc, #208]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dcc:	f7fd f80a 	bl	8002de4 <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd4:	f7fd f806 	bl	8002de4 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e04f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b2b      	ldr	r3, [pc, #172]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 020c 	and.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1eb      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d20c      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e032      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e30:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4916      	ldr	r1, [pc, #88]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	490e      	ldr	r1, [pc, #56]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e62:	f000 f821 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8005e66:	4602      	mov	r2, r0
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	490a      	ldr	r1, [pc, #40]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005e74:	5ccb      	ldrb	r3, [r1, r3]
 8005e76:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fc fe60 	bl	8002b48 <HAL_InitTick>

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40023c00 	.word	0x40023c00
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	0800fa84 	.word	0x0800fa84
 8005ea0:	20000504 	.word	0x20000504
 8005ea4:	20000508 	.word	0x20000508

08005ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eac:	b094      	sub	sp, #80	; 0x50
 8005eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb8:	2300      	movs	r3, #0
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec0:	4b79      	ldr	r3, [pc, #484]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 030c 	and.w	r3, r3, #12
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d00d      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	f200 80e1 	bhi.w	8006094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x34>
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eda:	e0db      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005edc:	4b73      	ldr	r3, [pc, #460]	; (80060ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005ede:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ee0:	e0db      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ee2:	4b72      	ldr	r3, [pc, #456]	; (80060ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ee6:	e0d8      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee8:	4b6f      	ldr	r3, [pc, #444]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ef2:	4b6d      	ldr	r3, [pc, #436]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b6a      	ldr	r3, [pc, #424]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	2200      	movs	r2, #0
 8005f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f10:	633b      	str	r3, [r7, #48]	; 0x30
 8005f12:	2300      	movs	r3, #0
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	f04f 0000 	mov.w	r0, #0
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	0159      	lsls	r1, r3, #5
 8005f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f2c:	0150      	lsls	r0, r2, #5
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4621      	mov	r1, r4
 8005f34:	1a51      	subs	r1, r2, r1
 8005f36:	6139      	str	r1, [r7, #16]
 8005f38:	4629      	mov	r1, r5
 8005f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	018b      	lsls	r3, r1, #6
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f56:	4651      	mov	r1, sl
 8005f58:	018a      	lsls	r2, r1, #6
 8005f5a:	4651      	mov	r1, sl
 8005f5c:	ebb2 0801 	subs.w	r8, r2, r1
 8005f60:	4659      	mov	r1, fp
 8005f62:	eb63 0901 	sbc.w	r9, r3, r1
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f7a:	4690      	mov	r8, r2
 8005f7c:	4699      	mov	r9, r3
 8005f7e:	4623      	mov	r3, r4
 8005f80:	eb18 0303 	adds.w	r3, r8, r3
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	462b      	mov	r3, r5
 8005f88:	eb49 0303 	adc.w	r3, r9, r3
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	028b      	lsls	r3, r1, #10
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	028a      	lsls	r2, r1, #10
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fae:	2200      	movs	r2, #0
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fb8:	f7fa f96a 	bl	8000290 <__aeabi_uldivmod>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc4:	e058      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc6:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	099b      	lsrs	r3, r3, #6
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fd6:	623b      	str	r3, [r7, #32]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
 8005fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	f04f 0100 	mov.w	r1, #0
 8005fec:	0159      	lsls	r1, r3, #5
 8005fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ff2:	0150      	lsls	r0, r2, #5
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ffe:	4649      	mov	r1, r9
 8006000:	eb63 0b01 	sbc.w	fp, r3, r1
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006018:	ebb2 040a 	subs.w	r4, r2, sl
 800601c:	eb63 050b 	sbc.w	r5, r3, fp
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	00eb      	lsls	r3, r5, #3
 800602a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800602e:	00e2      	lsls	r2, r4, #3
 8006030:	4614      	mov	r4, r2
 8006032:	461d      	mov	r5, r3
 8006034:	4643      	mov	r3, r8
 8006036:	18e3      	adds	r3, r4, r3
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	464b      	mov	r3, r9
 800603c:	eb45 0303 	adc.w	r3, r5, r3
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800604e:	4629      	mov	r1, r5
 8006050:	028b      	lsls	r3, r1, #10
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006058:	4621      	mov	r1, r4
 800605a:	028a      	lsls	r2, r1, #10
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006062:	2200      	movs	r2, #0
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	61fa      	str	r2, [r7, #28]
 8006068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800606c:	f7fa f910 	bl	8000290 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	3301      	adds	r3, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800608a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006092:	e002      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006096:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800609c:	4618      	mov	r0, r3
 800609e:	3750      	adds	r7, #80	; 0x50
 80060a0:	46bd      	mov	sp, r7
 80060a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800
 80060ac:	00f42400 	.word	0x00f42400

080060b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000504 	.word	0x20000504

080060c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060cc:	f7ff fff0 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	0a9b      	lsrs	r3, r3, #10
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80060de:	5ccb      	ldrb	r3, [r1, r3]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	0800fa94 	.word	0x0800fa94

080060f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	220f      	movs	r2, #15
 80060fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_RCC_GetClockConfig+0x5c>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 0203 	and.w	r2, r3, #3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800610c:	4b0f      	ldr	r3, [pc, #60]	; (800614c <HAL_RCC_GetClockConfig+0x5c>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <HAL_RCC_GetClockConfig+0x5c>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006124:	4b09      	ldr	r3, [pc, #36]	; (800614c <HAL_RCC_GetClockConfig+0x5c>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	08db      	lsrs	r3, r3, #3
 800612a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006132:	4b07      	ldr	r3, [pc, #28]	; (8006150 <HAL_RCC_GetClockConfig+0x60>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0207 	and.w	r2, r3, #7
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	601a      	str	r2, [r3, #0]
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40023800 	.word	0x40023800
 8006150:	40023c00 	.word	0x40023c00

08006154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07b      	b.n	800625e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d108      	bne.n	8006180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006176:	d009      	beq.n	800618c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	61da      	str	r2, [r3, #28]
 800617e:	e005      	b.n	800618c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fc fbe2 	bl	8002970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	ea42 0103 	orr.w	r1, r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	f003 0104 	and.w	r1, r3, #4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f003 0210 	and.w	r2, r3, #16
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b088      	sub	sp, #32
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_SPI_Transmit+0x22>
 8006284:	2302      	movs	r3, #2
 8006286:	e126      	b.n	80064d6 <HAL_SPI_Transmit+0x270>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006290:	f7fc fda8 	bl	8002de4 <HAL_GetTick>
 8006294:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d002      	beq.n	80062ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
 80062a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062aa:	e10b      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_SPI_Transmit+0x52>
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062bc:	e102      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2203      	movs	r2, #3
 80062c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	88fa      	ldrh	r2, [r7, #6]
 80062d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	88fa      	ldrh	r2, [r7, #6]
 80062dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006304:	d10f      	bne.n	8006326 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006324:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d007      	beq.n	8006344 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634c:	d14b      	bne.n	80063e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_SPI_Transmit+0xf6>
 8006356:	8afb      	ldrh	r3, [r7, #22]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d13e      	bne.n	80063da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	881a      	ldrh	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	1c9a      	adds	r2, r3, #2
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006380:	e02b      	b.n	80063da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d112      	bne.n	80063b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	1c9a      	adds	r2, r3, #2
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80063b4:	e011      	b.n	80063da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b6:	f7fc fd15 	bl	8002de4 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d803      	bhi.n	80063ce <HAL_SPI_Transmit+0x168>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d102      	bne.n	80063d4 <HAL_SPI_Transmit+0x16e>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063d8:	e074      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1ce      	bne.n	8006382 <HAL_SPI_Transmit+0x11c>
 80063e4:	e04c      	b.n	8006480 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_SPI_Transmit+0x18e>
 80063ee:	8afb      	ldrh	r3, [r7, #22]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d140      	bne.n	8006476 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800641a:	e02c      	b.n	8006476 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d113      	bne.n	8006452 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006450:	e011      	b.n	8006476 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006452:	f7fc fcc7 	bl	8002de4 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d803      	bhi.n	800646a <HAL_SPI_Transmit+0x204>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d102      	bne.n	8006470 <HAL_SPI_Transmit+0x20a>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006474:	e026      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1cd      	bne.n	800641c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa55 	bl	8006934 <SPI_EndRxTxTransaction>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e000      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80064c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b08c      	sub	sp, #48	; 0x30
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ec:	2301      	movs	r3, #1
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x26>
 8006500:	2302      	movs	r3, #2
 8006502:	e18a      	b.n	800681a <HAL_SPI_TransmitReceive+0x33c>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800650c:	f7fc fc6a 	bl	8002de4 <HAL_GetTick>
 8006510:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006522:	887b      	ldrh	r3, [r7, #2]
 8006524:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800652a:	2b01      	cmp	r3, #1
 800652c:	d00f      	beq.n	800654e <HAL_SPI_TransmitReceive+0x70>
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006534:	d107      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x68>
 800653e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006542:	2b04      	cmp	r3, #4
 8006544:	d003      	beq.n	800654e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006546:	2302      	movs	r3, #2
 8006548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800654c:	e15b      	b.n	8006806 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x82>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x82>
 800655a:	887b      	ldrh	r3, [r7, #2]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006566:	e14e      	b.n	8006806 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b04      	cmp	r3, #4
 8006572:	d003      	beq.n	800657c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2205      	movs	r2, #5
 8006578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	887a      	ldrh	r2, [r7, #2]
 800658c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	887a      	ldrh	r2, [r7, #2]
 8006592:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	887a      	ldrh	r2, [r7, #2]
 800659e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	887a      	ldrh	r2, [r7, #2]
 80065a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d007      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d8:	d178      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_SPI_TransmitReceive+0x10a>
 80065e2:	8b7b      	ldrh	r3, [r7, #26]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d166      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	881a      	ldrh	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	1c9a      	adds	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800660c:	e053      	b.n	80066b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b02      	cmp	r3, #2
 800661a:	d11b      	bne.n	8006654 <HAL_SPI_TransmitReceive+0x176>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <HAL_SPI_TransmitReceive+0x176>
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d113      	bne.n	8006654 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	881a      	ldrh	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	1c9a      	adds	r2, r3, #2
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006646:	b29b      	uxth	r3, r3
 8006648:	3b01      	subs	r3, #1
 800664a:	b29a      	uxth	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b01      	cmp	r3, #1
 8006660:	d119      	bne.n	8006696 <HAL_SPI_TransmitReceive+0x1b8>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d014      	beq.n	8006696 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	b292      	uxth	r2, r2
 8006678:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006692:	2301      	movs	r3, #1
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006696:	f7fc fba5 	bl	8002de4 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d807      	bhi.n	80066b6 <HAL_SPI_TransmitReceive+0x1d8>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d003      	beq.n	80066b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066b4:	e0a7      	b.n	8006806 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1a6      	bne.n	800660e <HAL_SPI_TransmitReceive+0x130>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1a1      	bne.n	800660e <HAL_SPI_TransmitReceive+0x130>
 80066ca:	e07c      	b.n	80067c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_SPI_TransmitReceive+0x1fc>
 80066d4:	8b7b      	ldrh	r3, [r7, #26]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d16b      	bne.n	80067b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330c      	adds	r3, #12
 80066e4:	7812      	ldrb	r2, [r2, #0]
 80066e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006700:	e057      	b.n	80067b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b02      	cmp	r3, #2
 800670e:	d11c      	bne.n	800674a <HAL_SPI_TransmitReceive+0x26c>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d017      	beq.n	800674a <HAL_SPI_TransmitReceive+0x26c>
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d114      	bne.n	800674a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	7812      	ldrb	r2, [r2, #0]
 800672c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b01      	cmp	r3, #1
 8006756:	d119      	bne.n	800678c <HAL_SPI_TransmitReceive+0x2ae>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d014      	beq.n	800678c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006788:	2301      	movs	r3, #1
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800678c:	f7fc fb2a 	bl	8002de4 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006798:	429a      	cmp	r2, r3
 800679a:	d803      	bhi.n	80067a4 <HAL_SPI_TransmitReceive+0x2c6>
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d102      	bne.n	80067aa <HAL_SPI_TransmitReceive+0x2cc>
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067b0:	e029      	b.n	8006806 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1a2      	bne.n	8006702 <HAL_SPI_TransmitReceive+0x224>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d19d      	bne.n	8006702 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f8b2 	bl	8006934 <SPI_EndRxTxTransaction>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d006      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067e2:	e010      	b.n	8006806 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10b      	bne.n	8006804 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	e000      	b.n	8006806 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006804:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800681a:	4618      	mov	r0, r3
 800681c:	3730      	adds	r7, #48	; 0x30
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006834:	f7fc fad6 	bl	8002de4 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	4413      	add	r3, r2
 8006842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006844:	f7fc face 	bl	8002de4 <HAL_GetTick>
 8006848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800684a:	4b39      	ldr	r3, [pc, #228]	; (8006930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	015b      	lsls	r3, r3, #5
 8006850:	0d1b      	lsrs	r3, r3, #20
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	fb02 f303 	mul.w	r3, r2, r3
 8006858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800685a:	e054      	b.n	8006906 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d050      	beq.n	8006906 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006864:	f7fc fabe 	bl	8002de4 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	69fa      	ldr	r2, [r7, #28]
 8006870:	429a      	cmp	r2, r3
 8006872:	d902      	bls.n	800687a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d13d      	bne.n	80068f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006892:	d111      	bne.n	80068b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689c:	d004      	beq.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a6:	d107      	bne.n	80068b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c0:	d10f      	bne.n	80068e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e017      	b.n	8006926 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	3b01      	subs	r3, #1
 8006904:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4013      	ands	r3, r2
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	429a      	cmp	r2, r3
 8006914:	bf0c      	ite	eq
 8006916:	2301      	moveq	r3, #1
 8006918:	2300      	movne	r3, #0
 800691a:	b2db      	uxtb	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	429a      	cmp	r2, r3
 8006922:	d19b      	bne.n	800685c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000504 	.word	0x20000504

08006934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006940:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <SPI_EndRxTxTransaction+0x7c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <SPI_EndRxTxTransaction+0x80>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	0d5b      	lsrs	r3, r3, #21
 800694c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695e:	d112      	bne.n	8006986 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	2180      	movs	r1, #128	; 0x80
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7ff ff5a 	bl	8006824 <SPI_WaitFlagStateUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e00f      	b.n	80069a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	3b01      	subs	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699c:	2b80      	cmp	r3, #128	; 0x80
 800699e:	d0f2      	beq.n	8006986 <SPI_EndRxTxTransaction+0x52>
 80069a0:	e000      	b.n	80069a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80069a2:	bf00      	nop
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000504 	.word	0x20000504
 80069b4:	165e9f81 	.word	0x165e9f81

080069b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e041      	b.n	8006a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fc f844 	bl	8002a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	4610      	mov	r0, r2
 80069f8:	f000 fd3a 	bl	8007470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d001      	beq.n	8006a70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e03c      	b.n	8006aea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <HAL_TIM_Base_Start+0xa0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <HAL_TIM_Base_Start+0x5c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8a:	d013      	beq.n	8006ab4 <HAL_TIM_Base_Start+0x5c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1a      	ldr	r2, [pc, #104]	; (8006afc <HAL_TIM_Base_Start+0xa4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <HAL_TIM_Base_Start+0x5c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a19      	ldr	r2, [pc, #100]	; (8006b00 <HAL_TIM_Base_Start+0xa8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_TIM_Base_Start+0x5c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <HAL_TIM_Base_Start+0xac>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_TIM_Base_Start+0x5c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <HAL_TIM_Base_Start+0xb0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d111      	bne.n	8006ad8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b06      	cmp	r3, #6
 8006ac4:	d010      	beq.n	8006ae8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0201 	orr.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad6:	e007      	b.n	8006ae8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40014000 	.word	0x40014000

08006b0c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6a1a      	ldr	r2, [r3, #32]
 8006b1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10f      	bne.n	8006b44 <HAL_TIM_Base_Stop+0x38>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6a1a      	ldr	r2, [r3, #32]
 8006b2a:	f240 4344 	movw	r3, #1092	; 0x444
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d107      	bne.n	8006b44 <HAL_TIM_Base_Stop+0x38>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d001      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e044      	b.n	8006bfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <HAL_TIM_Base_Start_IT+0xb0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d018      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9e:	d013      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1a      	ldr	r2, [pc, #104]	; (8006c10 <HAL_TIM_Base_Start_IT+0xb4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00e      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <HAL_TIM_Base_Start_IT+0xb8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d009      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <HAL_TIM_Base_Start_IT+0xbc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a16      	ldr	r2, [pc, #88]	; (8006c1c <HAL_TIM_Base_Start_IT+0xc0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d111      	bne.n	8006bec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b06      	cmp	r3, #6
 8006bd8:	d010      	beq.n	8006bfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 0201 	orr.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bea:	e007      	b.n	8006bfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40014000 	.word	0x40014000

08006c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e041      	b.n	8006cb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f839 	bl	8006cbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f000 fc06 	bl	8007470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HAL_TIM_PWM_Start+0x24>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	e022      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d109      	bne.n	8006d12 <HAL_TIM_PWM_Start+0x3e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	bf14      	ite	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	2300      	moveq	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e015      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d109      	bne.n	8006d2c <HAL_TIM_PWM_Start+0x58>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	bf14      	ite	ne
 8006d24:	2301      	movne	r3, #1
 8006d26:	2300      	moveq	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	e008      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e068      	b.n	8006e18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <HAL_TIM_PWM_Start+0x82>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d54:	e013      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d104      	bne.n	8006d66 <HAL_TIM_PWM_Start+0x92>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d64:	e00b      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_PWM_Start+0xa2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d74:	e003      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2201      	movs	r2, #1
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fe18 	bl	80079bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a23      	ldr	r2, [pc, #140]	; (8006e20 <HAL_TIM_PWM_Start+0x14c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d107      	bne.n	8006da6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <HAL_TIM_PWM_Start+0x14c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d018      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db8:	d013      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <HAL_TIM_PWM_Start+0x150>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00e      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <HAL_TIM_PWM_Start+0x154>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a16      	ldr	r2, [pc, #88]	; (8006e2c <HAL_TIM_PWM_Start+0x158>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <HAL_TIM_PWM_Start+0x15c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d111      	bne.n	8006e06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b06      	cmp	r3, #6
 8006df2:	d010      	beq.n	8006e16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e04:	e007      	b.n	8006e16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	40014000 	.word	0x40014000

08006e34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2200      	movs	r2, #0
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fdb8 	bl	80079bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a29      	ldr	r2, [pc, #164]	; (8006ef8 <HAL_TIM_PWM_Stop+0xc4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d117      	bne.n	8006e86 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6a1a      	ldr	r2, [r3, #32]
 8006e5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e60:	4013      	ands	r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10f      	bne.n	8006e86 <HAL_TIM_PWM_Stop+0x52>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6a1a      	ldr	r2, [r3, #32]
 8006e6c:	f240 4344 	movw	r3, #1092	; 0x444
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d107      	bne.n	8006e86 <HAL_TIM_PWM_Stop+0x52>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a1a      	ldr	r2, [r3, #32]
 8006e8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10f      	bne.n	8006eb6 <HAL_TIM_PWM_Stop+0x82>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6a1a      	ldr	r2, [r3, #32]
 8006e9c:	f240 4344 	movw	r3, #1092	; 0x444
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d107      	bne.n	8006eb6 <HAL_TIM_PWM_Stop+0x82>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0201 	bic.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <HAL_TIM_PWM_Stop+0x92>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec4:	e013      	b.n	8006eee <HAL_TIM_PWM_Stop+0xba>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d104      	bne.n	8006ed6 <HAL_TIM_PWM_Stop+0xa2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed4:	e00b      	b.n	8006eee <HAL_TIM_PWM_Stop+0xba>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d104      	bne.n	8006ee6 <HAL_TIM_PWM_Stop+0xb2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ee4:	e003      	b.n	8006eee <HAL_TIM_PWM_Stop+0xba>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	40010000 	.word	0x40010000

08006efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d122      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d11b      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0202 	mvn.w	r2, #2
 8006f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa77 	bl	8007432 <HAL_TIM_IC_CaptureCallback>
 8006f44:	e005      	b.n	8006f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa69 	bl	800741e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fa7a 	bl	8007446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d122      	bne.n	8006fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d11b      	bne.n	8006fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0204 	mvn.w	r2, #4
 8006f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa4d 	bl	8007432 <HAL_TIM_IC_CaptureCallback>
 8006f98:	e005      	b.n	8006fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa3f 	bl	800741e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fa50 	bl	8007446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b08      	cmp	r3, #8
 8006fb8:	d122      	bne.n	8007000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d11b      	bne.n	8007000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0208 	mvn.w	r2, #8
 8006fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa23 	bl	8007432 <HAL_TIM_IC_CaptureCallback>
 8006fec:	e005      	b.n	8006ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa15 	bl	800741e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fa26 	bl	8007446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b10      	cmp	r3, #16
 800700c:	d122      	bne.n	8007054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b10      	cmp	r3, #16
 800701a:	d11b      	bne.n	8007054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0210 	mvn.w	r2, #16
 8007024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2208      	movs	r2, #8
 800702a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f9f9 	bl	8007432 <HAL_TIM_IC_CaptureCallback>
 8007040:	e005      	b.n	800704e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f9eb 	bl	800741e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f9fc 	bl	8007446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b01      	cmp	r3, #1
 8007060:	d10e      	bne.n	8007080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b01      	cmp	r3, #1
 800706e:	d107      	bne.n	8007080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0201 	mvn.w	r2, #1
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fb f952 	bl	8002324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708a:	2b80      	cmp	r3, #128	; 0x80
 800708c:	d10e      	bne.n	80070ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007098:	2b80      	cmp	r3, #128	; 0x80
 800709a:	d107      	bne.n	80070ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fd26 	bl	8007af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d10e      	bne.n	80070d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b40      	cmp	r3, #64	; 0x40
 80070c6:	d107      	bne.n	80070d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f9c1 	bl	800745a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d10e      	bne.n	8007104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d107      	bne.n	8007104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f06f 0220 	mvn.w	r2, #32
 80070fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fcf0 	bl	8007ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007126:	2302      	movs	r3, #2
 8007128:	e0ae      	b.n	8007288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b0c      	cmp	r3, #12
 8007136:	f200 809f 	bhi.w	8007278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800713a:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007175 	.word	0x08007175
 8007144:	08007279 	.word	0x08007279
 8007148:	08007279 	.word	0x08007279
 800714c:	08007279 	.word	0x08007279
 8007150:	080071b5 	.word	0x080071b5
 8007154:	08007279 	.word	0x08007279
 8007158:	08007279 	.word	0x08007279
 800715c:	08007279 	.word	0x08007279
 8007160:	080071f7 	.word	0x080071f7
 8007164:	08007279 	.word	0x08007279
 8007168:	08007279 	.word	0x08007279
 800716c:	08007279 	.word	0x08007279
 8007170:	08007237 	.word	0x08007237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68b9      	ldr	r1, [r7, #8]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f9f8 	bl	8007570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0208 	orr.w	r2, r2, #8
 800718e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0204 	bic.w	r2, r2, #4
 800719e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6999      	ldr	r1, [r3, #24]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	691a      	ldr	r2, [r3, #16]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	619a      	str	r2, [r3, #24]
      break;
 80071b2:	e064      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fa3e 	bl	800763c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6999      	ldr	r1, [r3, #24]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	021a      	lsls	r2, r3, #8
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	619a      	str	r2, [r3, #24]
      break;
 80071f4:	e043      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fa89 	bl	8007714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69da      	ldr	r2, [r3, #28]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0208 	orr.w	r2, r2, #8
 8007210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0204 	bic.w	r2, r2, #4
 8007220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69d9      	ldr	r1, [r3, #28]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	61da      	str	r2, [r3, #28]
      break;
 8007234:	e023      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68b9      	ldr	r1, [r7, #8]
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fad3 	bl	80077e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69d9      	ldr	r1, [r3, #28]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	021a      	lsls	r2, r3, #8
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	61da      	str	r2, [r3, #28]
      break;
 8007276:	e002      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75fb      	strb	r3, [r7, #23]
      break;
 800727c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_TIM_ConfigClockSource+0x1c>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e0b4      	b.n	8007416 <HAL_TIM_ConfigClockSource+0x186>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e4:	d03e      	beq.n	8007364 <HAL_TIM_ConfigClockSource+0xd4>
 80072e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ea:	f200 8087 	bhi.w	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f2:	f000 8086 	beq.w	8007402 <HAL_TIM_ConfigClockSource+0x172>
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fa:	d87f      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b70      	cmp	r3, #112	; 0x70
 80072fe:	d01a      	beq.n	8007336 <HAL_TIM_ConfigClockSource+0xa6>
 8007300:	2b70      	cmp	r3, #112	; 0x70
 8007302:	d87b      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b60      	cmp	r3, #96	; 0x60
 8007306:	d050      	beq.n	80073aa <HAL_TIM_ConfigClockSource+0x11a>
 8007308:	2b60      	cmp	r3, #96	; 0x60
 800730a:	d877      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b50      	cmp	r3, #80	; 0x50
 800730e:	d03c      	beq.n	800738a <HAL_TIM_ConfigClockSource+0xfa>
 8007310:	2b50      	cmp	r3, #80	; 0x50
 8007312:	d873      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d058      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x13a>
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d86f      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b30      	cmp	r3, #48	; 0x30
 800731e:	d064      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x15a>
 8007320:	2b30      	cmp	r3, #48	; 0x30
 8007322:	d86b      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 8007324:	2b20      	cmp	r3, #32
 8007326:	d060      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x15a>
 8007328:	2b20      	cmp	r3, #32
 800732a:	d867      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d05c      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x15a>
 8007330:	2b10      	cmp	r3, #16
 8007332:	d05a      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x15a>
 8007334:	e062      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6899      	ldr	r1, [r3, #8]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f000 fb19 	bl	800797c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	609a      	str	r2, [r3, #8]
      break;
 8007362:	e04f      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6899      	ldr	r1, [r3, #8]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f000 fb02 	bl	800797c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007386:	609a      	str	r2, [r3, #8]
      break;
 8007388:	e03c      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	6859      	ldr	r1, [r3, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	461a      	mov	r2, r3
 8007398:	f000 fa76 	bl	8007888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2150      	movs	r1, #80	; 0x50
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 facf 	bl	8007946 <TIM_ITRx_SetConfig>
      break;
 80073a8:	e02c      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6859      	ldr	r1, [r3, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f000 fa95 	bl	80078e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2160      	movs	r1, #96	; 0x60
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fabf 	bl	8007946 <TIM_ITRx_SetConfig>
      break;
 80073c8:	e01c      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6859      	ldr	r1, [r3, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	461a      	mov	r2, r3
 80073d8:	f000 fa56 	bl	8007888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2140      	movs	r1, #64	; 0x40
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 faaf 	bl	8007946 <TIM_ITRx_SetConfig>
      break;
 80073e8:	e00c      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4619      	mov	r1, r3
 80073f4:	4610      	mov	r0, r2
 80073f6:	f000 faa6 	bl	8007946 <TIM_ITRx_SetConfig>
      break;
 80073fa:	e003      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	e000      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
	...

08007470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a34      	ldr	r2, [pc, #208]	; (8007554 <TIM_Base_SetConfig+0xe4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00f      	beq.n	80074a8 <TIM_Base_SetConfig+0x38>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748e:	d00b      	beq.n	80074a8 <TIM_Base_SetConfig+0x38>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a31      	ldr	r2, [pc, #196]	; (8007558 <TIM_Base_SetConfig+0xe8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d007      	beq.n	80074a8 <TIM_Base_SetConfig+0x38>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a30      	ldr	r2, [pc, #192]	; (800755c <TIM_Base_SetConfig+0xec>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d003      	beq.n	80074a8 <TIM_Base_SetConfig+0x38>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a2f      	ldr	r2, [pc, #188]	; (8007560 <TIM_Base_SetConfig+0xf0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d108      	bne.n	80074ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a25      	ldr	r2, [pc, #148]	; (8007554 <TIM_Base_SetConfig+0xe4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d01b      	beq.n	80074fa <TIM_Base_SetConfig+0x8a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c8:	d017      	beq.n	80074fa <TIM_Base_SetConfig+0x8a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a22      	ldr	r2, [pc, #136]	; (8007558 <TIM_Base_SetConfig+0xe8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <TIM_Base_SetConfig+0x8a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a21      	ldr	r2, [pc, #132]	; (800755c <TIM_Base_SetConfig+0xec>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00f      	beq.n	80074fa <TIM_Base_SetConfig+0x8a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a20      	ldr	r2, [pc, #128]	; (8007560 <TIM_Base_SetConfig+0xf0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00b      	beq.n	80074fa <TIM_Base_SetConfig+0x8a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <TIM_Base_SetConfig+0xf4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d007      	beq.n	80074fa <TIM_Base_SetConfig+0x8a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <TIM_Base_SetConfig+0xf8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d003      	beq.n	80074fa <TIM_Base_SetConfig+0x8a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1d      	ldr	r2, [pc, #116]	; (800756c <TIM_Base_SetConfig+0xfc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d108      	bne.n	800750c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a08      	ldr	r2, [pc, #32]	; (8007554 <TIM_Base_SetConfig+0xe4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d103      	bne.n	8007540 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	615a      	str	r2, [r3, #20]
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40010000 	.word	0x40010000
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800
 8007560:	40000c00 	.word	0x40000c00
 8007564:	40014000 	.word	0x40014000
 8007568:	40014400 	.word	0x40014400
 800756c:	40014800 	.word	0x40014800

08007570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f023 0201 	bic.w	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0303 	bic.w	r3, r3, #3
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f023 0302 	bic.w	r3, r3, #2
 80075b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <TIM_OC1_SetConfig+0xc8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d10c      	bne.n	80075e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f023 0308 	bic.w	r3, r3, #8
 80075d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0304 	bic.w	r3, r3, #4
 80075e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a13      	ldr	r2, [pc, #76]	; (8007638 <TIM_OC1_SetConfig+0xc8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d111      	bne.n	8007612 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4313      	orrs	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4313      	orrs	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	621a      	str	r2, [r3, #32]
}
 800762c:	bf00      	nop
 800762e:	371c      	adds	r7, #28
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	40010000 	.word	0x40010000

0800763c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f023 0210 	bic.w	r2, r3, #16
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f023 0320 	bic.w	r3, r3, #32
 8007686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a1e      	ldr	r2, [pc, #120]	; (8007710 <TIM_OC2_SetConfig+0xd4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d10d      	bne.n	80076b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a15      	ldr	r2, [pc, #84]	; (8007710 <TIM_OC2_SetConfig+0xd4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d113      	bne.n	80076e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4313      	orrs	r3, r2
 80076da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	621a      	str	r2, [r3, #32]
}
 8007702:	bf00      	nop
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	40010000 	.word	0x40010000

08007714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800775c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <TIM_OC3_SetConfig+0xd0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d10d      	bne.n	800778e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	021b      	lsls	r3, r3, #8
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800778c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a14      	ldr	r2, [pc, #80]	; (80077e4 <TIM_OC3_SetConfig+0xd0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d113      	bne.n	80077be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800779c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	621a      	str	r2, [r3, #32]
}
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	40010000 	.word	0x40010000

080077e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	031b      	lsls	r3, r3, #12
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a10      	ldr	r2, [pc, #64]	; (8007884 <TIM_OC4_SetConfig+0x9c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d109      	bne.n	800785c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800784e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	019b      	lsls	r3, r3, #6
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	621a      	str	r2, [r3, #32]
}
 8007876:	bf00      	nop
 8007878:	371c      	adds	r7, #28
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40010000 	.word	0x40010000

08007888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f023 0201 	bic.w	r2, r3, #1
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f023 030a 	bic.w	r3, r3, #10
 80078c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b087      	sub	sp, #28
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f023 0210 	bic.w	r2, r3, #16
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	031b      	lsls	r3, r3, #12
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4313      	orrs	r3, r2
 800791a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	f043 0307 	orr.w	r3, r3, #7
 8007968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	609a      	str	r2, [r3, #8]
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	021a      	lsls	r2, r3, #8
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	431a      	orrs	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	609a      	str	r2, [r3, #8]
}
 80079b0:	bf00      	nop
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	2201      	movs	r2, #1
 80079d0:	fa02 f303 	lsl.w	r3, r2, r3
 80079d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a1a      	ldr	r2, [r3, #32]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	43db      	mvns	r3, r3
 80079de:	401a      	ands	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1a      	ldr	r2, [r3, #32]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f003 031f 	and.w	r3, r3, #31
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	fa01 f303 	lsl.w	r3, r1, r3
 80079f4:	431a      	orrs	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e050      	b.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d018      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6c:	d013      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00e      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a16      	ldr	r2, [pc, #88]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d009      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a15      	ldr	r2, [pc, #84]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d004      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d10c      	bne.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40010000 	.word	0x40010000
 8007ad4:	40000400 	.word	0x40000400
 8007ad8:	40000800 	.word	0x40000800
 8007adc:	40000c00 	.word	0x40000c00
 8007ae0:	40014000 	.word	0x40014000

08007ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	f107 001c 	add.w	r0, r7, #28
 8007b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d122      	bne.n	8007b6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d105      	bne.n	8007b5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fbee 	bl	8009340 <USB_CoreReset>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]
 8007b68:	e01a      	b.n	8007ba0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fbe2 	bl	8009340 <USB_CoreReset>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
 8007b92:	e005      	b.n	8007ba0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d10b      	bne.n	8007bbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f043 0206 	orr.w	r2, r3, #6
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f043 0220 	orr.w	r2, r3, #32
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bca:	b004      	add	sp, #16
 8007bcc:	4770      	bx	lr
	...

08007bd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d165      	bne.n	8007cb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4a41      	ldr	r2, [pc, #260]	; (8007cec <USB_SetTurnaroundTime+0x11c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d906      	bls.n	8007bfa <USB_SetTurnaroundTime+0x2a>
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4a40      	ldr	r2, [pc, #256]	; (8007cf0 <USB_SetTurnaroundTime+0x120>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d202      	bcs.n	8007bfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007bf4:	230f      	movs	r3, #15
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e062      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4a3c      	ldr	r2, [pc, #240]	; (8007cf0 <USB_SetTurnaroundTime+0x120>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d306      	bcc.n	8007c10 <USB_SetTurnaroundTime+0x40>
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4a3b      	ldr	r2, [pc, #236]	; (8007cf4 <USB_SetTurnaroundTime+0x124>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d202      	bcs.n	8007c10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c0a:	230e      	movs	r3, #14
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	e057      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4a38      	ldr	r2, [pc, #224]	; (8007cf4 <USB_SetTurnaroundTime+0x124>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d306      	bcc.n	8007c26 <USB_SetTurnaroundTime+0x56>
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4a37      	ldr	r2, [pc, #220]	; (8007cf8 <USB_SetTurnaroundTime+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d202      	bcs.n	8007c26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c20:	230d      	movs	r3, #13
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	e04c      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4a33      	ldr	r2, [pc, #204]	; (8007cf8 <USB_SetTurnaroundTime+0x128>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d306      	bcc.n	8007c3c <USB_SetTurnaroundTime+0x6c>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4a32      	ldr	r2, [pc, #200]	; (8007cfc <USB_SetTurnaroundTime+0x12c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d802      	bhi.n	8007c3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c36:	230c      	movs	r3, #12
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	e041      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4a2f      	ldr	r2, [pc, #188]	; (8007cfc <USB_SetTurnaroundTime+0x12c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d906      	bls.n	8007c52 <USB_SetTurnaroundTime+0x82>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4a2e      	ldr	r2, [pc, #184]	; (8007d00 <USB_SetTurnaroundTime+0x130>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d802      	bhi.n	8007c52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c4c:	230b      	movs	r3, #11
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e036      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4a2a      	ldr	r2, [pc, #168]	; (8007d00 <USB_SetTurnaroundTime+0x130>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d906      	bls.n	8007c68 <USB_SetTurnaroundTime+0x98>
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	4a29      	ldr	r2, [pc, #164]	; (8007d04 <USB_SetTurnaroundTime+0x134>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d802      	bhi.n	8007c68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c62:	230a      	movs	r3, #10
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	e02b      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	4a26      	ldr	r2, [pc, #152]	; (8007d04 <USB_SetTurnaroundTime+0x134>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d906      	bls.n	8007c7e <USB_SetTurnaroundTime+0xae>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	4a25      	ldr	r2, [pc, #148]	; (8007d08 <USB_SetTurnaroundTime+0x138>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d202      	bcs.n	8007c7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c78:	2309      	movs	r3, #9
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	e020      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4a21      	ldr	r2, [pc, #132]	; (8007d08 <USB_SetTurnaroundTime+0x138>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d306      	bcc.n	8007c94 <USB_SetTurnaroundTime+0xc4>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	4a20      	ldr	r2, [pc, #128]	; (8007d0c <USB_SetTurnaroundTime+0x13c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d802      	bhi.n	8007c94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c8e:	2308      	movs	r3, #8
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	e015      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4a1d      	ldr	r2, [pc, #116]	; (8007d0c <USB_SetTurnaroundTime+0x13c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d906      	bls.n	8007caa <USB_SetTurnaroundTime+0xda>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4a1c      	ldr	r2, [pc, #112]	; (8007d10 <USB_SetTurnaroundTime+0x140>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d202      	bcs.n	8007caa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ca4:	2307      	movs	r3, #7
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e00a      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007caa:	2306      	movs	r3, #6
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e007      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cb6:	2309      	movs	r3, #9
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	e001      	b.n	8007cc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007cbc:	2309      	movs	r3, #9
 8007cbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	029b      	lsls	r3, r3, #10
 8007cd4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	00d8acbf 	.word	0x00d8acbf
 8007cf0:	00e4e1c0 	.word	0x00e4e1c0
 8007cf4:	00f42400 	.word	0x00f42400
 8007cf8:	01067380 	.word	0x01067380
 8007cfc:	011a499f 	.word	0x011a499f
 8007d00:	01312cff 	.word	0x01312cff
 8007d04:	014ca43f 	.word	0x014ca43f
 8007d08:	016e3600 	.word	0x016e3600
 8007d0c:	01a6ab1f 	.word	0x01a6ab1f
 8007d10:	01e84800 	.word	0x01e84800

08007d14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f043 0201 	orr.w	r2, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f023 0201 	bic.w	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d115      	bne.n	8007da6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d86:	2001      	movs	r0, #1
 8007d88:	f7fb f838 	bl	8002dfc <HAL_Delay>
      ms++;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fa45 	bl	8009222 <USB_GetMode>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d01e      	beq.n	8007ddc <USB_SetCurrentMode+0x84>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b31      	cmp	r3, #49	; 0x31
 8007da2:	d9f0      	bls.n	8007d86 <USB_SetCurrentMode+0x2e>
 8007da4:	e01a      	b.n	8007ddc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d115      	bne.n	8007dd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007db8:	2001      	movs	r0, #1
 8007dba:	f7fb f81f 	bl	8002dfc <HAL_Delay>
      ms++;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 fa2c 	bl	8009222 <USB_GetMode>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <USB_SetCurrentMode+0x84>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b31      	cmp	r3, #49	; 0x31
 8007dd4:	d9f0      	bls.n	8007db8 <USB_SetCurrentMode+0x60>
 8007dd6:	e001      	b.n	8007ddc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e005      	b.n	8007de8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b32      	cmp	r3, #50	; 0x32
 8007de0:	d101      	bne.n	8007de6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007df0:	b084      	sub	sp, #16
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b086      	sub	sp, #24
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	613b      	str	r3, [r7, #16]
 8007e0e:	e009      	b.n	8007e24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3340      	adds	r3, #64	; 0x40
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	3301      	adds	r3, #1
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b0e      	cmp	r3, #14
 8007e28:	d9f2      	bls.n	8007e10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d11c      	bne.n	8007e6a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e3e:	f043 0302 	orr.w	r3, r3, #2
 8007e42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
 8007e68:	e00b      	b.n	8007e82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e88:	461a      	mov	r2, r3
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e94:	4619      	mov	r1, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	680b      	ldr	r3, [r1, #0]
 8007ea0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d10c      	bne.n	8007ec2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d104      	bne.n	8007eb8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007eae:	2100      	movs	r1, #0
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f965 	bl	8008180 <USB_SetDevSpeed>
 8007eb6:	e008      	b.n	8007eca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007eb8:	2101      	movs	r1, #1
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f960 	bl	8008180 <USB_SetDevSpeed>
 8007ec0:	e003      	b.n	8007eca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ec2:	2103      	movs	r1, #3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f95b 	bl	8008180 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007eca:	2110      	movs	r1, #16
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f8f3 	bl	80080b8 <USB_FlushTxFifo>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f91f 	bl	8008120 <USB_FlushRxFifo>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efe:	461a      	mov	r2, r3
 8007f00:	2300      	movs	r3, #0
 8007f02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f10:	2300      	movs	r3, #0
 8007f12:	613b      	str	r3, [r7, #16]
 8007f14:	e043      	b.n	8007f9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f2c:	d118      	bne.n	8007f60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	461a      	mov	r2, r3
 8007f42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	e013      	b.n	8007f72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f56:	461a      	mov	r2, r3
 8007f58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e008      	b.n	8007f72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	461a      	mov	r2, r3
 8007f80:	2300      	movs	r3, #0
 8007f82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f90:	461a      	mov	r2, r3
 8007f92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d3b7      	bcc.n	8007f16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	613b      	str	r3, [r7, #16]
 8007faa:	e043      	b.n	8008034 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fc2:	d118      	bne.n	8007ff6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e013      	b.n	8008008 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	461a      	mov	r2, r3
 8007fee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	e008      	b.n	8008008 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	461a      	mov	r2, r3
 8008004:	2300      	movs	r3, #0
 8008006:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	461a      	mov	r2, r3
 8008016:	2300      	movs	r3, #0
 8008018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008026:	461a      	mov	r2, r3
 8008028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800802c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	3301      	adds	r3, #1
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	429a      	cmp	r2, r3
 800803a:	d3b7      	bcc.n	8007fac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800804a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800804e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800805c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	2b00      	cmp	r3, #0
 8008062:	d105      	bne.n	8008070 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	f043 0210 	orr.w	r2, r3, #16
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <USB_DevInit+0x2c4>)
 8008076:	4313      	orrs	r3, r2
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800807c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f043 0208 	orr.w	r2, r3, #8
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800808e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008090:	2b01      	cmp	r3, #1
 8008092:	d107      	bne.n	80080a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800809c:	f043 0304 	orr.w	r3, r3, #4
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080b0:	b004      	add	sp, #16
 80080b2:	4770      	bx	lr
 80080b4:	803c3800 	.word	0x803c3800

080080b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a13      	ldr	r2, [pc, #76]	; (800811c <USB_FlushTxFifo+0x64>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d901      	bls.n	80080d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e01b      	b.n	8008110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	daf2      	bge.n	80080c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	019b      	lsls	r3, r3, #6
 80080e8:	f043 0220 	orr.w	r2, r3, #32
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4a08      	ldr	r2, [pc, #32]	; (800811c <USB_FlushTxFifo+0x64>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d901      	bls.n	8008102 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e006      	b.n	8008110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b20      	cmp	r3, #32
 800810c:	d0f0      	beq.n	80080f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	00030d40 	.word	0x00030d40

08008120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <USB_FlushRxFifo+0x5c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d901      	bls.n	800813e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e018      	b.n	8008170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	daf2      	bge.n	800812c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2210      	movs	r2, #16
 800814e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a08      	ldr	r2, [pc, #32]	; (800817c <USB_FlushRxFifo+0x5c>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d901      	bls.n	8008162 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e006      	b.n	8008170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	2b10      	cmp	r3, #16
 800816c:	d0f0      	beq.n	8008150 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	00030d40 	.word	0x00030d40

08008180 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081a0:	4313      	orrs	r3, r2
 80081a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 0306 	and.w	r3, r3, #6
 80081ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]
 80081d6:	e00a      	b.n	80081ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d002      	beq.n	80081e4 <USB_GetDevSpeed+0x32>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b06      	cmp	r3, #6
 80081e2:	d102      	bne.n	80081ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081e4:	2302      	movs	r3, #2
 80081e6:	75fb      	strb	r3, [r7, #23]
 80081e8:	e001      	b.n	80081ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081ea:	230f      	movs	r3, #15
 80081ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d13a      	bne.n	800828e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	2101      	movs	r1, #1
 800822a:	fa01 f303 	lsl.w	r3, r1, r3
 800822e:	b29b      	uxth	r3, r3
 8008230:	68f9      	ldr	r1, [r7, #12]
 8008232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008236:	4313      	orrs	r3, r2
 8008238:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d155      	bne.n	80082fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	791b      	ldrb	r3, [r3, #4]
 800826a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800826c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	059b      	lsls	r3, r3, #22
 8008272:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008274:	4313      	orrs	r3, r2
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	0151      	lsls	r1, r2, #5
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	440a      	add	r2, r1
 800827e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e036      	b.n	80082fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008294:	69da      	ldr	r2, [r3, #28]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	2101      	movs	r1, #1
 80082a0:	fa01 f303 	lsl.w	r3, r1, r3
 80082a4:	041b      	lsls	r3, r3, #16
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ac:	4313      	orrs	r3, r2
 80082ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d11a      	bne.n	80082fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	791b      	ldrb	r3, [r3, #4]
 80082e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082e2:	430b      	orrs	r3, r1
 80082e4:	4313      	orrs	r3, r2
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d161      	bne.n	80083ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800833a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800833e:	d11f      	bne.n	8008380 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	0151      	lsls	r1, r2, #5
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	440a      	add	r2, r1
 8008356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800835a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800835e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	440a      	add	r2, r1
 8008376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800837a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800837e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	2101      	movs	r1, #1
 8008392:	fa01 f303 	lsl.w	r3, r1, r3
 8008396:	b29b      	uxth	r3, r3
 8008398:	43db      	mvns	r3, r3
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a0:	4013      	ands	r3, r2
 80083a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083aa:	69da      	ldr	r2, [r3, #28]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	f003 030f 	and.w	r3, r3, #15
 80083b4:	2101      	movs	r1, #1
 80083b6:	fa01 f303 	lsl.w	r3, r1, r3
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	43db      	mvns	r3, r3
 80083be:	68f9      	ldr	r1, [r7, #12]
 80083c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083c4:	4013      	ands	r3, r2
 80083c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	0159      	lsls	r1, r3, #5
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	440b      	add	r3, r1
 80083de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e2:	4619      	mov	r1, r3
 80083e4:	4b35      	ldr	r3, [pc, #212]	; (80084bc <USB_DeactivateEndpoint+0x1b0>)
 80083e6:	4013      	ands	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]
 80083ea:	e060      	b.n	80084ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008402:	d11f      	bne.n	8008444 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	0151      	lsls	r1, r2, #5
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	440a      	add	r2, r1
 800841a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800841e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008422:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	440a      	add	r2, r1
 800843a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800843e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	2101      	movs	r1, #1
 8008456:	fa01 f303 	lsl.w	r3, r1, r3
 800845a:	041b      	lsls	r3, r3, #16
 800845c:	43db      	mvns	r3, r3
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008464:	4013      	ands	r3, r2
 8008466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	2101      	movs	r1, #1
 800847a:	fa01 f303 	lsl.w	r3, r1, r3
 800847e:	041b      	lsls	r3, r3, #16
 8008480:	43db      	mvns	r3, r3
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008488:	4013      	ands	r3, r2
 800848a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	0159      	lsls	r1, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	440b      	add	r3, r1
 80084a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a6:	4619      	mov	r1, r3
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <USB_DeactivateEndpoint+0x1b4>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	ec337800 	.word	0xec337800
 80084c0:	eff37800 	.word	0xeff37800

080084c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	f040 815c 	bne.w	800879e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d132      	bne.n	8008554 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	440a      	add	r2, r1
 8008504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008508:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800850c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008510:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	440a      	add	r2, r1
 8008528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008530:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	440a      	add	r2, r1
 8008548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800854c:	0cdb      	lsrs	r3, r3, #19
 800854e:	04db      	lsls	r3, r3, #19
 8008550:	6113      	str	r3, [r2, #16]
 8008552:	e074      	b.n	800863e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	0151      	lsls	r1, r2, #5
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	440a      	add	r2, r1
 800856a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800856e:	0cdb      	lsrs	r3, r3, #19
 8008570:	04db      	lsls	r3, r3, #19
 8008572:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	0151      	lsls	r1, r2, #5
 8008586:	69fa      	ldr	r2, [r7, #28]
 8008588:	440a      	add	r2, r1
 800858a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800858e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008592:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6999      	ldr	r1, [r3, #24]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	440b      	add	r3, r1
 80085b0:	1e59      	subs	r1, r3, #1
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80085ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085bc:	4b9d      	ldr	r3, [pc, #628]	; (8008834 <USB_EPStartXfer+0x370>)
 80085be:	400b      	ands	r3, r1
 80085c0:	69b9      	ldr	r1, [r7, #24]
 80085c2:	0148      	lsls	r0, r1, #5
 80085c4:	69f9      	ldr	r1, [r7, #28]
 80085c6:	4401      	add	r1, r0
 80085c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085cc:	4313      	orrs	r3, r2
 80085ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e6:	69b9      	ldr	r1, [r7, #24]
 80085e8:	0148      	lsls	r0, r1, #5
 80085ea:	69f9      	ldr	r1, [r7, #28]
 80085ec:	4401      	add	r1, r0
 80085ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085f2:	4313      	orrs	r3, r2
 80085f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d11f      	bne.n	800863e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008618:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800861c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	0151      	lsls	r1, r2, #5
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	440a      	add	r2, r1
 8008634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008638:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800863c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d14b      	bne.n	80086dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d009      	beq.n	8008660 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008658:	461a      	mov	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	791b      	ldrb	r3, [r3, #4]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d128      	bne.n	80086ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d110      	bne.n	800869a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	440a      	add	r2, r1
 800868e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	e00f      	b.n	80086ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	0151      	lsls	r1, r2, #5
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	440a      	add	r2, r1
 80086b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	e133      	b.n	8008944 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	791b      	ldrb	r3, [r3, #4]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d015      	beq.n	8008730 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 811b 	beq.w	8008944 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	2101      	movs	r1, #1
 8008720:	fa01 f303 	lsl.w	r3, r1, r3
 8008724:	69f9      	ldr	r1, [r7, #28]
 8008726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800872a:	4313      	orrs	r3, r2
 800872c:	634b      	str	r3, [r1, #52]	; 0x34
 800872e:	e109      	b.n	8008944 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873c:	2b00      	cmp	r3, #0
 800873e:	d110      	bne.n	8008762 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	440a      	add	r2, r1
 8008756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	e00f      	b.n	8008782 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	440a      	add	r2, r1
 8008778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800877c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008780:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6919      	ldr	r1, [r3, #16]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	781a      	ldrb	r2, [r3, #0]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	b298      	uxth	r0, r3
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	4603      	mov	r3, r0
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 fade 	bl	8008d58 <USB_WritePacket>
 800879c:	e0d2      	b.n	8008944 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	0151      	lsls	r1, r2, #5
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	440a      	add	r2, r1
 80087b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b8:	0cdb      	lsrs	r3, r3, #19
 80087ba:	04db      	lsls	r3, r3, #19
 80087bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d126      	bne.n	8008838 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008800:	69b9      	ldr	r1, [r7, #24]
 8008802:	0148      	lsls	r0, r1, #5
 8008804:	69f9      	ldr	r1, [r7, #28]
 8008806:	4401      	add	r1, r0
 8008808:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800880c:	4313      	orrs	r3, r2
 800880e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800882a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800882e:	6113      	str	r3, [r2, #16]
 8008830:	e03a      	b.n	80088a8 <USB_EPStartXfer+0x3e4>
 8008832:	bf00      	nop
 8008834:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	4413      	add	r3, r2
 8008842:	1e5a      	subs	r2, r3, #1
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	fbb2 f3f3 	udiv	r3, r2, r3
 800884c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	8afa      	ldrh	r2, [r7, #22]
 8008854:	fb03 f202 	mul.w	r2, r3, r2
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008868:	691a      	ldr	r2, [r3, #16]
 800886a:	8afb      	ldrh	r3, [r7, #22]
 800886c:	04d9      	lsls	r1, r3, #19
 800886e:	4b38      	ldr	r3, [pc, #224]	; (8008950 <USB_EPStartXfer+0x48c>)
 8008870:	400b      	ands	r3, r1
 8008872:	69b9      	ldr	r1, [r7, #24]
 8008874:	0148      	lsls	r0, r1, #5
 8008876:	69f9      	ldr	r1, [r7, #28]
 8008878:	4401      	add	r1, r0
 800887a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800887e:	4313      	orrs	r3, r2
 8008880:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888e:	691a      	ldr	r2, [r3, #16]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008898:	69b9      	ldr	r1, [r7, #24]
 800889a:	0148      	lsls	r0, r1, #5
 800889c:	69f9      	ldr	r1, [r7, #28]
 800889e:	4401      	add	r1, r0
 80088a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088a4:	4313      	orrs	r3, r2
 80088a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d10d      	bne.n	80088ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6919      	ldr	r1, [r3, #16]
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c6:	460a      	mov	r2, r1
 80088c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	791b      	ldrb	r3, [r3, #4]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d128      	bne.n	8008924 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d110      	bne.n	8008904 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	0151      	lsls	r1, r2, #5
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	440a      	add	r2, r1
 80088f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	e00f      	b.n	8008924 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	0151      	lsls	r1, r2, #5
 8008916:	69fa      	ldr	r2, [r7, #28]
 8008918:	440a      	add	r2, r1
 800891a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800891e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008922:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	440a      	add	r2, r1
 800893a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800893e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008942:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3720      	adds	r7, #32
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	1ff80000 	.word	0x1ff80000

08008954 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	785b      	ldrb	r3, [r3, #1]
 8008970:	2b01      	cmp	r3, #1
 8008972:	f040 80ce 	bne.w	8008b12 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d132      	bne.n	80089e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	0151      	lsls	r1, r2, #5
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	440a      	add	r2, r1
 8008994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800899c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	0151      	lsls	r1, r2, #5
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	440a      	add	r2, r1
 80089b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	0151      	lsls	r1, r2, #5
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	440a      	add	r2, r1
 80089d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089dc:	0cdb      	lsrs	r3, r3, #19
 80089de:	04db      	lsls	r3, r3, #19
 80089e0:	6113      	str	r3, [r2, #16]
 80089e2:	e04e      	b.n	8008a82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	0151      	lsls	r1, r2, #5
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	440a      	add	r2, r1
 80089fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089fe:	0cdb      	lsrs	r3, r3, #19
 8008a00:	04db      	lsls	r3, r3, #19
 8008a02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	0151      	lsls	r1, r2, #5
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	440a      	add	r2, r1
 8008a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	699a      	ldr	r2, [r3, #24]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d903      	bls.n	8008a3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	0151      	lsls	r1, r2, #5
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	440a      	add	r2, r1
 8008a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a68:	691a      	ldr	r2, [r3, #16]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a72:	6939      	ldr	r1, [r7, #16]
 8008a74:	0148      	lsls	r0, r1, #5
 8008a76:	6979      	ldr	r1, [r7, #20]
 8008a78:	4401      	add	r1, r0
 8008a7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d11e      	bne.n	8008ac6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d009      	beq.n	8008aa4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	0151      	lsls	r1, r2, #5
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	440a      	add	r2, r1
 8008aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008abe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	e097      	b.n	8008bf6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	0151      	lsls	r1, r2, #5
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	440a      	add	r2, r1
 8008adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ae4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 8083 	beq.w	8008bf6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	2101      	movs	r1, #1
 8008b02:	fa01 f303 	lsl.w	r3, r1, r3
 8008b06:	6979      	ldr	r1, [r7, #20]
 8008b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	634b      	str	r3, [r1, #52]	; 0x34
 8008b10:	e071      	b.n	8008bf6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b2c:	0cdb      	lsrs	r3, r3, #19
 8008b2e:	04db      	lsls	r3, r3, #19
 8008b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ba4:	6939      	ldr	r1, [r7, #16]
 8008ba6:	0148      	lsls	r0, r1, #5
 8008ba8:	6979      	ldr	r1, [r7, #20]
 8008baa:	4401      	add	r1, r0
 8008bac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d10d      	bne.n	8008bd6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6919      	ldr	r1, [r3, #16]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd2:	460a      	mov	r2, r1
 8008bd4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	371c      	adds	r7, #28
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d14a      	bne.n	8008cb8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c3a:	f040 8086 	bne.w	8008d4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	7812      	ldrb	r2, [r2, #0]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d902      	bls.n	8008c9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	75fb      	strb	r3, [r7, #23]
          break;
 8008c9a:	e056      	b.n	8008d4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cb4:	d0e7      	beq.n	8008c86 <USB_EPStopXfer+0x82>
 8008cb6:	e048      	b.n	8008d4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd0:	d13b      	bne.n	8008d4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	7812      	ldrb	r2, [r2, #0]
 8008ce6:	0151      	lsls	r1, r2, #5
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	440a      	add	r2, r1
 8008cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cf4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	0151      	lsls	r1, r2, #5
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	440a      	add	r2, r1
 8008d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d902      	bls.n	8008d30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d2e:	e00c      	b.n	8008d4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d48:	d0e7      	beq.n	8008d1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	371c      	adds	r7, #28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b089      	sub	sp, #36	; 0x24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	4611      	mov	r1, r2
 8008d64:	461a      	mov	r2, r3
 8008d66:	460b      	mov	r3, r1
 8008d68:	71fb      	strb	r3, [r7, #7]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d123      	bne.n	8008dc6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d7e:	88bb      	ldrh	r3, [r7, #4]
 8008d80:	3303      	adds	r3, #3
 8008d82:	089b      	lsrs	r3, r3, #2
 8008d84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d86:	2300      	movs	r3, #0
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	e018      	b.n	8008dbe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	031a      	lsls	r2, r3, #12
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d98:	461a      	mov	r2, r3
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	3301      	adds	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	3301      	adds	r3, #1
 8008daa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	3301      	adds	r3, #1
 8008db0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	3301      	adds	r3, #1
 8008db6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	61bb      	str	r3, [r7, #24]
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d3e2      	bcc.n	8008d8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3724      	adds	r7, #36	; 0x24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b08b      	sub	sp, #44	; 0x2c
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008dea:	88fb      	ldrh	r3, [r7, #6]
 8008dec:	089b      	lsrs	r3, r3, #2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008df2:	88fb      	ldrh	r3, [r7, #6]
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	623b      	str	r3, [r7, #32]
 8008dfe:	e014      	b.n	8008e2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	3301      	adds	r3, #1
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	3301      	adds	r3, #1
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	3301      	adds	r3, #1
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	3301      	adds	r3, #1
 8008e28:	623b      	str	r3, [r7, #32]
 8008e2a:	6a3a      	ldr	r2, [r7, #32]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d3e6      	bcc.n	8008e00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e32:	8bfb      	ldrh	r3, [r7, #30]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01e      	beq.n	8008e76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e42:	461a      	mov	r2, r3
 8008e44:	f107 0310 	add.w	r3, r7, #16
 8008e48:	6812      	ldr	r2, [r2, #0]
 8008e4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	fa22 f303 	lsr.w	r3, r2, r3
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	701a      	strb	r2, [r3, #0]
      i++;
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	3301      	adds	r3, #1
 8008e62:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	3301      	adds	r3, #1
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e6a:	8bfb      	ldrh	r3, [r7, #30]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e70:	8bfb      	ldrh	r3, [r7, #30]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1ea      	bne.n	8008e4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	372c      	adds	r7, #44	; 0x2c
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	785b      	ldrb	r3, [r3, #1]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d12c      	bne.n	8008efa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	db12      	blt.n	8008ed8 <USB_EPSetStall+0x54>
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00f      	beq.n	8008ed8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	0151      	lsls	r1, r2, #5
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	440a      	add	r2, r1
 8008ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ed6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	0151      	lsls	r1, r2, #5
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	440a      	add	r2, r1
 8008eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	e02b      	b.n	8008f52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	db12      	blt.n	8008f32 <USB_EPSetStall+0xae>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00f      	beq.n	8008f32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	0151      	lsls	r1, r2, #5
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	440a      	add	r2, r1
 8008f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d128      	bne.n	8008fce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	0151      	lsls	r1, r2, #5
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	440a      	add	r2, r1
 8008f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	791b      	ldrb	r3, [r3, #4]
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d003      	beq.n	8008fac <USB_EPClearStall+0x4c>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	791b      	ldrb	r3, [r3, #4]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d138      	bne.n	800901e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	0151      	lsls	r1, r2, #5
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	440a      	add	r2, r1
 8008fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	e027      	b.n	800901e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	0151      	lsls	r1, r2, #5
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	440a      	add	r2, r1
 8008fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	791b      	ldrb	r3, [r3, #4]
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d003      	beq.n	8008ffe <USB_EPClearStall+0x9e>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	791b      	ldrb	r3, [r3, #4]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d10f      	bne.n	800901e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	015a      	lsls	r2, r3, #5
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4413      	add	r3, r2
 8009006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	0151      	lsls	r1, r2, #5
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	440a      	add	r2, r1
 8009014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800901c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800904a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800904e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009060:	68f9      	ldr	r1, [r7, #12]
 8009062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009066:	4313      	orrs	r3, r2
 8009068:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090a6:	f023 0302 	bic.w	r3, r3, #2
 80090aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090d4:	f023 0303 	bic.w	r3, r3, #3
 80090d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090e8:	f043 0302 	orr.w	r3, r3, #2
 80090ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4013      	ands	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009114:	68fb      	ldr	r3, [r7, #12]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	4013      	ands	r3, r2
 8009144:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	0c1b      	lsrs	r3, r3, #16
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	4013      	ands	r3, r2
 8009178:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	b29b      	uxth	r3, r3
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800918a:	b480      	push	{r7}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	4013      	ands	r3, r2
 80091b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091b8:	68bb      	ldr	r3, [r7, #8]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b087      	sub	sp, #28
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	fa22 f303 	lsr.w	r3, r2, r3
 80091f6:	01db      	lsls	r3, r3, #7
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	4013      	ands	r3, r2
 8009212:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009214:	68bb      	ldr	r3, [r7, #8]
}
 8009216:	4618      	mov	r0, r3
 8009218:	371c      	adds	r7, #28
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	f003 0301 	and.w	r3, r3, #1
}
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800923e:	b480      	push	{r7}
 8009240:	b085      	sub	sp, #20
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009258:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800925c:	f023 0307 	bic.w	r3, r3, #7
 8009260:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009274:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	460b      	mov	r3, r1
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	333c      	adds	r3, #60	; 0x3c
 800929a:	3304      	adds	r3, #4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	4a26      	ldr	r2, [pc, #152]	; (800933c <USB_EP0_OutStart+0xb8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d90a      	bls.n	80092be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092b8:	d101      	bne.n	80092be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e037      	b.n	800932e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c4:	461a      	mov	r2, r3
 80092c6:	2300      	movs	r3, #0
 80092c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ec:	f043 0318 	orr.w	r3, r3, #24
 80092f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009300:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009304:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10f      	bne.n	800932c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009312:	461a      	mov	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009326:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800932a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	4f54300a 	.word	0x4f54300a

08009340 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4a13      	ldr	r2, [pc, #76]	; (80093a4 <USB_CoreReset+0x64>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d901      	bls.n	800935e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e01b      	b.n	8009396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	daf2      	bge.n	800934c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f043 0201 	orr.w	r2, r3, #1
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a09      	ldr	r2, [pc, #36]	; (80093a4 <USB_CoreReset+0x64>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d901      	bls.n	8009388 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e006      	b.n	8009396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	2b01      	cmp	r3, #1
 8009392:	d0f0      	beq.n	8009376 <USB_CoreReset+0x36>

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	00030d40 	.word	0x00030d40

080093a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80093b8:	f005 fb66 	bl	800ea88 <USBD_static_malloc>
 80093bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d109      	bne.n	80093d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	32b0      	adds	r2, #176	; 0xb0
 80093ce:	2100      	movs	r1, #0
 80093d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80093d4:	2302      	movs	r3, #2
 80093d6:	e0d4      	b.n	8009582 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80093d8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80093dc:	2100      	movs	r1, #0
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f005 fbde 	bl	800eba0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	32b0      	adds	r2, #176	; 0xb0
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	32b0      	adds	r2, #176	; 0xb0
 80093fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7c1b      	ldrb	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d138      	bne.n	8009482 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009410:	4b5e      	ldr	r3, [pc, #376]	; (800958c <USBD_CDC_Init+0x1e4>)
 8009412:	7819      	ldrb	r1, [r3, #0]
 8009414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009418:	2202      	movs	r2, #2
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f005 fa11 	bl	800e842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009420:	4b5a      	ldr	r3, [pc, #360]	; (800958c <USBD_CDC_Init+0x1e4>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	f003 020f 	and.w	r2, r3, #15
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	3324      	adds	r3, #36	; 0x24
 8009436:	2201      	movs	r2, #1
 8009438:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800943a:	4b55      	ldr	r3, [pc, #340]	; (8009590 <USBD_CDC_Init+0x1e8>)
 800943c:	7819      	ldrb	r1, [r3, #0]
 800943e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009442:	2202      	movs	r2, #2
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f005 f9fc 	bl	800e842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800944a:	4b51      	ldr	r3, [pc, #324]	; (8009590 <USBD_CDC_Init+0x1e8>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	f003 020f 	and.w	r2, r3, #15
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009462:	2201      	movs	r2, #1
 8009464:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009466:	4b4b      	ldr	r3, [pc, #300]	; (8009594 <USBD_CDC_Init+0x1ec>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	f003 020f 	and.w	r2, r3, #15
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	3326      	adds	r3, #38	; 0x26
 800947c:	2210      	movs	r2, #16
 800947e:	801a      	strh	r2, [r3, #0]
 8009480:	e035      	b.n	80094ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009482:	4b42      	ldr	r3, [pc, #264]	; (800958c <USBD_CDC_Init+0x1e4>)
 8009484:	7819      	ldrb	r1, [r3, #0]
 8009486:	2340      	movs	r3, #64	; 0x40
 8009488:	2202      	movs	r2, #2
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f005 f9d9 	bl	800e842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009490:	4b3e      	ldr	r3, [pc, #248]	; (800958c <USBD_CDC_Init+0x1e4>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	f003 020f 	and.w	r2, r3, #15
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	440b      	add	r3, r1
 80094a4:	3324      	adds	r3, #36	; 0x24
 80094a6:	2201      	movs	r2, #1
 80094a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094aa:	4b39      	ldr	r3, [pc, #228]	; (8009590 <USBD_CDC_Init+0x1e8>)
 80094ac:	7819      	ldrb	r1, [r3, #0]
 80094ae:	2340      	movs	r3, #64	; 0x40
 80094b0:	2202      	movs	r2, #2
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f005 f9c5 	bl	800e842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094b8:	4b35      	ldr	r3, [pc, #212]	; (8009590 <USBD_CDC_Init+0x1e8>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	f003 020f 	and.w	r2, r3, #15
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094d0:	2201      	movs	r2, #1
 80094d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80094d4:	4b2f      	ldr	r3, [pc, #188]	; (8009594 <USBD_CDC_Init+0x1ec>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 020f 	and.w	r2, r3, #15
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	440b      	add	r3, r1
 80094e8:	3326      	adds	r3, #38	; 0x26
 80094ea:	2210      	movs	r2, #16
 80094ec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094ee:	4b29      	ldr	r3, [pc, #164]	; (8009594 <USBD_CDC_Init+0x1ec>)
 80094f0:	7819      	ldrb	r1, [r3, #0]
 80094f2:	2308      	movs	r3, #8
 80094f4:	2203      	movs	r2, #3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f005 f9a3 	bl	800e842 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80094fc:	4b25      	ldr	r3, [pc, #148]	; (8009594 <USBD_CDC_Init+0x1ec>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	f003 020f 	and.w	r2, r3, #15
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	3324      	adds	r3, #36	; 0x24
 8009512:	2201      	movs	r2, #1
 8009514:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	33b0      	adds	r3, #176	; 0xb0
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800954c:	2302      	movs	r3, #2
 800954e:	e018      	b.n	8009582 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	7c1b      	ldrb	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009558:	4b0d      	ldr	r3, [pc, #52]	; (8009590 <USBD_CDC_Init+0x1e8>)
 800955a:	7819      	ldrb	r1, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f005 fa5a 	bl	800ea20 <USBD_LL_PrepareReceive>
 800956c:	e008      	b.n	8009580 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800956e:	4b08      	ldr	r3, [pc, #32]	; (8009590 <USBD_CDC_Init+0x1e8>)
 8009570:	7819      	ldrb	r1, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009578:	2340      	movs	r3, #64	; 0x40
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f005 fa50 	bl	800ea20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20000597 	.word	0x20000597
 8009590:	20000598 	.word	0x20000598
 8009594:	20000599 	.word	0x20000599

08009598 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80095a4:	4b3a      	ldr	r3, [pc, #232]	; (8009690 <USBD_CDC_DeInit+0xf8>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f005 f96f 	bl	800e88e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80095b0:	4b37      	ldr	r3, [pc, #220]	; (8009690 <USBD_CDC_DeInit+0xf8>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	f003 020f 	and.w	r2, r3, #15
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	3324      	adds	r3, #36	; 0x24
 80095c6:	2200      	movs	r2, #0
 80095c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80095ca:	4b32      	ldr	r3, [pc, #200]	; (8009694 <USBD_CDC_DeInit+0xfc>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f005 f95c 	bl	800e88e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80095d6:	4b2f      	ldr	r3, [pc, #188]	; (8009694 <USBD_CDC_DeInit+0xfc>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	f003 020f 	and.w	r2, r3, #15
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	440b      	add	r3, r1
 80095ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095ee:	2200      	movs	r2, #0
 80095f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80095f2:	4b29      	ldr	r3, [pc, #164]	; (8009698 <USBD_CDC_DeInit+0x100>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f005 f948 	bl	800e88e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80095fe:	4b26      	ldr	r3, [pc, #152]	; (8009698 <USBD_CDC_DeInit+0x100>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	f003 020f 	and.w	r2, r3, #15
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	3324      	adds	r3, #36	; 0x24
 8009614:	2200      	movs	r2, #0
 8009616:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009618:	4b1f      	ldr	r3, [pc, #124]	; (8009698 <USBD_CDC_DeInit+0x100>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	f003 020f 	and.w	r2, r3, #15
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	440b      	add	r3, r1
 800962c:	3326      	adds	r3, #38	; 0x26
 800962e:	2200      	movs	r2, #0
 8009630:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	32b0      	adds	r2, #176	; 0xb0
 800963c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01f      	beq.n	8009684 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	33b0      	adds	r3, #176	; 0xb0
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32b0      	adds	r2, #176	; 0xb0
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	4618      	mov	r0, r3
 8009668:	f005 fa1c 	bl	800eaa4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	32b0      	adds	r2, #176	; 0xb0
 8009676:	2100      	movs	r1, #0
 8009678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000597 	.word	0x20000597
 8009694:	20000598 	.word	0x20000598
 8009698:	20000599 	.word	0x20000599

0800969c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	32b0      	adds	r2, #176	; 0xb0
 80096b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e0bf      	b.n	800984c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d050      	beq.n	800977a <USBD_CDC_Setup+0xde>
 80096d8:	2b20      	cmp	r3, #32
 80096da:	f040 80af 	bne.w	800983c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	88db      	ldrh	r3, [r3, #6]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d03a      	beq.n	800975c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	b25b      	sxtb	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da1b      	bge.n	8009728 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	33b0      	adds	r3, #176	; 0xb0
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009706:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	88d2      	ldrh	r2, [r2, #6]
 800970c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	88db      	ldrh	r3, [r3, #6]
 8009712:	2b07      	cmp	r3, #7
 8009714:	bf28      	it	cs
 8009716:	2307      	movcs	r3, #7
 8009718:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	89fa      	ldrh	r2, [r7, #14]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 fd43 	bl	800b1ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009726:	e090      	b.n	800984a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	785a      	ldrb	r2, [r3, #1]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	88db      	ldrh	r3, [r3, #6]
 8009736:	2b3f      	cmp	r3, #63	; 0x3f
 8009738:	d803      	bhi.n	8009742 <USBD_CDC_Setup+0xa6>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	88db      	ldrh	r3, [r3, #6]
 800973e:	b2da      	uxtb	r2, r3
 8009740:	e000      	b.n	8009744 <USBD_CDC_Setup+0xa8>
 8009742:	2240      	movs	r2, #64	; 0x40
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800974a:	6939      	ldr	r1, [r7, #16]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009752:	461a      	mov	r2, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 fd55 	bl	800b204 <USBD_CtlPrepareRx>
      break;
 800975a:	e076      	b.n	800984a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	33b0      	adds	r3, #176	; 0xb0
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	7850      	ldrb	r0, [r2, #1]
 8009772:	2200      	movs	r2, #0
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	4798      	blx	r3
      break;
 8009778:	e067      	b.n	800984a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	2b0b      	cmp	r3, #11
 8009780:	d851      	bhi.n	8009826 <USBD_CDC_Setup+0x18a>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <USBD_CDC_Setup+0xec>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	080097b9 	.word	0x080097b9
 800978c:	08009835 	.word	0x08009835
 8009790:	08009827 	.word	0x08009827
 8009794:	08009827 	.word	0x08009827
 8009798:	08009827 	.word	0x08009827
 800979c:	08009827 	.word	0x08009827
 80097a0:	08009827 	.word	0x08009827
 80097a4:	08009827 	.word	0x08009827
 80097a8:	08009827 	.word	0x08009827
 80097ac:	08009827 	.word	0x08009827
 80097b0:	080097e3 	.word	0x080097e3
 80097b4:	0800980d 	.word	0x0800980d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d107      	bne.n	80097d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097c4:	f107 030a 	add.w	r3, r7, #10
 80097c8:	2202      	movs	r2, #2
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 fced 	bl	800b1ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097d2:	e032      	b.n	800983a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 fc77 	bl	800b0ca <USBD_CtlError>
            ret = USBD_FAIL;
 80097dc:	2303      	movs	r3, #3
 80097de:	75fb      	strb	r3, [r7, #23]
          break;
 80097e0:	e02b      	b.n	800983a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d107      	bne.n	80097fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80097ee:	f107 030d 	add.w	r3, r7, #13
 80097f2:	2201      	movs	r2, #1
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 fcd8 	bl	800b1ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097fc:	e01d      	b.n	800983a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 fc62 	bl	800b0ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009806:	2303      	movs	r3, #3
 8009808:	75fb      	strb	r3, [r7, #23]
          break;
 800980a:	e016      	b.n	800983a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b03      	cmp	r3, #3
 8009816:	d00f      	beq.n	8009838 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fc55 	bl	800b0ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009820:	2303      	movs	r3, #3
 8009822:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009824:	e008      	b.n	8009838 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 fc4e 	bl	800b0ca <USBD_CtlError>
          ret = USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	75fb      	strb	r3, [r7, #23]
          break;
 8009832:	e002      	b.n	800983a <USBD_CDC_Setup+0x19e>
          break;
 8009834:	bf00      	nop
 8009836:	e008      	b.n	800984a <USBD_CDC_Setup+0x1ae>
          break;
 8009838:	bf00      	nop
      }
      break;
 800983a:	e006      	b.n	800984a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fc43 	bl	800b0ca <USBD_CtlError>
      ret = USBD_FAIL;
 8009844:	2303      	movs	r3, #3
 8009846:	75fb      	strb	r3, [r7, #23]
      break;
 8009848:	bf00      	nop
  }

  return (uint8_t)ret;
 800984a:	7dfb      	ldrb	r3, [r7, #23]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009866:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	32b0      	adds	r2, #176	; 0xb0
 8009872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800987a:	2303      	movs	r3, #3
 800987c:	e065      	b.n	800994a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	32b0      	adds	r2, #176	; 0xb0
 8009888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	f003 020f 	and.w	r2, r3, #15
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4613      	mov	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	440b      	add	r3, r1
 80098a0:	3318      	adds	r3, #24
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d02f      	beq.n	8009908 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	f003 020f 	and.w	r2, r3, #15
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	3318      	adds	r3, #24
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	f003 010f 	and.w	r1, r3, #15
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	460b      	mov	r3, r1
 80098c8:	00db      	lsls	r3, r3, #3
 80098ca:	440b      	add	r3, r1
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4403      	add	r3, r0
 80098d0:	3348      	adds	r3, #72	; 0x48
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80098d8:	fb01 f303 	mul.w	r3, r1, r3
 80098dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d112      	bne.n	8009908 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	f003 020f 	and.w	r2, r3, #15
 80098e8:	6879      	ldr	r1, [r7, #4]
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	440b      	add	r3, r1
 80098f4:	3318      	adds	r3, #24
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80098fa:	78f9      	ldrb	r1, [r7, #3]
 80098fc:	2300      	movs	r3, #0
 80098fe:	2200      	movs	r2, #0
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f005 f86c 	bl	800e9de <USBD_LL_Transmit>
 8009906:	e01f      	b.n	8009948 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2200      	movs	r2, #0
 800990c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	33b0      	adds	r3, #176	; 0xb0
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d010      	beq.n	8009948 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	33b0      	adds	r3, #176	; 0xb0
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	32b0      	adds	r2, #176	; 0xb0
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	32b0      	adds	r2, #176	; 0xb0
 8009978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009980:	2303      	movs	r3, #3
 8009982:	e01a      	b.n	80099ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f005 f86a 	bl	800ea62 <USBD_LL_GetRxDataSize>
 800998e:	4602      	mov	r2, r0
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	33b0      	adds	r3, #176	; 0xb0
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80099b4:	4611      	mov	r1, r2
 80099b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	32b0      	adds	r2, #176	; 0xb0
 80099d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e025      	b.n	8009a30 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	33b0      	adds	r3, #176	; 0xb0
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d01a      	beq.n	8009a2e <USBD_CDC_EP0_RxReady+0x6c>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099fe:	2bff      	cmp	r3, #255	; 0xff
 8009a00:	d015      	beq.n	8009a2e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	33b0      	adds	r3, #176	; 0xb0
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a22:	b292      	uxth	r2, r2
 8009a24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	22ff      	movs	r2, #255	; 0xff
 8009a2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a40:	2182      	movs	r1, #130	; 0x82
 8009a42:	4818      	ldr	r0, [pc, #96]	; (8009aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a44:	f000 fd09 	bl	800a45a <USBD_GetEpDesc>
 8009a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	4815      	ldr	r0, [pc, #84]	; (8009aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a4e:	f000 fd04 	bl	800a45a <USBD_GetEpDesc>
 8009a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a54:	2181      	movs	r1, #129	; 0x81
 8009a56:	4813      	ldr	r0, [pc, #76]	; (8009aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a58:	f000 fcff 	bl	800a45a <USBD_GetEpDesc>
 8009a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2210      	movs	r2, #16
 8009a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a78:	711a      	strb	r2, [r3, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d006      	beq.n	8009a92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a8c:	711a      	strb	r2, [r3, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2243      	movs	r2, #67	; 0x43
 8009a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a98:	4b02      	ldr	r3, [pc, #8]	; (8009aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000554 	.word	0x20000554

08009aa8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ab0:	2182      	movs	r1, #130	; 0x82
 8009ab2:	4818      	ldr	r0, [pc, #96]	; (8009b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ab4:	f000 fcd1 	bl	800a45a <USBD_GetEpDesc>
 8009ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009aba:	2101      	movs	r1, #1
 8009abc:	4815      	ldr	r0, [pc, #84]	; (8009b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009abe:	f000 fccc 	bl	800a45a <USBD_GetEpDesc>
 8009ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ac4:	2181      	movs	r1, #129	; 0x81
 8009ac6:	4813      	ldr	r0, [pc, #76]	; (8009b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ac8:	f000 fcc7 	bl	800a45a <USBD_GetEpDesc>
 8009acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2210      	movs	r2, #16
 8009ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d006      	beq.n	8009aee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	711a      	strb	r2, [r3, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f042 0202 	orr.w	r2, r2, #2
 8009aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d006      	beq.n	8009b02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	711a      	strb	r2, [r3, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f042 0202 	orr.w	r2, r2, #2
 8009b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2243      	movs	r2, #67	; 0x43
 8009b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000554 	.word	0x20000554

08009b18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b20:	2182      	movs	r1, #130	; 0x82
 8009b22:	4818      	ldr	r0, [pc, #96]	; (8009b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b24:	f000 fc99 	bl	800a45a <USBD_GetEpDesc>
 8009b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	4815      	ldr	r0, [pc, #84]	; (8009b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b2e:	f000 fc94 	bl	800a45a <USBD_GetEpDesc>
 8009b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b34:	2181      	movs	r1, #129	; 0x81
 8009b36:	4813      	ldr	r0, [pc, #76]	; (8009b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b38:	f000 fc8f 	bl	800a45a <USBD_GetEpDesc>
 8009b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2210      	movs	r2, #16
 8009b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d006      	beq.n	8009b5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b58:	711a      	strb	r2, [r3, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d006      	beq.n	8009b72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b6c:	711a      	strb	r2, [r3, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2243      	movs	r2, #67	; 0x43
 8009b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b78:	4b02      	ldr	r3, [pc, #8]	; (8009b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000554 	.word	0x20000554

08009b88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	220a      	movs	r2, #10
 8009b94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b96:	4b03      	ldr	r3, [pc, #12]	; (8009ba4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	20000510 	.word	0x20000510

08009ba8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e009      	b.n	8009bd0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	33b0      	adds	r3, #176	; 0xb0
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	32b0      	adds	r2, #176	; 0xb0
 8009bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e008      	b.n	8009c14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	371c      	adds	r7, #28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	32b0      	adds	r2, #176	; 0xb0
 8009c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e004      	b.n	8009c4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
	...

08009c5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	32b0      	adds	r2, #176	; 0xb0
 8009c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	32b0      	adds	r2, #176	; 0xb0
 8009c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e018      	b.n	8009cbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	7c1b      	ldrb	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <USBD_CDC_ReceivePacket+0x68>)
 8009c94:	7819      	ldrb	r1, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f004 febd 	bl	800ea20 <USBD_LL_PrepareReceive>
 8009ca6:	e008      	b.n	8009cba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ca8:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <USBD_CDC_ReceivePacket+0x68>)
 8009caa:	7819      	ldrb	r1, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cb2:	2340      	movs	r3, #64	; 0x40
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f004 feb3 	bl	800ea20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20000598 	.word	0x20000598

08009cc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e01f      	b.n	8009d20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	79fa      	ldrb	r2, [r7, #7]
 8009d12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f004 fd2d 	bl	800e774 <USBD_LL_Init>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e025      	b.n	8009d8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	32ae      	adds	r2, #174	; 0xae
 8009d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00f      	beq.n	8009d7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	32ae      	adds	r2, #174	; 0xae
 8009d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6c:	f107 020e 	add.w	r2, r7, #14
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	4602      	mov	r2, r0
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f004 fd35 	bl	800e80c <USBD_LL_Start>
 8009da2:	4603      	mov	r3, r0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d009      	beq.n	8009df0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	4611      	mov	r1, r2
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	4798      	blx	r3
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	460b      	mov	r3, r1
 8009e04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	4611      	mov	r1, r2
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	4798      	blx	r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e20:	2303      	movs	r3, #3
 8009e22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 f908 	bl	800b056 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009e54:	461a      	mov	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e62:	f003 031f 	and.w	r3, r3, #31
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d01a      	beq.n	8009ea0 <USBD_LL_SetupStage+0x72>
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d822      	bhi.n	8009eb4 <USBD_LL_SetupStage+0x86>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <USBD_LL_SetupStage+0x4a>
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d00a      	beq.n	8009e8c <USBD_LL_SetupStage+0x5e>
 8009e76:	e01d      	b.n	8009eb4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fb5f 	bl	800a544 <USBD_StdDevReq>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73fb      	strb	r3, [r7, #15]
      break;
 8009e8a:	e020      	b.n	8009ece <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fbc7 	bl	800a628 <USBD_StdItfReq>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e9e:	e016      	b.n	8009ece <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fc29 	bl	800a700 <USBD_StdEPReq>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb2:	e00c      	b.n	8009ece <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009eba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f004 fd02 	bl	800e8cc <USBD_LL_StallEP>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ecc:	bf00      	nop
  }

  return ret;
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d16e      	bne.n	8009fce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ef6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	f040 8098 	bne.w	800a034 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	689a      	ldr	r2, [r3, #8]
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d913      	bls.n	8009f38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	1ad2      	subs	r2, r2, r3
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	4293      	cmp	r3, r2
 8009f28:	bf28      	it	cs
 8009f2a:	4613      	movcs	r3, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f001 f984 	bl	800b23e <USBD_CtlContinueRx>
 8009f36:	e07d      	b.n	800a034 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f3e:	f003 031f 	and.w	r3, r3, #31
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d014      	beq.n	8009f70 <USBD_LL_DataOutStage+0x98>
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d81d      	bhi.n	8009f86 <USBD_LL_DataOutStage+0xae>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <USBD_LL_DataOutStage+0x7c>
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d003      	beq.n	8009f5a <USBD_LL_DataOutStage+0x82>
 8009f52:	e018      	b.n	8009f86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	75bb      	strb	r3, [r7, #22]
            break;
 8009f58:	e018      	b.n	8009f8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	4619      	mov	r1, r3
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 fa5e 	bl	800a426 <USBD_CoreFindIF>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	75bb      	strb	r3, [r7, #22]
            break;
 8009f6e:	e00d      	b.n	8009f8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	4619      	mov	r1, r3
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fa60 	bl	800a440 <USBD_CoreFindEP>
 8009f80:	4603      	mov	r3, r0
 8009f82:	75bb      	strb	r3, [r7, #22]
            break;
 8009f84:	e002      	b.n	8009f8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	75bb      	strb	r3, [r7, #22]
            break;
 8009f8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f8c:	7dbb      	ldrb	r3, [r7, #22]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d119      	bne.n	8009fc6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d113      	bne.n	8009fc6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f9e:	7dba      	ldrb	r2, [r7, #22]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	32ae      	adds	r2, #174	; 0xae
 8009fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00b      	beq.n	8009fc6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009fae:	7dba      	ldrb	r2, [r7, #22]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009fb6:	7dba      	ldrb	r2, [r7, #22]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	32ae      	adds	r2, #174	; 0xae
 8009fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f001 f94a 	bl	800b260 <USBD_CtlSendStatus>
 8009fcc:	e032      	b.n	800a034 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fa31 	bl	800a440 <USBD_CoreFindEP>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fe2:	7dbb      	ldrb	r3, [r7, #22]
 8009fe4:	2bff      	cmp	r3, #255	; 0xff
 8009fe6:	d025      	beq.n	800a034 <USBD_LL_DataOutStage+0x15c>
 8009fe8:	7dbb      	ldrb	r3, [r7, #22]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d122      	bne.n	800a034 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d117      	bne.n	800a02a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009ffa:	7dba      	ldrb	r2, [r7, #22]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	32ae      	adds	r2, #174	; 0xae
 800a000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00f      	beq.n	800a02a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a00a:	7dba      	ldrb	r2, [r7, #22]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a012:	7dba      	ldrb	r2, [r7, #22]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	32ae      	adds	r2, #174	; 0xae
 800a018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	7afa      	ldrb	r2, [r7, #11]
 800a020:	4611      	mov	r1, r2
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	4798      	blx	r3
 800a026:	4603      	mov	r3, r0
 800a028:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	e000      	b.n	800a036 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b086      	sub	sp, #24
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	460b      	mov	r3, r1
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d16f      	bne.n	800a132 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3314      	adds	r3, #20
 800a056:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d15a      	bne.n	800a118 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	689a      	ldr	r2, [r3, #8]
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d914      	bls.n	800a098 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	1ad2      	subs	r2, r2, r3
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	461a      	mov	r2, r3
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f001 f8ac 	bl	800b1e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a08a:	2300      	movs	r3, #0
 800a08c:	2200      	movs	r2, #0
 800a08e:	2100      	movs	r1, #0
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f004 fcc5 	bl	800ea20 <USBD_LL_PrepareReceive>
 800a096:	e03f      	b.n	800a118 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d11c      	bne.n	800a0de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d316      	bcc.n	800a0de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d20f      	bcs.n	800a0de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f001 f88d 	bl	800b1e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f004 fca2 	bl	800ea20 <USBD_LL_PrepareReceive>
 800a0dc:	e01c      	b.n	800a118 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d10f      	bne.n	800a10a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d009      	beq.n	800a10a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a10a:	2180      	movs	r1, #128	; 0x80
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f004 fbdd 	bl	800e8cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f001 f8b7 	bl	800b286 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d03a      	beq.n	800a198 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fe42 	bl	8009dac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a130:	e032      	b.n	800a198 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a132:	7afb      	ldrb	r3, [r7, #11]
 800a134:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	4619      	mov	r1, r3
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f97f 	bl	800a440 <USBD_CoreFindEP>
 800a142:	4603      	mov	r3, r0
 800a144:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	2bff      	cmp	r3, #255	; 0xff
 800a14a:	d025      	beq.n	800a198 <USBD_LL_DataInStage+0x15a>
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d122      	bne.n	800a198 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d11c      	bne.n	800a198 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a15e:	7dfa      	ldrb	r2, [r7, #23]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	32ae      	adds	r2, #174	; 0xae
 800a164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d014      	beq.n	800a198 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a16e:	7dfa      	ldrb	r2, [r7, #23]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a176:	7dfa      	ldrb	r2, [r7, #23]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	32ae      	adds	r2, #174	; 0xae
 800a17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	7afa      	ldrb	r2, [r7, #11]
 800a184:	4611      	mov	r1, r2
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	4798      	blx	r3
 800a18a:	4603      	mov	r3, r0
 800a18c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a18e:	7dbb      	ldrb	r3, [r7, #22]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a194:	7dbb      	ldrb	r3, [r7, #22]
 800a196:	e000      	b.n	800a19a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d014      	beq.n	800a208 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00e      	beq.n	800a208 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	6852      	ldr	r2, [r2, #4]
 800a1f6:	b2d2      	uxtb	r2, r2
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	4798      	blx	r3
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a204:	2303      	movs	r3, #3
 800a206:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a208:	2340      	movs	r3, #64	; 0x40
 800a20a:	2200      	movs	r2, #0
 800a20c:	2100      	movs	r1, #0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f004 fb17 	bl	800e842 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2240      	movs	r2, #64	; 0x40
 800a220:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a224:	2340      	movs	r3, #64	; 0x40
 800a226:	2200      	movs	r2, #0
 800a228:	2180      	movs	r1, #128	; 0x80
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f004 fb09 	bl	800e842 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2240      	movs	r2, #64	; 0x40
 800a23a:	621a      	str	r2, [r3, #32]

  return ret;
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a246:	b480      	push	{r7}
 800a248:	b083      	sub	sp, #12
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	460b      	mov	r3, r1
 800a250:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a274:	b2da      	uxtb	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2204      	movs	r2, #4
 800a280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d106      	bne.n	800a2b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d110      	bne.n	800a2f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d005      	beq.n	800a2f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	32ae      	adds	r2, #174	; 0xae
 800a318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	e01c      	b.n	800a35e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d115      	bne.n	800a35c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	32ae      	adds	r2, #174	; 0xae
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00b      	beq.n	800a35c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	32ae      	adds	r2, #174	; 0xae
 800a34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	78fa      	ldrb	r2, [r7, #3]
 800a356:	4611      	mov	r1, r2
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	460b      	mov	r3, r1
 800a370:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	32ae      	adds	r2, #174	; 0xae
 800a37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a384:	2303      	movs	r3, #3
 800a386:	e01c      	b.n	800a3c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b03      	cmp	r3, #3
 800a392:	d115      	bne.n	800a3c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	32ae      	adds	r2, #174	; 0xae
 800a39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00b      	beq.n	800a3c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	32ae      	adds	r2, #174	; 0xae
 800a3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00e      	beq.n	800a41c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	6852      	ldr	r2, [r2, #4]
 800a40a:	b2d2      	uxtb	r2, r2
 800a40c:	4611      	mov	r1, r2
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	4798      	blx	r3
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	460b      	mov	r3, r1
 800a430:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a432:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a44c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a44e:	4618      	mov	r0, r3
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b086      	sub	sp, #24
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	460b      	mov	r3, r1
 800a464:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a46e:	2300      	movs	r3, #0
 800a470:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	885b      	ldrh	r3, [r3, #2]
 800a476:	b29a      	uxth	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	429a      	cmp	r2, r3
 800a480:	d920      	bls.n	800a4c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b29b      	uxth	r3, r3
 800a488:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a48a:	e013      	b.n	800a4b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a48c:	f107 030a 	add.w	r3, r7, #10
 800a490:	4619      	mov	r1, r3
 800a492:	6978      	ldr	r0, [r7, #20]
 800a494:	f000 f81b 	bl	800a4ce <USBD_GetNextDesc>
 800a498:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	785b      	ldrb	r3, [r3, #1]
 800a49e:	2b05      	cmp	r3, #5
 800a4a0:	d108      	bne.n	800a4b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	789b      	ldrb	r3, [r3, #2]
 800a4aa:	78fa      	ldrb	r2, [r7, #3]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d008      	beq.n	800a4c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	885b      	ldrh	r3, [r3, #2]
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	897b      	ldrh	r3, [r7, #10]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d8e5      	bhi.n	800a48c <USBD_GetEpDesc+0x32>
 800a4c0:	e000      	b.n	800a4c4 <USBD_GetEpDesc+0x6a>
          break;
 800a4c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a4c4:	693b      	ldr	r3, [r7, #16]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b085      	sub	sp, #20
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	881a      	ldrh	r2, [r3, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	4413      	add	r3, r2
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a508:	b480      	push	{r7}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	3301      	adds	r3, #1
 800a51e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a526:	8a3b      	ldrh	r3, [r7, #16]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	b21a      	sxth	r2, r3
 800a52c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a530:	4313      	orrs	r3, r2
 800a532:	b21b      	sxth	r3, r3
 800a534:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a536:	89fb      	ldrh	r3, [r7, #14]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	371c      	adds	r7, #28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a55a:	2b40      	cmp	r3, #64	; 0x40
 800a55c:	d005      	beq.n	800a56a <USBD_StdDevReq+0x26>
 800a55e:	2b40      	cmp	r3, #64	; 0x40
 800a560:	d857      	bhi.n	800a612 <USBD_StdDevReq+0xce>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00f      	beq.n	800a586 <USBD_StdDevReq+0x42>
 800a566:	2b20      	cmp	r3, #32
 800a568:	d153      	bne.n	800a612 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	32ae      	adds	r2, #174	; 0xae
 800a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	4798      	blx	r3
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
      break;
 800a584:	e04a      	b.n	800a61c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	2b09      	cmp	r3, #9
 800a58c:	d83b      	bhi.n	800a606 <USBD_StdDevReq+0xc2>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <USBD_StdDevReq+0x50>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5e9 	.word	0x0800a5e9
 800a598:	0800a5fd 	.word	0x0800a5fd
 800a59c:	0800a607 	.word	0x0800a607
 800a5a0:	0800a5f3 	.word	0x0800a5f3
 800a5a4:	0800a607 	.word	0x0800a607
 800a5a8:	0800a5c7 	.word	0x0800a5c7
 800a5ac:	0800a5bd 	.word	0x0800a5bd
 800a5b0:	0800a607 	.word	0x0800a607
 800a5b4:	0800a5df 	.word	0x0800a5df
 800a5b8:	0800a5d1 	.word	0x0800a5d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fa3c 	bl	800aa3c <USBD_GetDescriptor>
          break;
 800a5c4:	e024      	b.n	800a610 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fba1 	bl	800ad10 <USBD_SetAddress>
          break;
 800a5ce:	e01f      	b.n	800a610 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fbe0 	bl	800ad98 <USBD_SetConfig>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]
          break;
 800a5dc:	e018      	b.n	800a610 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fc83 	bl	800aeec <USBD_GetConfig>
          break;
 800a5e6:	e013      	b.n	800a610 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fcb4 	bl	800af58 <USBD_GetStatus>
          break;
 800a5f0:	e00e      	b.n	800a610 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fce3 	bl	800afc0 <USBD_SetFeature>
          break;
 800a5fa:	e009      	b.n	800a610 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fd07 	bl	800b012 <USBD_ClrFeature>
          break;
 800a604:	e004      	b.n	800a610 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fd5e 	bl	800b0ca <USBD_CtlError>
          break;
 800a60e:	bf00      	nop
      }
      break;
 800a610:	e004      	b.n	800a61c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fd58 	bl	800b0ca <USBD_CtlError>
      break;
 800a61a:	bf00      	nop
  }

  return ret;
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop

0800a628 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a63e:	2b40      	cmp	r3, #64	; 0x40
 800a640:	d005      	beq.n	800a64e <USBD_StdItfReq+0x26>
 800a642:	2b40      	cmp	r3, #64	; 0x40
 800a644:	d852      	bhi.n	800a6ec <USBD_StdItfReq+0xc4>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <USBD_StdItfReq+0x26>
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	d14e      	bne.n	800a6ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a654:	b2db      	uxtb	r3, r3
 800a656:	3b01      	subs	r3, #1
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d840      	bhi.n	800a6de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	889b      	ldrh	r3, [r3, #4]
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b01      	cmp	r3, #1
 800a664:	d836      	bhi.n	800a6d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	889b      	ldrh	r3, [r3, #4]
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	4619      	mov	r1, r3
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7ff fed9 	bl	800a426 <USBD_CoreFindIF>
 800a674:	4603      	mov	r3, r0
 800a676:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a678:	7bbb      	ldrb	r3, [r7, #14]
 800a67a:	2bff      	cmp	r3, #255	; 0xff
 800a67c:	d01d      	beq.n	800a6ba <USBD_StdItfReq+0x92>
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d11a      	bne.n	800a6ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a684:	7bba      	ldrb	r2, [r7, #14]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	32ae      	adds	r2, #174	; 0xae
 800a68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00f      	beq.n	800a6b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a694:	7bba      	ldrb	r2, [r7, #14]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a69c:	7bba      	ldrb	r2, [r7, #14]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	32ae      	adds	r2, #174	; 0xae
 800a6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	4798      	blx	r3
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a6b2:	e004      	b.n	800a6be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a6b8:	e001      	b.n	800a6be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	88db      	ldrh	r3, [r3, #6]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d110      	bne.n	800a6e8 <USBD_StdItfReq+0xc0>
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10d      	bne.n	800a6e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fdc7 	bl	800b260 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6d2:	e009      	b.n	800a6e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fcf7 	bl	800b0ca <USBD_CtlError>
          break;
 800a6dc:	e004      	b.n	800a6e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fcf2 	bl	800b0ca <USBD_CtlError>
          break;
 800a6e6:	e000      	b.n	800a6ea <USBD_StdItfReq+0xc2>
          break;
 800a6e8:	bf00      	nop
      }
      break;
 800a6ea:	e004      	b.n	800a6f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fceb 	bl	800b0ca <USBD_CtlError>
      break;
 800a6f4:	bf00      	nop
  }

  return ret;
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	889b      	ldrh	r3, [r3, #4]
 800a712:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a71c:	2b40      	cmp	r3, #64	; 0x40
 800a71e:	d007      	beq.n	800a730 <USBD_StdEPReq+0x30>
 800a720:	2b40      	cmp	r3, #64	; 0x40
 800a722:	f200 817f 	bhi.w	800aa24 <USBD_StdEPReq+0x324>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d02a      	beq.n	800a780 <USBD_StdEPReq+0x80>
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	f040 817a 	bne.w	800aa24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	4619      	mov	r1, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff fe83 	bl	800a440 <USBD_CoreFindEP>
 800a73a:	4603      	mov	r3, r0
 800a73c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a73e:	7b7b      	ldrb	r3, [r7, #13]
 800a740:	2bff      	cmp	r3, #255	; 0xff
 800a742:	f000 8174 	beq.w	800aa2e <USBD_StdEPReq+0x32e>
 800a746:	7b7b      	ldrb	r3, [r7, #13]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f040 8170 	bne.w	800aa2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a74e:	7b7a      	ldrb	r2, [r7, #13]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a756:	7b7a      	ldrb	r2, [r7, #13]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	32ae      	adds	r2, #174	; 0xae
 800a75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	f000 8163 	beq.w	800aa2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a768:	7b7a      	ldrb	r2, [r7, #13]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	32ae      	adds	r2, #174	; 0xae
 800a76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	4798      	blx	r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a77e:	e156      	b.n	800aa2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	785b      	ldrb	r3, [r3, #1]
 800a784:	2b03      	cmp	r3, #3
 800a786:	d008      	beq.n	800a79a <USBD_StdEPReq+0x9a>
 800a788:	2b03      	cmp	r3, #3
 800a78a:	f300 8145 	bgt.w	800aa18 <USBD_StdEPReq+0x318>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 809b 	beq.w	800a8ca <USBD_StdEPReq+0x1ca>
 800a794:	2b01      	cmp	r3, #1
 800a796:	d03c      	beq.n	800a812 <USBD_StdEPReq+0x112>
 800a798:	e13e      	b.n	800aa18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d002      	beq.n	800a7ac <USBD_StdEPReq+0xac>
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d016      	beq.n	800a7d8 <USBD_StdEPReq+0xd8>
 800a7aa:	e02c      	b.n	800a806 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00d      	beq.n	800a7ce <USBD_StdEPReq+0xce>
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	2b80      	cmp	r3, #128	; 0x80
 800a7b6:	d00a      	beq.n	800a7ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f004 f885 	bl	800e8cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7c2:	2180      	movs	r1, #128	; 0x80
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f004 f881 	bl	800e8cc <USBD_LL_StallEP>
 800a7ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7cc:	e020      	b.n	800a810 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fc7a 	bl	800b0ca <USBD_CtlError>
              break;
 800a7d6:	e01b      	b.n	800a810 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	885b      	ldrh	r3, [r3, #2]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10e      	bne.n	800a7fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7e0:	7bbb      	ldrb	r3, [r7, #14]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00b      	beq.n	800a7fe <USBD_StdEPReq+0xfe>
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	2b80      	cmp	r3, #128	; 0x80
 800a7ea:	d008      	beq.n	800a7fe <USBD_StdEPReq+0xfe>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	88db      	ldrh	r3, [r3, #6]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d104      	bne.n	800a7fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f004 f867 	bl	800e8cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fd2e 	bl	800b260 <USBD_CtlSendStatus>

              break;
 800a804:	e004      	b.n	800a810 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fc5e 	bl	800b0ca <USBD_CtlError>
              break;
 800a80e:	bf00      	nop
          }
          break;
 800a810:	e107      	b.n	800aa22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d002      	beq.n	800a824 <USBD_StdEPReq+0x124>
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d016      	beq.n	800a850 <USBD_StdEPReq+0x150>
 800a822:	e04b      	b.n	800a8bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00d      	beq.n	800a846 <USBD_StdEPReq+0x146>
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	2b80      	cmp	r3, #128	; 0x80
 800a82e:	d00a      	beq.n	800a846 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a830:	7bbb      	ldrb	r3, [r7, #14]
 800a832:	4619      	mov	r1, r3
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f004 f849 	bl	800e8cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a83a:	2180      	movs	r1, #128	; 0x80
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f004 f845 	bl	800e8cc <USBD_LL_StallEP>
 800a842:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a844:	e040      	b.n	800a8c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fc3e 	bl	800b0ca <USBD_CtlError>
              break;
 800a84e:	e03b      	b.n	800a8c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	885b      	ldrh	r3, [r3, #2]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d136      	bne.n	800a8c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f004 f84f 	bl	800e90a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fcf7 	bl	800b260 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff fde2 	bl	800a440 <USBD_CoreFindEP>
 800a87c:	4603      	mov	r3, r0
 800a87e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a880:	7b7b      	ldrb	r3, [r7, #13]
 800a882:	2bff      	cmp	r3, #255	; 0xff
 800a884:	d01f      	beq.n	800a8c6 <USBD_StdEPReq+0x1c6>
 800a886:	7b7b      	ldrb	r3, [r7, #13]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d11c      	bne.n	800a8c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a88c:	7b7a      	ldrb	r2, [r7, #13]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a894:	7b7a      	ldrb	r2, [r7, #13]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	32ae      	adds	r2, #174	; 0xae
 800a89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d010      	beq.n	800a8c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a8a4:	7b7a      	ldrb	r2, [r7, #13]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	32ae      	adds	r2, #174	; 0xae
 800a8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	4798      	blx	r3
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a8ba:	e004      	b.n	800a8c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fc03 	bl	800b0ca <USBD_CtlError>
              break;
 800a8c4:	e000      	b.n	800a8c8 <USBD_StdEPReq+0x1c8>
              break;
 800a8c6:	bf00      	nop
          }
          break;
 800a8c8:	e0ab      	b.n	800aa22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d002      	beq.n	800a8dc <USBD_StdEPReq+0x1dc>
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d032      	beq.n	800a940 <USBD_StdEPReq+0x240>
 800a8da:	e097      	b.n	800aa0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <USBD_StdEPReq+0x1f2>
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	2b80      	cmp	r3, #128	; 0x80
 800a8e6:	d004      	beq.n	800a8f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fbed 	bl	800b0ca <USBD_CtlError>
                break;
 800a8f0:	e091      	b.n	800aa16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	da0b      	bge.n	800a912 <USBD_StdEPReq+0x212>
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
 800a8fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	3310      	adds	r3, #16
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	3304      	adds	r3, #4
 800a910:	e00b      	b.n	800a92a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	4413      	add	r3, r2
 800a928:	3304      	adds	r3, #4
 800a92a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2202      	movs	r2, #2
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fc37 	bl	800b1ac <USBD_CtlSendData>
              break;
 800a93e:	e06a      	b.n	800aa16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a944:	2b00      	cmp	r3, #0
 800a946:	da11      	bge.n	800a96c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	f003 020f 	and.w	r2, r3, #15
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	3324      	adds	r3, #36	; 0x24
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d117      	bne.n	800a992 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fbb0 	bl	800b0ca <USBD_CtlError>
                  break;
 800a96a:	e054      	b.n	800aa16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	f003 020f 	and.w	r2, r3, #15
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	440b      	add	r3, r1
 800a97e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d104      	bne.n	800a992 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fb9d 	bl	800b0ca <USBD_CtlError>
                  break;
 800a990:	e041      	b.n	800aa16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da0b      	bge.n	800a9b2 <USBD_StdEPReq+0x2b2>
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	3310      	adds	r3, #16
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	e00b      	b.n	800a9ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <USBD_StdEPReq+0x2d8>
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b80      	cmp	r3, #128	; 0x80
 800a9d6:	d103      	bne.n	800a9e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	e00e      	b.n	800a9fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f003 ffaf 	bl	800e948 <USBD_LL_IsStallEP>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d003      	beq.n	800a9f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	e002      	b.n	800a9fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2202      	movs	r2, #2
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fbd1 	bl	800b1ac <USBD_CtlSendData>
              break;
 800aa0a:	e004      	b.n	800aa16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fb5b 	bl	800b0ca <USBD_CtlError>
              break;
 800aa14:	bf00      	nop
          }
          break;
 800aa16:	e004      	b.n	800aa22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fb55 	bl	800b0ca <USBD_CtlError>
          break;
 800aa20:	bf00      	nop
      }
      break;
 800aa22:	e005      	b.n	800aa30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fb4f 	bl	800b0ca <USBD_CtlError>
      break;
 800aa2c:	e000      	b.n	800aa30 <USBD_StdEPReq+0x330>
      break;
 800aa2e:	bf00      	nop
  }

  return ret;
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	885b      	ldrh	r3, [r3, #2]
 800aa56:	0a1b      	lsrs	r3, r3, #8
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	2b06      	cmp	r3, #6
 800aa5e:	f200 8128 	bhi.w	800acb2 <USBD_GetDescriptor+0x276>
 800aa62:	a201      	add	r2, pc, #4	; (adr r2, 800aa68 <USBD_GetDescriptor+0x2c>)
 800aa64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa68:	0800aa85 	.word	0x0800aa85
 800aa6c:	0800aa9d 	.word	0x0800aa9d
 800aa70:	0800aadd 	.word	0x0800aadd
 800aa74:	0800acb3 	.word	0x0800acb3
 800aa78:	0800acb3 	.word	0x0800acb3
 800aa7c:	0800ac53 	.word	0x0800ac53
 800aa80:	0800ac7f 	.word	0x0800ac7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	7c12      	ldrb	r2, [r2, #16]
 800aa90:	f107 0108 	add.w	r1, r7, #8
 800aa94:	4610      	mov	r0, r2
 800aa96:	4798      	blx	r3
 800aa98:	60f8      	str	r0, [r7, #12]
      break;
 800aa9a:	e112      	b.n	800acc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	7c1b      	ldrb	r3, [r3, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10d      	bne.n	800aac0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaac:	f107 0208 	add.w	r2, r7, #8
 800aab0:	4610      	mov	r0, r2
 800aab2:	4798      	blx	r3
 800aab4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	2202      	movs	r2, #2
 800aabc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aabe:	e100      	b.n	800acc2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	f107 0208 	add.w	r2, r7, #8
 800aacc:	4610      	mov	r0, r2
 800aace:	4798      	blx	r3
 800aad0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3301      	adds	r3, #1
 800aad6:	2202      	movs	r2, #2
 800aad8:	701a      	strb	r2, [r3, #0]
      break;
 800aada:	e0f2      	b.n	800acc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	885b      	ldrh	r3, [r3, #2]
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b05      	cmp	r3, #5
 800aae4:	f200 80ac 	bhi.w	800ac40 <USBD_GetDescriptor+0x204>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <USBD_GetDescriptor+0xb4>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab09 	.word	0x0800ab09
 800aaf4:	0800ab3d 	.word	0x0800ab3d
 800aaf8:	0800ab71 	.word	0x0800ab71
 800aafc:	0800aba5 	.word	0x0800aba5
 800ab00:	0800abd9 	.word	0x0800abd9
 800ab04:	0800ac0d 	.word	0x0800ac0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	7c12      	ldrb	r2, [r2, #16]
 800ab20:	f107 0108 	add.w	r1, r7, #8
 800ab24:	4610      	mov	r0, r2
 800ab26:	4798      	blx	r3
 800ab28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab2a:	e091      	b.n	800ac50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 facb 	bl	800b0ca <USBD_CtlError>
            err++;
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	3301      	adds	r3, #1
 800ab38:	72fb      	strb	r3, [r7, #11]
          break;
 800ab3a:	e089      	b.n	800ac50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00b      	beq.n	800ab60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	7c12      	ldrb	r2, [r2, #16]
 800ab54:	f107 0108 	add.w	r1, r7, #8
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4798      	blx	r3
 800ab5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab5e:	e077      	b.n	800ac50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fab1 	bl	800b0ca <USBD_CtlError>
            err++;
 800ab68:	7afb      	ldrb	r3, [r7, #11]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab6e:	e06f      	b.n	800ac50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00b      	beq.n	800ab94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c12      	ldrb	r2, [r2, #16]
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab92:	e05d      	b.n	800ac50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fa97 	bl	800b0ca <USBD_CtlError>
            err++;
 800ab9c:	7afb      	ldrb	r3, [r7, #11]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	72fb      	strb	r3, [r7, #11]
          break;
 800aba2:	e055      	b.n	800ac50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00b      	beq.n	800abc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	7c12      	ldrb	r2, [r2, #16]
 800abbc:	f107 0108 	add.w	r1, r7, #8
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
 800abc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abc6:	e043      	b.n	800ac50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fa7d 	bl	800b0ca <USBD_CtlError>
            err++;
 800abd0:	7afb      	ldrb	r3, [r7, #11]
 800abd2:	3301      	adds	r3, #1
 800abd4:	72fb      	strb	r3, [r7, #11]
          break;
 800abd6:	e03b      	b.n	800ac50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	7c12      	ldrb	r2, [r2, #16]
 800abf0:	f107 0108 	add.w	r1, r7, #8
 800abf4:	4610      	mov	r0, r2
 800abf6:	4798      	blx	r3
 800abf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abfa:	e029      	b.n	800ac50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa63 	bl	800b0ca <USBD_CtlError>
            err++;
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	3301      	adds	r3, #1
 800ac08:	72fb      	strb	r3, [r7, #11]
          break;
 800ac0a:	e021      	b.n	800ac50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00b      	beq.n	800ac30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7c12      	ldrb	r2, [r2, #16]
 800ac24:	f107 0108 	add.w	r1, r7, #8
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
 800ac2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac2e:	e00f      	b.n	800ac50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fa49 	bl	800b0ca <USBD_CtlError>
            err++;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac3e:	e007      	b.n	800ac50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fa41 	bl	800b0ca <USBD_CtlError>
          err++;
 800ac48:	7afb      	ldrb	r3, [r7, #11]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac4e:	bf00      	nop
      }
      break;
 800ac50:	e037      	b.n	800acc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	7c1b      	ldrb	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d109      	bne.n	800ac6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac62:	f107 0208 	add.w	r2, r7, #8
 800ac66:	4610      	mov	r0, r2
 800ac68:	4798      	blx	r3
 800ac6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac6c:	e029      	b.n	800acc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fa2a 	bl	800b0ca <USBD_CtlError>
        err++;
 800ac76:	7afb      	ldrb	r3, [r7, #11]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac7c:	e021      	b.n	800acc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	7c1b      	ldrb	r3, [r3, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10d      	bne.n	800aca2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8e:	f107 0208 	add.w	r2, r7, #8
 800ac92:	4610      	mov	r0, r2
 800ac94:	4798      	blx	r3
 800ac96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	2207      	movs	r2, #7
 800ac9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aca0:	e00f      	b.n	800acc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fa10 	bl	800b0ca <USBD_CtlError>
        err++;
 800acaa:	7afb      	ldrb	r3, [r7, #11]
 800acac:	3301      	adds	r3, #1
 800acae:	72fb      	strb	r3, [r7, #11]
      break;
 800acb0:	e007      	b.n	800acc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fa08 	bl	800b0ca <USBD_CtlError>
      err++;
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	3301      	adds	r3, #1
 800acbe:	72fb      	strb	r3, [r7, #11]
      break;
 800acc0:	bf00      	nop
  }

  if (err != 0U)
 800acc2:	7afb      	ldrb	r3, [r7, #11]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d11e      	bne.n	800ad06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	88db      	ldrh	r3, [r3, #6]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d016      	beq.n	800acfe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800acd0:	893b      	ldrh	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00e      	beq.n	800acf4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	88da      	ldrh	r2, [r3, #6]
 800acda:	893b      	ldrh	r3, [r7, #8]
 800acdc:	4293      	cmp	r3, r2
 800acde:	bf28      	it	cs
 800ace0:	4613      	movcs	r3, r2
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ace6:	893b      	ldrh	r3, [r7, #8]
 800ace8:	461a      	mov	r2, r3
 800acea:	68f9      	ldr	r1, [r7, #12]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fa5d 	bl	800b1ac <USBD_CtlSendData>
 800acf2:	e009      	b.n	800ad08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f9e7 	bl	800b0ca <USBD_CtlError>
 800acfc:	e004      	b.n	800ad08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 faae 	bl	800b260 <USBD_CtlSendStatus>
 800ad04:	e000      	b.n	800ad08 <USBD_GetDescriptor+0x2cc>
    return;
 800ad06:	bf00      	nop
  }
}
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop

0800ad10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	889b      	ldrh	r3, [r3, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d131      	bne.n	800ad86 <USBD_SetAddress+0x76>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	88db      	ldrh	r3, [r3, #6]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d12d      	bne.n	800ad86 <USBD_SetAddress+0x76>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	885b      	ldrh	r3, [r3, #2]
 800ad2e:	2b7f      	cmp	r3, #127	; 0x7f
 800ad30:	d829      	bhi.n	800ad86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	885b      	ldrh	r3, [r3, #2]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d104      	bne.n	800ad54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f9bc 	bl	800b0ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad52:	e01d      	b.n	800ad90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	7bfa      	ldrb	r2, [r7, #15]
 800ad58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f003 fe1d 	bl	800e9a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa7a 	bl	800b260 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d004      	beq.n	800ad7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2202      	movs	r2, #2
 800ad76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad7a:	e009      	b.n	800ad90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad84:	e004      	b.n	800ad90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f99e 	bl	800b0ca <USBD_CtlError>
  }
}
 800ad8e:	bf00      	nop
 800ad90:	bf00      	nop
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	885b      	ldrh	r3, [r3, #2]
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	4b4e      	ldr	r3, [pc, #312]	; (800aee8 <USBD_SetConfig+0x150>)
 800adae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adb0:	4b4d      	ldr	r3, [pc, #308]	; (800aee8 <USBD_SetConfig+0x150>)
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d905      	bls.n	800adc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f985 	bl	800b0ca <USBD_CtlError>
    return USBD_FAIL;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e08c      	b.n	800aede <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d002      	beq.n	800add6 <USBD_SetConfig+0x3e>
 800add0:	2b03      	cmp	r3, #3
 800add2:	d029      	beq.n	800ae28 <USBD_SetConfig+0x90>
 800add4:	e075      	b.n	800aec2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800add6:	4b44      	ldr	r3, [pc, #272]	; (800aee8 <USBD_SetConfig+0x150>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d020      	beq.n	800ae20 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800adde:	4b42      	ldr	r3, [pc, #264]	; (800aee8 <USBD_SetConfig+0x150>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ade8:	4b3f      	ldr	r3, [pc, #252]	; (800aee8 <USBD_SetConfig+0x150>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7fe ffe7 	bl	8009dc2 <USBD_SetClassConfig>
 800adf4:	4603      	mov	r3, r0
 800adf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d008      	beq.n	800ae10 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f962 	bl	800b0ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae0e:	e065      	b.n	800aedc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fa25 	bl	800b260 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2203      	movs	r2, #3
 800ae1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae1e:	e05d      	b.n	800aedc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fa1d 	bl	800b260 <USBD_CtlSendStatus>
      break;
 800ae26:	e059      	b.n	800aedc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae28:	4b2f      	ldr	r3, [pc, #188]	; (800aee8 <USBD_SetConfig+0x150>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d112      	bne.n	800ae56 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2202      	movs	r2, #2
 800ae34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae38:	4b2b      	ldr	r3, [pc, #172]	; (800aee8 <USBD_SetConfig+0x150>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae42:	4b29      	ldr	r3, [pc, #164]	; (800aee8 <USBD_SetConfig+0x150>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7fe ffd6 	bl	8009dfa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fa06 	bl	800b260 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae54:	e042      	b.n	800aedc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae56:	4b24      	ldr	r3, [pc, #144]	; (800aee8 <USBD_SetConfig+0x150>)
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d02a      	beq.n	800aeba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7fe ffc4 	bl	8009dfa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae72:	4b1d      	ldr	r3, [pc, #116]	; (800aee8 <USBD_SetConfig+0x150>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	461a      	mov	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae7c:	4b1a      	ldr	r3, [pc, #104]	; (800aee8 <USBD_SetConfig+0x150>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7fe ff9d 	bl	8009dc2 <USBD_SetClassConfig>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00f      	beq.n	800aeb2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f918 	bl	800b0ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fe ffa9 	bl	8009dfa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aeb0:	e014      	b.n	800aedc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f9d4 	bl	800b260 <USBD_CtlSendStatus>
      break;
 800aeb8:	e010      	b.n	800aedc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f9d0 	bl	800b260 <USBD_CtlSendStatus>
      break;
 800aec0:	e00c      	b.n	800aedc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f900 	bl	800b0ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aeca:	4b07      	ldr	r3, [pc, #28]	; (800aee8 <USBD_SetConfig+0x150>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7fe ff92 	bl	8009dfa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aed6:	2303      	movs	r3, #3
 800aed8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeda:	bf00      	nop
  }

  return ret;
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20000884 	.word	0x20000884

0800aeec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d004      	beq.n	800af08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f8e2 	bl	800b0ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af06:	e023      	b.n	800af50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b02      	cmp	r3, #2
 800af12:	dc02      	bgt.n	800af1a <USBD_GetConfig+0x2e>
 800af14:	2b00      	cmp	r3, #0
 800af16:	dc03      	bgt.n	800af20 <USBD_GetConfig+0x34>
 800af18:	e015      	b.n	800af46 <USBD_GetConfig+0x5a>
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d00b      	beq.n	800af36 <USBD_GetConfig+0x4a>
 800af1e:	e012      	b.n	800af46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3308      	adds	r3, #8
 800af2a:	2201      	movs	r2, #1
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f93c 	bl	800b1ac <USBD_CtlSendData>
        break;
 800af34:	e00c      	b.n	800af50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	3304      	adds	r3, #4
 800af3a:	2201      	movs	r2, #1
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f934 	bl	800b1ac <USBD_CtlSendData>
        break;
 800af44:	e004      	b.n	800af50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f8be 	bl	800b0ca <USBD_CtlError>
        break;
 800af4e:	bf00      	nop
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	3b01      	subs	r3, #1
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d81e      	bhi.n	800afae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	88db      	ldrh	r3, [r3, #6]
 800af74:	2b02      	cmp	r3, #2
 800af76:	d004      	beq.n	800af82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f8a5 	bl	800b0ca <USBD_CtlError>
        break;
 800af80:	e01a      	b.n	800afb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	f043 0202 	orr.w	r2, r3, #2
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	330c      	adds	r3, #12
 800afa2:	2202      	movs	r2, #2
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f900 	bl	800b1ac <USBD_CtlSendData>
      break;
 800afac:	e004      	b.n	800afb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f88a 	bl	800b0ca <USBD_CtlError>
      break;
 800afb6:	bf00      	nop
  }
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	885b      	ldrh	r3, [r3, #2]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d107      	bne.n	800afe2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2201      	movs	r2, #1
 800afd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f940 	bl	800b260 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800afe0:	e013      	b.n	800b00a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	885b      	ldrh	r3, [r3, #2]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d10b      	bne.n	800b002 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	889b      	ldrh	r3, [r3, #4]
 800afee:	0a1b      	lsrs	r3, r3, #8
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f930 	bl	800b260 <USBD_CtlSendStatus>
}
 800b000:	e003      	b.n	800b00a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f860 	bl	800b0ca <USBD_CtlError>
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	b2db      	uxtb	r3, r3
 800b024:	3b01      	subs	r3, #1
 800b026:	2b02      	cmp	r3, #2
 800b028:	d80b      	bhi.n	800b042 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	885b      	ldrh	r3, [r3, #2]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d10c      	bne.n	800b04c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f910 	bl	800b260 <USBD_CtlSendStatus>
      }
      break;
 800b040:	e004      	b.n	800b04c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f840 	bl	800b0ca <USBD_CtlError>
      break;
 800b04a:	e000      	b.n	800b04e <USBD_ClrFeature+0x3c>
      break;
 800b04c:	bf00      	nop
  }
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	781a      	ldrb	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	3301      	adds	r3, #1
 800b070:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	781a      	ldrb	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3301      	adds	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fa41 	bl	800a508 <SWAPBYTE>
 800b086:	4603      	mov	r3, r0
 800b088:	461a      	mov	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3301      	adds	r3, #1
 800b092:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3301      	adds	r3, #1
 800b098:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7ff fa34 	bl	800a508 <SWAPBYTE>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff fa27 	bl	800a508 <SWAPBYTE>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	461a      	mov	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	80da      	strh	r2, [r3, #6]
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0d4:	2180      	movs	r1, #128	; 0x80
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f003 fbf8 	bl	800e8cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0dc:	2100      	movs	r1, #0
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f003 fbf4 	bl	800e8cc <USBD_LL_StallEP>
}
 800b0e4:	bf00      	nop
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d036      	beq.n	800b170 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b106:	6938      	ldr	r0, [r7, #16]
 800b108:	f000 f836 	bl	800b178 <USBD_GetLen>
 800b10c:	4603      	mov	r3, r0
 800b10e:	3301      	adds	r3, #1
 800b110:	b29b      	uxth	r3, r3
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	b29a      	uxth	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	4413      	add	r3, r2
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	7812      	ldrb	r2, [r2, #0]
 800b124:	701a      	strb	r2, [r3, #0]
  idx++;
 800b126:	7dfb      	ldrb	r3, [r7, #23]
 800b128:	3301      	adds	r3, #1
 800b12a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	4413      	add	r3, r2
 800b132:	2203      	movs	r2, #3
 800b134:	701a      	strb	r2, [r3, #0]
  idx++;
 800b136:	7dfb      	ldrb	r3, [r7, #23]
 800b138:	3301      	adds	r3, #1
 800b13a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b13c:	e013      	b.n	800b166 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	4413      	add	r3, r2
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	7812      	ldrb	r2, [r2, #0]
 800b148:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	3301      	adds	r3, #1
 800b14e:	613b      	str	r3, [r7, #16]
    idx++;
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	3301      	adds	r3, #1
 800b154:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	4413      	add	r3, r2
 800b15c:	2200      	movs	r2, #0
 800b15e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b160:	7dfb      	ldrb	r3, [r7, #23]
 800b162:	3301      	adds	r3, #1
 800b164:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1e7      	bne.n	800b13e <USBD_GetString+0x52>
 800b16e:	e000      	b.n	800b172 <USBD_GetString+0x86>
    return;
 800b170:	bf00      	nop
  }
}
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b180:	2300      	movs	r3, #0
 800b182:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b188:	e005      	b.n	800b196 <USBD_GetLen+0x1e>
  {
    len++;
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
 800b18c:	3301      	adds	r3, #1
 800b18e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	3301      	adds	r3, #1
 800b194:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1f5      	bne.n	800b18a <USBD_GetLen+0x12>
  }

  return len;
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f003 fc03 	bl	800e9de <USBD_LL_Transmit>

  return USBD_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f003 fbf2 	bl	800e9de <USBD_LL_Transmit>

  return USBD_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2203      	movs	r2, #3
 800b214:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	2100      	movs	r1, #0
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f003 fbf6 	bl	800ea20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	2100      	movs	r1, #0
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f003 fbe5 	bl	800ea20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2204      	movs	r2, #4
 800b26c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b270:	2300      	movs	r3, #0
 800b272:	2200      	movs	r2, #0
 800b274:	2100      	movs	r1, #0
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f003 fbb1 	bl	800e9de <USBD_LL_Transmit>

  return USBD_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2205      	movs	r2, #5
 800b292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b296:	2300      	movs	r3, #0
 800b298:	2200      	movs	r2, #0
 800b29a:	2100      	movs	r1, #0
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f003 fbbf 	bl	800ea20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <__NVIC_SetPriority>:
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	6039      	str	r1, [r7, #0]
 800b2b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b2b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	db0a      	blt.n	800b2d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	490c      	ldr	r1, [pc, #48]	; (800b2f8 <__NVIC_SetPriority+0x4c>)
 800b2c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2ca:	0112      	lsls	r2, r2, #4
 800b2cc:	b2d2      	uxtb	r2, r2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b2d4:	e00a      	b.n	800b2ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	4908      	ldr	r1, [pc, #32]	; (800b2fc <__NVIC_SetPriority+0x50>)
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	f003 030f 	and.w	r3, r3, #15
 800b2e2:	3b04      	subs	r3, #4
 800b2e4:	0112      	lsls	r2, r2, #4
 800b2e6:	b2d2      	uxtb	r2, r2
 800b2e8:	440b      	add	r3, r1
 800b2ea:	761a      	strb	r2, [r3, #24]
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	e000e100 	.word	0xe000e100
 800b2fc:	e000ed00 	.word	0xe000ed00

0800b300 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <SysTick_Handler+0x1c>)
 800b306:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b308:	f001 feb2 	bl	800d070 <xTaskGetSchedulerState>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d001      	beq.n	800b316 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b312:	f002 fc99 	bl	800dc48 <xPortSysTickHandler>
  }
}
 800b316:	bf00      	nop
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	e000e010 	.word	0xe000e010

0800b320 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b324:	2100      	movs	r1, #0
 800b326:	f06f 0004 	mvn.w	r0, #4
 800b32a:	f7ff ffbf 	bl	800b2ac <__NVIC_SetPriority>
#endif
}
 800b32e:	bf00      	nop
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b33a:	f3ef 8305 	mrs	r3, IPSR
 800b33e:	603b      	str	r3, [r7, #0]
  return(result);
 800b340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b346:	f06f 0305 	mvn.w	r3, #5
 800b34a:	607b      	str	r3, [r7, #4]
 800b34c:	e00c      	b.n	800b368 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b34e:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <osKernelInitialize+0x44>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d105      	bne.n	800b362 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b356:	4b08      	ldr	r3, [pc, #32]	; (800b378 <osKernelInitialize+0x44>)
 800b358:	2201      	movs	r2, #1
 800b35a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	607b      	str	r3, [r7, #4]
 800b360:	e002      	b.n	800b368 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b362:	f04f 33ff 	mov.w	r3, #4294967295
 800b366:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b368:	687b      	ldr	r3, [r7, #4]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	20000888 	.word	0x20000888

0800b37c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b382:	f3ef 8305 	mrs	r3, IPSR
 800b386:	603b      	str	r3, [r7, #0]
  return(result);
 800b388:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d003      	beq.n	800b396 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b38e:	f06f 0305 	mvn.w	r3, #5
 800b392:	607b      	str	r3, [r7, #4]
 800b394:	e010      	b.n	800b3b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b396:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <osKernelStart+0x48>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d109      	bne.n	800b3b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b39e:	f7ff ffbf 	bl	800b320 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <osKernelStart+0x48>)
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b3a8:	f001 fa1a 	bl	800c7e0 <vTaskStartScheduler>
      stat = osOK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	607b      	str	r3, [r7, #4]
 800b3b0:	e002      	b.n	800b3b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3b8:	687b      	ldr	r3, [r7, #4]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000888 	.word	0x20000888

0800b3c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08e      	sub	sp, #56	; 0x38
 800b3cc:	af04      	add	r7, sp, #16
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3d8:	f3ef 8305 	mrs	r3, IPSR
 800b3dc:	617b      	str	r3, [r7, #20]
  return(result);
 800b3de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d17f      	bne.n	800b4e4 <osThreadNew+0x11c>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d07c      	beq.n	800b4e4 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b3ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3ee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b3f0:	2318      	movs	r3, #24
 800b3f2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d045      	beq.n	800b490 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <osThreadNew+0x4a>
        name = attr->name;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d008      	beq.n	800b438 <osThreadNew+0x70>
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	2b38      	cmp	r3, #56	; 0x38
 800b42a:	d805      	bhi.n	800b438 <osThreadNew+0x70>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <osThreadNew+0x74>
        return (NULL);
 800b438:	2300      	movs	r3, #0
 800b43a:	e054      	b.n	800b4e6 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d003      	beq.n	800b44c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	089b      	lsrs	r3, r3, #2
 800b44a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00e      	beq.n	800b472 <osThreadNew+0xaa>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	2b6b      	cmp	r3, #107	; 0x6b
 800b45a:	d90a      	bls.n	800b472 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b460:	2b00      	cmp	r3, #0
 800b462:	d006      	beq.n	800b472 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <osThreadNew+0xaa>
        mem = 1;
 800b46c:	2301      	movs	r3, #1
 800b46e:	61bb      	str	r3, [r7, #24]
 800b470:	e010      	b.n	800b494 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10c      	bne.n	800b494 <osThreadNew+0xcc>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d108      	bne.n	800b494 <osThreadNew+0xcc>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d104      	bne.n	800b494 <osThreadNew+0xcc>
          mem = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	61bb      	str	r3, [r7, #24]
 800b48e:	e001      	b.n	800b494 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d110      	bne.n	800b4bc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b4a2:	9202      	str	r2, [sp, #8]
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	6a3a      	ldr	r2, [r7, #32]
 800b4ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 feb9 	bl	800c228 <xTaskCreateStatic>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	613b      	str	r3, [r7, #16]
 800b4ba:	e013      	b.n	800b4e4 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d110      	bne.n	800b4e4 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	f107 0310 	add.w	r3, r7, #16
 800b4ca:	9301      	str	r3, [sp, #4]
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 ff04 	bl	800c2e2 <xTaskCreate>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d001      	beq.n	800b4e4 <osThreadNew+0x11c>
            hTask = NULL;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b4e4:	693b      	ldr	r3, [r7, #16]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3728      	adds	r7, #40	; 0x28
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4f6:	f3ef 8305 	mrs	r3, IPSR
 800b4fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d003      	beq.n	800b50a <osDelay+0x1c>
    stat = osErrorISR;
 800b502:	f06f 0305 	mvn.w	r3, #5
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	e007      	b.n	800b51a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <osDelay+0x2c>
      vTaskDelay(ticks);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f001 f829 	bl	800c56c <vTaskDelay>
    }
  }

  return (stat);
 800b51a:	68fb      	ldr	r3, [r7, #12]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b524:	b580      	push	{r7, lr}
 800b526:	b08a      	sub	sp, #40	; 0x28
 800b528:	af02      	add	r7, sp, #8
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b530:	2300      	movs	r3, #0
 800b532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b534:	f3ef 8305 	mrs	r3, IPSR
 800b538:	613b      	str	r3, [r7, #16]
  return(result);
 800b53a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d15f      	bne.n	800b600 <osMessageQueueNew+0xdc>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d05c      	beq.n	800b600 <osMessageQueueNew+0xdc>
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d059      	beq.n	800b600 <osMessageQueueNew+0xdc>
    mem = -1;
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295
 800b550:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d029      	beq.n	800b5ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d012      	beq.n	800b586 <osMessageQueueNew+0x62>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	2b4f      	cmp	r3, #79	; 0x4f
 800b566:	d90e      	bls.n	800b586 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	695a      	ldr	r2, [r3, #20]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	fb01 f303 	mul.w	r3, r1, r3
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d302      	bcc.n	800b586 <osMessageQueueNew+0x62>
        mem = 1;
 800b580:	2301      	movs	r3, #1
 800b582:	61bb      	str	r3, [r7, #24]
 800b584:	e014      	b.n	800b5b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d110      	bne.n	800b5b0 <osMessageQueueNew+0x8c>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10c      	bne.n	800b5b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d108      	bne.n	800b5b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d104      	bne.n	800b5b0 <osMessageQueueNew+0x8c>
          mem = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61bb      	str	r3, [r7, #24]
 800b5aa:	e001      	b.n	800b5b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d10b      	bne.n	800b5ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	691a      	ldr	r2, [r3, #16]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	2100      	movs	r1, #0
 800b5c0:	9100      	str	r1, [sp, #0]
 800b5c2:	68b9      	ldr	r1, [r7, #8]
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 f971 	bl	800b8ac <xQueueGenericCreateStatic>
 800b5ca:	61f8      	str	r0, [r7, #28]
 800b5cc:	e008      	b.n	800b5e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d105      	bne.n	800b5e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	68b9      	ldr	r1, [r7, #8]
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f000 f9df 	bl	800b99c <xQueueGenericCreate>
 800b5de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00c      	beq.n	800b600 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	617b      	str	r3, [r7, #20]
 800b5f2:	e001      	b.n	800b5f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b5f8:	6979      	ldr	r1, [r7, #20]
 800b5fa:	69f8      	ldr	r0, [r7, #28]
 800b5fc:	f000 fdb6 	bl	800c16c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b600:	69fb      	ldr	r3, [r7, #28]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3720      	adds	r7, #32
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
	...

0800b60c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4a07      	ldr	r2, [pc, #28]	; (800b638 <vApplicationGetIdleTaskMemory+0x2c>)
 800b61c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	4a06      	ldr	r2, [pc, #24]	; (800b63c <vApplicationGetIdleTaskMemory+0x30>)
 800b622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b62a:	601a      	str	r2, [r3, #0]
}
 800b62c:	bf00      	nop
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	2000088c 	.word	0x2000088c
 800b63c:	200008f8 	.word	0x200008f8

0800b640 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	4a07      	ldr	r2, [pc, #28]	; (800b66c <vApplicationGetTimerTaskMemory+0x2c>)
 800b650:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	4a06      	ldr	r2, [pc, #24]	; (800b670 <vApplicationGetTimerTaskMemory+0x30>)
 800b656:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b65e:	601a      	str	r2, [r3, #0]
}
 800b660:	bf00      	nop
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	20000cf8 	.word	0x20000cf8
 800b670:	20000d64 	.word	0x20000d64

0800b674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f103 0208 	add.w	r2, r3, #8
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f04f 32ff 	mov.w	r2, #4294967295
 800b68c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f103 0208 	add.w	r2, r3, #8
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f103 0208 	add.w	r2, r3, #8
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b085      	sub	sp, #20
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	689a      	ldr	r2, [r3, #8]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	601a      	str	r2, [r3, #0]
}
 800b70a:	bf00      	nop
 800b70c:	3714      	adds	r7, #20
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b716:	b480      	push	{r7}
 800b718:	b085      	sub	sp, #20
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72c:	d103      	bne.n	800b736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e00c      	b.n	800b750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3308      	adds	r3, #8
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	e002      	b.n	800b744 <vListInsert+0x2e>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d2f6      	bcs.n	800b73e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	601a      	str	r2, [r3, #0]
}
 800b77c:	bf00      	nop
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6892      	ldr	r2, [r2, #8]
 800b79e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	6852      	ldr	r2, [r2, #4]
 800b7a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d103      	bne.n	800b7bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	689a      	ldr	r2, [r3, #8]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	1e5a      	subs	r2, r3, #1
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b806:	f002 f98d 	bl	800db24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b812:	68f9      	ldr	r1, [r7, #12]
 800b814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b816:	fb01 f303 	mul.w	r3, r1, r3
 800b81a:	441a      	add	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2200      	movs	r2, #0
 800b824:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b836:	3b01      	subs	r3, #1
 800b838:	68f9      	ldr	r1, [r7, #12]
 800b83a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	441a      	add	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	22ff      	movs	r2, #255	; 0xff
 800b84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	22ff      	movs	r2, #255	; 0xff
 800b852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d114      	bne.n	800b886 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d01a      	beq.n	800b89a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	3310      	adds	r3, #16
 800b868:	4618      	mov	r0, r3
 800b86a:	f001 fa43 	bl	800ccf4 <xTaskRemoveFromEventList>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d012      	beq.n	800b89a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b874:	4b0c      	ldr	r3, [pc, #48]	; (800b8a8 <xQueueGenericReset+0xcc>)
 800b876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	e009      	b.n	800b89a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3310      	adds	r3, #16
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff fef2 	bl	800b674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3324      	adds	r3, #36	; 0x24
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff feed 	bl	800b674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b89a:	f002 f973 	bl	800db84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b89e:	2301      	movs	r3, #1
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08e      	sub	sp, #56	; 0x38
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <xQueueGenericCreateStatic+0x52>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <xQueueGenericCreateStatic+0x56>
 800b8fe:	2301      	movs	r3, #1
 800b900:	e000      	b.n	800b904 <xQueueGenericCreateStatic+0x58>
 800b902:	2300      	movs	r3, #0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10a      	bne.n	800b91e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90c:	f383 8811 	msr	BASEPRI, r3
 800b910:	f3bf 8f6f 	isb	sy
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	623b      	str	r3, [r7, #32]
}
 800b91a:	bf00      	nop
 800b91c:	e7fe      	b.n	800b91c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d102      	bne.n	800b92a <xQueueGenericCreateStatic+0x7e>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <xQueueGenericCreateStatic+0x82>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e000      	b.n	800b930 <xQueueGenericCreateStatic+0x84>
 800b92e:	2300      	movs	r3, #0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	61fb      	str	r3, [r7, #28]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b94a:	2350      	movs	r3, #80	; 0x50
 800b94c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b50      	cmp	r3, #80	; 0x50
 800b952:	d00a      	beq.n	800b96a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	61bb      	str	r3, [r7, #24]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b96a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00d      	beq.n	800b992 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b97e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	4613      	mov	r3, r2
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	68b9      	ldr	r1, [r7, #8]
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 f83f 	bl	800ba10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b994:	4618      	mov	r0, r3
 800b996:	3730      	adds	r7, #48	; 0x30
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08a      	sub	sp, #40	; 0x28
 800b9a0:	af02      	add	r7, sp, #8
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10a      	bne.n	800b9c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	613b      	str	r3, [r7, #16]
}
 800b9c2:	bf00      	nop
 800b9c4:	e7fe      	b.n	800b9c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	fb02 f303 	mul.w	r3, r2, r3
 800b9ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	3350      	adds	r3, #80	; 0x50
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f002 f9c7 	bl	800dd68 <pvPortMalloc>
 800b9da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d011      	beq.n	800ba06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	3350      	adds	r3, #80	; 0x50
 800b9ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9f4:	79fa      	ldrb	r2, [r7, #7]
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	68b9      	ldr	r1, [r7, #8]
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f000 f805 	bl	800ba10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba06:	69bb      	ldr	r3, [r7, #24]
	}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3720      	adds	r7, #32
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d103      	bne.n	800ba2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	601a      	str	r2, [r3, #0]
 800ba2a:	e002      	b.n	800ba32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba3e:	2101      	movs	r1, #1
 800ba40:	69b8      	ldr	r0, [r7, #24]
 800ba42:	f7ff fecb 	bl	800b7dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	78fa      	ldrb	r2, [r7, #3]
 800ba4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba4e:	bf00      	nop
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08e      	sub	sp, #56	; 0x38
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
 800ba64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba66:	2300      	movs	r3, #0
 800ba68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10a      	bne.n	800ba8a <xQueueGenericSend+0x32>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d103      	bne.n	800ba98 <xQueueGenericSend+0x40>
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <xQueueGenericSend+0x44>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e000      	b.n	800ba9e <xQueueGenericSend+0x46>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10a      	bne.n	800bab8 <xQueueGenericSend+0x60>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bab4:	bf00      	nop
 800bab6:	e7fe      	b.n	800bab6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	2b02      	cmp	r3, #2
 800babc:	d103      	bne.n	800bac6 <xQueueGenericSend+0x6e>
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d101      	bne.n	800baca <xQueueGenericSend+0x72>
 800bac6:	2301      	movs	r3, #1
 800bac8:	e000      	b.n	800bacc <xQueueGenericSend+0x74>
 800baca:	2300      	movs	r3, #0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	623b      	str	r3, [r7, #32]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bae6:	f001 fac3 	bl	800d070 <xTaskGetSchedulerState>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d102      	bne.n	800baf6 <xQueueGenericSend+0x9e>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d101      	bne.n	800bafa <xQueueGenericSend+0xa2>
 800baf6:	2301      	movs	r3, #1
 800baf8:	e000      	b.n	800bafc <xQueueGenericSend+0xa4>
 800bafa:	2300      	movs	r3, #0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <xQueueGenericSend+0xbe>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	61fb      	str	r3, [r7, #28]
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb16:	f002 f805 	bl	800db24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d302      	bcc.n	800bb2c <xQueueGenericSend+0xd4>
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d129      	bne.n	800bb80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	68b9      	ldr	r1, [r7, #8]
 800bb30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb32:	f000 fa0b 	bl	800bf4c <prvCopyDataToQueue>
 800bb36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d010      	beq.n	800bb62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	3324      	adds	r3, #36	; 0x24
 800bb44:	4618      	mov	r0, r3
 800bb46:	f001 f8d5 	bl	800ccf4 <xTaskRemoveFromEventList>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d013      	beq.n	800bb78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb50:	4b3f      	ldr	r3, [pc, #252]	; (800bc50 <xQueueGenericSend+0x1f8>)
 800bb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	e00a      	b.n	800bb78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d007      	beq.n	800bb78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb68:	4b39      	ldr	r3, [pc, #228]	; (800bc50 <xQueueGenericSend+0x1f8>)
 800bb6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb6e:	601a      	str	r2, [r3, #0]
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb78:	f002 f804 	bl	800db84 <vPortExitCritical>
				return pdPASS;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e063      	b.n	800bc48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d103      	bne.n	800bb8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb86:	f001 fffd 	bl	800db84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e05c      	b.n	800bc48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d106      	bne.n	800bba2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb94:	f107 0314 	add.w	r3, r7, #20
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f001 f90f 	bl	800cdbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bba2:	f001 ffef 	bl	800db84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bba6:	f000 fe81 	bl	800c8ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbaa:	f001 ffbb 	bl	800db24 <vPortEnterCritical>
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbb4:	b25b      	sxtb	r3, r3
 800bbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbba:	d103      	bne.n	800bbc4 <xQueueGenericSend+0x16c>
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbca:	b25b      	sxtb	r3, r3
 800bbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd0:	d103      	bne.n	800bbda <xQueueGenericSend+0x182>
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbda:	f001 ffd3 	bl	800db84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbde:	1d3a      	adds	r2, r7, #4
 800bbe0:	f107 0314 	add.w	r3, r7, #20
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f001 f8fe 	bl	800cde8 <xTaskCheckForTimeOut>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d124      	bne.n	800bc3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bbf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbf4:	f000 faa2 	bl	800c13c <prvIsQueueFull>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d018      	beq.n	800bc30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc00:	3310      	adds	r3, #16
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f001 f824 	bl	800cc54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc0e:	f000 fa2d 	bl	800c06c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc12:	f000 fe59 	bl	800c8c8 <xTaskResumeAll>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f47f af7c 	bne.w	800bb16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bc1e:	4b0c      	ldr	r3, [pc, #48]	; (800bc50 <xQueueGenericSend+0x1f8>)
 800bc20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	e772      	b.n	800bb16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc32:	f000 fa1b 	bl	800c06c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc36:	f000 fe47 	bl	800c8c8 <xTaskResumeAll>
 800bc3a:	e76c      	b.n	800bb16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc3e:	f000 fa15 	bl	800c06c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc42:	f000 fe41 	bl	800c8c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3738      	adds	r7, #56	; 0x38
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	e000ed04 	.word	0xe000ed04

0800bc54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b090      	sub	sp, #64	; 0x40
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d103      	bne.n	800bc90 <xQueueGenericSendFromISR+0x3c>
 800bc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <xQueueGenericSendFromISR+0x40>
 800bc90:	2301      	movs	r3, #1
 800bc92:	e000      	b.n	800bc96 <xQueueGenericSendFromISR+0x42>
 800bc94:	2300      	movs	r3, #0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10a      	bne.n	800bcb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcac:	bf00      	nop
 800bcae:	e7fe      	b.n	800bcae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d103      	bne.n	800bcbe <xQueueGenericSendFromISR+0x6a>
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d101      	bne.n	800bcc2 <xQueueGenericSendFromISR+0x6e>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e000      	b.n	800bcc4 <xQueueGenericSendFromISR+0x70>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	623b      	str	r3, [r7, #32]
}
 800bcda:	bf00      	nop
 800bcdc:	e7fe      	b.n	800bcdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcde:	f002 f803 	bl	800dce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bce2:	f3ef 8211 	mrs	r2, BASEPRI
 800bce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	61fa      	str	r2, [r7, #28]
 800bcf8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcfc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d302      	bcc.n	800bd10 <xQueueGenericSendFromISR+0xbc>
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d12f      	bne.n	800bd70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	68b9      	ldr	r1, [r7, #8]
 800bd24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd26:	f000 f911 	bl	800bf4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd32:	d112      	bne.n	800bd5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d016      	beq.n	800bd6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3e:	3324      	adds	r3, #36	; 0x24
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 ffd7 	bl	800ccf4 <xTaskRemoveFromEventList>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00e      	beq.n	800bd6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00b      	beq.n	800bd6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	e007      	b.n	800bd6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd5e:	3301      	adds	r3, #1
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	b25a      	sxtb	r2, r3
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bd6e:	e001      	b.n	800bd74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd70:	2300      	movs	r3, #0
 800bd72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3740      	adds	r7, #64	; 0x40
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08c      	sub	sp, #48	; 0x30
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10a      	bne.n	800bdbc <xQueueReceive+0x30>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	623b      	str	r3, [r7, #32]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d103      	bne.n	800bdca <xQueueReceive+0x3e>
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <xQueueReceive+0x42>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e000      	b.n	800bdd0 <xQueueReceive+0x44>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10a      	bne.n	800bdea <xQueueReceive+0x5e>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	61fb      	str	r3, [r7, #28]
}
 800bde6:	bf00      	nop
 800bde8:	e7fe      	b.n	800bde8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdea:	f001 f941 	bl	800d070 <xTaskGetSchedulerState>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d102      	bne.n	800bdfa <xQueueReceive+0x6e>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <xQueueReceive+0x72>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e000      	b.n	800be00 <xQueueReceive+0x74>
 800bdfe:	2300      	movs	r3, #0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10a      	bne.n	800be1a <xQueueReceive+0x8e>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	61bb      	str	r3, [r7, #24]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be1a:	f001 fe83 	bl	800db24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	2b00      	cmp	r3, #0
 800be28:	d01f      	beq.n	800be6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be2a:	68b9      	ldr	r1, [r7, #8]
 800be2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be2e:	f000 f8f7 	bl	800c020 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	1e5a      	subs	r2, r3, #1
 800be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00f      	beq.n	800be62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	3310      	adds	r3, #16
 800be46:	4618      	mov	r0, r3
 800be48:	f000 ff54 	bl	800ccf4 <xTaskRemoveFromEventList>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d007      	beq.n	800be62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be52:	4b3d      	ldr	r3, [pc, #244]	; (800bf48 <xQueueReceive+0x1bc>)
 800be54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be58:	601a      	str	r2, [r3, #0]
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be62:	f001 fe8f 	bl	800db84 <vPortExitCritical>
				return pdPASS;
 800be66:	2301      	movs	r3, #1
 800be68:	e069      	b.n	800bf3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d103      	bne.n	800be78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be70:	f001 fe88 	bl	800db84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be74:	2300      	movs	r3, #0
 800be76:	e062      	b.n	800bf3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be7e:	f107 0310 	add.w	r3, r7, #16
 800be82:	4618      	mov	r0, r3
 800be84:	f000 ff9a 	bl	800cdbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be8c:	f001 fe7a 	bl	800db84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be90:	f000 fd0c 	bl	800c8ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be94:	f001 fe46 	bl	800db24 <vPortEnterCritical>
 800be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be9e:	b25b      	sxtb	r3, r3
 800bea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea4:	d103      	bne.n	800beae <xQueueReceive+0x122>
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beb4:	b25b      	sxtb	r3, r3
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beba:	d103      	bne.n	800bec4 <xQueueReceive+0x138>
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bec4:	f001 fe5e 	bl	800db84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bec8:	1d3a      	adds	r2, r7, #4
 800beca:	f107 0310 	add.w	r3, r7, #16
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 ff89 	bl	800cde8 <xTaskCheckForTimeOut>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d123      	bne.n	800bf24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bedc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bede:	f000 f917 	bl	800c110 <prvIsQueueEmpty>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d017      	beq.n	800bf18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	3324      	adds	r3, #36	; 0x24
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	4611      	mov	r1, r2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 feaf 	bl	800cc54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef8:	f000 f8b8 	bl	800c06c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800befc:	f000 fce4 	bl	800c8c8 <xTaskResumeAll>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d189      	bne.n	800be1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bf06:	4b10      	ldr	r3, [pc, #64]	; (800bf48 <xQueueReceive+0x1bc>)
 800bf08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	e780      	b.n	800be1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf1a:	f000 f8a7 	bl	800c06c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf1e:	f000 fcd3 	bl	800c8c8 <xTaskResumeAll>
 800bf22:	e77a      	b.n	800be1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf26:	f000 f8a1 	bl	800c06c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf2a:	f000 fccd 	bl	800c8c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf30:	f000 f8ee 	bl	800c110 <prvIsQueueEmpty>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f43f af6f 	beq.w	800be1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3730      	adds	r7, #48	; 0x30
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	e000ed04 	.word	0xe000ed04

0800bf4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10d      	bne.n	800bf86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d14d      	bne.n	800c00e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f001 f898 	bl	800d0ac <xTaskPriorityDisinherit>
 800bf7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	609a      	str	r2, [r3, #8]
 800bf84:	e043      	b.n	800c00e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d119      	bne.n	800bfc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6858      	ldr	r0, [r3, #4]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf94:	461a      	mov	r2, r3
 800bf96:	68b9      	ldr	r1, [r7, #8]
 800bf98:	f002 fdf4 	bl	800eb84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa4:	441a      	add	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d32b      	bcc.n	800c00e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	605a      	str	r2, [r3, #4]
 800bfbe:	e026      	b.n	800c00e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	68d8      	ldr	r0, [r3, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc8:	461a      	mov	r2, r3
 800bfca:	68b9      	ldr	r1, [r7, #8]
 800bfcc:	f002 fdda 	bl	800eb84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd8:	425b      	negs	r3, r3
 800bfda:	441a      	add	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d207      	bcs.n	800bffc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	689a      	ldr	r2, [r3, #8]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff4:	425b      	negs	r3, r3
 800bff6:	441a      	add	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d105      	bne.n	800c00e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c016:	697b      	ldr	r3, [r7, #20]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d018      	beq.n	800c064 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	68da      	ldr	r2, [r3, #12]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03a:	441a      	add	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d303      	bcc.n	800c054 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68d9      	ldr	r1, [r3, #12]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05c:	461a      	mov	r2, r3
 800c05e:	6838      	ldr	r0, [r7, #0]
 800c060:	f002 fd90 	bl	800eb84 <memcpy>
	}
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c074:	f001 fd56 	bl	800db24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c07e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c080:	e011      	b.n	800c0a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c086:	2b00      	cmp	r3, #0
 800c088:	d012      	beq.n	800c0b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	3324      	adds	r3, #36	; 0x24
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 fe30 	bl	800ccf4 <xTaskRemoveFromEventList>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d001      	beq.n	800c09e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c09a:	f000 ff07 	bl	800ceac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	dce9      	bgt.n	800c082 <prvUnlockQueue+0x16>
 800c0ae:	e000      	b.n	800c0b2 <prvUnlockQueue+0x46>
					break;
 800c0b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	22ff      	movs	r2, #255	; 0xff
 800c0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c0ba:	f001 fd63 	bl	800db84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0be:	f001 fd31 	bl	800db24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0ca:	e011      	b.n	800c0f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d012      	beq.n	800c0fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	3310      	adds	r3, #16
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 fe0b 	bl	800ccf4 <xTaskRemoveFromEventList>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0e4:	f000 fee2 	bl	800ceac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0e8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	dce9      	bgt.n	800c0cc <prvUnlockQueue+0x60>
 800c0f8:	e000      	b.n	800c0fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	22ff      	movs	r2, #255	; 0xff
 800c100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c104:	f001 fd3e 	bl	800db84 <vPortExitCritical>
}
 800c108:	bf00      	nop
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c118:	f001 fd04 	bl	800db24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c120:	2b00      	cmp	r3, #0
 800c122:	d102      	bne.n	800c12a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c124:	2301      	movs	r3, #1
 800c126:	60fb      	str	r3, [r7, #12]
 800c128:	e001      	b.n	800c12e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c12e:	f001 fd29 	bl	800db84 <vPortExitCritical>

	return xReturn;
 800c132:	68fb      	ldr	r3, [r7, #12]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c144:	f001 fcee 	bl	800db24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c150:	429a      	cmp	r2, r3
 800c152:	d102      	bne.n	800c15a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c154:	2301      	movs	r3, #1
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	e001      	b.n	800c15e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c15a:	2300      	movs	r3, #0
 800c15c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c15e:	f001 fd11 	bl	800db84 <vPortExitCritical>

	return xReturn;
 800c162:	68fb      	ldr	r3, [r7, #12]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]
 800c17a:	e014      	b.n	800c1a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c17c:	4a0f      	ldr	r2, [pc, #60]	; (800c1bc <vQueueAddToRegistry+0x50>)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10b      	bne.n	800c1a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c188:	490c      	ldr	r1, [pc, #48]	; (800c1bc <vQueueAddToRegistry+0x50>)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c192:	4a0a      	ldr	r2, [pc, #40]	; (800c1bc <vQueueAddToRegistry+0x50>)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	4413      	add	r3, r2
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c19e:	e006      	b.n	800c1ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b07      	cmp	r3, #7
 800c1aa:	d9e7      	bls.n	800c17c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c1ac:	bf00      	nop
 800c1ae:	bf00      	nop
 800c1b0:	3714      	adds	r7, #20
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	20001564 	.word	0x20001564

0800c1c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c1d0:	f001 fca8 	bl	800db24 <vPortEnterCritical>
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1da:	b25b      	sxtb	r3, r3
 800c1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e0:	d103      	bne.n	800c1ea <vQueueWaitForMessageRestricted+0x2a>
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1f0:	b25b      	sxtb	r3, r3
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d103      	bne.n	800c200 <vQueueWaitForMessageRestricted+0x40>
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c200:	f001 fcc0 	bl	800db84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d106      	bne.n	800c21a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	3324      	adds	r3, #36	; 0x24
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	4618      	mov	r0, r3
 800c216:	f000 fd41 	bl	800cc9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c21a:	6978      	ldr	r0, [r7, #20]
 800c21c:	f7ff ff26 	bl	800c06c <prvUnlockQueue>
	}
 800c220:	bf00      	nop
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08e      	sub	sp, #56	; 0x38
 800c22c:	af04      	add	r7, sp, #16
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10a      	bne.n	800c252 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	623b      	str	r3, [r7, #32]
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <xTaskCreateStatic+0x46>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	61fb      	str	r3, [r7, #28]
}
 800c26a:	bf00      	nop
 800c26c:	e7fe      	b.n	800c26c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c26e:	236c      	movs	r3, #108	; 0x6c
 800c270:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	2b6c      	cmp	r3, #108	; 0x6c
 800c276:	d00a      	beq.n	800c28e <xTaskCreateStatic+0x66>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	61bb      	str	r3, [r7, #24]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c28e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	2b00      	cmp	r3, #0
 800c294:	d01e      	beq.n	800c2d4 <xTaskCreateStatic+0xac>
 800c296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d01b      	beq.n	800c2d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	9303      	str	r3, [sp, #12]
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	9302      	str	r3, [sp, #8]
 800c2b6:	f107 0314 	add.w	r3, r7, #20
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 f850 	bl	800c36c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2ce:	f000 f8dd 	bl	800c48c <prvAddNewTaskToReadyList>
 800c2d2:	e001      	b.n	800c2d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2d8:	697b      	ldr	r3, [r7, #20]
	}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3728      	adds	r7, #40	; 0x28
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b08c      	sub	sp, #48	; 0x30
 800c2e6:	af04      	add	r7, sp, #16
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	603b      	str	r3, [r7, #0]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2f2:	88fb      	ldrh	r3, [r7, #6]
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f001 fd36 	bl	800dd68 <pvPortMalloc>
 800c2fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00e      	beq.n	800c322 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c304:	206c      	movs	r0, #108	; 0x6c
 800c306:	f001 fd2f 	bl	800dd68 <pvPortMalloc>
 800c30a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	697a      	ldr	r2, [r7, #20]
 800c316:	631a      	str	r2, [r3, #48]	; 0x30
 800c318:	e005      	b.n	800c326 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c31a:	6978      	ldr	r0, [r7, #20]
 800c31c:	f001 fdf0 	bl	800df00 <vPortFree>
 800c320:	e001      	b.n	800c326 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c322:	2300      	movs	r3, #0
 800c324:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d017      	beq.n	800c35c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c334:	88fa      	ldrh	r2, [r7, #6]
 800c336:	2300      	movs	r3, #0
 800c338:	9303      	str	r3, [sp, #12]
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	9302      	str	r3, [sp, #8]
 800c33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	68b9      	ldr	r1, [r7, #8]
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f000 f80e 	bl	800c36c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c350:	69f8      	ldr	r0, [r7, #28]
 800c352:	f000 f89b 	bl	800c48c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c356:	2301      	movs	r3, #1
 800c358:	61bb      	str	r3, [r7, #24]
 800c35a:	e002      	b.n	800c362 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c35c:	f04f 33ff 	mov.w	r3, #4294967295
 800c360:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c362:	69bb      	ldr	r3, [r7, #24]
	}
 800c364:	4618      	mov	r0, r3
 800c366:	3720      	adds	r7, #32
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	461a      	mov	r2, r3
 800c384:	21a5      	movs	r1, #165	; 0xa5
 800c386:	f002 fc0b 	bl	800eba0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c394:	3b01      	subs	r3, #1
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	4413      	add	r3, r2
 800c39a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	f023 0307 	bic.w	r3, r3, #7
 800c3a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	f003 0307 	and.w	r3, r3, #7
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00a      	beq.n	800c3c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	617b      	str	r3, [r7, #20]
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d01f      	beq.n	800c40a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	61fb      	str	r3, [r7, #28]
 800c3ce:	e012      	b.n	800c3f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	7819      	ldrb	r1, [r3, #0]
 800c3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	4413      	add	r3, r2
 800c3de:	3334      	adds	r3, #52	; 0x34
 800c3e0:	460a      	mov	r2, r1
 800c3e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d006      	beq.n	800c3fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	61fb      	str	r3, [r7, #28]
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	2b1d      	cmp	r3, #29
 800c3fa:	d9e9      	bls.n	800c3d0 <prvInitialiseNewTask+0x64>
 800c3fc:	e000      	b.n	800c400 <prvInitialiseNewTask+0x94>
			{
				break;
 800c3fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c402:	2200      	movs	r2, #0
 800c404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800c408:	e003      	b.n	800c412 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c414:	2b37      	cmp	r3, #55	; 0x37
 800c416:	d901      	bls.n	800c41c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c418:	2337      	movs	r3, #55	; 0x37
 800c41a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c420:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c426:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	2200      	movs	r2, #0
 800c42c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	3304      	adds	r3, #4
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff f93e 	bl	800b6b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	3318      	adds	r3, #24
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff f939 	bl	800b6b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c446:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c456:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	2200      	movs	r2, #0
 800c45c:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	68f9      	ldr	r1, [r7, #12]
 800c46a:	69b8      	ldr	r0, [r7, #24]
 800c46c:	f001 fa2e 	bl	800d8cc <pxPortInitialiseStack>
 800c470:	4602      	mov	r2, r0
 800c472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c474:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c482:	bf00      	nop
 800c484:	3720      	adds	r7, #32
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c494:	f001 fb46 	bl	800db24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c498:	4b2d      	ldr	r3, [pc, #180]	; (800c550 <prvAddNewTaskToReadyList+0xc4>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3301      	adds	r3, #1
 800c49e:	4a2c      	ldr	r2, [pc, #176]	; (800c550 <prvAddNewTaskToReadyList+0xc4>)
 800c4a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4a2:	4b2c      	ldr	r3, [pc, #176]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d109      	bne.n	800c4be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4aa:	4a2a      	ldr	r2, [pc, #168]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4b0:	4b27      	ldr	r3, [pc, #156]	; (800c550 <prvAddNewTaskToReadyList+0xc4>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d110      	bne.n	800c4da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c4b8:	f000 fd1c 	bl	800cef4 <prvInitialiseTaskLists>
 800c4bc:	e00d      	b.n	800c4da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c4be:	4b26      	ldr	r3, [pc, #152]	; (800c558 <prvAddNewTaskToReadyList+0xcc>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d109      	bne.n	800c4da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c4c6:	4b23      	ldr	r3, [pc, #140]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d802      	bhi.n	800c4da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4d4:	4a1f      	ldr	r2, [pc, #124]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4da:	4b20      	ldr	r3, [pc, #128]	; (800c55c <prvAddNewTaskToReadyList+0xd0>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	4a1e      	ldr	r2, [pc, #120]	; (800c55c <prvAddNewTaskToReadyList+0xd0>)
 800c4e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c4e4:	4b1d      	ldr	r3, [pc, #116]	; (800c55c <prvAddNewTaskToReadyList+0xd0>)
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f0:	4b1b      	ldr	r3, [pc, #108]	; (800c560 <prvAddNewTaskToReadyList+0xd4>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d903      	bls.n	800c500 <prvAddNewTaskToReadyList+0x74>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fc:	4a18      	ldr	r2, [pc, #96]	; (800c560 <prvAddNewTaskToReadyList+0xd4>)
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c504:	4613      	mov	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4a15      	ldr	r2, [pc, #84]	; (800c564 <prvAddNewTaskToReadyList+0xd8>)
 800c50e:	441a      	add	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	3304      	adds	r3, #4
 800c514:	4619      	mov	r1, r3
 800c516:	4610      	mov	r0, r2
 800c518:	f7ff f8d9 	bl	800b6ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c51c:	f001 fb32 	bl	800db84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c520:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <prvAddNewTaskToReadyList+0xcc>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00e      	beq.n	800c546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c528:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c532:	429a      	cmp	r2, r3
 800c534:	d207      	bcs.n	800c546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c536:	4b0c      	ldr	r3, [pc, #48]	; (800c568 <prvAddNewTaskToReadyList+0xdc>)
 800c538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20001a78 	.word	0x20001a78
 800c554:	200015a4 	.word	0x200015a4
 800c558:	20001a84 	.word	0x20001a84
 800c55c:	20001a94 	.word	0x20001a94
 800c560:	20001a80 	.word	0x20001a80
 800c564:	200015a8 	.word	0x200015a8
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c574:	2300      	movs	r3, #0
 800c576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d017      	beq.n	800c5ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c57e:	4b13      	ldr	r3, [pc, #76]	; (800c5cc <vTaskDelay+0x60>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00a      	beq.n	800c59c <vTaskDelay+0x30>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58a:	f383 8811 	msr	BASEPRI, r3
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	60bb      	str	r3, [r7, #8]
}
 800c598:	bf00      	nop
 800c59a:	e7fe      	b.n	800c59a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c59c:	f000 f986 	bl	800c8ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fdf0 	bl	800d188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5a8:	f000 f98e 	bl	800c8c8 <xTaskResumeAll>
 800c5ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d107      	bne.n	800c5c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c5b4:	4b06      	ldr	r3, [pc, #24]	; (800c5d0 <vTaskDelay+0x64>)
 800c5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ba:	601a      	str	r2, [r3, #0]
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5c4:	bf00      	nop
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	20001aa0 	.word	0x20001aa0
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c5dc:	f001 faa2 	bl	800db24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d102      	bne.n	800c5ec <vTaskSuspend+0x18>
 800c5e6:	4b30      	ldr	r3, [pc, #192]	; (800c6a8 <vTaskSuspend+0xd4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	e000      	b.n	800c5ee <vTaskSuspend+0x1a>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7ff f8c7 	bl	800b788 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d004      	beq.n	800c60c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3318      	adds	r3, #24
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff f8be 	bl	800b788 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	3304      	adds	r3, #4
 800c610:	4619      	mov	r1, r3
 800c612:	4826      	ldr	r0, [pc, #152]	; (800c6ac <vTaskSuspend+0xd8>)
 800c614:	f7ff f85b 	bl	800b6ce <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b01      	cmp	r3, #1
 800c622:	d103      	bne.n	800c62c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c62c:	f001 faaa 	bl	800db84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c630:	4b1f      	ldr	r3, [pc, #124]	; (800c6b0 <vTaskSuspend+0xdc>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d005      	beq.n	800c644 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c638:	f001 fa74 	bl	800db24 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c63c:	f000 fcf8 	bl	800d030 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c640:	f001 faa0 	bl	800db84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c644:	4b18      	ldr	r3, [pc, #96]	; (800c6a8 <vTaskSuspend+0xd4>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d127      	bne.n	800c69e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c64e:	4b18      	ldr	r3, [pc, #96]	; (800c6b0 <vTaskSuspend+0xdc>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d017      	beq.n	800c686 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c656:	4b17      	ldr	r3, [pc, #92]	; (800c6b4 <vTaskSuspend+0xe0>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00a      	beq.n	800c674 <vTaskSuspend+0xa0>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	60bb      	str	r3, [r7, #8]
}
 800c670:	bf00      	nop
 800c672:	e7fe      	b.n	800c672 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c674:	4b10      	ldr	r3, [pc, #64]	; (800c6b8 <vTaskSuspend+0xe4>)
 800c676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c684:	e00b      	b.n	800c69e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c686:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <vTaskSuspend+0xd8>)
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <vTaskSuspend+0xe8>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d103      	bne.n	800c69a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c692:	4b05      	ldr	r3, [pc, #20]	; (800c6a8 <vTaskSuspend+0xd4>)
 800c694:	2200      	movs	r2, #0
 800c696:	601a      	str	r2, [r3, #0]
	}
 800c698:	e001      	b.n	800c69e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c69a:	f000 fa7d 	bl	800cb98 <vTaskSwitchContext>
	}
 800c69e:	bf00      	nop
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	200015a4 	.word	0x200015a4
 800c6ac:	20001a64 	.word	0x20001a64
 800c6b0:	20001a84 	.word	0x20001a84
 800c6b4:	20001aa0 	.word	0x20001aa0
 800c6b8:	e000ed04 	.word	0xe000ed04
 800c6bc:	20001a78 	.word	0x20001a78

0800c6c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10a      	bne.n	800c6ec <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	60fb      	str	r3, [r7, #12]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	4a0a      	ldr	r2, [pc, #40]	; (800c71c <prvTaskIsTaskSuspended+0x5c>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d10a      	bne.n	800c70c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fa:	4a09      	ldr	r2, [pc, #36]	; (800c720 <prvTaskIsTaskSuspended+0x60>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d005      	beq.n	800c70c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c704:	2b00      	cmp	r3, #0
 800c706:	d101      	bne.n	800c70c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c708:	2301      	movs	r3, #1
 800c70a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c70c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c70e:	4618      	mov	r0, r3
 800c710:	371c      	adds	r7, #28
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	20001a64 	.word	0x20001a64
 800c720:	20001a38 	.word	0x20001a38

0800c724 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10a      	bne.n	800c74c <vTaskResume+0x28>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60bb      	str	r3, [r7, #8]
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c74c:	4b20      	ldr	r3, [pc, #128]	; (800c7d0 <vTaskResume+0xac>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	429a      	cmp	r2, r3
 800c754:	d038      	beq.n	800c7c8 <vTaskResume+0xa4>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d035      	beq.n	800c7c8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c75c:	f001 f9e2 	bl	800db24 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f7ff ffad 	bl	800c6c0 <prvTaskIsTaskSuspended>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d02b      	beq.n	800c7c4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	3304      	adds	r3, #4
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff f809 	bl	800b788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c77a:	4b16      	ldr	r3, [pc, #88]	; (800c7d4 <vTaskResume+0xb0>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d903      	bls.n	800c78a <vTaskResume+0x66>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	4a13      	ldr	r2, [pc, #76]	; (800c7d4 <vTaskResume+0xb0>)
 800c788:	6013      	str	r3, [r2, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c78e:	4613      	mov	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	4a10      	ldr	r2, [pc, #64]	; (800c7d8 <vTaskResume+0xb4>)
 800c798:	441a      	add	r2, r3
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3304      	adds	r3, #4
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7fe ff94 	bl	800b6ce <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7aa:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <vTaskResume+0xac>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d307      	bcc.n	800c7c4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c7b4:	4b09      	ldr	r3, [pc, #36]	; (800c7dc <vTaskResume+0xb8>)
 800c7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	f3bf 8f4f 	dsb	sy
 800c7c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c7c4:	f001 f9de 	bl	800db84 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7c8:	bf00      	nop
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	200015a4 	.word	0x200015a4
 800c7d4:	20001a80 	.word	0x20001a80
 800c7d8:	200015a8 	.word	0x200015a8
 800c7dc:	e000ed04 	.word	0xe000ed04

0800c7e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08a      	sub	sp, #40	; 0x28
 800c7e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c7ee:	463a      	mov	r2, r7
 800c7f0:	1d39      	adds	r1, r7, #4
 800c7f2:	f107 0308 	add.w	r3, r7, #8
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe ff08 	bl	800b60c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	9202      	str	r2, [sp, #8]
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	2300      	movs	r3, #0
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	2300      	movs	r3, #0
 800c80c:	460a      	mov	r2, r1
 800c80e:	4921      	ldr	r1, [pc, #132]	; (800c894 <vTaskStartScheduler+0xb4>)
 800c810:	4821      	ldr	r0, [pc, #132]	; (800c898 <vTaskStartScheduler+0xb8>)
 800c812:	f7ff fd09 	bl	800c228 <xTaskCreateStatic>
 800c816:	4603      	mov	r3, r0
 800c818:	4a20      	ldr	r2, [pc, #128]	; (800c89c <vTaskStartScheduler+0xbc>)
 800c81a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c81c:	4b1f      	ldr	r3, [pc, #124]	; (800c89c <vTaskStartScheduler+0xbc>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c824:	2301      	movs	r3, #1
 800c826:	617b      	str	r3, [r7, #20]
 800c828:	e001      	b.n	800c82e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d102      	bne.n	800c83a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c834:	f000 fcfc 	bl	800d230 <xTimerCreateTimerTask>
 800c838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d116      	bne.n	800c86e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	613b      	str	r3, [r7, #16]
}
 800c852:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c854:	4b12      	ldr	r3, [pc, #72]	; (800c8a0 <vTaskStartScheduler+0xc0>)
 800c856:	f04f 32ff 	mov.w	r2, #4294967295
 800c85a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c85c:	4b11      	ldr	r3, [pc, #68]	; (800c8a4 <vTaskStartScheduler+0xc4>)
 800c85e:	2201      	movs	r2, #1
 800c860:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c862:	4b11      	ldr	r3, [pc, #68]	; (800c8a8 <vTaskStartScheduler+0xc8>)
 800c864:	2200      	movs	r2, #0
 800c866:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c868:	f001 f8ba 	bl	800d9e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c86c:	e00e      	b.n	800c88c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c874:	d10a      	bne.n	800c88c <vTaskStartScheduler+0xac>
	__asm volatile
 800c876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	60fb      	str	r3, [r7, #12]
}
 800c888:	bf00      	nop
 800c88a:	e7fe      	b.n	800c88a <vTaskStartScheduler+0xaa>
}
 800c88c:	bf00      	nop
 800c88e:	3718      	adds	r7, #24
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	0800f694 	.word	0x0800f694
 800c898:	0800cec5 	.word	0x0800cec5
 800c89c:	20001a9c 	.word	0x20001a9c
 800c8a0:	20001a98 	.word	0x20001a98
 800c8a4:	20001a84 	.word	0x20001a84
 800c8a8:	20001a7c 	.word	0x20001a7c

0800c8ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c8b0:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <vTaskSuspendAll+0x18>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	4a03      	ldr	r2, [pc, #12]	; (800c8c4 <vTaskSuspendAll+0x18>)
 800c8b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c8ba:	bf00      	nop
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	20001aa0 	.word	0x20001aa0

0800c8c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c8d6:	4b42      	ldr	r3, [pc, #264]	; (800c9e0 <xTaskResumeAll+0x118>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10a      	bne.n	800c8f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	603b      	str	r3, [r7, #0]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8f4:	f001 f916 	bl	800db24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c8f8:	4b39      	ldr	r3, [pc, #228]	; (800c9e0 <xTaskResumeAll+0x118>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	4a38      	ldr	r2, [pc, #224]	; (800c9e0 <xTaskResumeAll+0x118>)
 800c900:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c902:	4b37      	ldr	r3, [pc, #220]	; (800c9e0 <xTaskResumeAll+0x118>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d162      	bne.n	800c9d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c90a:	4b36      	ldr	r3, [pc, #216]	; (800c9e4 <xTaskResumeAll+0x11c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d05e      	beq.n	800c9d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c912:	e02f      	b.n	800c974 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c914:	4b34      	ldr	r3, [pc, #208]	; (800c9e8 <xTaskResumeAll+0x120>)
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3318      	adds	r3, #24
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe ff31 	bl	800b788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3304      	adds	r3, #4
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fe ff2c 	bl	800b788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c934:	4b2d      	ldr	r3, [pc, #180]	; (800c9ec <xTaskResumeAll+0x124>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d903      	bls.n	800c944 <xTaskResumeAll+0x7c>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	4a2a      	ldr	r2, [pc, #168]	; (800c9ec <xTaskResumeAll+0x124>)
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c948:	4613      	mov	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4a27      	ldr	r2, [pc, #156]	; (800c9f0 <xTaskResumeAll+0x128>)
 800c952:	441a      	add	r2, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	3304      	adds	r3, #4
 800c958:	4619      	mov	r1, r3
 800c95a:	4610      	mov	r0, r2
 800c95c:	f7fe feb7 	bl	800b6ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c964:	4b23      	ldr	r3, [pc, #140]	; (800c9f4 <xTaskResumeAll+0x12c>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d302      	bcc.n	800c974 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c96e:	4b22      	ldr	r3, [pc, #136]	; (800c9f8 <xTaskResumeAll+0x130>)
 800c970:	2201      	movs	r2, #1
 800c972:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c974:	4b1c      	ldr	r3, [pc, #112]	; (800c9e8 <xTaskResumeAll+0x120>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1cb      	bne.n	800c914 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c982:	f000 fb55 	bl	800d030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c986:	4b1d      	ldr	r3, [pc, #116]	; (800c9fc <xTaskResumeAll+0x134>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d010      	beq.n	800c9b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c992:	f000 f847 	bl	800ca24 <xTaskIncrementTick>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c99c:	4b16      	ldr	r3, [pc, #88]	; (800c9f8 <xTaskResumeAll+0x130>)
 800c99e:	2201      	movs	r2, #1
 800c9a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1f1      	bne.n	800c992 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c9ae:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <xTaskResumeAll+0x134>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c9b4:	4b10      	ldr	r3, [pc, #64]	; (800c9f8 <xTaskResumeAll+0x130>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d009      	beq.n	800c9d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ca00 <xTaskResumeAll+0x138>)
 800c9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c6:	601a      	str	r2, [r3, #0]
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9d0:	f001 f8d8 	bl	800db84 <vPortExitCritical>

	return xAlreadyYielded;
 800c9d4:	68bb      	ldr	r3, [r7, #8]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	20001aa0 	.word	0x20001aa0
 800c9e4:	20001a78 	.word	0x20001a78
 800c9e8:	20001a38 	.word	0x20001a38
 800c9ec:	20001a80 	.word	0x20001a80
 800c9f0:	200015a8 	.word	0x200015a8
 800c9f4:	200015a4 	.word	0x200015a4
 800c9f8:	20001a8c 	.word	0x20001a8c
 800c9fc:	20001a88 	.word	0x20001a88
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca0a:	4b05      	ldr	r3, [pc, #20]	; (800ca20 <xTaskGetTickCount+0x1c>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca10:	687b      	ldr	r3, [r7, #4]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	20001a7c 	.word	0x20001a7c

0800ca24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca2e:	4b4f      	ldr	r3, [pc, #316]	; (800cb6c <xTaskIncrementTick+0x148>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f040 808f 	bne.w	800cb56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca38:	4b4d      	ldr	r3, [pc, #308]	; (800cb70 <xTaskIncrementTick+0x14c>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca40:	4a4b      	ldr	r2, [pc, #300]	; (800cb70 <xTaskIncrementTick+0x14c>)
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d120      	bne.n	800ca8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca4c:	4b49      	ldr	r3, [pc, #292]	; (800cb74 <xTaskIncrementTick+0x150>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <xTaskIncrementTick+0x48>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	603b      	str	r3, [r7, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	e7fe      	b.n	800ca6a <xTaskIncrementTick+0x46>
 800ca6c:	4b41      	ldr	r3, [pc, #260]	; (800cb74 <xTaskIncrementTick+0x150>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	60fb      	str	r3, [r7, #12]
 800ca72:	4b41      	ldr	r3, [pc, #260]	; (800cb78 <xTaskIncrementTick+0x154>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a3f      	ldr	r2, [pc, #252]	; (800cb74 <xTaskIncrementTick+0x150>)
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	4a3f      	ldr	r2, [pc, #252]	; (800cb78 <xTaskIncrementTick+0x154>)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6013      	str	r3, [r2, #0]
 800ca80:	4b3e      	ldr	r3, [pc, #248]	; (800cb7c <xTaskIncrementTick+0x158>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	3301      	adds	r3, #1
 800ca86:	4a3d      	ldr	r2, [pc, #244]	; (800cb7c <xTaskIncrementTick+0x158>)
 800ca88:	6013      	str	r3, [r2, #0]
 800ca8a:	f000 fad1 	bl	800d030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca8e:	4b3c      	ldr	r3, [pc, #240]	; (800cb80 <xTaskIncrementTick+0x15c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	693a      	ldr	r2, [r7, #16]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d349      	bcc.n	800cb2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca98:	4b36      	ldr	r3, [pc, #216]	; (800cb74 <xTaskIncrementTick+0x150>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d104      	bne.n	800caac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caa2:	4b37      	ldr	r3, [pc, #220]	; (800cb80 <xTaskIncrementTick+0x15c>)
 800caa4:	f04f 32ff 	mov.w	r2, #4294967295
 800caa8:	601a      	str	r2, [r3, #0]
					break;
 800caaa:	e03f      	b.n	800cb2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caac:	4b31      	ldr	r3, [pc, #196]	; (800cb74 <xTaskIncrementTick+0x150>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d203      	bcs.n	800cacc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cac4:	4a2e      	ldr	r2, [pc, #184]	; (800cb80 <xTaskIncrementTick+0x15c>)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800caca:	e02f      	b.n	800cb2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	3304      	adds	r3, #4
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe fe59 	bl	800b788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d004      	beq.n	800cae8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	3318      	adds	r3, #24
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe fe50 	bl	800b788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caec:	4b25      	ldr	r3, [pc, #148]	; (800cb84 <xTaskIncrementTick+0x160>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d903      	bls.n	800cafc <xTaskIncrementTick+0xd8>
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf8:	4a22      	ldr	r2, [pc, #136]	; (800cb84 <xTaskIncrementTick+0x160>)
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb00:	4613      	mov	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4a1f      	ldr	r2, [pc, #124]	; (800cb88 <xTaskIncrementTick+0x164>)
 800cb0a:	441a      	add	r2, r3
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4619      	mov	r1, r3
 800cb12:	4610      	mov	r0, r2
 800cb14:	f7fe fddb 	bl	800b6ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	4b1b      	ldr	r3, [pc, #108]	; (800cb8c <xTaskIncrementTick+0x168>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d3b8      	bcc.n	800ca98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cb26:	2301      	movs	r3, #1
 800cb28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb2a:	e7b5      	b.n	800ca98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb2c:	4b17      	ldr	r3, [pc, #92]	; (800cb8c <xTaskIncrementTick+0x168>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb32:	4915      	ldr	r1, [pc, #84]	; (800cb88 <xTaskIncrementTick+0x164>)
 800cb34:	4613      	mov	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	440b      	add	r3, r1
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d901      	bls.n	800cb48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cb44:	2301      	movs	r3, #1
 800cb46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cb48:	4b11      	ldr	r3, [pc, #68]	; (800cb90 <xTaskIncrementTick+0x16c>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d007      	beq.n	800cb60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cb50:	2301      	movs	r3, #1
 800cb52:	617b      	str	r3, [r7, #20]
 800cb54:	e004      	b.n	800cb60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb56:	4b0f      	ldr	r3, [pc, #60]	; (800cb94 <xTaskIncrementTick+0x170>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	4a0d      	ldr	r2, [pc, #52]	; (800cb94 <xTaskIncrementTick+0x170>)
 800cb5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cb60:	697b      	ldr	r3, [r7, #20]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3718      	adds	r7, #24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	20001aa0 	.word	0x20001aa0
 800cb70:	20001a7c 	.word	0x20001a7c
 800cb74:	20001a30 	.word	0x20001a30
 800cb78:	20001a34 	.word	0x20001a34
 800cb7c:	20001a90 	.word	0x20001a90
 800cb80:	20001a98 	.word	0x20001a98
 800cb84:	20001a80 	.word	0x20001a80
 800cb88:	200015a8 	.word	0x200015a8
 800cb8c:	200015a4 	.word	0x200015a4
 800cb90:	20001a8c 	.word	0x20001a8c
 800cb94:	20001a88 	.word	0x20001a88

0800cb98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb9e:	4b28      	ldr	r3, [pc, #160]	; (800cc40 <vTaskSwitchContext+0xa8>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d003      	beq.n	800cbae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cba6:	4b27      	ldr	r3, [pc, #156]	; (800cc44 <vTaskSwitchContext+0xac>)
 800cba8:	2201      	movs	r2, #1
 800cbaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cbac:	e041      	b.n	800cc32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800cbae:	4b25      	ldr	r3, [pc, #148]	; (800cc44 <vTaskSwitchContext+0xac>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb4:	4b24      	ldr	r3, [pc, #144]	; (800cc48 <vTaskSwitchContext+0xb0>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	60fb      	str	r3, [r7, #12]
 800cbba:	e010      	b.n	800cbde <vTaskSwitchContext+0x46>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <vTaskSwitchContext+0x40>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	607b      	str	r3, [r7, #4]
}
 800cbd4:	bf00      	nop
 800cbd6:	e7fe      	b.n	800cbd6 <vTaskSwitchContext+0x3e>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	60fb      	str	r3, [r7, #12]
 800cbde:	491b      	ldr	r1, [pc, #108]	; (800cc4c <vTaskSwitchContext+0xb4>)
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	440b      	add	r3, r1
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0e4      	beq.n	800cbbc <vTaskSwitchContext+0x24>
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4a13      	ldr	r2, [pc, #76]	; (800cc4c <vTaskSwitchContext+0xb4>)
 800cbfe:	4413      	add	r3, r2
 800cc00:	60bb      	str	r3, [r7, #8]
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	685a      	ldr	r2, [r3, #4]
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	605a      	str	r2, [r3, #4]
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	3308      	adds	r3, #8
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d104      	bne.n	800cc22 <vTaskSwitchContext+0x8a>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	685a      	ldr	r2, [r3, #4]
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	605a      	str	r2, [r3, #4]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	4a09      	ldr	r2, [pc, #36]	; (800cc50 <vTaskSwitchContext+0xb8>)
 800cc2a:	6013      	str	r3, [r2, #0]
 800cc2c:	4a06      	ldr	r2, [pc, #24]	; (800cc48 <vTaskSwitchContext+0xb0>)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6013      	str	r3, [r2, #0]
}
 800cc32:	bf00      	nop
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	20001aa0 	.word	0x20001aa0
 800cc44:	20001a8c 	.word	0x20001a8c
 800cc48:	20001a80 	.word	0x20001a80
 800cc4c:	200015a8 	.word	0x200015a8
 800cc50:	200015a4 	.word	0x200015a4

0800cc54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10a      	bne.n	800cc7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	60fb      	str	r3, [r7, #12]
}
 800cc76:	bf00      	nop
 800cc78:	e7fe      	b.n	800cc78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc7a:	4b07      	ldr	r3, [pc, #28]	; (800cc98 <vTaskPlaceOnEventList+0x44>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3318      	adds	r3, #24
 800cc80:	4619      	mov	r1, r3
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7fe fd47 	bl	800b716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc88:	2101      	movs	r1, #1
 800cc8a:	6838      	ldr	r0, [r7, #0]
 800cc8c:	f000 fa7c 	bl	800d188 <prvAddCurrentTaskToDelayedList>
}
 800cc90:	bf00      	nop
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	200015a4 	.word	0x200015a4

0800cc9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10a      	bne.n	800ccc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	617b      	str	r3, [r7, #20]
}
 800ccc0:	bf00      	nop
 800ccc2:	e7fe      	b.n	800ccc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccc4:	4b0a      	ldr	r3, [pc, #40]	; (800ccf0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3318      	adds	r3, #24
 800ccca:	4619      	mov	r1, r3
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7fe fcfe 	bl	800b6ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ccd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	68b8      	ldr	r0, [r7, #8]
 800cce2:	f000 fa51 	bl	800d188 <prvAddCurrentTaskToDelayedList>
	}
 800cce6:	bf00      	nop
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	200015a4 	.word	0x200015a4

0800ccf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10a      	bne.n	800cd20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0e:	f383 8811 	msr	BASEPRI, r3
 800cd12:	f3bf 8f6f 	isb	sy
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	60fb      	str	r3, [r7, #12]
}
 800cd1c:	bf00      	nop
 800cd1e:	e7fe      	b.n	800cd1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	3318      	adds	r3, #24
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fe fd2f 	bl	800b788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd2a:	4b1e      	ldr	r3, [pc, #120]	; (800cda4 <xTaskRemoveFromEventList+0xb0>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d11d      	bne.n	800cd6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	3304      	adds	r3, #4
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fe fd26 	bl	800b788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd40:	4b19      	ldr	r3, [pc, #100]	; (800cda8 <xTaskRemoveFromEventList+0xb4>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d903      	bls.n	800cd50 <xTaskRemoveFromEventList+0x5c>
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4c:	4a16      	ldr	r2, [pc, #88]	; (800cda8 <xTaskRemoveFromEventList+0xb4>)
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd54:	4613      	mov	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4a13      	ldr	r2, [pc, #76]	; (800cdac <xTaskRemoveFromEventList+0xb8>)
 800cd5e:	441a      	add	r2, r3
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	3304      	adds	r3, #4
 800cd64:	4619      	mov	r1, r3
 800cd66:	4610      	mov	r0, r2
 800cd68:	f7fe fcb1 	bl	800b6ce <vListInsertEnd>
 800cd6c:	e005      	b.n	800cd7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	3318      	adds	r3, #24
 800cd72:	4619      	mov	r1, r3
 800cd74:	480e      	ldr	r0, [pc, #56]	; (800cdb0 <xTaskRemoveFromEventList+0xbc>)
 800cd76:	f7fe fcaa 	bl	800b6ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7e:	4b0d      	ldr	r3, [pc, #52]	; (800cdb4 <xTaskRemoveFromEventList+0xc0>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d905      	bls.n	800cd94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd8c:	4b0a      	ldr	r3, [pc, #40]	; (800cdb8 <xTaskRemoveFromEventList+0xc4>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	e001      	b.n	800cd98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cd94:	2300      	movs	r3, #0
 800cd96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd98:	697b      	ldr	r3, [r7, #20]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20001aa0 	.word	0x20001aa0
 800cda8:	20001a80 	.word	0x20001a80
 800cdac:	200015a8 	.word	0x200015a8
 800cdb0:	20001a38 	.word	0x20001a38
 800cdb4:	200015a4 	.word	0x200015a4
 800cdb8:	20001a8c 	.word	0x20001a8c

0800cdbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cdc4:	4b06      	ldr	r3, [pc, #24]	; (800cde0 <vTaskInternalSetTimeOutState+0x24>)
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cdcc:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <vTaskInternalSetTimeOutState+0x28>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	605a      	str	r2, [r3, #4]
}
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr
 800cde0:	20001a90 	.word	0x20001a90
 800cde4:	20001a7c 	.word	0x20001a7c

0800cde8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10a      	bne.n	800ce0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	613b      	str	r3, [r7, #16]
}
 800ce0a:	bf00      	nop
 800ce0c:	e7fe      	b.n	800ce0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10a      	bne.n	800ce2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ce14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	60fb      	str	r3, [r7, #12]
}
 800ce26:	bf00      	nop
 800ce28:	e7fe      	b.n	800ce28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ce2a:	f000 fe7b 	bl	800db24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce2e:	4b1d      	ldr	r3, [pc, #116]	; (800cea4 <xTaskCheckForTimeOut+0xbc>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	69ba      	ldr	r2, [r7, #24]
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce46:	d102      	bne.n	800ce4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	61fb      	str	r3, [r7, #28]
 800ce4c:	e023      	b.n	800ce96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <xTaskCheckForTimeOut+0xc0>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d007      	beq.n	800ce6a <xTaskCheckForTimeOut+0x82>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	69ba      	ldr	r2, [r7, #24]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d302      	bcc.n	800ce6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce64:	2301      	movs	r3, #1
 800ce66:	61fb      	str	r3, [r7, #28]
 800ce68:	e015      	b.n	800ce96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d20b      	bcs.n	800ce8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	1ad2      	subs	r2, r2, r3
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff ff9b 	bl	800cdbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	61fb      	str	r3, [r7, #28]
 800ce8a:	e004      	b.n	800ce96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce92:	2301      	movs	r3, #1
 800ce94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce96:	f000 fe75 	bl	800db84 <vPortExitCritical>

	return xReturn;
 800ce9a:	69fb      	ldr	r3, [r7, #28]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3720      	adds	r7, #32
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	20001a7c 	.word	0x20001a7c
 800cea8:	20001a90 	.word	0x20001a90

0800ceac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ceb0:	4b03      	ldr	r3, [pc, #12]	; (800cec0 <vTaskMissedYield+0x14>)
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	601a      	str	r2, [r3, #0]
}
 800ceb6:	bf00      	nop
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	20001a8c 	.word	0x20001a8c

0800cec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cecc:	f000 f852 	bl	800cf74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ced0:	4b06      	ldr	r3, [pc, #24]	; (800ceec <prvIdleTask+0x28>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d9f9      	bls.n	800cecc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ced8:	4b05      	ldr	r3, [pc, #20]	; (800cef0 <prvIdleTask+0x2c>)
 800ceda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cee8:	e7f0      	b.n	800cecc <prvIdleTask+0x8>
 800ceea:	bf00      	nop
 800ceec:	200015a8 	.word	0x200015a8
 800cef0:	e000ed04 	.word	0xe000ed04

0800cef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cefa:	2300      	movs	r3, #0
 800cefc:	607b      	str	r3, [r7, #4]
 800cefe:	e00c      	b.n	800cf1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4a12      	ldr	r2, [pc, #72]	; (800cf54 <prvInitialiseTaskLists+0x60>)
 800cf0c:	4413      	add	r3, r2
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fe fbb0 	bl	800b674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3301      	adds	r3, #1
 800cf18:	607b      	str	r3, [r7, #4]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b37      	cmp	r3, #55	; 0x37
 800cf1e:	d9ef      	bls.n	800cf00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf20:	480d      	ldr	r0, [pc, #52]	; (800cf58 <prvInitialiseTaskLists+0x64>)
 800cf22:	f7fe fba7 	bl	800b674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf26:	480d      	ldr	r0, [pc, #52]	; (800cf5c <prvInitialiseTaskLists+0x68>)
 800cf28:	f7fe fba4 	bl	800b674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf2c:	480c      	ldr	r0, [pc, #48]	; (800cf60 <prvInitialiseTaskLists+0x6c>)
 800cf2e:	f7fe fba1 	bl	800b674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf32:	480c      	ldr	r0, [pc, #48]	; (800cf64 <prvInitialiseTaskLists+0x70>)
 800cf34:	f7fe fb9e 	bl	800b674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf38:	480b      	ldr	r0, [pc, #44]	; (800cf68 <prvInitialiseTaskLists+0x74>)
 800cf3a:	f7fe fb9b 	bl	800b674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf3e:	4b0b      	ldr	r3, [pc, #44]	; (800cf6c <prvInitialiseTaskLists+0x78>)
 800cf40:	4a05      	ldr	r2, [pc, #20]	; (800cf58 <prvInitialiseTaskLists+0x64>)
 800cf42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf44:	4b0a      	ldr	r3, [pc, #40]	; (800cf70 <prvInitialiseTaskLists+0x7c>)
 800cf46:	4a05      	ldr	r2, [pc, #20]	; (800cf5c <prvInitialiseTaskLists+0x68>)
 800cf48:	601a      	str	r2, [r3, #0]
}
 800cf4a:	bf00      	nop
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	200015a8 	.word	0x200015a8
 800cf58:	20001a08 	.word	0x20001a08
 800cf5c:	20001a1c 	.word	0x20001a1c
 800cf60:	20001a38 	.word	0x20001a38
 800cf64:	20001a4c 	.word	0x20001a4c
 800cf68:	20001a64 	.word	0x20001a64
 800cf6c:	20001a30 	.word	0x20001a30
 800cf70:	20001a34 	.word	0x20001a34

0800cf74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf7a:	e019      	b.n	800cfb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf7c:	f000 fdd2 	bl	800db24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf80:	4b10      	ldr	r3, [pc, #64]	; (800cfc4 <prvCheckTasksWaitingTermination+0x50>)
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fe fbfb 	bl	800b788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf92:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <prvCheckTasksWaitingTermination+0x54>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3b01      	subs	r3, #1
 800cf98:	4a0b      	ldr	r2, [pc, #44]	; (800cfc8 <prvCheckTasksWaitingTermination+0x54>)
 800cf9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf9c:	4b0b      	ldr	r3, [pc, #44]	; (800cfcc <prvCheckTasksWaitingTermination+0x58>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	4a0a      	ldr	r2, [pc, #40]	; (800cfcc <prvCheckTasksWaitingTermination+0x58>)
 800cfa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cfa6:	f000 fded 	bl	800db84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f810 	bl	800cfd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfb0:	4b06      	ldr	r3, [pc, #24]	; (800cfcc <prvCheckTasksWaitingTermination+0x58>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1e1      	bne.n	800cf7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cfb8:	bf00      	nop
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	20001a4c 	.word	0x20001a4c
 800cfc8:	20001a78 	.word	0x20001a78
 800cfcc:	20001a60 	.word	0x20001a60

0800cfd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d108      	bne.n	800cff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 ff8a 	bl	800df00 <vPortFree>
				vPortFree( pxTCB );
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 ff87 	bl	800df00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cff2:	e018      	b.n	800d026 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d103      	bne.n	800d006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 ff7e 	bl	800df00 <vPortFree>
	}
 800d004:	e00f      	b.n	800d026 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d00a      	beq.n	800d026 <prvDeleteTCB+0x56>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	60fb      	str	r3, [r7, #12]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <prvDeleteTCB+0x54>
	}
 800d026:	bf00      	nop
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
	...

0800d030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d036:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <prvResetNextTaskUnblockTime+0x38>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d104      	bne.n	800d04a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d040:	4b0a      	ldr	r3, [pc, #40]	; (800d06c <prvResetNextTaskUnblockTime+0x3c>)
 800d042:	f04f 32ff 	mov.w	r2, #4294967295
 800d046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d048:	e008      	b.n	800d05c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d04a:	4b07      	ldr	r3, [pc, #28]	; (800d068 <prvResetNextTaskUnblockTime+0x38>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	4a04      	ldr	r2, [pc, #16]	; (800d06c <prvResetNextTaskUnblockTime+0x3c>)
 800d05a:	6013      	str	r3, [r2, #0]
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	20001a30 	.word	0x20001a30
 800d06c:	20001a98 	.word	0x20001a98

0800d070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d076:	4b0b      	ldr	r3, [pc, #44]	; (800d0a4 <xTaskGetSchedulerState+0x34>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d102      	bne.n	800d084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d07e:	2301      	movs	r3, #1
 800d080:	607b      	str	r3, [r7, #4]
 800d082:	e008      	b.n	800d096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d084:	4b08      	ldr	r3, [pc, #32]	; (800d0a8 <xTaskGetSchedulerState+0x38>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d102      	bne.n	800d092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d08c:	2302      	movs	r3, #2
 800d08e:	607b      	str	r3, [r7, #4]
 800d090:	e001      	b.n	800d096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d092:	2300      	movs	r3, #0
 800d094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d096:	687b      	ldr	r3, [r7, #4]
	}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	20001a84 	.word	0x20001a84
 800d0a8:	20001aa0 	.word	0x20001aa0

0800d0ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b086      	sub	sp, #24
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d056      	beq.n	800d170 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d0c2:	4b2e      	ldr	r3, [pc, #184]	; (800d17c <xTaskPriorityDisinherit+0xd0>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d00a      	beq.n	800d0e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	60fb      	str	r3, [r7, #12]
}
 800d0de:	bf00      	nop
 800d0e0:	e7fe      	b.n	800d0e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10a      	bne.n	800d100 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	60bb      	str	r3, [r7, #8]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d112:	429a      	cmp	r2, r3
 800d114:	d02c      	beq.n	800d170 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d128      	bne.n	800d170 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	3304      	adds	r3, #4
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe fb30 	bl	800b788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d134:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d140:	4b0f      	ldr	r3, [pc, #60]	; (800d180 <xTaskPriorityDisinherit+0xd4>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	429a      	cmp	r2, r3
 800d146:	d903      	bls.n	800d150 <xTaskPriorityDisinherit+0xa4>
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14c:	4a0c      	ldr	r2, [pc, #48]	; (800d180 <xTaskPriorityDisinherit+0xd4>)
 800d14e:	6013      	str	r3, [r2, #0]
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d154:	4613      	mov	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4413      	add	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4a09      	ldr	r2, [pc, #36]	; (800d184 <xTaskPriorityDisinherit+0xd8>)
 800d15e:	441a      	add	r2, r3
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	3304      	adds	r3, #4
 800d164:	4619      	mov	r1, r3
 800d166:	4610      	mov	r0, r2
 800d168:	f7fe fab1 	bl	800b6ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d16c:	2301      	movs	r3, #1
 800d16e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d170:	697b      	ldr	r3, [r7, #20]
	}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	200015a4 	.word	0x200015a4
 800d180:	20001a80 	.word	0x20001a80
 800d184:	200015a8 	.word	0x200015a8

0800d188 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d192:	4b21      	ldr	r3, [pc, #132]	; (800d218 <prvAddCurrentTaskToDelayedList+0x90>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d198:	4b20      	ldr	r3, [pc, #128]	; (800d21c <prvAddCurrentTaskToDelayedList+0x94>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3304      	adds	r3, #4
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe faf2 	bl	800b788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1aa:	d10a      	bne.n	800d1c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d007      	beq.n	800d1c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1b2:	4b1a      	ldr	r3, [pc, #104]	; (800d21c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4819      	ldr	r0, [pc, #100]	; (800d220 <prvAddCurrentTaskToDelayedList+0x98>)
 800d1bc:	f7fe fa87 	bl	800b6ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d1c0:	e026      	b.n	800d210 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d1ca:	4b14      	ldr	r3, [pc, #80]	; (800d21c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	68ba      	ldr	r2, [r7, #8]
 800d1d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d209      	bcs.n	800d1ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1da:	4b12      	ldr	r3, [pc, #72]	; (800d224 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	f7fe fa95 	bl	800b716 <vListInsert>
}
 800d1ec:	e010      	b.n	800d210 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1ee:	4b0e      	ldr	r3, [pc, #56]	; (800d228 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	f7fe fa8b 	bl	800b716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d200:	4b0a      	ldr	r3, [pc, #40]	; (800d22c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	429a      	cmp	r2, r3
 800d208:	d202      	bcs.n	800d210 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d20a:	4a08      	ldr	r2, [pc, #32]	; (800d22c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	6013      	str	r3, [r2, #0]
}
 800d210:	bf00      	nop
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	20001a7c 	.word	0x20001a7c
 800d21c:	200015a4 	.word	0x200015a4
 800d220:	20001a64 	.word	0x20001a64
 800d224:	20001a34 	.word	0x20001a34
 800d228:	20001a30 	.word	0x20001a30
 800d22c:	20001a98 	.word	0x20001a98

0800d230 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08a      	sub	sp, #40	; 0x28
 800d234:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d236:	2300      	movs	r3, #0
 800d238:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d23a:	f000 fb07 	bl	800d84c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d23e:	4b1c      	ldr	r3, [pc, #112]	; (800d2b0 <xTimerCreateTimerTask+0x80>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d021      	beq.n	800d28a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d246:	2300      	movs	r3, #0
 800d248:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d24e:	1d3a      	adds	r2, r7, #4
 800d250:	f107 0108 	add.w	r1, r7, #8
 800d254:	f107 030c 	add.w	r3, r7, #12
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe f9f1 	bl	800b640 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	9202      	str	r2, [sp, #8]
 800d266:	9301      	str	r3, [sp, #4]
 800d268:	2302      	movs	r3, #2
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	2300      	movs	r3, #0
 800d26e:	460a      	mov	r2, r1
 800d270:	4910      	ldr	r1, [pc, #64]	; (800d2b4 <xTimerCreateTimerTask+0x84>)
 800d272:	4811      	ldr	r0, [pc, #68]	; (800d2b8 <xTimerCreateTimerTask+0x88>)
 800d274:	f7fe ffd8 	bl	800c228 <xTaskCreateStatic>
 800d278:	4603      	mov	r3, r0
 800d27a:	4a10      	ldr	r2, [pc, #64]	; (800d2bc <xTimerCreateTimerTask+0x8c>)
 800d27c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d27e:	4b0f      	ldr	r3, [pc, #60]	; (800d2bc <xTimerCreateTimerTask+0x8c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d286:	2301      	movs	r3, #1
 800d288:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10a      	bne.n	800d2a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	613b      	str	r3, [r7, #16]
}
 800d2a2:	bf00      	nop
 800d2a4:	e7fe      	b.n	800d2a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d2a6:	697b      	ldr	r3, [r7, #20]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20001ad4 	.word	0x20001ad4
 800d2b4:	0800f69c 	.word	0x0800f69c
 800d2b8:	0800d3f5 	.word	0x0800d3f5
 800d2bc:	20001ad8 	.word	0x20001ad8

0800d2c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08a      	sub	sp, #40	; 0x28
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	623b      	str	r3, [r7, #32]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d2ee:	4b1a      	ldr	r3, [pc, #104]	; (800d358 <xTimerGenericCommand+0x98>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d02a      	beq.n	800d34c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	2b05      	cmp	r3, #5
 800d306:	dc18      	bgt.n	800d33a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d308:	f7ff feb2 	bl	800d070 <xTaskGetSchedulerState>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d109      	bne.n	800d326 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d312:	4b11      	ldr	r3, [pc, #68]	; (800d358 <xTimerGenericCommand+0x98>)
 800d314:	6818      	ldr	r0, [r3, #0]
 800d316:	f107 0110 	add.w	r1, r7, #16
 800d31a:	2300      	movs	r3, #0
 800d31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d31e:	f7fe fb9b 	bl	800ba58 <xQueueGenericSend>
 800d322:	6278      	str	r0, [r7, #36]	; 0x24
 800d324:	e012      	b.n	800d34c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <xTimerGenericCommand+0x98>)
 800d328:	6818      	ldr	r0, [r3, #0]
 800d32a:	f107 0110 	add.w	r1, r7, #16
 800d32e:	2300      	movs	r3, #0
 800d330:	2200      	movs	r2, #0
 800d332:	f7fe fb91 	bl	800ba58 <xQueueGenericSend>
 800d336:	6278      	str	r0, [r7, #36]	; 0x24
 800d338:	e008      	b.n	800d34c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d33a:	4b07      	ldr	r3, [pc, #28]	; (800d358 <xTimerGenericCommand+0x98>)
 800d33c:	6818      	ldr	r0, [r3, #0]
 800d33e:	f107 0110 	add.w	r1, r7, #16
 800d342:	2300      	movs	r3, #0
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	f7fe fc85 	bl	800bc54 <xQueueGenericSendFromISR>
 800d34a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3728      	adds	r7, #40	; 0x28
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20001ad4 	.word	0x20001ad4

0800d35c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b088      	sub	sp, #32
 800d360:	af02      	add	r7, sp, #8
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d366:	4b22      	ldr	r3, [pc, #136]	; (800d3f0 <prvProcessExpiredTimer+0x94>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	3304      	adds	r3, #4
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fa07 	bl	800b788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b00      	cmp	r3, #0
 800d386:	d022      	beq.n	800d3ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	699a      	ldr	r2, [r3, #24]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	18d1      	adds	r1, r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	6978      	ldr	r0, [r7, #20]
 800d396:	f000 f8d1 	bl	800d53c <prvInsertTimerInActiveList>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d01f      	beq.n	800d3e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	6978      	ldr	r0, [r7, #20]
 800d3ac:	f7ff ff88 	bl	800d2c0 <xTimerGenericCommand>
 800d3b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d113      	bne.n	800d3e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	60fb      	str	r3, [r7, #12]
}
 800d3ca:	bf00      	nop
 800d3cc:	e7fe      	b.n	800d3cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3d4:	f023 0301 	bic.w	r3, r3, #1
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	6978      	ldr	r0, [r7, #20]
 800d3e6:	4798      	blx	r3
}
 800d3e8:	bf00      	nop
 800d3ea:	3718      	adds	r7, #24
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	20001acc 	.word	0x20001acc

0800d3f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3fc:	f107 0308 	add.w	r3, r7, #8
 800d400:	4618      	mov	r0, r3
 800d402:	f000 f857 	bl	800d4b4 <prvGetNextExpireTime>
 800d406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	4619      	mov	r1, r3
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f000 f803 	bl	800d418 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d412:	f000 f8d5 	bl	800d5c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d416:	e7f1      	b.n	800d3fc <prvTimerTask+0x8>

0800d418 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d422:	f7ff fa43 	bl	800c8ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d426:	f107 0308 	add.w	r3, r7, #8
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 f866 	bl	800d4fc <prvSampleTimeNow>
 800d430:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d130      	bne.n	800d49a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10a      	bne.n	800d454 <prvProcessTimerOrBlockTask+0x3c>
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	429a      	cmp	r2, r3
 800d444:	d806      	bhi.n	800d454 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d446:	f7ff fa3f 	bl	800c8c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d44a:	68f9      	ldr	r1, [r7, #12]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff ff85 	bl	800d35c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d452:	e024      	b.n	800d49e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d008      	beq.n	800d46c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d45a:	4b13      	ldr	r3, [pc, #76]	; (800d4a8 <prvProcessTimerOrBlockTask+0x90>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <prvProcessTimerOrBlockTask+0x50>
 800d464:	2301      	movs	r3, #1
 800d466:	e000      	b.n	800d46a <prvProcessTimerOrBlockTask+0x52>
 800d468:	2300      	movs	r3, #0
 800d46a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d46c:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <prvProcessTimerOrBlockTask+0x94>)
 800d46e:	6818      	ldr	r0, [r3, #0]
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	4619      	mov	r1, r3
 800d47a:	f7fe fea1 	bl	800c1c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d47e:	f7ff fa23 	bl	800c8c8 <xTaskResumeAll>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10a      	bne.n	800d49e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d488:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <prvProcessTimerOrBlockTask+0x98>)
 800d48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	f3bf 8f6f 	isb	sy
}
 800d498:	e001      	b.n	800d49e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d49a:	f7ff fa15 	bl	800c8c8 <xTaskResumeAll>
}
 800d49e:	bf00      	nop
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20001ad0 	.word	0x20001ad0
 800d4ac:	20001ad4 	.word	0x20001ad4
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d4bc:	4b0e      	ldr	r3, [pc, #56]	; (800d4f8 <prvGetNextExpireTime+0x44>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d101      	bne.n	800d4ca <prvGetNextExpireTime+0x16>
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	e000      	b.n	800d4cc <prvGetNextExpireTime+0x18>
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d105      	bne.n	800d4e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4d8:	4b07      	ldr	r3, [pc, #28]	; (800d4f8 <prvGetNextExpireTime+0x44>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	60fb      	str	r3, [r7, #12]
 800d4e2:	e001      	b.n	800d4e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	20001acc 	.word	0x20001acc

0800d4fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d504:	f7ff fa7e 	bl	800ca04 <xTaskGetTickCount>
 800d508:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d50a:	4b0b      	ldr	r3, [pc, #44]	; (800d538 <prvSampleTimeNow+0x3c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	429a      	cmp	r2, r3
 800d512:	d205      	bcs.n	800d520 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d514:	f000 f936 	bl	800d784 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	e002      	b.n	800d526 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d526:	4a04      	ldr	r2, [pc, #16]	; (800d538 <prvSampleTimeNow+0x3c>)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d52c:	68fb      	ldr	r3, [r7, #12]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20001adc 	.word	0x20001adc

0800d53c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d54a:	2300      	movs	r3, #0
 800d54c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	68ba      	ldr	r2, [r7, #8]
 800d552:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d812      	bhi.n	800d588 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	1ad2      	subs	r2, r2, r3
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d302      	bcc.n	800d576 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d570:	2301      	movs	r3, #1
 800d572:	617b      	str	r3, [r7, #20]
 800d574:	e01b      	b.n	800d5ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d576:	4b10      	ldr	r3, [pc, #64]	; (800d5b8 <prvInsertTimerInActiveList+0x7c>)
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	3304      	adds	r3, #4
 800d57e:	4619      	mov	r1, r3
 800d580:	4610      	mov	r0, r2
 800d582:	f7fe f8c8 	bl	800b716 <vListInsert>
 800d586:	e012      	b.n	800d5ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d206      	bcs.n	800d59e <prvInsertTimerInActiveList+0x62>
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	429a      	cmp	r2, r3
 800d596:	d302      	bcc.n	800d59e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d598:	2301      	movs	r3, #1
 800d59a:	617b      	str	r3, [r7, #20]
 800d59c:	e007      	b.n	800d5ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d59e:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <prvInsertTimerInActiveList+0x80>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	f7fe f8b4 	bl	800b716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d5ae:	697b      	ldr	r3, [r7, #20]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3718      	adds	r7, #24
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	20001ad0 	.word	0x20001ad0
 800d5bc:	20001acc 	.word	0x20001acc

0800d5c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08e      	sub	sp, #56	; 0x38
 800d5c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5c6:	e0ca      	b.n	800d75e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	da18      	bge.n	800d600 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d5ce:	1d3b      	adds	r3, r7, #4
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10a      	bne.n	800d5f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	61fb      	str	r3, [r7, #28]
}
 800d5ec:	bf00      	nop
 800d5ee:	e7fe      	b.n	800d5ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5f6:	6850      	ldr	r0, [r2, #4]
 800d5f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5fa:	6892      	ldr	r2, [r2, #8]
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	f2c0 80aa 	blt.w	800d75c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d004      	beq.n	800d61e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d616:	3304      	adds	r3, #4
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe f8b5 	bl	800b788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d61e:	463b      	mov	r3, r7
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff ff6b 	bl	800d4fc <prvSampleTimeNow>
 800d626:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b09      	cmp	r3, #9
 800d62c:	f200 8097 	bhi.w	800d75e <prvProcessReceivedCommands+0x19e>
 800d630:	a201      	add	r2, pc, #4	; (adr r2, 800d638 <prvProcessReceivedCommands+0x78>)
 800d632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d636:	bf00      	nop
 800d638:	0800d661 	.word	0x0800d661
 800d63c:	0800d661 	.word	0x0800d661
 800d640:	0800d661 	.word	0x0800d661
 800d644:	0800d6d5 	.word	0x0800d6d5
 800d648:	0800d6e9 	.word	0x0800d6e9
 800d64c:	0800d733 	.word	0x0800d733
 800d650:	0800d661 	.word	0x0800d661
 800d654:	0800d661 	.word	0x0800d661
 800d658:	0800d6d5 	.word	0x0800d6d5
 800d65c:	0800d6e9 	.word	0x0800d6e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d666:	f043 0301 	orr.w	r3, r3, #1
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	18d1      	adds	r1, r2, r3
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d680:	f7ff ff5c 	bl	800d53c <prvInsertTimerInActiveList>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d069      	beq.n	800d75e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68c:	6a1b      	ldr	r3, [r3, #32]
 800d68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d690:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d698:	f003 0304 	and.w	r3, r3, #4
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d05e      	beq.n	800d75e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d6a0:	68ba      	ldr	r2, [r7, #8]
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	441a      	add	r2, r3
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6b2:	f7ff fe05 	bl	800d2c0 <xTimerGenericCommand>
 800d6b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d14f      	bne.n	800d75e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	61bb      	str	r3, [r7, #24]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6da:	f023 0301 	bic.w	r3, r3, #1
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d6e6:	e03a      	b.n	800d75e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6ee:	f043 0301 	orr.w	r3, r3, #1
 800d6f2:	b2da      	uxtb	r2, r3
 800d6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d702:	699b      	ldr	r3, [r3, #24]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d10a      	bne.n	800d71e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	617b      	str	r3, [r7, #20]
}
 800d71a:	bf00      	nop
 800d71c:	e7fe      	b.n	800d71c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d720:	699a      	ldr	r2, [r3, #24]
 800d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d724:	18d1      	adds	r1, r2, r3
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d72c:	f7ff ff06 	bl	800d53c <prvInsertTimerInActiveList>
					break;
 800d730:	e015      	b.n	800d75e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d738:	f003 0302 	and.w	r3, r3, #2
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d103      	bne.n	800d748 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d742:	f000 fbdd 	bl	800df00 <vPortFree>
 800d746:	e00a      	b.n	800d75e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d74e:	f023 0301 	bic.w	r3, r3, #1
 800d752:	b2da      	uxtb	r2, r3
 800d754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d75a:	e000      	b.n	800d75e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d75c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d75e:	4b08      	ldr	r3, [pc, #32]	; (800d780 <prvProcessReceivedCommands+0x1c0>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	1d39      	adds	r1, r7, #4
 800d764:	2200      	movs	r2, #0
 800d766:	4618      	mov	r0, r3
 800d768:	f7fe fb10 	bl	800bd8c <xQueueReceive>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f47f af2a 	bne.w	800d5c8 <prvProcessReceivedCommands+0x8>
	}
}
 800d774:	bf00      	nop
 800d776:	bf00      	nop
 800d778:	3730      	adds	r7, #48	; 0x30
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	20001ad4 	.word	0x20001ad4

0800d784 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b088      	sub	sp, #32
 800d788:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d78a:	e048      	b.n	800d81e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d78c:	4b2d      	ldr	r3, [pc, #180]	; (800d844 <prvSwitchTimerLists+0xc0>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d796:	4b2b      	ldr	r3, [pc, #172]	; (800d844 <prvSwitchTimerLists+0xc0>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fd ffef 	bl	800b788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7b8:	f003 0304 	and.w	r3, r3, #4
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d02e      	beq.n	800d81e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	693a      	ldr	r2, [r7, #16]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d90e      	bls.n	800d7f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7de:	4b19      	ldr	r3, [pc, #100]	; (800d844 <prvSwitchTimerLists+0xc0>)
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	f7fd ff94 	bl	800b716 <vListInsert>
 800d7ee:	e016      	b.n	800d81e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	9300      	str	r3, [sp, #0]
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f7ff fd60 	bl	800d2c0 <xTimerGenericCommand>
 800d800:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10a      	bne.n	800d81e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	603b      	str	r3, [r7, #0]
}
 800d81a:	bf00      	nop
 800d81c:	e7fe      	b.n	800d81c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d81e:	4b09      	ldr	r3, [pc, #36]	; (800d844 <prvSwitchTimerLists+0xc0>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1b1      	bne.n	800d78c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d828:	4b06      	ldr	r3, [pc, #24]	; (800d844 <prvSwitchTimerLists+0xc0>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d82e:	4b06      	ldr	r3, [pc, #24]	; (800d848 <prvSwitchTimerLists+0xc4>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a04      	ldr	r2, [pc, #16]	; (800d844 <prvSwitchTimerLists+0xc0>)
 800d834:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d836:	4a04      	ldr	r2, [pc, #16]	; (800d848 <prvSwitchTimerLists+0xc4>)
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	6013      	str	r3, [r2, #0]
}
 800d83c:	bf00      	nop
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20001acc 	.word	0x20001acc
 800d848:	20001ad0 	.word	0x20001ad0

0800d84c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d852:	f000 f967 	bl	800db24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d856:	4b15      	ldr	r3, [pc, #84]	; (800d8ac <prvCheckForValidListAndQueue+0x60>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d120      	bne.n	800d8a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d85e:	4814      	ldr	r0, [pc, #80]	; (800d8b0 <prvCheckForValidListAndQueue+0x64>)
 800d860:	f7fd ff08 	bl	800b674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d864:	4813      	ldr	r0, [pc, #76]	; (800d8b4 <prvCheckForValidListAndQueue+0x68>)
 800d866:	f7fd ff05 	bl	800b674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d86a:	4b13      	ldr	r3, [pc, #76]	; (800d8b8 <prvCheckForValidListAndQueue+0x6c>)
 800d86c:	4a10      	ldr	r2, [pc, #64]	; (800d8b0 <prvCheckForValidListAndQueue+0x64>)
 800d86e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d870:	4b12      	ldr	r3, [pc, #72]	; (800d8bc <prvCheckForValidListAndQueue+0x70>)
 800d872:	4a10      	ldr	r2, [pc, #64]	; (800d8b4 <prvCheckForValidListAndQueue+0x68>)
 800d874:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d876:	2300      	movs	r3, #0
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	4b11      	ldr	r3, [pc, #68]	; (800d8c0 <prvCheckForValidListAndQueue+0x74>)
 800d87c:	4a11      	ldr	r2, [pc, #68]	; (800d8c4 <prvCheckForValidListAndQueue+0x78>)
 800d87e:	2110      	movs	r1, #16
 800d880:	200a      	movs	r0, #10
 800d882:	f7fe f813 	bl	800b8ac <xQueueGenericCreateStatic>
 800d886:	4603      	mov	r3, r0
 800d888:	4a08      	ldr	r2, [pc, #32]	; (800d8ac <prvCheckForValidListAndQueue+0x60>)
 800d88a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d88c:	4b07      	ldr	r3, [pc, #28]	; (800d8ac <prvCheckForValidListAndQueue+0x60>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d005      	beq.n	800d8a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d894:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <prvCheckForValidListAndQueue+0x60>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	490b      	ldr	r1, [pc, #44]	; (800d8c8 <prvCheckForValidListAndQueue+0x7c>)
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fe fc66 	bl	800c16c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8a0:	f000 f970 	bl	800db84 <vPortExitCritical>
}
 800d8a4:	bf00      	nop
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20001ad4 	.word	0x20001ad4
 800d8b0:	20001aa4 	.word	0x20001aa4
 800d8b4:	20001ab8 	.word	0x20001ab8
 800d8b8:	20001acc 	.word	0x20001acc
 800d8bc:	20001ad0 	.word	0x20001ad0
 800d8c0:	20001b80 	.word	0x20001b80
 800d8c4:	20001ae0 	.word	0x20001ae0
 800d8c8:	0800f6a4 	.word	0x0800f6a4

0800d8cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	3b04      	subs	r3, #4
 800d8dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d8e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	3b04      	subs	r3, #4
 800d8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	f023 0201 	bic.w	r2, r3, #1
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	3b04      	subs	r3, #4
 800d8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d8fc:	4a0c      	ldr	r2, [pc, #48]	; (800d930 <pxPortInitialiseStack+0x64>)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	3b14      	subs	r3, #20
 800d906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3b04      	subs	r3, #4
 800d912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f06f 0202 	mvn.w	r2, #2
 800d91a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3b20      	subs	r3, #32
 800d920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d922:	68fb      	ldr	r3, [r7, #12]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	0800d935 	.word	0x0800d935

0800d934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d93e:	4b12      	ldr	r3, [pc, #72]	; (800d988 <prvTaskExitError+0x54>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d946:	d00a      	beq.n	800d95e <prvTaskExitError+0x2a>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94c:	f383 8811 	msr	BASEPRI, r3
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	60fb      	str	r3, [r7, #12]
}
 800d95a:	bf00      	nop
 800d95c:	e7fe      	b.n	800d95c <prvTaskExitError+0x28>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	60bb      	str	r3, [r7, #8]
}
 800d970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d972:	bf00      	nop
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d0fc      	beq.n	800d974 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d97a:	bf00      	nop
 800d97c:	bf00      	nop
 800d97e:	3714      	adds	r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	2000059c 	.word	0x2000059c
 800d98c:	00000000 	.word	0x00000000

0800d990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d990:	4b07      	ldr	r3, [pc, #28]	; (800d9b0 <pxCurrentTCBConst2>)
 800d992:	6819      	ldr	r1, [r3, #0]
 800d994:	6808      	ldr	r0, [r1, #0]
 800d996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99a:	f380 8809 	msr	PSP, r0
 800d99e:	f3bf 8f6f 	isb	sy
 800d9a2:	f04f 0000 	mov.w	r0, #0
 800d9a6:	f380 8811 	msr	BASEPRI, r0
 800d9aa:	4770      	bx	lr
 800d9ac:	f3af 8000 	nop.w

0800d9b0 <pxCurrentTCBConst2>:
 800d9b0:	200015a4 	.word	0x200015a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d9b4:	bf00      	nop
 800d9b6:	bf00      	nop

0800d9b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d9b8:	4808      	ldr	r0, [pc, #32]	; (800d9dc <prvPortStartFirstTask+0x24>)
 800d9ba:	6800      	ldr	r0, [r0, #0]
 800d9bc:	6800      	ldr	r0, [r0, #0]
 800d9be:	f380 8808 	msr	MSP, r0
 800d9c2:	f04f 0000 	mov.w	r0, #0
 800d9c6:	f380 8814 	msr	CONTROL, r0
 800d9ca:	b662      	cpsie	i
 800d9cc:	b661      	cpsie	f
 800d9ce:	f3bf 8f4f 	dsb	sy
 800d9d2:	f3bf 8f6f 	isb	sy
 800d9d6:	df00      	svc	0
 800d9d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d9da:	bf00      	nop
 800d9dc:	e000ed08 	.word	0xe000ed08

0800d9e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d9e6:	4b46      	ldr	r3, [pc, #280]	; (800db00 <xPortStartScheduler+0x120>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a46      	ldr	r2, [pc, #280]	; (800db04 <xPortStartScheduler+0x124>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d10a      	bne.n	800da06 <xPortStartScheduler+0x26>
	__asm volatile
 800d9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	613b      	str	r3, [r7, #16]
}
 800da02:	bf00      	nop
 800da04:	e7fe      	b.n	800da04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da06:	4b3e      	ldr	r3, [pc, #248]	; (800db00 <xPortStartScheduler+0x120>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a3f      	ldr	r2, [pc, #252]	; (800db08 <xPortStartScheduler+0x128>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d10a      	bne.n	800da26 <xPortStartScheduler+0x46>
	__asm volatile
 800da10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da14:	f383 8811 	msr	BASEPRI, r3
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	f3bf 8f4f 	dsb	sy
 800da20:	60fb      	str	r3, [r7, #12]
}
 800da22:	bf00      	nop
 800da24:	e7fe      	b.n	800da24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da26:	4b39      	ldr	r3, [pc, #228]	; (800db0c <xPortStartScheduler+0x12c>)
 800da28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	22ff      	movs	r2, #255	; 0xff
 800da36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da40:	78fb      	ldrb	r3, [r7, #3]
 800da42:	b2db      	uxtb	r3, r3
 800da44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	4b31      	ldr	r3, [pc, #196]	; (800db10 <xPortStartScheduler+0x130>)
 800da4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da4e:	4b31      	ldr	r3, [pc, #196]	; (800db14 <xPortStartScheduler+0x134>)
 800da50:	2207      	movs	r2, #7
 800da52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da54:	e009      	b.n	800da6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800da56:	4b2f      	ldr	r3, [pc, #188]	; (800db14 <xPortStartScheduler+0x134>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	4a2d      	ldr	r2, [pc, #180]	; (800db14 <xPortStartScheduler+0x134>)
 800da5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	b2db      	uxtb	r3, r3
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	b2db      	uxtb	r3, r3
 800da68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da6a:	78fb      	ldrb	r3, [r7, #3]
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da72:	2b80      	cmp	r3, #128	; 0x80
 800da74:	d0ef      	beq.n	800da56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da76:	4b27      	ldr	r3, [pc, #156]	; (800db14 <xPortStartScheduler+0x134>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f1c3 0307 	rsb	r3, r3, #7
 800da7e:	2b04      	cmp	r3, #4
 800da80:	d00a      	beq.n	800da98 <xPortStartScheduler+0xb8>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	f383 8811 	msr	BASEPRI, r3
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	60bb      	str	r3, [r7, #8]
}
 800da94:	bf00      	nop
 800da96:	e7fe      	b.n	800da96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da98:	4b1e      	ldr	r3, [pc, #120]	; (800db14 <xPortStartScheduler+0x134>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	021b      	lsls	r3, r3, #8
 800da9e:	4a1d      	ldr	r2, [pc, #116]	; (800db14 <xPortStartScheduler+0x134>)
 800daa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800daa2:	4b1c      	ldr	r3, [pc, #112]	; (800db14 <xPortStartScheduler+0x134>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800daaa:	4a1a      	ldr	r2, [pc, #104]	; (800db14 <xPortStartScheduler+0x134>)
 800daac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dab6:	4b18      	ldr	r3, [pc, #96]	; (800db18 <xPortStartScheduler+0x138>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a17      	ldr	r2, [pc, #92]	; (800db18 <xPortStartScheduler+0x138>)
 800dabc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dac2:	4b15      	ldr	r3, [pc, #84]	; (800db18 <xPortStartScheduler+0x138>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a14      	ldr	r2, [pc, #80]	; (800db18 <xPortStartScheduler+0x138>)
 800dac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dacc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dace:	f000 f8dd 	bl	800dc8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dad2:	4b12      	ldr	r3, [pc, #72]	; (800db1c <xPortStartScheduler+0x13c>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dad8:	f000 f8fc 	bl	800dcd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dadc:	4b10      	ldr	r3, [pc, #64]	; (800db20 <xPortStartScheduler+0x140>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a0f      	ldr	r2, [pc, #60]	; (800db20 <xPortStartScheduler+0x140>)
 800dae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dae8:	f7ff ff66 	bl	800d9b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800daec:	f7ff f854 	bl	800cb98 <vTaskSwitchContext>
	prvTaskExitError();
 800daf0:	f7ff ff20 	bl	800d934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3718      	adds	r7, #24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	e000ed00 	.word	0xe000ed00
 800db04:	410fc271 	.word	0x410fc271
 800db08:	410fc270 	.word	0x410fc270
 800db0c:	e000e400 	.word	0xe000e400
 800db10:	20001bd0 	.word	0x20001bd0
 800db14:	20001bd4 	.word	0x20001bd4
 800db18:	e000ed20 	.word	0xe000ed20
 800db1c:	2000059c 	.word	0x2000059c
 800db20:	e000ef34 	.word	0xe000ef34

0800db24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
	__asm volatile
 800db2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2e:	f383 8811 	msr	BASEPRI, r3
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	f3bf 8f4f 	dsb	sy
 800db3a:	607b      	str	r3, [r7, #4]
}
 800db3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db3e:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <vPortEnterCritical+0x58>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	3301      	adds	r3, #1
 800db44:	4a0d      	ldr	r2, [pc, #52]	; (800db7c <vPortEnterCritical+0x58>)
 800db46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db48:	4b0c      	ldr	r3, [pc, #48]	; (800db7c <vPortEnterCritical+0x58>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d10f      	bne.n	800db70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db50:	4b0b      	ldr	r3, [pc, #44]	; (800db80 <vPortEnterCritical+0x5c>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	b2db      	uxtb	r3, r3
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00a      	beq.n	800db70 <vPortEnterCritical+0x4c>
	__asm volatile
 800db5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	603b      	str	r3, [r7, #0]
}
 800db6c:	bf00      	nop
 800db6e:	e7fe      	b.n	800db6e <vPortEnterCritical+0x4a>
	}
}
 800db70:	bf00      	nop
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	2000059c 	.word	0x2000059c
 800db80:	e000ed04 	.word	0xe000ed04

0800db84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db8a:	4b12      	ldr	r3, [pc, #72]	; (800dbd4 <vPortExitCritical+0x50>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10a      	bne.n	800dba8 <vPortExitCritical+0x24>
	__asm volatile
 800db92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db96:	f383 8811 	msr	BASEPRI, r3
 800db9a:	f3bf 8f6f 	isb	sy
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	607b      	str	r3, [r7, #4]
}
 800dba4:	bf00      	nop
 800dba6:	e7fe      	b.n	800dba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dba8:	4b0a      	ldr	r3, [pc, #40]	; (800dbd4 <vPortExitCritical+0x50>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	3b01      	subs	r3, #1
 800dbae:	4a09      	ldr	r2, [pc, #36]	; (800dbd4 <vPortExitCritical+0x50>)
 800dbb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dbb2:	4b08      	ldr	r3, [pc, #32]	; (800dbd4 <vPortExitCritical+0x50>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d105      	bne.n	800dbc6 <vPortExitCritical+0x42>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	f383 8811 	msr	BASEPRI, r3
}
 800dbc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dbc6:	bf00      	nop
 800dbc8:	370c      	adds	r7, #12
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	2000059c 	.word	0x2000059c
	...

0800dbe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dbe0:	f3ef 8009 	mrs	r0, PSP
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	4b15      	ldr	r3, [pc, #84]	; (800dc40 <pxCurrentTCBConst>)
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	f01e 0f10 	tst.w	lr, #16
 800dbf0:	bf08      	it	eq
 800dbf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dbf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfa:	6010      	str	r0, [r2, #0]
 800dbfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc04:	f380 8811 	msr	BASEPRI, r0
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f7fe ffc2 	bl	800cb98 <vTaskSwitchContext>
 800dc14:	f04f 0000 	mov.w	r0, #0
 800dc18:	f380 8811 	msr	BASEPRI, r0
 800dc1c:	bc09      	pop	{r0, r3}
 800dc1e:	6819      	ldr	r1, [r3, #0]
 800dc20:	6808      	ldr	r0, [r1, #0]
 800dc22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc26:	f01e 0f10 	tst.w	lr, #16
 800dc2a:	bf08      	it	eq
 800dc2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc30:	f380 8809 	msr	PSP, r0
 800dc34:	f3bf 8f6f 	isb	sy
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	f3af 8000 	nop.w

0800dc40 <pxCurrentTCBConst>:
 800dc40:	200015a4 	.word	0x200015a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop

0800dc48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc52:	f383 8811 	msr	BASEPRI, r3
 800dc56:	f3bf 8f6f 	isb	sy
 800dc5a:	f3bf 8f4f 	dsb	sy
 800dc5e:	607b      	str	r3, [r7, #4]
}
 800dc60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc62:	f7fe fedf 	bl	800ca24 <xTaskIncrementTick>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d003      	beq.n	800dc74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc6c:	4b06      	ldr	r3, [pc, #24]	; (800dc88 <xPortSysTickHandler+0x40>)
 800dc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	2300      	movs	r3, #0
 800dc76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	f383 8811 	msr	BASEPRI, r3
}
 800dc7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	e000ed04 	.word	0xe000ed04

0800dc8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc90:	4b0b      	ldr	r3, [pc, #44]	; (800dcc0 <vPortSetupTimerInterrupt+0x34>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc96:	4b0b      	ldr	r3, [pc, #44]	; (800dcc4 <vPortSetupTimerInterrupt+0x38>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc9c:	4b0a      	ldr	r3, [pc, #40]	; (800dcc8 <vPortSetupTimerInterrupt+0x3c>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a0a      	ldr	r2, [pc, #40]	; (800dccc <vPortSetupTimerInterrupt+0x40>)
 800dca2:	fba2 2303 	umull	r2, r3, r2, r3
 800dca6:	099b      	lsrs	r3, r3, #6
 800dca8:	4a09      	ldr	r2, [pc, #36]	; (800dcd0 <vPortSetupTimerInterrupt+0x44>)
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dcae:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <vPortSetupTimerInterrupt+0x34>)
 800dcb0:	2207      	movs	r2, #7
 800dcb2:	601a      	str	r2, [r3, #0]
}
 800dcb4:	bf00      	nop
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	e000e010 	.word	0xe000e010
 800dcc4:	e000e018 	.word	0xe000e018
 800dcc8:	20000504 	.word	0x20000504
 800dccc:	10624dd3 	.word	0x10624dd3
 800dcd0:	e000e014 	.word	0xe000e014

0800dcd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dcd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dce4 <vPortEnableVFP+0x10>
 800dcd8:	6801      	ldr	r1, [r0, #0]
 800dcda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dcde:	6001      	str	r1, [r0, #0]
 800dce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dce2:	bf00      	nop
 800dce4:	e000ed88 	.word	0xe000ed88

0800dce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dcee:	f3ef 8305 	mrs	r3, IPSR
 800dcf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2b0f      	cmp	r3, #15
 800dcf8:	d914      	bls.n	800dd24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dcfa:	4a17      	ldr	r2, [pc, #92]	; (800dd58 <vPortValidateInterruptPriority+0x70>)
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	4413      	add	r3, r2
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd04:	4b15      	ldr	r3, [pc, #84]	; (800dd5c <vPortValidateInterruptPriority+0x74>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	7afa      	ldrb	r2, [r7, #11]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d20a      	bcs.n	800dd24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	607b      	str	r3, [r7, #4]
}
 800dd20:	bf00      	nop
 800dd22:	e7fe      	b.n	800dd22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd24:	4b0e      	ldr	r3, [pc, #56]	; (800dd60 <vPortValidateInterruptPriority+0x78>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd2c:	4b0d      	ldr	r3, [pc, #52]	; (800dd64 <vPortValidateInterruptPriority+0x7c>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d90a      	bls.n	800dd4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	603b      	str	r3, [r7, #0]
}
 800dd46:	bf00      	nop
 800dd48:	e7fe      	b.n	800dd48 <vPortValidateInterruptPriority+0x60>
	}
 800dd4a:	bf00      	nop
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	e000e3f0 	.word	0xe000e3f0
 800dd5c:	20001bd0 	.word	0x20001bd0
 800dd60:	e000ed0c 	.word	0xe000ed0c
 800dd64:	20001bd4 	.word	0x20001bd4

0800dd68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08a      	sub	sp, #40	; 0x28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd70:	2300      	movs	r3, #0
 800dd72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd74:	f7fe fd9a 	bl	800c8ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd78:	4b5b      	ldr	r3, [pc, #364]	; (800dee8 <pvPortMalloc+0x180>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d101      	bne.n	800dd84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd80:	f000 f920 	bl	800dfc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd84:	4b59      	ldr	r3, [pc, #356]	; (800deec <pvPortMalloc+0x184>)
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f040 8093 	bne.w	800deb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d01d      	beq.n	800ddd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dd98:	2208      	movs	r2, #8
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f003 0307 	and.w	r3, r3, #7
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d014      	beq.n	800ddd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f023 0307 	bic.w	r3, r3, #7
 800ddb0:	3308      	adds	r3, #8
 800ddb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f003 0307 	and.w	r3, r3, #7
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00a      	beq.n	800ddd4 <pvPortMalloc+0x6c>
	__asm volatile
 800ddbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	617b      	str	r3, [r7, #20]
}
 800ddd0:	bf00      	nop
 800ddd2:	e7fe      	b.n	800ddd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d06e      	beq.n	800deb8 <pvPortMalloc+0x150>
 800ddda:	4b45      	ldr	r3, [pc, #276]	; (800def0 <pvPortMalloc+0x188>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d869      	bhi.n	800deb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dde4:	4b43      	ldr	r3, [pc, #268]	; (800def4 <pvPortMalloc+0x18c>)
 800dde6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dde8:	4b42      	ldr	r3, [pc, #264]	; (800def4 <pvPortMalloc+0x18c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddee:	e004      	b.n	800ddfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	429a      	cmp	r2, r3
 800de02:	d903      	bls.n	800de0c <pvPortMalloc+0xa4>
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1f1      	bne.n	800ddf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de0c:	4b36      	ldr	r3, [pc, #216]	; (800dee8 <pvPortMalloc+0x180>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de12:	429a      	cmp	r2, r3
 800de14:	d050      	beq.n	800deb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2208      	movs	r2, #8
 800de1c:	4413      	add	r3, r2
 800de1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	6a3b      	ldr	r3, [r7, #32]
 800de26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	1ad2      	subs	r2, r2, r3
 800de30:	2308      	movs	r3, #8
 800de32:	005b      	lsls	r3, r3, #1
 800de34:	429a      	cmp	r2, r3
 800de36:	d91f      	bls.n	800de78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4413      	add	r3, r2
 800de3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00a      	beq.n	800de60 <pvPortMalloc+0xf8>
	__asm volatile
 800de4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4e:	f383 8811 	msr	BASEPRI, r3
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	613b      	str	r3, [r7, #16]
}
 800de5c:	bf00      	nop
 800de5e:	e7fe      	b.n	800de5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	1ad2      	subs	r2, r2, r3
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de72:	69b8      	ldr	r0, [r7, #24]
 800de74:	f000 f908 	bl	800e088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de78:	4b1d      	ldr	r3, [pc, #116]	; (800def0 <pvPortMalloc+0x188>)
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	4a1b      	ldr	r2, [pc, #108]	; (800def0 <pvPortMalloc+0x188>)
 800de84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de86:	4b1a      	ldr	r3, [pc, #104]	; (800def0 <pvPortMalloc+0x188>)
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	4b1b      	ldr	r3, [pc, #108]	; (800def8 <pvPortMalloc+0x190>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d203      	bcs.n	800de9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de92:	4b17      	ldr	r3, [pc, #92]	; (800def0 <pvPortMalloc+0x188>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a18      	ldr	r2, [pc, #96]	; (800def8 <pvPortMalloc+0x190>)
 800de98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	685a      	ldr	r2, [r3, #4]
 800de9e:	4b13      	ldr	r3, [pc, #76]	; (800deec <pvPortMalloc+0x184>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	431a      	orrs	r2, r3
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deaa:	2200      	movs	r2, #0
 800deac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800deae:	4b13      	ldr	r3, [pc, #76]	; (800defc <pvPortMalloc+0x194>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	3301      	adds	r3, #1
 800deb4:	4a11      	ldr	r2, [pc, #68]	; (800defc <pvPortMalloc+0x194>)
 800deb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800deb8:	f7fe fd06 	bl	800c8c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	f003 0307 	and.w	r3, r3, #7
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00a      	beq.n	800dedc <pvPortMalloc+0x174>
	__asm volatile
 800dec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deca:	f383 8811 	msr	BASEPRI, r3
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f3bf 8f4f 	dsb	sy
 800ded6:	60fb      	str	r3, [r7, #12]
}
 800ded8:	bf00      	nop
 800deda:	e7fe      	b.n	800deda <pvPortMalloc+0x172>
	return pvReturn;
 800dedc:	69fb      	ldr	r3, [r7, #28]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3728      	adds	r7, #40	; 0x28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	200057e0 	.word	0x200057e0
 800deec:	200057f4 	.word	0x200057f4
 800def0:	200057e4 	.word	0x200057e4
 800def4:	200057d8 	.word	0x200057d8
 800def8:	200057e8 	.word	0x200057e8
 800defc:	200057ec 	.word	0x200057ec

0800df00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d04d      	beq.n	800dfae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df12:	2308      	movs	r3, #8
 800df14:	425b      	negs	r3, r3
 800df16:	697a      	ldr	r2, [r7, #20]
 800df18:	4413      	add	r3, r2
 800df1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	685a      	ldr	r2, [r3, #4]
 800df24:	4b24      	ldr	r3, [pc, #144]	; (800dfb8 <vPortFree+0xb8>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4013      	ands	r3, r2
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10a      	bne.n	800df44 <vPortFree+0x44>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	60fb      	str	r3, [r7, #12]
}
 800df40:	bf00      	nop
 800df42:	e7fe      	b.n	800df42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00a      	beq.n	800df62 <vPortFree+0x62>
	__asm volatile
 800df4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df50:	f383 8811 	msr	BASEPRI, r3
 800df54:	f3bf 8f6f 	isb	sy
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	60bb      	str	r3, [r7, #8]
}
 800df5e:	bf00      	nop
 800df60:	e7fe      	b.n	800df60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	685a      	ldr	r2, [r3, #4]
 800df66:	4b14      	ldr	r3, [pc, #80]	; (800dfb8 <vPortFree+0xb8>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4013      	ands	r3, r2
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d01e      	beq.n	800dfae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d11a      	bne.n	800dfae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	4b0e      	ldr	r3, [pc, #56]	; (800dfb8 <vPortFree+0xb8>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	43db      	mvns	r3, r3
 800df82:	401a      	ands	r2, r3
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df88:	f7fe fc90 	bl	800c8ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	685a      	ldr	r2, [r3, #4]
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <vPortFree+0xbc>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4413      	add	r3, r2
 800df96:	4a09      	ldr	r2, [pc, #36]	; (800dfbc <vPortFree+0xbc>)
 800df98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df9a:	6938      	ldr	r0, [r7, #16]
 800df9c:	f000 f874 	bl	800e088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dfa0:	4b07      	ldr	r3, [pc, #28]	; (800dfc0 <vPortFree+0xc0>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	4a06      	ldr	r2, [pc, #24]	; (800dfc0 <vPortFree+0xc0>)
 800dfa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dfaa:	f7fe fc8d 	bl	800c8c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dfae:	bf00      	nop
 800dfb0:	3718      	adds	r7, #24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	200057f4 	.word	0x200057f4
 800dfbc:	200057e4 	.word	0x200057e4
 800dfc0:	200057f0 	.word	0x200057f0

0800dfc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dfce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dfd0:	4b27      	ldr	r3, [pc, #156]	; (800e070 <prvHeapInit+0xac>)
 800dfd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f003 0307 	and.w	r3, r3, #7
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00c      	beq.n	800dff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3307      	adds	r3, #7
 800dfe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f023 0307 	bic.w	r3, r3, #7
 800dfea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	4a1f      	ldr	r2, [pc, #124]	; (800e070 <prvHeapInit+0xac>)
 800dff4:	4413      	add	r3, r2
 800dff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dffc:	4a1d      	ldr	r2, [pc, #116]	; (800e074 <prvHeapInit+0xb0>)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e002:	4b1c      	ldr	r3, [pc, #112]	; (800e074 <prvHeapInit+0xb0>)
 800e004:	2200      	movs	r2, #0
 800e006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	4413      	add	r3, r2
 800e00e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e010:	2208      	movs	r2, #8
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	1a9b      	subs	r3, r3, r2
 800e016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f023 0307 	bic.w	r3, r3, #7
 800e01e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4a15      	ldr	r2, [pc, #84]	; (800e078 <prvHeapInit+0xb4>)
 800e024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e026:	4b14      	ldr	r3, [pc, #80]	; (800e078 <prvHeapInit+0xb4>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2200      	movs	r2, #0
 800e02c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e02e:	4b12      	ldr	r3, [pc, #72]	; (800e078 <prvHeapInit+0xb4>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2200      	movs	r2, #0
 800e034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	1ad2      	subs	r2, r2, r3
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e044:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <prvHeapInit+0xb4>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	4a0a      	ldr	r2, [pc, #40]	; (800e07c <prvHeapInit+0xb8>)
 800e052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	4a09      	ldr	r2, [pc, #36]	; (800e080 <prvHeapInit+0xbc>)
 800e05a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e05c:	4b09      	ldr	r3, [pc, #36]	; (800e084 <prvHeapInit+0xc0>)
 800e05e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e062:	601a      	str	r2, [r3, #0]
}
 800e064:	bf00      	nop
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr
 800e070:	20001bd8 	.word	0x20001bd8
 800e074:	200057d8 	.word	0x200057d8
 800e078:	200057e0 	.word	0x200057e0
 800e07c:	200057e8 	.word	0x200057e8
 800e080:	200057e4 	.word	0x200057e4
 800e084:	200057f4 	.word	0x200057f4

0800e088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e090:	4b28      	ldr	r3, [pc, #160]	; (800e134 <prvInsertBlockIntoFreeList+0xac>)
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	e002      	b.n	800e09c <prvInsertBlockIntoFreeList+0x14>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	60fb      	str	r3, [r7, #12]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d8f7      	bhi.n	800e096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	68ba      	ldr	r2, [r7, #8]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d108      	bne.n	800e0ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	441a      	add	r2, r3
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	441a      	add	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d118      	bne.n	800e110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	4b15      	ldr	r3, [pc, #84]	; (800e138 <prvInsertBlockIntoFreeList+0xb0>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d00d      	beq.n	800e106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	441a      	add	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	e008      	b.n	800e118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e106:	4b0c      	ldr	r3, [pc, #48]	; (800e138 <prvInsertBlockIntoFreeList+0xb0>)
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	e003      	b.n	800e118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d002      	beq.n	800e126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e126:	bf00      	nop
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	200057d8 	.word	0x200057d8
 800e138:	200057e0 	.word	0x200057e0

0800e13c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e140:	2200      	movs	r2, #0
 800e142:	4912      	ldr	r1, [pc, #72]	; (800e18c <MX_USB_DEVICE_Init+0x50>)
 800e144:	4812      	ldr	r0, [pc, #72]	; (800e190 <MX_USB_DEVICE_Init+0x54>)
 800e146:	f7fb fdbf 	bl	8009cc8 <USBD_Init>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d001      	beq.n	800e154 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e150:	f7f4 f8fa 	bl	8002348 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e154:	490f      	ldr	r1, [pc, #60]	; (800e194 <MX_USB_DEVICE_Init+0x58>)
 800e156:	480e      	ldr	r0, [pc, #56]	; (800e190 <MX_USB_DEVICE_Init+0x54>)
 800e158:	f7fb fde6 	bl	8009d28 <USBD_RegisterClass>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d001      	beq.n	800e166 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e162:	f7f4 f8f1 	bl	8002348 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e166:	490c      	ldr	r1, [pc, #48]	; (800e198 <MX_USB_DEVICE_Init+0x5c>)
 800e168:	4809      	ldr	r0, [pc, #36]	; (800e190 <MX_USB_DEVICE_Init+0x54>)
 800e16a:	f7fb fd1d 	bl	8009ba8 <USBD_CDC_RegisterInterface>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d001      	beq.n	800e178 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e174:	f7f4 f8e8 	bl	8002348 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e178:	4805      	ldr	r0, [pc, #20]	; (800e190 <MX_USB_DEVICE_Init+0x54>)
 800e17a:	f7fb fe0b 	bl	8009d94 <USBD_Start>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e184:	f7f4 f8e0 	bl	8002348 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e188:	bf00      	nop
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	200005b4 	.word	0x200005b4
 800e190:	200057f8 	.word	0x200057f8
 800e194:	2000051c 	.word	0x2000051c
 800e198:	200005a0 	.word	0x200005a0

0800e19c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	4905      	ldr	r1, [pc, #20]	; (800e1b8 <CDC_Init_FS+0x1c>)
 800e1a4:	4805      	ldr	r0, [pc, #20]	; (800e1bc <CDC_Init_FS+0x20>)
 800e1a6:	f7fb fd19 	bl	8009bdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e1aa:	4905      	ldr	r1, [pc, #20]	; (800e1c0 <CDC_Init_FS+0x24>)
 800e1ac:	4803      	ldr	r0, [pc, #12]	; (800e1bc <CDC_Init_FS+0x20>)
 800e1ae:	f7fb fd37 	bl	8009c20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e1b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	20005ed4 	.word	0x20005ed4
 800e1bc:	200057f8 	.word	0x200057f8
 800e1c0:	20005ad4 	.word	0x20005ad4

0800e1c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e1c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	6039      	str	r1, [r7, #0]
 800e1de:	71fb      	strb	r3, [r7, #7]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e1e4:	79fb      	ldrb	r3, [r7, #7]
 800e1e6:	2b23      	cmp	r3, #35	; 0x23
 800e1e8:	d84a      	bhi.n	800e280 <CDC_Control_FS+0xac>
 800e1ea:	a201      	add	r2, pc, #4	; (adr r2, 800e1f0 <CDC_Control_FS+0x1c>)
 800e1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f0:	0800e281 	.word	0x0800e281
 800e1f4:	0800e281 	.word	0x0800e281
 800e1f8:	0800e281 	.word	0x0800e281
 800e1fc:	0800e281 	.word	0x0800e281
 800e200:	0800e281 	.word	0x0800e281
 800e204:	0800e281 	.word	0x0800e281
 800e208:	0800e281 	.word	0x0800e281
 800e20c:	0800e281 	.word	0x0800e281
 800e210:	0800e281 	.word	0x0800e281
 800e214:	0800e281 	.word	0x0800e281
 800e218:	0800e281 	.word	0x0800e281
 800e21c:	0800e281 	.word	0x0800e281
 800e220:	0800e281 	.word	0x0800e281
 800e224:	0800e281 	.word	0x0800e281
 800e228:	0800e281 	.word	0x0800e281
 800e22c:	0800e281 	.word	0x0800e281
 800e230:	0800e281 	.word	0x0800e281
 800e234:	0800e281 	.word	0x0800e281
 800e238:	0800e281 	.word	0x0800e281
 800e23c:	0800e281 	.word	0x0800e281
 800e240:	0800e281 	.word	0x0800e281
 800e244:	0800e281 	.word	0x0800e281
 800e248:	0800e281 	.word	0x0800e281
 800e24c:	0800e281 	.word	0x0800e281
 800e250:	0800e281 	.word	0x0800e281
 800e254:	0800e281 	.word	0x0800e281
 800e258:	0800e281 	.word	0x0800e281
 800e25c:	0800e281 	.word	0x0800e281
 800e260:	0800e281 	.word	0x0800e281
 800e264:	0800e281 	.word	0x0800e281
 800e268:	0800e281 	.word	0x0800e281
 800e26c:	0800e281 	.word	0x0800e281
 800e270:	0800e281 	.word	0x0800e281
 800e274:	0800e281 	.word	0x0800e281
 800e278:	0800e281 	.word	0x0800e281
 800e27c:	0800e281 	.word	0x0800e281
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e280:	bf00      	nop
  }

  return (USBD_OK);
 800e282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e284:	4618      	mov	r0, r3
 800e286:	370c      	adds	r7, #12
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e29a:	6879      	ldr	r1, [r7, #4]
 800e29c:	4805      	ldr	r0, [pc, #20]	; (800e2b4 <CDC_Receive_FS+0x24>)
 800e29e:	f7fb fcbf 	bl	8009c20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e2a2:	4804      	ldr	r0, [pc, #16]	; (800e2b4 <CDC_Receive_FS+0x24>)
 800e2a4:	f7fb fcda 	bl	8009c5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e2a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	200057f8 	.word	0x200057f8

0800e2b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	371c      	adds	r7, #28
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
	...

0800e2dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	6039      	str	r1, [r7, #0]
 800e2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	2212      	movs	r2, #18
 800e2ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e2ee:	4b03      	ldr	r3, [pc, #12]	; (800e2fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	200005d0 	.word	0x200005d0

0800e300 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	4603      	mov	r3, r0
 800e308:	6039      	str	r1, [r7, #0]
 800e30a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	2204      	movs	r2, #4
 800e310:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e312:	4b03      	ldr	r3, [pc, #12]	; (800e320 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e314:	4618      	mov	r0, r3
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	200005e4 	.word	0x200005e4

0800e324 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	6039      	str	r1, [r7, #0]
 800e32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d105      	bne.n	800e342 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e336:	683a      	ldr	r2, [r7, #0]
 800e338:	4907      	ldr	r1, [pc, #28]	; (800e358 <USBD_FS_ProductStrDescriptor+0x34>)
 800e33a:	4808      	ldr	r0, [pc, #32]	; (800e35c <USBD_FS_ProductStrDescriptor+0x38>)
 800e33c:	f7fc fed6 	bl	800b0ec <USBD_GetString>
 800e340:	e004      	b.n	800e34c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e342:	683a      	ldr	r2, [r7, #0]
 800e344:	4904      	ldr	r1, [pc, #16]	; (800e358 <USBD_FS_ProductStrDescriptor+0x34>)
 800e346:	4805      	ldr	r0, [pc, #20]	; (800e35c <USBD_FS_ProductStrDescriptor+0x38>)
 800e348:	f7fc fed0 	bl	800b0ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e34c:	4b02      	ldr	r3, [pc, #8]	; (800e358 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	200062d4 	.word	0x200062d4
 800e35c:	0800f6ac 	.word	0x0800f6ac

0800e360 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	4603      	mov	r3, r0
 800e368:	6039      	str	r1, [r7, #0]
 800e36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e36c:	683a      	ldr	r2, [r7, #0]
 800e36e:	4904      	ldr	r1, [pc, #16]	; (800e380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e370:	4804      	ldr	r0, [pc, #16]	; (800e384 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e372:	f7fc febb 	bl	800b0ec <USBD_GetString>
  return USBD_StrDesc;
 800e376:	4b02      	ldr	r3, [pc, #8]	; (800e380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	200062d4 	.word	0x200062d4
 800e384:	0800f6c4 	.word	0x0800f6c4

0800e388 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	4603      	mov	r3, r0
 800e390:	6039      	str	r1, [r7, #0]
 800e392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	221a      	movs	r2, #26
 800e398:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e39a:	f000 f843 	bl	800e424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e39e:	4b02      	ldr	r3, [pc, #8]	; (800e3a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	200005e8 	.word	0x200005e8

0800e3ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	6039      	str	r1, [r7, #0]
 800e3b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e3b8:	79fb      	ldrb	r3, [r7, #7]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d105      	bne.n	800e3ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e3be:	683a      	ldr	r2, [r7, #0]
 800e3c0:	4907      	ldr	r1, [pc, #28]	; (800e3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e3c2:	4808      	ldr	r0, [pc, #32]	; (800e3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e3c4:	f7fc fe92 	bl	800b0ec <USBD_GetString>
 800e3c8:	e004      	b.n	800e3d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	4904      	ldr	r1, [pc, #16]	; (800e3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e3ce:	4805      	ldr	r0, [pc, #20]	; (800e3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e3d0:	f7fc fe8c 	bl	800b0ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3d4:	4b02      	ldr	r3, [pc, #8]	; (800e3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3708      	adds	r7, #8
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	200062d4 	.word	0x200062d4
 800e3e4:	0800f6d8 	.word	0x0800f6d8

0800e3e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	6039      	str	r1, [r7, #0]
 800e3f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d105      	bne.n	800e406 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e3fa:	683a      	ldr	r2, [r7, #0]
 800e3fc:	4907      	ldr	r1, [pc, #28]	; (800e41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e3fe:	4808      	ldr	r0, [pc, #32]	; (800e420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e400:	f7fc fe74 	bl	800b0ec <USBD_GetString>
 800e404:	e004      	b.n	800e410 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	4904      	ldr	r1, [pc, #16]	; (800e41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e40a:	4805      	ldr	r0, [pc, #20]	; (800e420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e40c:	f7fc fe6e 	bl	800b0ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e410:	4b02      	ldr	r3, [pc, #8]	; (800e41c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e412:	4618      	mov	r0, r3
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	200062d4 	.word	0x200062d4
 800e420:	0800f6e4 	.word	0x0800f6e4

0800e424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e42a:	4b0f      	ldr	r3, [pc, #60]	; (800e468 <Get_SerialNum+0x44>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e430:	4b0e      	ldr	r3, [pc, #56]	; (800e46c <Get_SerialNum+0x48>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e436:	4b0e      	ldr	r3, [pc, #56]	; (800e470 <Get_SerialNum+0x4c>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4413      	add	r3, r2
 800e442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d009      	beq.n	800e45e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e44a:	2208      	movs	r2, #8
 800e44c:	4909      	ldr	r1, [pc, #36]	; (800e474 <Get_SerialNum+0x50>)
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f000 f814 	bl	800e47c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e454:	2204      	movs	r2, #4
 800e456:	4908      	ldr	r1, [pc, #32]	; (800e478 <Get_SerialNum+0x54>)
 800e458:	68b8      	ldr	r0, [r7, #8]
 800e45a:	f000 f80f 	bl	800e47c <IntToUnicode>
  }
}
 800e45e:	bf00      	nop
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	1fff7a10 	.word	0x1fff7a10
 800e46c:	1fff7a14 	.word	0x1fff7a14
 800e470:	1fff7a18 	.word	0x1fff7a18
 800e474:	200005ea 	.word	0x200005ea
 800e478:	200005fa 	.word	0x200005fa

0800e47c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	4613      	mov	r3, r2
 800e488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e48e:	2300      	movs	r3, #0
 800e490:	75fb      	strb	r3, [r7, #23]
 800e492:	e027      	b.n	800e4e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	0f1b      	lsrs	r3, r3, #28
 800e498:	2b09      	cmp	r3, #9
 800e49a:	d80b      	bhi.n	800e4b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	0f1b      	lsrs	r3, r3, #28
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	7dfb      	ldrb	r3, [r7, #23]
 800e4a4:	005b      	lsls	r3, r3, #1
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	440b      	add	r3, r1
 800e4ac:	3230      	adds	r2, #48	; 0x30
 800e4ae:	b2d2      	uxtb	r2, r2
 800e4b0:	701a      	strb	r2, [r3, #0]
 800e4b2:	e00a      	b.n	800e4ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	0f1b      	lsrs	r3, r3, #28
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	7dfb      	ldrb	r3, [r7, #23]
 800e4bc:	005b      	lsls	r3, r3, #1
 800e4be:	4619      	mov	r1, r3
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	440b      	add	r3, r1
 800e4c4:	3237      	adds	r2, #55	; 0x37
 800e4c6:	b2d2      	uxtb	r2, r2
 800e4c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	011b      	lsls	r3, r3, #4
 800e4ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e4d0:	7dfb      	ldrb	r3, [r7, #23]
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	4413      	add	r3, r2
 800e4da:	2200      	movs	r2, #0
 800e4dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	75fb      	strb	r3, [r7, #23]
 800e4e4:	7dfa      	ldrb	r2, [r7, #23]
 800e4e6:	79fb      	ldrb	r3, [r7, #7]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d3d3      	bcc.n	800e494 <IntToUnicode+0x18>
  }
}
 800e4ec:	bf00      	nop
 800e4ee:	bf00      	nop
 800e4f0:	371c      	adds	r7, #28
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
	...

0800e4fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b08a      	sub	sp, #40	; 0x28
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e504:	f107 0314 	add.w	r3, r7, #20
 800e508:	2200      	movs	r2, #0
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	605a      	str	r2, [r3, #4]
 800e50e:	609a      	str	r2, [r3, #8]
 800e510:	60da      	str	r2, [r3, #12]
 800e512:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e51c:	d13a      	bne.n	800e594 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e51e:	2300      	movs	r3, #0
 800e520:	613b      	str	r3, [r7, #16]
 800e522:	4b1e      	ldr	r3, [pc, #120]	; (800e59c <HAL_PCD_MspInit+0xa0>)
 800e524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e526:	4a1d      	ldr	r2, [pc, #116]	; (800e59c <HAL_PCD_MspInit+0xa0>)
 800e528:	f043 0301 	orr.w	r3, r3, #1
 800e52c:	6313      	str	r3, [r2, #48]	; 0x30
 800e52e:	4b1b      	ldr	r3, [pc, #108]	; (800e59c <HAL_PCD_MspInit+0xa0>)
 800e530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e532:	f003 0301 	and.w	r3, r3, #1
 800e536:	613b      	str	r3, [r7, #16]
 800e538:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e53a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e53e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e540:	2302      	movs	r3, #2
 800e542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e544:	2300      	movs	r3, #0
 800e546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e548:	2303      	movs	r3, #3
 800e54a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e54c:	230a      	movs	r3, #10
 800e54e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e550:	f107 0314 	add.w	r3, r7, #20
 800e554:	4619      	mov	r1, r3
 800e556:	4812      	ldr	r0, [pc, #72]	; (800e5a0 <HAL_PCD_MspInit+0xa4>)
 800e558:	f7f4 fd56 	bl	8003008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e55c:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <HAL_PCD_MspInit+0xa0>)
 800e55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e560:	4a0e      	ldr	r2, [pc, #56]	; (800e59c <HAL_PCD_MspInit+0xa0>)
 800e562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e566:	6353      	str	r3, [r2, #52]	; 0x34
 800e568:	2300      	movs	r3, #0
 800e56a:	60fb      	str	r3, [r7, #12]
 800e56c:	4b0b      	ldr	r3, [pc, #44]	; (800e59c <HAL_PCD_MspInit+0xa0>)
 800e56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e570:	4a0a      	ldr	r2, [pc, #40]	; (800e59c <HAL_PCD_MspInit+0xa0>)
 800e572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e576:	6453      	str	r3, [r2, #68]	; 0x44
 800e578:	4b08      	ldr	r3, [pc, #32]	; (800e59c <HAL_PCD_MspInit+0xa0>)
 800e57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e57c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e580:	60fb      	str	r3, [r7, #12]
 800e582:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e584:	2200      	movs	r2, #0
 800e586:	2105      	movs	r1, #5
 800e588:	2043      	movs	r0, #67	; 0x43
 800e58a:	f7f4 fd13 	bl	8002fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e58e:	2043      	movs	r0, #67	; 0x43
 800e590:	f7f4 fd2c 	bl	8002fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e594:	bf00      	nop
 800e596:	3728      	adds	r7, #40	; 0x28
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	40023800 	.word	0x40023800
 800e5a0:	40020000 	.word	0x40020000

0800e5a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	f7fb fc37 	bl	8009e2e <USBD_LL_SetupStage>
}
 800e5c0:	bf00      	nop
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e5da:	78fa      	ldrb	r2, [r7, #3]
 800e5dc:	6879      	ldr	r1, [r7, #4]
 800e5de:	4613      	mov	r3, r2
 800e5e0:	00db      	lsls	r3, r3, #3
 800e5e2:	4413      	add	r3, r2
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	440b      	add	r3, r1
 800e5e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	78fb      	ldrb	r3, [r7, #3]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	f7fb fc71 	bl	8009ed8 <USBD_LL_DataOutStage>
}
 800e5f6:	bf00      	nop
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b082      	sub	sp, #8
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	460b      	mov	r3, r1
 800e608:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e610:	78fa      	ldrb	r2, [r7, #3]
 800e612:	6879      	ldr	r1, [r7, #4]
 800e614:	4613      	mov	r3, r2
 800e616:	00db      	lsls	r3, r3, #3
 800e618:	4413      	add	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	440b      	add	r3, r1
 800e61e:	334c      	adds	r3, #76	; 0x4c
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	78fb      	ldrb	r3, [r7, #3]
 800e624:	4619      	mov	r1, r3
 800e626:	f7fb fd0a 	bl	800a03e <USBD_LL_DataInStage>
}
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e632:	b580      	push	{r7, lr}
 800e634:	b082      	sub	sp, #8
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e640:	4618      	mov	r0, r3
 800e642:	f7fb fe3e 	bl	800a2c2 <USBD_LL_SOF>
}
 800e646:	bf00      	nop
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b084      	sub	sp, #16
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e656:	2301      	movs	r3, #1
 800e658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d001      	beq.n	800e666 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e662:	f7f3 fe71 	bl	8002348 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e66c:	7bfa      	ldrb	r2, [r7, #15]
 800e66e:	4611      	mov	r1, r2
 800e670:	4618      	mov	r0, r3
 800e672:	f7fb fde8 	bl	800a246 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fb fd90 	bl	800a1a2 <USBD_LL_Reset>
}
 800e682:	bf00      	nop
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
	...

0800e68c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fb fde3 	bl	800a266 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	6812      	ldr	r2, [r2, #0]
 800e6ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e6b2:	f043 0301 	orr.w	r3, r3, #1
 800e6b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a1b      	ldr	r3, [r3, #32]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d005      	beq.n	800e6cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6c0:	4b04      	ldr	r3, [pc, #16]	; (800e6d4 <HAL_PCD_SuspendCallback+0x48>)
 800e6c2:	691b      	ldr	r3, [r3, #16]
 800e6c4:	4a03      	ldr	r2, [pc, #12]	; (800e6d4 <HAL_PCD_SuspendCallback+0x48>)
 800e6c6:	f043 0306 	orr.w	r3, r3, #6
 800e6ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e6cc:	bf00      	nop
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	e000ed00 	.word	0xe000ed00

0800e6d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fb fdd3 	bl	800a292 <USBD_LL_Resume>
}
 800e6ec:	bf00      	nop
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e706:	78fa      	ldrb	r2, [r7, #3]
 800e708:	4611      	mov	r1, r2
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fb fe2b 	bl	800a366 <USBD_LL_IsoOUTIncomplete>
}
 800e710:	bf00      	nop
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e72a:	78fa      	ldrb	r2, [r7, #3]
 800e72c:	4611      	mov	r1, r2
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fb fde7 	bl	800a302 <USBD_LL_IsoINIncomplete>
}
 800e734:	bf00      	nop
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fb fe3d 	bl	800a3ca <USBD_LL_DevConnected>
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e766:	4618      	mov	r0, r3
 800e768:	f7fb fe3a 	bl	800a3e0 <USBD_LL_DevDisconnected>
}
 800e76c:	bf00      	nop
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d13c      	bne.n	800e7fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e784:	4a20      	ldr	r2, [pc, #128]	; (800e808 <USBD_LL_Init+0x94>)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a1e      	ldr	r2, [pc, #120]	; (800e808 <USBD_LL_Init+0x94>)
 800e790:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e794:	4b1c      	ldr	r3, [pc, #112]	; (800e808 <USBD_LL_Init+0x94>)
 800e796:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e79a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e79c:	4b1a      	ldr	r3, [pc, #104]	; (800e808 <USBD_LL_Init+0x94>)
 800e79e:	2204      	movs	r2, #4
 800e7a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e7a2:	4b19      	ldr	r3, [pc, #100]	; (800e808 <USBD_LL_Init+0x94>)
 800e7a4:	2202      	movs	r2, #2
 800e7a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e7a8:	4b17      	ldr	r3, [pc, #92]	; (800e808 <USBD_LL_Init+0x94>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e7ae:	4b16      	ldr	r3, [pc, #88]	; (800e808 <USBD_LL_Init+0x94>)
 800e7b0:	2202      	movs	r2, #2
 800e7b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e7b4:	4b14      	ldr	r3, [pc, #80]	; (800e808 <USBD_LL_Init+0x94>)
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e7ba:	4b13      	ldr	r3, [pc, #76]	; (800e808 <USBD_LL_Init+0x94>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e7c0:	4b11      	ldr	r3, [pc, #68]	; (800e808 <USBD_LL_Init+0x94>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e7c6:	4b10      	ldr	r3, [pc, #64]	; (800e808 <USBD_LL_Init+0x94>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e7cc:	4b0e      	ldr	r3, [pc, #56]	; (800e808 <USBD_LL_Init+0x94>)
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e7d2:	480d      	ldr	r0, [pc, #52]	; (800e808 <USBD_LL_Init+0x94>)
 800e7d4:	f7f5 fd8d 	bl	80042f2 <HAL_PCD_Init>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d001      	beq.n	800e7e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e7de:	f7f3 fdb3 	bl	8002348 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e7e2:	2180      	movs	r1, #128	; 0x80
 800e7e4:	4808      	ldr	r0, [pc, #32]	; (800e808 <USBD_LL_Init+0x94>)
 800e7e6:	f7f6 ffe4 	bl	80057b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e7ea:	2240      	movs	r2, #64	; 0x40
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	4806      	ldr	r0, [pc, #24]	; (800e808 <USBD_LL_Init+0x94>)
 800e7f0:	f7f6 ff98 	bl	8005724 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e7f4:	2280      	movs	r2, #128	; 0x80
 800e7f6:	2101      	movs	r1, #1
 800e7f8:	4803      	ldr	r0, [pc, #12]	; (800e808 <USBD_LL_Init+0x94>)
 800e7fa:	f7f6 ff93 	bl	8005724 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	200064d4 	.word	0x200064d4

0800e80c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e814:	2300      	movs	r3, #0
 800e816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e818:	2300      	movs	r3, #0
 800e81a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e822:	4618      	mov	r0, r3
 800e824:	f7f5 fe82 	bl	800452c <HAL_PCD_Start>
 800e828:	4603      	mov	r3, r0
 800e82a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
 800e82e:	4618      	mov	r0, r3
 800e830:	f000 f942 	bl	800eab8 <USBD_Get_USB_Status>
 800e834:	4603      	mov	r3, r0
 800e836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e838:	7bbb      	ldrb	r3, [r7, #14]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e842:	b580      	push	{r7, lr}
 800e844:	b084      	sub	sp, #16
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	4608      	mov	r0, r1
 800e84c:	4611      	mov	r1, r2
 800e84e:	461a      	mov	r2, r3
 800e850:	4603      	mov	r3, r0
 800e852:	70fb      	strb	r3, [r7, #3]
 800e854:	460b      	mov	r3, r1
 800e856:	70bb      	strb	r3, [r7, #2]
 800e858:	4613      	mov	r3, r2
 800e85a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e85c:	2300      	movs	r3, #0
 800e85e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e860:	2300      	movs	r3, #0
 800e862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e86a:	78bb      	ldrb	r3, [r7, #2]
 800e86c:	883a      	ldrh	r2, [r7, #0]
 800e86e:	78f9      	ldrb	r1, [r7, #3]
 800e870:	f7f6 fb53 	bl	8004f1a <HAL_PCD_EP_Open>
 800e874:	4603      	mov	r3, r0
 800e876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e878:	7bfb      	ldrb	r3, [r7, #15]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 f91c 	bl	800eab8 <USBD_Get_USB_Status>
 800e880:	4603      	mov	r3, r0
 800e882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e884:	7bbb      	ldrb	r3, [r7, #14]
}
 800e886:	4618      	mov	r0, r3
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e88e:	b580      	push	{r7, lr}
 800e890:	b084      	sub	sp, #16
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
 800e896:	460b      	mov	r3, r1
 800e898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e89a:	2300      	movs	r3, #0
 800e89c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8a8:	78fa      	ldrb	r2, [r7, #3]
 800e8aa:	4611      	mov	r1, r2
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7f6 fb9c 	bl	8004fea <HAL_PCD_EP_Close>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f000 f8fd 	bl	800eab8 <USBD_Get_USB_Status>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8e6:	78fa      	ldrb	r2, [r7, #3]
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7f6 fc74 	bl	80051d8 <HAL_PCD_EP_SetStall>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8f4:	7bfb      	ldrb	r3, [r7, #15]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f000 f8de 	bl	800eab8 <USBD_Get_USB_Status>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e900:	7bbb      	ldrb	r3, [r7, #14]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
 800e912:	460b      	mov	r3, r1
 800e914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e916:	2300      	movs	r3, #0
 800e918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e91a:	2300      	movs	r3, #0
 800e91c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e924:	78fa      	ldrb	r2, [r7, #3]
 800e926:	4611      	mov	r1, r2
 800e928:	4618      	mov	r0, r3
 800e92a:	f7f6 fcb9 	bl	80052a0 <HAL_PCD_EP_ClrStall>
 800e92e:	4603      	mov	r3, r0
 800e930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e932:	7bfb      	ldrb	r3, [r7, #15]
 800e934:	4618      	mov	r0, r3
 800e936:	f000 f8bf 	bl	800eab8 <USBD_Get_USB_Status>
 800e93a:	4603      	mov	r3, r0
 800e93c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e93e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e940:	4618      	mov	r0, r3
 800e942:	3710      	adds	r7, #16
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	460b      	mov	r3, r1
 800e952:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e95a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e95c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e960:	2b00      	cmp	r3, #0
 800e962:	da0b      	bge.n	800e97c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e964:	78fb      	ldrb	r3, [r7, #3]
 800e966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e96a:	68f9      	ldr	r1, [r7, #12]
 800e96c:	4613      	mov	r3, r2
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	4413      	add	r3, r2
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	440b      	add	r3, r1
 800e976:	333e      	adds	r3, #62	; 0x3e
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	e00b      	b.n	800e994 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e97c:	78fb      	ldrb	r3, [r7, #3]
 800e97e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e982:	68f9      	ldr	r1, [r7, #12]
 800e984:	4613      	mov	r3, r2
 800e986:	00db      	lsls	r3, r3, #3
 800e988:	4413      	add	r3, r2
 800e98a:	009b      	lsls	r3, r3, #2
 800e98c:	440b      	add	r3, r1
 800e98e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e992:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e994:	4618      	mov	r0, r3
 800e996:	3714      	adds	r7, #20
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9ba:	78fa      	ldrb	r2, [r7, #3]
 800e9bc:	4611      	mov	r1, r2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7f6 fa86 	bl	8004ed0 <HAL_PCD_SetAddress>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f000 f874 	bl	800eab8 <USBD_Get_USB_Status>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b086      	sub	sp, #24
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	60f8      	str	r0, [r7, #12]
 800e9e6:	607a      	str	r2, [r7, #4]
 800e9e8:	603b      	str	r3, [r7, #0]
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e9fc:	7af9      	ldrb	r1, [r7, #11]
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	f7f6 fb9f 	bl	8005144 <HAL_PCD_EP_Transmit>
 800ea06:	4603      	mov	r3, r0
 800ea08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea0a:	7dfb      	ldrb	r3, [r7, #23]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f000 f853 	bl	800eab8 <USBD_Get_USB_Status>
 800ea12:	4603      	mov	r3, r0
 800ea14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ea16:	7dbb      	ldrb	r3, [r7, #22]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	607a      	str	r2, [r7, #4]
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea34:	2300      	movs	r3, #0
 800ea36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ea3e:	7af9      	ldrb	r1, [r7, #11]
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	f7f6 fb1b 	bl	800507e <HAL_PCD_EP_Receive>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea4c:	7dfb      	ldrb	r3, [r7, #23]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 f832 	bl	800eab8 <USBD_Get_USB_Status>
 800ea54:	4603      	mov	r3, r0
 800ea56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ea58:	7dbb      	ldrb	r3, [r7, #22]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3718      	adds	r7, #24
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b082      	sub	sp, #8
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea74:	78fa      	ldrb	r2, [r7, #3]
 800ea76:	4611      	mov	r1, r2
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7f6 fb4b 	bl	8005114 <HAL_PCD_EP_GetRxCount>
 800ea7e:	4603      	mov	r3, r0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ea90:	4b03      	ldr	r3, [pc, #12]	; (800eaa0 <USBD_static_malloc+0x18>)
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	370c      	adds	r7, #12
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	200069e0 	.word	0x200069e0

0800eaa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]

}
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	4603      	mov	r3, r0
 800eac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eac6:	79fb      	ldrb	r3, [r7, #7]
 800eac8:	2b03      	cmp	r3, #3
 800eaca:	d817      	bhi.n	800eafc <USBD_Get_USB_Status+0x44>
 800eacc:	a201      	add	r2, pc, #4	; (adr r2, 800ead4 <USBD_Get_USB_Status+0x1c>)
 800eace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead2:	bf00      	nop
 800ead4:	0800eae5 	.word	0x0800eae5
 800ead8:	0800eaeb 	.word	0x0800eaeb
 800eadc:	0800eaf1 	.word	0x0800eaf1
 800eae0:	0800eaf7 	.word	0x0800eaf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	73fb      	strb	r3, [r7, #15]
    break;
 800eae8:	e00b      	b.n	800eb02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eaea:	2303      	movs	r3, #3
 800eaec:	73fb      	strb	r3, [r7, #15]
    break;
 800eaee:	e008      	b.n	800eb02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf4:	e005      	b.n	800eb02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	73fb      	strb	r3, [r7, #15]
    break;
 800eafa:	e002      	b.n	800eb02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eafc:	2303      	movs	r3, #3
 800eafe:	73fb      	strb	r3, [r7, #15]
    break;
 800eb00:	bf00      	nop
  }
  return usb_status;
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <__errno>:
 800eb10:	4b01      	ldr	r3, [pc, #4]	; (800eb18 <__errno+0x8>)
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	20000604 	.word	0x20000604

0800eb1c <__libc_init_array>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	4d0d      	ldr	r5, [pc, #52]	; (800eb54 <__libc_init_array+0x38>)
 800eb20:	4c0d      	ldr	r4, [pc, #52]	; (800eb58 <__libc_init_array+0x3c>)
 800eb22:	1b64      	subs	r4, r4, r5
 800eb24:	10a4      	asrs	r4, r4, #2
 800eb26:	2600      	movs	r6, #0
 800eb28:	42a6      	cmp	r6, r4
 800eb2a:	d109      	bne.n	800eb40 <__libc_init_array+0x24>
 800eb2c:	4d0b      	ldr	r5, [pc, #44]	; (800eb5c <__libc_init_array+0x40>)
 800eb2e:	4c0c      	ldr	r4, [pc, #48]	; (800eb60 <__libc_init_array+0x44>)
 800eb30:	f000 fcb2 	bl	800f498 <_init>
 800eb34:	1b64      	subs	r4, r4, r5
 800eb36:	10a4      	asrs	r4, r4, #2
 800eb38:	2600      	movs	r6, #0
 800eb3a:	42a6      	cmp	r6, r4
 800eb3c:	d105      	bne.n	800eb4a <__libc_init_array+0x2e>
 800eb3e:	bd70      	pop	{r4, r5, r6, pc}
 800eb40:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb44:	4798      	blx	r3
 800eb46:	3601      	adds	r6, #1
 800eb48:	e7ee      	b.n	800eb28 <__libc_init_array+0xc>
 800eb4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb4e:	4798      	blx	r3
 800eb50:	3601      	adds	r6, #1
 800eb52:	e7f2      	b.n	800eb3a <__libc_init_array+0x1e>
 800eb54:	0800fad8 	.word	0x0800fad8
 800eb58:	0800fad8 	.word	0x0800fad8
 800eb5c:	0800fad8 	.word	0x0800fad8
 800eb60:	0800fadc 	.word	0x0800fadc

0800eb64 <malloc>:
 800eb64:	4b02      	ldr	r3, [pc, #8]	; (800eb70 <malloc+0xc>)
 800eb66:	4601      	mov	r1, r0
 800eb68:	6818      	ldr	r0, [r3, #0]
 800eb6a:	f000 b88d 	b.w	800ec88 <_malloc_r>
 800eb6e:	bf00      	nop
 800eb70:	20000604 	.word	0x20000604

0800eb74 <free>:
 800eb74:	4b02      	ldr	r3, [pc, #8]	; (800eb80 <free+0xc>)
 800eb76:	4601      	mov	r1, r0
 800eb78:	6818      	ldr	r0, [r3, #0]
 800eb7a:	f000 b819 	b.w	800ebb0 <_free_r>
 800eb7e:	bf00      	nop
 800eb80:	20000604 	.word	0x20000604

0800eb84 <memcpy>:
 800eb84:	440a      	add	r2, r1
 800eb86:	4291      	cmp	r1, r2
 800eb88:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb8c:	d100      	bne.n	800eb90 <memcpy+0xc>
 800eb8e:	4770      	bx	lr
 800eb90:	b510      	push	{r4, lr}
 800eb92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb9a:	4291      	cmp	r1, r2
 800eb9c:	d1f9      	bne.n	800eb92 <memcpy+0xe>
 800eb9e:	bd10      	pop	{r4, pc}

0800eba0 <memset>:
 800eba0:	4402      	add	r2, r0
 800eba2:	4603      	mov	r3, r0
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d100      	bne.n	800ebaa <memset+0xa>
 800eba8:	4770      	bx	lr
 800ebaa:	f803 1b01 	strb.w	r1, [r3], #1
 800ebae:	e7f9      	b.n	800eba4 <memset+0x4>

0800ebb0 <_free_r>:
 800ebb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebb2:	2900      	cmp	r1, #0
 800ebb4:	d044      	beq.n	800ec40 <_free_r+0x90>
 800ebb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebba:	9001      	str	r0, [sp, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f1a1 0404 	sub.w	r4, r1, #4
 800ebc2:	bfb8      	it	lt
 800ebc4:	18e4      	addlt	r4, r4, r3
 800ebc6:	f000 f917 	bl	800edf8 <__malloc_lock>
 800ebca:	4a1e      	ldr	r2, [pc, #120]	; (800ec44 <_free_r+0x94>)
 800ebcc:	9801      	ldr	r0, [sp, #4]
 800ebce:	6813      	ldr	r3, [r2, #0]
 800ebd0:	b933      	cbnz	r3, 800ebe0 <_free_r+0x30>
 800ebd2:	6063      	str	r3, [r4, #4]
 800ebd4:	6014      	str	r4, [r2, #0]
 800ebd6:	b003      	add	sp, #12
 800ebd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebdc:	f000 b912 	b.w	800ee04 <__malloc_unlock>
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	d908      	bls.n	800ebf6 <_free_r+0x46>
 800ebe4:	6825      	ldr	r5, [r4, #0]
 800ebe6:	1961      	adds	r1, r4, r5
 800ebe8:	428b      	cmp	r3, r1
 800ebea:	bf01      	itttt	eq
 800ebec:	6819      	ldreq	r1, [r3, #0]
 800ebee:	685b      	ldreq	r3, [r3, #4]
 800ebf0:	1949      	addeq	r1, r1, r5
 800ebf2:	6021      	streq	r1, [r4, #0]
 800ebf4:	e7ed      	b.n	800ebd2 <_free_r+0x22>
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	b10b      	cbz	r3, 800ec00 <_free_r+0x50>
 800ebfc:	42a3      	cmp	r3, r4
 800ebfe:	d9fa      	bls.n	800ebf6 <_free_r+0x46>
 800ec00:	6811      	ldr	r1, [r2, #0]
 800ec02:	1855      	adds	r5, r2, r1
 800ec04:	42a5      	cmp	r5, r4
 800ec06:	d10b      	bne.n	800ec20 <_free_r+0x70>
 800ec08:	6824      	ldr	r4, [r4, #0]
 800ec0a:	4421      	add	r1, r4
 800ec0c:	1854      	adds	r4, r2, r1
 800ec0e:	42a3      	cmp	r3, r4
 800ec10:	6011      	str	r1, [r2, #0]
 800ec12:	d1e0      	bne.n	800ebd6 <_free_r+0x26>
 800ec14:	681c      	ldr	r4, [r3, #0]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	6053      	str	r3, [r2, #4]
 800ec1a:	4421      	add	r1, r4
 800ec1c:	6011      	str	r1, [r2, #0]
 800ec1e:	e7da      	b.n	800ebd6 <_free_r+0x26>
 800ec20:	d902      	bls.n	800ec28 <_free_r+0x78>
 800ec22:	230c      	movs	r3, #12
 800ec24:	6003      	str	r3, [r0, #0]
 800ec26:	e7d6      	b.n	800ebd6 <_free_r+0x26>
 800ec28:	6825      	ldr	r5, [r4, #0]
 800ec2a:	1961      	adds	r1, r4, r5
 800ec2c:	428b      	cmp	r3, r1
 800ec2e:	bf04      	itt	eq
 800ec30:	6819      	ldreq	r1, [r3, #0]
 800ec32:	685b      	ldreq	r3, [r3, #4]
 800ec34:	6063      	str	r3, [r4, #4]
 800ec36:	bf04      	itt	eq
 800ec38:	1949      	addeq	r1, r1, r5
 800ec3a:	6021      	streq	r1, [r4, #0]
 800ec3c:	6054      	str	r4, [r2, #4]
 800ec3e:	e7ca      	b.n	800ebd6 <_free_r+0x26>
 800ec40:	b003      	add	sp, #12
 800ec42:	bd30      	pop	{r4, r5, pc}
 800ec44:	20006c00 	.word	0x20006c00

0800ec48 <sbrk_aligned>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	4e0e      	ldr	r6, [pc, #56]	; (800ec84 <sbrk_aligned+0x3c>)
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	6831      	ldr	r1, [r6, #0]
 800ec50:	4605      	mov	r5, r0
 800ec52:	b911      	cbnz	r1, 800ec5a <sbrk_aligned+0x12>
 800ec54:	f000 f88c 	bl	800ed70 <_sbrk_r>
 800ec58:	6030      	str	r0, [r6, #0]
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	f000 f887 	bl	800ed70 <_sbrk_r>
 800ec62:	1c43      	adds	r3, r0, #1
 800ec64:	d00a      	beq.n	800ec7c <sbrk_aligned+0x34>
 800ec66:	1cc4      	adds	r4, r0, #3
 800ec68:	f024 0403 	bic.w	r4, r4, #3
 800ec6c:	42a0      	cmp	r0, r4
 800ec6e:	d007      	beq.n	800ec80 <sbrk_aligned+0x38>
 800ec70:	1a21      	subs	r1, r4, r0
 800ec72:	4628      	mov	r0, r5
 800ec74:	f000 f87c 	bl	800ed70 <_sbrk_r>
 800ec78:	3001      	adds	r0, #1
 800ec7a:	d101      	bne.n	800ec80 <sbrk_aligned+0x38>
 800ec7c:	f04f 34ff 	mov.w	r4, #4294967295
 800ec80:	4620      	mov	r0, r4
 800ec82:	bd70      	pop	{r4, r5, r6, pc}
 800ec84:	20006c04 	.word	0x20006c04

0800ec88 <_malloc_r>:
 800ec88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	1ccd      	adds	r5, r1, #3
 800ec8e:	f025 0503 	bic.w	r5, r5, #3
 800ec92:	3508      	adds	r5, #8
 800ec94:	2d0c      	cmp	r5, #12
 800ec96:	bf38      	it	cc
 800ec98:	250c      	movcc	r5, #12
 800ec9a:	2d00      	cmp	r5, #0
 800ec9c:	4607      	mov	r7, r0
 800ec9e:	db01      	blt.n	800eca4 <_malloc_r+0x1c>
 800eca0:	42a9      	cmp	r1, r5
 800eca2:	d905      	bls.n	800ecb0 <_malloc_r+0x28>
 800eca4:	230c      	movs	r3, #12
 800eca6:	603b      	str	r3, [r7, #0]
 800eca8:	2600      	movs	r6, #0
 800ecaa:	4630      	mov	r0, r6
 800ecac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb0:	4e2e      	ldr	r6, [pc, #184]	; (800ed6c <_malloc_r+0xe4>)
 800ecb2:	f000 f8a1 	bl	800edf8 <__malloc_lock>
 800ecb6:	6833      	ldr	r3, [r6, #0]
 800ecb8:	461c      	mov	r4, r3
 800ecba:	bb34      	cbnz	r4, 800ed0a <_malloc_r+0x82>
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	f7ff ffc2 	bl	800ec48 <sbrk_aligned>
 800ecc4:	1c43      	adds	r3, r0, #1
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	d14d      	bne.n	800ed66 <_malloc_r+0xde>
 800ecca:	6834      	ldr	r4, [r6, #0]
 800eccc:	4626      	mov	r6, r4
 800ecce:	2e00      	cmp	r6, #0
 800ecd0:	d140      	bne.n	800ed54 <_malloc_r+0xcc>
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	eb04 0803 	add.w	r8, r4, r3
 800ecdc:	f000 f848 	bl	800ed70 <_sbrk_r>
 800ece0:	4580      	cmp	r8, r0
 800ece2:	d13a      	bne.n	800ed5a <_malloc_r+0xd2>
 800ece4:	6821      	ldr	r1, [r4, #0]
 800ece6:	3503      	adds	r5, #3
 800ece8:	1a6d      	subs	r5, r5, r1
 800ecea:	f025 0503 	bic.w	r5, r5, #3
 800ecee:	3508      	adds	r5, #8
 800ecf0:	2d0c      	cmp	r5, #12
 800ecf2:	bf38      	it	cc
 800ecf4:	250c      	movcc	r5, #12
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	4638      	mov	r0, r7
 800ecfa:	f7ff ffa5 	bl	800ec48 <sbrk_aligned>
 800ecfe:	3001      	adds	r0, #1
 800ed00:	d02b      	beq.n	800ed5a <_malloc_r+0xd2>
 800ed02:	6823      	ldr	r3, [r4, #0]
 800ed04:	442b      	add	r3, r5
 800ed06:	6023      	str	r3, [r4, #0]
 800ed08:	e00e      	b.n	800ed28 <_malloc_r+0xa0>
 800ed0a:	6822      	ldr	r2, [r4, #0]
 800ed0c:	1b52      	subs	r2, r2, r5
 800ed0e:	d41e      	bmi.n	800ed4e <_malloc_r+0xc6>
 800ed10:	2a0b      	cmp	r2, #11
 800ed12:	d916      	bls.n	800ed42 <_malloc_r+0xba>
 800ed14:	1961      	adds	r1, r4, r5
 800ed16:	42a3      	cmp	r3, r4
 800ed18:	6025      	str	r5, [r4, #0]
 800ed1a:	bf18      	it	ne
 800ed1c:	6059      	strne	r1, [r3, #4]
 800ed1e:	6863      	ldr	r3, [r4, #4]
 800ed20:	bf08      	it	eq
 800ed22:	6031      	streq	r1, [r6, #0]
 800ed24:	5162      	str	r2, [r4, r5]
 800ed26:	604b      	str	r3, [r1, #4]
 800ed28:	4638      	mov	r0, r7
 800ed2a:	f104 060b 	add.w	r6, r4, #11
 800ed2e:	f000 f869 	bl	800ee04 <__malloc_unlock>
 800ed32:	f026 0607 	bic.w	r6, r6, #7
 800ed36:	1d23      	adds	r3, r4, #4
 800ed38:	1af2      	subs	r2, r6, r3
 800ed3a:	d0b6      	beq.n	800ecaa <_malloc_r+0x22>
 800ed3c:	1b9b      	subs	r3, r3, r6
 800ed3e:	50a3      	str	r3, [r4, r2]
 800ed40:	e7b3      	b.n	800ecaa <_malloc_r+0x22>
 800ed42:	6862      	ldr	r2, [r4, #4]
 800ed44:	42a3      	cmp	r3, r4
 800ed46:	bf0c      	ite	eq
 800ed48:	6032      	streq	r2, [r6, #0]
 800ed4a:	605a      	strne	r2, [r3, #4]
 800ed4c:	e7ec      	b.n	800ed28 <_malloc_r+0xa0>
 800ed4e:	4623      	mov	r3, r4
 800ed50:	6864      	ldr	r4, [r4, #4]
 800ed52:	e7b2      	b.n	800ecba <_malloc_r+0x32>
 800ed54:	4634      	mov	r4, r6
 800ed56:	6876      	ldr	r6, [r6, #4]
 800ed58:	e7b9      	b.n	800ecce <_malloc_r+0x46>
 800ed5a:	230c      	movs	r3, #12
 800ed5c:	603b      	str	r3, [r7, #0]
 800ed5e:	4638      	mov	r0, r7
 800ed60:	f000 f850 	bl	800ee04 <__malloc_unlock>
 800ed64:	e7a1      	b.n	800ecaa <_malloc_r+0x22>
 800ed66:	6025      	str	r5, [r4, #0]
 800ed68:	e7de      	b.n	800ed28 <_malloc_r+0xa0>
 800ed6a:	bf00      	nop
 800ed6c:	20006c00 	.word	0x20006c00

0800ed70 <_sbrk_r>:
 800ed70:	b538      	push	{r3, r4, r5, lr}
 800ed72:	4d06      	ldr	r5, [pc, #24]	; (800ed8c <_sbrk_r+0x1c>)
 800ed74:	2300      	movs	r3, #0
 800ed76:	4604      	mov	r4, r0
 800ed78:	4608      	mov	r0, r1
 800ed7a:	602b      	str	r3, [r5, #0]
 800ed7c:	f7f3 ff8a 	bl	8002c94 <_sbrk>
 800ed80:	1c43      	adds	r3, r0, #1
 800ed82:	d102      	bne.n	800ed8a <_sbrk_r+0x1a>
 800ed84:	682b      	ldr	r3, [r5, #0]
 800ed86:	b103      	cbz	r3, 800ed8a <_sbrk_r+0x1a>
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	bd38      	pop	{r3, r4, r5, pc}
 800ed8c:	20006c08 	.word	0x20006c08

0800ed90 <siprintf>:
 800ed90:	b40e      	push	{r1, r2, r3}
 800ed92:	b500      	push	{lr}
 800ed94:	b09c      	sub	sp, #112	; 0x70
 800ed96:	ab1d      	add	r3, sp, #116	; 0x74
 800ed98:	9002      	str	r0, [sp, #8]
 800ed9a:	9006      	str	r0, [sp, #24]
 800ed9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eda0:	4809      	ldr	r0, [pc, #36]	; (800edc8 <siprintf+0x38>)
 800eda2:	9107      	str	r1, [sp, #28]
 800eda4:	9104      	str	r1, [sp, #16]
 800eda6:	4909      	ldr	r1, [pc, #36]	; (800edcc <siprintf+0x3c>)
 800eda8:	f853 2b04 	ldr.w	r2, [r3], #4
 800edac:	9105      	str	r1, [sp, #20]
 800edae:	6800      	ldr	r0, [r0, #0]
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	a902      	add	r1, sp, #8
 800edb4:	f000 f888 	bl	800eec8 <_svfiprintf_r>
 800edb8:	9b02      	ldr	r3, [sp, #8]
 800edba:	2200      	movs	r2, #0
 800edbc:	701a      	strb	r2, [r3, #0]
 800edbe:	b01c      	add	sp, #112	; 0x70
 800edc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800edc4:	b003      	add	sp, #12
 800edc6:	4770      	bx	lr
 800edc8:	20000604 	.word	0x20000604
 800edcc:	ffff0208 	.word	0xffff0208

0800edd0 <strncpy>:
 800edd0:	b510      	push	{r4, lr}
 800edd2:	3901      	subs	r1, #1
 800edd4:	4603      	mov	r3, r0
 800edd6:	b132      	cbz	r2, 800ede6 <strncpy+0x16>
 800edd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eddc:	f803 4b01 	strb.w	r4, [r3], #1
 800ede0:	3a01      	subs	r2, #1
 800ede2:	2c00      	cmp	r4, #0
 800ede4:	d1f7      	bne.n	800edd6 <strncpy+0x6>
 800ede6:	441a      	add	r2, r3
 800ede8:	2100      	movs	r1, #0
 800edea:	4293      	cmp	r3, r2
 800edec:	d100      	bne.n	800edf0 <strncpy+0x20>
 800edee:	bd10      	pop	{r4, pc}
 800edf0:	f803 1b01 	strb.w	r1, [r3], #1
 800edf4:	e7f9      	b.n	800edea <strncpy+0x1a>
	...

0800edf8 <__malloc_lock>:
 800edf8:	4801      	ldr	r0, [pc, #4]	; (800ee00 <__malloc_lock+0x8>)
 800edfa:	f000 baf9 	b.w	800f3f0 <__retarget_lock_acquire_recursive>
 800edfe:	bf00      	nop
 800ee00:	20006c0c 	.word	0x20006c0c

0800ee04 <__malloc_unlock>:
 800ee04:	4801      	ldr	r0, [pc, #4]	; (800ee0c <__malloc_unlock+0x8>)
 800ee06:	f000 baf4 	b.w	800f3f2 <__retarget_lock_release_recursive>
 800ee0a:	bf00      	nop
 800ee0c:	20006c0c 	.word	0x20006c0c

0800ee10 <__ssputs_r>:
 800ee10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee14:	688e      	ldr	r6, [r1, #8]
 800ee16:	429e      	cmp	r6, r3
 800ee18:	4682      	mov	sl, r0
 800ee1a:	460c      	mov	r4, r1
 800ee1c:	4690      	mov	r8, r2
 800ee1e:	461f      	mov	r7, r3
 800ee20:	d838      	bhi.n	800ee94 <__ssputs_r+0x84>
 800ee22:	898a      	ldrh	r2, [r1, #12]
 800ee24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee28:	d032      	beq.n	800ee90 <__ssputs_r+0x80>
 800ee2a:	6825      	ldr	r5, [r4, #0]
 800ee2c:	6909      	ldr	r1, [r1, #16]
 800ee2e:	eba5 0901 	sub.w	r9, r5, r1
 800ee32:	6965      	ldr	r5, [r4, #20]
 800ee34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	444b      	add	r3, r9
 800ee40:	106d      	asrs	r5, r5, #1
 800ee42:	429d      	cmp	r5, r3
 800ee44:	bf38      	it	cc
 800ee46:	461d      	movcc	r5, r3
 800ee48:	0553      	lsls	r3, r2, #21
 800ee4a:	d531      	bpl.n	800eeb0 <__ssputs_r+0xa0>
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	f7ff ff1b 	bl	800ec88 <_malloc_r>
 800ee52:	4606      	mov	r6, r0
 800ee54:	b950      	cbnz	r0, 800ee6c <__ssputs_r+0x5c>
 800ee56:	230c      	movs	r3, #12
 800ee58:	f8ca 3000 	str.w	r3, [sl]
 800ee5c:	89a3      	ldrh	r3, [r4, #12]
 800ee5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee62:	81a3      	strh	r3, [r4, #12]
 800ee64:	f04f 30ff 	mov.w	r0, #4294967295
 800ee68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee6c:	6921      	ldr	r1, [r4, #16]
 800ee6e:	464a      	mov	r2, r9
 800ee70:	f7ff fe88 	bl	800eb84 <memcpy>
 800ee74:	89a3      	ldrh	r3, [r4, #12]
 800ee76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee7e:	81a3      	strh	r3, [r4, #12]
 800ee80:	6126      	str	r6, [r4, #16]
 800ee82:	6165      	str	r5, [r4, #20]
 800ee84:	444e      	add	r6, r9
 800ee86:	eba5 0509 	sub.w	r5, r5, r9
 800ee8a:	6026      	str	r6, [r4, #0]
 800ee8c:	60a5      	str	r5, [r4, #8]
 800ee8e:	463e      	mov	r6, r7
 800ee90:	42be      	cmp	r6, r7
 800ee92:	d900      	bls.n	800ee96 <__ssputs_r+0x86>
 800ee94:	463e      	mov	r6, r7
 800ee96:	6820      	ldr	r0, [r4, #0]
 800ee98:	4632      	mov	r2, r6
 800ee9a:	4641      	mov	r1, r8
 800ee9c:	f000 faaa 	bl	800f3f4 <memmove>
 800eea0:	68a3      	ldr	r3, [r4, #8]
 800eea2:	1b9b      	subs	r3, r3, r6
 800eea4:	60a3      	str	r3, [r4, #8]
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	4433      	add	r3, r6
 800eeaa:	6023      	str	r3, [r4, #0]
 800eeac:	2000      	movs	r0, #0
 800eeae:	e7db      	b.n	800ee68 <__ssputs_r+0x58>
 800eeb0:	462a      	mov	r2, r5
 800eeb2:	f000 fab9 	bl	800f428 <_realloc_r>
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d1e1      	bne.n	800ee80 <__ssputs_r+0x70>
 800eebc:	6921      	ldr	r1, [r4, #16]
 800eebe:	4650      	mov	r0, sl
 800eec0:	f7ff fe76 	bl	800ebb0 <_free_r>
 800eec4:	e7c7      	b.n	800ee56 <__ssputs_r+0x46>
	...

0800eec8 <_svfiprintf_r>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	4698      	mov	r8, r3
 800eece:	898b      	ldrh	r3, [r1, #12]
 800eed0:	061b      	lsls	r3, r3, #24
 800eed2:	b09d      	sub	sp, #116	; 0x74
 800eed4:	4607      	mov	r7, r0
 800eed6:	460d      	mov	r5, r1
 800eed8:	4614      	mov	r4, r2
 800eeda:	d50e      	bpl.n	800eefa <_svfiprintf_r+0x32>
 800eedc:	690b      	ldr	r3, [r1, #16]
 800eede:	b963      	cbnz	r3, 800eefa <_svfiprintf_r+0x32>
 800eee0:	2140      	movs	r1, #64	; 0x40
 800eee2:	f7ff fed1 	bl	800ec88 <_malloc_r>
 800eee6:	6028      	str	r0, [r5, #0]
 800eee8:	6128      	str	r0, [r5, #16]
 800eeea:	b920      	cbnz	r0, 800eef6 <_svfiprintf_r+0x2e>
 800eeec:	230c      	movs	r3, #12
 800eeee:	603b      	str	r3, [r7, #0]
 800eef0:	f04f 30ff 	mov.w	r0, #4294967295
 800eef4:	e0d1      	b.n	800f09a <_svfiprintf_r+0x1d2>
 800eef6:	2340      	movs	r3, #64	; 0x40
 800eef8:	616b      	str	r3, [r5, #20]
 800eefa:	2300      	movs	r3, #0
 800eefc:	9309      	str	r3, [sp, #36]	; 0x24
 800eefe:	2320      	movs	r3, #32
 800ef00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef04:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef08:	2330      	movs	r3, #48	; 0x30
 800ef0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f0b4 <_svfiprintf_r+0x1ec>
 800ef0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef12:	f04f 0901 	mov.w	r9, #1
 800ef16:	4623      	mov	r3, r4
 800ef18:	469a      	mov	sl, r3
 800ef1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef1e:	b10a      	cbz	r2, 800ef24 <_svfiprintf_r+0x5c>
 800ef20:	2a25      	cmp	r2, #37	; 0x25
 800ef22:	d1f9      	bne.n	800ef18 <_svfiprintf_r+0x50>
 800ef24:	ebba 0b04 	subs.w	fp, sl, r4
 800ef28:	d00b      	beq.n	800ef42 <_svfiprintf_r+0x7a>
 800ef2a:	465b      	mov	r3, fp
 800ef2c:	4622      	mov	r2, r4
 800ef2e:	4629      	mov	r1, r5
 800ef30:	4638      	mov	r0, r7
 800ef32:	f7ff ff6d 	bl	800ee10 <__ssputs_r>
 800ef36:	3001      	adds	r0, #1
 800ef38:	f000 80aa 	beq.w	800f090 <_svfiprintf_r+0x1c8>
 800ef3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef3e:	445a      	add	r2, fp
 800ef40:	9209      	str	r2, [sp, #36]	; 0x24
 800ef42:	f89a 3000 	ldrb.w	r3, [sl]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f000 80a2 	beq.w	800f090 <_svfiprintf_r+0x1c8>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef56:	f10a 0a01 	add.w	sl, sl, #1
 800ef5a:	9304      	str	r3, [sp, #16]
 800ef5c:	9307      	str	r3, [sp, #28]
 800ef5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef62:	931a      	str	r3, [sp, #104]	; 0x68
 800ef64:	4654      	mov	r4, sl
 800ef66:	2205      	movs	r2, #5
 800ef68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef6c:	4851      	ldr	r0, [pc, #324]	; (800f0b4 <_svfiprintf_r+0x1ec>)
 800ef6e:	f7f1 f93f 	bl	80001f0 <memchr>
 800ef72:	9a04      	ldr	r2, [sp, #16]
 800ef74:	b9d8      	cbnz	r0, 800efae <_svfiprintf_r+0xe6>
 800ef76:	06d0      	lsls	r0, r2, #27
 800ef78:	bf44      	itt	mi
 800ef7a:	2320      	movmi	r3, #32
 800ef7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef80:	0711      	lsls	r1, r2, #28
 800ef82:	bf44      	itt	mi
 800ef84:	232b      	movmi	r3, #43	; 0x2b
 800ef86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ef90:	d015      	beq.n	800efbe <_svfiprintf_r+0xf6>
 800ef92:	9a07      	ldr	r2, [sp, #28]
 800ef94:	4654      	mov	r4, sl
 800ef96:	2000      	movs	r0, #0
 800ef98:	f04f 0c0a 	mov.w	ip, #10
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efa2:	3b30      	subs	r3, #48	; 0x30
 800efa4:	2b09      	cmp	r3, #9
 800efa6:	d94e      	bls.n	800f046 <_svfiprintf_r+0x17e>
 800efa8:	b1b0      	cbz	r0, 800efd8 <_svfiprintf_r+0x110>
 800efaa:	9207      	str	r2, [sp, #28]
 800efac:	e014      	b.n	800efd8 <_svfiprintf_r+0x110>
 800efae:	eba0 0308 	sub.w	r3, r0, r8
 800efb2:	fa09 f303 	lsl.w	r3, r9, r3
 800efb6:	4313      	orrs	r3, r2
 800efb8:	9304      	str	r3, [sp, #16]
 800efba:	46a2      	mov	sl, r4
 800efbc:	e7d2      	b.n	800ef64 <_svfiprintf_r+0x9c>
 800efbe:	9b03      	ldr	r3, [sp, #12]
 800efc0:	1d19      	adds	r1, r3, #4
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	9103      	str	r1, [sp, #12]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	bfbb      	ittet	lt
 800efca:	425b      	neglt	r3, r3
 800efcc:	f042 0202 	orrlt.w	r2, r2, #2
 800efd0:	9307      	strge	r3, [sp, #28]
 800efd2:	9307      	strlt	r3, [sp, #28]
 800efd4:	bfb8      	it	lt
 800efd6:	9204      	strlt	r2, [sp, #16]
 800efd8:	7823      	ldrb	r3, [r4, #0]
 800efda:	2b2e      	cmp	r3, #46	; 0x2e
 800efdc:	d10c      	bne.n	800eff8 <_svfiprintf_r+0x130>
 800efde:	7863      	ldrb	r3, [r4, #1]
 800efe0:	2b2a      	cmp	r3, #42	; 0x2a
 800efe2:	d135      	bne.n	800f050 <_svfiprintf_r+0x188>
 800efe4:	9b03      	ldr	r3, [sp, #12]
 800efe6:	1d1a      	adds	r2, r3, #4
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	9203      	str	r2, [sp, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	bfb8      	it	lt
 800eff0:	f04f 33ff 	movlt.w	r3, #4294967295
 800eff4:	3402      	adds	r4, #2
 800eff6:	9305      	str	r3, [sp, #20]
 800eff8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f0c4 <_svfiprintf_r+0x1fc>
 800effc:	7821      	ldrb	r1, [r4, #0]
 800effe:	2203      	movs	r2, #3
 800f000:	4650      	mov	r0, sl
 800f002:	f7f1 f8f5 	bl	80001f0 <memchr>
 800f006:	b140      	cbz	r0, 800f01a <_svfiprintf_r+0x152>
 800f008:	2340      	movs	r3, #64	; 0x40
 800f00a:	eba0 000a 	sub.w	r0, r0, sl
 800f00e:	fa03 f000 	lsl.w	r0, r3, r0
 800f012:	9b04      	ldr	r3, [sp, #16]
 800f014:	4303      	orrs	r3, r0
 800f016:	3401      	adds	r4, #1
 800f018:	9304      	str	r3, [sp, #16]
 800f01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f01e:	4826      	ldr	r0, [pc, #152]	; (800f0b8 <_svfiprintf_r+0x1f0>)
 800f020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f024:	2206      	movs	r2, #6
 800f026:	f7f1 f8e3 	bl	80001f0 <memchr>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d038      	beq.n	800f0a0 <_svfiprintf_r+0x1d8>
 800f02e:	4b23      	ldr	r3, [pc, #140]	; (800f0bc <_svfiprintf_r+0x1f4>)
 800f030:	bb1b      	cbnz	r3, 800f07a <_svfiprintf_r+0x1b2>
 800f032:	9b03      	ldr	r3, [sp, #12]
 800f034:	3307      	adds	r3, #7
 800f036:	f023 0307 	bic.w	r3, r3, #7
 800f03a:	3308      	adds	r3, #8
 800f03c:	9303      	str	r3, [sp, #12]
 800f03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f040:	4433      	add	r3, r6
 800f042:	9309      	str	r3, [sp, #36]	; 0x24
 800f044:	e767      	b.n	800ef16 <_svfiprintf_r+0x4e>
 800f046:	fb0c 3202 	mla	r2, ip, r2, r3
 800f04a:	460c      	mov	r4, r1
 800f04c:	2001      	movs	r0, #1
 800f04e:	e7a5      	b.n	800ef9c <_svfiprintf_r+0xd4>
 800f050:	2300      	movs	r3, #0
 800f052:	3401      	adds	r4, #1
 800f054:	9305      	str	r3, [sp, #20]
 800f056:	4619      	mov	r1, r3
 800f058:	f04f 0c0a 	mov.w	ip, #10
 800f05c:	4620      	mov	r0, r4
 800f05e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f062:	3a30      	subs	r2, #48	; 0x30
 800f064:	2a09      	cmp	r2, #9
 800f066:	d903      	bls.n	800f070 <_svfiprintf_r+0x1a8>
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d0c5      	beq.n	800eff8 <_svfiprintf_r+0x130>
 800f06c:	9105      	str	r1, [sp, #20]
 800f06e:	e7c3      	b.n	800eff8 <_svfiprintf_r+0x130>
 800f070:	fb0c 2101 	mla	r1, ip, r1, r2
 800f074:	4604      	mov	r4, r0
 800f076:	2301      	movs	r3, #1
 800f078:	e7f0      	b.n	800f05c <_svfiprintf_r+0x194>
 800f07a:	ab03      	add	r3, sp, #12
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	462a      	mov	r2, r5
 800f080:	4b0f      	ldr	r3, [pc, #60]	; (800f0c0 <_svfiprintf_r+0x1f8>)
 800f082:	a904      	add	r1, sp, #16
 800f084:	4638      	mov	r0, r7
 800f086:	f3af 8000 	nop.w
 800f08a:	1c42      	adds	r2, r0, #1
 800f08c:	4606      	mov	r6, r0
 800f08e:	d1d6      	bne.n	800f03e <_svfiprintf_r+0x176>
 800f090:	89ab      	ldrh	r3, [r5, #12]
 800f092:	065b      	lsls	r3, r3, #25
 800f094:	f53f af2c 	bmi.w	800eef0 <_svfiprintf_r+0x28>
 800f098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f09a:	b01d      	add	sp, #116	; 0x74
 800f09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a0:	ab03      	add	r3, sp, #12
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	462a      	mov	r2, r5
 800f0a6:	4b06      	ldr	r3, [pc, #24]	; (800f0c0 <_svfiprintf_r+0x1f8>)
 800f0a8:	a904      	add	r1, sp, #16
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	f000 f87a 	bl	800f1a4 <_printf_i>
 800f0b0:	e7eb      	b.n	800f08a <_svfiprintf_r+0x1c2>
 800f0b2:	bf00      	nop
 800f0b4:	0800fa9c 	.word	0x0800fa9c
 800f0b8:	0800faa6 	.word	0x0800faa6
 800f0bc:	00000000 	.word	0x00000000
 800f0c0:	0800ee11 	.word	0x0800ee11
 800f0c4:	0800faa2 	.word	0x0800faa2

0800f0c8 <_printf_common>:
 800f0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	4699      	mov	r9, r3
 800f0d0:	688a      	ldr	r2, [r1, #8]
 800f0d2:	690b      	ldr	r3, [r1, #16]
 800f0d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	bfb8      	it	lt
 800f0dc:	4613      	movlt	r3, r2
 800f0de:	6033      	str	r3, [r6, #0]
 800f0e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0e4:	4607      	mov	r7, r0
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	b10a      	cbz	r2, 800f0ee <_printf_common+0x26>
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	6033      	str	r3, [r6, #0]
 800f0ee:	6823      	ldr	r3, [r4, #0]
 800f0f0:	0699      	lsls	r1, r3, #26
 800f0f2:	bf42      	ittt	mi
 800f0f4:	6833      	ldrmi	r3, [r6, #0]
 800f0f6:	3302      	addmi	r3, #2
 800f0f8:	6033      	strmi	r3, [r6, #0]
 800f0fa:	6825      	ldr	r5, [r4, #0]
 800f0fc:	f015 0506 	ands.w	r5, r5, #6
 800f100:	d106      	bne.n	800f110 <_printf_common+0x48>
 800f102:	f104 0a19 	add.w	sl, r4, #25
 800f106:	68e3      	ldr	r3, [r4, #12]
 800f108:	6832      	ldr	r2, [r6, #0]
 800f10a:	1a9b      	subs	r3, r3, r2
 800f10c:	42ab      	cmp	r3, r5
 800f10e:	dc26      	bgt.n	800f15e <_printf_common+0x96>
 800f110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f114:	1e13      	subs	r3, r2, #0
 800f116:	6822      	ldr	r2, [r4, #0]
 800f118:	bf18      	it	ne
 800f11a:	2301      	movne	r3, #1
 800f11c:	0692      	lsls	r2, r2, #26
 800f11e:	d42b      	bmi.n	800f178 <_printf_common+0xb0>
 800f120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f124:	4649      	mov	r1, r9
 800f126:	4638      	mov	r0, r7
 800f128:	47c0      	blx	r8
 800f12a:	3001      	adds	r0, #1
 800f12c:	d01e      	beq.n	800f16c <_printf_common+0xa4>
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	68e5      	ldr	r5, [r4, #12]
 800f132:	6832      	ldr	r2, [r6, #0]
 800f134:	f003 0306 	and.w	r3, r3, #6
 800f138:	2b04      	cmp	r3, #4
 800f13a:	bf08      	it	eq
 800f13c:	1aad      	subeq	r5, r5, r2
 800f13e:	68a3      	ldr	r3, [r4, #8]
 800f140:	6922      	ldr	r2, [r4, #16]
 800f142:	bf0c      	ite	eq
 800f144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f148:	2500      	movne	r5, #0
 800f14a:	4293      	cmp	r3, r2
 800f14c:	bfc4      	itt	gt
 800f14e:	1a9b      	subgt	r3, r3, r2
 800f150:	18ed      	addgt	r5, r5, r3
 800f152:	2600      	movs	r6, #0
 800f154:	341a      	adds	r4, #26
 800f156:	42b5      	cmp	r5, r6
 800f158:	d11a      	bne.n	800f190 <_printf_common+0xc8>
 800f15a:	2000      	movs	r0, #0
 800f15c:	e008      	b.n	800f170 <_printf_common+0xa8>
 800f15e:	2301      	movs	r3, #1
 800f160:	4652      	mov	r2, sl
 800f162:	4649      	mov	r1, r9
 800f164:	4638      	mov	r0, r7
 800f166:	47c0      	blx	r8
 800f168:	3001      	adds	r0, #1
 800f16a:	d103      	bne.n	800f174 <_printf_common+0xac>
 800f16c:	f04f 30ff 	mov.w	r0, #4294967295
 800f170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f174:	3501      	adds	r5, #1
 800f176:	e7c6      	b.n	800f106 <_printf_common+0x3e>
 800f178:	18e1      	adds	r1, r4, r3
 800f17a:	1c5a      	adds	r2, r3, #1
 800f17c:	2030      	movs	r0, #48	; 0x30
 800f17e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f182:	4422      	add	r2, r4
 800f184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f18c:	3302      	adds	r3, #2
 800f18e:	e7c7      	b.n	800f120 <_printf_common+0x58>
 800f190:	2301      	movs	r3, #1
 800f192:	4622      	mov	r2, r4
 800f194:	4649      	mov	r1, r9
 800f196:	4638      	mov	r0, r7
 800f198:	47c0      	blx	r8
 800f19a:	3001      	adds	r0, #1
 800f19c:	d0e6      	beq.n	800f16c <_printf_common+0xa4>
 800f19e:	3601      	adds	r6, #1
 800f1a0:	e7d9      	b.n	800f156 <_printf_common+0x8e>
	...

0800f1a4 <_printf_i>:
 800f1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a8:	7e0f      	ldrb	r7, [r1, #24]
 800f1aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f1ac:	2f78      	cmp	r7, #120	; 0x78
 800f1ae:	4691      	mov	r9, r2
 800f1b0:	4680      	mov	r8, r0
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	469a      	mov	sl, r3
 800f1b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f1ba:	d807      	bhi.n	800f1cc <_printf_i+0x28>
 800f1bc:	2f62      	cmp	r7, #98	; 0x62
 800f1be:	d80a      	bhi.n	800f1d6 <_printf_i+0x32>
 800f1c0:	2f00      	cmp	r7, #0
 800f1c2:	f000 80d8 	beq.w	800f376 <_printf_i+0x1d2>
 800f1c6:	2f58      	cmp	r7, #88	; 0x58
 800f1c8:	f000 80a3 	beq.w	800f312 <_printf_i+0x16e>
 800f1cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1d4:	e03a      	b.n	800f24c <_printf_i+0xa8>
 800f1d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1da:	2b15      	cmp	r3, #21
 800f1dc:	d8f6      	bhi.n	800f1cc <_printf_i+0x28>
 800f1de:	a101      	add	r1, pc, #4	; (adr r1, 800f1e4 <_printf_i+0x40>)
 800f1e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f1e4:	0800f23d 	.word	0x0800f23d
 800f1e8:	0800f251 	.word	0x0800f251
 800f1ec:	0800f1cd 	.word	0x0800f1cd
 800f1f0:	0800f1cd 	.word	0x0800f1cd
 800f1f4:	0800f1cd 	.word	0x0800f1cd
 800f1f8:	0800f1cd 	.word	0x0800f1cd
 800f1fc:	0800f251 	.word	0x0800f251
 800f200:	0800f1cd 	.word	0x0800f1cd
 800f204:	0800f1cd 	.word	0x0800f1cd
 800f208:	0800f1cd 	.word	0x0800f1cd
 800f20c:	0800f1cd 	.word	0x0800f1cd
 800f210:	0800f35d 	.word	0x0800f35d
 800f214:	0800f281 	.word	0x0800f281
 800f218:	0800f33f 	.word	0x0800f33f
 800f21c:	0800f1cd 	.word	0x0800f1cd
 800f220:	0800f1cd 	.word	0x0800f1cd
 800f224:	0800f37f 	.word	0x0800f37f
 800f228:	0800f1cd 	.word	0x0800f1cd
 800f22c:	0800f281 	.word	0x0800f281
 800f230:	0800f1cd 	.word	0x0800f1cd
 800f234:	0800f1cd 	.word	0x0800f1cd
 800f238:	0800f347 	.word	0x0800f347
 800f23c:	682b      	ldr	r3, [r5, #0]
 800f23e:	1d1a      	adds	r2, r3, #4
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	602a      	str	r2, [r5, #0]
 800f244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f24c:	2301      	movs	r3, #1
 800f24e:	e0a3      	b.n	800f398 <_printf_i+0x1f4>
 800f250:	6820      	ldr	r0, [r4, #0]
 800f252:	6829      	ldr	r1, [r5, #0]
 800f254:	0606      	lsls	r6, r0, #24
 800f256:	f101 0304 	add.w	r3, r1, #4
 800f25a:	d50a      	bpl.n	800f272 <_printf_i+0xce>
 800f25c:	680e      	ldr	r6, [r1, #0]
 800f25e:	602b      	str	r3, [r5, #0]
 800f260:	2e00      	cmp	r6, #0
 800f262:	da03      	bge.n	800f26c <_printf_i+0xc8>
 800f264:	232d      	movs	r3, #45	; 0x2d
 800f266:	4276      	negs	r6, r6
 800f268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f26c:	485e      	ldr	r0, [pc, #376]	; (800f3e8 <_printf_i+0x244>)
 800f26e:	230a      	movs	r3, #10
 800f270:	e019      	b.n	800f2a6 <_printf_i+0x102>
 800f272:	680e      	ldr	r6, [r1, #0]
 800f274:	602b      	str	r3, [r5, #0]
 800f276:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f27a:	bf18      	it	ne
 800f27c:	b236      	sxthne	r6, r6
 800f27e:	e7ef      	b.n	800f260 <_printf_i+0xbc>
 800f280:	682b      	ldr	r3, [r5, #0]
 800f282:	6820      	ldr	r0, [r4, #0]
 800f284:	1d19      	adds	r1, r3, #4
 800f286:	6029      	str	r1, [r5, #0]
 800f288:	0601      	lsls	r1, r0, #24
 800f28a:	d501      	bpl.n	800f290 <_printf_i+0xec>
 800f28c:	681e      	ldr	r6, [r3, #0]
 800f28e:	e002      	b.n	800f296 <_printf_i+0xf2>
 800f290:	0646      	lsls	r6, r0, #25
 800f292:	d5fb      	bpl.n	800f28c <_printf_i+0xe8>
 800f294:	881e      	ldrh	r6, [r3, #0]
 800f296:	4854      	ldr	r0, [pc, #336]	; (800f3e8 <_printf_i+0x244>)
 800f298:	2f6f      	cmp	r7, #111	; 0x6f
 800f29a:	bf0c      	ite	eq
 800f29c:	2308      	moveq	r3, #8
 800f29e:	230a      	movne	r3, #10
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f2a6:	6865      	ldr	r5, [r4, #4]
 800f2a8:	60a5      	str	r5, [r4, #8]
 800f2aa:	2d00      	cmp	r5, #0
 800f2ac:	bfa2      	ittt	ge
 800f2ae:	6821      	ldrge	r1, [r4, #0]
 800f2b0:	f021 0104 	bicge.w	r1, r1, #4
 800f2b4:	6021      	strge	r1, [r4, #0]
 800f2b6:	b90e      	cbnz	r6, 800f2bc <_printf_i+0x118>
 800f2b8:	2d00      	cmp	r5, #0
 800f2ba:	d04d      	beq.n	800f358 <_printf_i+0x1b4>
 800f2bc:	4615      	mov	r5, r2
 800f2be:	fbb6 f1f3 	udiv	r1, r6, r3
 800f2c2:	fb03 6711 	mls	r7, r3, r1, r6
 800f2c6:	5dc7      	ldrb	r7, [r0, r7]
 800f2c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f2cc:	4637      	mov	r7, r6
 800f2ce:	42bb      	cmp	r3, r7
 800f2d0:	460e      	mov	r6, r1
 800f2d2:	d9f4      	bls.n	800f2be <_printf_i+0x11a>
 800f2d4:	2b08      	cmp	r3, #8
 800f2d6:	d10b      	bne.n	800f2f0 <_printf_i+0x14c>
 800f2d8:	6823      	ldr	r3, [r4, #0]
 800f2da:	07de      	lsls	r6, r3, #31
 800f2dc:	d508      	bpl.n	800f2f0 <_printf_i+0x14c>
 800f2de:	6923      	ldr	r3, [r4, #16]
 800f2e0:	6861      	ldr	r1, [r4, #4]
 800f2e2:	4299      	cmp	r1, r3
 800f2e4:	bfde      	ittt	le
 800f2e6:	2330      	movle	r3, #48	; 0x30
 800f2e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f2ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f2f0:	1b52      	subs	r2, r2, r5
 800f2f2:	6122      	str	r2, [r4, #16]
 800f2f4:	f8cd a000 	str.w	sl, [sp]
 800f2f8:	464b      	mov	r3, r9
 800f2fa:	aa03      	add	r2, sp, #12
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	4640      	mov	r0, r8
 800f300:	f7ff fee2 	bl	800f0c8 <_printf_common>
 800f304:	3001      	adds	r0, #1
 800f306:	d14c      	bne.n	800f3a2 <_printf_i+0x1fe>
 800f308:	f04f 30ff 	mov.w	r0, #4294967295
 800f30c:	b004      	add	sp, #16
 800f30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f312:	4835      	ldr	r0, [pc, #212]	; (800f3e8 <_printf_i+0x244>)
 800f314:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f318:	6829      	ldr	r1, [r5, #0]
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f320:	6029      	str	r1, [r5, #0]
 800f322:	061d      	lsls	r5, r3, #24
 800f324:	d514      	bpl.n	800f350 <_printf_i+0x1ac>
 800f326:	07df      	lsls	r7, r3, #31
 800f328:	bf44      	itt	mi
 800f32a:	f043 0320 	orrmi.w	r3, r3, #32
 800f32e:	6023      	strmi	r3, [r4, #0]
 800f330:	b91e      	cbnz	r6, 800f33a <_printf_i+0x196>
 800f332:	6823      	ldr	r3, [r4, #0]
 800f334:	f023 0320 	bic.w	r3, r3, #32
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	2310      	movs	r3, #16
 800f33c:	e7b0      	b.n	800f2a0 <_printf_i+0xfc>
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	f043 0320 	orr.w	r3, r3, #32
 800f344:	6023      	str	r3, [r4, #0]
 800f346:	2378      	movs	r3, #120	; 0x78
 800f348:	4828      	ldr	r0, [pc, #160]	; (800f3ec <_printf_i+0x248>)
 800f34a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f34e:	e7e3      	b.n	800f318 <_printf_i+0x174>
 800f350:	0659      	lsls	r1, r3, #25
 800f352:	bf48      	it	mi
 800f354:	b2b6      	uxthmi	r6, r6
 800f356:	e7e6      	b.n	800f326 <_printf_i+0x182>
 800f358:	4615      	mov	r5, r2
 800f35a:	e7bb      	b.n	800f2d4 <_printf_i+0x130>
 800f35c:	682b      	ldr	r3, [r5, #0]
 800f35e:	6826      	ldr	r6, [r4, #0]
 800f360:	6961      	ldr	r1, [r4, #20]
 800f362:	1d18      	adds	r0, r3, #4
 800f364:	6028      	str	r0, [r5, #0]
 800f366:	0635      	lsls	r5, r6, #24
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	d501      	bpl.n	800f370 <_printf_i+0x1cc>
 800f36c:	6019      	str	r1, [r3, #0]
 800f36e:	e002      	b.n	800f376 <_printf_i+0x1d2>
 800f370:	0670      	lsls	r0, r6, #25
 800f372:	d5fb      	bpl.n	800f36c <_printf_i+0x1c8>
 800f374:	8019      	strh	r1, [r3, #0]
 800f376:	2300      	movs	r3, #0
 800f378:	6123      	str	r3, [r4, #16]
 800f37a:	4615      	mov	r5, r2
 800f37c:	e7ba      	b.n	800f2f4 <_printf_i+0x150>
 800f37e:	682b      	ldr	r3, [r5, #0]
 800f380:	1d1a      	adds	r2, r3, #4
 800f382:	602a      	str	r2, [r5, #0]
 800f384:	681d      	ldr	r5, [r3, #0]
 800f386:	6862      	ldr	r2, [r4, #4]
 800f388:	2100      	movs	r1, #0
 800f38a:	4628      	mov	r0, r5
 800f38c:	f7f0 ff30 	bl	80001f0 <memchr>
 800f390:	b108      	cbz	r0, 800f396 <_printf_i+0x1f2>
 800f392:	1b40      	subs	r0, r0, r5
 800f394:	6060      	str	r0, [r4, #4]
 800f396:	6863      	ldr	r3, [r4, #4]
 800f398:	6123      	str	r3, [r4, #16]
 800f39a:	2300      	movs	r3, #0
 800f39c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3a0:	e7a8      	b.n	800f2f4 <_printf_i+0x150>
 800f3a2:	6923      	ldr	r3, [r4, #16]
 800f3a4:	462a      	mov	r2, r5
 800f3a6:	4649      	mov	r1, r9
 800f3a8:	4640      	mov	r0, r8
 800f3aa:	47d0      	blx	sl
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	d0ab      	beq.n	800f308 <_printf_i+0x164>
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	079b      	lsls	r3, r3, #30
 800f3b4:	d413      	bmi.n	800f3de <_printf_i+0x23a>
 800f3b6:	68e0      	ldr	r0, [r4, #12]
 800f3b8:	9b03      	ldr	r3, [sp, #12]
 800f3ba:	4298      	cmp	r0, r3
 800f3bc:	bfb8      	it	lt
 800f3be:	4618      	movlt	r0, r3
 800f3c0:	e7a4      	b.n	800f30c <_printf_i+0x168>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	4649      	mov	r1, r9
 800f3c8:	4640      	mov	r0, r8
 800f3ca:	47d0      	blx	sl
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	d09b      	beq.n	800f308 <_printf_i+0x164>
 800f3d0:	3501      	adds	r5, #1
 800f3d2:	68e3      	ldr	r3, [r4, #12]
 800f3d4:	9903      	ldr	r1, [sp, #12]
 800f3d6:	1a5b      	subs	r3, r3, r1
 800f3d8:	42ab      	cmp	r3, r5
 800f3da:	dcf2      	bgt.n	800f3c2 <_printf_i+0x21e>
 800f3dc:	e7eb      	b.n	800f3b6 <_printf_i+0x212>
 800f3de:	2500      	movs	r5, #0
 800f3e0:	f104 0619 	add.w	r6, r4, #25
 800f3e4:	e7f5      	b.n	800f3d2 <_printf_i+0x22e>
 800f3e6:	bf00      	nop
 800f3e8:	0800faad 	.word	0x0800faad
 800f3ec:	0800fabe 	.word	0x0800fabe

0800f3f0 <__retarget_lock_acquire_recursive>:
 800f3f0:	4770      	bx	lr

0800f3f2 <__retarget_lock_release_recursive>:
 800f3f2:	4770      	bx	lr

0800f3f4 <memmove>:
 800f3f4:	4288      	cmp	r0, r1
 800f3f6:	b510      	push	{r4, lr}
 800f3f8:	eb01 0402 	add.w	r4, r1, r2
 800f3fc:	d902      	bls.n	800f404 <memmove+0x10>
 800f3fe:	4284      	cmp	r4, r0
 800f400:	4623      	mov	r3, r4
 800f402:	d807      	bhi.n	800f414 <memmove+0x20>
 800f404:	1e43      	subs	r3, r0, #1
 800f406:	42a1      	cmp	r1, r4
 800f408:	d008      	beq.n	800f41c <memmove+0x28>
 800f40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f412:	e7f8      	b.n	800f406 <memmove+0x12>
 800f414:	4402      	add	r2, r0
 800f416:	4601      	mov	r1, r0
 800f418:	428a      	cmp	r2, r1
 800f41a:	d100      	bne.n	800f41e <memmove+0x2a>
 800f41c:	bd10      	pop	{r4, pc}
 800f41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f426:	e7f7      	b.n	800f418 <memmove+0x24>

0800f428 <_realloc_r>:
 800f428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f42c:	4680      	mov	r8, r0
 800f42e:	4614      	mov	r4, r2
 800f430:	460e      	mov	r6, r1
 800f432:	b921      	cbnz	r1, 800f43e <_realloc_r+0x16>
 800f434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f438:	4611      	mov	r1, r2
 800f43a:	f7ff bc25 	b.w	800ec88 <_malloc_r>
 800f43e:	b92a      	cbnz	r2, 800f44c <_realloc_r+0x24>
 800f440:	f7ff fbb6 	bl	800ebb0 <_free_r>
 800f444:	4625      	mov	r5, r4
 800f446:	4628      	mov	r0, r5
 800f448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f44c:	f000 f81b 	bl	800f486 <_malloc_usable_size_r>
 800f450:	4284      	cmp	r4, r0
 800f452:	4607      	mov	r7, r0
 800f454:	d802      	bhi.n	800f45c <_realloc_r+0x34>
 800f456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f45a:	d812      	bhi.n	800f482 <_realloc_r+0x5a>
 800f45c:	4621      	mov	r1, r4
 800f45e:	4640      	mov	r0, r8
 800f460:	f7ff fc12 	bl	800ec88 <_malloc_r>
 800f464:	4605      	mov	r5, r0
 800f466:	2800      	cmp	r0, #0
 800f468:	d0ed      	beq.n	800f446 <_realloc_r+0x1e>
 800f46a:	42bc      	cmp	r4, r7
 800f46c:	4622      	mov	r2, r4
 800f46e:	4631      	mov	r1, r6
 800f470:	bf28      	it	cs
 800f472:	463a      	movcs	r2, r7
 800f474:	f7ff fb86 	bl	800eb84 <memcpy>
 800f478:	4631      	mov	r1, r6
 800f47a:	4640      	mov	r0, r8
 800f47c:	f7ff fb98 	bl	800ebb0 <_free_r>
 800f480:	e7e1      	b.n	800f446 <_realloc_r+0x1e>
 800f482:	4635      	mov	r5, r6
 800f484:	e7df      	b.n	800f446 <_realloc_r+0x1e>

0800f486 <_malloc_usable_size_r>:
 800f486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f48a:	1f18      	subs	r0, r3, #4
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	bfbc      	itt	lt
 800f490:	580b      	ldrlt	r3, [r1, r0]
 800f492:	18c0      	addlt	r0, r0, r3
 800f494:	4770      	bx	lr
	...

0800f498 <_init>:
 800f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49a:	bf00      	nop
 800f49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f49e:	bc08      	pop	{r3}
 800f4a0:	469e      	mov	lr, r3
 800f4a2:	4770      	bx	lr

0800f4a4 <_fini>:
 800f4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4a6:	bf00      	nop
 800f4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4aa:	bc08      	pop	{r3}
 800f4ac:	469e      	mov	lr, r3
 800f4ae:	4770      	bx	lr
