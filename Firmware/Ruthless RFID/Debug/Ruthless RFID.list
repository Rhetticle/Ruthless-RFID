
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f04c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800f1ec  0800f1ec  0001f1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f78c  0800f78c  00020664  2**0
                  CONTENTS
  4 .ARM          00000008  0800f78c  0800f78c  0001f78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f794  0800f794  00020664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f794  0800f794  0001f794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f798  0800f798  0001f798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  0800f79c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065bc  20000664  0800fe00  00020664  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c20  0800fe00  00026c20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020664  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027501  00000000  00000000  00020694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ac0  00000000  00000000  00047b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  0004d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e68  00000000  00000000  0004f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dec4  00000000  00000000  00051578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a71  00000000  00000000  0006f43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f11a  00000000  00000000  00096ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135fc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d4c  00000000  00000000  00136018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000664 	.word	0x20000664
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1d4 	.word	0x0800f1d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000668 	.word	0x20000668
 80001dc:	0800f1d4 	.word	0x0800f1d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fd80 	bl	80030c4 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000684 	.word	0x20000684

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 fe5b 	bl	80032b8 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000684 	.word	0x20000684

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fd3d 	bl	80030c4 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 f935 	bl	80028c4 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000684 	.word	0x20000684

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 fe09 	bl	80032b8 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 f907 	bl	80028c4 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000684 	.word	0x20000684

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 f897 	bl	80028c4 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fb11 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fb0c 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 f867 	bl	80028c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fb04 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 f85f 	bl	80028c4 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 f809 	bl	80028c4 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d ff66 	bl	800e8c0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00d ff13 	bl	800e8c0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 fee5 	bl	80028c4 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 feda 	bl	80028c4 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 fed3 	bl	80028c4 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 feca 	bl	80028c4 <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f00d fe4a 	bl	800e8c0 <memcpy>
	CDC_Transmit_FS((uint8_t*)send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f00d f9b5 	bl	800dfa8 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 fe40 	bl	80028c4 <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 fe22 	bl	80028c4 <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0020 	add.w	r0, r7, #32
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f00d fef0 	bl	800eacc <siprintf>
						Print(mess);
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8000d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 fdc4 	bl	80028c4 <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fdbf 	bl	80028c4 <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f00d fe8d 	bl	800eacc <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3748      	adds	r7, #72	; 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000680 	.word	0x20000680
 8000dec:	0800f1ec 	.word	0x0800f1ec
 8000df0:	0800f204 	.word	0x0800f204
 8000df4:	0800f210 	.word	0x0800f210
 8000df8:	0800f21c 	.word	0x0800f21c
 8000dfc:	0800f228 	.word	0x0800f228

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00d fd63 	bl	800e8dc <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f001 ffe4 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f001 ffdf 	bl	8002e08 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f004 ff6a 	bl	8005d2e <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f001 ffcf 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fd2a 	bl	80028c4 <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f001 ffc5 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fd20 	bl	80028c4 <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200006d8 	.word	0x200006d8

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f001 ffab 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f001 ffa6 	bl	8002e08 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 ff31 	bl	8005d2e <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f001 ff96 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f001 ff91 	bl	8002e08 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f001 ff8a 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f001 ff85 	bl	8002e08 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200006d8 	.word	0x200006d8

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	482f      	ldr	r0, [pc, #188]	; (8001044 <OLED_INIT+0xc8>)
 8000f88:	f001 ff3e 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2108      	movs	r1, #8
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <OLED_INIT+0xc8>)
 8000f92:	f001 ff39 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2102      	movs	r1, #2
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <OLED_INIT+0xcc>)
 8000f9c:	f001 ff34 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f001 fc8f 	bl	80028c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <OLED_INIT+0xc8>)
 8000fac:	f001 ff2c 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f001 fc87 	bl	80028c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <OLED_INIT+0xc8>)
 8000fbc:	f001 ff24 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f001 fc7f 	bl	80028c4 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <OLED_INIT+0xd0>)
 8000fc8:	463c      	mov	r4, r7
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd4:	c403      	stmia	r4!, {r0, r1}
 8000fd6:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	e00c      	b.n	8000ff8 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000fde:	463a      	mov	r2, r7
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff1e 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f001 fc69 	bl	80028c4 <HAL_Delay>
	for(int i=0;i<25;i++){
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b18      	cmp	r3, #24
 8000ffc:	ddef      	ble.n	8000fde <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000ffe:	20a7      	movs	r0, #167	; 0xa7
 8001000:	f7ff ff12 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <OLED_INIT+0xd4>)
 8001006:	f7ff ff85 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 800100a:	20af      	movs	r0, #175	; 0xaf
 800100c:	f7ff ff0c 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f001 fc56 	bl	80028c4 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001018:	20ae      	movs	r0, #174	; 0xae
 800101a:	f7ff ff05 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f001 fc50 	bl	80028c4 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8001024:	20a6      	movs	r0, #166	; 0xa6
 8001026:	f7ff feff 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f001 fc4a 	bl	80028c4 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001030:	20af      	movs	r0, #175	; 0xaf
 8001032:	f7ff fef9 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 8001036:	f7ff fee3 	bl	8000e00 <OLED_Clear>
	return HAL_OK;
 800103a:	2300      	movs	r3, #0

}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	0800f23c 	.word	0x0800f23c
 8001050:	20000000 	.word	0x20000000

08001054 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001060:	2005      	movs	r0, #5
 8001062:	f00d fc1d 	bl	800e8a0 <malloc>
 8001066:	4603      	mov	r3, r0
 8001068:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e013      	b.n	8001098 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f1a3 0220 	sub.w	r2, r3, #32
 8001076:	4910      	ldr	r1, [pc, #64]	; (80010b8 <OLED_InvChar+0x64>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	18ca      	adds	r2, r1, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	440b      	add	r3, r1
 800108c:	43d2      	mvns	r2, r2
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b05      	cmp	r3, #5
 800109c:	dde8      	ble.n	8001070 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 800109e:	2205      	movs	r2, #5
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f00d fc0c 	bl	800e8c0 <memcpy>
	free(temp);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f00d fc01 	bl	800e8b0 <free>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800f400 	.word	0x0800f400

080010bc <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	4613      	mov	r3, r2
 80010d8:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b50      	subs	r3, #80	; 0x50
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fea1 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe9a 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe91 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 8001106:	2006      	movs	r0, #6
 8001108:	f00d fbca 	bl	800e8a0 <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	f1a3 0220 	sub.w	r2, r3, #32
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <OLED_drawChar+0xa0>)
 8001124:	4413      	add	r3, r2
 8001126:	2205      	movs	r2, #5
 8001128:	4619      	mov	r1, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f00d fbc8 	bl	800e8c0 <memcpy>
 8001130:	e004      	b.n	800113c <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff8c 	bl	8001054 <OLED_InvChar>
	}

	*(data+5)=0x00;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3305      	adds	r3, #5
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001144:	2106      	movs	r1, #6
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fea8 	bl	8000e9c <OLED_data>
	free(data);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f00d fbaf 	bl	800e8b0 <free>
	}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	0800f400 	.word	0x0800f400

08001160 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e014      	b.n	80011a6 <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4413      	add	r3, r2
 800118e:	b2d9      	uxtb	r1, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	79f8      	ldrb	r0, [r7, #7]
 800119c:	f7ff ff8e 	bl	80010bc <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f7ff f81a 	bl	80001e0 <strlen>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8e3      	bhi.n	800117c <OLED_Printlin+0x1c>


	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff f806 	bl	80001e0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	0fda      	lsrs	r2, r3, #31
 80011dc:	4413      	add	r3, r2
 80011de:	105b      	asrs	r3, r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	3340      	adds	r3, #64	; 0x40
 80011ee:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	79f8      	ldrb	r0, [r7, #7]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	f7ff ffb1 	bl	8001160 <OLED_Printlin>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001206:	b580      	push	{r7, lr}
 8001208:	b094      	sub	sp, #80	; 0x50
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 800120e:	2320      	movs	r3, #32
 8001210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001218:	2300      	movs	r3, #0
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 800121c:	2300      	movs	r3, #0
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
 8001228:	e018      	b.n	800125c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 800122a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800122c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800122e:	4413      	add	r3, r2
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b20      	cmp	r3, #32
 800123a:	d10b      	bne.n	8001254 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 800123c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800123e:	b2d9      	uxtb	r1, r3
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
	                i++;
 800124c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124e:	3301      	adds	r3, #1
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001252:	e000      	b.n	8001256 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001254:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001258:	3301      	adds	r3, #1
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
 800125c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800125e:	2b15      	cmp	r3, #21
 8001260:	dde3      	ble.n	800122a <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b20      	cmp	r3, #32
 800126c:	d102      	bne.n	8001274 <OLED_Print+0x6e>
	            last_ind++;
 800126e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001270:	3301      	adds	r3, #1
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ffb0 	bl	80001e0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	2b15      	cmp	r3, #21
 8001284:	d828      	bhi.n	80012d8 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ffa7 	bl	80001e0 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d1      	adds	r1, r2, r3
 800129c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4618      	mov	r0, r3
 80012a4:	f00d fc32 	bl	800eb0c <strncpy>
	            memset(thisline+linend,fill,21-linend);
 80012a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012aa:	f107 0220 	add.w	r2, r7, #32
 80012ae:	18d0      	adds	r0, r2, r3
 80012b0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80012b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b6:	f1c3 0315 	rsb	r3, r3, #21
 80012ba:	461a      	mov	r2, r3
 80012bc:	f00d fb0e 	bl	800e8dc <memset>
	            thisline[21]=' ';
 80012c0:	2320      	movs	r3, #32
 80012c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 80012c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	2300      	movs	r3, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	f7ff ff45 	bl	8001160 <OLED_Printlin>




	    }
}
 80012d6:	e05e      	b.n	8001396 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80012d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012da:	3314      	adds	r3, #20
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d03a      	beq.n	800135c <OLED_Print+0x156>
 80012e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e8:	3315      	adds	r3, #21
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d033      	beq.n	800135c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80012f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	18d1      	adds	r1, r2, r3
 80012fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fc:	3b01      	subs	r3, #1
 80012fe:	3350      	adds	r3, #80	; 0x50
 8001300:	443b      	add	r3, r7
 8001302:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001306:	461a      	mov	r2, r3
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f00d fbfd 	bl	800eb0c <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 8001312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001314:	3b01      	subs	r3, #1
 8001316:	3350      	adds	r3, #80	; 0x50
 8001318:	443b      	add	r3, r7
 800131a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800131e:	461a      	mov	r2, r3
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	1898      	adds	r0, r3, r2
 8001326:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132c:	3b01      	subs	r3, #1
 800132e:	3350      	adds	r3, #80	; 0x50
 8001330:	443b      	add	r3, r7
 8001332:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001336:	f1c3 0315 	rsb	r3, r3, #21
 800133a:	461a      	mov	r2, r3
 800133c:	f00d face 	bl	800e8dc <memset>
	            thisline[21]=' ';
 8001340:	2320      	movs	r3, #32
 8001342:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	3b01      	subs	r3, #1
 800134a:	3350      	adds	r3, #80	; 0x50
 800134c:	443b      	add	r3, r7
 800134e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001352:	461a      	mov	r2, r3
 8001354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001356:	4413      	add	r3, r2
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
 800135a:	e00e      	b.n	800137a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 800135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	18d1      	adds	r1, r2, r3
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2215      	movs	r2, #21
 8001368:	4618      	mov	r0, r3
 800136a:	f00d fbcf 	bl	800eb0c <strncpy>
	            thisline[21]=' ';
 800136e:	2320      	movs	r3, #32
 8001370:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001376:	3315      	adds	r3, #21
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800137a:	2300      	movs	r3, #0
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	f107 0220 	add.w	r2, r7, #32
 8001386:	2300      	movs	r3, #0
 8001388:	2102      	movs	r1, #2
 800138a:	f7ff fee9 	bl	8001160 <OLED_Printlin>
	        line++;
 800138e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001390:	3301      	adds	r3, #1
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001394:	e746      	b.n	8001224 <OLED_Print+0x1e>
}
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 80013a8:	f7ff fd2a 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	4619      	mov	r1, r3
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff01 	bl	80011be <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e01a      	b.n	80013f8 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	7818      	ldrb	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	7859      	ldrb	r1, [r3, #1]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	f7ff feb7 	bl	8001160 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbde      	blt.n	80013c2 <OLED_SCREEN+0x26>
	}
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	460b      	mov	r3, r1
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3302      	adds	r3, #2
 800143e:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	b2d9      	uxtb	r1, r3
 8001450:	2300      	movs	r3, #0
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	f7ff fe84 	bl	8001160 <OLED_Printlin>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	460b      	mov	r3, r1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 800146e:	4a40      	ldr	r2, [pc, #256]	; (8001570 <OLED_SELECT+0x110>)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	8019      	strh	r1, [r3, #0]
 800147a:	3302      	adds	r3, #2
 800147c:	0c12      	lsrs	r2, r2, #16
 800147e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d116      	bne.n	80014b4 <OLED_SELECT+0x54>
			if(selopt==0){
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10b      	bne.n	80014a4 <OLED_SELECT+0x44>
			rest=(char*)screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001498:	3b01      	subs	r3, #1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e009      	b.n	80014b8 <OLED_SELECT+0x58>
			}
			else{
				rest=(char*)screen->data[selopt];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e001      	b.n	80014b8 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <OLED_SELECT+0x114>)
 80014b6:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d124      	bne.n	8001508 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014ca:	3b01      	subs	r3, #1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014e0:	3b01      	subs	r3, #1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	773b      	strb	r3, [r7, #28]
 8001506:	e021      	b.n	800154c <OLED_SELECT+0xec>



	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001512:	3b01      	subs	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001526:	3b01      	subs	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	7afb      	ldrb	r3, [r7, #11]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 800154c:	7fb9      	ldrb	r1, [r7, #30]
 800154e:	7ff8      	ldrb	r0, [r7, #31]
 8001550:	2300      	movs	r3, #0
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	f7ff fe04 	bl	8001160 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001558:	f107 0214 	add.w	r2, r7, #20
 800155c:	7f39      	ldrb	r1, [r7, #28]
 800155e:	7f78      	ldrb	r0, [r7, #29]
 8001560:	2300      	movs	r3, #0
 8001562:	f7ff fdfd 	bl	8001160 <OLED_Printlin>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	0800f25c 	.word	0x0800f25c
 8001574:	0800f258 	.word	0x0800f258

08001578 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT,addr,0x00};
 8001582:	230f      	movs	r3, #15
 8001584:	733b      	strb	r3, [r7, #12]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	737b      	strb	r3, [r7, #13]
 800158a:	2300      	movs	r3, #0
 800158c:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <STAT_READ+0x54>)
 8001596:	f001 fc37 	bl	8002e08 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800159a:	bf00      	nop
 800159c:	f107 0208 	add.w	r2, r7, #8
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2303      	movs	r3, #3
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <STAT_READ+0x58>)
 80015ac:	f004 fcfb 	bl	8005fa6 <HAL_SPI_TransmitReceive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f2      	bne.n	800159c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <STAT_READ+0x54>)
 80015be:	f001 fc23 	bl	8002e08 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 80015c2:	7abb      	ldrb	r3, [r7, #10]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000
 80015d0:	20000730 	.word	0x20000730

080015d4 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80015e4:	231f      	movs	r3, #31
 80015e6:	733b      	strb	r3, [r7, #12]
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	737b      	strb	r3, [r7, #13]
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <STAT_WRITE+0x4c>)
 80015f8:	f001 fc06 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80015fc:	f107 010c 	add.w	r1, r7, #12
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	2203      	movs	r2, #3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <STAT_WRITE+0x50>)
 8001606:	f004 fb92 	bl	8005d2e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <STAT_WRITE+0x4c>)
 8001612:	f001 fbf9 	bl	8002e08 <HAL_GPIO_WritePin>

	return(HAL_OK);
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020000 	.word	0x40020000
 8001624:	20000730 	.word	0x20000730

08001628 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800162e:	2306      	movs	r3, #6
 8001630:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 8001632:	f000 f825 	bl	8001680 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001636:	e011      	b.n	800165c <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <WRIT_EN+0x50>)
 8001640:	f001 fbe2 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8001644:	1df9      	adds	r1, r7, #7
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	2201      	movs	r2, #1
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <WRIT_EN+0x54>)
 800164c:	f004 fb6f 	bl	8005d2e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <WRIT_EN+0x50>)
 8001658:	f001 fbd6 	bl	8002e08 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 800165c:	20c0      	movs	r0, #192	; 0xc0
 800165e:	f7ff ff8b 	bl	8001578 <STAT_READ>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d1e5      	bne.n	8001638 <WRIT_EN+0x10>
	}


}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000
 800167c:	20000730 	.word	0x20000730

08001680 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001686:	2304      	movs	r3, #4
 8001688:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800168a:	e011      	b.n	80016b0 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <WRITE_DIS+0x4c>)
 8001694:	f001 fbb8 	bl	8002e08 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001698:	1df9      	adds	r1, r7, #7
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <WRITE_DIS+0x50>)
 80016a0:	f004 fb45 	bl	8005d2e <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <WRITE_DIS+0x4c>)
 80016ac:	f001 fbac 	bl	8002e08 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80016b0:	20c0      	movs	r0, #192	; 0xc0
 80016b2:	f7ff ff61 	bl	8001578 <STAT_READ>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d0e5      	beq.n	800168c <WRITE_DIS+0xc>
		}
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000
 80016d0:	20000730 	.word	0x20000730

080016d4 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param page_addr - Page address to begin erasing from
 * */
void block_erase(uint16_t page_addr) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction [] = {BLOCK_ERS, 0x00, page_addr>>8, page_addr};
 80016de:	23d8      	movs	r3, #216	; 0xd8
 80016e0:	733b      	strb	r3, [r7, #12]
 80016e2:	2300      	movs	r3, #0
 80016e4:	737b      	strb	r3, [r7, #13]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	73bb      	strb	r3, [r7, #14]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	73fb      	strb	r3, [r7, #15]
	WRIT_EN();
 80016f6:	f7ff ff97 	bl	8001628 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <block_erase+0x68>)
 8001702:	f001 fb81 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, 4, 100);
 8001706:	f107 010c 	add.w	r1, r7, #12
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	2204      	movs	r2, #4
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <block_erase+0x6c>)
 8001710:	f004 fb0d 	bl	8005d2e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171a:	4808      	ldr	r0, [pc, #32]	; (800173c <block_erase+0x68>)
 800171c:	f001 fb74 	bl	8002e08 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001720:	bf00      	nop
 8001722:	20c0      	movs	r0, #192	; 0xc0
 8001724:	f7ff ff28 	bl	8001578 <STAT_READ>
 8001728:	4603      	mov	r3, r0
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d0f7      	beq.n	8001722 <block_erase+0x4e>
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	20000730 	.word	0x20000730

08001744 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174e:	480a      	ldr	r0, [pc, #40]	; (8001778 <MEM_INIT+0x34>)
 8001750:	f001 fb5a 	bl	8002e08 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001754:	2100      	movs	r1, #0
 8001756:	20a0      	movs	r0, #160	; 0xa0
 8001758:	f7ff ff3c 	bl	80015d4 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 800175c:	20a0      	movs	r0, #160	; 0xa0
 800175e:	f7ff ff0b 	bl	8001578 <STAT_READ>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MEM_INIT+0x28>
		return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e002      	b.n	8001772 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 800176c:	f7ff ff88 	bl	8001680 <WRITE_DIS>
	return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000

0800177c <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint16_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 800177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001780:	b091      	sub	sp, #68	; 0x44
 8001782:	af02      	add	r7, sp, #8
 8001784:	613a      	str	r2, [r7, #16]
 8001786:	461a      	mov	r2, r3
 8001788:	4603      	mov	r3, r0
 800178a:	82fb      	strh	r3, [r7, #22]
 800178c:	460b      	mov	r3, r1
 800178e:	82bb      	strh	r3, [r7, #20]
 8001790:	4613      	mov	r3, r2
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	466b      	mov	r3, sp
 8001796:	461e      	mov	r6, r3
	uint8_t transaction[]={READ_PAGE,0x00,page_addr>>8,page_addr};
 8001798:	2313      	movs	r3, #19
 800179a:	773b      	strb	r3, [r7, #28]
 800179c:	2300      	movs	r3, #0
 800179e:	777b      	strb	r3, [r7, #29]
 80017a0:	8afb      	ldrh	r3, [r7, #22]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	77bb      	strb	r3, [r7, #30]
 80017aa:	8afb      	ldrh	r3, [r7, #22]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	77fb      	strb	r3, [r7, #31]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 80017b0:	2304      	movs	r3, #4
 80017b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t read_data[bytes+transaction_size];
 80017b6:	89fa      	ldrh	r2, [r7, #14]
 80017b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017bc:	18d1      	adds	r1, r2, r3
 80017be:	1e4b      	subs	r3, r1, #1
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c2:	460a      	mov	r2, r1
 80017c4:	2300      	movs	r3, #0
 80017c6:	603a      	str	r2, [r7, #0]
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	00c3      	lsls	r3, r0, #3
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	00c2      	lsls	r2, r0, #3
 80017e0:	460a      	mov	r2, r1
 80017e2:	2300      	movs	r3, #0
 80017e4:	4692      	mov	sl, r2
 80017e6:	469b      	mov	fp, r3
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017fc:	460b      	mov	r3, r1
 80017fe:	3307      	adds	r3, #7
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	ebad 0d03 	sub.w	sp, sp, r3
 8001808:	ab02      	add	r3, sp, #8
 800180a:	3300      	adds	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t rec_data[bytes+transaction_size];
 800180e:	89fa      	ldrh	r2, [r7, #14]
 8001810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001814:	18d1      	adds	r1, r2, r3
 8001816:	1e4b      	subs	r3, r1, #1
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	460a      	mov	r2, r1
 800181c:	2300      	movs	r3, #0
 800181e:	4690      	mov	r8, r2
 8001820:	4699      	mov	r9, r3
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800182e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001836:	460a      	mov	r2, r1
 8001838:	2300      	movs	r3, #0
 800183a:	4614      	mov	r4, r2
 800183c:	461d      	mov	r5, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	00eb      	lsls	r3, r5, #3
 8001848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184c:	00e2      	lsls	r2, r4, #3
 800184e:	460b      	mov	r3, r1
 8001850:	3307      	adds	r3, #7
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	ebad 0d03 	sub.w	sp, sp, r3
 800185a:	ab02      	add	r3, sp, #8
 800185c:	3300      	adds	r3, #0
 800185e:	623b      	str	r3, [r7, #32]

	memset(read_data, 0, bytes+transaction_size); //Fill our read_data command array for dummy data while getting actual data
 8001860:	89fa      	ldrh	r2, [r7, #14]
 8001862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001866:	4413      	add	r3, r2
 8001868:	461a      	mov	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800186e:	f00d f835 	bl	800e8dc <memset>
	read_data[0]=READ_BUF;
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2203      	movs	r2, #3
 8001876:	701a      	strb	r2, [r3, #0]
	read_data[1]= col_addr>>8;
 8001878:	8abb      	ldrh	r3, [r7, #20]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29b      	uxth	r3, r3
 800187e:	b2da      	uxtb	r2, r3
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	705a      	strb	r2, [r3, #1]
	read_data[2] = col_addr;
 8001884:	8abb      	ldrh	r3, [r7, #20]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	709a      	strb	r2, [r3, #2]
	read_data[3] = 0x00; //dummy
 800188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188e:	2200      	movs	r2, #0
 8001890:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	4838      	ldr	r0, [pc, #224]	; (800197c <MEM_READPAGE+0x200>)
 800189a:	f001 fab5 	bl	8002e08 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 800189e:	f107 011c 	add.w	r1, r7, #28
 80018a2:	2364      	movs	r3, #100	; 0x64
 80018a4:	2204      	movs	r2, #4
 80018a6:	4836      	ldr	r0, [pc, #216]	; (8001980 <MEM_READPAGE+0x204>)
 80018a8:	f004 fa41 	bl	8005d2e <HAL_SPI_Transmit>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <MEM_READPAGE+0x146>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b8:	4830      	ldr	r0, [pc, #192]	; (800197c <MEM_READPAGE+0x200>)
 80018ba:	f001 faa5 	bl	8002e08 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80018be:	2301      	movs	r3, #1
 80018c0:	e056      	b.n	8001970 <MEM_READPAGE+0x1f4>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c8:	482c      	ldr	r0, [pc, #176]	; (800197c <MEM_READPAGE+0x200>)
 80018ca:	f001 fa9d 	bl	8002e08 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 80018ce:	bf00      	nop
 80018d0:	20c0      	movs	r0, #192	; 0xc0
 80018d2:	f7ff fe51 	bl	8001578 <STAT_READ>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d0f7      	beq.n	80018d0 <MEM_READPAGE+0x154>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e6:	4825      	ldr	r0, [pc, #148]	; (800197c <MEM_READPAGE+0x200>)
 80018e8:	f001 fa8e 	bl	8002e08 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_data, rec_data, bytes+transaction_size, 100)!=HAL_OK){
 80018ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	89fb      	ldrh	r3, [r7, #14]
 80018f4:	4413      	add	r3, r2
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2264      	movs	r2, #100	; 0x64
 80018fa:	9200      	str	r2, [sp, #0]
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001900:	481f      	ldr	r0, [pc, #124]	; (8001980 <MEM_READPAGE+0x204>)
 8001902:	f004 fb50 	bl	8005fa6 <HAL_SPI_TransmitReceive>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <MEM_READPAGE+0x1a0>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001912:	481a      	ldr	r0, [pc, #104]	; (800197c <MEM_READPAGE+0x200>)
 8001914:	f001 fa78 	bl	8002e08 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001918:	2301      	movs	r3, #1
 800191a:	e029      	b.n	8001970 <MEM_READPAGE+0x1f4>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	4816      	ldr	r0, [pc, #88]	; (800197c <MEM_READPAGE+0x200>)
 8001924:	f001 fa70 	bl	8002e08 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001928:	bf00      	nop
 800192a:	20c0      	movs	r0, #192	; 0xc0
 800192c:	f7ff fe24 	bl	8001578 <STAT_READ>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d0f7      	beq.n	800192a <MEM_READPAGE+0x1ae>

	if (bytes == 1) {
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d104      	bne.n	800194a <MEM_READPAGE+0x1ce>
		*data = rec_data[4];
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	791a      	ldrb	r2, [r3, #4]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e011      	b.n	800196e <MEM_READPAGE+0x1f2>
	} else {
		for(int i = 0; i < bytes; i++){
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
 800194e:	e00a      	b.n	8001966 <MEM_READPAGE+0x1ea>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8001950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001956:	6939      	ldr	r1, [r7, #16]
 8001958:	440b      	add	r3, r1
 800195a:	6a39      	ldr	r1, [r7, #32]
 800195c:	5c8a      	ldrb	r2, [r1, r2]
 800195e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	3301      	adds	r3, #1
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800196a:	429a      	cmp	r2, r3
 800196c:	dbf0      	blt.n	8001950 <MEM_READPAGE+0x1d4>
		}
	}

	return(HAL_OK);
 800196e:	2300      	movs	r3, #0
 8001970:	46b5      	mov	sp, r6

}
 8001972:	4618      	mov	r0, r3
 8001974:	373c      	adds	r7, #60	; 0x3c
 8001976:	46bd      	mov	sp, r7
 8001978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800197c:	40020000 	.word	0x40020000
 8001980:	20000730 	.word	0x20000730

08001984 <mem_init>:
 * 									FATFS Section
 *
 * Following functions are added in order to make this driver compatible with the FATFS package
 * */

DSTATUS mem_init (BYTE pdrv) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	if (MEM_INIT() != HAL_OK) {
 800198e:	f7ff fed9 	bl	8001744 <MEM_INIT>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <mem_init+0x18>
		return STA_NOINIT;
 8001998:	2301      	movs	r3, #1
 800199a:	e005      	b.n	80019a8 <mem_init+0x24>
	}
	MEM_STATUS = MEM_OK;
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <mem_init+0x2c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	return (MEM_STATUS); //Inidicates successful init
 80019a2:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <mem_init+0x2c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000400 	.word	0x20000400

080019b4 <mem_getstatus>:

DSTATUS mem_getstatus (BYTE prdv) {
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	return MEM_STATUS;
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <mem_getstatus+0x1c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000400 	.word	0x20000400

080019d4 <mem_read>:

DRESULT mem_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
	 if (!count) { //0 count, invalid parameter
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <mem_read+0x1a>
		 return RES_PARERR;
 80019ea:	2304      	movs	r3, #4
 80019ec:	e022      	b.n	8001a34 <mem_read+0x60>
	 }

	 if (MEM_STATUS) { //Memory not initialised
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <mem_read+0x68>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <mem_read+0x28>
		 return RES_NOTRDY;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e01b      	b.n	8001a34 <mem_read+0x60>
	 }

	 for (int i = 0; i < count; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e013      	b.n	8001a2a <mem_read+0x56>
		 if (MEM_READPAGE(sector+i, 0x0000, (uint8_t*) buff, count) != HAL_OK) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b298      	uxth	r0, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	2100      	movs	r1, #0
 8001a16:	f7ff feb1 	bl	800177c <MEM_READPAGE>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <mem_read+0x50>
			 return RES_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e007      	b.n	8001a34 <mem_read+0x60>
	 for (int i = 0; i < count; i++) {
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d8e7      	bhi.n	8001a02 <mem_read+0x2e>
		 }
	 }

	 return RES_OK;
 8001a32:	2300      	movs	r3, #0

}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000400 	.word	0x20000400

08001a40 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001a44:	2108      	movs	r1, #8
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <BUZZ+0x20>)
 8001a48:	f004 fea8 	bl	800679c <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a50:	f000 ff38 	bl	80028c4 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001a54:	2108      	movs	r1, #8
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <BUZZ+0x20>)
 8001a58:	f004 ff50 	bl	80068fc <HAL_TIM_PWM_Stop>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000788 	.word	0x20000788

08001a64 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a72:	2102      	movs	r1, #2
 8001a74:	4820      	ldr	r0, [pc, #128]	; (8001af8 <choose+0x94>)
 8001a76:	f001 f9af 	bl	8002dd8 <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d136      	bne.n	8001aee <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <choose+0x98>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a88:	e012      	b.n	8001ab0 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 8001a8a:	481c      	ldr	r0, [pc, #112]	; (8001afc <choose+0x98>)
 8001a8c:	f004 fd48 	bl	8006520 <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <choose+0x98>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d108      	bne.n	8001ab0 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001a9e:	4817      	ldr	r0, [pc, #92]	; (8001afc <choose+0x98>)
 8001aa0:	f004 fd98 	bl	80065d4 <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	e01e      	b.n	8001aee <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4811      	ldr	r0, [pc, #68]	; (8001af8 <choose+0x94>)
 8001ab4:	f001 f990 	bl	8002dd8 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0e5      	beq.n	8001a8a <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d102      	bne.n	8001ad8 <choose+0x74>
	 	    	*count = 0;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f7ff fcbc 	bl	8001460 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <choose+0x98>)
 8001aea:	f004 fd73 	bl	80065d4 <HAL_TIM_Base_Stop>
	 	}
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40020000 	.word	0x40020000
 8001afc:	200007d0 	.word	0x200007d0

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b04:	f000 fe9c 	bl	8002840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b08:	f000 f866 	bl	8001bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0c:	f000 fa2e 	bl	8001f6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b10:	f000 f8cc 	bl	8001cac <MX_I2C1_Init>
  MX_SPI1_Init();
 8001b14:	f000 f8f8 	bl	8001d08 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001b18:	f000 f92e 	bl	8001d78 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001b1c:	f000 f962 	bl	8001de4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b20:	f000 f9d6 	bl	8001ed0 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001b24:	f007 f9a4 	bl	8008e70 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b28:	f009 fa78 	bl	800b01c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(uint8_t*), &UidtoFound_attributes);
 8001b2c:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <main+0x94>)
 8001b2e:	2104      	movs	r1, #4
 8001b30:	2001      	movs	r0, #1
 8001b32:	f009 fb6b 	bl	800b20c <osMessageQueueNew>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <main+0x98>)
 8001b3a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001b3c:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <main+0x9c>)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <main+0xa0>)
 8001b42:	f009 fab5 	bl	800b0b0 <osThreadNew>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <main+0xa4>)
 8001b4a:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <main+0xa8>)
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4816      	ldr	r0, [pc, #88]	; (8001bac <main+0xac>)
 8001b52:	f009 faad 	bl	800b0b0 <osThreadNew>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <main+0xb0>)
 8001b5a:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001b5c:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <main+0xb4>)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <main+0xb8>)
 8001b62:	f009 faa5 	bl	800b0b0 <osThreadNew>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <main+0xbc>)
 8001b6a:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <main+0xc0>)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <main+0xc4>)
 8001b72:	f009 fa9d 	bl	800b0b0 <osThreadNew>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <main+0xc8>)
 8001b7a:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <main+0xcc>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <main+0xd0>)
 8001b82:	f009 fa95 	bl	800b0b0 <osThreadNew>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <main+0xd4>)
 8001b8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b8c:	f009 fa6a 	bl	800b064 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <main+0x90>
 8001b92:	bf00      	nop
 8001b94:	0800f694 	.word	0x0800f694
 8001b98:	2000082c 	.word	0x2000082c
 8001b9c:	0800f5e0 	.word	0x0800f5e0
 8001ba0:	08002055 	.word	0x08002055
 8001ba4:	20000818 	.word	0x20000818
 8001ba8:	0800f604 	.word	0x0800f604
 8001bac:	080020f1 	.word	0x080020f1
 8001bb0:	2000081c 	.word	0x2000081c
 8001bb4:	0800f628 	.word	0x0800f628
 8001bb8:	080021a5 	.word	0x080021a5
 8001bbc:	20000820 	.word	0x20000820
 8001bc0:	0800f64c 	.word	0x0800f64c
 8001bc4:	080021d1 	.word	0x080021d1
 8001bc8:	20000824 	.word	0x20000824
 8001bcc:	0800f670 	.word	0x0800f670
 8001bd0:	0800225d 	.word	0x0800225d
 8001bd4:	20000828 	.word	0x20000828

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	; 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2230      	movs	r2, #48	; 0x30
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00c fe78 	bl	800e8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <SystemClock_Config+0xcc>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <SystemClock_Config+0xcc>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <SystemClock_Config+0xcc>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <SystemClock_Config+0xd0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <SystemClock_Config+0xd0>)
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <SystemClock_Config+0xd0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c50:	23a8      	movs	r3, #168	; 0xa8
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c54:	2304      	movs	r3, #4
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5c:	f107 0320 	add.w	r3, r7, #32
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fb27 	bl	80052b4 <HAL_RCC_OscConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c6c:	f000 fb6a 	bl	8002344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c70:	230f      	movs	r3, #15
 8001c72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c74:	2302      	movs	r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fd89 	bl	80057a4 <HAL_RCC_ClockConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c98:	f000 fb54 	bl	8002344 <Error_Handler>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3750      	adds	r7, #80	; 0x50
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000

08001cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cb2:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <MX_I2C1_Init+0x54>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <MX_I2C1_Init+0x58>)
 8001cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cea:	f001 f8a7 	bl	8002e3c <HAL_I2C_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cf4:	f000 fb26 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000684 	.word	0x20000684
 8001d00:	40005400 	.word	0x40005400
 8001d04:	000186a0 	.word	0x000186a0

08001d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d0e:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <MX_SPI1_Init+0x6c>)
 8001d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d20:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d3e:	2218      	movs	r2, #24
 8001d40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d56:	220a      	movs	r2, #10
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d5c:	f003 ff5e 	bl	8005c1c <HAL_SPI_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d66:	f000 faed 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200006d8 	.word	0x200006d8
 8001d74:	40013000 	.word	0x40013000

08001d78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <MX_SPI2_Init+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001dca:	f003 ff27 	bl	8005c1c <HAL_SPI_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dd4:	f000 fab6 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000730 	.word	0x20000730
 8001de0:	40003800 	.word	0x40003800

08001de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08e      	sub	sp, #56	; 0x38
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e1e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e2c:	2231      	movs	r2, #49	; 0x31
 8001e2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e3e:	f004 fb1f 	bl	8006480 <HAL_TIM_Base_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e48:	f000 fa7c 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	4619      	mov	r1, r3
 8001e58:	481c      	ldr	r0, [pc, #112]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e5a:	f004 ff7d 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e64:	f000 fa6e 	bl	8002344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e68:	4818      	ldr	r0, [pc, #96]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e6a:	f004 fc3d 	bl	80066e8 <HAL_TIM_PWM_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e74:	f000 fa66 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4619      	mov	r1, r3
 8001e86:	4811      	ldr	r0, [pc, #68]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e88:	f005 fb22 	bl	80074d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e92:	f000 fa57 	bl	8002344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e96:	2360      	movs	r3, #96	; 0x60
 8001e98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001e9a:	2318      	movs	r3, #24
 8001e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001eae:	f004 fe91 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001eb8:	f000 fa44 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001ebe:	f000 fb6f 	bl	80025a0 <HAL_TIM_MspPostInit>

}
 8001ec2:	bf00      	nop
 8001ec4:	3738      	adds	r7, #56	; 0x38
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000788 	.word	0x20000788

08001ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <MX_TIM3_Init+0x98>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001ef4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001ef8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f16:	f004 fab3 	bl	8006480 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f20:	f000 fa10 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f32:	f004 ff11 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f3c:	f000 fa02 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f4e:	f005 fabf 	bl	80074d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f58:	f000 f9f4 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200007d0 	.word	0x200007d0
 8001f68:	40000400 	.word	0x40000400

08001f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b29      	ldr	r3, [pc, #164]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a28      	ldr	r2, [pc, #160]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b26      	ldr	r3, [pc, #152]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a21      	ldr	r2, [pc, #132]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001fdc:	481b      	ldr	r0, [pc, #108]	; (800204c <MX_GPIO_Init+0xe0>)
 8001fde:	f000 ff13 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2122      	movs	r1, #34	; 0x22
 8001fe6:	481a      	ldr	r0, [pc, #104]	; (8002050 <MX_GPIO_Init+0xe4>)
 8001fe8:	f000 ff0e 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001fec:	2302      	movs	r3, #2
 8001fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4813      	ldr	r0, [pc, #76]	; (800204c <MX_GPIO_Init+0xe0>)
 8002000:	f000 fd66 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002004:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <MX_GPIO_Init+0xe0>)
 800201e:	f000 fd57 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002022:	2322      	movs	r3, #34	; 0x22
 8002024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_GPIO_Init+0xe4>)
 800203a:	f000 fd49 	bl	8002ad0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400

08002054 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800205c:	f00b fee6 	bl	800de2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	uint8_t* sector = malloc(SECTOR_SIZE*sizeof(uint8_t));
 8002060:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002064:	f00c fc1c 	bl	800e8a0 <malloc>
 8002068:	4603      	mov	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]
	vTaskSuspend(ReadCardHandle);
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <Start_Init+0x84>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f00a f923 	bl	800c2bc <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <Start_Init+0x88>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f00a f91e 	bl	800c2bc <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <Start_Init+0x8c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f00a f919 	bl	800c2bc <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <Start_Init+0x90>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f00a f914 	bl	800c2bc <vTaskSuspend>

    MFRC_INIT();
 8002094:	f7fe fba0 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8002098:	f7fe fb56 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 800209c:	f7fe ff6e 	bl	8000f7c <OLED_INIT>
    OLED_Print(TC);
 80020a0:	4811      	ldr	r0, [pc, #68]	; (80020e8 <Start_Init+0x94>)
 80020a2:	f7ff f8b0 	bl	8001206 <OLED_Print>
    mem_init(0);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff fc6c 	bl	8001984 <mem_init>
    block_erase(0x0000);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fb11 	bl	80016d4 <block_erase>
    while(1) {
    	if(USER_read(0, sector, 0, 1000) != RES_OK) {
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	2200      	movs	r2, #0
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	2000      	movs	r0, #0
 80020bc:	f006 ff06 	bl	8008ecc <USER_read>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <Start_Init+0x7a>
    	    	Print("Error");
 80020c6:	4809      	ldr	r0, [pc, #36]	; (80020ec <Start_Init+0x98>)
 80020c8:	f7fe fd79 	bl	8000bbe <Print>
 80020cc:	e7f1      	b.n	80020b2 <Start_Init+0x5e>
    	} else {
    		CDC_Transmit_FS(sector, 1);
 80020ce:	2101      	movs	r1, #1
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f00b ff69 	bl	800dfa8 <CDC_Transmit_FS>
    	if(USER_read(0, sector, 0, 1000) != RES_OK) {
 80020d6:	e7ec      	b.n	80020b2 <Start_Init+0x5e>
 80020d8:	2000081c 	.word	0x2000081c
 80020dc:	20000820 	.word	0x20000820
 80020e0:	20000824 	.word	0x20000824
 80020e4:	20000828 	.word	0x20000828
 80020e8:	20000404 	.word	0x20000404
 80020ec:	0800f2a8 	.word	0x0800f2a8

080020f0 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	b091      	sub	sp, #68	; 0x44
 80020f4:	af06      	add	r7, sp, #24
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	uint8_t cardinf[18];
	char* toSend = malloc(26*sizeof(char));
 80020f8:	201a      	movs	r0, #26
 80020fa:	f00c fbd1 	bl	800e8a0 <malloc>
 80020fe:	4603      	mov	r3, r0
 8002100:	60bb      	str	r3, [r7, #8]
	int ranonce = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
	MFRC_ANTON();
 800210a:	f7fe fae3 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002114:	2100      	movs	r1, #0
 8002116:	481f      	ldr	r0, [pc, #124]	; (8002194 <StartReadCard+0xa4>)
 8002118:	f7ff f940 	bl	800139c <OLED_SCREEN>
		ranonce++;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	3301      	adds	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(DumpINFO(cardinf)==PCD_OK){
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fd92 	bl	8000c50 <DumpINFO>
 800212c:	4603      	mov	r3, r0
 800212e:	2bcc      	cmp	r3, #204	; 0xcc
 8002130:	d121      	bne.n	8002176 <StartReadCard+0x86>
			BUZZ();
 8002132:	f7ff fc85 	bl	8001a40 <BUZZ>
			MFRC_ANTOFF();
 8002136:	f7fe fb07 	bl	8000748 <MFRC_ANTOFF>
			sprintf(toSend,"%X%X%X%X%X%X%X", cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 800213a:	68b8      	ldr	r0, [r7, #8]
 800213c:	7b3b      	ldrb	r3, [r7, #12]
 800213e:	461e      	mov	r6, r3
 8002140:	7b7b      	ldrb	r3, [r7, #13]
 8002142:	469c      	mov	ip, r3
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	7c39      	ldrb	r1, [r7, #16]
 800214a:	7c7c      	ldrb	r4, [r7, #17]
 800214c:	7cbd      	ldrb	r5, [r7, #18]
 800214e:	9504      	str	r5, [sp, #16]
 8002150:	9403      	str	r4, [sp, #12]
 8002152:	9102      	str	r1, [sp, #8]
 8002154:	9201      	str	r2, [sp, #4]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	4663      	mov	r3, ip
 800215a:	4632      	mov	r2, r6
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <StartReadCard+0xa8>)
 800215e:	f00c fcb5 	bl	800eacc <siprintf>
			xQueueSend(UidtoFoundHandle,&toSend,0); //Send a pointer to our string to the Card Found task to use
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <StartReadCard+0xac>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	f107 0108 	add.w	r1, r7, #8
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	f009 fae7 	bl	800b740 <xQueueGenericSend>
			suspend = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	623b      	str	r3, [r7, #32]
		}
	if (suspend == 1) {
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d1c4      	bne.n	8002106 <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <StartReadCard+0xb0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f00a f943 	bl	800c40c <vTaskResume>
		ranonce = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
		vTaskSuspend(NULL);
 800218a:	2000      	movs	r0, #0
 800218c:	f00a f896 	bl	800c2bc <vTaskSuspend>
  {
 8002190:	e7b9      	b.n	8002106 <StartReadCard+0x16>
 8002192:	bf00      	nop
 8002194:	0800f704 	.word	0x0800f704
 8002198:	0800f2b0 	.word	0x0800f2b0
 800219c:	2000082c 	.word	0x2000082c
 80021a0:	20000828 	.word	0x20000828

080021a4 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 80021b6:	2100      	movs	r1, #0
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <StartWriteCard+0x28>)
 80021ba:	f7ff f8ef 	bl	800139c <OLED_SCREEN>
	  	ranonce++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f009 f806 	bl	800b1d6 <osDelay>
	  if (ranonce == 0){
 80021ca:	e7f1      	b.n	80021b0 <StartWriteCard+0xc>
 80021cc:	0800f72c 	.word	0x0800f72c

080021d0 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 80021ea:	2100      	movs	r1, #0
 80021ec:	4818      	ldr	r0, [pc, #96]	; (8002250 <StartHome+0x80>)
 80021ee:	f7ff f8d5 	bl	800139c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2201      	movs	r2, #1
 80021f8:	4619      	mov	r1, r3
 80021fa:	4815      	ldr	r0, [pc, #84]	; (8002250 <StartHome+0x80>)
 80021fc:	f7ff f930 	bl	8001460 <OLED_SELECT>
		  ranonce++;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 8002206:	f107 0210 	add.w	r2, r7, #16
 800220a:	f107 010c 	add.w	r1, r7, #12
 800220e:	2301      	movs	r3, #1
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2306      	movs	r3, #6
 8002214:	480e      	ldr	r0, [pc, #56]	; (8002250 <StartHome+0x80>)
 8002216:	f7ff fc25 	bl	8001a64 <choose>
	  if (suspend == 1) {
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d1df      	bne.n	80021e0 <StartHome+0x10>
		switch(count) {
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <StartHome+0x5c>
 8002226:	2b01      	cmp	r3, #1
 8002228:	d006      	beq.n	8002238 <StartHome+0x68>
 800222a:	e00b      	b.n	8002244 <StartHome+0x74>
			case 0:
				vTaskResume(ReadCardHandle);
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <StartHome+0x84>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f00a f8eb 	bl	800c40c <vTaskResume>
				break;
 8002236:	e005      	b.n	8002244 <StartHome+0x74>
			case 1:
				vTaskResume(WriteCardHandle);
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <StartHome+0x88>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f00a f8e5 	bl	800c40c <vTaskResume>
				break;
 8002242:	bf00      	nop
		}
		ranonce = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 8002248:	2000      	movs	r0, #0
 800224a:	f00a f837 	bl	800c2bc <vTaskSuspend>
  {
 800224e:	e7c7      	b.n	80021e0 <StartHome+0x10>
 8002250:	0800f6f0 	.word	0x0800f6f0
 8002254:	2000081c 	.word	0x2000081c
 8002258:	20000820 	.word	0x20000820

0800225c <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 800225c:	b5b0      	push	{r4, r5, r7, lr}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af02      	add	r7, sp, #8
 8002262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
	 int ranonce = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
	 char* cardinf;
	 char type[]="MIFARE ULTRALIGHT";
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <CardFoundStart+0xb4>)
 800226e:	f107 0410 	add.w	r4, r7, #16
 8002272:	461d      	mov	r5, r3
 8002274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	8023      	strh	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	2b00      	cmp	r3, #0
 8002284:	d126      	bne.n	80022d4 <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &cardinf, 0)!=pdTRUE);
 8002286:	bf00      	nop
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <CardFoundStart+0xb8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002290:	2200      	movs	r2, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f009 fbee 	bl	800ba74 <xQueueReceive>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d1f4      	bne.n	8002288 <CardFoundStart+0x2c>
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 800229e:	2100      	movs	r1, #0
 80022a0:	481d      	ldr	r0, [pc, #116]	; (8002318 <CardFoundStart+0xbc>)
 80022a2:	f7ff f87b 	bl	800139c <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, 1, cardinf);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	461a      	mov	r2, r3
 80022aa:	2101      	movs	r1, #1
 80022ac:	481a      	ldr	r0, [pc, #104]	; (8002318 <CardFoundStart+0xbc>)
 80022ae:	f7ff f8ae 	bl	800140e <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, 2, type);
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	461a      	mov	r2, r3
 80022b8:	2102      	movs	r1, #2
 80022ba:	4817      	ldr	r0, [pc, #92]	; (8002318 <CardFoundStart+0xbc>)
 80022bc:	f7ff f8a7 	bl	800140e <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2200      	movs	r2, #0
 80022c6:	4619      	mov	r1, r3
 80022c8:	4813      	ldr	r0, [pc, #76]	; (8002318 <CardFoundStart+0xbc>)
 80022ca:	f7ff f8c9 	bl	8001460 <OLED_SELECT>
		ranonce++;
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	3301      	adds	r3, #1
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	choose(&SCRN_CardFound,&suspend,&count,2,OLED_NORESTORE);
 80022d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022d8:	f107 010c 	add.w	r1, r7, #12
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2302      	movs	r3, #2
 80022e2:	480d      	ldr	r0, [pc, #52]	; (8002318 <CardFoundStart+0xbc>)
 80022e4:	f7ff fbbe 	bl	8001a64 <choose>
 	if((suspend == 1) && (count == 1)){
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d1c6      	bne.n	800227c <CardFoundStart+0x20>
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d1c3      	bne.n	800227c <CardFoundStart+0x20>
 		vTaskResume(HomeHandle);
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <CardFoundStart+0xc0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00a f887 	bl	800c40c <vTaskResume>
 		ranonce = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
 		count = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
 		vTaskSuspend(NULL);
 8002306:	2000      	movs	r0, #0
 8002308:	f009 ffd8 	bl	800c2bc <vTaskSuspend>
  {
 800230c:	e7b6      	b.n	800227c <CardFoundStart+0x20>
 800230e:	bf00      	nop
 8002310:	0800f2c0 	.word	0x0800f2c0
 8002314:	2000082c 	.word	0x2000082c
 8002318:	0800f718 	.word	0x0800f718
 800231c:	20000824 	.word	0x20000824

08002320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002332:	f000 faa7 	bl	8002884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40000c00 	.word	0x40000c00

08002344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234c:	e7fe      	b.n	800234c <Error_Handler+0x8>
	...

08002350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_MspInit+0x54>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_MspInit+0x54>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_MspInit+0x54>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_MspInit+0x54>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <HAL_MspInit+0x54>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_MspInit+0x54>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	210f      	movs	r1, #15
 8002392:	f06f 0001 	mvn.w	r0, #1
 8002396:	f000 fb71 	bl	8002a7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a19      	ldr	r2, [pc, #100]	; (800242c <HAL_I2C_MspInit+0x84>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12b      	bne.n	8002422 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_I2C_MspInit+0x88>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <HAL_I2C_MspInit+0x88>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_I2C_MspInit+0x88>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e6:	23c0      	movs	r3, #192	; 0xc0
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ea:	2312      	movs	r3, #18
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023f6:	2304      	movs	r3, #4
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <HAL_I2C_MspInit+0x8c>)
 8002402:	f000 fb65 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_I2C_MspInit+0x88>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_I2C_MspInit+0x88>)
 8002410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_I2C_MspInit+0x88>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	3728      	adds	r7, #40	; 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40005400 	.word	0x40005400
 8002430:	40023800 	.word	0x40023800
 8002434:	40020400 	.word	0x40020400

08002438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a32      	ldr	r2, [pc, #200]	; (8002520 <HAL_SPI_MspInit+0xe8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d12c      	bne.n	80024b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_SPI_MspInit+0xec>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a30      	ldr	r2, [pc, #192]	; (8002524 <HAL_SPI_MspInit+0xec>)
 8002464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_SPI_MspInit+0xec>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_SPI_MspInit+0xec>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a29      	ldr	r2, [pc, #164]	; (8002524 <HAL_SPI_MspInit+0xec>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_SPI_MspInit+0xec>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002492:	23a0      	movs	r3, #160	; 0xa0
 8002494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024a2:	2305      	movs	r3, #5
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4619      	mov	r1, r3
 80024ac:	481e      	ldr	r0, [pc, #120]	; (8002528 <HAL_SPI_MspInit+0xf0>)
 80024ae:	f000 fb0f 	bl	8002ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024b2:	e031      	b.n	8002518 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_SPI_MspInit+0xf4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12c      	bne.n	8002518 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_SPI_MspInit+0xec>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_SPI_MspInit+0xec>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_SPI_MspInit+0xec>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_SPI_MspInit+0xec>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_SPI_MspInit+0xec>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_SPI_MspInit+0xec>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80024f6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80024fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002508:	2305      	movs	r3, #5
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	4619      	mov	r1, r3
 8002512:	4807      	ldr	r0, [pc, #28]	; (8002530 <HAL_SPI_MspInit+0xf8>)
 8002514:	f000 fadc 	bl	8002ad0 <HAL_GPIO_Init>
}
 8002518:	bf00      	nop
 800251a:	3730      	adds	r7, #48	; 0x30
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40013000 	.word	0x40013000
 8002524:	40023800 	.word	0x40023800
 8002528:	40020000 	.word	0x40020000
 800252c:	40003800 	.word	0x40003800
 8002530:	40020400 	.word	0x40020400

08002534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d10e      	bne.n	8002564 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_TIM_Base_MspInit+0x64>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <HAL_TIM_Base_MspInit+0x64>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_TIM_Base_MspInit+0x64>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002562:	e012      	b.n	800258a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0c      	ldr	r2, [pc, #48]	; (800259c <HAL_TIM_Base_MspInit+0x68>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d10d      	bne.n	800258a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_TIM_Base_MspInit+0x64>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_TIM_Base_MspInit+0x64>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_TIM_Base_MspInit+0x64>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40000400 	.word	0x40000400

080025a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d11d      	bne.n	80025fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_TIM_MspPostInit+0x68>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_TIM_MspPostInit+0x68>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_TIM_MspPostInit+0x68>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025de:	2304      	movs	r3, #4
 80025e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ee:	2301      	movs	r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4619      	mov	r1, r3
 80025f8:	4804      	ldr	r0, [pc, #16]	; (800260c <HAL_TIM_MspPostInit+0x6c>)
 80025fa:	f000 fa69 	bl	8002ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40020000 	.word	0x40020000

08002610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	; 0x38
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_InitTick+0xe4>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	4a32      	ldr	r2, [pc, #200]	; (80026f4 <HAL_InitTick+0xe4>)
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	6413      	str	r3, [r2, #64]	; 0x40
 8002630:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_InitTick+0xe4>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800263c:	f107 0210 	add.w	r2, r7, #16
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fab6 	bl	8005bb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002656:	f003 fa9b 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 800265a:	6378      	str	r0, [r7, #52]	; 0x34
 800265c:	e004      	b.n	8002668 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800265e:	f003 fa97 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 8002662:	4603      	mov	r3, r0
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_InitTick+0xe8>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	0c9b      	lsrs	r3, r3, #18
 8002672:	3b01      	subs	r3, #1
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002676:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_InitTick+0xec>)
 8002678:	4a21      	ldr	r2, [pc, #132]	; (8002700 <HAL_InitTick+0xf0>)
 800267a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800267c:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_InitTick+0xec>)
 800267e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002682:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_InitTick+0xec>)
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_InitTick+0xec>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_InitTick+0xec>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_InitTick+0xec>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800269c:	4817      	ldr	r0, [pc, #92]	; (80026fc <HAL_InitTick+0xec>)
 800269e:	f003 feef 	bl	8006480 <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80026a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11b      	bne.n	80026e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80026b0:	4812      	ldr	r0, [pc, #72]	; (80026fc <HAL_InitTick+0xec>)
 80026b2:	f003 ffb7 	bl	8006624 <HAL_TIM_Base_Start_IT>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d111      	bne.n	80026e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026c4:	2032      	movs	r0, #50	; 0x32
 80026c6:	f000 f9f5 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	d808      	bhi.n	80026e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80026d0:	2200      	movs	r2, #0
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	2032      	movs	r0, #50	; 0x32
 80026d6:	f000 f9d1 	bl	8002a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_InitTick+0xf4>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e002      	b.n	80026e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3738      	adds	r7, #56	; 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	20000830 	.word	0x20000830
 8002700:	40000c00 	.word	0x40000c00
 8002704:	200004f0 	.word	0x200004f0

08002708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800270c:	e7fe      	b.n	800270c <NMI_Handler+0x4>

0800270e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <HardFault_Handler+0x4>

08002714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <MemManage_Handler+0x4>

0800271a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <BusFault_Handler+0x4>

08002720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <UsageFault_Handler+0x4>

08002726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <TIM5_IRQHandler+0x10>)
 800273a:	f004 f943 	bl	80069c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000830 	.word	0x20000830

08002748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <OTG_FS_IRQHandler+0x10>)
 800274e:	f001 fc84 	bl	800405a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200064e4 	.word	0x200064e4

0800275c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <_sbrk+0x5c>)
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <_sbrk+0x60>)
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <_sbrk+0x64>)
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <_sbrk+0x68>)
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d207      	bcs.n	800279c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800278c:	f00c f85e 	bl	800e84c <__errno>
 8002790:	4603      	mov	r3, r0
 8002792:	220c      	movs	r2, #12
 8002794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	e009      	b.n	80027b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <_sbrk+0x64>)
 80027ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20010000 	.word	0x20010000
 80027bc:	00000400 	.word	0x00000400
 80027c0:	20000878 	.word	0x20000878
 80027c4:	20006c20 	.word	0x20006c20

080027c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <SystemInit+0x20>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <SystemInit+0x20>)
 80027d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f0:	480d      	ldr	r0, [pc, #52]	; (8002828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027f2:	490e      	ldr	r1, [pc, #56]	; (800282c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002808:	4c0b      	ldr	r4, [pc, #44]	; (8002838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002816:	f7ff ffd7 	bl	80027c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f00c f81d 	bl	800e858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7ff f96f 	bl	8001b00 <main>
  bx  lr    
 8002822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002824:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800282c:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 8002830:	0800f79c 	.word	0x0800f79c
  ldr r2, =_sbss
 8002834:	20000664 	.word	0x20000664
  ldr r4, =_ebss
 8002838:	20006c20 	.word	0x20006c20

0800283c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC_IRQHandler>
	...

08002840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_Init+0x40>)
 800284a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_Init+0x40>)
 8002856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_Init+0x40>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 f8fc 	bl	8002a66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	200f      	movs	r0, #15
 8002870:	f7ff fece 	bl	8002610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f7ff fd6c 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	200004f4 	.word	0x200004f4
 80028a8:	2000087c 	.word	0x2000087c

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2000087c 	.word	0x2000087c

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200004f4 	.word	0x200004f4

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff4c 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8e:	f7ff ff61 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002a92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	6978      	ldr	r0, [r7, #20]
 8002a9a:	f7ff ffb1 	bl	8002a00 <NVIC_EncodePriority>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff80 	bl	80029ac <__NVIC_SetPriority>
}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff54 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e159      	b.n	8002da0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8148 	bne.w	8002d9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d130      	bne.n	8002b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80a2 	beq.w	8002d9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b57      	ldr	r3, [pc, #348]	; (8002db8 <HAL_GPIO_Init+0x2e8>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4a56      	ldr	r2, [pc, #344]	; (8002db8 <HAL_GPIO_Init+0x2e8>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	; 0x44
 8002c66:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <HAL_GPIO_Init+0x2e8>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c72:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_GPIO_Init+0x2ec>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a49      	ldr	r2, [pc, #292]	; (8002dc0 <HAL_GPIO_Init+0x2f0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_Init+0x202>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a48      	ldr	r2, [pc, #288]	; (8002dc4 <HAL_GPIO_Init+0x2f4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0x1fe>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a47      	ldr	r2, [pc, #284]	; (8002dc8 <HAL_GPIO_Init+0x2f8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_Init+0x1fa>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a46      	ldr	r2, [pc, #280]	; (8002dcc <HAL_GPIO_Init+0x2fc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_Init+0x1f6>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a45      	ldr	r2, [pc, #276]	; (8002dd0 <HAL_GPIO_Init+0x300>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_Init+0x1f2>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	e008      	b.n	8002cd4 <HAL_GPIO_Init+0x204>
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x204>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e004      	b.n	8002cd4 <HAL_GPIO_Init+0x204>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_Init+0x204>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x204>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f002 0203 	and.w	r2, r2, #3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4093      	lsls	r3, r2
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce4:	4935      	ldr	r1, [pc, #212]	; (8002dbc <HAL_GPIO_Init+0x2ec>)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf2:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d16:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d40:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d70:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d94:	4a0f      	ldr	r2, [pc, #60]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	f67f aea2 	bls.w	8002aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020800 	.word	0x40020800
 8002dcc:	40020c00 	.word	0x40020c00
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40013c00 	.word	0x40013c00

08002dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e001      	b.n	8002dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e12b      	b.n	80030a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff faa0 	bl	80023a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f002 fe76 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4a81      	ldr	r2, [pc, #516]	; (80030b0 <HAL_I2C_Init+0x274>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d807      	bhi.n	8002ec0 <HAL_I2C_Init+0x84>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4a80      	ldr	r2, [pc, #512]	; (80030b4 <HAL_I2C_Init+0x278>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	bf94      	ite	ls
 8002eb8:	2301      	movls	r3, #1
 8002eba:	2300      	movhi	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e006      	b.n	8002ece <HAL_I2C_Init+0x92>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a7d      	ldr	r2, [pc, #500]	; (80030b8 <HAL_I2C_Init+0x27c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	bf94      	ite	ls
 8002ec8:	2301      	movls	r3, #1
 8002eca:	2300      	movhi	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0e7      	b.n	80030a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a78      	ldr	r2, [pc, #480]	; (80030bc <HAL_I2C_Init+0x280>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0c9b      	lsrs	r3, r3, #18
 8002ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a6a      	ldr	r2, [pc, #424]	; (80030b0 <HAL_I2C_Init+0x274>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d802      	bhi.n	8002f10 <HAL_I2C_Init+0xd4>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	e009      	b.n	8002f24 <HAL_I2C_Init+0xe8>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	4a69      	ldr	r2, [pc, #420]	; (80030c0 <HAL_I2C_Init+0x284>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	3301      	adds	r3, #1
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	495c      	ldr	r1, [pc, #368]	; (80030b0 <HAL_I2C_Init+0x274>)
 8002f40:	428b      	cmp	r3, r1
 8002f42:	d819      	bhi.n	8002f78 <HAL_I2C_Init+0x13c>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e59      	subs	r1, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f58:	400b      	ands	r3, r1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_I2C_Init+0x138>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1e59      	subs	r1, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f72:	e051      	b.n	8003018 <HAL_I2C_Init+0x1dc>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e04f      	b.n	8003018 <HAL_I2C_Init+0x1dc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d111      	bne.n	8002fa4 <HAL_I2C_Init+0x168>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	440b      	add	r3, r1
 8002f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e012      	b.n	8002fca <HAL_I2C_Init+0x18e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1e58      	subs	r0, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	0099      	lsls	r1, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Init+0x196>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e022      	b.n	8003018 <HAL_I2C_Init+0x1dc>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_I2C_Init+0x1bc>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1e58      	subs	r0, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6859      	ldr	r1, [r3, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	440b      	add	r3, r1
 8002fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff6:	e00f      	b.n	8003018 <HAL_I2C_Init+0x1dc>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e58      	subs	r0, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	0099      	lsls	r1, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	fbb0 f3f3 	udiv	r3, r0, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	6809      	ldr	r1, [r1, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003046:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6911      	ldr	r1, [r2, #16]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68d2      	ldr	r2, [r2, #12]
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	000186a0 	.word	0x000186a0
 80030b4:	001e847f 	.word	0x001e847f
 80030b8:	003d08ff 	.word	0x003d08ff
 80030bc:	431bde83 	.word	0x431bde83
 80030c0:	10624dd3 	.word	0x10624dd3

080030c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	817b      	strh	r3, [r7, #10]
 80030d6:	460b      	mov	r3, r1
 80030d8:	813b      	strh	r3, [r7, #8]
 80030da:	4613      	mov	r3, r2
 80030dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030de:	f7ff fbe5 	bl	80028ac <HAL_GetTick>
 80030e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	f040 80d9 	bne.w	80032a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2319      	movs	r3, #25
 80030f8:	2201      	movs	r2, #1
 80030fa:	496d      	ldr	r1, [pc, #436]	; (80032b0 <HAL_I2C_Mem_Write+0x1ec>)
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fc7f 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
 800310a:	e0cc      	b.n	80032a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_I2C_Mem_Write+0x56>
 8003116:	2302      	movs	r3, #2
 8003118:	e0c5      	b.n	80032a6 <HAL_I2C_Mem_Write+0x1e2>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d007      	beq.n	8003140 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2221      	movs	r2, #33	; 0x21
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2240      	movs	r2, #64	; 0x40
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a4d      	ldr	r2, [pc, #308]	; (80032b4 <HAL_I2C_Mem_Write+0x1f0>)
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003182:	88f8      	ldrh	r0, [r7, #6]
 8003184:	893a      	ldrh	r2, [r7, #8]
 8003186:	8979      	ldrh	r1, [r7, #10]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	4603      	mov	r3, r0
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fab6 	bl	8003704 <I2C_RequestMemoryWrite>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d052      	beq.n	8003244 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e081      	b.n	80032a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fd00 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d107      	bne.n	80031ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e06b      	b.n	80032a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b04      	cmp	r3, #4
 800320a:	d11b      	bne.n	8003244 <HAL_I2C_Mem_Write+0x180>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d017      	beq.n	8003244 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1aa      	bne.n	80031a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fcec 	bl	8003c2e <I2C_WaitOnBTFFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e016      	b.n	80032a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	00100002 	.word	0x00100002
 80032b4:	ffff0000 	.word	0xffff0000

080032b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	4608      	mov	r0, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	817b      	strh	r3, [r7, #10]
 80032ca:	460b      	mov	r3, r1
 80032cc:	813b      	strh	r3, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d2:	f7ff faeb 	bl	80028ac <HAL_GetTick>
 80032d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	f040 8208 	bne.w	80036f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2319      	movs	r3, #25
 80032ec:	2201      	movs	r2, #1
 80032ee:	497b      	ldr	r1, [pc, #492]	; (80034dc <HAL_I2C_Mem_Read+0x224>)
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fb85 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
 80032fe:	e1fb      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_I2C_Mem_Read+0x56>
 800330a:	2302      	movs	r3, #2
 800330c:	e1f4      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d007      	beq.n	8003334 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2222      	movs	r2, #34	; 0x22
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a5b      	ldr	r2, [pc, #364]	; (80034e0 <HAL_I2C_Mem_Read+0x228>)
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003376:	88f8      	ldrh	r0, [r7, #6]
 8003378:	893a      	ldrh	r2, [r7, #8]
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4603      	mov	r3, r0
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa52 	bl	8003830 <I2C_RequestMemoryRead>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1b0      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d113      	bne.n	80033c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e184      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d11b      	bne.n	8003406 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e164      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b02      	cmp	r3, #2
 800340c:	d11b      	bne.n	8003446 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	e144      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800345c:	e138      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	2b03      	cmp	r3, #3
 8003464:	f200 80f1 	bhi.w	800364a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b01      	cmp	r3, #1
 800346e:	d123      	bne.n	80034b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fc1b 	bl	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e139      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b6:	e10b      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d14e      	bne.n	800355e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	2200      	movs	r2, #0
 80034c8:	4906      	ldr	r1, [pc, #24]	; (80034e4 <HAL_I2C_Mem_Read+0x22c>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fa98 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e10e      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
 80034da:	bf00      	nop
 80034dc:	00100002 	.word	0x00100002
 80034e0:	ffff0000 	.word	0xffff0000
 80034e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800355c:	e0b8      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	2200      	movs	r2, #0
 8003566:	4966      	ldr	r1, [pc, #408]	; (8003700 <HAL_I2C_Mem_Read+0x448>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa49 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0bf      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	2200      	movs	r2, #0
 80035c2:	494f      	ldr	r1, [pc, #316]	; (8003700 <HAL_I2C_Mem_Read+0x448>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fa1b 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e091      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003648:	e042      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fb2e 	bl	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e04c      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d118      	bne.n	80036d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f aec2 	bne.w	800345e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	00010004 	.word	0x00010004

08003704 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	461a      	mov	r2, r3
 8003712:	4603      	mov	r3, r0
 8003714:	817b      	strh	r3, [r7, #10]
 8003716:	460b      	mov	r3, r1
 8003718:	813b      	strh	r3, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	2200      	movs	r2, #0
 8003736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f960 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003754:	d103      	bne.n	800375e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e05f      	b.n	8003822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003770:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	6a3a      	ldr	r2, [r7, #32]
 8003776:	492d      	ldr	r1, [pc, #180]	; (800382c <I2C_RequestMemoryWrite+0x128>)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f998 	bl	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e04c      	b.n	8003822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	6a39      	ldr	r1, [r7, #32]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fa02 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d107      	bne.n	80037c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e02b      	b.n	8003822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d0:	893b      	ldrh	r3, [r7, #8]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	611a      	str	r2, [r3, #16]
 80037da:	e021      	b.n	8003820 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037dc:	893b      	ldrh	r3, [r7, #8]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	6a39      	ldr	r1, [r7, #32]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f9dc 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d107      	bne.n	8003812 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003810:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e005      	b.n	8003822 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003816:	893b      	ldrh	r3, [r7, #8]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	00010002 	.word	0x00010002

08003830 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	817b      	strh	r3, [r7, #10]
 8003842:	460b      	mov	r3, r1
 8003844:	813b      	strh	r3, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003858:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003868:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2200      	movs	r2, #0
 8003872:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f8c2 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003890:	d103      	bne.n	800389a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0aa      	b.n	80039f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	4952      	ldr	r1, [pc, #328]	; (80039fc <I2C_RequestMemoryRead+0x1cc>)
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f8fa 	bl	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e097      	b.n	80039f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f964 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d107      	bne.n	8003902 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003900:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e076      	b.n	80039f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800390c:	893b      	ldrh	r3, [r7, #8]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	611a      	str	r2, [r3, #16]
 8003916:	e021      	b.n	800395c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003918:	893b      	ldrh	r3, [r7, #8]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	b29b      	uxth	r3, r3
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	6a39      	ldr	r1, [r7, #32]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f93e 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b04      	cmp	r3, #4
 800393c:	d107      	bne.n	800394e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e050      	b.n	80039f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003952:	893b      	ldrh	r3, [r7, #8]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	6a39      	ldr	r1, [r7, #32]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f923 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00d      	beq.n	8003988 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	2b04      	cmp	r3, #4
 8003972:	d107      	bne.n	8003984 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003982:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e035      	b.n	80039f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003996:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	2200      	movs	r2, #0
 80039a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f82b 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	d103      	bne.n	80039c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e013      	b.n	80039f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039cc:	897b      	ldrh	r3, [r7, #10]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	6a3a      	ldr	r2, [r7, #32]
 80039e0:	4906      	ldr	r1, [pc, #24]	; (80039fc <I2C_RequestMemoryRead+0x1cc>)
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f863 	bl	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	00010002 	.word	0x00010002

08003a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a10:	e025      	b.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d021      	beq.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fe ff47 	bl	80028ac <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d116      	bne.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f043 0220 	orr.w	r2, r3, #32
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e023      	b.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10d      	bne.n	8003a84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4013      	ands	r3, r2
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	bf0c      	ite	eq
 8003a7a:	2301      	moveq	r3, #1
 8003a7c:	2300      	movne	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	e00c      	b.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d0b6      	beq.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003abc:	e051      	b.n	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003acc:	d123      	bne.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ae6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e046      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d021      	beq.n	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1e:	f7fe fec5 	bl	80028ac <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e020      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10c      	bne.n	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf14      	ite	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	2300      	moveq	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	e00b      	b.n	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	43da      	mvns	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d18d      	bne.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb8:	e02d      	b.n	8003c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f8ce 	bl	8003d5c <I2C_IsAcknowledgeFailed>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e02d      	b.n	8003c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d021      	beq.n	8003c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fe6b 	bl	80028ac <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d116      	bne.n	8003c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e007      	b.n	8003c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d1ca      	bne.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c3a:	e02d      	b.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f88d 	bl	8003d5c <I2C_IsAcknowledgeFailed>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e02d      	b.n	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d021      	beq.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7fe fe2a 	bl	80028ac <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d1ca      	bne.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cbc:	e042      	b.n	8003d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d119      	bne.n	8003d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0210 	mvn.w	r2, #16
 8003cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e029      	b.n	8003d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d00:	f7fe fdd4 	bl	80028ac <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e007      	b.n	8003d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d1b5      	bne.n	8003cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d11b      	bne.n	8003dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbc:	b08f      	sub	sp, #60	; 0x3c
 8003dbe:	af0a      	add	r7, sp, #40	; 0x28
 8003dc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e10f      	b.n	8003fec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f00a fa26 	bl	800e238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2203      	movs	r2, #3
 8003df0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 fcf7 	bl	80077fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	687e      	ldr	r6, [r7, #4]
 8003e18:	466d      	mov	r5, sp
 8003e1a:	f106 0410 	add.w	r4, r6, #16
 8003e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e2e:	1d33      	adds	r3, r6, #4
 8003e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e32:	6838      	ldr	r0, [r7, #0]
 8003e34:	f003 fbce 	bl	80075d4 <USB_CoreInit>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0d0      	b.n	8003fec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 fce5 	bl	8007820 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	e04a      	b.n	8003ef2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	333d      	adds	r3, #61	; 0x3d
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	333c      	adds	r3, #60	; 0x3c
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	b298      	uxth	r0, r3
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	3344      	adds	r3, #68	; 0x44
 8003e98:	4602      	mov	r2, r0
 8003e9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e9c:	7bfa      	ldrb	r2, [r7, #15]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3340      	adds	r3, #64	; 0x40
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3348      	adds	r3, #72	; 0x48
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	334c      	adds	r3, #76	; 0x4c
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3354      	adds	r3, #84	; 0x54
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d3af      	bcc.n	8003e5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e044      	b.n	8003f8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f2e:	7bfa      	ldrb	r2, [r7, #15]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d3b5      	bcc.n	8003f02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	687e      	ldr	r6, [r7, #4]
 8003f9e:	466d      	mov	r5, sp
 8003fa0:	f106 0410 	add.w	r4, r6, #16
 8003fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fb4:	1d33      	adds	r3, r6, #4
 8003fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fb8:	6838      	ldr	r0, [r7, #0]
 8003fba:	f003 fc7d 	bl	80078b8 <USB_DevInit>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e00d      	b.n	8003fec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 fdcc 	bl	8008b82 <USB_DevDisconnect>

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ff4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_PCD_Start+0x1c>
 800400c:	2302      	movs	r3, #2
 800400e:	e020      	b.n	8004052 <HAL_PCD_Start+0x5e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	2b01      	cmp	r3, #1
 800401e:	d109      	bne.n	8004034 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004024:	2b01      	cmp	r3, #1
 8004026:	d005      	beq.n	8004034 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f003 fbcf 	bl	80077dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f004 fd7c 	bl	8008b40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800405a:	b590      	push	{r4, r7, lr}
 800405c:	b08d      	sub	sp, #52	; 0x34
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f004 fe3a 	bl	8008cea <USB_GetMode>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	f040 848a 	bne.w	8004992 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fd9e 	bl	8008bc4 <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8480 	beq.w	8004990 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f004 fd8b 	bl	8008bc4 <USB_ReadInterrupts>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d107      	bne.n	80040c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f002 0202 	and.w	r2, r2, #2
 80040c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f004 fd79 	bl	8008bc4 <USB_ReadInterrupts>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d161      	bne.n	80041a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0210 	bic.w	r2, r2, #16
 80040ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f003 020f 	and.w	r2, r3, #15
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	3304      	adds	r3, #4
 800410a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	0c5b      	lsrs	r3, r3, #17
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	2b02      	cmp	r3, #2
 8004116:	d124      	bne.n	8004162 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d035      	beq.n	8004190 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800412e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	6a38      	ldr	r0, [r7, #32]
 8004138:	f004 fbb0 	bl	800889c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004148:	441a      	add	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6a1a      	ldr	r2, [r3, #32]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800415a:	441a      	add	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	621a      	str	r2, [r3, #32]
 8004160:	e016      	b.n	8004190 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	0c5b      	lsrs	r3, r3, #17
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	2b06      	cmp	r3, #6
 800416c:	d110      	bne.n	8004190 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004174:	2208      	movs	r2, #8
 8004176:	4619      	mov	r1, r3
 8004178:	6a38      	ldr	r0, [r7, #32]
 800417a:	f004 fb8f 	bl	800889c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418a:	441a      	add	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0210 	orr.w	r2, r2, #16
 800419e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f004 fd0d 	bl	8008bc4 <USB_ReadInterrupts>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041b4:	f040 80a7 	bne.w	8004306 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 fd12 	bl	8008bea <USB_ReadDevAllOutEpInterrupt>
 80041c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80041c8:	e099      	b.n	80042fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 808e 	beq.w	80042f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f004 fd36 	bl	8008c52 <USB_ReadDevOutEPInterrupt>
 80041e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00c      	beq.n	800420c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	2301      	movs	r3, #1
 8004202:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fec2 	bl	8004f90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	461a      	mov	r2, r3
 8004224:	2308      	movs	r3, #8
 8004226:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 ff98 	bl	8005160 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	2310      	movs	r3, #16
 800424a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d030      	beq.n	80042b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d109      	bne.n	8004276 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004274:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4413      	add	r3, r2
 8004288:	3304      	adds	r3, #4
 800428a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	78db      	ldrb	r3, [r3, #3]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d108      	bne.n	80042a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2200      	movs	r2, #0
 8004298:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	b2db      	uxtb	r3, r3
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f00a f8c5 	bl	800e430 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b2:	461a      	mov	r2, r3
 80042b4:	2302      	movs	r3, #2
 80042b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	461a      	mov	r2, r3
 80042d0:	2320      	movs	r3, #32
 80042d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	461a      	mov	r2, r3
 80042ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	3301      	adds	r3, #1
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f af62 	bne.w	80041ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f004 fc5a 	bl	8008bc4 <USB_ReadInterrupts>
 8004310:	4603      	mov	r3, r0
 8004312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800431a:	f040 80db 	bne.w	80044d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f004 fc7b 	bl	8008c1e <USB_ReadDevAllInEpInterrupt>
 8004328:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800432e:	e0cd      	b.n	80044cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80c2 	beq.w	80044c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f004 fca1 	bl	8008c8e <USB_ReadDevInEPInterrupt>
 800434c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d057      	beq.n	8004408 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	2201      	movs	r2, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	43db      	mvns	r3, r3
 8004372:	69f9      	ldr	r1, [r7, #28]
 8004374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004378:	4013      	ands	r3, r2
 800437a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	461a      	mov	r2, r3
 800438a:	2301      	movs	r3, #1
 800438c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d132      	bne.n	80043fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	334c      	adds	r3, #76	; 0x4c
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4403      	add	r3, r0
 80043b6:	3348      	adds	r3, #72	; 0x48
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4419      	add	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4403      	add	r3, r0
 80043ca:	334c      	adds	r3, #76	; 0x4c
 80043cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d113      	bne.n	80043fc <HAL_PCD_IRQHandler+0x3a2>
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3354      	adds	r3, #84	; 0x54
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043f4:	461a      	mov	r2, r3
 80043f6:	2101      	movs	r1, #1
 80043f8:	f004 fca8 	bl	8008d4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f009 ff99 	bl	800e33a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	461a      	mov	r2, r3
 8004420:	2308      	movs	r3, #8
 8004422:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443a:	461a      	mov	r2, r3
 800443c:	2310      	movs	r3, #16
 800443e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	461a      	mov	r2, r3
 8004458:	2340      	movs	r3, #64	; 0x40
 800445a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d023      	beq.n	80044ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004468:	6a38      	ldr	r0, [r7, #32]
 800446a:	f003 fb89 	bl	8007b80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	3338      	adds	r3, #56	; 0x38
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	78db      	ldrb	r3, [r3, #3]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d108      	bne.n	800449c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	b2db      	uxtb	r3, r3
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f009 ffdc 	bl	800e454 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	461a      	mov	r2, r3
 80044aa:	2302      	movs	r3, #2
 80044ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fcdb 	bl	8004e76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	3301      	adds	r3, #1
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f47f af2e 	bne.w	8004330 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f004 fb73 	bl	8008bc4 <USB_ReadInterrupts>
 80044de:	4603      	mov	r3, r0
 80044e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e8:	d122      	bne.n	8004530 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004504:	2b01      	cmp	r3, #1
 8004506:	d108      	bne.n	800451a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004510:	2100      	movs	r1, #0
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fec2 	bl	800529c <HAL_PCDEx_LPM_Callback>
 8004518:	e002      	b.n	8004520 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f009 ff7a 	bl	800e414 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800452e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f004 fb45 	bl	8008bc4 <USB_ReadInterrupts>
 800453a:	4603      	mov	r3, r0
 800453c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004544:	d112      	bne.n	800456c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d102      	bne.n	800455c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f009 ff36 	bl	800e3c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800456a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f004 fb27 	bl	8008bc4 <USB_ReadInterrupts>
 8004576:	4603      	mov	r3, r0
 8004578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	f040 80b7 	bne.w	80046f2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2110      	movs	r1, #16
 800459e:	4618      	mov	r0, r3
 80045a0:	f003 faee 	bl	8007b80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a8:	e046      	b.n	8004638 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	461a      	mov	r2, r3
 80045b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	461a      	mov	r2, r3
 80045ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004610:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800462c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004630:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	3301      	adds	r3, #1
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463e:	429a      	cmp	r2, r3
 8004640:	d3b3      	bcc.n	80045aa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004650:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004654:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800466e:	f043 030b 	orr.w	r3, r3, #11
 8004672:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004684:	f043 030b 	orr.w	r3, r3, #11
 8004688:	6453      	str	r3, [r2, #68]	; 0x44
 800468a:	e015      	b.n	80046b8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800469a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800469e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80046a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b2:	f043 030b 	orr.w	r3, r3, #11
 80046b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046dc:	461a      	mov	r2, r3
 80046de:	f004 fb35 	bl	8008d4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 fa64 	bl	8008bc4 <USB_ReadInterrupts>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004706:	d124      	bne.n	8004752 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f004 fafa 	bl	8008d06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f003 faaf 	bl	8007c7a <USB_GetDevSpeed>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681c      	ldr	r4, [r3, #0]
 8004728:	f001 fa26 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 800472c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	4620      	mov	r0, r4
 8004738:	f002 ffae 	bl	8007698 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f009 fe24 	bl	800e38a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004750:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f004 fa34 	bl	8008bc4 <USB_ReadInterrupts>
 800475c:	4603      	mov	r3, r0
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b08      	cmp	r3, #8
 8004764:	d10a      	bne.n	800477c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f009 fe01 	bl	800e36e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f002 0208 	and.w	r2, r2, #8
 800477a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f004 fa1f 	bl	8008bc4 <USB_ReadInterrupts>
 8004786:	4603      	mov	r3, r0
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d122      	bne.n	80047d6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800479c:	2301      	movs	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	e014      	b.n	80047cc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d105      	bne.n	80047c6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	4619      	mov	r1, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fb27 	bl	8004e14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	3301      	adds	r3, #1
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3e5      	bcc.n	80047a2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f004 f9f2 	bl	8008bc4 <USB_ReadInterrupts>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ea:	d13b      	bne.n	8004864 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ec:	2301      	movs	r3, #1
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	e02b      	b.n	800484a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	3340      	adds	r3, #64	; 0x40
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d115      	bne.n	8004844 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004818:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800481a:	2b00      	cmp	r3, #0
 800481c:	da12      	bge.n	8004844 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	333f      	adds	r3, #63	; 0x3f
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fae8 	bl	8004e14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	3301      	adds	r3, #1
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004850:	429a      	cmp	r2, r3
 8004852:	d3ce      	bcc.n	80047f2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f004 f9ab 	bl	8008bc4 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004878:	d155      	bne.n	8004926 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800487a:	2301      	movs	r3, #1
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
 800487e:	e045      	b.n	800490c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d12e      	bne.n	8004906 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	da2b      	bge.n	8004906 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048be:	429a      	cmp	r2, r3
 80048c0:	d121      	bne.n	8004906 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004902:	6053      	str	r3, [r2, #4]
            break;
 8004904:	e007      	b.n	8004916 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	3301      	adds	r3, #1
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004912:	429a      	cmp	r2, r3
 8004914:	d3b4      	bcc.n	8004880 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f004 f94a 	bl	8008bc4 <USB_ReadInterrupts>
 8004930:	4603      	mov	r3, r0
 8004932:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d10a      	bne.n	8004952 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f009 fd9b 	bl	800e478 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f004 f934 	bl	8008bc4 <USB_ReadInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d115      	bne.n	8004992 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f009 fd8b 	bl	800e494 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	e000      	b.n	8004992 <HAL_PCD_IRQHandler+0x938>
      return;
 8004990:	bf00      	nop
    }
  }
}
 8004992:	3734      	adds	r7, #52	; 0x34
 8004994:	46bd      	mov	sp, r7
 8004996:	bd90      	pop	{r4, r7, pc}

08004998 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_PCD_SetAddress+0x1a>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e013      	b.n	80049da <HAL_PCD_SetAddress+0x42>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f004 f892 	bl	8008af4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	4608      	mov	r0, r1
 80049ec:	4611      	mov	r1, r2
 80049ee:	461a      	mov	r2, r3
 80049f0:	4603      	mov	r3, r0
 80049f2:	70fb      	strb	r3, [r7, #3]
 80049f4:	460b      	mov	r3, r1
 80049f6:	803b      	strh	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	da0f      	bge.n	8004a28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	f003 020f 	and.w	r2, r3, #15
 8004a0e:	4613      	mov	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	3338      	adds	r3, #56	; 0x38
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	705a      	strb	r2, [r3, #1]
 8004a26:	e00f      	b.n	8004a48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	f003 020f 	and.w	r2, r3, #15
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3304      	adds	r3, #4
 8004a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a54:	883a      	ldrh	r2, [r7, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	78ba      	ldrb	r2, [r7, #2]
 8004a5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a72:	78bb      	ldrb	r3, [r7, #2]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d102      	bne.n	8004a7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_PCD_EP_Open+0xaa>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e00e      	b.n	8004aaa <HAL_PCD_EP_Open+0xc8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68f9      	ldr	r1, [r7, #12]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f003 f912 	bl	8007cc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da0f      	bge.n	8004ae6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	3338      	adds	r3, #56	; 0x38
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	3304      	adds	r3, #4
 8004adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	705a      	strb	r2, [r3, #1]
 8004ae4:	e00f      	b.n	8004b06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	3304      	adds	r3, #4
 8004afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_PCD_EP_Close+0x6e>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e00e      	b.n	8004b3e <HAL_PCD_EP_Close+0x8c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 f950 	bl	8007dd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	460b      	mov	r3, r1
 8004b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	f003 020f 	and.w	r2, r3, #15
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2200      	movs	r2, #0
 8004b86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b88:	7afb      	ldrb	r3, [r7, #11]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d102      	bne.n	8004ba2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ba2:	7afb      	ldrb	r3, [r7, #11]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6979      	ldr	r1, [r7, #20]
 8004bba:	f003 fc2f 	bl	800841c <USB_EP0StartXfer>
 8004bbe:	e008      	b.n	8004bd2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6979      	ldr	r1, [r7, #20]
 8004bce:	f003 f9dd 	bl	8007f8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	f003 020f 	and.w	r2, r3, #15
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1c:	7afb      	ldrb	r3, [r7, #11]
 8004c1e:	f003 020f 	and.w	r2, r3, #15
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	3338      	adds	r3, #56	; 0x38
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	3304      	adds	r3, #4
 8004c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2200      	movs	r2, #0
 8004c44:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c4c:	7afb      	ldrb	r3, [r7, #11]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d102      	bne.n	8004c66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c66:	7afb      	ldrb	r3, [r7, #11]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6979      	ldr	r1, [r7, #20]
 8004c7e:	f003 fbcd 	bl	800841c <USB_EP0StartXfer>
 8004c82:	e008      	b.n	8004c96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6979      	ldr	r1, [r7, #20]
 8004c92:	f003 f97b 	bl	8007f8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	f003 020f 	and.w	r2, r3, #15
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d901      	bls.n	8004cbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e050      	b.n	8004d60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	da0f      	bge.n	8004ce6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	f003 020f 	and.w	r2, r3, #15
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	3338      	adds	r3, #56	; 0x38
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	3304      	adds	r3, #4
 8004cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	705a      	strb	r2, [r3, #1]
 8004ce4:	e00d      	b.n	8004d02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_PCD_EP_SetStall+0x82>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e01e      	b.n	8004d60 <HAL_PCD_EP_SetStall+0xc0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f003 fe0b 	bl	800894c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	b2d9      	uxtb	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d50:	461a      	mov	r2, r3
 8004d52:	f003 fffb 	bl	8008d4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	f003 020f 	and.w	r2, r3, #15
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d901      	bls.n	8004d86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e042      	b.n	8004e0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da0f      	bge.n	8004dae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	f003 020f 	and.w	r2, r3, #15
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	3338      	adds	r3, #56	; 0x38
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	3304      	adds	r3, #4
 8004da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	705a      	strb	r2, [r3, #1]
 8004dac:	e00f      	b.n	8004dce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_PCD_EP_ClrStall+0x86>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e00e      	b.n	8004e0c <HAL_PCD_EP_ClrStall+0xa4>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68f9      	ldr	r1, [r7, #12]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f003 fe13 	bl	8008a28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	da0c      	bge.n	8004e42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	f003 020f 	and.w	r2, r3, #15
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	3338      	adds	r3, #56	; 0x38
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e00c      	b.n	8004e5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4413      	add	r3, r2
 8004e58:	3304      	adds	r3, #4
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68f9      	ldr	r1, [r7, #12]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f003 fc32 	bl	80086cc <USB_EPStopXfer>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e6c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08a      	sub	sp, #40	; 0x28
 8004e7a:	af02      	add	r7, sp, #8
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	3338      	adds	r3, #56	; 0x38
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d901      	bls.n	8004eae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e06c      	b.n	8004f88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d902      	bls.n	8004eca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3303      	adds	r3, #3
 8004ece:	089b      	lsrs	r3, r3, #2
 8004ed0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ed2:	e02b      	b.n	8004f2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	699a      	ldr	r2, [r3, #24]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d902      	bls.n	8004ef0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3303      	adds	r3, #3
 8004ef4:	089b      	lsrs	r3, r3, #2
 8004ef6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6919      	ldr	r1, [r3, #16]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	6978      	ldr	r0, [r7, #20]
 8004f10:	f003 fc86 	bl	8008820 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1a      	ldr	r2, [r3, #32]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d809      	bhi.n	8004f56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1a      	ldr	r2, [r3, #32]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d203      	bcs.n	8004f56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1be      	bne.n	8004ed4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d811      	bhi.n	8004f86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	2201      	movs	r2, #1
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	6939      	ldr	r1, [r7, #16]
 8004f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f82:	4013      	ands	r3, r2
 8004f84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	333c      	adds	r3, #60	; 0x3c
 8004fa8:	3304      	adds	r3, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d17b      	bne.n	80050be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4a61      	ldr	r2, [pc, #388]	; (8005158 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	f240 80b9 	bls.w	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80b3 	beq.w	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff8:	6093      	str	r3, [r2, #8]
 8004ffa:	e0a7      	b.n	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005012:	461a      	mov	r2, r3
 8005014:	2320      	movs	r3, #32
 8005016:	6093      	str	r3, [r2, #8]
 8005018:	e098      	b.n	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	f040 8093 	bne.w	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4a4b      	ldr	r2, [pc, #300]	; (8005158 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d90f      	bls.n	800504e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	461a      	mov	r2, r3
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	6093      	str	r3, [r2, #8]
 800504c:	e07e      	b.n	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	4413      	add	r3, r2
 8005060:	3304      	adds	r3, #4
 8005062:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	0159      	lsls	r1, r3, #5
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	440b      	add	r3, r1
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507a:	1ad2      	subs	r2, r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d114      	bne.n	80050b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005098:	461a      	mov	r2, r3
 800509a:	2101      	movs	r1, #1
 800509c:	f003 fe56 	bl	8008d4c <USB_EP0_OutStart>
 80050a0:	e006      	b.n	80050b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	441a      	add	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f009 f924 	bl	800e304 <HAL_PCD_DataOutStageCallback>
 80050bc:	e046      	b.n	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4a26      	ldr	r2, [pc, #152]	; (800515c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d124      	bne.n	8005110 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	461a      	mov	r2, r3
 80050de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e2:	6093      	str	r3, [r2, #8]
 80050e4:	e032      	b.n	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	2320      	movs	r3, #32
 8005100:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f009 f8fb 	bl	800e304 <HAL_PCD_DataOutStageCallback>
 800510e:	e01d      	b.n	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d114      	bne.n	8005140 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d108      	bne.n	8005140 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005138:	461a      	mov	r2, r3
 800513a:	2100      	movs	r1, #0
 800513c:	f003 fe06 	bl	8008d4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f009 f8dc 	bl	800e304 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	4f54300a 	.word	0x4f54300a
 800515c:	4f54310a 	.word	0x4f54310a

08005160 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	333c      	adds	r3, #60	; 0x3c
 8005178:	3304      	adds	r3, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d90e      	bls.n	80051b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ac:	461a      	mov	r2, r3
 80051ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f009 f893 	bl	800e2e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d90c      	bls.n	80051dc <PCD_EP_OutSetupPacket_int+0x7c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d108      	bne.n	80051dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051d4:	461a      	mov	r2, r3
 80051d6:	2101      	movs	r1, #1
 80051d8:	f003 fdb8 	bl	8008d4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	4f54300a 	.word	0x4f54300a

080051ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
 80051f8:	4613      	mov	r3, r2
 80051fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800520a:	883b      	ldrh	r3, [r7, #0]
 800520c:	0419      	lsls	r1, r3, #16
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	430a      	orrs	r2, r1
 8005216:	629a      	str	r2, [r3, #40]	; 0x28
 8005218:	e028      	b.n	800526c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	4413      	add	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005228:	2300      	movs	r3, #0
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e00d      	b.n	800524a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	3340      	adds	r3, #64	; 0x40
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	3301      	adds	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	3b01      	subs	r3, #1
 8005250:	429a      	cmp	r2, r3
 8005252:	d3ec      	bcc.n	800522e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005254:	883b      	ldrh	r3, [r7, #0]
 8005256:	0418      	lsls	r0, r3, #16
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6819      	ldr	r1, [r3, #0]
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	3b01      	subs	r3, #1
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	4302      	orrs	r2, r0
 8005264:	3340      	adds	r3, #64	; 0x40
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e267      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d075      	beq.n	80053be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052d2:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d00c      	beq.n	80052f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052de:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d112      	bne.n	8005310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ea:	4b82      	ldr	r3, [pc, #520]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f6:	d10b      	bne.n	8005310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f8:	4b7e      	ldr	r3, [pc, #504]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05b      	beq.n	80053bc <HAL_RCC_OscConfig+0x108>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d157      	bne.n	80053bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e242      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005318:	d106      	bne.n	8005328 <HAL_RCC_OscConfig+0x74>
 800531a:	4b76      	ldr	r3, [pc, #472]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a75      	ldr	r2, [pc, #468]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e01d      	b.n	8005364 <HAL_RCC_OscConfig+0xb0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005330:	d10c      	bne.n	800534c <HAL_RCC_OscConfig+0x98>
 8005332:	4b70      	ldr	r3, [pc, #448]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a6f      	ldr	r2, [pc, #444]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	4b6d      	ldr	r3, [pc, #436]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6c      	ldr	r2, [pc, #432]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e00b      	b.n	8005364 <HAL_RCC_OscConfig+0xb0>
 800534c:	4b69      	ldr	r3, [pc, #420]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a68      	ldr	r2, [pc, #416]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b66      	ldr	r3, [pc, #408]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a65      	ldr	r2, [pc, #404]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 800535e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536c:	f7fd fa9e 	bl	80028ac <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005374:	f7fd fa9a 	bl	80028ac <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e207      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005386:	4b5b      	ldr	r3, [pc, #364]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0xc0>
 8005392:	e014      	b.n	80053be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005394:	f7fd fa8a 	bl	80028ac <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800539c:	f7fd fa86 	bl	80028ac <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	; 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e1f3      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ae:	4b51      	ldr	r3, [pc, #324]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0xe8>
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d063      	beq.n	8005492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ca:	4b4a      	ldr	r3, [pc, #296]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d11c      	bne.n	800541c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e2:	4b44      	ldr	r3, [pc, #272]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d116      	bne.n	800541c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ee:	4b41      	ldr	r3, [pc, #260]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d005      	beq.n	8005406 <HAL_RCC_OscConfig+0x152>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d001      	beq.n	8005406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e1c7      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005406:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4937      	ldr	r1, [pc, #220]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005416:	4313      	orrs	r3, r2
 8005418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800541a:	e03a      	b.n	8005492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d020      	beq.n	8005466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005424:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <HAL_RCC_OscConfig+0x244>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542a:	f7fd fa3f 	bl	80028ac <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005432:	f7fd fa3b 	bl	80028ac <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e1a8      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005444:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005450:	4b28      	ldr	r3, [pc, #160]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4925      	ldr	r1, [pc, #148]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005460:	4313      	orrs	r3, r2
 8005462:	600b      	str	r3, [r1, #0]
 8005464:	e015      	b.n	8005492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <HAL_RCC_OscConfig+0x244>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd fa1e 	bl	80028ac <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005474:	f7fd fa1a 	bl	80028ac <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e187      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005486:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d036      	beq.n	800550c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d016      	beq.n	80054d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a6:	4b15      	ldr	r3, [pc, #84]	; (80054fc <HAL_RCC_OscConfig+0x248>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fd f9fe 	bl	80028ac <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b4:	f7fd f9fa 	bl	80028ac <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e167      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c6:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80054c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x200>
 80054d2:	e01b      	b.n	800550c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <HAL_RCC_OscConfig+0x248>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054da:	f7fd f9e7 	bl	80028ac <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e0:	e00e      	b.n	8005500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e2:	f7fd f9e3 	bl	80028ac <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d907      	bls.n	8005500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e150      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 80054f4:	40023800 	.word	0x40023800
 80054f8:	42470000 	.word	0x42470000
 80054fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005500:	4b88      	ldr	r3, [pc, #544]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ea      	bne.n	80054e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8097 	beq.w	8005648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800551e:	4b81      	ldr	r3, [pc, #516]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	4b7d      	ldr	r3, [pc, #500]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	4a7c      	ldr	r2, [pc, #496]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005538:	6413      	str	r3, [r2, #64]	; 0x40
 800553a:	4b7a      	ldr	r3, [pc, #488]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554a:	4b77      	ldr	r3, [pc, #476]	; (8005728 <HAL_RCC_OscConfig+0x474>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d118      	bne.n	8005588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005556:	4b74      	ldr	r3, [pc, #464]	; (8005728 <HAL_RCC_OscConfig+0x474>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a73      	ldr	r2, [pc, #460]	; (8005728 <HAL_RCC_OscConfig+0x474>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005562:	f7fd f9a3 	bl	80028ac <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556a:	f7fd f99f 	bl	80028ac <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e10c      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557c:	4b6a      	ldr	r3, [pc, #424]	; (8005728 <HAL_RCC_OscConfig+0x474>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d106      	bne.n	800559e <HAL_RCC_OscConfig+0x2ea>
 8005590:	4b64      	ldr	r3, [pc, #400]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	4a63      	ldr	r2, [pc, #396]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6713      	str	r3, [r2, #112]	; 0x70
 800559c:	e01c      	b.n	80055d8 <HAL_RCC_OscConfig+0x324>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x30c>
 80055a6:	4b5f      	ldr	r3, [pc, #380]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	4a5e      	ldr	r2, [pc, #376]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055ac:	f043 0304 	orr.w	r3, r3, #4
 80055b0:	6713      	str	r3, [r2, #112]	; 0x70
 80055b2:	4b5c      	ldr	r3, [pc, #368]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	4a5b      	ldr	r2, [pc, #364]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6713      	str	r3, [r2, #112]	; 0x70
 80055be:	e00b      	b.n	80055d8 <HAL_RCC_OscConfig+0x324>
 80055c0:	4b58      	ldr	r3, [pc, #352]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c4:	4a57      	ldr	r2, [pc, #348]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	6713      	str	r3, [r2, #112]	; 0x70
 80055cc:	4b55      	ldr	r3, [pc, #340]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	4a54      	ldr	r2, [pc, #336]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055d2:	f023 0304 	bic.w	r3, r3, #4
 80055d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fd f964 	bl	80028ac <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fd f960 	bl	80028ac <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0cb      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fe:	4b49      	ldr	r3, [pc, #292]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ee      	beq.n	80055e8 <HAL_RCC_OscConfig+0x334>
 800560a:	e014      	b.n	8005636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560c:	f7fd f94e 	bl	80028ac <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005612:	e00a      	b.n	800562a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fd f94a 	bl	80028ac <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e0b5      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562a:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ee      	bne.n	8005614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d105      	bne.n	8005648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563c:	4b39      	ldr	r3, [pc, #228]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	4a38      	ldr	r2, [pc, #224]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80a1 	beq.w	8005794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005652:	4b34      	ldr	r3, [pc, #208]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b08      	cmp	r3, #8
 800565c:	d05c      	beq.n	8005718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d141      	bne.n	80056ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005666:	4b31      	ldr	r3, [pc, #196]	; (800572c <HAL_RCC_OscConfig+0x478>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566c:	f7fd f91e 	bl	80028ac <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005674:	f7fd f91a 	bl	80028ac <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e087      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	4b27      	ldr	r3, [pc, #156]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	019b      	lsls	r3, r3, #6
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	3b01      	subs	r3, #1
 80056ac:	041b      	lsls	r3, r3, #16
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	061b      	lsls	r3, r3, #24
 80056b6:	491b      	ldr	r1, [pc, #108]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056bc:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_RCC_OscConfig+0x478>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c2:	f7fd f8f3 	bl	80028ac <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ca:	f7fd f8ef 	bl	80028ac <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e05c      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056dc:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x416>
 80056e8:	e054      	b.n	8005794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_RCC_OscConfig+0x478>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fd f8dc 	bl	80028ac <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fd f8d8 	bl	80028ac <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e045      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x444>
 8005716:	e03d      	b.n	8005794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e038      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005724:	40023800 	.word	0x40023800
 8005728:	40007000 	.word	0x40007000
 800572c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <HAL_RCC_OscConfig+0x4ec>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d028      	beq.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d121      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d11a      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005768:	4293      	cmp	r3, r2
 800576a:	d111      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	3b01      	subs	r3, #1
 800577a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d107      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800

080057a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0cc      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057b8:	4b68      	ldr	r3, [pc, #416]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d90c      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c6:	4b65      	ldr	r3, [pc, #404]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b63      	ldr	r3, [pc, #396]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0b8      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d020      	beq.n	800582e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f8:	4b59      	ldr	r3, [pc, #356]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4a58      	ldr	r2, [pc, #352]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005810:	4b53      	ldr	r3, [pc, #332]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4a52      	ldr	r2, [pc, #328]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800581a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800581c:	4b50      	ldr	r3, [pc, #320]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	494d      	ldr	r1, [pc, #308]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d044      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d107      	bne.n	8005852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005842:	4b47      	ldr	r3, [pc, #284]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d119      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e07f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d003      	beq.n	8005862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585e:	2b03      	cmp	r3, #3
 8005860:	d107      	bne.n	8005872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005862:	4b3f      	ldr	r3, [pc, #252]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e06f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005872:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e067      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005882:	4b37      	ldr	r3, [pc, #220]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f023 0203 	bic.w	r2, r3, #3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4934      	ldr	r1, [pc, #208]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005894:	f7fd f80a 	bl	80028ac <HAL_GetTick>
 8005898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800589c:	f7fd f806 	bl	80028ac <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e04f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b2:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 020c 	and.w	r2, r3, #12
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d1eb      	bne.n	800589c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058c4:	4b25      	ldr	r3, [pc, #148]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d20c      	bcs.n	80058ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d2:	4b22      	ldr	r3, [pc, #136]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e032      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058f8:	4b19      	ldr	r3, [pc, #100]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4916      	ldr	r1, [pc, #88]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005916:	4b12      	ldr	r3, [pc, #72]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	490e      	ldr	r1, [pc, #56]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800592a:	f000 f821 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 800592e:	4602      	mov	r2, r0
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	490a      	ldr	r1, [pc, #40]	; (8005964 <HAL_RCC_ClockConfig+0x1c0>)
 800593c:	5ccb      	ldrb	r3, [r1, r3]
 800593e:	fa22 f303 	lsr.w	r3, r2, r3
 8005942:	4a09      	ldr	r2, [pc, #36]	; (8005968 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_ClockConfig+0x1c8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fc fe60 	bl	8002610 <HAL_InitTick>

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40023c00 	.word	0x40023c00
 8005960:	40023800 	.word	0x40023800
 8005964:	0800f740 	.word	0x0800f740
 8005968:	200004ec 	.word	0x200004ec
 800596c:	200004f0 	.word	0x200004f0

08005970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005974:	b094      	sub	sp, #80	; 0x50
 8005976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	647b      	str	r3, [r7, #68]	; 0x44
 800597c:	2300      	movs	r3, #0
 800597e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005980:	2300      	movs	r3, #0
 8005982:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005988:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 030c 	and.w	r3, r3, #12
 8005990:	2b08      	cmp	r3, #8
 8005992:	d00d      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005994:	2b08      	cmp	r3, #8
 8005996:	f200 80e1 	bhi.w	8005b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0x34>
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d003      	beq.n	80059aa <HAL_RCC_GetSysClockFreq+0x3a>
 80059a2:	e0db      	b.n	8005b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059a4:	4b73      	ldr	r3, [pc, #460]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80059a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059a8:	e0db      	b.n	8005b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059aa:	4b72      	ldr	r3, [pc, #456]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80059ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059ae:	e0d8      	b.n	8005b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ba:	4b6d      	ldr	r3, [pc, #436]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d063      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c6:	4b6a      	ldr	r3, [pc, #424]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	099b      	lsrs	r3, r3, #6
 80059cc:	2200      	movs	r2, #0
 80059ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80059d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
 80059da:	2300      	movs	r3, #0
 80059dc:	637b      	str	r3, [r7, #52]	; 0x34
 80059de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059e2:	4622      	mov	r2, r4
 80059e4:	462b      	mov	r3, r5
 80059e6:	f04f 0000 	mov.w	r0, #0
 80059ea:	f04f 0100 	mov.w	r1, #0
 80059ee:	0159      	lsls	r1, r3, #5
 80059f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f4:	0150      	lsls	r0, r2, #5
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4621      	mov	r1, r4
 80059fc:	1a51      	subs	r1, r2, r1
 80059fe:	6139      	str	r1, [r7, #16]
 8005a00:	4629      	mov	r1, r5
 8005a02:	eb63 0301 	sbc.w	r3, r3, r1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a14:	4659      	mov	r1, fp
 8005a16:	018b      	lsls	r3, r1, #6
 8005a18:	4651      	mov	r1, sl
 8005a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a1e:	4651      	mov	r1, sl
 8005a20:	018a      	lsls	r2, r1, #6
 8005a22:	4651      	mov	r1, sl
 8005a24:	ebb2 0801 	subs.w	r8, r2, r1
 8005a28:	4659      	mov	r1, fp
 8005a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a42:	4690      	mov	r8, r2
 8005a44:	4699      	mov	r9, r3
 8005a46:	4623      	mov	r3, r4
 8005a48:	eb18 0303 	adds.w	r3, r8, r3
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	462b      	mov	r3, r5
 8005a50:	eb49 0303 	adc.w	r3, r9, r3
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a62:	4629      	mov	r1, r5
 8005a64:	028b      	lsls	r3, r1, #10
 8005a66:	4621      	mov	r1, r4
 8005a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	028a      	lsls	r2, r1, #10
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a76:	2200      	movs	r2, #0
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a80:	f7fa fc06 	bl	8000290 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4613      	mov	r3, r2
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a8c:	e058      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8e:	4b38      	ldr	r3, [pc, #224]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	2200      	movs	r2, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	4611      	mov	r1, r2
 8005a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	f04f 0000 	mov.w	r0, #0
 8005ab0:	f04f 0100 	mov.w	r1, #0
 8005ab4:	0159      	lsls	r1, r3, #5
 8005ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aba:	0150      	lsls	r0, r2, #5
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	00eb      	lsls	r3, r5, #3
 8005af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af6:	00e2      	lsls	r2, r4, #3
 8005af8:	4614      	mov	r4, r2
 8005afa:	461d      	mov	r5, r3
 8005afc:	4643      	mov	r3, r8
 8005afe:	18e3      	adds	r3, r4, r3
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	464b      	mov	r3, r9
 8005b04:	eb45 0303 	adc.w	r3, r5, r3
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b16:	4629      	mov	r1, r5
 8005b18:	028b      	lsls	r3, r1, #10
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b20:	4621      	mov	r1, r4
 8005b22:	028a      	lsls	r2, r1, #10
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	61fa      	str	r2, [r7, #28]
 8005b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b34:	f7fa fbac 	bl	8000290 <__aeabi_uldivmod>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b5a:	e002      	b.n	8005b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3750      	adds	r7, #80	; 0x50
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6e:	bf00      	nop
 8005b70:	40023800 	.word	0x40023800
 8005b74:	00f42400 	.word	0x00f42400

08005b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b7c:	4b03      	ldr	r3, [pc, #12]	; (8005b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	200004ec 	.word	0x200004ec

08005b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b94:	f7ff fff0 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	0a9b      	lsrs	r3, r3, #10
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	4903      	ldr	r1, [pc, #12]	; (8005bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ba6:	5ccb      	ldrb	r3, [r1, r3]
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	0800f750 	.word	0x0800f750

08005bb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	220f      	movs	r2, #15
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bc8:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <HAL_RCC_GetClockConfig+0x5c>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0203 	and.w	r2, r3, #3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <HAL_RCC_GetClockConfig+0x5c>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <HAL_RCC_GetClockConfig+0x5c>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bec:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <HAL_RCC_GetClockConfig+0x5c>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	08db      	lsrs	r3, r3, #3
 8005bf2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <HAL_RCC_GetClockConfig+0x60>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0207 	and.w	r2, r3, #7
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	601a      	str	r2, [r3, #0]
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40023800 	.word	0x40023800
 8005c18:	40023c00 	.word	0x40023c00

08005c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e07b      	b.n	8005d26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d108      	bne.n	8005c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3e:	d009      	beq.n	8005c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	61da      	str	r2, [r3, #28]
 8005c46:	e005      	b.n	8005c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fc fbe2 	bl	8002438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	ea42 0103 	orr.w	r1, r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	f003 0104 	and.w	r1, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0210 	and.w	r2, r3, #16
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b088      	sub	sp, #32
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_SPI_Transmit+0x22>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e126      	b.n	8005f9e <HAL_SPI_Transmit+0x270>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d58:	f7fc fda8 	bl	80028ac <HAL_GetTick>
 8005d5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d002      	beq.n	8005d74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d72:	e10b      	b.n	8005f8c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_SPI_Transmit+0x52>
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d84:	e102      	b.n	8005f8c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2203      	movs	r2, #3
 8005d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dcc:	d10f      	bne.n	8005dee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ddc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d007      	beq.n	8005e0c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e14:	d14b      	bne.n	8005eae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Transmit+0xf6>
 8005e1e:	8afb      	ldrh	r3, [r7, #22]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d13e      	bne.n	8005ea2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	881a      	ldrh	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	1c9a      	adds	r2, r3, #2
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e48:	e02b      	b.n	8005ea2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d112      	bne.n	8005e7e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	881a      	ldrh	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	1c9a      	adds	r2, r3, #2
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e7c:	e011      	b.n	8005ea2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e7e:	f7fc fd15 	bl	80028ac <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d803      	bhi.n	8005e96 <HAL_SPI_Transmit+0x168>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d102      	bne.n	8005e9c <HAL_SPI_Transmit+0x16e>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d102      	bne.n	8005ea2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ea0:	e074      	b.n	8005f8c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1ce      	bne.n	8005e4a <HAL_SPI_Transmit+0x11c>
 8005eac:	e04c      	b.n	8005f48 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_Transmit+0x18e>
 8005eb6:	8afb      	ldrh	r3, [r7, #22]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d140      	bne.n	8005f3e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	7812      	ldrb	r2, [r2, #0]
 8005ec8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ee2:	e02c      	b.n	8005f3e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d113      	bne.n	8005f1a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	330c      	adds	r3, #12
 8005efc:	7812      	ldrb	r2, [r2, #0]
 8005efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f18:	e011      	b.n	8005f3e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f1a:	f7fc fcc7 	bl	80028ac <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d803      	bhi.n	8005f32 <HAL_SPI_Transmit+0x204>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d102      	bne.n	8005f38 <HAL_SPI_Transmit+0x20a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f3c:	e026      	b.n	8005f8c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1cd      	bne.n	8005ee4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fa55 	bl	80063fc <SPI_EndRxTxTransaction>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e000      	b.n	8005f8c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b08c      	sub	sp, #48	; 0x30
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
 8005fb2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x26>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e18a      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x33c>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd4:	f7fc fc6a 	bl	80028ac <HAL_GetTick>
 8005fd8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005fea:	887b      	ldrh	r3, [r7, #2]
 8005fec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d00f      	beq.n	8006016 <HAL_SPI_TransmitReceive+0x70>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffc:	d107      	bne.n	800600e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <HAL_SPI_TransmitReceive+0x68>
 8006006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800600a:	2b04      	cmp	r3, #4
 800600c:	d003      	beq.n	8006016 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800600e:	2302      	movs	r3, #2
 8006010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006014:	e15b      	b.n	80062ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_SPI_TransmitReceive+0x82>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_SPI_TransmitReceive+0x82>
 8006022:	887b      	ldrh	r3, [r7, #2]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800602e:	e14e      	b.n	80062ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b04      	cmp	r3, #4
 800603a:	d003      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2205      	movs	r2, #5
 8006040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	887a      	ldrh	r2, [r7, #2]
 8006054:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	887a      	ldrh	r2, [r7, #2]
 800605a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	887a      	ldrh	r2, [r7, #2]
 8006066:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	887a      	ldrh	r2, [r7, #2]
 800606c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d007      	beq.n	8006098 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006096:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a0:	d178      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x10a>
 80060aa:	8b7b      	ldrh	r3, [r7, #26]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d166      	bne.n	800617e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	881a      	ldrh	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d4:	e053      	b.n	800617e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d11b      	bne.n	800611c <HAL_SPI_TransmitReceive+0x176>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d016      	beq.n	800611c <HAL_SPI_TransmitReceive+0x176>
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d113      	bne.n	800611c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b01      	cmp	r3, #1
 8006128:	d119      	bne.n	800615e <HAL_SPI_TransmitReceive+0x1b8>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d014      	beq.n	800615e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	b292      	uxth	r2, r2
 8006140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	1c9a      	adds	r2, r3, #2
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800615a:	2301      	movs	r3, #1
 800615c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800615e:	f7fc fba5 	bl	80028ac <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800616a:	429a      	cmp	r2, r3
 800616c:	d807      	bhi.n	800617e <HAL_SPI_TransmitReceive+0x1d8>
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d003      	beq.n	800617e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800617c:	e0a7      	b.n	80062ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1a6      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x130>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1a1      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x130>
 8006192:	e07c      	b.n	800628e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_SPI_TransmitReceive+0x1fc>
 800619c:	8b7b      	ldrh	r3, [r7, #26]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d16b      	bne.n	800627a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061c8:	e057      	b.n	800627a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d11c      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x26c>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d017      	beq.n	8006212 <HAL_SPI_TransmitReceive+0x26c>
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d114      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330c      	adds	r3, #12
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b01      	cmp	r3, #1
 800621e:	d119      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x2ae>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d014      	beq.n	8006254 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006250:	2301      	movs	r3, #1
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006254:	f7fc fb2a 	bl	80028ac <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006260:	429a      	cmp	r2, r3
 8006262:	d803      	bhi.n	800626c <HAL_SPI_TransmitReceive+0x2c6>
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d102      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x2cc>
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006278:	e029      	b.n	80062ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1a2      	bne.n	80061ca <HAL_SPI_TransmitReceive+0x224>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d19d      	bne.n	80061ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800628e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006290:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f8b2 	bl	80063fc <SPI_EndRxTxTransaction>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d006      	beq.n	80062ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062aa:	e010      	b.n	80062ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	e000      	b.n	80062ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80062cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3730      	adds	r7, #48	; 0x30
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062fc:	f7fc fad6 	bl	80028ac <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	4413      	add	r3, r2
 800630a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800630c:	f7fc face 	bl	80028ac <HAL_GetTick>
 8006310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006312:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	015b      	lsls	r3, r3, #5
 8006318:	0d1b      	lsrs	r3, r3, #20
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	fb02 f303 	mul.w	r3, r2, r3
 8006320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006322:	e054      	b.n	80063ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d050      	beq.n	80063ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800632c:	f7fc fabe 	bl	80028ac <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	429a      	cmp	r2, r3
 800633a:	d902      	bls.n	8006342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d13d      	bne.n	80063be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800635a:	d111      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	d004      	beq.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636e:	d107      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d10f      	bne.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e017      	b.n	80063ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4013      	ands	r3, r2
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d19b      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	200004ec 	.word	0x200004ec

080063fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006408:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <SPI_EndRxTxTransaction+0x7c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1b      	ldr	r2, [pc, #108]	; (800647c <SPI_EndRxTxTransaction+0x80>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	0d5b      	lsrs	r3, r3, #21
 8006414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006418:	fb02 f303 	mul.w	r3, r2, r3
 800641c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006426:	d112      	bne.n	800644e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff ff5a 	bl	80062ec <SPI_WaitFlagStateUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e00f      	b.n	800646e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3b01      	subs	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d0f2      	beq.n	800644e <SPI_EndRxTxTransaction+0x52>
 8006468:	e000      	b.n	800646c <SPI_EndRxTxTransaction+0x70>
        break;
 800646a:	bf00      	nop
  }

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200004ec 	.word	0x200004ec
 800647c:	165e9f81 	.word	0x165e9f81

08006480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e041      	b.n	8006516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fc f844 	bl	8002534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f000 fd3a 	bl	8006f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b01      	cmp	r3, #1
 8006532:	d001      	beq.n	8006538 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e03c      	b.n	80065b2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <HAL_TIM_Base_Start+0xa0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d018      	beq.n	800657c <HAL_TIM_Base_Start+0x5c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d013      	beq.n	800657c <HAL_TIM_Base_Start+0x5c>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <HAL_TIM_Base_Start+0xa4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00e      	beq.n	800657c <HAL_TIM_Base_Start+0x5c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a19      	ldr	r2, [pc, #100]	; (80065c8 <HAL_TIM_Base_Start+0xa8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d009      	beq.n	800657c <HAL_TIM_Base_Start+0x5c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a17      	ldr	r2, [pc, #92]	; (80065cc <HAL_TIM_Base_Start+0xac>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <HAL_TIM_Base_Start+0x5c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <HAL_TIM_Base_Start+0xb0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d111      	bne.n	80065a0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b06      	cmp	r3, #6
 800658c:	d010      	beq.n	80065b0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659e:	e007      	b.n	80065b0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800
 80065cc:	40000c00 	.word	0x40000c00
 80065d0:	40014000 	.word	0x40014000

080065d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a1a      	ldr	r2, [r3, #32]
 80065e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10f      	bne.n	800660c <HAL_TIM_Base_Stop+0x38>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	f240 4344 	movw	r3, #1092	; 0x444
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <HAL_TIM_Base_Stop+0x38>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	d001      	beq.n	800663c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e044      	b.n	80066c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1e      	ldr	r2, [pc, #120]	; (80066d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d018      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x6c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006666:	d013      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x6c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00e      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x6c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a19      	ldr	r2, [pc, #100]	; (80066dc <HAL_TIM_Base_Start_IT+0xb8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x6c>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x6c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d111      	bne.n	80066b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b06      	cmp	r3, #6
 80066a0:	d010      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0201 	orr.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b2:	e007      	b.n	80066c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40014000 	.word	0x40014000

080066e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e041      	b.n	800677e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f839 	bl	8006786 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f000 fc06 	bl	8006f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <HAL_TIM_PWM_Start+0x24>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	e022      	b.n	8006806 <HAL_TIM_PWM_Start+0x6a>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d109      	bne.n	80067da <HAL_TIM_PWM_Start+0x3e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	bf14      	ite	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	2300      	moveq	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	e015      	b.n	8006806 <HAL_TIM_PWM_Start+0x6a>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d109      	bne.n	80067f4 <HAL_TIM_PWM_Start+0x58>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e008      	b.n	8006806 <HAL_TIM_PWM_Start+0x6a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e068      	b.n	80068e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <HAL_TIM_PWM_Start+0x82>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800681c:	e013      	b.n	8006846 <HAL_TIM_PWM_Start+0xaa>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d104      	bne.n	800682e <HAL_TIM_PWM_Start+0x92>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800682c:	e00b      	b.n	8006846 <HAL_TIM_PWM_Start+0xaa>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b08      	cmp	r3, #8
 8006832:	d104      	bne.n	800683e <HAL_TIM_PWM_Start+0xa2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800683c:	e003      	b.n	8006846 <HAL_TIM_PWM_Start+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2201      	movs	r2, #1
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fe18 	bl	8007484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a23      	ldr	r2, [pc, #140]	; (80068e8 <HAL_TIM_PWM_Start+0x14c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d107      	bne.n	800686e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800686c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <HAL_TIM_PWM_Start+0x14c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d018      	beq.n	80068aa <HAL_TIM_PWM_Start+0x10e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006880:	d013      	beq.n	80068aa <HAL_TIM_PWM_Start+0x10e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a19      	ldr	r2, [pc, #100]	; (80068ec <HAL_TIM_PWM_Start+0x150>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <HAL_TIM_PWM_Start+0x10e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <HAL_TIM_PWM_Start+0x154>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <HAL_TIM_PWM_Start+0x10e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a16      	ldr	r2, [pc, #88]	; (80068f4 <HAL_TIM_PWM_Start+0x158>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <HAL_TIM_PWM_Start+0x10e>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <HAL_TIM_PWM_Start+0x15c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d111      	bne.n	80068ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b06      	cmp	r3, #6
 80068ba:	d010      	beq.n	80068de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068cc:	e007      	b.n	80068de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0201 	orr.w	r2, r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800
 80068f4:	40000c00 	.word	0x40000c00
 80068f8:	40014000 	.word	0x40014000

080068fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fdb8 	bl	8007484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <HAL_TIM_PWM_Stop+0xc4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d117      	bne.n	800694e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	f241 1311 	movw	r3, #4369	; 0x1111
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10f      	bne.n	800694e <HAL_TIM_PWM_Stop+0x52>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	f240 4344 	movw	r3, #1092	; 0x444
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d107      	bne.n	800694e <HAL_TIM_PWM_Stop+0x52>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800694c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	f241 1311 	movw	r3, #4369	; 0x1111
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10f      	bne.n	800697e <HAL_TIM_PWM_Stop+0x82>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	f240 4344 	movw	r3, #1092	; 0x444
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d107      	bne.n	800697e <HAL_TIM_PWM_Stop+0x82>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0201 	bic.w	r2, r2, #1
 800697c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <HAL_TIM_PWM_Stop+0x92>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698c:	e013      	b.n	80069b6 <HAL_TIM_PWM_Stop+0xba>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b04      	cmp	r3, #4
 8006992:	d104      	bne.n	800699e <HAL_TIM_PWM_Stop+0xa2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800699c:	e00b      	b.n	80069b6 <HAL_TIM_PWM_Stop+0xba>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_PWM_Stop+0xb2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ac:	e003      	b.n	80069b6 <HAL_TIM_PWM_Stop+0xba>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40010000 	.word	0x40010000

080069c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d122      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d11b      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0202 	mvn.w	r2, #2
 80069f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa77 	bl	8006efa <HAL_TIM_IC_CaptureCallback>
 8006a0c:	e005      	b.n	8006a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa69 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa7a 	bl	8006f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d122      	bne.n	8006a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d11b      	bne.n	8006a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0204 	mvn.w	r2, #4
 8006a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa4d 	bl	8006efa <HAL_TIM_IC_CaptureCallback>
 8006a60:	e005      	b.n	8006a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa3f 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa50 	bl	8006f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d122      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d11b      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0208 	mvn.w	r2, #8
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa23 	bl	8006efa <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fa15 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fa26 	bl	8006f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d122      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d11b      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0210 	mvn.w	r2, #16
 8006aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2208      	movs	r2, #8
 8006af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f9f9 	bl	8006efa <HAL_TIM_IC_CaptureCallback>
 8006b08:	e005      	b.n	8006b16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f9eb 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f9fc 	bl	8006f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d10e      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d107      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0201 	mvn.w	r2, #1
 8006b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fb fbec 	bl	8002320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d10e      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b60:	2b80      	cmp	r3, #128	; 0x80
 8006b62:	d107      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fd26 	bl	80075c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	d10e      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d107      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f9c1 	bl	8006f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d10e      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d107      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0220 	mvn.w	r2, #32
 8006bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fcf0 	bl	80075ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e0ae      	b.n	8006d50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b0c      	cmp	r3, #12
 8006bfe:	f200 809f 	bhi.w	8006d40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c3d 	.word	0x08006c3d
 8006c0c:	08006d41 	.word	0x08006d41
 8006c10:	08006d41 	.word	0x08006d41
 8006c14:	08006d41 	.word	0x08006d41
 8006c18:	08006c7d 	.word	0x08006c7d
 8006c1c:	08006d41 	.word	0x08006d41
 8006c20:	08006d41 	.word	0x08006d41
 8006c24:	08006d41 	.word	0x08006d41
 8006c28:	08006cbf 	.word	0x08006cbf
 8006c2c:	08006d41 	.word	0x08006d41
 8006c30:	08006d41 	.word	0x08006d41
 8006c34:	08006d41 	.word	0x08006d41
 8006c38:	08006cff 	.word	0x08006cff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f9f8 	bl	8007038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0208 	orr.w	r2, r2, #8
 8006c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0204 	bic.w	r2, r2, #4
 8006c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6999      	ldr	r1, [r3, #24]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	619a      	str	r2, [r3, #24]
      break;
 8006c7a:	e064      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fa3e 	bl	8007104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6999      	ldr	r1, [r3, #24]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	021a      	lsls	r2, r3, #8
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	619a      	str	r2, [r3, #24]
      break;
 8006cbc:	e043      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fa89 	bl	80071dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0208 	orr.w	r2, r2, #8
 8006cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0204 	bic.w	r2, r2, #4
 8006ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69d9      	ldr	r1, [r3, #28]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	61da      	str	r2, [r3, #28]
      break;
 8006cfc:	e023      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fad3 	bl	80072b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69d9      	ldr	r1, [r3, #28]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	021a      	lsls	r2, r3, #8
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	61da      	str	r2, [r3, #28]
      break;
 8006d3e:	e002      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	75fb      	strb	r3, [r7, #23]
      break;
 8006d44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_ConfigClockSource+0x1c>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e0b4      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x186>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dac:	d03e      	beq.n	8006e2c <HAL_TIM_ConfigClockSource+0xd4>
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db2:	f200 8087 	bhi.w	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dba:	f000 8086 	beq.w	8006eca <HAL_TIM_ConfigClockSource+0x172>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc2:	d87f      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d01a      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0xa6>
 8006dc8:	2b70      	cmp	r3, #112	; 0x70
 8006dca:	d87b      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b60      	cmp	r3, #96	; 0x60
 8006dce:	d050      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0x11a>
 8006dd0:	2b60      	cmp	r3, #96	; 0x60
 8006dd2:	d877      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd4:	2b50      	cmp	r3, #80	; 0x50
 8006dd6:	d03c      	beq.n	8006e52 <HAL_TIM_ConfigClockSource+0xfa>
 8006dd8:	2b50      	cmp	r3, #80	; 0x50
 8006dda:	d873      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	d058      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x13a>
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d86f      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	d064      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006de8:	2b30      	cmp	r3, #48	; 0x30
 8006dea:	d86b      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d060      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d867      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d05c      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d05a      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006dfc:	e062      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6899      	ldr	r1, [r3, #8]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f000 fb19 	bl	8007444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	609a      	str	r2, [r3, #8]
      break;
 8006e2a:	e04f      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6899      	ldr	r1, [r3, #8]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f000 fb02 	bl	8007444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e4e:	609a      	str	r2, [r3, #8]
      break;
 8006e50:	e03c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6859      	ldr	r1, [r3, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f000 fa76 	bl	8007350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2150      	movs	r1, #80	; 0x50
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 facf 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8006e70:	e02c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 fa95 	bl	80073ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2160      	movs	r1, #96	; 0x60
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fabf 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8006e90:	e01c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fa56 	bl	8007350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2140      	movs	r1, #64	; 0x40
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 faaf 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e00c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f000 faa6 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8006ec2:	e003      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec8:	e000      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a34      	ldr	r2, [pc, #208]	; (800701c <TIM_Base_SetConfig+0xe4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_Base_SetConfig+0x38>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f56:	d00b      	beq.n	8006f70 <TIM_Base_SetConfig+0x38>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a31      	ldr	r2, [pc, #196]	; (8007020 <TIM_Base_SetConfig+0xe8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_Base_SetConfig+0x38>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a30      	ldr	r2, [pc, #192]	; (8007024 <TIM_Base_SetConfig+0xec>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_Base_SetConfig+0x38>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a2f      	ldr	r2, [pc, #188]	; (8007028 <TIM_Base_SetConfig+0xf0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d108      	bne.n	8006f82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a25      	ldr	r2, [pc, #148]	; (800701c <TIM_Base_SetConfig+0xe4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01b      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f90:	d017      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a22      	ldr	r2, [pc, #136]	; (8007020 <TIM_Base_SetConfig+0xe8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a21      	ldr	r2, [pc, #132]	; (8007024 <TIM_Base_SetConfig+0xec>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00f      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a20      	ldr	r2, [pc, #128]	; (8007028 <TIM_Base_SetConfig+0xf0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00b      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a1f      	ldr	r2, [pc, #124]	; (800702c <TIM_Base_SetConfig+0xf4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d007      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <TIM_Base_SetConfig+0xf8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <TIM_Base_SetConfig+0xfc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a08      	ldr	r2, [pc, #32]	; (800701c <TIM_Base_SetConfig+0xe4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d103      	bne.n	8007008 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	615a      	str	r2, [r3, #20]
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40010000 	.word	0x40010000
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40014000 	.word	0x40014000
 8007030:	40014400 	.word	0x40014400
 8007034:	40014800 	.word	0x40014800

08007038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f023 0201 	bic.w	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f023 0302 	bic.w	r3, r3, #2
 8007080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <TIM_OC1_SetConfig+0xc8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d10c      	bne.n	80070ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f023 0308 	bic.w	r3, r3, #8
 800709a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f023 0304 	bic.w	r3, r3, #4
 80070ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a13      	ldr	r2, [pc, #76]	; (8007100 <TIM_OC1_SetConfig+0xc8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d111      	bne.n	80070da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	621a      	str	r2, [r3, #32]
}
 80070f4:	bf00      	nop
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	40010000 	.word	0x40010000

08007104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	f023 0210 	bic.w	r2, r3, #16
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f023 0320 	bic.w	r3, r3, #32
 800714e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a1e      	ldr	r2, [pc, #120]	; (80071d8 <TIM_OC2_SetConfig+0xd4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d10d      	bne.n	8007180 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800716a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <TIM_OC2_SetConfig+0xd4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d113      	bne.n	80071b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800718e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40010000 	.word	0x40010000

080071dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1d      	ldr	r2, [pc, #116]	; (80072ac <TIM_OC3_SetConfig+0xd0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d10d      	bne.n	8007256 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a14      	ldr	r2, [pc, #80]	; (80072ac <TIM_OC3_SetConfig+0xd0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d113      	bne.n	8007286 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	621a      	str	r2, [r3, #32]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40010000 	.word	0x40010000

080072b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	031b      	lsls	r3, r3, #12
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a10      	ldr	r2, [pc, #64]	; (800734c <TIM_OC4_SetConfig+0x9c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d109      	bne.n	8007324 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	019b      	lsls	r3, r3, #6
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40010000 	.word	0x40010000

08007350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800737a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f023 030a 	bic.w	r3, r3, #10
 800738c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b087      	sub	sp, #28
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f023 0210 	bic.w	r2, r3, #16
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	031b      	lsls	r3, r3, #12
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	f043 0307 	orr.w	r3, r3, #7
 8007430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	609a      	str	r2, [r3, #8]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800745e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	021a      	lsls	r2, r3, #8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	431a      	orrs	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4313      	orrs	r3, r2
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	609a      	str	r2, [r3, #8]
}
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2201      	movs	r2, #1
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1a      	ldr	r2, [r3, #32]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	401a      	ands	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a1a      	ldr	r2, [r3, #32]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	fa01 f303 	lsl.w	r3, r1, r3
 80074bc:	431a      	orrs	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
	...

080074d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e050      	b.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1c      	ldr	r2, [pc, #112]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d018      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007534:	d013      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a18      	ldr	r2, [pc, #96]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00e      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d009      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d004      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d10c      	bne.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4313      	orrs	r3, r2
 800756e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40010000 	.word	0x40010000
 800759c:	40000400 	.word	0x40000400
 80075a0:	40000800 	.word	0x40000800
 80075a4:	40000c00 	.word	0x40000c00
 80075a8:	40014000 	.word	0x40014000

080075ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075d4:	b084      	sub	sp, #16
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	f107 001c 	add.w	r0, r7, #28
 80075e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d122      	bne.n	8007632 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007616:	2b01      	cmp	r3, #1
 8007618:	d105      	bne.n	8007626 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fbee 	bl	8008e08 <USB_CoreReset>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]
 8007630:	e01a      	b.n	8007668 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fbe2 	bl	8008e08 <USB_CoreReset>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	639a      	str	r2, [r3, #56]	; 0x38
 800765a:	e005      	b.n	8007668 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10b      	bne.n	8007686 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f043 0206 	orr.w	r2, r3, #6
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f043 0220 	orr.w	r2, r3, #32
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007692:	b004      	add	sp, #16
 8007694:	4770      	bx	lr
	...

08007698 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d165      	bne.n	8007778 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4a41      	ldr	r2, [pc, #260]	; (80077b4 <USB_SetTurnaroundTime+0x11c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d906      	bls.n	80076c2 <USB_SetTurnaroundTime+0x2a>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4a40      	ldr	r2, [pc, #256]	; (80077b8 <USB_SetTurnaroundTime+0x120>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d202      	bcs.n	80076c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076bc:	230f      	movs	r3, #15
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e062      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4a3c      	ldr	r2, [pc, #240]	; (80077b8 <USB_SetTurnaroundTime+0x120>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d306      	bcc.n	80076d8 <USB_SetTurnaroundTime+0x40>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4a3b      	ldr	r2, [pc, #236]	; (80077bc <USB_SetTurnaroundTime+0x124>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d202      	bcs.n	80076d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076d2:	230e      	movs	r3, #14
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e057      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4a38      	ldr	r2, [pc, #224]	; (80077bc <USB_SetTurnaroundTime+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d306      	bcc.n	80076ee <USB_SetTurnaroundTime+0x56>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4a37      	ldr	r2, [pc, #220]	; (80077c0 <USB_SetTurnaroundTime+0x128>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d202      	bcs.n	80076ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80076e8:	230d      	movs	r3, #13
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e04c      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4a33      	ldr	r2, [pc, #204]	; (80077c0 <USB_SetTurnaroundTime+0x128>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d306      	bcc.n	8007704 <USB_SetTurnaroundTime+0x6c>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	4a32      	ldr	r2, [pc, #200]	; (80077c4 <USB_SetTurnaroundTime+0x12c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d802      	bhi.n	8007704 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80076fe:	230c      	movs	r3, #12
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e041      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4a2f      	ldr	r2, [pc, #188]	; (80077c4 <USB_SetTurnaroundTime+0x12c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d906      	bls.n	800771a <USB_SetTurnaroundTime+0x82>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4a2e      	ldr	r2, [pc, #184]	; (80077c8 <USB_SetTurnaroundTime+0x130>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d802      	bhi.n	800771a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007714:	230b      	movs	r3, #11
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	e036      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <USB_SetTurnaroundTime+0x130>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d906      	bls.n	8007730 <USB_SetTurnaroundTime+0x98>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4a29      	ldr	r2, [pc, #164]	; (80077cc <USB_SetTurnaroundTime+0x134>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d802      	bhi.n	8007730 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800772a:	230a      	movs	r3, #10
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	e02b      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4a26      	ldr	r2, [pc, #152]	; (80077cc <USB_SetTurnaroundTime+0x134>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d906      	bls.n	8007746 <USB_SetTurnaroundTime+0xae>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <USB_SetTurnaroundTime+0x138>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d202      	bcs.n	8007746 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007740:	2309      	movs	r3, #9
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e020      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	4a21      	ldr	r2, [pc, #132]	; (80077d0 <USB_SetTurnaroundTime+0x138>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d306      	bcc.n	800775c <USB_SetTurnaroundTime+0xc4>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	4a20      	ldr	r2, [pc, #128]	; (80077d4 <USB_SetTurnaroundTime+0x13c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d802      	bhi.n	800775c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007756:	2308      	movs	r3, #8
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e015      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <USB_SetTurnaroundTime+0x13c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d906      	bls.n	8007772 <USB_SetTurnaroundTime+0xda>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <USB_SetTurnaroundTime+0x140>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d202      	bcs.n	8007772 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800776c:	2307      	movs	r3, #7
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e00a      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007772:	2306      	movs	r3, #6
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e007      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800777e:	2309      	movs	r3, #9
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	e001      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007784:	2309      	movs	r3, #9
 8007786:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	029b      	lsls	r3, r3, #10
 800779c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077a0:	431a      	orrs	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	00d8acbf 	.word	0x00d8acbf
 80077b8:	00e4e1c0 	.word	0x00e4e1c0
 80077bc:	00f42400 	.word	0x00f42400
 80077c0:	01067380 	.word	0x01067380
 80077c4:	011a499f 	.word	0x011a499f
 80077c8:	01312cff 	.word	0x01312cff
 80077cc:	014ca43f 	.word	0x014ca43f
 80077d0:	016e3600 	.word	0x016e3600
 80077d4:	01a6ab1f 	.word	0x01a6ab1f
 80077d8:	01e84800 	.word	0x01e84800

080077dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f043 0201 	orr.w	r2, r3, #1
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f023 0201 	bic.w	r2, r3, #1
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d115      	bne.n	800786e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800784e:	2001      	movs	r0, #1
 8007850:	f7fb f838 	bl	80028c4 <HAL_Delay>
      ms++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fa45 	bl	8008cea <USB_GetMode>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d01e      	beq.n	80078a4 <USB_SetCurrentMode+0x84>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b31      	cmp	r3, #49	; 0x31
 800786a:	d9f0      	bls.n	800784e <USB_SetCurrentMode+0x2e>
 800786c:	e01a      	b.n	80078a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d115      	bne.n	80078a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007880:	2001      	movs	r0, #1
 8007882:	f7fb f81f 	bl	80028c4 <HAL_Delay>
      ms++;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3301      	adds	r3, #1
 800788a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 fa2c 	bl	8008cea <USB_GetMode>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <USB_SetCurrentMode+0x84>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b31      	cmp	r3, #49	; 0x31
 800789c:	d9f0      	bls.n	8007880 <USB_SetCurrentMode+0x60>
 800789e:	e001      	b.n	80078a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e005      	b.n	80078b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b32      	cmp	r3, #50	; 0x32
 80078a8:	d101      	bne.n	80078ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078b8:	b084      	sub	sp, #16
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b086      	sub	sp, #24
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078d2:	2300      	movs	r3, #0
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	e009      	b.n	80078ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3340      	adds	r3, #64	; 0x40
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3301      	adds	r3, #1
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2b0e      	cmp	r3, #14
 80078f0:	d9f2      	bls.n	80078d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11c      	bne.n	8007932 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007906:	f043 0302 	orr.w	r3, r3, #2
 800790a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	639a      	str	r2, [r3, #56]	; 0x38
 8007930:	e00b      	b.n	800794a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007950:	461a      	mov	r2, r3
 8007952:	2300      	movs	r3, #0
 8007954:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795c:	4619      	mov	r1, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007964:	461a      	mov	r2, r3
 8007966:	680b      	ldr	r3, [r1, #0]
 8007968:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10c      	bne.n	800798a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007976:	2100      	movs	r1, #0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f965 	bl	8007c48 <USB_SetDevSpeed>
 800797e:	e008      	b.n	8007992 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007980:	2101      	movs	r1, #1
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f960 	bl	8007c48 <USB_SetDevSpeed>
 8007988:	e003      	b.n	8007992 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800798a:	2103      	movs	r1, #3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f95b 	bl	8007c48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007992:	2110      	movs	r1, #16
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f8f3 	bl	8007b80 <USB_FlushTxFifo>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f91f 	bl	8007be8 <USB_FlushRxFifo>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	461a      	mov	r2, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c6:	461a      	mov	r2, r3
 80079c8:	2300      	movs	r3, #0
 80079ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	461a      	mov	r2, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d8:	2300      	movs	r3, #0
 80079da:	613b      	str	r3, [r7, #16]
 80079dc:	e043      	b.n	8007a66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079f4:	d118      	bne.n	8007a28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	e013      	b.n	8007a3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e008      	b.n	8007a3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a34:	461a      	mov	r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	461a      	mov	r2, r3
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3301      	adds	r3, #1
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d3b7      	bcc.n	80079de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	e043      	b.n	8007afc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a8a:	d118      	bne.n	8007abe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	e013      	b.n	8007ad0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e008      	b.n	8007ad0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	461a      	mov	r2, r3
 8007acc:	2300      	movs	r3, #0
 8007ace:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	461a      	mov	r2, r3
 8007ade:	2300      	movs	r3, #0
 8007ae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aee:	461a      	mov	r2, r3
 8007af0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007af4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	3301      	adds	r3, #1
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d3b7      	bcc.n	8007a74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d105      	bne.n	8007b38 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	f043 0210 	orr.w	r2, r3, #16
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <USB_DevInit+0x2c4>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f043 0208 	orr.w	r2, r3, #8
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d107      	bne.n	8007b6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b64:	f043 0304 	orr.w	r3, r3, #4
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b78:	b004      	add	sp, #16
 8007b7a:	4770      	bx	lr
 8007b7c:	803c3800 	.word	0x803c3800

08007b80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3301      	adds	r3, #1
 8007b92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <USB_FlushTxFifo+0x64>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d901      	bls.n	8007ba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e01b      	b.n	8007bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	daf2      	bge.n	8007b8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	019b      	lsls	r3, r3, #6
 8007bb0:	f043 0220 	orr.w	r2, r3, #32
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4a08      	ldr	r2, [pc, #32]	; (8007be4 <USB_FlushTxFifo+0x64>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d901      	bls.n	8007bca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e006      	b.n	8007bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d0f0      	beq.n	8007bb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	00030d40 	.word	0x00030d40

08007be8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a11      	ldr	r2, [pc, #68]	; (8007c44 <USB_FlushRxFifo+0x5c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e018      	b.n	8007c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	daf2      	bge.n	8007bf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2210      	movs	r2, #16
 8007c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4a08      	ldr	r2, [pc, #32]	; (8007c44 <USB_FlushRxFifo+0x5c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d901      	bls.n	8007c2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e006      	b.n	8007c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d0f0      	beq.n	8007c18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	00030d40 	.word	0x00030d40

08007c48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b087      	sub	sp, #28
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0306 	and.w	r3, r3, #6
 8007c92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d102      	bne.n	8007ca0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75fb      	strb	r3, [r7, #23]
 8007c9e:	e00a      	b.n	8007cb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d002      	beq.n	8007cac <USB_GetDevSpeed+0x32>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b06      	cmp	r3, #6
 8007caa:	d102      	bne.n	8007cb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cac:	2302      	movs	r3, #2
 8007cae:	75fb      	strb	r3, [r7, #23]
 8007cb0:	e001      	b.n	8007cb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cb2:	230f      	movs	r3, #15
 8007cb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d13a      	bne.n	8007d56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d155      	bne.n	8007dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	791b      	ldrb	r3, [r3, #4]
 8007d32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	059b      	lsls	r3, r3, #22
 8007d3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	e036      	b.n	8007dc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5c:	69da      	ldr	r2, [r3, #28]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	2101      	movs	r1, #1
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	041b      	lsls	r3, r3, #16
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d74:	4313      	orrs	r3, r2
 8007d76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d11a      	bne.n	8007dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	791b      	ldrb	r3, [r3, #4]
 8007da8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007daa:	430b      	orrs	r3, r1
 8007dac:	4313      	orrs	r3, r2
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	0151      	lsls	r1, r2, #5
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	440a      	add	r2, r1
 8007db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
	...

08007dd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d161      	bne.n	8007eb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e06:	d11f      	bne.n	8007e48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	0151      	lsls	r1, r2, #5
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	440a      	add	r2, r1
 8007e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	0151      	lsls	r1, r2, #5
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	2101      	movs	r1, #1
 8007e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	43db      	mvns	r3, r3
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e68:	4013      	ands	r3, r2
 8007e6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	43db      	mvns	r3, r3
 8007e86:	68f9      	ldr	r1, [r7, #12]
 8007e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	0159      	lsls	r1, r3, #5
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	440b      	add	r3, r1
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4b35      	ldr	r3, [pc, #212]	; (8007f84 <USB_DeactivateEndpoint+0x1b0>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	600b      	str	r3, [r1, #0]
 8007eb2:	e060      	b.n	8007f76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eca:	d11f      	bne.n	8007f0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007eea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	43db      	mvns	r3, r3
 8007f26:	68f9      	ldr	r1, [r7, #12]
 8007f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	2101      	movs	r1, #1
 8007f42:	fa01 f303 	lsl.w	r3, r1, r3
 8007f46:	041b      	lsls	r3, r3, #16
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f50:	4013      	ands	r3, r2
 8007f52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	0159      	lsls	r1, r3, #5
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	440b      	add	r3, r1
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <USB_DeactivateEndpoint+0x1b4>)
 8007f72:	4013      	ands	r3, r2
 8007f74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	ec337800 	.word	0xec337800
 8007f88:	eff37800 	.word	0xeff37800

08007f8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08a      	sub	sp, #40	; 0x28
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	f040 815c 	bne.w	8008266 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d132      	bne.n	800801c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	0151      	lsls	r1, r2, #5
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	440a      	add	r2, r1
 8007ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	0151      	lsls	r1, r2, #5
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	440a      	add	r2, r1
 8008010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008014:	0cdb      	lsrs	r3, r3, #19
 8008016:	04db      	lsls	r3, r3, #19
 8008018:	6113      	str	r3, [r2, #16]
 800801a:	e074      	b.n	8008106 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	0151      	lsls	r1, r2, #5
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	440a      	add	r2, r1
 8008032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008036:	0cdb      	lsrs	r3, r3, #19
 8008038:	04db      	lsls	r3, r3, #19
 800803a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008056:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800805a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800805e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6999      	ldr	r1, [r3, #24]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	440b      	add	r3, r1
 8008078:	1e59      	subs	r1, r3, #1
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008082:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008084:	4b9d      	ldr	r3, [pc, #628]	; (80082fc <USB_EPStartXfer+0x370>)
 8008086:	400b      	ands	r3, r1
 8008088:	69b9      	ldr	r1, [r7, #24]
 800808a:	0148      	lsls	r0, r1, #5
 800808c:	69f9      	ldr	r1, [r7, #28]
 800808e:	4401      	add	r1, r0
 8008090:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008094:	4313      	orrs	r3, r2
 8008096:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ae:	69b9      	ldr	r1, [r7, #24]
 80080b0:	0148      	lsls	r0, r1, #5
 80080b2:	69f9      	ldr	r1, [r7, #28]
 80080b4:	4401      	add	r1, r0
 80080b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080ba:	4313      	orrs	r3, r2
 80080bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d11f      	bne.n	8008106 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	0151      	lsls	r1, r2, #5
 80080d8:	69fa      	ldr	r2, [r7, #28]
 80080da:	440a      	add	r2, r1
 80080dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80080e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	0151      	lsls	r1, r2, #5
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	440a      	add	r2, r1
 80080fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008104:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d14b      	bne.n	80081a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008120:	461a      	mov	r2, r3
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	791b      	ldrb	r3, [r3, #4]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d128      	bne.n	8008182 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813c:	2b00      	cmp	r3, #0
 800813e:	d110      	bne.n	8008162 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	440a      	add	r2, r1
 8008156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	e00f      	b.n	8008182 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	0151      	lsls	r1, r2, #5
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	440a      	add	r2, r1
 8008178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800817c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008180:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	440a      	add	r2, r1
 8008198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	e133      	b.n	800840c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	791b      	ldrb	r3, [r3, #4]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d015      	beq.n	80081f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 811b 	beq.w	800840c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	2101      	movs	r1, #1
 80081e8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ec:	69f9      	ldr	r1, [r7, #28]
 80081ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081f2:	4313      	orrs	r3, r2
 80081f4:	634b      	str	r3, [r1, #52]	; 0x34
 80081f6:	e109      	b.n	800840c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008204:	2b00      	cmp	r3, #0
 8008206:	d110      	bne.n	800822a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	e00f      	b.n	800824a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	440a      	add	r2, r1
 8008240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008248:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	6919      	ldr	r1, [r3, #16]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	781a      	ldrb	r2, [r3, #0]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	b298      	uxth	r0, r3
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	4603      	mov	r3, r0
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 fade 	bl	8008820 <USB_WritePacket>
 8008264:	e0d2      	b.n	800840c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	440a      	add	r2, r1
 800827c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008280:	0cdb      	lsrs	r3, r3, #19
 8008282:	04db      	lsls	r3, r3, #19
 8008284:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d126      	bne.n	8008300 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082be:	691a      	ldr	r2, [r3, #16]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082c8:	69b9      	ldr	r1, [r7, #24]
 80082ca:	0148      	lsls	r0, r1, #5
 80082cc:	69f9      	ldr	r1, [r7, #28]
 80082ce:	4401      	add	r1, r0
 80082d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082d4:	4313      	orrs	r3, r2
 80082d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082f6:	6113      	str	r3, [r2, #16]
 80082f8:	e03a      	b.n	8008370 <USB_EPStartXfer+0x3e4>
 80082fa:	bf00      	nop
 80082fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	4413      	add	r3, r2
 800830a:	1e5a      	subs	r2, r3, #1
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	fbb2 f3f3 	udiv	r3, r2, r3
 8008314:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	8afa      	ldrh	r2, [r7, #22]
 800831c:	fb03 f202 	mul.w	r2, r3, r2
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	8afb      	ldrh	r3, [r7, #22]
 8008334:	04d9      	lsls	r1, r3, #19
 8008336:	4b38      	ldr	r3, [pc, #224]	; (8008418 <USB_EPStartXfer+0x48c>)
 8008338:	400b      	ands	r3, r1
 800833a:	69b9      	ldr	r1, [r7, #24]
 800833c:	0148      	lsls	r0, r1, #5
 800833e:	69f9      	ldr	r1, [r7, #28]
 8008340:	4401      	add	r1, r0
 8008342:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008346:	4313      	orrs	r3, r2
 8008348:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008360:	69b9      	ldr	r1, [r7, #24]
 8008362:	0148      	lsls	r0, r1, #5
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	4401      	add	r1, r0
 8008368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800836c:	4313      	orrs	r3, r2
 800836e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d10d      	bne.n	8008392 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6919      	ldr	r1, [r3, #16]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	460a      	mov	r2, r1
 8008390:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	791b      	ldrb	r3, [r3, #4]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d128      	bne.n	80083ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d110      	bne.n	80083cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e00f      	b.n	80083ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800840a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3720      	adds	r7, #32
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	1ff80000 	.word	0x1ff80000

0800841c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	785b      	ldrb	r3, [r3, #1]
 8008438:	2b01      	cmp	r3, #1
 800843a:	f040 80ce 	bne.w	80085da <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d132      	bne.n	80084ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	440a      	add	r2, r1
 800845c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	440a      	add	r2, r1
 8008480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a4:	0cdb      	lsrs	r3, r3, #19
 80084a6:	04db      	lsls	r3, r3, #19
 80084a8:	6113      	str	r3, [r2, #16]
 80084aa:	e04e      	b.n	800854a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c6:	0cdb      	lsrs	r3, r3, #19
 80084c8:	04db      	lsls	r3, r3, #19
 80084ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	0151      	lsls	r1, r2, #5
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	440a      	add	r2, r1
 80084e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d903      	bls.n	8008504 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	440a      	add	r2, r1
 800851a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	691a      	ldr	r2, [r3, #16]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800853a:	6939      	ldr	r1, [r7, #16]
 800853c:	0148      	lsls	r0, r1, #5
 800853e:	6979      	ldr	r1, [r7, #20]
 8008540:	4401      	add	r1, r0
 8008542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008546:	4313      	orrs	r3, r2
 8008548:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d11e      	bne.n	800858e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d009      	beq.n	800856c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008564:	461a      	mov	r2, r3
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	440a      	add	r2, r1
 8008582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	e097      	b.n	80086be <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 8083 	beq.w	80086be <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	f003 030f 	and.w	r3, r3, #15
 80085c8:	2101      	movs	r1, #1
 80085ca:	fa01 f303 	lsl.w	r3, r1, r3
 80085ce:	6979      	ldr	r1, [r7, #20]
 80085d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085d4:	4313      	orrs	r3, r2
 80085d6:	634b      	str	r3, [r1, #52]	; 0x34
 80085d8:	e071      	b.n	80086be <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	0151      	lsls	r1, r2, #5
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	440a      	add	r2, r1
 80085f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085f4:	0cdb      	lsrs	r3, r3, #19
 80085f6:	04db      	lsls	r3, r3, #19
 80085f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	440a      	add	r2, r1
 8008610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800861c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008662:	691a      	ldr	r2, [r3, #16]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800866c:	6939      	ldr	r1, [r7, #16]
 800866e:	0148      	lsls	r0, r1, #5
 8008670:	6979      	ldr	r1, [r7, #20]
 8008672:	4401      	add	r1, r0
 8008674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008678:	4313      	orrs	r3, r2
 800867a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d10d      	bne.n	800869e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	6919      	ldr	r1, [r3, #16]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869a:	460a      	mov	r2, r1
 800869c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d14a      	bne.n	8008780 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008702:	f040 8086 	bne.w	8008812 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	0151      	lsls	r1, r2, #5
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	440a      	add	r2, r1
 8008720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008728:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	7812      	ldrb	r2, [r2, #0]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	440a      	add	r2, r1
 8008744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800874c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f242 7210 	movw	r2, #10000	; 0x2710
 800875a:	4293      	cmp	r3, r2
 800875c:	d902      	bls.n	8008764 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]
          break;
 8008762:	e056      	b.n	8008812 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800877c:	d0e7      	beq.n	800874e <USB_EPStopXfer+0x82>
 800877e:	e048      	b.n	8008812 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008798:	d13b      	bne.n	8008812 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	7812      	ldrb	r2, [r2, #0]
 80087ae:	0151      	lsls	r1, r2, #5
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	440a      	add	r2, r1
 80087b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	7812      	ldrb	r2, [r2, #0]
 80087d2:	0151      	lsls	r1, r2, #5
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	440a      	add	r2, r1
 80087d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3301      	adds	r3, #1
 80087e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d902      	bls.n	80087f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	75fb      	strb	r3, [r7, #23]
          break;
 80087f6:	e00c      	b.n	8008812 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800880c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008810:	d0e7      	beq.n	80087e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008812:	7dfb      	ldrb	r3, [r7, #23]
}
 8008814:	4618      	mov	r0, r3
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008820:	b480      	push	{r7}
 8008822:	b089      	sub	sp, #36	; 0x24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4611      	mov	r1, r2
 800882c:	461a      	mov	r2, r3
 800882e:	460b      	mov	r3, r1
 8008830:	71fb      	strb	r3, [r7, #7]
 8008832:	4613      	mov	r3, r2
 8008834:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800883e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008842:	2b00      	cmp	r3, #0
 8008844:	d123      	bne.n	800888e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008846:	88bb      	ldrh	r3, [r7, #4]
 8008848:	3303      	adds	r3, #3
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800884e:	2300      	movs	r3, #0
 8008850:	61bb      	str	r3, [r7, #24]
 8008852:	e018      	b.n	8008886 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	031a      	lsls	r2, r3, #12
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	4413      	add	r3, r2
 800885c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008860:	461a      	mov	r2, r3
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	3301      	adds	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	3301      	adds	r3, #1
 800887e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	3301      	adds	r3, #1
 8008884:	61bb      	str	r3, [r7, #24]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	429a      	cmp	r2, r3
 800888c:	d3e2      	bcc.n	8008854 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3724      	adds	r7, #36	; 0x24
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800889c:	b480      	push	{r7}
 800889e:	b08b      	sub	sp, #44	; 0x2c
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4613      	mov	r3, r2
 80088a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	089b      	lsrs	r3, r3, #2
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088ba:	88fb      	ldrh	r3, [r7, #6]
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088c2:	2300      	movs	r3, #0
 80088c4:	623b      	str	r3, [r7, #32]
 80088c6:	e014      	b.n	80088f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	3301      	adds	r3, #1
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	3301      	adds	r3, #1
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	3301      	adds	r3, #1
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	3301      	adds	r3, #1
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	3301      	adds	r3, #1
 80088f0:	623b      	str	r3, [r7, #32]
 80088f2:	6a3a      	ldr	r2, [r7, #32]
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d3e6      	bcc.n	80088c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80088fa:	8bfb      	ldrh	r3, [r7, #30]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01e      	beq.n	800893e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890a:	461a      	mov	r2, r3
 800890c:	f107 0310 	add.w	r3, r7, #16
 8008910:	6812      	ldr	r2, [r2, #0]
 8008912:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	fa22 f303 	lsr.w	r3, r2, r3
 8008920:	b2da      	uxtb	r2, r3
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	701a      	strb	r2, [r3, #0]
      i++;
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	3301      	adds	r3, #1
 800892a:	623b      	str	r3, [r7, #32]
      pDest++;
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	3301      	adds	r3, #1
 8008930:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008932:	8bfb      	ldrh	r3, [r7, #30]
 8008934:	3b01      	subs	r3, #1
 8008936:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008938:	8bfb      	ldrh	r3, [r7, #30]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1ea      	bne.n	8008914 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008940:	4618      	mov	r0, r3
 8008942:	372c      	adds	r7, #44	; 0x2c
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d12c      	bne.n	80089c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4413      	add	r3, r2
 8008970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	db12      	blt.n	80089a0 <USB_EPSetStall+0x54>
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00f      	beq.n	80089a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	0151      	lsls	r1, r2, #5
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	440a      	add	r2, r1
 8008996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800899a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800899e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	0151      	lsls	r1, r2, #5
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	440a      	add	r2, r1
 80089b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	e02b      	b.n	8008a1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	db12      	blt.n	80089fa <USB_EPSetStall+0xae>
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00f      	beq.n	80089fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	0151      	lsls	r1, r2, #5
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	440a      	add	r2, r1
 80089f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d128      	bne.n	8008a96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	0151      	lsls	r1, r2, #5
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	440a      	add	r2, r1
 8008a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	791b      	ldrb	r3, [r3, #4]
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d003      	beq.n	8008a74 <USB_EPClearStall+0x4c>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	791b      	ldrb	r3, [r3, #4]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d138      	bne.n	8008ae6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	e027      	b.n	8008ae6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	0151      	lsls	r1, r2, #5
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	440a      	add	r2, r1
 8008aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ab4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	791b      	ldrb	r3, [r3, #4]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d003      	beq.n	8008ac6 <USB_EPClearStall+0x9e>
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	791b      	ldrb	r3, [r3, #4]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d10f      	bne.n	8008ae6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	0151      	lsls	r1, r2, #5
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	440a      	add	r2, r1
 8008adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b28:	68f9      	ldr	r1, [r7, #12]
 8008b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b6e:	f023 0302 	bic.w	r3, r3, #2
 8008b72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b9c:	f023 0303 	bic.w	r3, r3, #3
 8008ba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb0:	f043 0302 	orr.w	r3, r3, #2
 8008bb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	0c1b      	lsrs	r3, r3, #16
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b085      	sub	sp, #20
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	b29b      	uxth	r3, r3
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b085      	sub	sp, #20
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c80:	68bb      	ldr	r3, [r7, #8]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b087      	sub	sp, #28
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cb2:	78fb      	ldrb	r3, [r7, #3]
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	fa22 f303 	lsr.w	r3, r2, r3
 8008cbe:	01db      	lsls	r3, r3, #7
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d24:	f023 0307 	bic.w	r3, r3, #7
 8008d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	460b      	mov	r3, r1
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	333c      	adds	r3, #60	; 0x3c
 8008d62:	3304      	adds	r3, #4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	4a26      	ldr	r2, [pc, #152]	; (8008e04 <USB_EP0_OutStart+0xb8>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d90a      	bls.n	8008d86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d80:	d101      	bne.n	8008d86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	e037      	b.n	8008df6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2300      	movs	r3, #0
 8008d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db4:	f043 0318 	orr.w	r3, r3, #24
 8008db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008dcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d10f      	bne.n	8008df4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	4f54300a 	.word	0x4f54300a

08008e08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <USB_CoreReset+0x64>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d901      	bls.n	8008e26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e01b      	b.n	8008e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	daf2      	bge.n	8008e14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	f043 0201 	orr.w	r2, r3, #1
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3301      	adds	r3, #1
 8008e42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4a09      	ldr	r2, [pc, #36]	; (8008e6c <USB_CoreReset+0x64>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d901      	bls.n	8008e50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e006      	b.n	8008e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d0f0      	beq.n	8008e3e <USB_CoreReset+0x36>

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	00030d40 	.word	0x00030d40

08008e70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008e74:	4904      	ldr	r1, [pc, #16]	; (8008e88 <MX_FATFS_Init+0x18>)
 8008e76:	4805      	ldr	r0, [pc, #20]	; (8008e8c <MX_FATFS_Init+0x1c>)
 8008e78:	f002 f87c 	bl	800af74 <FATFS_LinkDriver>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <MX_FATFS_Init+0x20>)
 8008e82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e84:	bf00      	nop
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20000884 	.word	0x20000884
 8008e8c:	200004f8 	.word	0x200004f8
 8008e90:	20000880 	.word	0x20000880

08008e94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (mem_init(pdrv));
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7f8 fd6f 	bl	8001984 <mem_init>
 8008ea6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return (mem_getstatus(pdrv));
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f8 fd79 	bl	80019b4 <mem_getstatus>
 8008ec2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (mem_read(pdrv, buff, sector, count));
 8008edc:	7bf8      	ldrb	r0, [r7, #15]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	f7f8 fd76 	bl	80019d4 <mem_read>
 8008ee8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008f02:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	603a      	str	r2, [r7, #0]
 8008f1a:	71fb      	strb	r3, [r7, #7]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    switch (cmd) {
 8008f20:	79bb      	ldrb	r3, [r7, #6]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d002      	beq.n	8008f2c <USER_ioctl+0x1c>
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d004      	beq.n	8008f34 <USER_ioctl+0x24>
 8008f2a:	e007      	b.n	8008f3c <USER_ioctl+0x2c>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = 65536;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008f32:	601a      	str	r2, [r3, #0]
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = 2048;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f3a:	601a      	str	r2, [r3, #0]
    }
    return RES_OK;
 8008f3c:	2300      	movs	r3, #0
  /* USER CODE END IOCTL */
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
	...

08008f4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f5c:	f005 fc32 	bl	800e7c4 <USBD_static_malloc>
 8008f60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d109      	bne.n	8008f7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	32b0      	adds	r2, #176	; 0xb0
 8008f72:	2100      	movs	r1, #0
 8008f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e0d4      	b.n	8009126 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f7c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008f80:	2100      	movs	r1, #0
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f005 fcaa 	bl	800e8dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	32b0      	adds	r2, #176	; 0xb0
 8008f92:	68f9      	ldr	r1, [r7, #12]
 8008f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	32b0      	adds	r2, #176	; 0xb0
 8008fa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	7c1b      	ldrb	r3, [r3, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d138      	bne.n	8009026 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fb4:	4b5e      	ldr	r3, [pc, #376]	; (8009130 <USBD_CDC_Init+0x1e4>)
 8008fb6:	7819      	ldrb	r1, [r3, #0]
 8008fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f005 fadd 	bl	800e57e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fc4:	4b5a      	ldr	r3, [pc, #360]	; (8009130 <USBD_CDC_Init+0x1e4>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	f003 020f 	and.w	r2, r3, #15
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	440b      	add	r3, r1
 8008fd8:	3324      	adds	r3, #36	; 0x24
 8008fda:	2201      	movs	r2, #1
 8008fdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008fde:	4b55      	ldr	r3, [pc, #340]	; (8009134 <USBD_CDC_Init+0x1e8>)
 8008fe0:	7819      	ldrb	r1, [r3, #0]
 8008fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f005 fac8 	bl	800e57e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008fee:	4b51      	ldr	r3, [pc, #324]	; (8009134 <USBD_CDC_Init+0x1e8>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	f003 020f 	and.w	r2, r3, #15
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	440b      	add	r3, r1
 8009002:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009006:	2201      	movs	r2, #1
 8009008:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800900a:	4b4b      	ldr	r3, [pc, #300]	; (8009138 <USBD_CDC_Init+0x1ec>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	f003 020f 	and.w	r2, r3, #15
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	4613      	mov	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	440b      	add	r3, r1
 800901e:	3326      	adds	r3, #38	; 0x26
 8009020:	2210      	movs	r2, #16
 8009022:	801a      	strh	r2, [r3, #0]
 8009024:	e035      	b.n	8009092 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009026:	4b42      	ldr	r3, [pc, #264]	; (8009130 <USBD_CDC_Init+0x1e4>)
 8009028:	7819      	ldrb	r1, [r3, #0]
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	2202      	movs	r2, #2
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f005 faa5 	bl	800e57e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009034:	4b3e      	ldr	r3, [pc, #248]	; (8009130 <USBD_CDC_Init+0x1e4>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	f003 020f 	and.w	r2, r3, #15
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	4613      	mov	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	440b      	add	r3, r1
 8009048:	3324      	adds	r3, #36	; 0x24
 800904a:	2201      	movs	r2, #1
 800904c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800904e:	4b39      	ldr	r3, [pc, #228]	; (8009134 <USBD_CDC_Init+0x1e8>)
 8009050:	7819      	ldrb	r1, [r3, #0]
 8009052:	2340      	movs	r3, #64	; 0x40
 8009054:	2202      	movs	r2, #2
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f005 fa91 	bl	800e57e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800905c:	4b35      	ldr	r3, [pc, #212]	; (8009134 <USBD_CDC_Init+0x1e8>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	f003 020f 	and.w	r2, r3, #15
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009074:	2201      	movs	r2, #1
 8009076:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009078:	4b2f      	ldr	r3, [pc, #188]	; (8009138 <USBD_CDC_Init+0x1ec>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f003 020f 	and.w	r2, r3, #15
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	440b      	add	r3, r1
 800908c:	3326      	adds	r3, #38	; 0x26
 800908e:	2210      	movs	r2, #16
 8009090:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009092:	4b29      	ldr	r3, [pc, #164]	; (8009138 <USBD_CDC_Init+0x1ec>)
 8009094:	7819      	ldrb	r1, [r3, #0]
 8009096:	2308      	movs	r3, #8
 8009098:	2203      	movs	r2, #3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f005 fa6f 	bl	800e57e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80090a0:	4b25      	ldr	r3, [pc, #148]	; (8009138 <USBD_CDC_Init+0x1ec>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	f003 020f 	and.w	r2, r3, #15
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	3324      	adds	r3, #36	; 0x24
 80090b6:	2201      	movs	r2, #1
 80090b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	33b0      	adds	r3, #176	; 0xb0
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80090f0:	2302      	movs	r3, #2
 80090f2:	e018      	b.n	8009126 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7c1b      	ldrb	r3, [r3, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090fc:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <USBD_CDC_Init+0x1e8>)
 80090fe:	7819      	ldrb	r1, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f005 fb26 	bl	800e75c <USBD_LL_PrepareReceive>
 8009110:	e008      	b.n	8009124 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009112:	4b08      	ldr	r3, [pc, #32]	; (8009134 <USBD_CDC_Init+0x1e8>)
 8009114:	7819      	ldrb	r1, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f005 fb1c 	bl	800e75c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000593 	.word	0x20000593
 8009134:	20000594 	.word	0x20000594
 8009138:	20000595 	.word	0x20000595

0800913c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009148:	4b3a      	ldr	r3, [pc, #232]	; (8009234 <USBD_CDC_DeInit+0xf8>)
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f005 fa3b 	bl	800e5ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009154:	4b37      	ldr	r3, [pc, #220]	; (8009234 <USBD_CDC_DeInit+0xf8>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 020f 	and.w	r2, r3, #15
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	3324      	adds	r3, #36	; 0x24
 800916a:	2200      	movs	r2, #0
 800916c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800916e:	4b32      	ldr	r3, [pc, #200]	; (8009238 <USBD_CDC_DeInit+0xfc>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f005 fa28 	bl	800e5ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800917a:	4b2f      	ldr	r3, [pc, #188]	; (8009238 <USBD_CDC_DeInit+0xfc>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	f003 020f 	and.w	r2, r3, #15
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	440b      	add	r3, r1
 800918e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009192:	2200      	movs	r2, #0
 8009194:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009196:	4b29      	ldr	r3, [pc, #164]	; (800923c <USBD_CDC_DeInit+0x100>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f005 fa14 	bl	800e5ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80091a2:	4b26      	ldr	r3, [pc, #152]	; (800923c <USBD_CDC_DeInit+0x100>)
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	f003 020f 	and.w	r2, r3, #15
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	4613      	mov	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	3324      	adds	r3, #36	; 0x24
 80091b8:	2200      	movs	r2, #0
 80091ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80091bc:	4b1f      	ldr	r3, [pc, #124]	; (800923c <USBD_CDC_DeInit+0x100>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 020f 	and.w	r2, r3, #15
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	4613      	mov	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	440b      	add	r3, r1
 80091d0:	3326      	adds	r3, #38	; 0x26
 80091d2:	2200      	movs	r2, #0
 80091d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	32b0      	adds	r2, #176	; 0xb0
 80091e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01f      	beq.n	8009228 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	33b0      	adds	r3, #176	; 0xb0
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32b0      	adds	r2, #176	; 0xb0
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	4618      	mov	r0, r3
 800920c:	f005 fae8 	bl	800e7e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32b0      	adds	r2, #176	; 0xb0
 800921a:	2100      	movs	r1, #0
 800921c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000593 	.word	0x20000593
 8009238:	20000594 	.word	0x20000594
 800923c:	20000595 	.word	0x20000595

08009240 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	32b0      	adds	r2, #176	; 0xb0
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800925a:	2300      	movs	r3, #0
 800925c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	e0bf      	b.n	80093f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009278:	2b00      	cmp	r3, #0
 800927a:	d050      	beq.n	800931e <USBD_CDC_Setup+0xde>
 800927c:	2b20      	cmp	r3, #32
 800927e:	f040 80af 	bne.w	80093e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	88db      	ldrh	r3, [r3, #6]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d03a      	beq.n	8009300 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b25b      	sxtb	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	da1b      	bge.n	80092cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	33b0      	adds	r3, #176	; 0xb0
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80092aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	88d2      	ldrh	r2, [r2, #6]
 80092b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	88db      	ldrh	r3, [r3, #6]
 80092b6:	2b07      	cmp	r3, #7
 80092b8:	bf28      	it	cs
 80092ba:	2307      	movcs	r3, #7
 80092bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	89fa      	ldrh	r2, [r7, #14]
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f001 fd89 	bl	800addc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80092ca:	e090      	b.n	80093ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	785a      	ldrb	r2, [r3, #1]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	88db      	ldrh	r3, [r3, #6]
 80092da:	2b3f      	cmp	r3, #63	; 0x3f
 80092dc:	d803      	bhi.n	80092e6 <USBD_CDC_Setup+0xa6>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	88db      	ldrh	r3, [r3, #6]
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	e000      	b.n	80092e8 <USBD_CDC_Setup+0xa8>
 80092e6:	2240      	movs	r2, #64	; 0x40
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80092ee:	6939      	ldr	r1, [r7, #16]
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80092f6:	461a      	mov	r2, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 fd9b 	bl	800ae34 <USBD_CtlPrepareRx>
      break;
 80092fe:	e076      	b.n	80093ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	33b0      	adds	r3, #176	; 0xb0
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	7850      	ldrb	r0, [r2, #1]
 8009316:	2200      	movs	r2, #0
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	4798      	blx	r3
      break;
 800931c:	e067      	b.n	80093ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	785b      	ldrb	r3, [r3, #1]
 8009322:	2b0b      	cmp	r3, #11
 8009324:	d851      	bhi.n	80093ca <USBD_CDC_Setup+0x18a>
 8009326:	a201      	add	r2, pc, #4	; (adr r2, 800932c <USBD_CDC_Setup+0xec>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	0800935d 	.word	0x0800935d
 8009330:	080093d9 	.word	0x080093d9
 8009334:	080093cb 	.word	0x080093cb
 8009338:	080093cb 	.word	0x080093cb
 800933c:	080093cb 	.word	0x080093cb
 8009340:	080093cb 	.word	0x080093cb
 8009344:	080093cb 	.word	0x080093cb
 8009348:	080093cb 	.word	0x080093cb
 800934c:	080093cb 	.word	0x080093cb
 8009350:	080093cb 	.word	0x080093cb
 8009354:	08009387 	.word	0x08009387
 8009358:	080093b1 	.word	0x080093b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b03      	cmp	r3, #3
 8009366:	d107      	bne.n	8009378 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009368:	f107 030a 	add.w	r3, r7, #10
 800936c:	2202      	movs	r2, #2
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 fd33 	bl	800addc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009376:	e032      	b.n	80093de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fcbd 	bl	800acfa <USBD_CtlError>
            ret = USBD_FAIL;
 8009380:	2303      	movs	r3, #3
 8009382:	75fb      	strb	r3, [r7, #23]
          break;
 8009384:	e02b      	b.n	80093de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b03      	cmp	r3, #3
 8009390:	d107      	bne.n	80093a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009392:	f107 030d 	add.w	r3, r7, #13
 8009396:	2201      	movs	r2, #1
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 fd1e 	bl	800addc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093a0:	e01d      	b.n	80093de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fca8 	bl	800acfa <USBD_CtlError>
            ret = USBD_FAIL;
 80093aa:	2303      	movs	r3, #3
 80093ac:	75fb      	strb	r3, [r7, #23]
          break;
 80093ae:	e016      	b.n	80093de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d00f      	beq.n	80093dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 fc9b 	bl	800acfa <USBD_CtlError>
            ret = USBD_FAIL;
 80093c4:	2303      	movs	r3, #3
 80093c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093c8:	e008      	b.n	80093dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fc94 	bl	800acfa <USBD_CtlError>
          ret = USBD_FAIL;
 80093d2:	2303      	movs	r3, #3
 80093d4:	75fb      	strb	r3, [r7, #23]
          break;
 80093d6:	e002      	b.n	80093de <USBD_CDC_Setup+0x19e>
          break;
 80093d8:	bf00      	nop
 80093da:	e008      	b.n	80093ee <USBD_CDC_Setup+0x1ae>
          break;
 80093dc:	bf00      	nop
      }
      break;
 80093de:	e006      	b.n	80093ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 fc89 	bl	800acfa <USBD_CtlError>
      ret = USBD_FAIL;
 80093e8:	2303      	movs	r3, #3
 80093ea:	75fb      	strb	r3, [r7, #23]
      break;
 80093ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800940a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	32b0      	adds	r2, #176	; 0xb0
 8009416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800941e:	2303      	movs	r3, #3
 8009420:	e065      	b.n	80094ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	32b0      	adds	r2, #176	; 0xb0
 800942c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009430:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	3318      	adds	r3, #24
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d02f      	beq.n	80094ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	f003 020f 	and.w	r2, r3, #15
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	3318      	adds	r3, #24
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	f003 010f 	and.w	r1, r3, #15
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	460b      	mov	r3, r1
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	440b      	add	r3, r1
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4403      	add	r3, r0
 8009474:	3348      	adds	r3, #72	; 0x48
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	fbb2 f1f3 	udiv	r1, r2, r3
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009482:	2b00      	cmp	r3, #0
 8009484:	d112      	bne.n	80094ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	f003 020f 	and.w	r2, r3, #15
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	3318      	adds	r3, #24
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800949e:	78f9      	ldrb	r1, [r7, #3]
 80094a0:	2300      	movs	r3, #0
 80094a2:	2200      	movs	r2, #0
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f005 f938 	bl	800e71a <USBD_LL_Transmit>
 80094aa:	e01f      	b.n	80094ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	33b0      	adds	r3, #176	; 0xb0
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d010      	beq.n	80094ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	33b0      	adds	r3, #176	; 0xb0
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094e8:	78fa      	ldrb	r2, [r7, #3]
 80094ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	32b0      	adds	r2, #176	; 0xb0
 800950c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009510:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	32b0      	adds	r2, #176	; 0xb0
 800951c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009524:	2303      	movs	r3, #3
 8009526:	e01a      	b.n	800955e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009528:	78fb      	ldrb	r3, [r7, #3]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f005 f936 	bl	800e79e <USBD_LL_GetRxDataSize>
 8009532:	4602      	mov	r2, r0
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	33b0      	adds	r3, #176	; 0xb0
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009558:	4611      	mov	r1, r2
 800955a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	32b0      	adds	r2, #176	; 0xb0
 8009578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009584:	2303      	movs	r3, #3
 8009586:	e025      	b.n	80095d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	33b0      	adds	r3, #176	; 0xb0
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01a      	beq.n	80095d2 <USBD_CDC_EP0_RxReady+0x6c>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80095a2:	2bff      	cmp	r3, #255	; 0xff
 80095a4:	d015      	beq.n	80095d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	33b0      	adds	r3, #176	; 0xb0
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80095be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095c6:	b292      	uxth	r2, r2
 80095c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	22ff      	movs	r2, #255	; 0xff
 80095ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095e4:	2182      	movs	r1, #130	; 0x82
 80095e6:	4818      	ldr	r0, [pc, #96]	; (8009648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095e8:	f000 fd4f 	bl	800a08a <USBD_GetEpDesc>
 80095ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095ee:	2101      	movs	r1, #1
 80095f0:	4815      	ldr	r0, [pc, #84]	; (8009648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095f2:	f000 fd4a 	bl	800a08a <USBD_GetEpDesc>
 80095f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095f8:	2181      	movs	r1, #129	; 0x81
 80095fa:	4813      	ldr	r0, [pc, #76]	; (8009648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095fc:	f000 fd45 	bl	800a08a <USBD_GetEpDesc>
 8009600:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2210      	movs	r2, #16
 800960c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d006      	beq.n	8009622 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2200      	movs	r2, #0
 8009618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800961c:	711a      	strb	r2, [r3, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d006      	beq.n	8009636 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009630:	711a      	strb	r2, [r3, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2243      	movs	r2, #67	; 0x43
 800963a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20000550 	.word	0x20000550

0800964c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009654:	2182      	movs	r1, #130	; 0x82
 8009656:	4818      	ldr	r0, [pc, #96]	; (80096b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009658:	f000 fd17 	bl	800a08a <USBD_GetEpDesc>
 800965c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800965e:	2101      	movs	r1, #1
 8009660:	4815      	ldr	r0, [pc, #84]	; (80096b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009662:	f000 fd12 	bl	800a08a <USBD_GetEpDesc>
 8009666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009668:	2181      	movs	r1, #129	; 0x81
 800966a:	4813      	ldr	r0, [pc, #76]	; (80096b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800966c:	f000 fd0d 	bl	800a08a <USBD_GetEpDesc>
 8009670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2210      	movs	r2, #16
 800967c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2200      	movs	r2, #0
 8009688:	711a      	strb	r2, [r3, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f042 0202 	orr.w	r2, r2, #2
 8009690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d006      	beq.n	80096a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	711a      	strb	r2, [r3, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f042 0202 	orr.w	r2, r2, #2
 80096a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2243      	movs	r2, #67	; 0x43
 80096aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096ac:	4b02      	ldr	r3, [pc, #8]	; (80096b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000550 	.word	0x20000550

080096bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096c4:	2182      	movs	r1, #130	; 0x82
 80096c6:	4818      	ldr	r0, [pc, #96]	; (8009728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096c8:	f000 fcdf 	bl	800a08a <USBD_GetEpDesc>
 80096cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096ce:	2101      	movs	r1, #1
 80096d0:	4815      	ldr	r0, [pc, #84]	; (8009728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096d2:	f000 fcda 	bl	800a08a <USBD_GetEpDesc>
 80096d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096d8:	2181      	movs	r1, #129	; 0x81
 80096da:	4813      	ldr	r0, [pc, #76]	; (8009728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096dc:	f000 fcd5 	bl	800a08a <USBD_GetEpDesc>
 80096e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2210      	movs	r2, #16
 80096ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d006      	beq.n	8009702 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096fc:	711a      	strb	r2, [r3, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d006      	beq.n	8009716 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009710:	711a      	strb	r2, [r3, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2243      	movs	r2, #67	; 0x43
 800971a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800971c:	4b02      	ldr	r3, [pc, #8]	; (8009728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000550 	.word	0x20000550

0800972c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	220a      	movs	r2, #10
 8009738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	; (8009748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	2000050c 	.word	0x2000050c

0800974c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800975c:	2303      	movs	r3, #3
 800975e:	e009      	b.n	8009774 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	33b0      	adds	r3, #176	; 0xb0
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	32b0      	adds	r2, #176	; 0xb0
 8009796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800979a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e008      	b.n	80097b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	371c      	adds	r7, #28
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	32b0      	adds	r2, #176	; 0xb0
 80097d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e004      	b.n	80097f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
	...

08009800 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	32b0      	adds	r2, #176	; 0xb0
 8009812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009816:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	32b0      	adds	r2, #176	; 0xb0
 8009826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	e025      	b.n	800987e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009838:	2b00      	cmp	r3, #0
 800983a:	d11f      	bne.n	800987c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2201      	movs	r2, #1
 8009840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009844:	4b10      	ldr	r3, [pc, #64]	; (8009888 <USBD_CDC_TransmitPacket+0x88>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	f003 020f 	and.w	r2, r3, #15
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4403      	add	r3, r0
 800985e:	3318      	adds	r3, #24
 8009860:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009862:	4b09      	ldr	r3, [pc, #36]	; (8009888 <USBD_CDC_TransmitPacket+0x88>)
 8009864:	7819      	ldrb	r1, [r3, #0]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f004 ff51 	bl	800e71a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000593 	.word	0x20000593

0800988c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32b0      	adds	r2, #176	; 0xb0
 800989e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	32b0      	adds	r2, #176	; 0xb0
 80098ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e018      	b.n	80098ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	7c1b      	ldrb	r3, [r3, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098c2:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <USBD_CDC_ReceivePacket+0x68>)
 80098c4:	7819      	ldrb	r1, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f004 ff43 	bl	800e75c <USBD_LL_PrepareReceive>
 80098d6:	e008      	b.n	80098ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098d8:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <USBD_CDC_ReceivePacket+0x68>)
 80098da:	7819      	ldrb	r1, [r3, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098e2:	2340      	movs	r3, #64	; 0x40
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f004 ff39 	bl	800e75c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20000594 	.word	0x20000594

080098f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	4613      	mov	r3, r2
 8009904:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800990c:	2303      	movs	r3, #3
 800990e:	e01f      	b.n	8009950 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	79fa      	ldrb	r2, [r7, #7]
 8009942:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f004 fdb3 	bl	800e4b0 <USBD_LL_Init>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800994e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800996c:	2303      	movs	r3, #3
 800996e:	e025      	b.n	80099bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	32ae      	adds	r2, #174	; 0xae
 8009982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00f      	beq.n	80099ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	32ae      	adds	r2, #174	; 0xae
 8009996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	f107 020e 	add.w	r2, r7, #14
 80099a0:	4610      	mov	r0, r2
 80099a2:	4798      	blx	r3
 80099a4:	4602      	mov	r2, r0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f004 fdbb 	bl	800e548 <USBD_LL_Start>
 80099d2:	4603      	mov	r3, r0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d009      	beq.n	8009a20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	78fa      	ldrb	r2, [r7, #3]
 8009a16:	4611      	mov	r1, r2
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	4798      	blx	r3
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	460b      	mov	r3, r1
 8009a34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	78fa      	ldrb	r2, [r7, #3]
 8009a44:	4611      	mov	r1, r2
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	4798      	blx	r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009a50:	2303      	movs	r3, #3
 8009a52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f001 f908 	bl	800ac86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a84:	461a      	mov	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a92:	f003 031f 	and.w	r3, r3, #31
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d01a      	beq.n	8009ad0 <USBD_LL_SetupStage+0x72>
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d822      	bhi.n	8009ae4 <USBD_LL_SetupStage+0x86>
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <USBD_LL_SetupStage+0x4a>
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d00a      	beq.n	8009abc <USBD_LL_SetupStage+0x5e>
 8009aa6:	e01d      	b.n	8009ae4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb5f 	bl	800a174 <USBD_StdDevReq>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aba:	e020      	b.n	8009afe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fbc7 	bl	800a258 <USBD_StdItfReq>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ace:	e016      	b.n	8009afe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc29 	bl	800a330 <USBD_StdEPReq>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae2:	e00c      	b.n	8009afe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f004 fd88 	bl	800e608 <USBD_LL_StallEP>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]
      break;
 8009afc:	bf00      	nop
  }

  return ret;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	460b      	mov	r3, r1
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009b1a:	7afb      	ldrb	r3, [r7, #11]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d16e      	bne.n	8009bfe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	f040 8098 	bne.w	8009c64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d913      	bls.n	8009b68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	1ad2      	subs	r2, r2, r3
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	bf28      	it	cs
 8009b5a:	4613      	movcs	r3, r2
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f001 f984 	bl	800ae6e <USBD_CtlContinueRx>
 8009b66:	e07d      	b.n	8009c64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b6e:	f003 031f 	and.w	r3, r3, #31
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d014      	beq.n	8009ba0 <USBD_LL_DataOutStage+0x98>
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d81d      	bhi.n	8009bb6 <USBD_LL_DataOutStage+0xae>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <USBD_LL_DataOutStage+0x7c>
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d003      	beq.n	8009b8a <USBD_LL_DataOutStage+0x82>
 8009b82:	e018      	b.n	8009bb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	75bb      	strb	r3, [r7, #22]
            break;
 8009b88:	e018      	b.n	8009bbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	4619      	mov	r1, r3
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 fa5e 	bl	800a056 <USBD_CoreFindIF>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	75bb      	strb	r3, [r7, #22]
            break;
 8009b9e:	e00d      	b.n	8009bbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	4619      	mov	r1, r3
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 fa60 	bl	800a070 <USBD_CoreFindEP>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	75bb      	strb	r3, [r7, #22]
            break;
 8009bb4:	e002      	b.n	8009bbc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	75bb      	strb	r3, [r7, #22]
            break;
 8009bba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009bbc:	7dbb      	ldrb	r3, [r7, #22]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d119      	bne.n	8009bf6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d113      	bne.n	8009bf6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009bce:	7dba      	ldrb	r2, [r7, #22]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	32ae      	adds	r2, #174	; 0xae
 8009bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009bde:	7dba      	ldrb	r2, [r7, #22]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009be6:	7dba      	ldrb	r2, [r7, #22]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	32ae      	adds	r2, #174	; 0xae
 8009bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f001 f94a 	bl	800ae90 <USBD_CtlSendStatus>
 8009bfc:	e032      	b.n	8009c64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009bfe:	7afb      	ldrb	r3, [r7, #11]
 8009c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	4619      	mov	r1, r3
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 fa31 	bl	800a070 <USBD_CoreFindEP>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c12:	7dbb      	ldrb	r3, [r7, #22]
 8009c14:	2bff      	cmp	r3, #255	; 0xff
 8009c16:	d025      	beq.n	8009c64 <USBD_LL_DataOutStage+0x15c>
 8009c18:	7dbb      	ldrb	r3, [r7, #22]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d122      	bne.n	8009c64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d117      	bne.n	8009c5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009c2a:	7dba      	ldrb	r2, [r7, #22]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	32ae      	adds	r2, #174	; 0xae
 8009c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00f      	beq.n	8009c5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009c3a:	7dba      	ldrb	r2, [r7, #22]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009c42:	7dba      	ldrb	r2, [r7, #22]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	32ae      	adds	r2, #174	; 0xae
 8009c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	7afa      	ldrb	r2, [r7, #11]
 8009c50:	4611      	mov	r1, r2
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	4798      	blx	r3
 8009c56:	4603      	mov	r3, r0
 8009c58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	e000      	b.n	8009c66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b086      	sub	sp, #24
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	60f8      	str	r0, [r7, #12]
 8009c76:	460b      	mov	r3, r1
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d16f      	bne.n	8009d62 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3314      	adds	r3, #20
 8009c86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d15a      	bne.n	8009d48 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	689a      	ldr	r2, [r3, #8]
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d914      	bls.n	8009cc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	689a      	ldr	r2, [r3, #8]
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	1ad2      	subs	r2, r2, r3
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f001 f8ac 	bl	800ae12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cba:	2300      	movs	r3, #0
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f004 fd4b 	bl	800e75c <USBD_LL_PrepareReceive>
 8009cc6:	e03f      	b.n	8009d48 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d11c      	bne.n	8009d0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d316      	bcc.n	8009d0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d20f      	bcs.n	8009d0e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009cee:	2200      	movs	r2, #0
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f001 f88d 	bl	800ae12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d00:	2300      	movs	r3, #0
 8009d02:	2200      	movs	r2, #0
 8009d04:	2100      	movs	r1, #0
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f004 fd28 	bl	800e75c <USBD_LL_PrepareReceive>
 8009d0c:	e01c      	b.n	8009d48 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d10f      	bne.n	8009d3a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d009      	beq.n	8009d3a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d3a:	2180      	movs	r1, #128	; 0x80
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f004 fc63 	bl	800e608 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f001 f8b7 	bl	800aeb6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d03a      	beq.n	8009dc8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f7ff fe42 	bl	80099dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d60:	e032      	b.n	8009dc8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009d62:	7afb      	ldrb	r3, [r7, #11]
 8009d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f97f 	bl	800a070 <USBD_CoreFindEP>
 8009d72:	4603      	mov	r3, r0
 8009d74:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	2bff      	cmp	r3, #255	; 0xff
 8009d7a:	d025      	beq.n	8009dc8 <USBD_LL_DataInStage+0x15a>
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d122      	bne.n	8009dc8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d11c      	bne.n	8009dc8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009d8e:	7dfa      	ldrb	r2, [r7, #23]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	32ae      	adds	r2, #174	; 0xae
 8009d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d014      	beq.n	8009dc8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009d9e:	7dfa      	ldrb	r2, [r7, #23]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009da6:	7dfa      	ldrb	r2, [r7, #23]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	32ae      	adds	r2, #174	; 0xae
 8009dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	7afa      	ldrb	r2, [r7, #11]
 8009db4:	4611      	mov	r1, r2
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	4798      	blx	r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009dbe:	7dbb      	ldrb	r3, [r7, #22]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009dc4:	7dbb      	ldrb	r3, [r7, #22]
 8009dc6:	e000      	b.n	8009dca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d014      	beq.n	8009e38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00e      	beq.n	8009e38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6852      	ldr	r2, [r2, #4]
 8009e26:	b2d2      	uxtb	r2, r2
 8009e28:	4611      	mov	r1, r2
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009e34:	2303      	movs	r3, #3
 8009e36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e38:	2340      	movs	r3, #64	; 0x40
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f004 fb9d 	bl	800e57e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2240      	movs	r2, #64	; 0x40
 8009e50:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	2200      	movs	r2, #0
 8009e58:	2180      	movs	r1, #128	; 0x80
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f004 fb8f 	bl	800e57e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2240      	movs	r2, #64	; 0x40
 8009e6a:	621a      	str	r2, [r3, #32]

  return ret;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	78fa      	ldrb	r2, [r7, #3]
 8009e86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2204      	movs	r2, #4
 8009eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d106      	bne.n	8009ee4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	d110      	bne.n	8009f28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f16:	69db      	ldr	r3, [r3, #28]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	32ae      	adds	r2, #174	; 0xae
 8009f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e01c      	b.n	8009f8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d115      	bne.n	8009f8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	32ae      	adds	r2, #174	; 0xae
 8009f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	32ae      	adds	r2, #174	; 0xae
 8009f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	78fa      	ldrb	r2, [r7, #3]
 8009f86:	4611      	mov	r1, r2
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	32ae      	adds	r2, #174	; 0xae
 8009fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e01c      	b.n	8009ff2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d115      	bne.n	8009ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	32ae      	adds	r2, #174	; 0xae
 8009fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00b      	beq.n	8009ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	32ae      	adds	r2, #174	; 0xae
 8009fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	78fa      	ldrb	r2, [r7, #3]
 8009fea:	4611      	mov	r1, r2
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	6852      	ldr	r2, [r2, #4]
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	4611      	mov	r1, r2
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	4798      	blx	r3
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a048:	2303      	movs	r3, #3
 800a04a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a062:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a07c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a07e:	4618      	mov	r0, r3
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b086      	sub	sp, #24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d920      	bls.n	800a0f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a0ba:	e013      	b.n	800a0e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a0bc:	f107 030a 	add.w	r3, r7, #10
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6978      	ldr	r0, [r7, #20]
 800a0c4:	f000 f81b 	bl	800a0fe <USBD_GetNextDesc>
 800a0c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	2b05      	cmp	r3, #5
 800a0d0:	d108      	bne.n	800a0e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	789b      	ldrb	r3, [r3, #2]
 800a0da:	78fa      	ldrb	r2, [r7, #3]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d008      	beq.n	800a0f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	885b      	ldrh	r3, [r3, #2]
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	897b      	ldrh	r3, [r7, #10]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d8e5      	bhi.n	800a0bc <USBD_GetEpDesc+0x32>
 800a0f0:	e000      	b.n	800a0f4 <USBD_GetEpDesc+0x6a>
          break;
 800a0f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a0f4:	693b      	ldr	r3, [r7, #16]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	881a      	ldrh	r2, [r3, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	4413      	add	r3, r2
 800a118:	b29a      	uxth	r2, r3
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4413      	add	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a12a:	68fb      	ldr	r3, [r7, #12]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	3301      	adds	r3, #1
 800a14e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a156:	8a3b      	ldrh	r3, [r7, #16]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	b21a      	sxth	r2, r3
 800a15c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a160:	4313      	orrs	r3, r2
 800a162:	b21b      	sxth	r3, r3
 800a164:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a166:	89fb      	ldrh	r3, [r7, #14]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	371c      	adds	r7, #28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a18a:	2b40      	cmp	r3, #64	; 0x40
 800a18c:	d005      	beq.n	800a19a <USBD_StdDevReq+0x26>
 800a18e:	2b40      	cmp	r3, #64	; 0x40
 800a190:	d857      	bhi.n	800a242 <USBD_StdDevReq+0xce>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00f      	beq.n	800a1b6 <USBD_StdDevReq+0x42>
 800a196:	2b20      	cmp	r3, #32
 800a198:	d153      	bne.n	800a242 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	32ae      	adds	r2, #174	; 0xae
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	4798      	blx	r3
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b4:	e04a      	b.n	800a24c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	785b      	ldrb	r3, [r3, #1]
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	d83b      	bhi.n	800a236 <USBD_StdDevReq+0xc2>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <USBD_StdDevReq+0x50>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a219 	.word	0x0800a219
 800a1c8:	0800a22d 	.word	0x0800a22d
 800a1cc:	0800a237 	.word	0x0800a237
 800a1d0:	0800a223 	.word	0x0800a223
 800a1d4:	0800a237 	.word	0x0800a237
 800a1d8:	0800a1f7 	.word	0x0800a1f7
 800a1dc:	0800a1ed 	.word	0x0800a1ed
 800a1e0:	0800a237 	.word	0x0800a237
 800a1e4:	0800a20f 	.word	0x0800a20f
 800a1e8:	0800a201 	.word	0x0800a201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa3c 	bl	800a66c <USBD_GetDescriptor>
          break;
 800a1f4:	e024      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fba1 	bl	800a940 <USBD_SetAddress>
          break;
 800a1fe:	e01f      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fbe0 	bl	800a9c8 <USBD_SetConfig>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]
          break;
 800a20c:	e018      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fc83 	bl	800ab1c <USBD_GetConfig>
          break;
 800a216:	e013      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fcb4 	bl	800ab88 <USBD_GetStatus>
          break;
 800a220:	e00e      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fce3 	bl	800abf0 <USBD_SetFeature>
          break;
 800a22a:	e009      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fd07 	bl	800ac42 <USBD_ClrFeature>
          break;
 800a234:	e004      	b.n	800a240 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fd5e 	bl	800acfa <USBD_CtlError>
          break;
 800a23e:	bf00      	nop
      }
      break;
 800a240:	e004      	b.n	800a24c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fd58 	bl	800acfa <USBD_CtlError>
      break;
 800a24a:	bf00      	nop
  }

  return ret;
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop

0800a258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a26e:	2b40      	cmp	r3, #64	; 0x40
 800a270:	d005      	beq.n	800a27e <USBD_StdItfReq+0x26>
 800a272:	2b40      	cmp	r3, #64	; 0x40
 800a274:	d852      	bhi.n	800a31c <USBD_StdItfReq+0xc4>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <USBD_StdItfReq+0x26>
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d14e      	bne.n	800a31c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a284:	b2db      	uxtb	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d840      	bhi.n	800a30e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	889b      	ldrh	r3, [r3, #4]
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b01      	cmp	r3, #1
 800a294:	d836      	bhi.n	800a304 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	889b      	ldrh	r3, [r3, #4]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff fed9 	bl	800a056 <USBD_CoreFindIF>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
 800a2aa:	2bff      	cmp	r3, #255	; 0xff
 800a2ac:	d01d      	beq.n	800a2ea <USBD_StdItfReq+0x92>
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d11a      	bne.n	800a2ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a2b4:	7bba      	ldrb	r2, [r7, #14]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	32ae      	adds	r2, #174	; 0xae
 800a2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00f      	beq.n	800a2e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a2c4:	7bba      	ldrb	r2, [r7, #14]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a2cc:	7bba      	ldrb	r2, [r7, #14]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	32ae      	adds	r2, #174	; 0xae
 800a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2e2:	e004      	b.n	800a2ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2e8:	e001      	b.n	800a2ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	88db      	ldrh	r3, [r3, #6]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d110      	bne.n	800a318 <USBD_StdItfReq+0xc0>
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10d      	bne.n	800a318 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fdc7 	bl	800ae90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a302:	e009      	b.n	800a318 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fcf7 	bl	800acfa <USBD_CtlError>
          break;
 800a30c:	e004      	b.n	800a318 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fcf2 	bl	800acfa <USBD_CtlError>
          break;
 800a316:	e000      	b.n	800a31a <USBD_StdItfReq+0xc2>
          break;
 800a318:	bf00      	nop
      }
      break;
 800a31a:	e004      	b.n	800a326 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fceb 	bl	800acfa <USBD_CtlError>
      break;
 800a324:	bf00      	nop
  }

  return ret;
 800a326:	7bfb      	ldrb	r3, [r7, #15]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	889b      	ldrh	r3, [r3, #4]
 800a342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a34c:	2b40      	cmp	r3, #64	; 0x40
 800a34e:	d007      	beq.n	800a360 <USBD_StdEPReq+0x30>
 800a350:	2b40      	cmp	r3, #64	; 0x40
 800a352:	f200 817f 	bhi.w	800a654 <USBD_StdEPReq+0x324>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d02a      	beq.n	800a3b0 <USBD_StdEPReq+0x80>
 800a35a:	2b20      	cmp	r3, #32
 800a35c:	f040 817a 	bne.w	800a654 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fe83 	bl	800a070 <USBD_CoreFindEP>
 800a36a:	4603      	mov	r3, r0
 800a36c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a36e:	7b7b      	ldrb	r3, [r7, #13]
 800a370:	2bff      	cmp	r3, #255	; 0xff
 800a372:	f000 8174 	beq.w	800a65e <USBD_StdEPReq+0x32e>
 800a376:	7b7b      	ldrb	r3, [r7, #13]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f040 8170 	bne.w	800a65e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a37e:	7b7a      	ldrb	r2, [r7, #13]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a386:	7b7a      	ldrb	r2, [r7, #13]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	32ae      	adds	r2, #174	; 0xae
 800a38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 8163 	beq.w	800a65e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a398:	7b7a      	ldrb	r2, [r7, #13]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	32ae      	adds	r2, #174	; 0xae
 800a39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	4798      	blx	r3
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a3ae:	e156      	b.n	800a65e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d008      	beq.n	800a3ca <USBD_StdEPReq+0x9a>
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	f300 8145 	bgt.w	800a648 <USBD_StdEPReq+0x318>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 809b 	beq.w	800a4fa <USBD_StdEPReq+0x1ca>
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d03c      	beq.n	800a442 <USBD_StdEPReq+0x112>
 800a3c8:	e13e      	b.n	800a648 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d002      	beq.n	800a3dc <USBD_StdEPReq+0xac>
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d016      	beq.n	800a408 <USBD_StdEPReq+0xd8>
 800a3da:	e02c      	b.n	800a436 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3dc:	7bbb      	ldrb	r3, [r7, #14]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <USBD_StdEPReq+0xce>
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
 800a3e4:	2b80      	cmp	r3, #128	; 0x80
 800a3e6:	d00a      	beq.n	800a3fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f004 f90b 	bl	800e608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3f2:	2180      	movs	r1, #128	; 0x80
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f004 f907 	bl	800e608 <USBD_LL_StallEP>
 800a3fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3fc:	e020      	b.n	800a440 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fc7a 	bl	800acfa <USBD_CtlError>
              break;
 800a406:	e01b      	b.n	800a440 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	885b      	ldrh	r3, [r3, #2]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10e      	bne.n	800a42e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00b      	beq.n	800a42e <USBD_StdEPReq+0xfe>
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	2b80      	cmp	r3, #128	; 0x80
 800a41a:	d008      	beq.n	800a42e <USBD_StdEPReq+0xfe>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	88db      	ldrh	r3, [r3, #6]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d104      	bne.n	800a42e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f004 f8ed 	bl	800e608 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fd2e 	bl	800ae90 <USBD_CtlSendStatus>

              break;
 800a434:	e004      	b.n	800a440 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fc5e 	bl	800acfa <USBD_CtlError>
              break;
 800a43e:	bf00      	nop
          }
          break;
 800a440:	e107      	b.n	800a652 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d002      	beq.n	800a454 <USBD_StdEPReq+0x124>
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d016      	beq.n	800a480 <USBD_StdEPReq+0x150>
 800a452:	e04b      	b.n	800a4ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00d      	beq.n	800a476 <USBD_StdEPReq+0x146>
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	2b80      	cmp	r3, #128	; 0x80
 800a45e:	d00a      	beq.n	800a476 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a460:	7bbb      	ldrb	r3, [r7, #14]
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f004 f8cf 	bl	800e608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a46a:	2180      	movs	r1, #128	; 0x80
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f004 f8cb 	bl	800e608 <USBD_LL_StallEP>
 800a472:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a474:	e040      	b.n	800a4f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fc3e 	bl	800acfa <USBD_CtlError>
              break;
 800a47e:	e03b      	b.n	800a4f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	885b      	ldrh	r3, [r3, #2]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d136      	bne.n	800a4f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d004      	beq.n	800a49c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f004 f8d5 	bl	800e646 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fcf7 	bl	800ae90 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff fde2 	bl	800a070 <USBD_CoreFindEP>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4b0:	7b7b      	ldrb	r3, [r7, #13]
 800a4b2:	2bff      	cmp	r3, #255	; 0xff
 800a4b4:	d01f      	beq.n	800a4f6 <USBD_StdEPReq+0x1c6>
 800a4b6:	7b7b      	ldrb	r3, [r7, #13]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d11c      	bne.n	800a4f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a4bc:	7b7a      	ldrb	r2, [r7, #13]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a4c4:	7b7a      	ldrb	r2, [r7, #13]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	32ae      	adds	r2, #174	; 0xae
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d010      	beq.n	800a4f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4d4:	7b7a      	ldrb	r2, [r7, #13]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	32ae      	adds	r2, #174	; 0xae
 800a4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	4798      	blx	r3
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a4ea:	e004      	b.n	800a4f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fc03 	bl	800acfa <USBD_CtlError>
              break;
 800a4f4:	e000      	b.n	800a4f8 <USBD_StdEPReq+0x1c8>
              break;
 800a4f6:	bf00      	nop
          }
          break;
 800a4f8:	e0ab      	b.n	800a652 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d002      	beq.n	800a50c <USBD_StdEPReq+0x1dc>
 800a506:	2b03      	cmp	r3, #3
 800a508:	d032      	beq.n	800a570 <USBD_StdEPReq+0x240>
 800a50a:	e097      	b.n	800a63c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d007      	beq.n	800a522 <USBD_StdEPReq+0x1f2>
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	2b80      	cmp	r3, #128	; 0x80
 800a516:	d004      	beq.n	800a522 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fbed 	bl	800acfa <USBD_CtlError>
                break;
 800a520:	e091      	b.n	800a646 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a526:	2b00      	cmp	r3, #0
 800a528:	da0b      	bge.n	800a542 <USBD_StdEPReq+0x212>
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a530:	4613      	mov	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	3310      	adds	r3, #16
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	3304      	adds	r3, #4
 800a540:	e00b      	b.n	800a55a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	4413      	add	r3, r2
 800a558:	3304      	adds	r3, #4
 800a55a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2200      	movs	r2, #0
 800a560:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2202      	movs	r2, #2
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fc37 	bl	800addc <USBD_CtlSendData>
              break;
 800a56e:	e06a      	b.n	800a646 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a574:	2b00      	cmp	r3, #0
 800a576:	da11      	bge.n	800a59c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	f003 020f 	and.w	r2, r3, #15
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	4613      	mov	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	440b      	add	r3, r1
 800a58a:	3324      	adds	r3, #36	; 0x24
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d117      	bne.n	800a5c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fbb0 	bl	800acfa <USBD_CtlError>
                  break;
 800a59a:	e054      	b.n	800a646 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	f003 020f 	and.w	r2, r3, #15
 800a5a2:	6879      	ldr	r1, [r7, #4]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	440b      	add	r3, r1
 800a5ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fb9d 	bl	800acfa <USBD_CtlError>
                  break;
 800a5c0:	e041      	b.n	800a646 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da0b      	bge.n	800a5e2 <USBD_StdEPReq+0x2b2>
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	3310      	adds	r3, #16
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	3304      	adds	r3, #4
 800a5e0:	e00b      	b.n	800a5fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <USBD_StdEPReq+0x2d8>
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b80      	cmp	r3, #128	; 0x80
 800a606:	d103      	bne.n	800a610 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e00e      	b.n	800a62e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f004 f835 	bl	800e684 <USBD_LL_IsStallEP>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d003      	beq.n	800a628 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2201      	movs	r2, #1
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	e002      	b.n	800a62e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2200      	movs	r2, #0
 800a62c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2202      	movs	r2, #2
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fbd1 	bl	800addc <USBD_CtlSendData>
              break;
 800a63a:	e004      	b.n	800a646 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fb5b 	bl	800acfa <USBD_CtlError>
              break;
 800a644:	bf00      	nop
          }
          break;
 800a646:	e004      	b.n	800a652 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fb55 	bl	800acfa <USBD_CtlError>
          break;
 800a650:	bf00      	nop
      }
      break;
 800a652:	e005      	b.n	800a660 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb4f 	bl	800acfa <USBD_CtlError>
      break;
 800a65c:	e000      	b.n	800a660 <USBD_StdEPReq+0x330>
      break;
 800a65e:	bf00      	nop
  }

  return ret;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	885b      	ldrh	r3, [r3, #2]
 800a686:	0a1b      	lsrs	r3, r3, #8
 800a688:	b29b      	uxth	r3, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	2b06      	cmp	r3, #6
 800a68e:	f200 8128 	bhi.w	800a8e2 <USBD_GetDescriptor+0x276>
 800a692:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <USBD_GetDescriptor+0x2c>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	0800a6cd 	.word	0x0800a6cd
 800a6a0:	0800a70d 	.word	0x0800a70d
 800a6a4:	0800a8e3 	.word	0x0800a8e3
 800a6a8:	0800a8e3 	.word	0x0800a8e3
 800a6ac:	0800a883 	.word	0x0800a883
 800a6b0:	0800a8af 	.word	0x0800a8af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	7c12      	ldrb	r2, [r2, #16]
 800a6c0:	f107 0108 	add.w	r1, r7, #8
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
 800a6c8:	60f8      	str	r0, [r7, #12]
      break;
 800a6ca:	e112      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7c1b      	ldrb	r3, [r3, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10d      	bne.n	800a6f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	f107 0208 	add.w	r2, r7, #8
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4798      	blx	r3
 800a6e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6ee:	e100      	b.n	800a8f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f8:	f107 0208 	add.w	r2, r7, #8
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	4798      	blx	r3
 800a700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3301      	adds	r3, #1
 800a706:	2202      	movs	r2, #2
 800a708:	701a      	strb	r2, [r3, #0]
      break;
 800a70a:	e0f2      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	885b      	ldrh	r3, [r3, #2]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b05      	cmp	r3, #5
 800a714:	f200 80ac 	bhi.w	800a870 <USBD_GetDescriptor+0x204>
 800a718:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <USBD_GetDescriptor+0xb4>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a739 	.word	0x0800a739
 800a724:	0800a76d 	.word	0x0800a76d
 800a728:	0800a7a1 	.word	0x0800a7a1
 800a72c:	0800a7d5 	.word	0x0800a7d5
 800a730:	0800a809 	.word	0x0800a809
 800a734:	0800a83d 	.word	0x0800a83d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	7c12      	ldrb	r2, [r2, #16]
 800a750:	f107 0108 	add.w	r1, r7, #8
 800a754:	4610      	mov	r0, r2
 800a756:	4798      	blx	r3
 800a758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a75a:	e091      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 facb 	bl	800acfa <USBD_CtlError>
            err++;
 800a764:	7afb      	ldrb	r3, [r7, #11]
 800a766:	3301      	adds	r3, #1
 800a768:	72fb      	strb	r3, [r7, #11]
          break;
 800a76a:	e089      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00b      	beq.n	800a790 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	7c12      	ldrb	r2, [r2, #16]
 800a784:	f107 0108 	add.w	r1, r7, #8
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
 800a78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a78e:	e077      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fab1 	bl	800acfa <USBD_CtlError>
            err++;
 800a798:	7afb      	ldrb	r3, [r7, #11]
 800a79a:	3301      	adds	r3, #1
 800a79c:	72fb      	strb	r3, [r7, #11]
          break;
 800a79e:	e06f      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00b      	beq.n	800a7c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	7c12      	ldrb	r2, [r2, #16]
 800a7b8:	f107 0108 	add.w	r1, r7, #8
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4798      	blx	r3
 800a7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c2:	e05d      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fa97 	bl	800acfa <USBD_CtlError>
            err++;
 800a7cc:	7afb      	ldrb	r3, [r7, #11]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7d2:	e055      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	7c12      	ldrb	r2, [r2, #16]
 800a7ec:	f107 0108 	add.w	r1, r7, #8
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7f6:	e043      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fa7d 	bl	800acfa <USBD_CtlError>
            err++;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	3301      	adds	r3, #1
 800a804:	72fb      	strb	r3, [r7, #11]
          break;
 800a806:	e03b      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	7c12      	ldrb	r2, [r2, #16]
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
 800a828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a82a:	e029      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa63 	bl	800acfa <USBD_CtlError>
            err++;
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	3301      	adds	r3, #1
 800a838:	72fb      	strb	r3, [r7, #11]
          break;
 800a83a:	e021      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	7c12      	ldrb	r2, [r2, #16]
 800a854:	f107 0108 	add.w	r1, r7, #8
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
 800a85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a85e:	e00f      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa49 	bl	800acfa <USBD_CtlError>
            err++;
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	3301      	adds	r3, #1
 800a86c:	72fb      	strb	r3, [r7, #11]
          break;
 800a86e:	e007      	b.n	800a880 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa41 	bl	800acfa <USBD_CtlError>
          err++;
 800a878:	7afb      	ldrb	r3, [r7, #11]
 800a87a:	3301      	adds	r3, #1
 800a87c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a87e:	bf00      	nop
      }
      break;
 800a880:	e037      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	7c1b      	ldrb	r3, [r3, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d109      	bne.n	800a89e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a892:	f107 0208 	add.w	r2, r7, #8
 800a896:	4610      	mov	r0, r2
 800a898:	4798      	blx	r3
 800a89a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a89c:	e029      	b.n	800a8f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fa2a 	bl	800acfa <USBD_CtlError>
        err++;
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a8ac:	e021      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	7c1b      	ldrb	r3, [r3, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10d      	bne.n	800a8d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8be:	f107 0208 	add.w	r2, r7, #8
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	4798      	blx	r3
 800a8c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	2207      	movs	r2, #7
 800a8ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8d0:	e00f      	b.n	800a8f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fa10 	bl	800acfa <USBD_CtlError>
        err++;
 800a8da:	7afb      	ldrb	r3, [r7, #11]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e0:	e007      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fa08 	bl	800acfa <USBD_CtlError>
      err++;
 800a8ea:	7afb      	ldrb	r3, [r7, #11]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a8f0:	bf00      	nop
  }

  if (err != 0U)
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d11e      	bne.n	800a936 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	88db      	ldrh	r3, [r3, #6]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d016      	beq.n	800a92e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a900:	893b      	ldrh	r3, [r7, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00e      	beq.n	800a924 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	88da      	ldrh	r2, [r3, #6]
 800a90a:	893b      	ldrh	r3, [r7, #8]
 800a90c:	4293      	cmp	r3, r2
 800a90e:	bf28      	it	cs
 800a910:	4613      	movcs	r3, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a916:	893b      	ldrh	r3, [r7, #8]
 800a918:	461a      	mov	r2, r3
 800a91a:	68f9      	ldr	r1, [r7, #12]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fa5d 	bl	800addc <USBD_CtlSendData>
 800a922:	e009      	b.n	800a938 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f9e7 	bl	800acfa <USBD_CtlError>
 800a92c:	e004      	b.n	800a938 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 faae 	bl	800ae90 <USBD_CtlSendStatus>
 800a934:	e000      	b.n	800a938 <USBD_GetDescriptor+0x2cc>
    return;
 800a936:	bf00      	nop
  }
}
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop

0800a940 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	889b      	ldrh	r3, [r3, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d131      	bne.n	800a9b6 <USBD_SetAddress+0x76>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	88db      	ldrh	r3, [r3, #6]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d12d      	bne.n	800a9b6 <USBD_SetAddress+0x76>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	885b      	ldrh	r3, [r3, #2]
 800a95e:	2b7f      	cmp	r3, #127	; 0x7f
 800a960:	d829      	bhi.n	800a9b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	885b      	ldrh	r3, [r3, #2]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a96c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b03      	cmp	r3, #3
 800a978:	d104      	bne.n	800a984 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f9bc 	bl	800acfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a982:	e01d      	b.n	800a9c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	7bfa      	ldrb	r2, [r7, #15]
 800a988:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f003 fea3 	bl	800e6dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa7a 	bl	800ae90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9aa:	e009      	b.n	800a9c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b4:	e004      	b.n	800a9c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f99e 	bl	800acfa <USBD_CtlError>
  }
}
 800a9be:	bf00      	nop
 800a9c0:	bf00      	nop
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	885b      	ldrh	r3, [r3, #2]
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	4b4e      	ldr	r3, [pc, #312]	; (800ab18 <USBD_SetConfig+0x150>)
 800a9de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9e0:	4b4d      	ldr	r3, [pc, #308]	; (800ab18 <USBD_SetConfig+0x150>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d905      	bls.n	800a9f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f985 	bl	800acfa <USBD_CtlError>
    return USBD_FAIL;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e08c      	b.n	800ab0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d002      	beq.n	800aa06 <USBD_SetConfig+0x3e>
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d029      	beq.n	800aa58 <USBD_SetConfig+0x90>
 800aa04:	e075      	b.n	800aaf2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa06:	4b44      	ldr	r3, [pc, #272]	; (800ab18 <USBD_SetConfig+0x150>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d020      	beq.n	800aa50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aa0e:	4b42      	ldr	r3, [pc, #264]	; (800ab18 <USBD_SetConfig+0x150>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa18:	4b3f      	ldr	r3, [pc, #252]	; (800ab18 <USBD_SetConfig+0x150>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7fe ffe7 	bl	80099f2 <USBD_SetClassConfig>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d008      	beq.n	800aa40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f962 	bl	800acfa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa3e:	e065      	b.n	800ab0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fa25 	bl	800ae90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2203      	movs	r2, #3
 800aa4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa4e:	e05d      	b.n	800ab0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fa1d 	bl	800ae90 <USBD_CtlSendStatus>
      break;
 800aa56:	e059      	b.n	800ab0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa58:	4b2f      	ldr	r3, [pc, #188]	; (800ab18 <USBD_SetConfig+0x150>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d112      	bne.n	800aa86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa68:	4b2b      	ldr	r3, [pc, #172]	; (800ab18 <USBD_SetConfig+0x150>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa72:	4b29      	ldr	r3, [pc, #164]	; (800ab18 <USBD_SetConfig+0x150>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7fe ffd6 	bl	8009a2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa06 	bl	800ae90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa84:	e042      	b.n	800ab0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa86:	4b24      	ldr	r3, [pc, #144]	; (800ab18 <USBD_SetConfig+0x150>)
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d02a      	beq.n	800aaea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7fe ffc4 	bl	8009a2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aaa2:	4b1d      	ldr	r3, [pc, #116]	; (800ab18 <USBD_SetConfig+0x150>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aaac:	4b1a      	ldr	r3, [pc, #104]	; (800ab18 <USBD_SetConfig+0x150>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7fe ff9d 	bl	80099f2 <USBD_SetClassConfig>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00f      	beq.n	800aae2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f918 	bl	800acfa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7fe ffa9 	bl	8009a2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aae0:	e014      	b.n	800ab0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f9d4 	bl	800ae90 <USBD_CtlSendStatus>
      break;
 800aae8:	e010      	b.n	800ab0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f9d0 	bl	800ae90 <USBD_CtlSendStatus>
      break;
 800aaf0:	e00c      	b.n	800ab0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f900 	bl	800acfa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aafa:	4b07      	ldr	r3, [pc, #28]	; (800ab18 <USBD_SetConfig+0x150>)
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7fe ff92 	bl	8009a2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab06:	2303      	movs	r3, #3
 800ab08:	73fb      	strb	r3, [r7, #15]
      break;
 800ab0a:	bf00      	nop
  }

  return ret;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000888 	.word	0x20000888

0800ab1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	88db      	ldrh	r3, [r3, #6]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d004      	beq.n	800ab38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f8e2 	bl	800acfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab36:	e023      	b.n	800ab80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	dc02      	bgt.n	800ab4a <USBD_GetConfig+0x2e>
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dc03      	bgt.n	800ab50 <USBD_GetConfig+0x34>
 800ab48:	e015      	b.n	800ab76 <USBD_GetConfig+0x5a>
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	d00b      	beq.n	800ab66 <USBD_GetConfig+0x4a>
 800ab4e:	e012      	b.n	800ab76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3308      	adds	r3, #8
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f93c 	bl	800addc <USBD_CtlSendData>
        break;
 800ab64:	e00c      	b.n	800ab80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f934 	bl	800addc <USBD_CtlSendData>
        break;
 800ab74:	e004      	b.n	800ab80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f8be 	bl	800acfa <USBD_CtlError>
        break;
 800ab7e:	bf00      	nop
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d81e      	bhi.n	800abde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	88db      	ldrh	r3, [r3, #6]
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d004      	beq.n	800abb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f8a5 	bl	800acfa <USBD_CtlError>
        break;
 800abb0:	e01a      	b.n	800abe8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d005      	beq.n	800abce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	f043 0202 	orr.w	r2, r3, #2
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	330c      	adds	r3, #12
 800abd2:	2202      	movs	r2, #2
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f900 	bl	800addc <USBD_CtlSendData>
      break;
 800abdc:	e004      	b.n	800abe8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 f88a 	bl	800acfa <USBD_CtlError>
      break;
 800abe6:	bf00      	nop
  }
}
 800abe8:	bf00      	nop
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	885b      	ldrh	r3, [r3, #2]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d107      	bne.n	800ac12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f940 	bl	800ae90 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ac10:	e013      	b.n	800ac3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	885b      	ldrh	r3, [r3, #2]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d10b      	bne.n	800ac32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	889b      	ldrh	r3, [r3, #4]
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f930 	bl	800ae90 <USBD_CtlSendStatus>
}
 800ac30:	e003      	b.n	800ac3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f860 	bl	800acfa <USBD_CtlError>
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	3b01      	subs	r3, #1
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d80b      	bhi.n	800ac72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	885b      	ldrh	r3, [r3, #2]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d10c      	bne.n	800ac7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f910 	bl	800ae90 <USBD_CtlSendStatus>
      }
      break;
 800ac70:	e004      	b.n	800ac7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f840 	bl	800acfa <USBD_CtlError>
      break;
 800ac7a:	e000      	b.n	800ac7e <USBD_ClrFeature+0x3c>
      break;
 800ac7c:	bf00      	nop
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	781a      	ldrb	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3301      	adds	r3, #1
 800acae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7ff fa41 	bl	800a138 <SWAPBYTE>
 800acb6:	4603      	mov	r3, r0
 800acb8:	461a      	mov	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3301      	adds	r3, #1
 800acc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fa34 	bl	800a138 <SWAPBYTE>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3301      	adds	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3301      	adds	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7ff fa27 	bl	800a138 <SWAPBYTE>
 800acea:	4603      	mov	r3, r0
 800acec:	461a      	mov	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	80da      	strh	r2, [r3, #6]
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad04:	2180      	movs	r1, #128	; 0x80
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f003 fc7e 	bl	800e608 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f003 fc7a 	bl	800e608 <USBD_LL_StallEP>
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d036      	beq.n	800ada0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad36:	6938      	ldr	r0, [r7, #16]
 800ad38:	f000 f836 	bl	800ada8 <USBD_GetLen>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	3301      	adds	r3, #1
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	4413      	add	r3, r2
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	7812      	ldrb	r2, [r2, #0]
 800ad54:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	4413      	add	r3, r2
 800ad62:	2203      	movs	r2, #3
 800ad64:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad6c:	e013      	b.n	800ad96 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	4413      	add	r3, r2
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	7812      	ldrb	r2, [r2, #0]
 800ad78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	613b      	str	r3, [r7, #16]
    idx++;
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
 800ad82:	3301      	adds	r3, #1
 800ad84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
 800ad92:	3301      	adds	r3, #1
 800ad94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1e7      	bne.n	800ad6e <USBD_GetString+0x52>
 800ad9e:	e000      	b.n	800ada2 <USBD_GetString+0x86>
    return;
 800ada0:	bf00      	nop
  }
}
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800adb8:	e005      	b.n	800adc6 <USBD_GetLen+0x1e>
  {
    len++;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	3301      	adds	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	3301      	adds	r3, #1
 800adc4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1f5      	bne.n	800adba <USBD_GetLen+0x12>
  }

  return len;
 800adce:	7bfb      	ldrb	r3, [r7, #15]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2202      	movs	r2, #2
 800adec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	2100      	movs	r1, #0
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f003 fc89 	bl	800e71a <USBD_LL_Transmit>

  return USBD_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	2100      	movs	r1, #0
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f003 fc78 	bl	800e71a <USBD_LL_Transmit>

  return USBD_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2203      	movs	r2, #3
 800ae44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f003 fc7c 	bl	800e75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	60f8      	str	r0, [r7, #12]
 800ae76:	60b9      	str	r1, [r7, #8]
 800ae78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	2100      	movs	r1, #0
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f003 fc6b 	bl	800e75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2204      	movs	r2, #4
 800ae9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aea0:	2300      	movs	r3, #0
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f003 fc37 	bl	800e71a <USBD_LL_Transmit>

  return USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2205      	movs	r2, #5
 800aec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aec6:	2300      	movs	r3, #0
 800aec8:	2200      	movs	r2, #0
 800aeca:	2100      	movs	r1, #0
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f003 fc45 	bl	800e75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	4613      	mov	r3, r2
 800aee8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aeea:	2301      	movs	r3, #1
 800aeec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aef2:	4b1f      	ldr	r3, [pc, #124]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800aef4:	7a5b      	ldrb	r3, [r3, #9]
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d131      	bne.n	800af60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aefc:	4b1c      	ldr	r3, [pc, #112]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800aefe:	7a5b      	ldrb	r3, [r3, #9]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	461a      	mov	r2, r3
 800af04:	4b1a      	ldr	r3, [pc, #104]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800af06:	2100      	movs	r1, #0
 800af08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af0a:	4b19      	ldr	r3, [pc, #100]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800af0c:	7a5b      	ldrb	r3, [r3, #9]
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	4a17      	ldr	r2, [pc, #92]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af1a:	4b15      	ldr	r3, [pc, #84]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800af1c:	7a5b      	ldrb	r3, [r3, #9]
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	461a      	mov	r2, r3
 800af22:	4b13      	ldr	r3, [pc, #76]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800af24:	4413      	add	r3, r2
 800af26:	79fa      	ldrb	r2, [r7, #7]
 800af28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af2a:	4b11      	ldr	r3, [pc, #68]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800af2c:	7a5b      	ldrb	r3, [r3, #9]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	b2d1      	uxtb	r1, r2
 800af34:	4a0e      	ldr	r2, [pc, #56]	; (800af70 <FATFS_LinkDriverEx+0x94>)
 800af36:	7251      	strb	r1, [r2, #9]
 800af38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af3a:	7dbb      	ldrb	r3, [r7, #22]
 800af3c:	3330      	adds	r3, #48	; 0x30
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	3301      	adds	r3, #1
 800af48:	223a      	movs	r2, #58	; 0x3a
 800af4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	3302      	adds	r3, #2
 800af50:	222f      	movs	r2, #47	; 0x2f
 800af52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	3303      	adds	r3, #3
 800af58:	2200      	movs	r2, #0
 800af5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
}
 800af62:	4618      	mov	r0, r3
 800af64:	371c      	adds	r7, #28
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	2000088c 	.word	0x2000088c

0800af74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800af7e:	2200      	movs	r2, #0
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff ffaa 	bl	800aedc <FATFS_LinkDriverEx>
 800af88:	4603      	mov	r3, r0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
	...

0800af94 <__NVIC_SetPriority>:
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	6039      	str	r1, [r7, #0]
 800af9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	db0a      	blt.n	800afbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	490c      	ldr	r1, [pc, #48]	; (800afe0 <__NVIC_SetPriority+0x4c>)
 800afae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afb2:	0112      	lsls	r2, r2, #4
 800afb4:	b2d2      	uxtb	r2, r2
 800afb6:	440b      	add	r3, r1
 800afb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800afbc:	e00a      	b.n	800afd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	4908      	ldr	r1, [pc, #32]	; (800afe4 <__NVIC_SetPriority+0x50>)
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	f003 030f 	and.w	r3, r3, #15
 800afca:	3b04      	subs	r3, #4
 800afcc:	0112      	lsls	r2, r2, #4
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	440b      	add	r3, r1
 800afd2:	761a      	strb	r2, [r3, #24]
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	e000e100 	.word	0xe000e100
 800afe4:	e000ed00 	.word	0xe000ed00

0800afe8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800afec:	4b05      	ldr	r3, [pc, #20]	; (800b004 <SysTick_Handler+0x1c>)
 800afee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aff0:	f001 feb2 	bl	800cd58 <xTaskGetSchedulerState>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d001      	beq.n	800affe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800affa:	f002 fc9d 	bl	800d938 <xPortSysTickHandler>
  }
}
 800affe:	bf00      	nop
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	e000e010 	.word	0xe000e010

0800b008 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b00c:	2100      	movs	r1, #0
 800b00e:	f06f 0004 	mvn.w	r0, #4
 800b012:	f7ff ffbf 	bl	800af94 <__NVIC_SetPriority>
#endif
}
 800b016:	bf00      	nop
 800b018:	bd80      	pop	{r7, pc}
	...

0800b01c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b022:	f3ef 8305 	mrs	r3, IPSR
 800b026:	603b      	str	r3, [r7, #0]
  return(result);
 800b028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b02e:	f06f 0305 	mvn.w	r3, #5
 800b032:	607b      	str	r3, [r7, #4]
 800b034:	e00c      	b.n	800b050 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b036:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <osKernelInitialize+0x44>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d105      	bne.n	800b04a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b03e:	4b08      	ldr	r3, [pc, #32]	; (800b060 <osKernelInitialize+0x44>)
 800b040:	2201      	movs	r2, #1
 800b042:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b044:	2300      	movs	r3, #0
 800b046:	607b      	str	r3, [r7, #4]
 800b048:	e002      	b.n	800b050 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b04a:	f04f 33ff 	mov.w	r3, #4294967295
 800b04e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b050:	687b      	ldr	r3, [r7, #4]
}
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	20000898 	.word	0x20000898

0800b064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b06a:	f3ef 8305 	mrs	r3, IPSR
 800b06e:	603b      	str	r3, [r7, #0]
  return(result);
 800b070:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b076:	f06f 0305 	mvn.w	r3, #5
 800b07a:	607b      	str	r3, [r7, #4]
 800b07c:	e010      	b.n	800b0a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b07e:	4b0b      	ldr	r3, [pc, #44]	; (800b0ac <osKernelStart+0x48>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d109      	bne.n	800b09a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b086:	f7ff ffbf 	bl	800b008 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b08a:	4b08      	ldr	r3, [pc, #32]	; (800b0ac <osKernelStart+0x48>)
 800b08c:	2202      	movs	r2, #2
 800b08e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b090:	f001 fa1a 	bl	800c4c8 <vTaskStartScheduler>
      stat = osOK;
 800b094:	2300      	movs	r3, #0
 800b096:	607b      	str	r3, [r7, #4]
 800b098:	e002      	b.n	800b0a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b09a:	f04f 33ff 	mov.w	r3, #4294967295
 800b09e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0a0:	687b      	ldr	r3, [r7, #4]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20000898 	.word	0x20000898

0800b0b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08e      	sub	sp, #56	; 0x38
 800b0b4:	af04      	add	r7, sp, #16
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0c0:	f3ef 8305 	mrs	r3, IPSR
 800b0c4:	617b      	str	r3, [r7, #20]
  return(result);
 800b0c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d17f      	bne.n	800b1cc <osThreadNew+0x11c>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d07c      	beq.n	800b1cc <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b0d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0d6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b0d8:	2318      	movs	r3, #24
 800b0da:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d045      	beq.n	800b178 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <osThreadNew+0x4a>
        name = attr->name;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d002      	beq.n	800b108 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d008      	beq.n	800b120 <osThreadNew+0x70>
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	2b38      	cmp	r3, #56	; 0x38
 800b112:	d805      	bhi.n	800b120 <osThreadNew+0x70>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <osThreadNew+0x74>
        return (NULL);
 800b120:	2300      	movs	r3, #0
 800b122:	e054      	b.n	800b1ce <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	089b      	lsrs	r3, r3, #2
 800b132:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00e      	beq.n	800b15a <osThreadNew+0xaa>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	2b6b      	cmp	r3, #107	; 0x6b
 800b142:	d90a      	bls.n	800b15a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d006      	beq.n	800b15a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <osThreadNew+0xaa>
        mem = 1;
 800b154:	2301      	movs	r3, #1
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	e010      	b.n	800b17c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10c      	bne.n	800b17c <osThreadNew+0xcc>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d108      	bne.n	800b17c <osThreadNew+0xcc>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d104      	bne.n	800b17c <osThreadNew+0xcc>
          mem = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	61bb      	str	r3, [r7, #24]
 800b176:	e001      	b.n	800b17c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b178:	2300      	movs	r3, #0
 800b17a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d110      	bne.n	800b1a4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b18a:	9202      	str	r2, [sp, #8]
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	6a3a      	ldr	r2, [r7, #32]
 800b196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 feb9 	bl	800bf10 <xTaskCreateStatic>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	613b      	str	r3, [r7, #16]
 800b1a2:	e013      	b.n	800b1cc <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d110      	bne.n	800b1cc <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	f107 0310 	add.w	r3, r7, #16
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 ff04 	bl	800bfca <xTaskCreate>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d001      	beq.n	800b1cc <osThreadNew+0x11c>
            hTask = NULL;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1cc:	693b      	ldr	r3, [r7, #16]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3728      	adds	r7, #40	; 0x28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1de:	f3ef 8305 	mrs	r3, IPSR
 800b1e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <osDelay+0x1c>
    stat = osErrorISR;
 800b1ea:	f06f 0305 	mvn.w	r3, #5
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	e007      	b.n	800b202 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 f829 	bl	800c254 <vTaskDelay>
    }
  }

  return (stat);
 800b202:	68fb      	ldr	r3, [r7, #12]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08a      	sub	sp, #40	; 0x28
 800b210:	af02      	add	r7, sp, #8
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b21c:	f3ef 8305 	mrs	r3, IPSR
 800b220:	613b      	str	r3, [r7, #16]
  return(result);
 800b222:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b224:	2b00      	cmp	r3, #0
 800b226:	d15f      	bne.n	800b2e8 <osMessageQueueNew+0xdc>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d05c      	beq.n	800b2e8 <osMessageQueueNew+0xdc>
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d059      	beq.n	800b2e8 <osMessageQueueNew+0xdc>
    mem = -1;
 800b234:	f04f 33ff 	mov.w	r3, #4294967295
 800b238:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d029      	beq.n	800b294 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d012      	beq.n	800b26e <osMessageQueueNew+0x62>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	2b4f      	cmp	r3, #79	; 0x4f
 800b24e:	d90e      	bls.n	800b26e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	695a      	ldr	r2, [r3, #20]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	68b9      	ldr	r1, [r7, #8]
 800b260:	fb01 f303 	mul.w	r3, r1, r3
 800b264:	429a      	cmp	r2, r3
 800b266:	d302      	bcc.n	800b26e <osMessageQueueNew+0x62>
        mem = 1;
 800b268:	2301      	movs	r3, #1
 800b26a:	61bb      	str	r3, [r7, #24]
 800b26c:	e014      	b.n	800b298 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d110      	bne.n	800b298 <osMessageQueueNew+0x8c>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10c      	bne.n	800b298 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b282:	2b00      	cmp	r3, #0
 800b284:	d108      	bne.n	800b298 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d104      	bne.n	800b298 <osMessageQueueNew+0x8c>
          mem = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	61bb      	str	r3, [r7, #24]
 800b292:	e001      	b.n	800b298 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d10b      	bne.n	800b2b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	691a      	ldr	r2, [r3, #16]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	9100      	str	r1, [sp, #0]
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f971 	bl	800b594 <xQueueGenericCreateStatic>
 800b2b2:	61f8      	str	r0, [r7, #28]
 800b2b4:	e008      	b.n	800b2c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d105      	bne.n	800b2c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b2bc:	2200      	movs	r2, #0
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 f9df 	bl	800b684 <xQueueGenericCreate>
 800b2c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00c      	beq.n	800b2e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <osMessageQueueNew+0xd0>
        name = attr->name;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	e001      	b.n	800b2e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b2e0:	6979      	ldr	r1, [r7, #20]
 800b2e2:	69f8      	ldr	r0, [r7, #28]
 800b2e4:	f000 fdb6 	bl	800be54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3720      	adds	r7, #32
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
	...

0800b2f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4a07      	ldr	r2, [pc, #28]	; (800b320 <vApplicationGetIdleTaskMemory+0x2c>)
 800b304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	4a06      	ldr	r2, [pc, #24]	; (800b324 <vApplicationGetIdleTaskMemory+0x30>)
 800b30a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	2000089c 	.word	0x2000089c
 800b324:	20000908 	.word	0x20000908

0800b328 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	4a07      	ldr	r2, [pc, #28]	; (800b354 <vApplicationGetTimerTaskMemory+0x2c>)
 800b338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	4a06      	ldr	r2, [pc, #24]	; (800b358 <vApplicationGetTimerTaskMemory+0x30>)
 800b33e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b346:	601a      	str	r2, [r3, #0]
}
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	20000d08 	.word	0x20000d08
 800b358:	20000d74 	.word	0x20000d74

0800b35c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f103 0208 	add.w	r2, r3, #8
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f04f 32ff 	mov.w	r2, #4294967295
 800b374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f103 0208 	add.w	r2, r3, #8
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f103 0208 	add.w	r2, r3, #8
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	689a      	ldr	r2, [r3, #8]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	1c5a      	adds	r2, r3, #1
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	601a      	str	r2, [r3, #0]
}
 800b3f2:	bf00      	nop
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3fe:	b480      	push	{r7}
 800b400:	b085      	sub	sp, #20
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b414:	d103      	bne.n	800b41e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	e00c      	b.n	800b438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3308      	adds	r3, #8
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e002      	b.n	800b42c <vListInsert+0x2e>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	429a      	cmp	r2, r3
 800b436:	d2f6      	bcs.n	800b426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	601a      	str	r2, [r3, #0]
}
 800b464:	bf00      	nop
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	6892      	ldr	r2, [r2, #8]
 800b486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	6852      	ldr	r2, [r2, #4]
 800b490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d103      	bne.n	800b4a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689a      	ldr	r2, [r3, #8]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	1e5a      	subs	r2, r3, #1
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4ee:	f002 f991 	bl	800d814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4fa:	68f9      	ldr	r1, [r7, #12]
 800b4fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4fe:	fb01 f303 	mul.w	r3, r1, r3
 800b502:	441a      	add	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51e:	3b01      	subs	r3, #1
 800b520:	68f9      	ldr	r1, [r7, #12]
 800b522:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b524:	fb01 f303 	mul.w	r3, r1, r3
 800b528:	441a      	add	r2, r3
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	22ff      	movs	r2, #255	; 0xff
 800b532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	22ff      	movs	r2, #255	; 0xff
 800b53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d114      	bne.n	800b56e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d01a      	beq.n	800b582 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3310      	adds	r3, #16
 800b550:	4618      	mov	r0, r3
 800b552:	f001 fa43 	bl	800c9dc <xTaskRemoveFromEventList>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d012      	beq.n	800b582 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b55c:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <xQueueGenericReset+0xcc>)
 800b55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	e009      	b.n	800b582 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3310      	adds	r3, #16
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fef2 	bl	800b35c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3324      	adds	r3, #36	; 0x24
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff feed 	bl	800b35c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b582:	f002 f977 	bl	800d874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b586:	2301      	movs	r3, #1
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	e000ed04 	.word	0xe000ed04

0800b594 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b594:	b580      	push	{r7, lr}
 800b596:	b08e      	sub	sp, #56	; 0x38
 800b598:	af02      	add	r7, sp, #8
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5ba:	bf00      	nop
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <xQueueGenericCreateStatic+0x52>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <xQueueGenericCreateStatic+0x56>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e000      	b.n	800b5ec <xQueueGenericCreateStatic+0x58>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10a      	bne.n	800b606 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	623b      	str	r3, [r7, #32]
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <xQueueGenericCreateStatic+0x7e>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <xQueueGenericCreateStatic+0x82>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <xQueueGenericCreateStatic+0x84>
 800b616:	2300      	movs	r3, #0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10a      	bne.n	800b632 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	61fb      	str	r3, [r7, #28]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b632:	2350      	movs	r3, #80	; 0x50
 800b634:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2b50      	cmp	r3, #80	; 0x50
 800b63a:	d00a      	beq.n	800b652 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	61bb      	str	r3, [r7, #24]
}
 800b64e:	bf00      	nop
 800b650:	e7fe      	b.n	800b650 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b652:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00d      	beq.n	800b67a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b666:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	4613      	mov	r3, r2
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	68b9      	ldr	r1, [r7, #8]
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f000 f83f 	bl	800b6f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3730      	adds	r7, #48	; 0x30
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b684:	b580      	push	{r7, lr}
 800b686:	b08a      	sub	sp, #40	; 0x28
 800b688:	af02      	add	r7, sp, #8
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10a      	bne.n	800b6ae <xQueueGenericCreate+0x2a>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	613b      	str	r3, [r7, #16]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	fb02 f303 	mul.w	r3, r2, r3
 800b6b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	3350      	adds	r3, #80	; 0x50
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f002 f9cb 	bl	800da58 <pvPortMalloc>
 800b6c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d011      	beq.n	800b6ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	3350      	adds	r3, #80	; 0x50
 800b6d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6dc:	79fa      	ldrb	r2, [r7, #7]
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	68b9      	ldr	r1, [r7, #8]
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f805 	bl	800b6f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3720      	adds	r7, #32
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d103      	bne.n	800b714 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	69ba      	ldr	r2, [r7, #24]
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	e002      	b.n	800b71a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b726:	2101      	movs	r1, #1
 800b728:	69b8      	ldr	r0, [r7, #24]
 800b72a:	f7ff fecb 	bl	800b4c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	78fa      	ldrb	r2, [r7, #3]
 800b732:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b736:	bf00      	nop
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
	...

0800b740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08e      	sub	sp, #56	; 0x38
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b74e:	2300      	movs	r3, #0
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10a      	bne.n	800b772 <xQueueGenericSend+0x32>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b76e:	bf00      	nop
 800b770:	e7fe      	b.n	800b770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d103      	bne.n	800b780 <xQueueGenericSend+0x40>
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <xQueueGenericSend+0x44>
 800b780:	2301      	movs	r3, #1
 800b782:	e000      	b.n	800b786 <xQueueGenericSend+0x46>
 800b784:	2300      	movs	r3, #0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <xQueueGenericSend+0x60>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b79c:	bf00      	nop
 800b79e:	e7fe      	b.n	800b79e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d103      	bne.n	800b7ae <xQueueGenericSend+0x6e>
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <xQueueGenericSend+0x72>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <xQueueGenericSend+0x74>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10a      	bne.n	800b7ce <xQueueGenericSend+0x8e>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	623b      	str	r3, [r7, #32]
}
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ce:	f001 fac3 	bl	800cd58 <xTaskGetSchedulerState>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d102      	bne.n	800b7de <xQueueGenericSend+0x9e>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <xQueueGenericSend+0xa2>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e000      	b.n	800b7e4 <xQueueGenericSend+0xa4>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <xQueueGenericSend+0xbe>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	61fb      	str	r3, [r7, #28]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7fe:	f002 f809 	bl	800d814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d302      	bcc.n	800b814 <xQueueGenericSend+0xd4>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d129      	bne.n	800b868 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	68b9      	ldr	r1, [r7, #8]
 800b818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b81a:	f000 fa0b 	bl	800bc34 <prvCopyDataToQueue>
 800b81e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b824:	2b00      	cmp	r3, #0
 800b826:	d010      	beq.n	800b84a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	3324      	adds	r3, #36	; 0x24
 800b82c:	4618      	mov	r0, r3
 800b82e:	f001 f8d5 	bl	800c9dc <xTaskRemoveFromEventList>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d013      	beq.n	800b860 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b838:	4b3f      	ldr	r3, [pc, #252]	; (800b938 <xQueueGenericSend+0x1f8>)
 800b83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	e00a      	b.n	800b860 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d007      	beq.n	800b860 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b850:	4b39      	ldr	r3, [pc, #228]	; (800b938 <xQueueGenericSend+0x1f8>)
 800b852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b856:	601a      	str	r2, [r3, #0]
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b860:	f002 f808 	bl	800d874 <vPortExitCritical>
				return pdPASS;
 800b864:	2301      	movs	r3, #1
 800b866:	e063      	b.n	800b930 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d103      	bne.n	800b876 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b86e:	f002 f801 	bl	800d874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b872:	2300      	movs	r3, #0
 800b874:	e05c      	b.n	800b930 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d106      	bne.n	800b88a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b87c:	f107 0314 	add.w	r3, r7, #20
 800b880:	4618      	mov	r0, r3
 800b882:	f001 f90f 	bl	800caa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b886:	2301      	movs	r3, #1
 800b888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b88a:	f001 fff3 	bl	800d874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b88e:	f000 fe81 	bl	800c594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b892:	f001 ffbf 	bl	800d814 <vPortEnterCritical>
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b89c:	b25b      	sxtb	r3, r3
 800b89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a2:	d103      	bne.n	800b8ac <xQueueGenericSend+0x16c>
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8b2:	b25b      	sxtb	r3, r3
 800b8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b8:	d103      	bne.n	800b8c2 <xQueueGenericSend+0x182>
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8c2:	f001 ffd7 	bl	800d874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8c6:	1d3a      	adds	r2, r7, #4
 800b8c8:	f107 0314 	add.w	r3, r7, #20
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f001 f8fe 	bl	800cad0 <xTaskCheckForTimeOut>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d124      	bne.n	800b924 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8dc:	f000 faa2 	bl	800be24 <prvIsQueueFull>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d018      	beq.n	800b918 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	3310      	adds	r3, #16
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f001 f824 	bl	800c93c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f6:	f000 fa2d 	bl	800bd54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8fa:	f000 fe59 	bl	800c5b0 <xTaskResumeAll>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	f47f af7c 	bne.w	800b7fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b906:	4b0c      	ldr	r3, [pc, #48]	; (800b938 <xQueueGenericSend+0x1f8>)
 800b908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	e772      	b.n	800b7fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b91a:	f000 fa1b 	bl	800bd54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b91e:	f000 fe47 	bl	800c5b0 <xTaskResumeAll>
 800b922:	e76c      	b.n	800b7fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b926:	f000 fa15 	bl	800bd54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b92a:	f000 fe41 	bl	800c5b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b92e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b930:	4618      	mov	r0, r3
 800b932:	3738      	adds	r7, #56	; 0x38
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b090      	sub	sp, #64	; 0x40
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
 800b948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10a      	bne.n	800b96a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d103      	bne.n	800b978 <xQueueGenericSendFromISR+0x3c>
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <xQueueGenericSendFromISR+0x40>
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <xQueueGenericSendFromISR+0x42>
 800b97c:	2300      	movs	r3, #0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d103      	bne.n	800b9a6 <xQueueGenericSendFromISR+0x6a>
 800b99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d101      	bne.n	800b9aa <xQueueGenericSendFromISR+0x6e>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <xQueueGenericSendFromISR+0x70>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10a      	bne.n	800b9c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	623b      	str	r3, [r7, #32]
}
 800b9c2:	bf00      	nop
 800b9c4:	e7fe      	b.n	800b9c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9c6:	f002 f807 	bl	800d9d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	61fa      	str	r2, [r7, #28]
 800b9e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d302      	bcc.n	800b9f8 <xQueueGenericSendFromISR+0xbc>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d12f      	bne.n	800ba58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba0e:	f000 f911 	bl	800bc34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1a:	d112      	bne.n	800ba42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d016      	beq.n	800ba52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba26:	3324      	adds	r3, #36	; 0x24
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 ffd7 	bl	800c9dc <xTaskRemoveFromEventList>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00e      	beq.n	800ba52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00b      	beq.n	800ba52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	e007      	b.n	800ba52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba46:	3301      	adds	r3, #1
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	b25a      	sxtb	r2, r3
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba52:	2301      	movs	r3, #1
 800ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba56:	e001      	b.n	800ba5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3740      	adds	r7, #64	; 0x40
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
	...

0800ba74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08c      	sub	sp, #48	; 0x30
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba80:	2300      	movs	r3, #0
 800ba82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10a      	bne.n	800baa4 <xQueueReceive+0x30>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	623b      	str	r3, [r7, #32]
}
 800baa0:	bf00      	nop
 800baa2:	e7fe      	b.n	800baa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d103      	bne.n	800bab2 <xQueueReceive+0x3e>
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d101      	bne.n	800bab6 <xQueueReceive+0x42>
 800bab2:	2301      	movs	r3, #1
 800bab4:	e000      	b.n	800bab8 <xQueueReceive+0x44>
 800bab6:	2300      	movs	r3, #0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <xQueueReceive+0x5e>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	61fb      	str	r3, [r7, #28]
}
 800bace:	bf00      	nop
 800bad0:	e7fe      	b.n	800bad0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bad2:	f001 f941 	bl	800cd58 <xTaskGetSchedulerState>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d102      	bne.n	800bae2 <xQueueReceive+0x6e>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <xQueueReceive+0x72>
 800bae2:	2301      	movs	r3, #1
 800bae4:	e000      	b.n	800bae8 <xQueueReceive+0x74>
 800bae6:	2300      	movs	r3, #0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10a      	bne.n	800bb02 <xQueueReceive+0x8e>
	__asm volatile
 800baec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf0:	f383 8811 	msr	BASEPRI, r3
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	61bb      	str	r3, [r7, #24]
}
 800bafe:	bf00      	nop
 800bb00:	e7fe      	b.n	800bb00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb02:	f001 fe87 	bl	800d814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d01f      	beq.n	800bb52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb12:	68b9      	ldr	r1, [r7, #8]
 800bb14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb16:	f000 f8f7 	bl	800bd08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	1e5a      	subs	r2, r3, #1
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00f      	beq.n	800bb4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	3310      	adds	r3, #16
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 ff54 	bl	800c9dc <xTaskRemoveFromEventList>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d007      	beq.n	800bb4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb3a:	4b3d      	ldr	r3, [pc, #244]	; (800bc30 <xQueueReceive+0x1bc>)
 800bb3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb4a:	f001 fe93 	bl	800d874 <vPortExitCritical>
				return pdPASS;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e069      	b.n	800bc26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d103      	bne.n	800bb60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb58:	f001 fe8c 	bl	800d874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	e062      	b.n	800bc26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d106      	bne.n	800bb74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb66:	f107 0310 	add.w	r3, r7, #16
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 ff9a 	bl	800caa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb70:	2301      	movs	r3, #1
 800bb72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb74:	f001 fe7e 	bl	800d874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb78:	f000 fd0c 	bl	800c594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb7c:	f001 fe4a 	bl	800d814 <vPortEnterCritical>
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb86:	b25b      	sxtb	r3, r3
 800bb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8c:	d103      	bne.n	800bb96 <xQueueReceive+0x122>
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb9c:	b25b      	sxtb	r3, r3
 800bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba2:	d103      	bne.n	800bbac <xQueueReceive+0x138>
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbac:	f001 fe62 	bl	800d874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbb0:	1d3a      	adds	r2, r7, #4
 800bbb2:	f107 0310 	add.w	r3, r7, #16
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 ff89 	bl	800cad0 <xTaskCheckForTimeOut>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d123      	bne.n	800bc0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc6:	f000 f917 	bl	800bdf8 <prvIsQueueEmpty>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d017      	beq.n	800bc00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	3324      	adds	r3, #36	; 0x24
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 feaf 	bl	800c93c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbe0:	f000 f8b8 	bl	800bd54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbe4:	f000 fce4 	bl	800c5b0 <xTaskResumeAll>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d189      	bne.n	800bb02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bbee:	4b10      	ldr	r3, [pc, #64]	; (800bc30 <xQueueReceive+0x1bc>)
 800bbf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	e780      	b.n	800bb02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc02:	f000 f8a7 	bl	800bd54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc06:	f000 fcd3 	bl	800c5b0 <xTaskResumeAll>
 800bc0a:	e77a      	b.n	800bb02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0e:	f000 f8a1 	bl	800bd54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc12:	f000 fccd 	bl	800c5b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc18:	f000 f8ee 	bl	800bdf8 <prvIsQueueEmpty>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f43f af6f 	beq.w	800bb02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3730      	adds	r7, #48	; 0x30
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	e000ed04 	.word	0xe000ed04

0800bc34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc40:	2300      	movs	r3, #0
 800bc42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10d      	bne.n	800bc6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d14d      	bne.n	800bcf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f001 f898 	bl	800cd94 <xTaskPriorityDisinherit>
 800bc64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	609a      	str	r2, [r3, #8]
 800bc6c:	e043      	b.n	800bcf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d119      	bne.n	800bca8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6858      	ldr	r0, [r3, #4]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	68b9      	ldr	r1, [r7, #8]
 800bc80:	f002 fe1e 	bl	800e8c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8c:	441a      	add	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d32b      	bcc.n	800bcf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	605a      	str	r2, [r3, #4]
 800bca6:	e026      	b.n	800bcf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	68d8      	ldr	r0, [r3, #12]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	68b9      	ldr	r1, [r7, #8]
 800bcb4:	f002 fe04 	bl	800e8c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	68da      	ldr	r2, [r3, #12]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc0:	425b      	negs	r3, r3
 800bcc2:	441a      	add	r2, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	68da      	ldr	r2, [r3, #12]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d207      	bcs.n	800bce4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	689a      	ldr	r2, [r3, #8]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcdc:	425b      	negs	r3, r3
 800bcde:	441a      	add	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d105      	bne.n	800bcf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bcfe:	697b      	ldr	r3, [r7, #20]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d018      	beq.n	800bd4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68da      	ldr	r2, [r3, #12]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd22:	441a      	add	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	68da      	ldr	r2, [r3, #12]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d303      	bcc.n	800bd3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	68d9      	ldr	r1, [r3, #12]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd44:	461a      	mov	r2, r3
 800bd46:	6838      	ldr	r0, [r7, #0]
 800bd48:	f002 fdba 	bl	800e8c0 <memcpy>
	}
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd5c:	f001 fd5a 	bl	800d814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd68:	e011      	b.n	800bd8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d012      	beq.n	800bd98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	3324      	adds	r3, #36	; 0x24
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 fe30 	bl	800c9dc <xTaskRemoveFromEventList>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd82:	f000 ff07 	bl	800cb94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dce9      	bgt.n	800bd6a <prvUnlockQueue+0x16>
 800bd96:	e000      	b.n	800bd9a <prvUnlockQueue+0x46>
					break;
 800bd98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	22ff      	movs	r2, #255	; 0xff
 800bd9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bda2:	f001 fd67 	bl	800d874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bda6:	f001 fd35 	bl	800d814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdb2:	e011      	b.n	800bdd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d012      	beq.n	800bde2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3310      	adds	r3, #16
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f000 fe0b 	bl	800c9dc <xTaskRemoveFromEventList>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bdcc:	f000 fee2 	bl	800cb94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bdd0:	7bbb      	ldrb	r3, [r7, #14]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dce9      	bgt.n	800bdb4 <prvUnlockQueue+0x60>
 800bde0:	e000      	b.n	800bde4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bde2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	22ff      	movs	r2, #255	; 0xff
 800bde8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bdec:	f001 fd42 	bl	800d874 <vPortExitCritical>
}
 800bdf0:	bf00      	nop
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be00:	f001 fd08 	bl	800d814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be0c:	2301      	movs	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]
 800be10:	e001      	b.n	800be16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be12:	2300      	movs	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be16:	f001 fd2d 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800be1a:	68fb      	ldr	r3, [r7, #12]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be2c:	f001 fcf2 	bl	800d814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be38:	429a      	cmp	r2, r3
 800be3a:	d102      	bne.n	800be42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be3c:	2301      	movs	r3, #1
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	e001      	b.n	800be46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be46:	f001 fd15 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800be4a:	68fb      	ldr	r3, [r7, #12]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be5e:	2300      	movs	r3, #0
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	e014      	b.n	800be8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800be64:	4a0f      	ldr	r2, [pc, #60]	; (800bea4 <vQueueAddToRegistry+0x50>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10b      	bne.n	800be88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800be70:	490c      	ldr	r1, [pc, #48]	; (800bea4 <vQueueAddToRegistry+0x50>)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800be7a:	4a0a      	ldr	r2, [pc, #40]	; (800bea4 <vQueueAddToRegistry+0x50>)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	4413      	add	r3, r2
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800be86:	e006      	b.n	800be96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	3301      	adds	r3, #1
 800be8c:	60fb      	str	r3, [r7, #12]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b07      	cmp	r3, #7
 800be92:	d9e7      	bls.n	800be64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be94:	bf00      	nop
 800be96:	bf00      	nop
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	20001574 	.word	0x20001574

0800bea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800beb8:	f001 fcac 	bl	800d814 <vPortEnterCritical>
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bec2:	b25b      	sxtb	r3, r3
 800bec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec8:	d103      	bne.n	800bed2 <vQueueWaitForMessageRestricted+0x2a>
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bed8:	b25b      	sxtb	r3, r3
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bede:	d103      	bne.n	800bee8 <vQueueWaitForMessageRestricted+0x40>
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bee8:	f001 fcc4 	bl	800d874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d106      	bne.n	800bf02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	3324      	adds	r3, #36	; 0x24
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	68b9      	ldr	r1, [r7, #8]
 800befc:	4618      	mov	r0, r3
 800befe:	f000 fd41 	bl	800c984 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf02:	6978      	ldr	r0, [r7, #20]
 800bf04:	f7ff ff26 	bl	800bd54 <prvUnlockQueue>
	}
 800bf08:	bf00      	nop
 800bf0a:	3718      	adds	r7, #24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08e      	sub	sp, #56	; 0x38
 800bf14:	af04      	add	r7, sp, #16
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10a      	bne.n	800bf3a <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	623b      	str	r3, [r7, #32]
}
 800bf36:	bf00      	nop
 800bf38:	e7fe      	b.n	800bf38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10a      	bne.n	800bf56 <xTaskCreateStatic+0x46>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	61fb      	str	r3, [r7, #28]
}
 800bf52:	bf00      	nop
 800bf54:	e7fe      	b.n	800bf54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf56:	236c      	movs	r3, #108	; 0x6c
 800bf58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	2b6c      	cmp	r3, #108	; 0x6c
 800bf5e:	d00a      	beq.n	800bf76 <xTaskCreateStatic+0x66>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	61bb      	str	r3, [r7, #24]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d01e      	beq.n	800bfbc <xTaskCreateStatic+0xac>
 800bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d01b      	beq.n	800bfbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf90:	2202      	movs	r2, #2
 800bf92:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf96:	2300      	movs	r3, #0
 800bf98:	9303      	str	r3, [sp, #12]
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9c:	9302      	str	r3, [sp, #8]
 800bf9e:	f107 0314 	add.w	r3, r7, #20
 800bfa2:	9301      	str	r3, [sp, #4]
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	68b9      	ldr	r1, [r7, #8]
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f000 f850 	bl	800c054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfb6:	f000 f8dd 	bl	800c174 <prvAddNewTaskToReadyList>
 800bfba:	e001      	b.n	800bfc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bfc0:	697b      	ldr	r3, [r7, #20]
	}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3728      	adds	r7, #40	; 0x28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b08c      	sub	sp, #48	; 0x30
 800bfce:	af04      	add	r7, sp, #16
 800bfd0:	60f8      	str	r0, [r7, #12]
 800bfd2:	60b9      	str	r1, [r7, #8]
 800bfd4:	603b      	str	r3, [r7, #0]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bfda:	88fb      	ldrh	r3, [r7, #6]
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f001 fd3a 	bl	800da58 <pvPortMalloc>
 800bfe4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00e      	beq.n	800c00a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bfec:	206c      	movs	r0, #108	; 0x6c
 800bfee:	f001 fd33 	bl	800da58 <pvPortMalloc>
 800bff2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d003      	beq.n	800c002 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	631a      	str	r2, [r3, #48]	; 0x30
 800c000:	e005      	b.n	800c00e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c002:	6978      	ldr	r0, [r7, #20]
 800c004:	f001 fdf4 	bl	800dbf0 <vPortFree>
 800c008:	e001      	b.n	800c00e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c00a:	2300      	movs	r3, #0
 800c00c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d017      	beq.n	800c044 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	2200      	movs	r2, #0
 800c018:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c01c:	88fa      	ldrh	r2, [r7, #6]
 800c01e:	2300      	movs	r3, #0
 800c020:	9303      	str	r3, [sp, #12]
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	9302      	str	r3, [sp, #8]
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	68b9      	ldr	r1, [r7, #8]
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f000 f80e 	bl	800c054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c038:	69f8      	ldr	r0, [r7, #28]
 800c03a:	f000 f89b 	bl	800c174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c03e:	2301      	movs	r3, #1
 800c040:	61bb      	str	r3, [r7, #24]
 800c042:	e002      	b.n	800c04a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c044:	f04f 33ff 	mov.w	r3, #4294967295
 800c048:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c04a:	69bb      	ldr	r3, [r7, #24]
	}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	461a      	mov	r2, r3
 800c06c:	21a5      	movs	r1, #165	; 0xa5
 800c06e:	f002 fc35 	bl	800e8dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c07c:	3b01      	subs	r3, #1
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	f023 0307 	bic.w	r3, r3, #7
 800c08a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	f003 0307 	and.w	r3, r3, #7
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00a      	beq.n	800c0ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	617b      	str	r3, [r7, #20]
}
 800c0a8:	bf00      	nop
 800c0aa:	e7fe      	b.n	800c0aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d01f      	beq.n	800c0f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	61fb      	str	r3, [r7, #28]
 800c0b6:	e012      	b.n	800c0de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	4413      	add	r3, r2
 800c0be:	7819      	ldrb	r1, [r3, #0]
 800c0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	3334      	adds	r3, #52	; 0x34
 800c0c8:	460a      	mov	r2, r1
 800c0ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d006      	beq.n	800c0e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	61fb      	str	r3, [r7, #28]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	2b1d      	cmp	r3, #29
 800c0e2:	d9e9      	bls.n	800c0b8 <prvInitialiseNewTask+0x64>
 800c0e4:	e000      	b.n	800c0e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c0e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800c0f0:	e003      	b.n	800c0fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	2b37      	cmp	r3, #55	; 0x37
 800c0fe:	d901      	bls.n	800c104 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c100:	2337      	movs	r3, #55	; 0x37
 800c102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c10e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	2200      	movs	r2, #0
 800c114:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	3304      	adds	r3, #4
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7ff f93e 	bl	800b39c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	3318      	adds	r3, #24
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff f939 	bl	800b39c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c12e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	2200      	movs	r2, #0
 800c144:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	68f9      	ldr	r1, [r7, #12]
 800c152:	69b8      	ldr	r0, [r7, #24]
 800c154:	f001 fa2e 	bl	800d5b4 <pxPortInitialiseStack>
 800c158:	4602      	mov	r2, r0
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c16a:	bf00      	nop
 800c16c:	3720      	adds	r7, #32
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c17c:	f001 fb4a 	bl	800d814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c180:	4b2d      	ldr	r3, [pc, #180]	; (800c238 <prvAddNewTaskToReadyList+0xc4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3301      	adds	r3, #1
 800c186:	4a2c      	ldr	r2, [pc, #176]	; (800c238 <prvAddNewTaskToReadyList+0xc4>)
 800c188:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c18a:	4b2c      	ldr	r3, [pc, #176]	; (800c23c <prvAddNewTaskToReadyList+0xc8>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d109      	bne.n	800c1a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c192:	4a2a      	ldr	r2, [pc, #168]	; (800c23c <prvAddNewTaskToReadyList+0xc8>)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c198:	4b27      	ldr	r3, [pc, #156]	; (800c238 <prvAddNewTaskToReadyList+0xc4>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d110      	bne.n	800c1c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1a0:	f000 fd1c 	bl	800cbdc <prvInitialiseTaskLists>
 800c1a4:	e00d      	b.n	800c1c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1a6:	4b26      	ldr	r3, [pc, #152]	; (800c240 <prvAddNewTaskToReadyList+0xcc>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d109      	bne.n	800c1c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1ae:	4b23      	ldr	r3, [pc, #140]	; (800c23c <prvAddNewTaskToReadyList+0xc8>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d802      	bhi.n	800c1c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c1bc:	4a1f      	ldr	r2, [pc, #124]	; (800c23c <prvAddNewTaskToReadyList+0xc8>)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c1c2:	4b20      	ldr	r3, [pc, #128]	; (800c244 <prvAddNewTaskToReadyList+0xd0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	4a1e      	ldr	r2, [pc, #120]	; (800c244 <prvAddNewTaskToReadyList+0xd0>)
 800c1ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c1cc:	4b1d      	ldr	r3, [pc, #116]	; (800c244 <prvAddNewTaskToReadyList+0xd0>)
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d8:	4b1b      	ldr	r3, [pc, #108]	; (800c248 <prvAddNewTaskToReadyList+0xd4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d903      	bls.n	800c1e8 <prvAddNewTaskToReadyList+0x74>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	4a18      	ldr	r2, [pc, #96]	; (800c248 <prvAddNewTaskToReadyList+0xd4>)
 800c1e6:	6013      	str	r3, [r2, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4a15      	ldr	r2, [pc, #84]	; (800c24c <prvAddNewTaskToReadyList+0xd8>)
 800c1f6:	441a      	add	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	f7ff f8d9 	bl	800b3b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c204:	f001 fb36 	bl	800d874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c208:	4b0d      	ldr	r3, [pc, #52]	; (800c240 <prvAddNewTaskToReadyList+0xcc>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00e      	beq.n	800c22e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c210:	4b0a      	ldr	r3, [pc, #40]	; (800c23c <prvAddNewTaskToReadyList+0xc8>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d207      	bcs.n	800c22e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c21e:	4b0c      	ldr	r3, [pc, #48]	; (800c250 <prvAddNewTaskToReadyList+0xdc>)
 800c220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c224:	601a      	str	r2, [r3, #0]
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c22e:	bf00      	nop
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	20001a88 	.word	0x20001a88
 800c23c:	200015b4 	.word	0x200015b4
 800c240:	20001a94 	.word	0x20001a94
 800c244:	20001aa4 	.word	0x20001aa4
 800c248:	20001a90 	.word	0x20001a90
 800c24c:	200015b8 	.word	0x200015b8
 800c250:	e000ed04 	.word	0xe000ed04

0800c254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c25c:	2300      	movs	r3, #0
 800c25e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d017      	beq.n	800c296 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c266:	4b13      	ldr	r3, [pc, #76]	; (800c2b4 <vTaskDelay+0x60>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00a      	beq.n	800c284 <vTaskDelay+0x30>
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	60bb      	str	r3, [r7, #8]
}
 800c280:	bf00      	nop
 800c282:	e7fe      	b.n	800c282 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c284:	f000 f986 	bl	800c594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c288:	2100      	movs	r1, #0
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fdf0 	bl	800ce70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c290:	f000 f98e 	bl	800c5b0 <xTaskResumeAll>
 800c294:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d107      	bne.n	800c2ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c29c:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <vTaskDelay+0x64>)
 800c29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2ac:	bf00      	nop
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20001ab0 	.word	0x20001ab0
 800c2b8:	e000ed04 	.word	0xe000ed04

0800c2bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c2c4:	f001 faa6 	bl	800d814 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d102      	bne.n	800c2d4 <vTaskSuspend+0x18>
 800c2ce:	4b30      	ldr	r3, [pc, #192]	; (800c390 <vTaskSuspend+0xd4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	e000      	b.n	800c2d6 <vTaskSuspend+0x1a>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	3304      	adds	r3, #4
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff f8c7 	bl	800b470 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d004      	beq.n	800c2f4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3318      	adds	r3, #24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff f8be 	bl	800b470 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4826      	ldr	r0, [pc, #152]	; (800c394 <vTaskSuspend+0xd8>)
 800c2fc:	f7ff f85b 	bl	800b3b6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d103      	bne.n	800c314 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c314:	f001 faae 	bl	800d874 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c318:	4b1f      	ldr	r3, [pc, #124]	; (800c398 <vTaskSuspend+0xdc>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c320:	f001 fa78 	bl	800d814 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c324:	f000 fcf8 	bl	800cd18 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c328:	f001 faa4 	bl	800d874 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c32c:	4b18      	ldr	r3, [pc, #96]	; (800c390 <vTaskSuspend+0xd4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	429a      	cmp	r2, r3
 800c334:	d127      	bne.n	800c386 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c336:	4b18      	ldr	r3, [pc, #96]	; (800c398 <vTaskSuspend+0xdc>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d017      	beq.n	800c36e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c33e:	4b17      	ldr	r3, [pc, #92]	; (800c39c <vTaskSuspend+0xe0>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00a      	beq.n	800c35c <vTaskSuspend+0xa0>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	60bb      	str	r3, [r7, #8]
}
 800c358:	bf00      	nop
 800c35a:	e7fe      	b.n	800c35a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c35c:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <vTaskSuspend+0xe4>)
 800c35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c36c:	e00b      	b.n	800c386 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c36e:	4b09      	ldr	r3, [pc, #36]	; (800c394 <vTaskSuspend+0xd8>)
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	4b0c      	ldr	r3, [pc, #48]	; (800c3a4 <vTaskSuspend+0xe8>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d103      	bne.n	800c382 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <vTaskSuspend+0xd4>)
 800c37c:	2200      	movs	r2, #0
 800c37e:	601a      	str	r2, [r3, #0]
	}
 800c380:	e001      	b.n	800c386 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c382:	f000 fa7d 	bl	800c880 <vTaskSwitchContext>
	}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	200015b4 	.word	0x200015b4
 800c394:	20001a74 	.word	0x20001a74
 800c398:	20001a94 	.word	0x20001a94
 800c39c:	20001ab0 	.word	0x20001ab0
 800c3a0:	e000ed04 	.word	0xe000ed04
 800c3a4:	20001a88 	.word	0x20001a88

0800c3a8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10a      	bne.n	800c3d4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	60fb      	str	r3, [r7, #12]
}
 800c3d0:	bf00      	nop
 800c3d2:	e7fe      	b.n	800c3d2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	4a0a      	ldr	r2, [pc, #40]	; (800c404 <prvTaskIsTaskSuspended+0x5c>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d10a      	bne.n	800c3f4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e2:	4a09      	ldr	r2, [pc, #36]	; (800c408 <prvTaskIsTaskSuspended+0x60>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d005      	beq.n	800c3f4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d101      	bne.n	800c3f4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3f4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	371c      	adds	r7, #28
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	20001a74 	.word	0x20001a74
 800c408:	20001a48 	.word	0x20001a48

0800c40c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10a      	bne.n	800c434 <vTaskResume+0x28>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	60bb      	str	r3, [r7, #8]
}
 800c430:	bf00      	nop
 800c432:	e7fe      	b.n	800c432 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c434:	4b20      	ldr	r3, [pc, #128]	; (800c4b8 <vTaskResume+0xac>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d038      	beq.n	800c4b0 <vTaskResume+0xa4>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d035      	beq.n	800c4b0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c444:	f001 f9e6 	bl	800d814 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f7ff ffad 	bl	800c3a8 <prvTaskIsTaskSuspended>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d02b      	beq.n	800c4ac <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3304      	adds	r3, #4
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff f809 	bl	800b470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c462:	4b16      	ldr	r3, [pc, #88]	; (800c4bc <vTaskResume+0xb0>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d903      	bls.n	800c472 <vTaskResume+0x66>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46e:	4a13      	ldr	r2, [pc, #76]	; (800c4bc <vTaskResume+0xb0>)
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4a10      	ldr	r2, [pc, #64]	; (800c4c0 <vTaskResume+0xb4>)
 800c480:	441a      	add	r2, r3
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3304      	adds	r3, #4
 800c486:	4619      	mov	r1, r3
 800c488:	4610      	mov	r0, r2
 800c48a:	f7fe ff94 	bl	800b3b6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <vTaskResume+0xac>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	429a      	cmp	r2, r3
 800c49a:	d307      	bcc.n	800c4ac <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c49c:	4b09      	ldr	r3, [pc, #36]	; (800c4c4 <vTaskResume+0xb8>)
 800c49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a2:	601a      	str	r2, [r3, #0]
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c4ac:	f001 f9e2 	bl	800d874 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4b0:	bf00      	nop
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	200015b4 	.word	0x200015b4
 800c4bc:	20001a90 	.word	0x20001a90
 800c4c0:	200015b8 	.word	0x200015b8
 800c4c4:	e000ed04 	.word	0xe000ed04

0800c4c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b08a      	sub	sp, #40	; 0x28
 800c4cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4d6:	463a      	mov	r2, r7
 800c4d8:	1d39      	adds	r1, r7, #4
 800c4da:	f107 0308 	add.w	r3, r7, #8
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe ff08 	bl	800b2f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	9202      	str	r2, [sp, #8]
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	460a      	mov	r2, r1
 800c4f6:	4921      	ldr	r1, [pc, #132]	; (800c57c <vTaskStartScheduler+0xb4>)
 800c4f8:	4821      	ldr	r0, [pc, #132]	; (800c580 <vTaskStartScheduler+0xb8>)
 800c4fa:	f7ff fd09 	bl	800bf10 <xTaskCreateStatic>
 800c4fe:	4603      	mov	r3, r0
 800c500:	4a20      	ldr	r2, [pc, #128]	; (800c584 <vTaskStartScheduler+0xbc>)
 800c502:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c504:	4b1f      	ldr	r3, [pc, #124]	; (800c584 <vTaskStartScheduler+0xbc>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d002      	beq.n	800c512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c50c:	2301      	movs	r3, #1
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e001      	b.n	800c516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c512:	2300      	movs	r3, #0
 800c514:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d102      	bne.n	800c522 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c51c:	f000 fcfc 	bl	800cf18 <xTimerCreateTimerTask>
 800c520:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d116      	bne.n	800c556 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	613b      	str	r3, [r7, #16]
}
 800c53a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c53c:	4b12      	ldr	r3, [pc, #72]	; (800c588 <vTaskStartScheduler+0xc0>)
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295
 800c542:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c544:	4b11      	ldr	r3, [pc, #68]	; (800c58c <vTaskStartScheduler+0xc4>)
 800c546:	2201      	movs	r2, #1
 800c548:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c54a:	4b11      	ldr	r3, [pc, #68]	; (800c590 <vTaskStartScheduler+0xc8>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c550:	f001 f8be 	bl	800d6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c554:	e00e      	b.n	800c574 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55c:	d10a      	bne.n	800c574 <vTaskStartScheduler+0xac>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	60fb      	str	r3, [r7, #12]
}
 800c570:	bf00      	nop
 800c572:	e7fe      	b.n	800c572 <vTaskStartScheduler+0xaa>
}
 800c574:	bf00      	nop
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	0800f3a0 	.word	0x0800f3a0
 800c580:	0800cbad 	.word	0x0800cbad
 800c584:	20001aac 	.word	0x20001aac
 800c588:	20001aa8 	.word	0x20001aa8
 800c58c:	20001a94 	.word	0x20001a94
 800c590:	20001a8c 	.word	0x20001a8c

0800c594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c594:	b480      	push	{r7}
 800c596:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c598:	4b04      	ldr	r3, [pc, #16]	; (800c5ac <vTaskSuspendAll+0x18>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	4a03      	ldr	r2, [pc, #12]	; (800c5ac <vTaskSuspendAll+0x18>)
 800c5a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c5a2:	bf00      	nop
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	20001ab0 	.word	0x20001ab0

0800c5b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5be:	4b42      	ldr	r3, [pc, #264]	; (800c6c8 <xTaskResumeAll+0x118>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10a      	bne.n	800c5dc <xTaskResumeAll+0x2c>
	__asm volatile
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	603b      	str	r3, [r7, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	e7fe      	b.n	800c5da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5dc:	f001 f91a 	bl	800d814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5e0:	4b39      	ldr	r3, [pc, #228]	; (800c6c8 <xTaskResumeAll+0x118>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	4a38      	ldr	r2, [pc, #224]	; (800c6c8 <xTaskResumeAll+0x118>)
 800c5e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5ea:	4b37      	ldr	r3, [pc, #220]	; (800c6c8 <xTaskResumeAll+0x118>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d162      	bne.n	800c6b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5f2:	4b36      	ldr	r3, [pc, #216]	; (800c6cc <xTaskResumeAll+0x11c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d05e      	beq.n	800c6b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5fa:	e02f      	b.n	800c65c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5fc:	4b34      	ldr	r3, [pc, #208]	; (800c6d0 <xTaskResumeAll+0x120>)
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	3318      	adds	r3, #24
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fe ff31 	bl	800b470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3304      	adds	r3, #4
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe ff2c 	bl	800b470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c61c:	4b2d      	ldr	r3, [pc, #180]	; (800c6d4 <xTaskResumeAll+0x124>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d903      	bls.n	800c62c <xTaskResumeAll+0x7c>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c628:	4a2a      	ldr	r2, [pc, #168]	; (800c6d4 <xTaskResumeAll+0x124>)
 800c62a:	6013      	str	r3, [r2, #0]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c630:	4613      	mov	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4a27      	ldr	r2, [pc, #156]	; (800c6d8 <xTaskResumeAll+0x128>)
 800c63a:	441a      	add	r2, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	3304      	adds	r3, #4
 800c640:	4619      	mov	r1, r3
 800c642:	4610      	mov	r0, r2
 800c644:	f7fe feb7 	bl	800b3b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64c:	4b23      	ldr	r3, [pc, #140]	; (800c6dc <xTaskResumeAll+0x12c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c652:	429a      	cmp	r2, r3
 800c654:	d302      	bcc.n	800c65c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c656:	4b22      	ldr	r3, [pc, #136]	; (800c6e0 <xTaskResumeAll+0x130>)
 800c658:	2201      	movs	r2, #1
 800c65a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c65c:	4b1c      	ldr	r3, [pc, #112]	; (800c6d0 <xTaskResumeAll+0x120>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1cb      	bne.n	800c5fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c66a:	f000 fb55 	bl	800cd18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c66e:	4b1d      	ldr	r3, [pc, #116]	; (800c6e4 <xTaskResumeAll+0x134>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d010      	beq.n	800c69c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c67a:	f000 f847 	bl	800c70c <xTaskIncrementTick>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d002      	beq.n	800c68a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c684:	4b16      	ldr	r3, [pc, #88]	; (800c6e0 <xTaskResumeAll+0x130>)
 800c686:	2201      	movs	r2, #1
 800c688:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1f1      	bne.n	800c67a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c696:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <xTaskResumeAll+0x134>)
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c69c:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <xTaskResumeAll+0x130>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d009      	beq.n	800c6b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6a8:	4b0f      	ldr	r3, [pc, #60]	; (800c6e8 <xTaskResumeAll+0x138>)
 800c6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6b8:	f001 f8dc 	bl	800d874 <vPortExitCritical>

	return xAlreadyYielded;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20001ab0 	.word	0x20001ab0
 800c6cc:	20001a88 	.word	0x20001a88
 800c6d0:	20001a48 	.word	0x20001a48
 800c6d4:	20001a90 	.word	0x20001a90
 800c6d8:	200015b8 	.word	0x200015b8
 800c6dc:	200015b4 	.word	0x200015b4
 800c6e0:	20001a9c 	.word	0x20001a9c
 800c6e4:	20001a98 	.word	0x20001a98
 800c6e8:	e000ed04 	.word	0xe000ed04

0800c6ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c6f2:	4b05      	ldr	r3, [pc, #20]	; (800c708 <xTaskGetTickCount+0x1c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c6f8:	687b      	ldr	r3, [r7, #4]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	20001a8c 	.word	0x20001a8c

0800c70c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c712:	2300      	movs	r3, #0
 800c714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c716:	4b4f      	ldr	r3, [pc, #316]	; (800c854 <xTaskIncrementTick+0x148>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f040 808f 	bne.w	800c83e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c720:	4b4d      	ldr	r3, [pc, #308]	; (800c858 <xTaskIncrementTick+0x14c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3301      	adds	r3, #1
 800c726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c728:	4a4b      	ldr	r2, [pc, #300]	; (800c858 <xTaskIncrementTick+0x14c>)
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d120      	bne.n	800c776 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c734:	4b49      	ldr	r3, [pc, #292]	; (800c85c <xTaskIncrementTick+0x150>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00a      	beq.n	800c754 <xTaskIncrementTick+0x48>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	603b      	str	r3, [r7, #0]
}
 800c750:	bf00      	nop
 800c752:	e7fe      	b.n	800c752 <xTaskIncrementTick+0x46>
 800c754:	4b41      	ldr	r3, [pc, #260]	; (800c85c <xTaskIncrementTick+0x150>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60fb      	str	r3, [r7, #12]
 800c75a:	4b41      	ldr	r3, [pc, #260]	; (800c860 <xTaskIncrementTick+0x154>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a3f      	ldr	r2, [pc, #252]	; (800c85c <xTaskIncrementTick+0x150>)
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	4a3f      	ldr	r2, [pc, #252]	; (800c860 <xTaskIncrementTick+0x154>)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	4b3e      	ldr	r3, [pc, #248]	; (800c864 <xTaskIncrementTick+0x158>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3301      	adds	r3, #1
 800c76e:	4a3d      	ldr	r2, [pc, #244]	; (800c864 <xTaskIncrementTick+0x158>)
 800c770:	6013      	str	r3, [r2, #0]
 800c772:	f000 fad1 	bl	800cd18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c776:	4b3c      	ldr	r3, [pc, #240]	; (800c868 <xTaskIncrementTick+0x15c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d349      	bcc.n	800c814 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c780:	4b36      	ldr	r3, [pc, #216]	; (800c85c <xTaskIncrementTick+0x150>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d104      	bne.n	800c794 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c78a:	4b37      	ldr	r3, [pc, #220]	; (800c868 <xTaskIncrementTick+0x15c>)
 800c78c:	f04f 32ff 	mov.w	r2, #4294967295
 800c790:	601a      	str	r2, [r3, #0]
					break;
 800c792:	e03f      	b.n	800c814 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c794:	4b31      	ldr	r3, [pc, #196]	; (800c85c <xTaskIncrementTick+0x150>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d203      	bcs.n	800c7b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c7ac:	4a2e      	ldr	r2, [pc, #184]	; (800c868 <xTaskIncrementTick+0x15c>)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7b2:	e02f      	b.n	800c814 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fe59 	bl	800b470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d004      	beq.n	800c7d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	3318      	adds	r3, #24
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fe fe50 	bl	800b470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d4:	4b25      	ldr	r3, [pc, #148]	; (800c86c <xTaskIncrementTick+0x160>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d903      	bls.n	800c7e4 <xTaskIncrementTick+0xd8>
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e0:	4a22      	ldr	r2, [pc, #136]	; (800c86c <xTaskIncrementTick+0x160>)
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4a1f      	ldr	r2, [pc, #124]	; (800c870 <xTaskIncrementTick+0x164>)
 800c7f2:	441a      	add	r2, r3
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	f7fe fddb 	bl	800b3b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c804:	4b1b      	ldr	r3, [pc, #108]	; (800c874 <xTaskIncrementTick+0x168>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d3b8      	bcc.n	800c780 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c80e:	2301      	movs	r3, #1
 800c810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c812:	e7b5      	b.n	800c780 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c814:	4b17      	ldr	r3, [pc, #92]	; (800c874 <xTaskIncrementTick+0x168>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81a:	4915      	ldr	r1, [pc, #84]	; (800c870 <xTaskIncrementTick+0x164>)
 800c81c:	4613      	mov	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	440b      	add	r3, r1
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d901      	bls.n	800c830 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c82c:	2301      	movs	r3, #1
 800c82e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c830:	4b11      	ldr	r3, [pc, #68]	; (800c878 <xTaskIncrementTick+0x16c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d007      	beq.n	800c848 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c838:	2301      	movs	r3, #1
 800c83a:	617b      	str	r3, [r7, #20]
 800c83c:	e004      	b.n	800c848 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c83e:	4b0f      	ldr	r3, [pc, #60]	; (800c87c <xTaskIncrementTick+0x170>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3301      	adds	r3, #1
 800c844:	4a0d      	ldr	r2, [pc, #52]	; (800c87c <xTaskIncrementTick+0x170>)
 800c846:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c848:	697b      	ldr	r3, [r7, #20]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20001ab0 	.word	0x20001ab0
 800c858:	20001a8c 	.word	0x20001a8c
 800c85c:	20001a40 	.word	0x20001a40
 800c860:	20001a44 	.word	0x20001a44
 800c864:	20001aa0 	.word	0x20001aa0
 800c868:	20001aa8 	.word	0x20001aa8
 800c86c:	20001a90 	.word	0x20001a90
 800c870:	200015b8 	.word	0x200015b8
 800c874:	200015b4 	.word	0x200015b4
 800c878:	20001a9c 	.word	0x20001a9c
 800c87c:	20001a98 	.word	0x20001a98

0800c880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c886:	4b28      	ldr	r3, [pc, #160]	; (800c928 <vTaskSwitchContext+0xa8>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d003      	beq.n	800c896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c88e:	4b27      	ldr	r3, [pc, #156]	; (800c92c <vTaskSwitchContext+0xac>)
 800c890:	2201      	movs	r2, #1
 800c892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c894:	e041      	b.n	800c91a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c896:	4b25      	ldr	r3, [pc, #148]	; (800c92c <vTaskSwitchContext+0xac>)
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c89c:	4b24      	ldr	r3, [pc, #144]	; (800c930 <vTaskSwitchContext+0xb0>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	e010      	b.n	800c8c6 <vTaskSwitchContext+0x46>
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10a      	bne.n	800c8c0 <vTaskSwitchContext+0x40>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	607b      	str	r3, [r7, #4]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <vTaskSwitchContext+0x3e>
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	491b      	ldr	r1, [pc, #108]	; (800c934 <vTaskSwitchContext+0xb4>)
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	440b      	add	r3, r1
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d0e4      	beq.n	800c8a4 <vTaskSwitchContext+0x24>
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	4413      	add	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4a13      	ldr	r2, [pc, #76]	; (800c934 <vTaskSwitchContext+0xb4>)
 800c8e6:	4413      	add	r3, r2
 800c8e8:	60bb      	str	r3, [r7, #8]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	685a      	ldr	r2, [r3, #4]
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	605a      	str	r2, [r3, #4]
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	685a      	ldr	r2, [r3, #4]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	3308      	adds	r3, #8
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d104      	bne.n	800c90a <vTaskSwitchContext+0x8a>
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	685a      	ldr	r2, [r3, #4]
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	605a      	str	r2, [r3, #4]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	4a09      	ldr	r2, [pc, #36]	; (800c938 <vTaskSwitchContext+0xb8>)
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	4a06      	ldr	r2, [pc, #24]	; (800c930 <vTaskSwitchContext+0xb0>)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6013      	str	r3, [r2, #0]
}
 800c91a:	bf00      	nop
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	20001ab0 	.word	0x20001ab0
 800c92c:	20001a9c 	.word	0x20001a9c
 800c930:	20001a90 	.word	0x20001a90
 800c934:	200015b8 	.word	0x200015b8
 800c938:	200015b4 	.word	0x200015b4

0800c93c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10a      	bne.n	800c962 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c950:	f383 8811 	msr	BASEPRI, r3
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	60fb      	str	r3, [r7, #12]
}
 800c95e:	bf00      	nop
 800c960:	e7fe      	b.n	800c960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c962:	4b07      	ldr	r3, [pc, #28]	; (800c980 <vTaskPlaceOnEventList+0x44>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	3318      	adds	r3, #24
 800c968:	4619      	mov	r1, r3
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7fe fd47 	bl	800b3fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c970:	2101      	movs	r1, #1
 800c972:	6838      	ldr	r0, [r7, #0]
 800c974:	f000 fa7c 	bl	800ce70 <prvAddCurrentTaskToDelayedList>
}
 800c978:	bf00      	nop
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	200015b4 	.word	0x200015b4

0800c984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10a      	bne.n	800c9ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	617b      	str	r3, [r7, #20]
}
 800c9a8:	bf00      	nop
 800c9aa:	e7fe      	b.n	800c9aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9ac:	4b0a      	ldr	r3, [pc, #40]	; (800c9d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3318      	adds	r3, #24
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f7fe fcfe 	bl	800b3b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	68b8      	ldr	r0, [r7, #8]
 800c9ca:	f000 fa51 	bl	800ce70 <prvAddCurrentTaskToDelayedList>
	}
 800c9ce:	bf00      	nop
 800c9d0:	3718      	adds	r7, #24
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	200015b4 	.word	0x200015b4

0800c9dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d10a      	bne.n	800ca08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	60fb      	str	r3, [r7, #12]
}
 800ca04:	bf00      	nop
 800ca06:	e7fe      	b.n	800ca06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	3318      	adds	r3, #24
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe fd2f 	bl	800b470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca12:	4b1e      	ldr	r3, [pc, #120]	; (800ca8c <xTaskRemoveFromEventList+0xb0>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d11d      	bne.n	800ca56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe fd26 	bl	800b470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca28:	4b19      	ldr	r3, [pc, #100]	; (800ca90 <xTaskRemoveFromEventList+0xb4>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d903      	bls.n	800ca38 <xTaskRemoveFromEventList+0x5c>
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca34:	4a16      	ldr	r2, [pc, #88]	; (800ca90 <xTaskRemoveFromEventList+0xb4>)
 800ca36:	6013      	str	r3, [r2, #0]
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4a13      	ldr	r2, [pc, #76]	; (800ca94 <xTaskRemoveFromEventList+0xb8>)
 800ca46:	441a      	add	r2, r3
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	4610      	mov	r0, r2
 800ca50:	f7fe fcb1 	bl	800b3b6 <vListInsertEnd>
 800ca54:	e005      	b.n	800ca62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	3318      	adds	r3, #24
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	480e      	ldr	r0, [pc, #56]	; (800ca98 <xTaskRemoveFromEventList+0xbc>)
 800ca5e:	f7fe fcaa 	bl	800b3b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca66:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <xTaskRemoveFromEventList+0xc0>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d905      	bls.n	800ca7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca70:	2301      	movs	r3, #1
 800ca72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca74:	4b0a      	ldr	r3, [pc, #40]	; (800caa0 <xTaskRemoveFromEventList+0xc4>)
 800ca76:	2201      	movs	r2, #1
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	e001      	b.n	800ca80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca80:	697b      	ldr	r3, [r7, #20]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3718      	adds	r7, #24
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20001ab0 	.word	0x20001ab0
 800ca90:	20001a90 	.word	0x20001a90
 800ca94:	200015b8 	.word	0x200015b8
 800ca98:	20001a48 	.word	0x20001a48
 800ca9c:	200015b4 	.word	0x200015b4
 800caa0:	20001a9c 	.word	0x20001a9c

0800caa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800caac:	4b06      	ldr	r3, [pc, #24]	; (800cac8 <vTaskInternalSetTimeOutState+0x24>)
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cab4:	4b05      	ldr	r3, [pc, #20]	; (800cacc <vTaskInternalSetTimeOutState+0x28>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	605a      	str	r2, [r3, #4]
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	20001aa0 	.word	0x20001aa0
 800cacc:	20001a8c 	.word	0x20001a8c

0800cad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10a      	bne.n	800caf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	613b      	str	r3, [r7, #16]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	60fb      	str	r3, [r7, #12]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cb12:	f000 fe7f 	bl	800d814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb16:	4b1d      	ldr	r3, [pc, #116]	; (800cb8c <xTaskCheckForTimeOut+0xbc>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	69ba      	ldr	r2, [r7, #24]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2e:	d102      	bne.n	800cb36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb30:	2300      	movs	r3, #0
 800cb32:	61fb      	str	r3, [r7, #28]
 800cb34:	e023      	b.n	800cb7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	4b15      	ldr	r3, [pc, #84]	; (800cb90 <xTaskCheckForTimeOut+0xc0>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d007      	beq.n	800cb52 <xTaskCheckForTimeOut+0x82>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	69ba      	ldr	r2, [r7, #24]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d302      	bcc.n	800cb52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	61fb      	str	r3, [r7, #28]
 800cb50:	e015      	b.n	800cb7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d20b      	bcs.n	800cb74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	1ad2      	subs	r2, r2, r3
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f7ff ff9b 	bl	800caa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	61fb      	str	r3, [r7, #28]
 800cb72:	e004      	b.n	800cb7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2200      	movs	r2, #0
 800cb78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb7e:	f000 fe79 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800cb82:	69fb      	ldr	r3, [r7, #28]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3720      	adds	r7, #32
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	20001a8c 	.word	0x20001a8c
 800cb90:	20001aa0 	.word	0x20001aa0

0800cb94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb94:	b480      	push	{r7}
 800cb96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb98:	4b03      	ldr	r3, [pc, #12]	; (800cba8 <vTaskMissedYield+0x14>)
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	601a      	str	r2, [r3, #0]
}
 800cb9e:	bf00      	nop
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	20001a9c 	.word	0x20001a9c

0800cbac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbb4:	f000 f852 	bl	800cc5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cbb8:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <prvIdleTask+0x28>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d9f9      	bls.n	800cbb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cbc0:	4b05      	ldr	r3, [pc, #20]	; (800cbd8 <prvIdleTask+0x2c>)
 800cbc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cbd0:	e7f0      	b.n	800cbb4 <prvIdleTask+0x8>
 800cbd2:	bf00      	nop
 800cbd4:	200015b8 	.word	0x200015b8
 800cbd8:	e000ed04 	.word	0xe000ed04

0800cbdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	607b      	str	r3, [r7, #4]
 800cbe6:	e00c      	b.n	800cc02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	4613      	mov	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4a12      	ldr	r2, [pc, #72]	; (800cc3c <prvInitialiseTaskLists+0x60>)
 800cbf4:	4413      	add	r3, r2
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fe fbb0 	bl	800b35c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	607b      	str	r3, [r7, #4]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b37      	cmp	r3, #55	; 0x37
 800cc06:	d9ef      	bls.n	800cbe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc08:	480d      	ldr	r0, [pc, #52]	; (800cc40 <prvInitialiseTaskLists+0x64>)
 800cc0a:	f7fe fba7 	bl	800b35c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc0e:	480d      	ldr	r0, [pc, #52]	; (800cc44 <prvInitialiseTaskLists+0x68>)
 800cc10:	f7fe fba4 	bl	800b35c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc14:	480c      	ldr	r0, [pc, #48]	; (800cc48 <prvInitialiseTaskLists+0x6c>)
 800cc16:	f7fe fba1 	bl	800b35c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc1a:	480c      	ldr	r0, [pc, #48]	; (800cc4c <prvInitialiseTaskLists+0x70>)
 800cc1c:	f7fe fb9e 	bl	800b35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc20:	480b      	ldr	r0, [pc, #44]	; (800cc50 <prvInitialiseTaskLists+0x74>)
 800cc22:	f7fe fb9b 	bl	800b35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc26:	4b0b      	ldr	r3, [pc, #44]	; (800cc54 <prvInitialiseTaskLists+0x78>)
 800cc28:	4a05      	ldr	r2, [pc, #20]	; (800cc40 <prvInitialiseTaskLists+0x64>)
 800cc2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc2c:	4b0a      	ldr	r3, [pc, #40]	; (800cc58 <prvInitialiseTaskLists+0x7c>)
 800cc2e:	4a05      	ldr	r2, [pc, #20]	; (800cc44 <prvInitialiseTaskLists+0x68>)
 800cc30:	601a      	str	r2, [r3, #0]
}
 800cc32:	bf00      	nop
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	200015b8 	.word	0x200015b8
 800cc40:	20001a18 	.word	0x20001a18
 800cc44:	20001a2c 	.word	0x20001a2c
 800cc48:	20001a48 	.word	0x20001a48
 800cc4c:	20001a5c 	.word	0x20001a5c
 800cc50:	20001a74 	.word	0x20001a74
 800cc54:	20001a40 	.word	0x20001a40
 800cc58:	20001a44 	.word	0x20001a44

0800cc5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc62:	e019      	b.n	800cc98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc64:	f000 fdd6 	bl	800d814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc68:	4b10      	ldr	r3, [pc, #64]	; (800ccac <prvCheckTasksWaitingTermination+0x50>)
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fe fbfb 	bl	800b470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc7a:	4b0d      	ldr	r3, [pc, #52]	; (800ccb0 <prvCheckTasksWaitingTermination+0x54>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	4a0b      	ldr	r2, [pc, #44]	; (800ccb0 <prvCheckTasksWaitingTermination+0x54>)
 800cc82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc84:	4b0b      	ldr	r3, [pc, #44]	; (800ccb4 <prvCheckTasksWaitingTermination+0x58>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	4a0a      	ldr	r2, [pc, #40]	; (800ccb4 <prvCheckTasksWaitingTermination+0x58>)
 800cc8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc8e:	f000 fdf1 	bl	800d874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f810 	bl	800ccb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc98:	4b06      	ldr	r3, [pc, #24]	; (800ccb4 <prvCheckTasksWaitingTermination+0x58>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e1      	bne.n	800cc64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cca0:	bf00      	nop
 800cca2:	bf00      	nop
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20001a5c 	.word	0x20001a5c
 800ccb0:	20001a88 	.word	0x20001a88
 800ccb4:	20001a70 	.word	0x20001a70

0800ccb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d108      	bne.n	800ccdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 ff8e 	bl	800dbf0 <vPortFree>
				vPortFree( pxTCB );
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 ff8b 	bl	800dbf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccda:	e018      	b.n	800cd0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d103      	bne.n	800ccee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 ff82 	bl	800dbf0 <vPortFree>
	}
 800ccec:	e00f      	b.n	800cd0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d00a      	beq.n	800cd0e <prvDeleteTCB+0x56>
	__asm volatile
 800ccf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	60fb      	str	r3, [r7, #12]
}
 800cd0a:	bf00      	nop
 800cd0c:	e7fe      	b.n	800cd0c <prvDeleteTCB+0x54>
	}
 800cd0e:	bf00      	nop
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd1e:	4b0c      	ldr	r3, [pc, #48]	; (800cd50 <prvResetNextTaskUnblockTime+0x38>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d104      	bne.n	800cd32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd28:	4b0a      	ldr	r3, [pc, #40]	; (800cd54 <prvResetNextTaskUnblockTime+0x3c>)
 800cd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd30:	e008      	b.n	800cd44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd32:	4b07      	ldr	r3, [pc, #28]	; (800cd50 <prvResetNextTaskUnblockTime+0x38>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	4a04      	ldr	r2, [pc, #16]	; (800cd54 <prvResetNextTaskUnblockTime+0x3c>)
 800cd42:	6013      	str	r3, [r2, #0]
}
 800cd44:	bf00      	nop
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	20001a40 	.word	0x20001a40
 800cd54:	20001aa8 	.word	0x20001aa8

0800cd58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd5e:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <xTaskGetSchedulerState+0x34>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d102      	bne.n	800cd6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd66:	2301      	movs	r3, #1
 800cd68:	607b      	str	r3, [r7, #4]
 800cd6a:	e008      	b.n	800cd7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd6c:	4b08      	ldr	r3, [pc, #32]	; (800cd90 <xTaskGetSchedulerState+0x38>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d102      	bne.n	800cd7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd74:	2302      	movs	r3, #2
 800cd76:	607b      	str	r3, [r7, #4]
 800cd78:	e001      	b.n	800cd7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd7e:	687b      	ldr	r3, [r7, #4]
	}
 800cd80:	4618      	mov	r0, r3
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	20001a94 	.word	0x20001a94
 800cd90:	20001ab0 	.word	0x20001ab0

0800cd94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b086      	sub	sp, #24
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cda0:	2300      	movs	r3, #0
 800cda2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d056      	beq.n	800ce58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cdaa:	4b2e      	ldr	r3, [pc, #184]	; (800ce64 <xTaskPriorityDisinherit+0xd0>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d00a      	beq.n	800cdca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	60fb      	str	r3, [r7, #12]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10a      	bne.n	800cde8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	60bb      	str	r3, [r7, #8]
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdec:	1e5a      	subs	r2, r3, #1
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d02c      	beq.n	800ce58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d128      	bne.n	800ce58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fe fb30 	bl	800b470 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <xTaskPriorityDisinherit+0xd4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d903      	bls.n	800ce38 <xTaskPriorityDisinherit+0xa4>
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	4a0c      	ldr	r2, [pc, #48]	; (800ce68 <xTaskPriorityDisinherit+0xd4>)
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4a09      	ldr	r2, [pc, #36]	; (800ce6c <xTaskPriorityDisinherit+0xd8>)
 800ce46:	441a      	add	r2, r3
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4610      	mov	r0, r2
 800ce50:	f7fe fab1 	bl	800b3b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce54:	2301      	movs	r3, #1
 800ce56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce58:	697b      	ldr	r3, [r7, #20]
	}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	200015b4 	.word	0x200015b4
 800ce68:	20001a90 	.word	0x20001a90
 800ce6c:	200015b8 	.word	0x200015b8

0800ce70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce7a:	4b21      	ldr	r3, [pc, #132]	; (800cf00 <prvAddCurrentTaskToDelayedList+0x90>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce80:	4b20      	ldr	r3, [pc, #128]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3304      	adds	r3, #4
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fe faf2 	bl	800b470 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce92:	d10a      	bne.n	800ceaa <prvAddCurrentTaskToDelayedList+0x3a>
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d007      	beq.n	800ceaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce9a:	4b1a      	ldr	r3, [pc, #104]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	4619      	mov	r1, r3
 800cea2:	4819      	ldr	r0, [pc, #100]	; (800cf08 <prvAddCurrentTaskToDelayedList+0x98>)
 800cea4:	f7fe fa87 	bl	800b3b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cea8:	e026      	b.n	800cef8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4413      	add	r3, r2
 800ceb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ceb2:	4b14      	ldr	r3, [pc, #80]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d209      	bcs.n	800ced6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cec2:	4b12      	ldr	r3, [pc, #72]	; (800cf0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3304      	adds	r3, #4
 800cecc:	4619      	mov	r1, r3
 800cece:	4610      	mov	r0, r2
 800ced0:	f7fe fa95 	bl	800b3fe <vListInsert>
}
 800ced4:	e010      	b.n	800cef8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ced6:	4b0e      	ldr	r3, [pc, #56]	; (800cf10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3304      	adds	r3, #4
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7fe fa8b 	bl	800b3fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cee8:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d202      	bcs.n	800cef8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cef2:	4a08      	ldr	r2, [pc, #32]	; (800cf14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	6013      	str	r3, [r2, #0]
}
 800cef8:	bf00      	nop
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	20001a8c 	.word	0x20001a8c
 800cf04:	200015b4 	.word	0x200015b4
 800cf08:	20001a74 	.word	0x20001a74
 800cf0c:	20001a44 	.word	0x20001a44
 800cf10:	20001a40 	.word	0x20001a40
 800cf14:	20001aa8 	.word	0x20001aa8

0800cf18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08a      	sub	sp, #40	; 0x28
 800cf1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cf22:	f000 fb07 	bl	800d534 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf26:	4b1c      	ldr	r3, [pc, #112]	; (800cf98 <xTimerCreateTimerTask+0x80>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d021      	beq.n	800cf72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf36:	1d3a      	adds	r2, r7, #4
 800cf38:	f107 0108 	add.w	r1, r7, #8
 800cf3c:	f107 030c 	add.w	r3, r7, #12
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe f9f1 	bl	800b328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	9202      	str	r2, [sp, #8]
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	2302      	movs	r3, #2
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	2300      	movs	r3, #0
 800cf56:	460a      	mov	r2, r1
 800cf58:	4910      	ldr	r1, [pc, #64]	; (800cf9c <xTimerCreateTimerTask+0x84>)
 800cf5a:	4811      	ldr	r0, [pc, #68]	; (800cfa0 <xTimerCreateTimerTask+0x88>)
 800cf5c:	f7fe ffd8 	bl	800bf10 <xTaskCreateStatic>
 800cf60:	4603      	mov	r3, r0
 800cf62:	4a10      	ldr	r2, [pc, #64]	; (800cfa4 <xTimerCreateTimerTask+0x8c>)
 800cf64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf66:	4b0f      	ldr	r3, [pc, #60]	; (800cfa4 <xTimerCreateTimerTask+0x8c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10a      	bne.n	800cf8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	613b      	str	r3, [r7, #16]
}
 800cf8a:	bf00      	nop
 800cf8c:	e7fe      	b.n	800cf8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cf8e:	697b      	ldr	r3, [r7, #20]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3718      	adds	r7, #24
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	20001ae4 	.word	0x20001ae4
 800cf9c:	0800f3a8 	.word	0x0800f3a8
 800cfa0:	0800d0dd 	.word	0x0800d0dd
 800cfa4:	20001ae8 	.word	0x20001ae8

0800cfa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08a      	sub	sp, #40	; 0x28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10a      	bne.n	800cfd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	623b      	str	r3, [r7, #32]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cfd6:	4b1a      	ldr	r3, [pc, #104]	; (800d040 <xTimerGenericCommand+0x98>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d02a      	beq.n	800d034 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b05      	cmp	r3, #5
 800cfee:	dc18      	bgt.n	800d022 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cff0:	f7ff feb2 	bl	800cd58 <xTaskGetSchedulerState>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d109      	bne.n	800d00e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cffa:	4b11      	ldr	r3, [pc, #68]	; (800d040 <xTimerGenericCommand+0x98>)
 800cffc:	6818      	ldr	r0, [r3, #0]
 800cffe:	f107 0110 	add.w	r1, r7, #16
 800d002:	2300      	movs	r3, #0
 800d004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d006:	f7fe fb9b 	bl	800b740 <xQueueGenericSend>
 800d00a:	6278      	str	r0, [r7, #36]	; 0x24
 800d00c:	e012      	b.n	800d034 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d00e:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <xTimerGenericCommand+0x98>)
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	f107 0110 	add.w	r1, r7, #16
 800d016:	2300      	movs	r3, #0
 800d018:	2200      	movs	r2, #0
 800d01a:	f7fe fb91 	bl	800b740 <xQueueGenericSend>
 800d01e:	6278      	str	r0, [r7, #36]	; 0x24
 800d020:	e008      	b.n	800d034 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d022:	4b07      	ldr	r3, [pc, #28]	; (800d040 <xTimerGenericCommand+0x98>)
 800d024:	6818      	ldr	r0, [r3, #0]
 800d026:	f107 0110 	add.w	r1, r7, #16
 800d02a:	2300      	movs	r3, #0
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	f7fe fc85 	bl	800b93c <xQueueGenericSendFromISR>
 800d032:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d036:	4618      	mov	r0, r3
 800d038:	3728      	adds	r7, #40	; 0x28
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20001ae4 	.word	0x20001ae4

0800d044 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af02      	add	r7, sp, #8
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d04e:	4b22      	ldr	r3, [pc, #136]	; (800d0d8 <prvProcessExpiredTimer+0x94>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	3304      	adds	r3, #4
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fe fa07 	bl	800b470 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d022      	beq.n	800d0b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	699a      	ldr	r2, [r3, #24]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	18d1      	adds	r1, r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	683a      	ldr	r2, [r7, #0]
 800d07c:	6978      	ldr	r0, [r7, #20]
 800d07e:	f000 f8d1 	bl	800d224 <prvInsertTimerInActiveList>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d01f      	beq.n	800d0c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d088:	2300      	movs	r3, #0
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	2300      	movs	r3, #0
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	2100      	movs	r1, #0
 800d092:	6978      	ldr	r0, [r7, #20]
 800d094:	f7ff ff88 	bl	800cfa8 <xTimerGenericCommand>
 800d098:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d113      	bne.n	800d0c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a4:	f383 8811 	msr	BASEPRI, r3
 800d0a8:	f3bf 8f6f 	isb	sy
 800d0ac:	f3bf 8f4f 	dsb	sy
 800d0b0:	60fb      	str	r3, [r7, #12]
}
 800d0b2:	bf00      	nop
 800d0b4:	e7fe      	b.n	800d0b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0bc:	f023 0301 	bic.w	r3, r3, #1
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	6a1b      	ldr	r3, [r3, #32]
 800d0cc:	6978      	ldr	r0, [r7, #20]
 800d0ce:	4798      	blx	r3
}
 800d0d0:	bf00      	nop
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20001adc 	.word	0x20001adc

0800d0dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0e4:	f107 0308 	add.w	r3, r7, #8
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 f857 	bl	800d19c <prvGetNextExpireTime>
 800d0ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f000 f803 	bl	800d100 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d0fa:	f000 f8d5 	bl	800d2a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0fe:	e7f1      	b.n	800d0e4 <prvTimerTask+0x8>

0800d100 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d10a:	f7ff fa43 	bl	800c594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d10e:	f107 0308 	add.w	r3, r7, #8
 800d112:	4618      	mov	r0, r3
 800d114:	f000 f866 	bl	800d1e4 <prvSampleTimeNow>
 800d118:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d130      	bne.n	800d182 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10a      	bne.n	800d13c <prvProcessTimerOrBlockTask+0x3c>
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d806      	bhi.n	800d13c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d12e:	f7ff fa3f 	bl	800c5b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d132:	68f9      	ldr	r1, [r7, #12]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7ff ff85 	bl	800d044 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d13a:	e024      	b.n	800d186 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d008      	beq.n	800d154 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d142:	4b13      	ldr	r3, [pc, #76]	; (800d190 <prvProcessTimerOrBlockTask+0x90>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d101      	bne.n	800d150 <prvProcessTimerOrBlockTask+0x50>
 800d14c:	2301      	movs	r3, #1
 800d14e:	e000      	b.n	800d152 <prvProcessTimerOrBlockTask+0x52>
 800d150:	2300      	movs	r3, #0
 800d152:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d154:	4b0f      	ldr	r3, [pc, #60]	; (800d194 <prvProcessTimerOrBlockTask+0x94>)
 800d156:	6818      	ldr	r0, [r3, #0]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	683a      	ldr	r2, [r7, #0]
 800d160:	4619      	mov	r1, r3
 800d162:	f7fe fea1 	bl	800bea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d166:	f7ff fa23 	bl	800c5b0 <xTaskResumeAll>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10a      	bne.n	800d186 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d170:	4b09      	ldr	r3, [pc, #36]	; (800d198 <prvProcessTimerOrBlockTask+0x98>)
 800d172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d176:	601a      	str	r2, [r3, #0]
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	f3bf 8f6f 	isb	sy
}
 800d180:	e001      	b.n	800d186 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d182:	f7ff fa15 	bl	800c5b0 <xTaskResumeAll>
}
 800d186:	bf00      	nop
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20001ae0 	.word	0x20001ae0
 800d194:	20001ae4 	.word	0x20001ae4
 800d198:	e000ed04 	.word	0xe000ed04

0800d19c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1a4:	4b0e      	ldr	r3, [pc, #56]	; (800d1e0 <prvGetNextExpireTime+0x44>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d101      	bne.n	800d1b2 <prvGetNextExpireTime+0x16>
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	e000      	b.n	800d1b4 <prvGetNextExpireTime+0x18>
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d105      	bne.n	800d1cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <prvGetNextExpireTime+0x44>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	60fb      	str	r3, [r7, #12]
 800d1ca:	e001      	b.n	800d1d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	20001adc 	.word	0x20001adc

0800d1e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d1ec:	f7ff fa7e 	bl	800c6ec <xTaskGetTickCount>
 800d1f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d1f2:	4b0b      	ldr	r3, [pc, #44]	; (800d220 <prvSampleTimeNow+0x3c>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d205      	bcs.n	800d208 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d1fc:	f000 f936 	bl	800d46c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	e002      	b.n	800d20e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d20e:	4a04      	ldr	r2, [pc, #16]	; (800d220 <prvSampleTimeNow+0x3c>)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d214:	68fb      	ldr	r3, [r7, #12]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	20001aec 	.word	0x20001aec

0800d224 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
 800d230:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d232:	2300      	movs	r3, #0
 800d234:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	429a      	cmp	r2, r3
 800d248:	d812      	bhi.n	800d270 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	1ad2      	subs	r2, r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	429a      	cmp	r2, r3
 800d256:	d302      	bcc.n	800d25e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d258:	2301      	movs	r3, #1
 800d25a:	617b      	str	r3, [r7, #20]
 800d25c:	e01b      	b.n	800d296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d25e:	4b10      	ldr	r3, [pc, #64]	; (800d2a0 <prvInsertTimerInActiveList+0x7c>)
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	3304      	adds	r3, #4
 800d266:	4619      	mov	r1, r3
 800d268:	4610      	mov	r0, r2
 800d26a:	f7fe f8c8 	bl	800b3fe <vListInsert>
 800d26e:	e012      	b.n	800d296 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	d206      	bcs.n	800d286 <prvInsertTimerInActiveList+0x62>
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d302      	bcc.n	800d286 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d280:	2301      	movs	r3, #1
 800d282:	617b      	str	r3, [r7, #20]
 800d284:	e007      	b.n	800d296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d286:	4b07      	ldr	r3, [pc, #28]	; (800d2a4 <prvInsertTimerInActiveList+0x80>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	3304      	adds	r3, #4
 800d28e:	4619      	mov	r1, r3
 800d290:	4610      	mov	r0, r2
 800d292:	f7fe f8b4 	bl	800b3fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d296:	697b      	ldr	r3, [r7, #20]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	20001ae0 	.word	0x20001ae0
 800d2a4:	20001adc 	.word	0x20001adc

0800d2a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b08e      	sub	sp, #56	; 0x38
 800d2ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2ae:	e0ca      	b.n	800d446 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	da18      	bge.n	800d2e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d2b6:	1d3b      	adds	r3, r7, #4
 800d2b8:	3304      	adds	r3, #4
 800d2ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10a      	bne.n	800d2d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	61fb      	str	r3, [r7, #28]
}
 800d2d4:	bf00      	nop
 800d2d6:	e7fe      	b.n	800d2d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2de:	6850      	ldr	r0, [r2, #4]
 800d2e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2e2:	6892      	ldr	r2, [r2, #8]
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f2c0 80aa 	blt.w	800d444 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	695b      	ldr	r3, [r3, #20]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d004      	beq.n	800d306 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fe:	3304      	adds	r3, #4
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe f8b5 	bl	800b470 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d306:	463b      	mov	r3, r7
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff ff6b 	bl	800d1e4 <prvSampleTimeNow>
 800d30e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b09      	cmp	r3, #9
 800d314:	f200 8097 	bhi.w	800d446 <prvProcessReceivedCommands+0x19e>
 800d318:	a201      	add	r2, pc, #4	; (adr r2, 800d320 <prvProcessReceivedCommands+0x78>)
 800d31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31e:	bf00      	nop
 800d320:	0800d349 	.word	0x0800d349
 800d324:	0800d349 	.word	0x0800d349
 800d328:	0800d349 	.word	0x0800d349
 800d32c:	0800d3bd 	.word	0x0800d3bd
 800d330:	0800d3d1 	.word	0x0800d3d1
 800d334:	0800d41b 	.word	0x0800d41b
 800d338:	0800d349 	.word	0x0800d349
 800d33c:	0800d349 	.word	0x0800d349
 800d340:	0800d3bd 	.word	0x0800d3bd
 800d344:	0800d3d1 	.word	0x0800d3d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d34e:	f043 0301 	orr.w	r3, r3, #1
 800d352:	b2da      	uxtb	r2, r3
 800d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	18d1      	adds	r1, r2, r3
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d368:	f7ff ff5c 	bl	800d224 <prvInsertTimerInActiveList>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d069      	beq.n	800d446 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d378:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b00      	cmp	r3, #0
 800d386:	d05e      	beq.n	800d446 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d388:	68ba      	ldr	r2, [r7, #8]
 800d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	441a      	add	r2, r3
 800d390:	2300      	movs	r3, #0
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	2300      	movs	r3, #0
 800d396:	2100      	movs	r1, #0
 800d398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d39a:	f7ff fe05 	bl	800cfa8 <xTimerGenericCommand>
 800d39e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d14f      	bne.n	800d446 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	61bb      	str	r3, [r7, #24]
}
 800d3b8:	bf00      	nop
 800d3ba:	e7fe      	b.n	800d3ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3c2:	f023 0301 	bic.w	r3, r3, #1
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d3ce:	e03a      	b.n	800d446 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3d6:	f043 0301 	orr.w	r3, r3, #1
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10a      	bne.n	800d406 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	617b      	str	r3, [r7, #20]
}
 800d402:	bf00      	nop
 800d404:	e7fe      	b.n	800d404 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d408:	699a      	ldr	r2, [r3, #24]
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	18d1      	adds	r1, r2, r3
 800d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d414:	f7ff ff06 	bl	800d224 <prvInsertTimerInActiveList>
					break;
 800d418:	e015      	b.n	800d446 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d420:	f003 0302 	and.w	r3, r3, #2
 800d424:	2b00      	cmp	r3, #0
 800d426:	d103      	bne.n	800d430 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d42a:	f000 fbe1 	bl	800dbf0 <vPortFree>
 800d42e:	e00a      	b.n	800d446 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d436:	f023 0301 	bic.w	r3, r3, #1
 800d43a:	b2da      	uxtb	r2, r3
 800d43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d442:	e000      	b.n	800d446 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d444:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d446:	4b08      	ldr	r3, [pc, #32]	; (800d468 <prvProcessReceivedCommands+0x1c0>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	1d39      	adds	r1, r7, #4
 800d44c:	2200      	movs	r2, #0
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fe fb10 	bl	800ba74 <xQueueReceive>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	f47f af2a 	bne.w	800d2b0 <prvProcessReceivedCommands+0x8>
	}
}
 800d45c:	bf00      	nop
 800d45e:	bf00      	nop
 800d460:	3730      	adds	r7, #48	; 0x30
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20001ae4 	.word	0x20001ae4

0800d46c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d472:	e048      	b.n	800d506 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d474:	4b2d      	ldr	r3, [pc, #180]	; (800d52c <prvSwitchTimerLists+0xc0>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d47e:	4b2b      	ldr	r3, [pc, #172]	; (800d52c <prvSwitchTimerLists+0xc0>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	3304      	adds	r3, #4
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fd ffef 	bl	800b470 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4a0:	f003 0304 	and.w	r3, r3, #4
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d02e      	beq.n	800d506 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d90e      	bls.n	800d4d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	68fa      	ldr	r2, [r7, #12]
 800d4c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4c6:	4b19      	ldr	r3, [pc, #100]	; (800d52c <prvSwitchTimerLists+0xc0>)
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	f7fd ff94 	bl	800b3fe <vListInsert>
 800d4d6:	e016      	b.n	800d506 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d4d8:	2300      	movs	r3, #0
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	2300      	movs	r3, #0
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f7ff fd60 	bl	800cfa8 <xTimerGenericCommand>
 800d4e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	603b      	str	r3, [r7, #0]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d506:	4b09      	ldr	r3, [pc, #36]	; (800d52c <prvSwitchTimerLists+0xc0>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1b1      	bne.n	800d474 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d510:	4b06      	ldr	r3, [pc, #24]	; (800d52c <prvSwitchTimerLists+0xc0>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d516:	4b06      	ldr	r3, [pc, #24]	; (800d530 <prvSwitchTimerLists+0xc4>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a04      	ldr	r2, [pc, #16]	; (800d52c <prvSwitchTimerLists+0xc0>)
 800d51c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d51e:	4a04      	ldr	r2, [pc, #16]	; (800d530 <prvSwitchTimerLists+0xc4>)
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	6013      	str	r3, [r2, #0]
}
 800d524:	bf00      	nop
 800d526:	3718      	adds	r7, #24
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20001adc 	.word	0x20001adc
 800d530:	20001ae0 	.word	0x20001ae0

0800d534 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d53a:	f000 f96b 	bl	800d814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d53e:	4b15      	ldr	r3, [pc, #84]	; (800d594 <prvCheckForValidListAndQueue+0x60>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d120      	bne.n	800d588 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d546:	4814      	ldr	r0, [pc, #80]	; (800d598 <prvCheckForValidListAndQueue+0x64>)
 800d548:	f7fd ff08 	bl	800b35c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d54c:	4813      	ldr	r0, [pc, #76]	; (800d59c <prvCheckForValidListAndQueue+0x68>)
 800d54e:	f7fd ff05 	bl	800b35c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d552:	4b13      	ldr	r3, [pc, #76]	; (800d5a0 <prvCheckForValidListAndQueue+0x6c>)
 800d554:	4a10      	ldr	r2, [pc, #64]	; (800d598 <prvCheckForValidListAndQueue+0x64>)
 800d556:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d558:	4b12      	ldr	r3, [pc, #72]	; (800d5a4 <prvCheckForValidListAndQueue+0x70>)
 800d55a:	4a10      	ldr	r2, [pc, #64]	; (800d59c <prvCheckForValidListAndQueue+0x68>)
 800d55c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d55e:	2300      	movs	r3, #0
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	4b11      	ldr	r3, [pc, #68]	; (800d5a8 <prvCheckForValidListAndQueue+0x74>)
 800d564:	4a11      	ldr	r2, [pc, #68]	; (800d5ac <prvCheckForValidListAndQueue+0x78>)
 800d566:	2110      	movs	r1, #16
 800d568:	200a      	movs	r0, #10
 800d56a:	f7fe f813 	bl	800b594 <xQueueGenericCreateStatic>
 800d56e:	4603      	mov	r3, r0
 800d570:	4a08      	ldr	r2, [pc, #32]	; (800d594 <prvCheckForValidListAndQueue+0x60>)
 800d572:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d574:	4b07      	ldr	r3, [pc, #28]	; (800d594 <prvCheckForValidListAndQueue+0x60>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d57c:	4b05      	ldr	r3, [pc, #20]	; (800d594 <prvCheckForValidListAndQueue+0x60>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	490b      	ldr	r1, [pc, #44]	; (800d5b0 <prvCheckForValidListAndQueue+0x7c>)
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe fc66 	bl	800be54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d588:	f000 f974 	bl	800d874 <vPortExitCritical>
}
 800d58c:	bf00      	nop
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20001ae4 	.word	0x20001ae4
 800d598:	20001ab4 	.word	0x20001ab4
 800d59c:	20001ac8 	.word	0x20001ac8
 800d5a0:	20001adc 	.word	0x20001adc
 800d5a4:	20001ae0 	.word	0x20001ae0
 800d5a8:	20001b90 	.word	0x20001b90
 800d5ac:	20001af0 	.word	0x20001af0
 800d5b0:	0800f3b0 	.word	0x0800f3b0

0800d5b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3b04      	subs	r3, #4
 800d5c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d5cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3b04      	subs	r3, #4
 800d5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	f023 0201 	bic.w	r2, r3, #1
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	3b04      	subs	r3, #4
 800d5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5e4:	4a0c      	ldr	r2, [pc, #48]	; (800d618 <pxPortInitialiseStack+0x64>)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3b14      	subs	r3, #20
 800d5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	3b04      	subs	r3, #4
 800d5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f06f 0202 	mvn.w	r2, #2
 800d602:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	3b20      	subs	r3, #32
 800d608:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d60a:	68fb      	ldr	r3, [r7, #12]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	0800d61d 	.word	0x0800d61d

0800d61c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d626:	4b12      	ldr	r3, [pc, #72]	; (800d670 <prvTaskExitError+0x54>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62e:	d00a      	beq.n	800d646 <prvTaskExitError+0x2a>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	60fb      	str	r3, [r7, #12]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <prvTaskExitError+0x28>
	__asm volatile
 800d646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	60bb      	str	r3, [r7, #8]
}
 800d658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d65a:	bf00      	nop
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0fc      	beq.n	800d65c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d662:	bf00      	nop
 800d664:	bf00      	nop
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr
 800d670:	20000598 	.word	0x20000598
	...

0800d680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d680:	4b07      	ldr	r3, [pc, #28]	; (800d6a0 <pxCurrentTCBConst2>)
 800d682:	6819      	ldr	r1, [r3, #0]
 800d684:	6808      	ldr	r0, [r1, #0]
 800d686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68a:	f380 8809 	msr	PSP, r0
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f04f 0000 	mov.w	r0, #0
 800d696:	f380 8811 	msr	BASEPRI, r0
 800d69a:	4770      	bx	lr
 800d69c:	f3af 8000 	nop.w

0800d6a0 <pxCurrentTCBConst2>:
 800d6a0:	200015b4 	.word	0x200015b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop

0800d6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d6a8:	4808      	ldr	r0, [pc, #32]	; (800d6cc <prvPortStartFirstTask+0x24>)
 800d6aa:	6800      	ldr	r0, [r0, #0]
 800d6ac:	6800      	ldr	r0, [r0, #0]
 800d6ae:	f380 8808 	msr	MSP, r0
 800d6b2:	f04f 0000 	mov.w	r0, #0
 800d6b6:	f380 8814 	msr	CONTROL, r0
 800d6ba:	b662      	cpsie	i
 800d6bc:	b661      	cpsie	f
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	df00      	svc	0
 800d6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d6ca:	bf00      	nop
 800d6cc:	e000ed08 	.word	0xe000ed08

0800d6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d6d6:	4b46      	ldr	r3, [pc, #280]	; (800d7f0 <xPortStartScheduler+0x120>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a46      	ldr	r2, [pc, #280]	; (800d7f4 <xPortStartScheduler+0x124>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d10a      	bne.n	800d6f6 <xPortStartScheduler+0x26>
	__asm volatile
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	613b      	str	r3, [r7, #16]
}
 800d6f2:	bf00      	nop
 800d6f4:	e7fe      	b.n	800d6f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d6f6:	4b3e      	ldr	r3, [pc, #248]	; (800d7f0 <xPortStartScheduler+0x120>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a3f      	ldr	r2, [pc, #252]	; (800d7f8 <xPortStartScheduler+0x128>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d10a      	bne.n	800d716 <xPortStartScheduler+0x46>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	60fb      	str	r3, [r7, #12]
}
 800d712:	bf00      	nop
 800d714:	e7fe      	b.n	800d714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d716:	4b39      	ldr	r3, [pc, #228]	; (800d7fc <xPortStartScheduler+0x12c>)
 800d718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	22ff      	movs	r2, #255	; 0xff
 800d726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d730:	78fb      	ldrb	r3, [r7, #3]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	4b31      	ldr	r3, [pc, #196]	; (800d800 <xPortStartScheduler+0x130>)
 800d73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d73e:	4b31      	ldr	r3, [pc, #196]	; (800d804 <xPortStartScheduler+0x134>)
 800d740:	2207      	movs	r2, #7
 800d742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d744:	e009      	b.n	800d75a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d746:	4b2f      	ldr	r3, [pc, #188]	; (800d804 <xPortStartScheduler+0x134>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	4a2d      	ldr	r2, [pc, #180]	; (800d804 <xPortStartScheduler+0x134>)
 800d74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	b2db      	uxtb	r3, r3
 800d758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d762:	2b80      	cmp	r3, #128	; 0x80
 800d764:	d0ef      	beq.n	800d746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d766:	4b27      	ldr	r3, [pc, #156]	; (800d804 <xPortStartScheduler+0x134>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f1c3 0307 	rsb	r3, r3, #7
 800d76e:	2b04      	cmp	r3, #4
 800d770:	d00a      	beq.n	800d788 <xPortStartScheduler+0xb8>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	60bb      	str	r3, [r7, #8]
}
 800d784:	bf00      	nop
 800d786:	e7fe      	b.n	800d786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d788:	4b1e      	ldr	r3, [pc, #120]	; (800d804 <xPortStartScheduler+0x134>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	021b      	lsls	r3, r3, #8
 800d78e:	4a1d      	ldr	r2, [pc, #116]	; (800d804 <xPortStartScheduler+0x134>)
 800d790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d792:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <xPortStartScheduler+0x134>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d79a:	4a1a      	ldr	r2, [pc, #104]	; (800d804 <xPortStartScheduler+0x134>)
 800d79c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7a6:	4b18      	ldr	r3, [pc, #96]	; (800d808 <xPortStartScheduler+0x138>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a17      	ldr	r2, [pc, #92]	; (800d808 <xPortStartScheduler+0x138>)
 800d7ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d7b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7b2:	4b15      	ldr	r3, [pc, #84]	; (800d808 <xPortStartScheduler+0x138>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a14      	ldr	r2, [pc, #80]	; (800d808 <xPortStartScheduler+0x138>)
 800d7b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d7bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7be:	f000 f8dd 	bl	800d97c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7c2:	4b12      	ldr	r3, [pc, #72]	; (800d80c <xPortStartScheduler+0x13c>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7c8:	f000 f8fc 	bl	800d9c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7cc:	4b10      	ldr	r3, [pc, #64]	; (800d810 <xPortStartScheduler+0x140>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a0f      	ldr	r2, [pc, #60]	; (800d810 <xPortStartScheduler+0x140>)
 800d7d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7d8:	f7ff ff66 	bl	800d6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7dc:	f7ff f850 	bl	800c880 <vTaskSwitchContext>
	prvTaskExitError();
 800d7e0:	f7ff ff1c 	bl	800d61c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	e000ed00 	.word	0xe000ed00
 800d7f4:	410fc271 	.word	0x410fc271
 800d7f8:	410fc270 	.word	0x410fc270
 800d7fc:	e000e400 	.word	0xe000e400
 800d800:	20001be0 	.word	0x20001be0
 800d804:	20001be4 	.word	0x20001be4
 800d808:	e000ed20 	.word	0xe000ed20
 800d80c:	20000598 	.word	0x20000598
 800d810:	e000ef34 	.word	0xe000ef34

0800d814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	607b      	str	r3, [r7, #4]
}
 800d82c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d82e:	4b0f      	ldr	r3, [pc, #60]	; (800d86c <vPortEnterCritical+0x58>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3301      	adds	r3, #1
 800d834:	4a0d      	ldr	r2, [pc, #52]	; (800d86c <vPortEnterCritical+0x58>)
 800d836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d838:	4b0c      	ldr	r3, [pc, #48]	; (800d86c <vPortEnterCritical+0x58>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d10f      	bne.n	800d860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d840:	4b0b      	ldr	r3, [pc, #44]	; (800d870 <vPortEnterCritical+0x5c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <vPortEnterCritical+0x4c>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	603b      	str	r3, [r7, #0]
}
 800d85c:	bf00      	nop
 800d85e:	e7fe      	b.n	800d85e <vPortEnterCritical+0x4a>
	}
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	20000598 	.word	0x20000598
 800d870:	e000ed04 	.word	0xe000ed04

0800d874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d87a:	4b12      	ldr	r3, [pc, #72]	; (800d8c4 <vPortExitCritical+0x50>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10a      	bne.n	800d898 <vPortExitCritical+0x24>
	__asm volatile
 800d882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d886:	f383 8811 	msr	BASEPRI, r3
 800d88a:	f3bf 8f6f 	isb	sy
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	607b      	str	r3, [r7, #4]
}
 800d894:	bf00      	nop
 800d896:	e7fe      	b.n	800d896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d898:	4b0a      	ldr	r3, [pc, #40]	; (800d8c4 <vPortExitCritical+0x50>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	4a09      	ldr	r2, [pc, #36]	; (800d8c4 <vPortExitCritical+0x50>)
 800d8a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8a2:	4b08      	ldr	r3, [pc, #32]	; (800d8c4 <vPortExitCritical+0x50>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d105      	bne.n	800d8b6 <vPortExitCritical+0x42>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	f383 8811 	msr	BASEPRI, r3
}
 800d8b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8b6:	bf00      	nop
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	20000598 	.word	0x20000598
	...

0800d8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8d0:	f3ef 8009 	mrs	r0, PSP
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	4b15      	ldr	r3, [pc, #84]	; (800d930 <pxCurrentTCBConst>)
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	f01e 0f10 	tst.w	lr, #16
 800d8e0:	bf08      	it	eq
 800d8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ea:	6010      	str	r0, [r2, #0]
 800d8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d8f4:	f380 8811 	msr	BASEPRI, r0
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	f7fe ffbe 	bl	800c880 <vTaskSwitchContext>
 800d904:	f04f 0000 	mov.w	r0, #0
 800d908:	f380 8811 	msr	BASEPRI, r0
 800d90c:	bc09      	pop	{r0, r3}
 800d90e:	6819      	ldr	r1, [r3, #0]
 800d910:	6808      	ldr	r0, [r1, #0]
 800d912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d916:	f01e 0f10 	tst.w	lr, #16
 800d91a:	bf08      	it	eq
 800d91c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d920:	f380 8809 	msr	PSP, r0
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	f3af 8000 	nop.w

0800d930 <pxCurrentTCBConst>:
 800d930:	200015b4 	.word	0x200015b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d934:	bf00      	nop
 800d936:	bf00      	nop

0800d938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	607b      	str	r3, [r7, #4]
}
 800d950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d952:	f7fe fedb 	bl	800c70c <xTaskIncrementTick>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d003      	beq.n	800d964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d95c:	4b06      	ldr	r3, [pc, #24]	; (800d978 <xPortSysTickHandler+0x40>)
 800d95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	2300      	movs	r3, #0
 800d966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	f383 8811 	msr	BASEPRI, r3
}
 800d96e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d970:	bf00      	nop
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	e000ed04 	.word	0xe000ed04

0800d97c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d980:	4b0b      	ldr	r3, [pc, #44]	; (800d9b0 <vPortSetupTimerInterrupt+0x34>)
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d986:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <vPortSetupTimerInterrupt+0x38>)
 800d988:	2200      	movs	r2, #0
 800d98a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d98c:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <vPortSetupTimerInterrupt+0x3c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a0a      	ldr	r2, [pc, #40]	; (800d9bc <vPortSetupTimerInterrupt+0x40>)
 800d992:	fba2 2303 	umull	r2, r3, r2, r3
 800d996:	099b      	lsrs	r3, r3, #6
 800d998:	4a09      	ldr	r2, [pc, #36]	; (800d9c0 <vPortSetupTimerInterrupt+0x44>)
 800d99a:	3b01      	subs	r3, #1
 800d99c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d99e:	4b04      	ldr	r3, [pc, #16]	; (800d9b0 <vPortSetupTimerInterrupt+0x34>)
 800d9a0:	2207      	movs	r2, #7
 800d9a2:	601a      	str	r2, [r3, #0]
}
 800d9a4:	bf00      	nop
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	e000e010 	.word	0xe000e010
 800d9b4:	e000e018 	.word	0xe000e018
 800d9b8:	200004ec 	.word	0x200004ec
 800d9bc:	10624dd3 	.word	0x10624dd3
 800d9c0:	e000e014 	.word	0xe000e014

0800d9c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9d4 <vPortEnableVFP+0x10>
 800d9c8:	6801      	ldr	r1, [r0, #0]
 800d9ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d9ce:	6001      	str	r1, [r0, #0]
 800d9d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9d2:	bf00      	nop
 800d9d4:	e000ed88 	.word	0xe000ed88

0800d9d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d9de:	f3ef 8305 	mrs	r3, IPSR
 800d9e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b0f      	cmp	r3, #15
 800d9e8:	d914      	bls.n	800da14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d9ea:	4a17      	ldr	r2, [pc, #92]	; (800da48 <vPortValidateInterruptPriority+0x70>)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d9f4:	4b15      	ldr	r3, [pc, #84]	; (800da4c <vPortValidateInterruptPriority+0x74>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	7afa      	ldrb	r2, [r7, #11]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d20a      	bcs.n	800da14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	607b      	str	r3, [r7, #4]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da14:	4b0e      	ldr	r3, [pc, #56]	; (800da50 <vPortValidateInterruptPriority+0x78>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800da1c:	4b0d      	ldr	r3, [pc, #52]	; (800da54 <vPortValidateInterruptPriority+0x7c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d90a      	bls.n	800da3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	603b      	str	r3, [r7, #0]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <vPortValidateInterruptPriority+0x60>
	}
 800da3a:	bf00      	nop
 800da3c:	3714      	adds	r7, #20
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	e000e3f0 	.word	0xe000e3f0
 800da4c:	20001be0 	.word	0x20001be0
 800da50:	e000ed0c 	.word	0xe000ed0c
 800da54:	20001be4 	.word	0x20001be4

0800da58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b08a      	sub	sp, #40	; 0x28
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da60:	2300      	movs	r3, #0
 800da62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da64:	f7fe fd96 	bl	800c594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da68:	4b5b      	ldr	r3, [pc, #364]	; (800dbd8 <pvPortMalloc+0x180>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da70:	f000 f920 	bl	800dcb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da74:	4b59      	ldr	r3, [pc, #356]	; (800dbdc <pvPortMalloc+0x184>)
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4013      	ands	r3, r2
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f040 8093 	bne.w	800dba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d01d      	beq.n	800dac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800da88:	2208      	movs	r2, #8
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4413      	add	r3, r2
 800da8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f003 0307 	and.w	r3, r3, #7
 800da96:	2b00      	cmp	r3, #0
 800da98:	d014      	beq.n	800dac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f023 0307 	bic.w	r3, r3, #7
 800daa0:	3308      	adds	r3, #8
 800daa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f003 0307 	and.w	r3, r3, #7
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00a      	beq.n	800dac4 <pvPortMalloc+0x6c>
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	617b      	str	r3, [r7, #20]
}
 800dac0:	bf00      	nop
 800dac2:	e7fe      	b.n	800dac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d06e      	beq.n	800dba8 <pvPortMalloc+0x150>
 800daca:	4b45      	ldr	r3, [pc, #276]	; (800dbe0 <pvPortMalloc+0x188>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d869      	bhi.n	800dba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dad4:	4b43      	ldr	r3, [pc, #268]	; (800dbe4 <pvPortMalloc+0x18c>)
 800dad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dad8:	4b42      	ldr	r3, [pc, #264]	; (800dbe4 <pvPortMalloc+0x18c>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dade:	e004      	b.n	800daea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d903      	bls.n	800dafc <pvPortMalloc+0xa4>
 800daf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1f1      	bne.n	800dae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dafc:	4b36      	ldr	r3, [pc, #216]	; (800dbd8 <pvPortMalloc+0x180>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db02:	429a      	cmp	r2, r3
 800db04:	d050      	beq.n	800dba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2208      	movs	r2, #8
 800db0c:	4413      	add	r3, r2
 800db0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	1ad2      	subs	r2, r2, r3
 800db20:	2308      	movs	r3, #8
 800db22:	005b      	lsls	r3, r3, #1
 800db24:	429a      	cmp	r2, r3
 800db26:	d91f      	bls.n	800db68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4413      	add	r3, r2
 800db2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	f003 0307 	and.w	r3, r3, #7
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00a      	beq.n	800db50 <pvPortMalloc+0xf8>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	613b      	str	r3, [r7, #16]
}
 800db4c:	bf00      	nop
 800db4e:	e7fe      	b.n	800db4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	1ad2      	subs	r2, r2, r3
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db62:	69b8      	ldr	r0, [r7, #24]
 800db64:	f000 f908 	bl	800dd78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db68:	4b1d      	ldr	r3, [pc, #116]	; (800dbe0 <pvPortMalloc+0x188>)
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	4a1b      	ldr	r2, [pc, #108]	; (800dbe0 <pvPortMalloc+0x188>)
 800db74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db76:	4b1a      	ldr	r3, [pc, #104]	; (800dbe0 <pvPortMalloc+0x188>)
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	4b1b      	ldr	r3, [pc, #108]	; (800dbe8 <pvPortMalloc+0x190>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d203      	bcs.n	800db8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db82:	4b17      	ldr	r3, [pc, #92]	; (800dbe0 <pvPortMalloc+0x188>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a18      	ldr	r2, [pc, #96]	; (800dbe8 <pvPortMalloc+0x190>)
 800db88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	4b13      	ldr	r3, [pc, #76]	; (800dbdc <pvPortMalloc+0x184>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	431a      	orrs	r2, r3
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	2200      	movs	r2, #0
 800db9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800db9e:	4b13      	ldr	r3, [pc, #76]	; (800dbec <pvPortMalloc+0x194>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3301      	adds	r3, #1
 800dba4:	4a11      	ldr	r2, [pc, #68]	; (800dbec <pvPortMalloc+0x194>)
 800dba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dba8:	f7fe fd02 	bl	800c5b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	f003 0307 	and.w	r3, r3, #7
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00a      	beq.n	800dbcc <pvPortMalloc+0x174>
	__asm volatile
 800dbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbba:	f383 8811 	msr	BASEPRI, r3
 800dbbe:	f3bf 8f6f 	isb	sy
 800dbc2:	f3bf 8f4f 	dsb	sy
 800dbc6:	60fb      	str	r3, [r7, #12]
}
 800dbc8:	bf00      	nop
 800dbca:	e7fe      	b.n	800dbca <pvPortMalloc+0x172>
	return pvReturn;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3728      	adds	r7, #40	; 0x28
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	200057f0 	.word	0x200057f0
 800dbdc:	20005804 	.word	0x20005804
 800dbe0:	200057f4 	.word	0x200057f4
 800dbe4:	200057e8 	.word	0x200057e8
 800dbe8:	200057f8 	.word	0x200057f8
 800dbec:	200057fc 	.word	0x200057fc

0800dbf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d04d      	beq.n	800dc9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc02:	2308      	movs	r3, #8
 800dc04:	425b      	negs	r3, r3
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	4413      	add	r3, r2
 800dc0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	4b24      	ldr	r3, [pc, #144]	; (800dca8 <vPortFree+0xb8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4013      	ands	r3, r2
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10a      	bne.n	800dc34 <vPortFree+0x44>
	__asm volatile
 800dc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc22:	f383 8811 	msr	BASEPRI, r3
 800dc26:	f3bf 8f6f 	isb	sy
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	60fb      	str	r3, [r7, #12]
}
 800dc30:	bf00      	nop
 800dc32:	e7fe      	b.n	800dc32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00a      	beq.n	800dc52 <vPortFree+0x62>
	__asm volatile
 800dc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc40:	f383 8811 	msr	BASEPRI, r3
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	60bb      	str	r3, [r7, #8]
}
 800dc4e:	bf00      	nop
 800dc50:	e7fe      	b.n	800dc50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	685a      	ldr	r2, [r3, #4]
 800dc56:	4b14      	ldr	r3, [pc, #80]	; (800dca8 <vPortFree+0xb8>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4013      	ands	r3, r2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d01e      	beq.n	800dc9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d11a      	bne.n	800dc9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	685a      	ldr	r2, [r3, #4]
 800dc6c:	4b0e      	ldr	r3, [pc, #56]	; (800dca8 <vPortFree+0xb8>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	43db      	mvns	r3, r3
 800dc72:	401a      	ands	r2, r3
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc78:	f7fe fc8c 	bl	800c594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	685a      	ldr	r2, [r3, #4]
 800dc80:	4b0a      	ldr	r3, [pc, #40]	; (800dcac <vPortFree+0xbc>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4413      	add	r3, r2
 800dc86:	4a09      	ldr	r2, [pc, #36]	; (800dcac <vPortFree+0xbc>)
 800dc88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc8a:	6938      	ldr	r0, [r7, #16]
 800dc8c:	f000 f874 	bl	800dd78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <vPortFree+0xc0>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	3301      	adds	r3, #1
 800dc96:	4a06      	ldr	r2, [pc, #24]	; (800dcb0 <vPortFree+0xc0>)
 800dc98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dc9a:	f7fe fc89 	bl	800c5b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc9e:	bf00      	nop
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	20005804 	.word	0x20005804
 800dcac:	200057f4 	.word	0x200057f4
 800dcb0:	20005800 	.word	0x20005800

0800dcb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dcba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dcbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dcc0:	4b27      	ldr	r3, [pc, #156]	; (800dd60 <prvHeapInit+0xac>)
 800dcc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00c      	beq.n	800dce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3307      	adds	r3, #7
 800dcd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f023 0307 	bic.w	r3, r3, #7
 800dcda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	4a1f      	ldr	r2, [pc, #124]	; (800dd60 <prvHeapInit+0xac>)
 800dce4:	4413      	add	r3, r2
 800dce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcec:	4a1d      	ldr	r2, [pc, #116]	; (800dd64 <prvHeapInit+0xb0>)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcf2:	4b1c      	ldr	r3, [pc, #112]	; (800dd64 <prvHeapInit+0xb0>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd00:	2208      	movs	r2, #8
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	1a9b      	subs	r3, r3, r2
 800dd06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f023 0307 	bic.w	r3, r3, #7
 800dd0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	4a15      	ldr	r2, [pc, #84]	; (800dd68 <prvHeapInit+0xb4>)
 800dd14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd16:	4b14      	ldr	r3, [pc, #80]	; (800dd68 <prvHeapInit+0xb4>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd1e:	4b12      	ldr	r3, [pc, #72]	; (800dd68 <prvHeapInit+0xb4>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2200      	movs	r2, #0
 800dd24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	1ad2      	subs	r2, r2, r3
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd34:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <prvHeapInit+0xb4>)
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	4a0a      	ldr	r2, [pc, #40]	; (800dd6c <prvHeapInit+0xb8>)
 800dd42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	4a09      	ldr	r2, [pc, #36]	; (800dd70 <prvHeapInit+0xbc>)
 800dd4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd4c:	4b09      	ldr	r3, [pc, #36]	; (800dd74 <prvHeapInit+0xc0>)
 800dd4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd52:	601a      	str	r2, [r3, #0]
}
 800dd54:	bf00      	nop
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	20001be8 	.word	0x20001be8
 800dd64:	200057e8 	.word	0x200057e8
 800dd68:	200057f0 	.word	0x200057f0
 800dd6c:	200057f8 	.word	0x200057f8
 800dd70:	200057f4 	.word	0x200057f4
 800dd74:	20005804 	.word	0x20005804

0800dd78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd80:	4b28      	ldr	r3, [pc, #160]	; (800de24 <prvInsertBlockIntoFreeList+0xac>)
 800dd82:	60fb      	str	r3, [r7, #12]
 800dd84:	e002      	b.n	800dd8c <prvInsertBlockIntoFreeList+0x14>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d8f7      	bhi.n	800dd86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	4413      	add	r3, r2
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d108      	bne.n	800ddba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	441a      	add	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	441a      	add	r2, r3
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d118      	bne.n	800de00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4b15      	ldr	r3, [pc, #84]	; (800de28 <prvInsertBlockIntoFreeList+0xb0>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d00d      	beq.n	800ddf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	685a      	ldr	r2, [r3, #4]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	441a      	add	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	601a      	str	r2, [r3, #0]
 800ddf4:	e008      	b.n	800de08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddf6:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <prvInsertBlockIntoFreeList+0xb0>)
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	e003      	b.n	800de08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d002      	beq.n	800de16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de16:	bf00      	nop
 800de18:	3714      	adds	r7, #20
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	200057e8 	.word	0x200057e8
 800de28:	200057f0 	.word	0x200057f0

0800de2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800de30:	2200      	movs	r2, #0
 800de32:	4912      	ldr	r1, [pc, #72]	; (800de7c <MX_USB_DEVICE_Init+0x50>)
 800de34:	4812      	ldr	r0, [pc, #72]	; (800de80 <MX_USB_DEVICE_Init+0x54>)
 800de36:	f7fb fd5f 	bl	80098f8 <USBD_Init>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d001      	beq.n	800de44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800de40:	f7f4 fa80 	bl	8002344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800de44:	490f      	ldr	r1, [pc, #60]	; (800de84 <MX_USB_DEVICE_Init+0x58>)
 800de46:	480e      	ldr	r0, [pc, #56]	; (800de80 <MX_USB_DEVICE_Init+0x54>)
 800de48:	f7fb fd86 	bl	8009958 <USBD_RegisterClass>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800de52:	f7f4 fa77 	bl	8002344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800de56:	490c      	ldr	r1, [pc, #48]	; (800de88 <MX_USB_DEVICE_Init+0x5c>)
 800de58:	4809      	ldr	r0, [pc, #36]	; (800de80 <MX_USB_DEVICE_Init+0x54>)
 800de5a:	f7fb fc77 	bl	800974c <USBD_CDC_RegisterInterface>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800de64:	f7f4 fa6e 	bl	8002344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de68:	4805      	ldr	r0, [pc, #20]	; (800de80 <MX_USB_DEVICE_Init+0x54>)
 800de6a:	f7fb fdab 	bl	80099c4 <USBD_Start>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de74:	f7f4 fa66 	bl	8002344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de78:	bf00      	nop
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	200005b0 	.word	0x200005b0
 800de80:	20005808 	.word	0x20005808
 800de84:	20000518 	.word	0x20000518
 800de88:	2000059c 	.word	0x2000059c

0800de8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de90:	2200      	movs	r2, #0
 800de92:	4905      	ldr	r1, [pc, #20]	; (800dea8 <CDC_Init_FS+0x1c>)
 800de94:	4805      	ldr	r0, [pc, #20]	; (800deac <CDC_Init_FS+0x20>)
 800de96:	f7fb fc73 	bl	8009780 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de9a:	4905      	ldr	r1, [pc, #20]	; (800deb0 <CDC_Init_FS+0x24>)
 800de9c:	4803      	ldr	r0, [pc, #12]	; (800deac <CDC_Init_FS+0x20>)
 800de9e:	f7fb fc91 	bl	80097c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dea2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	20005ee4 	.word	0x20005ee4
 800deac:	20005808 	.word	0x20005808
 800deb0:	20005ae4 	.word	0x20005ae4

0800deb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800deb4:	b480      	push	{r7}
 800deb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800deb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800deba:	4618      	mov	r0, r3
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	4603      	mov	r3, r0
 800decc:	6039      	str	r1, [r7, #0]
 800dece:	71fb      	strb	r3, [r7, #7]
 800ded0:	4613      	mov	r3, r2
 800ded2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ded4:	79fb      	ldrb	r3, [r7, #7]
 800ded6:	2b23      	cmp	r3, #35	; 0x23
 800ded8:	d84a      	bhi.n	800df70 <CDC_Control_FS+0xac>
 800deda:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <CDC_Control_FS+0x1c>)
 800dedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee0:	0800df71 	.word	0x0800df71
 800dee4:	0800df71 	.word	0x0800df71
 800dee8:	0800df71 	.word	0x0800df71
 800deec:	0800df71 	.word	0x0800df71
 800def0:	0800df71 	.word	0x0800df71
 800def4:	0800df71 	.word	0x0800df71
 800def8:	0800df71 	.word	0x0800df71
 800defc:	0800df71 	.word	0x0800df71
 800df00:	0800df71 	.word	0x0800df71
 800df04:	0800df71 	.word	0x0800df71
 800df08:	0800df71 	.word	0x0800df71
 800df0c:	0800df71 	.word	0x0800df71
 800df10:	0800df71 	.word	0x0800df71
 800df14:	0800df71 	.word	0x0800df71
 800df18:	0800df71 	.word	0x0800df71
 800df1c:	0800df71 	.word	0x0800df71
 800df20:	0800df71 	.word	0x0800df71
 800df24:	0800df71 	.word	0x0800df71
 800df28:	0800df71 	.word	0x0800df71
 800df2c:	0800df71 	.word	0x0800df71
 800df30:	0800df71 	.word	0x0800df71
 800df34:	0800df71 	.word	0x0800df71
 800df38:	0800df71 	.word	0x0800df71
 800df3c:	0800df71 	.word	0x0800df71
 800df40:	0800df71 	.word	0x0800df71
 800df44:	0800df71 	.word	0x0800df71
 800df48:	0800df71 	.word	0x0800df71
 800df4c:	0800df71 	.word	0x0800df71
 800df50:	0800df71 	.word	0x0800df71
 800df54:	0800df71 	.word	0x0800df71
 800df58:	0800df71 	.word	0x0800df71
 800df5c:	0800df71 	.word	0x0800df71
 800df60:	0800df71 	.word	0x0800df71
 800df64:	0800df71 	.word	0x0800df71
 800df68:	0800df71 	.word	0x0800df71
 800df6c:	0800df71 	.word	0x0800df71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df70:	bf00      	nop
  }

  return (USBD_OK);
 800df72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df74:	4618      	mov	r0, r3
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800df8a:	6879      	ldr	r1, [r7, #4]
 800df8c:	4805      	ldr	r0, [pc, #20]	; (800dfa4 <CDC_Receive_FS+0x24>)
 800df8e:	f7fb fc19 	bl	80097c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800df92:	4804      	ldr	r0, [pc, #16]	; (800dfa4 <CDC_Receive_FS+0x24>)
 800df94:	f7fb fc7a 	bl	800988c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800df98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20005808 	.word	0x20005808

0800dfa8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dfb8:	4b0d      	ldr	r3, [pc, #52]	; (800dff0 <CDC_Transmit_FS+0x48>)
 800dfba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e00b      	b.n	800dfe6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dfce:	887b      	ldrh	r3, [r7, #2]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	6879      	ldr	r1, [r7, #4]
 800dfd4:	4806      	ldr	r0, [pc, #24]	; (800dff0 <CDC_Transmit_FS+0x48>)
 800dfd6:	f7fb fbd3 	bl	8009780 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dfda:	4805      	ldr	r0, [pc, #20]	; (800dff0 <CDC_Transmit_FS+0x48>)
 800dfdc:	f7fb fc10 	bl	8009800 <USBD_CDC_TransmitPacket>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	20005808 	.word	0x20005808

0800dff4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b087      	sub	sp, #28
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	4613      	mov	r3, r2
 800e000:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	371c      	adds	r7, #28
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
	...

0800e018 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	4603      	mov	r3, r0
 800e020:	6039      	str	r1, [r7, #0]
 800e022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2212      	movs	r2, #18
 800e028:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e02a:	4b03      	ldr	r3, [pc, #12]	; (800e038 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	200005cc 	.word	0x200005cc

0800e03c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	4603      	mov	r3, r0
 800e044:	6039      	str	r1, [r7, #0]
 800e046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	2204      	movs	r2, #4
 800e04c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e04e:	4b03      	ldr	r3, [pc, #12]	; (800e05c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e050:	4618      	mov	r0, r3
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	200005e0 	.word	0x200005e0

0800e060 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	4603      	mov	r3, r0
 800e068:	6039      	str	r1, [r7, #0]
 800e06a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d105      	bne.n	800e07e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e072:	683a      	ldr	r2, [r7, #0]
 800e074:	4907      	ldr	r1, [pc, #28]	; (800e094 <USBD_FS_ProductStrDescriptor+0x34>)
 800e076:	4808      	ldr	r0, [pc, #32]	; (800e098 <USBD_FS_ProductStrDescriptor+0x38>)
 800e078:	f7fc fe50 	bl	800ad1c <USBD_GetString>
 800e07c:	e004      	b.n	800e088 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	4904      	ldr	r1, [pc, #16]	; (800e094 <USBD_FS_ProductStrDescriptor+0x34>)
 800e082:	4805      	ldr	r0, [pc, #20]	; (800e098 <USBD_FS_ProductStrDescriptor+0x38>)
 800e084:	f7fc fe4a 	bl	800ad1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e088:	4b02      	ldr	r3, [pc, #8]	; (800e094 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	200062e4 	.word	0x200062e4
 800e098:	0800f3b8 	.word	0x0800f3b8

0800e09c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	6039      	str	r1, [r7, #0]
 800e0a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	4904      	ldr	r1, [pc, #16]	; (800e0bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e0ac:	4804      	ldr	r0, [pc, #16]	; (800e0c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e0ae:	f7fc fe35 	bl	800ad1c <USBD_GetString>
  return USBD_StrDesc;
 800e0b2:	4b02      	ldr	r3, [pc, #8]	; (800e0bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	200062e4 	.word	0x200062e4
 800e0c0:	0800f3d0 	.word	0x0800f3d0

0800e0c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	6039      	str	r1, [r7, #0]
 800e0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	221a      	movs	r2, #26
 800e0d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e0d6:	f000 f843 	bl	800e160 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e0da:	4b02      	ldr	r3, [pc, #8]	; (800e0e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	200005e4 	.word	0x200005e4

0800e0e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	6039      	str	r1, [r7, #0]
 800e0f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d105      	bne.n	800e106 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	4907      	ldr	r1, [pc, #28]	; (800e11c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0fe:	4808      	ldr	r0, [pc, #32]	; (800e120 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e100:	f7fc fe0c 	bl	800ad1c <USBD_GetString>
 800e104:	e004      	b.n	800e110 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	4904      	ldr	r1, [pc, #16]	; (800e11c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e10a:	4805      	ldr	r0, [pc, #20]	; (800e120 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e10c:	f7fc fe06 	bl	800ad1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e110:	4b02      	ldr	r3, [pc, #8]	; (800e11c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	200062e4 	.word	0x200062e4
 800e120:	0800f3e4 	.word	0x0800f3e4

0800e124 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	6039      	str	r1, [r7, #0]
 800e12e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d105      	bne.n	800e142 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	4907      	ldr	r1, [pc, #28]	; (800e158 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e13a:	4808      	ldr	r0, [pc, #32]	; (800e15c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e13c:	f7fc fdee 	bl	800ad1c <USBD_GetString>
 800e140:	e004      	b.n	800e14c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	4904      	ldr	r1, [pc, #16]	; (800e158 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e146:	4805      	ldr	r0, [pc, #20]	; (800e15c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e148:	f7fc fde8 	bl	800ad1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e14c:	4b02      	ldr	r3, [pc, #8]	; (800e158 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	200062e4 	.word	0x200062e4
 800e15c:	0800f3f0 	.word	0x0800f3f0

0800e160 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e166:	4b0f      	ldr	r3, [pc, #60]	; (800e1a4 <Get_SerialNum+0x44>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e16c:	4b0e      	ldr	r3, [pc, #56]	; (800e1a8 <Get_SerialNum+0x48>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e172:	4b0e      	ldr	r3, [pc, #56]	; (800e1ac <Get_SerialNum+0x4c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4413      	add	r3, r2
 800e17e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d009      	beq.n	800e19a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e186:	2208      	movs	r2, #8
 800e188:	4909      	ldr	r1, [pc, #36]	; (800e1b0 <Get_SerialNum+0x50>)
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f000 f814 	bl	800e1b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e190:	2204      	movs	r2, #4
 800e192:	4908      	ldr	r1, [pc, #32]	; (800e1b4 <Get_SerialNum+0x54>)
 800e194:	68b8      	ldr	r0, [r7, #8]
 800e196:	f000 f80f 	bl	800e1b8 <IntToUnicode>
  }
}
 800e19a:	bf00      	nop
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	1fff7a10 	.word	0x1fff7a10
 800e1a8:	1fff7a14 	.word	0x1fff7a14
 800e1ac:	1fff7a18 	.word	0x1fff7a18
 800e1b0:	200005e6 	.word	0x200005e6
 800e1b4:	200005f6 	.word	0x200005f6

0800e1b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b087      	sub	sp, #28
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	75fb      	strb	r3, [r7, #23]
 800e1ce:	e027      	b.n	800e220 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	0f1b      	lsrs	r3, r3, #28
 800e1d4:	2b09      	cmp	r3, #9
 800e1d6:	d80b      	bhi.n	800e1f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	0f1b      	lsrs	r3, r3, #28
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	005b      	lsls	r3, r3, #1
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	440b      	add	r3, r1
 800e1e8:	3230      	adds	r2, #48	; 0x30
 800e1ea:	b2d2      	uxtb	r2, r2
 800e1ec:	701a      	strb	r2, [r3, #0]
 800e1ee:	e00a      	b.n	800e206 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	0f1b      	lsrs	r3, r3, #28
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	7dfb      	ldrb	r3, [r7, #23]
 800e1f8:	005b      	lsls	r3, r3, #1
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	440b      	add	r3, r1
 800e200:	3237      	adds	r2, #55	; 0x37
 800e202:	b2d2      	uxtb	r2, r2
 800e204:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	011b      	lsls	r3, r3, #4
 800e20a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
 800e20e:	005b      	lsls	r3, r3, #1
 800e210:	3301      	adds	r3, #1
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	4413      	add	r3, r2
 800e216:	2200      	movs	r2, #0
 800e218:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
 800e21c:	3301      	adds	r3, #1
 800e21e:	75fb      	strb	r3, [r7, #23]
 800e220:	7dfa      	ldrb	r2, [r7, #23]
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	429a      	cmp	r2, r3
 800e226:	d3d3      	bcc.n	800e1d0 <IntToUnicode+0x18>
  }
}
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
 800e22c:	371c      	adds	r7, #28
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
	...

0800e238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08a      	sub	sp, #40	; 0x28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e240:	f107 0314 	add.w	r3, r7, #20
 800e244:	2200      	movs	r2, #0
 800e246:	601a      	str	r2, [r3, #0]
 800e248:	605a      	str	r2, [r3, #4]
 800e24a:	609a      	str	r2, [r3, #8]
 800e24c:	60da      	str	r2, [r3, #12]
 800e24e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e258:	d13a      	bne.n	800e2d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e25a:	2300      	movs	r3, #0
 800e25c:	613b      	str	r3, [r7, #16]
 800e25e:	4b1e      	ldr	r3, [pc, #120]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e262:	4a1d      	ldr	r2, [pc, #116]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e264:	f043 0301 	orr.w	r3, r3, #1
 800e268:	6313      	str	r3, [r2, #48]	; 0x30
 800e26a:	4b1b      	ldr	r3, [pc, #108]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26e:	f003 0301 	and.w	r3, r3, #1
 800e272:	613b      	str	r3, [r7, #16]
 800e274:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e276:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e27a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e27c:	2302      	movs	r3, #2
 800e27e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e280:	2300      	movs	r3, #0
 800e282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e284:	2303      	movs	r3, #3
 800e286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e288:	230a      	movs	r3, #10
 800e28a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e28c:	f107 0314 	add.w	r3, r7, #20
 800e290:	4619      	mov	r1, r3
 800e292:	4812      	ldr	r0, [pc, #72]	; (800e2dc <HAL_PCD_MspInit+0xa4>)
 800e294:	f7f4 fc1c 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e298:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e29c:	4a0e      	ldr	r2, [pc, #56]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2a2:	6353      	str	r3, [r2, #52]	; 0x34
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	60fb      	str	r3, [r7, #12]
 800e2a8:	4b0b      	ldr	r3, [pc, #44]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ac:	4a0a      	ldr	r2, [pc, #40]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e2ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2b2:	6453      	str	r3, [r2, #68]	; 0x44
 800e2b4:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e2b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2bc:	60fb      	str	r3, [r7, #12]
 800e2be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2105      	movs	r1, #5
 800e2c4:	2043      	movs	r0, #67	; 0x43
 800e2c6:	f7f4 fbd9 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e2ca:	2043      	movs	r0, #67	; 0x43
 800e2cc:	f7f4 fbf2 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e2d0:	bf00      	nop
 800e2d2:	3728      	adds	r7, #40	; 0x28
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	40023800 	.word	0x40023800
 800e2dc:	40020000 	.word	0x40020000

0800e2e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f7fb fbb1 	bl	8009a5e <USBD_LL_SetupStage>
}
 800e2fc:	bf00      	nop
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	460b      	mov	r3, r1
 800e30e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e316:	78fa      	ldrb	r2, [r7, #3]
 800e318:	6879      	ldr	r1, [r7, #4]
 800e31a:	4613      	mov	r3, r2
 800e31c:	00db      	lsls	r3, r3, #3
 800e31e:	4413      	add	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	440b      	add	r3, r1
 800e324:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	78fb      	ldrb	r3, [r7, #3]
 800e32c:	4619      	mov	r1, r3
 800e32e:	f7fb fbeb 	bl	8009b08 <USBD_LL_DataOutStage>
}
 800e332:	bf00      	nop
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b082      	sub	sp, #8
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
 800e342:	460b      	mov	r3, r1
 800e344:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e34c:	78fa      	ldrb	r2, [r7, #3]
 800e34e:	6879      	ldr	r1, [r7, #4]
 800e350:	4613      	mov	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	4413      	add	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	440b      	add	r3, r1
 800e35a:	334c      	adds	r3, #76	; 0x4c
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	78fb      	ldrb	r3, [r7, #3]
 800e360:	4619      	mov	r1, r3
 800e362:	f7fb fc84 	bl	8009c6e <USBD_LL_DataInStage>
}
 800e366:	bf00      	nop
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b082      	sub	sp, #8
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fb fdb8 	bl	8009ef2 <USBD_LL_SOF>
}
 800e382:	bf00      	nop
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b084      	sub	sp, #16
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e392:	2301      	movs	r3, #1
 800e394:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d001      	beq.n	800e3a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e39e:	f7f3 ffd1 	bl	8002344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3a8:	7bfa      	ldrb	r2, [r7, #15]
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fb fd62 	bl	8009e76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fb fd0a 	bl	8009dd2 <USBD_LL_Reset>
}
 800e3be:	bf00      	nop
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
	...

0800e3c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fb fd5d 	bl	8009e96 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	6812      	ldr	r2, [r2, #0]
 800e3ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3ee:	f043 0301 	orr.w	r3, r3, #1
 800e3f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a1b      	ldr	r3, [r3, #32]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d005      	beq.n	800e408 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e3fc:	4b04      	ldr	r3, [pc, #16]	; (800e410 <HAL_PCD_SuspendCallback+0x48>)
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	4a03      	ldr	r2, [pc, #12]	; (800e410 <HAL_PCD_SuspendCallback+0x48>)
 800e402:	f043 0306 	orr.w	r3, r3, #6
 800e406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e408:	bf00      	nop
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	e000ed00 	.word	0xe000ed00

0800e414 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e422:	4618      	mov	r0, r3
 800e424:	f7fb fd4d 	bl	8009ec2 <USBD_LL_Resume>
}
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e442:	78fa      	ldrb	r2, [r7, #3]
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f7fb fda5 	bl	8009f96 <USBD_LL_IsoOUTIncomplete>
}
 800e44c:	bf00      	nop
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e466:	78fa      	ldrb	r2, [r7, #3]
 800e468:	4611      	mov	r1, r2
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fb fd61 	bl	8009f32 <USBD_LL_IsoINIncomplete>
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e486:	4618      	mov	r0, r3
 800e488:	f7fb fdb7 	bl	8009ffa <USBD_LL_DevConnected>
}
 800e48c:	bf00      	nop
 800e48e:	3708      	adds	r7, #8
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fb fdb4 	bl	800a010 <USBD_LL_DevDisconnected>
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d13c      	bne.n	800e53a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e4c0:	4a20      	ldr	r2, [pc, #128]	; (800e544 <USBD_LL_Init+0x94>)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4a1e      	ldr	r2, [pc, #120]	; (800e544 <USBD_LL_Init+0x94>)
 800e4cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e4d0:	4b1c      	ldr	r3, [pc, #112]	; (800e544 <USBD_LL_Init+0x94>)
 800e4d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e4d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e4d8:	4b1a      	ldr	r3, [pc, #104]	; (800e544 <USBD_LL_Init+0x94>)
 800e4da:	2204      	movs	r2, #4
 800e4dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e4de:	4b19      	ldr	r3, [pc, #100]	; (800e544 <USBD_LL_Init+0x94>)
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e4e4:	4b17      	ldr	r3, [pc, #92]	; (800e544 <USBD_LL_Init+0x94>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e4ea:	4b16      	ldr	r3, [pc, #88]	; (800e544 <USBD_LL_Init+0x94>)
 800e4ec:	2202      	movs	r2, #2
 800e4ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e4f0:	4b14      	ldr	r3, [pc, #80]	; (800e544 <USBD_LL_Init+0x94>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e4f6:	4b13      	ldr	r3, [pc, #76]	; (800e544 <USBD_LL_Init+0x94>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e4fc:	4b11      	ldr	r3, [pc, #68]	; (800e544 <USBD_LL_Init+0x94>)
 800e4fe:	2200      	movs	r2, #0
 800e500:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e502:	4b10      	ldr	r3, [pc, #64]	; (800e544 <USBD_LL_Init+0x94>)
 800e504:	2200      	movs	r2, #0
 800e506:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e508:	4b0e      	ldr	r3, [pc, #56]	; (800e544 <USBD_LL_Init+0x94>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e50e:	480d      	ldr	r0, [pc, #52]	; (800e544 <USBD_LL_Init+0x94>)
 800e510:	f7f5 fc53 	bl	8003dba <HAL_PCD_Init>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e51a:	f7f3 ff13 	bl	8002344 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e51e:	2180      	movs	r1, #128	; 0x80
 800e520:	4808      	ldr	r0, [pc, #32]	; (800e544 <USBD_LL_Init+0x94>)
 800e522:	f7f6 feaa 	bl	800527a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e526:	2240      	movs	r2, #64	; 0x40
 800e528:	2100      	movs	r1, #0
 800e52a:	4806      	ldr	r0, [pc, #24]	; (800e544 <USBD_LL_Init+0x94>)
 800e52c:	f7f6 fe5e 	bl	80051ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e530:	2280      	movs	r2, #128	; 0x80
 800e532:	2101      	movs	r1, #1
 800e534:	4803      	ldr	r0, [pc, #12]	; (800e544 <USBD_LL_Init+0x94>)
 800e536:	f7f6 fe59 	bl	80051ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	200064e4 	.word	0x200064e4

0800e548 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e550:	2300      	movs	r3, #0
 800e552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e554:	2300      	movs	r3, #0
 800e556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f5 fd48 	bl	8003ff4 <HAL_PCD_Start>
 800e564:	4603      	mov	r3, r0
 800e566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e568:	7bfb      	ldrb	r3, [r7, #15]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 f942 	bl	800e7f4 <USBD_Get_USB_Status>
 800e570:	4603      	mov	r3, r0
 800e572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e574:	7bbb      	ldrb	r3, [r7, #14]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b084      	sub	sp, #16
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	4608      	mov	r0, r1
 800e588:	4611      	mov	r1, r2
 800e58a:	461a      	mov	r2, r3
 800e58c:	4603      	mov	r3, r0
 800e58e:	70fb      	strb	r3, [r7, #3]
 800e590:	460b      	mov	r3, r1
 800e592:	70bb      	strb	r3, [r7, #2]
 800e594:	4613      	mov	r3, r2
 800e596:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e598:	2300      	movs	r3, #0
 800e59a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e59c:	2300      	movs	r3, #0
 800e59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e5a6:	78bb      	ldrb	r3, [r7, #2]
 800e5a8:	883a      	ldrh	r2, [r7, #0]
 800e5aa:	78f9      	ldrb	r1, [r7, #3]
 800e5ac:	f7f6 fa19 	bl	80049e2 <HAL_PCD_EP_Open>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f000 f91c 	bl	800e7f4 <USBD_Get_USB_Status>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5e4:	78fa      	ldrb	r2, [r7, #3]
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7f6 fa62 	bl	8004ab2 <HAL_PCD_EP_Close>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f000 f8fd 	bl	800e7f4 <USBD_Get_USB_Status>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	460b      	mov	r3, r1
 800e612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e618:	2300      	movs	r3, #0
 800e61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e622:	78fa      	ldrb	r2, [r7, #3]
 800e624:	4611      	mov	r1, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f7f6 fb3a 	bl	8004ca0 <HAL_PCD_EP_SetStall>
 800e62c:	4603      	mov	r3, r0
 800e62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e630:	7bfb      	ldrb	r3, [r7, #15]
 800e632:	4618      	mov	r0, r3
 800e634:	f000 f8de 	bl	800e7f4 <USBD_Get_USB_Status>
 800e638:	4603      	mov	r3, r0
 800e63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	460b      	mov	r3, r1
 800e650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e656:	2300      	movs	r3, #0
 800e658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e660:	78fa      	ldrb	r2, [r7, #3]
 800e662:	4611      	mov	r1, r2
 800e664:	4618      	mov	r0, r3
 800e666:	f7f6 fb7f 	bl	8004d68 <HAL_PCD_EP_ClrStall>
 800e66a:	4603      	mov	r3, r0
 800e66c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e66e:	7bfb      	ldrb	r3, [r7, #15]
 800e670:	4618      	mov	r0, r3
 800e672:	f000 f8bf 	bl	800e7f4 <USBD_Get_USB_Status>
 800e676:	4603      	mov	r3, r0
 800e678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e696:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	da0b      	bge.n	800e6b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6a6:	68f9      	ldr	r1, [r7, #12]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	4413      	add	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	440b      	add	r3, r1
 800e6b2:	333e      	adds	r3, #62	; 0x3e
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	e00b      	b.n	800e6d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e6b8:	78fb      	ldrb	r3, [r7, #3]
 800e6ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6be:	68f9      	ldr	r1, [r7, #12]
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	4413      	add	r3, r2
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	440b      	add	r3, r1
 800e6ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e6ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6f6:	78fa      	ldrb	r2, [r7, #3]
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f6 f94c 	bl	8004998 <HAL_PCD_SetAddress>
 800e700:	4603      	mov	r3, r0
 800e702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	4618      	mov	r0, r3
 800e708:	f000 f874 	bl	800e7f4 <USBD_Get_USB_Status>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e710:	7bbb      	ldrb	r3, [r7, #14]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b086      	sub	sp, #24
 800e71e:	af00      	add	r7, sp, #0
 800e720:	60f8      	str	r0, [r7, #12]
 800e722:	607a      	str	r2, [r7, #4]
 800e724:	603b      	str	r3, [r7, #0]
 800e726:	460b      	mov	r3, r1
 800e728:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e72a:	2300      	movs	r3, #0
 800e72c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e738:	7af9      	ldrb	r1, [r7, #11]
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	f7f6 fa65 	bl	8004c0c <HAL_PCD_EP_Transmit>
 800e742:	4603      	mov	r3, r0
 800e744:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	4618      	mov	r0, r3
 800e74a:	f000 f853 	bl	800e7f4 <USBD_Get_USB_Status>
 800e74e:	4603      	mov	r3, r0
 800e750:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e752:	7dbb      	ldrb	r3, [r7, #22]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	607a      	str	r2, [r7, #4]
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	460b      	mov	r3, r1
 800e76a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e77a:	7af9      	ldrb	r1, [r7, #11]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	f7f6 f9e1 	bl	8004b46 <HAL_PCD_EP_Receive>
 800e784:	4603      	mov	r3, r0
 800e786:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e788:	7dfb      	ldrb	r3, [r7, #23]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 f832 	bl	800e7f4 <USBD_Get_USB_Status>
 800e790:	4603      	mov	r3, r0
 800e792:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e794:	7dbb      	ldrb	r3, [r7, #22]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3718      	adds	r7, #24
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7b0:	78fa      	ldrb	r2, [r7, #3]
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f6 fa11 	bl	8004bdc <HAL_PCD_EP_GetRxCount>
 800e7ba:	4603      	mov	r3, r0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e7cc:	4b03      	ldr	r3, [pc, #12]	; (800e7dc <USBD_static_malloc+0x18>)
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	370c      	adds	r7, #12
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	200069f0 	.word	0x200069f0

0800e7e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]

}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	2b03      	cmp	r3, #3
 800e806:	d817      	bhi.n	800e838 <USBD_Get_USB_Status+0x44>
 800e808:	a201      	add	r2, pc, #4	; (adr r2, 800e810 <USBD_Get_USB_Status+0x1c>)
 800e80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80e:	bf00      	nop
 800e810:	0800e821 	.word	0x0800e821
 800e814:	0800e827 	.word	0x0800e827
 800e818:	0800e82d 	.word	0x0800e82d
 800e81c:	0800e833 	.word	0x0800e833
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
    break;
 800e824:	e00b      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e826:	2303      	movs	r3, #3
 800e828:	73fb      	strb	r3, [r7, #15]
    break;
 800e82a:	e008      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e82c:	2301      	movs	r3, #1
 800e82e:	73fb      	strb	r3, [r7, #15]
    break;
 800e830:	e005      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e832:	2303      	movs	r3, #3
 800e834:	73fb      	strb	r3, [r7, #15]
    break;
 800e836:	e002      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e838:	2303      	movs	r3, #3
 800e83a:	73fb      	strb	r3, [r7, #15]
    break;
 800e83c:	bf00      	nop
  }
  return usb_status;
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <__errno>:
 800e84c:	4b01      	ldr	r3, [pc, #4]	; (800e854 <__errno+0x8>)
 800e84e:	6818      	ldr	r0, [r3, #0]
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20000600 	.word	0x20000600

0800e858 <__libc_init_array>:
 800e858:	b570      	push	{r4, r5, r6, lr}
 800e85a:	4d0d      	ldr	r5, [pc, #52]	; (800e890 <__libc_init_array+0x38>)
 800e85c:	4c0d      	ldr	r4, [pc, #52]	; (800e894 <__libc_init_array+0x3c>)
 800e85e:	1b64      	subs	r4, r4, r5
 800e860:	10a4      	asrs	r4, r4, #2
 800e862:	2600      	movs	r6, #0
 800e864:	42a6      	cmp	r6, r4
 800e866:	d109      	bne.n	800e87c <__libc_init_array+0x24>
 800e868:	4d0b      	ldr	r5, [pc, #44]	; (800e898 <__libc_init_array+0x40>)
 800e86a:	4c0c      	ldr	r4, [pc, #48]	; (800e89c <__libc_init_array+0x44>)
 800e86c:	f000 fcb2 	bl	800f1d4 <_init>
 800e870:	1b64      	subs	r4, r4, r5
 800e872:	10a4      	asrs	r4, r4, #2
 800e874:	2600      	movs	r6, #0
 800e876:	42a6      	cmp	r6, r4
 800e878:	d105      	bne.n	800e886 <__libc_init_array+0x2e>
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e880:	4798      	blx	r3
 800e882:	3601      	adds	r6, #1
 800e884:	e7ee      	b.n	800e864 <__libc_init_array+0xc>
 800e886:	f855 3b04 	ldr.w	r3, [r5], #4
 800e88a:	4798      	blx	r3
 800e88c:	3601      	adds	r6, #1
 800e88e:	e7f2      	b.n	800e876 <__libc_init_array+0x1e>
 800e890:	0800f794 	.word	0x0800f794
 800e894:	0800f794 	.word	0x0800f794
 800e898:	0800f794 	.word	0x0800f794
 800e89c:	0800f798 	.word	0x0800f798

0800e8a0 <malloc>:
 800e8a0:	4b02      	ldr	r3, [pc, #8]	; (800e8ac <malloc+0xc>)
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	6818      	ldr	r0, [r3, #0]
 800e8a6:	f000 b88d 	b.w	800e9c4 <_malloc_r>
 800e8aa:	bf00      	nop
 800e8ac:	20000600 	.word	0x20000600

0800e8b0 <free>:
 800e8b0:	4b02      	ldr	r3, [pc, #8]	; (800e8bc <free+0xc>)
 800e8b2:	4601      	mov	r1, r0
 800e8b4:	6818      	ldr	r0, [r3, #0]
 800e8b6:	f000 b819 	b.w	800e8ec <_free_r>
 800e8ba:	bf00      	nop
 800e8bc:	20000600 	.word	0x20000600

0800e8c0 <memcpy>:
 800e8c0:	440a      	add	r2, r1
 800e8c2:	4291      	cmp	r1, r2
 800e8c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8c8:	d100      	bne.n	800e8cc <memcpy+0xc>
 800e8ca:	4770      	bx	lr
 800e8cc:	b510      	push	{r4, lr}
 800e8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8d6:	4291      	cmp	r1, r2
 800e8d8:	d1f9      	bne.n	800e8ce <memcpy+0xe>
 800e8da:	bd10      	pop	{r4, pc}

0800e8dc <memset>:
 800e8dc:	4402      	add	r2, r0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d100      	bne.n	800e8e6 <memset+0xa>
 800e8e4:	4770      	bx	lr
 800e8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800e8ea:	e7f9      	b.n	800e8e0 <memset+0x4>

0800e8ec <_free_r>:
 800e8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8ee:	2900      	cmp	r1, #0
 800e8f0:	d044      	beq.n	800e97c <_free_r+0x90>
 800e8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f6:	9001      	str	r0, [sp, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e8fe:	bfb8      	it	lt
 800e900:	18e4      	addlt	r4, r4, r3
 800e902:	f000 f917 	bl	800eb34 <__malloc_lock>
 800e906:	4a1e      	ldr	r2, [pc, #120]	; (800e980 <_free_r+0x94>)
 800e908:	9801      	ldr	r0, [sp, #4]
 800e90a:	6813      	ldr	r3, [r2, #0]
 800e90c:	b933      	cbnz	r3, 800e91c <_free_r+0x30>
 800e90e:	6063      	str	r3, [r4, #4]
 800e910:	6014      	str	r4, [r2, #0]
 800e912:	b003      	add	sp, #12
 800e914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e918:	f000 b912 	b.w	800eb40 <__malloc_unlock>
 800e91c:	42a3      	cmp	r3, r4
 800e91e:	d908      	bls.n	800e932 <_free_r+0x46>
 800e920:	6825      	ldr	r5, [r4, #0]
 800e922:	1961      	adds	r1, r4, r5
 800e924:	428b      	cmp	r3, r1
 800e926:	bf01      	itttt	eq
 800e928:	6819      	ldreq	r1, [r3, #0]
 800e92a:	685b      	ldreq	r3, [r3, #4]
 800e92c:	1949      	addeq	r1, r1, r5
 800e92e:	6021      	streq	r1, [r4, #0]
 800e930:	e7ed      	b.n	800e90e <_free_r+0x22>
 800e932:	461a      	mov	r2, r3
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	b10b      	cbz	r3, 800e93c <_free_r+0x50>
 800e938:	42a3      	cmp	r3, r4
 800e93a:	d9fa      	bls.n	800e932 <_free_r+0x46>
 800e93c:	6811      	ldr	r1, [r2, #0]
 800e93e:	1855      	adds	r5, r2, r1
 800e940:	42a5      	cmp	r5, r4
 800e942:	d10b      	bne.n	800e95c <_free_r+0x70>
 800e944:	6824      	ldr	r4, [r4, #0]
 800e946:	4421      	add	r1, r4
 800e948:	1854      	adds	r4, r2, r1
 800e94a:	42a3      	cmp	r3, r4
 800e94c:	6011      	str	r1, [r2, #0]
 800e94e:	d1e0      	bne.n	800e912 <_free_r+0x26>
 800e950:	681c      	ldr	r4, [r3, #0]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	6053      	str	r3, [r2, #4]
 800e956:	4421      	add	r1, r4
 800e958:	6011      	str	r1, [r2, #0]
 800e95a:	e7da      	b.n	800e912 <_free_r+0x26>
 800e95c:	d902      	bls.n	800e964 <_free_r+0x78>
 800e95e:	230c      	movs	r3, #12
 800e960:	6003      	str	r3, [r0, #0]
 800e962:	e7d6      	b.n	800e912 <_free_r+0x26>
 800e964:	6825      	ldr	r5, [r4, #0]
 800e966:	1961      	adds	r1, r4, r5
 800e968:	428b      	cmp	r3, r1
 800e96a:	bf04      	itt	eq
 800e96c:	6819      	ldreq	r1, [r3, #0]
 800e96e:	685b      	ldreq	r3, [r3, #4]
 800e970:	6063      	str	r3, [r4, #4]
 800e972:	bf04      	itt	eq
 800e974:	1949      	addeq	r1, r1, r5
 800e976:	6021      	streq	r1, [r4, #0]
 800e978:	6054      	str	r4, [r2, #4]
 800e97a:	e7ca      	b.n	800e912 <_free_r+0x26>
 800e97c:	b003      	add	sp, #12
 800e97e:	bd30      	pop	{r4, r5, pc}
 800e980:	20006c10 	.word	0x20006c10

0800e984 <sbrk_aligned>:
 800e984:	b570      	push	{r4, r5, r6, lr}
 800e986:	4e0e      	ldr	r6, [pc, #56]	; (800e9c0 <sbrk_aligned+0x3c>)
 800e988:	460c      	mov	r4, r1
 800e98a:	6831      	ldr	r1, [r6, #0]
 800e98c:	4605      	mov	r5, r0
 800e98e:	b911      	cbnz	r1, 800e996 <sbrk_aligned+0x12>
 800e990:	f000 f88c 	bl	800eaac <_sbrk_r>
 800e994:	6030      	str	r0, [r6, #0]
 800e996:	4621      	mov	r1, r4
 800e998:	4628      	mov	r0, r5
 800e99a:	f000 f887 	bl	800eaac <_sbrk_r>
 800e99e:	1c43      	adds	r3, r0, #1
 800e9a0:	d00a      	beq.n	800e9b8 <sbrk_aligned+0x34>
 800e9a2:	1cc4      	adds	r4, r0, #3
 800e9a4:	f024 0403 	bic.w	r4, r4, #3
 800e9a8:	42a0      	cmp	r0, r4
 800e9aa:	d007      	beq.n	800e9bc <sbrk_aligned+0x38>
 800e9ac:	1a21      	subs	r1, r4, r0
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f000 f87c 	bl	800eaac <_sbrk_r>
 800e9b4:	3001      	adds	r0, #1
 800e9b6:	d101      	bne.n	800e9bc <sbrk_aligned+0x38>
 800e9b8:	f04f 34ff 	mov.w	r4, #4294967295
 800e9bc:	4620      	mov	r0, r4
 800e9be:	bd70      	pop	{r4, r5, r6, pc}
 800e9c0:	20006c14 	.word	0x20006c14

0800e9c4 <_malloc_r>:
 800e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c8:	1ccd      	adds	r5, r1, #3
 800e9ca:	f025 0503 	bic.w	r5, r5, #3
 800e9ce:	3508      	adds	r5, #8
 800e9d0:	2d0c      	cmp	r5, #12
 800e9d2:	bf38      	it	cc
 800e9d4:	250c      	movcc	r5, #12
 800e9d6:	2d00      	cmp	r5, #0
 800e9d8:	4607      	mov	r7, r0
 800e9da:	db01      	blt.n	800e9e0 <_malloc_r+0x1c>
 800e9dc:	42a9      	cmp	r1, r5
 800e9de:	d905      	bls.n	800e9ec <_malloc_r+0x28>
 800e9e0:	230c      	movs	r3, #12
 800e9e2:	603b      	str	r3, [r7, #0]
 800e9e4:	2600      	movs	r6, #0
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ec:	4e2e      	ldr	r6, [pc, #184]	; (800eaa8 <_malloc_r+0xe4>)
 800e9ee:	f000 f8a1 	bl	800eb34 <__malloc_lock>
 800e9f2:	6833      	ldr	r3, [r6, #0]
 800e9f4:	461c      	mov	r4, r3
 800e9f6:	bb34      	cbnz	r4, 800ea46 <_malloc_r+0x82>
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4638      	mov	r0, r7
 800e9fc:	f7ff ffc2 	bl	800e984 <sbrk_aligned>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	4604      	mov	r4, r0
 800ea04:	d14d      	bne.n	800eaa2 <_malloc_r+0xde>
 800ea06:	6834      	ldr	r4, [r6, #0]
 800ea08:	4626      	mov	r6, r4
 800ea0a:	2e00      	cmp	r6, #0
 800ea0c:	d140      	bne.n	800ea90 <_malloc_r+0xcc>
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	4631      	mov	r1, r6
 800ea12:	4638      	mov	r0, r7
 800ea14:	eb04 0803 	add.w	r8, r4, r3
 800ea18:	f000 f848 	bl	800eaac <_sbrk_r>
 800ea1c:	4580      	cmp	r8, r0
 800ea1e:	d13a      	bne.n	800ea96 <_malloc_r+0xd2>
 800ea20:	6821      	ldr	r1, [r4, #0]
 800ea22:	3503      	adds	r5, #3
 800ea24:	1a6d      	subs	r5, r5, r1
 800ea26:	f025 0503 	bic.w	r5, r5, #3
 800ea2a:	3508      	adds	r5, #8
 800ea2c:	2d0c      	cmp	r5, #12
 800ea2e:	bf38      	it	cc
 800ea30:	250c      	movcc	r5, #12
 800ea32:	4629      	mov	r1, r5
 800ea34:	4638      	mov	r0, r7
 800ea36:	f7ff ffa5 	bl	800e984 <sbrk_aligned>
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	d02b      	beq.n	800ea96 <_malloc_r+0xd2>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	442b      	add	r3, r5
 800ea42:	6023      	str	r3, [r4, #0]
 800ea44:	e00e      	b.n	800ea64 <_malloc_r+0xa0>
 800ea46:	6822      	ldr	r2, [r4, #0]
 800ea48:	1b52      	subs	r2, r2, r5
 800ea4a:	d41e      	bmi.n	800ea8a <_malloc_r+0xc6>
 800ea4c:	2a0b      	cmp	r2, #11
 800ea4e:	d916      	bls.n	800ea7e <_malloc_r+0xba>
 800ea50:	1961      	adds	r1, r4, r5
 800ea52:	42a3      	cmp	r3, r4
 800ea54:	6025      	str	r5, [r4, #0]
 800ea56:	bf18      	it	ne
 800ea58:	6059      	strne	r1, [r3, #4]
 800ea5a:	6863      	ldr	r3, [r4, #4]
 800ea5c:	bf08      	it	eq
 800ea5e:	6031      	streq	r1, [r6, #0]
 800ea60:	5162      	str	r2, [r4, r5]
 800ea62:	604b      	str	r3, [r1, #4]
 800ea64:	4638      	mov	r0, r7
 800ea66:	f104 060b 	add.w	r6, r4, #11
 800ea6a:	f000 f869 	bl	800eb40 <__malloc_unlock>
 800ea6e:	f026 0607 	bic.w	r6, r6, #7
 800ea72:	1d23      	adds	r3, r4, #4
 800ea74:	1af2      	subs	r2, r6, r3
 800ea76:	d0b6      	beq.n	800e9e6 <_malloc_r+0x22>
 800ea78:	1b9b      	subs	r3, r3, r6
 800ea7a:	50a3      	str	r3, [r4, r2]
 800ea7c:	e7b3      	b.n	800e9e6 <_malloc_r+0x22>
 800ea7e:	6862      	ldr	r2, [r4, #4]
 800ea80:	42a3      	cmp	r3, r4
 800ea82:	bf0c      	ite	eq
 800ea84:	6032      	streq	r2, [r6, #0]
 800ea86:	605a      	strne	r2, [r3, #4]
 800ea88:	e7ec      	b.n	800ea64 <_malloc_r+0xa0>
 800ea8a:	4623      	mov	r3, r4
 800ea8c:	6864      	ldr	r4, [r4, #4]
 800ea8e:	e7b2      	b.n	800e9f6 <_malloc_r+0x32>
 800ea90:	4634      	mov	r4, r6
 800ea92:	6876      	ldr	r6, [r6, #4]
 800ea94:	e7b9      	b.n	800ea0a <_malloc_r+0x46>
 800ea96:	230c      	movs	r3, #12
 800ea98:	603b      	str	r3, [r7, #0]
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	f000 f850 	bl	800eb40 <__malloc_unlock>
 800eaa0:	e7a1      	b.n	800e9e6 <_malloc_r+0x22>
 800eaa2:	6025      	str	r5, [r4, #0]
 800eaa4:	e7de      	b.n	800ea64 <_malloc_r+0xa0>
 800eaa6:	bf00      	nop
 800eaa8:	20006c10 	.word	0x20006c10

0800eaac <_sbrk_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	4d06      	ldr	r5, [pc, #24]	; (800eac8 <_sbrk_r+0x1c>)
 800eab0:	2300      	movs	r3, #0
 800eab2:	4604      	mov	r4, r0
 800eab4:	4608      	mov	r0, r1
 800eab6:	602b      	str	r3, [r5, #0]
 800eab8:	f7f3 fe50 	bl	800275c <_sbrk>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_sbrk_r+0x1a>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_sbrk_r+0x1a>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	20006c18 	.word	0x20006c18

0800eacc <siprintf>:
 800eacc:	b40e      	push	{r1, r2, r3}
 800eace:	b500      	push	{lr}
 800ead0:	b09c      	sub	sp, #112	; 0x70
 800ead2:	ab1d      	add	r3, sp, #116	; 0x74
 800ead4:	9002      	str	r0, [sp, #8]
 800ead6:	9006      	str	r0, [sp, #24]
 800ead8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eadc:	4809      	ldr	r0, [pc, #36]	; (800eb04 <siprintf+0x38>)
 800eade:	9107      	str	r1, [sp, #28]
 800eae0:	9104      	str	r1, [sp, #16]
 800eae2:	4909      	ldr	r1, [pc, #36]	; (800eb08 <siprintf+0x3c>)
 800eae4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eae8:	9105      	str	r1, [sp, #20]
 800eaea:	6800      	ldr	r0, [r0, #0]
 800eaec:	9301      	str	r3, [sp, #4]
 800eaee:	a902      	add	r1, sp, #8
 800eaf0:	f000 f888 	bl	800ec04 <_svfiprintf_r>
 800eaf4:	9b02      	ldr	r3, [sp, #8]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	b01c      	add	sp, #112	; 0x70
 800eafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb00:	b003      	add	sp, #12
 800eb02:	4770      	bx	lr
 800eb04:	20000600 	.word	0x20000600
 800eb08:	ffff0208 	.word	0xffff0208

0800eb0c <strncpy>:
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	3901      	subs	r1, #1
 800eb10:	4603      	mov	r3, r0
 800eb12:	b132      	cbz	r2, 800eb22 <strncpy+0x16>
 800eb14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb18:	f803 4b01 	strb.w	r4, [r3], #1
 800eb1c:	3a01      	subs	r2, #1
 800eb1e:	2c00      	cmp	r4, #0
 800eb20:	d1f7      	bne.n	800eb12 <strncpy+0x6>
 800eb22:	441a      	add	r2, r3
 800eb24:	2100      	movs	r1, #0
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d100      	bne.n	800eb2c <strncpy+0x20>
 800eb2a:	bd10      	pop	{r4, pc}
 800eb2c:	f803 1b01 	strb.w	r1, [r3], #1
 800eb30:	e7f9      	b.n	800eb26 <strncpy+0x1a>
	...

0800eb34 <__malloc_lock>:
 800eb34:	4801      	ldr	r0, [pc, #4]	; (800eb3c <__malloc_lock+0x8>)
 800eb36:	f000 baf9 	b.w	800f12c <__retarget_lock_acquire_recursive>
 800eb3a:	bf00      	nop
 800eb3c:	20006c1c 	.word	0x20006c1c

0800eb40 <__malloc_unlock>:
 800eb40:	4801      	ldr	r0, [pc, #4]	; (800eb48 <__malloc_unlock+0x8>)
 800eb42:	f000 baf4 	b.w	800f12e <__retarget_lock_release_recursive>
 800eb46:	bf00      	nop
 800eb48:	20006c1c 	.word	0x20006c1c

0800eb4c <__ssputs_r>:
 800eb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb50:	688e      	ldr	r6, [r1, #8]
 800eb52:	429e      	cmp	r6, r3
 800eb54:	4682      	mov	sl, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	4690      	mov	r8, r2
 800eb5a:	461f      	mov	r7, r3
 800eb5c:	d838      	bhi.n	800ebd0 <__ssputs_r+0x84>
 800eb5e:	898a      	ldrh	r2, [r1, #12]
 800eb60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb64:	d032      	beq.n	800ebcc <__ssputs_r+0x80>
 800eb66:	6825      	ldr	r5, [r4, #0]
 800eb68:	6909      	ldr	r1, [r1, #16]
 800eb6a:	eba5 0901 	sub.w	r9, r5, r1
 800eb6e:	6965      	ldr	r5, [r4, #20]
 800eb70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb78:	3301      	adds	r3, #1
 800eb7a:	444b      	add	r3, r9
 800eb7c:	106d      	asrs	r5, r5, #1
 800eb7e:	429d      	cmp	r5, r3
 800eb80:	bf38      	it	cc
 800eb82:	461d      	movcc	r5, r3
 800eb84:	0553      	lsls	r3, r2, #21
 800eb86:	d531      	bpl.n	800ebec <__ssputs_r+0xa0>
 800eb88:	4629      	mov	r1, r5
 800eb8a:	f7ff ff1b 	bl	800e9c4 <_malloc_r>
 800eb8e:	4606      	mov	r6, r0
 800eb90:	b950      	cbnz	r0, 800eba8 <__ssputs_r+0x5c>
 800eb92:	230c      	movs	r3, #12
 800eb94:	f8ca 3000 	str.w	r3, [sl]
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb9e:	81a3      	strh	r3, [r4, #12]
 800eba0:	f04f 30ff 	mov.w	r0, #4294967295
 800eba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba8:	6921      	ldr	r1, [r4, #16]
 800ebaa:	464a      	mov	r2, r9
 800ebac:	f7ff fe88 	bl	800e8c0 <memcpy>
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	6126      	str	r6, [r4, #16]
 800ebbe:	6165      	str	r5, [r4, #20]
 800ebc0:	444e      	add	r6, r9
 800ebc2:	eba5 0509 	sub.w	r5, r5, r9
 800ebc6:	6026      	str	r6, [r4, #0]
 800ebc8:	60a5      	str	r5, [r4, #8]
 800ebca:	463e      	mov	r6, r7
 800ebcc:	42be      	cmp	r6, r7
 800ebce:	d900      	bls.n	800ebd2 <__ssputs_r+0x86>
 800ebd0:	463e      	mov	r6, r7
 800ebd2:	6820      	ldr	r0, [r4, #0]
 800ebd4:	4632      	mov	r2, r6
 800ebd6:	4641      	mov	r1, r8
 800ebd8:	f000 faaa 	bl	800f130 <memmove>
 800ebdc:	68a3      	ldr	r3, [r4, #8]
 800ebde:	1b9b      	subs	r3, r3, r6
 800ebe0:	60a3      	str	r3, [r4, #8]
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	4433      	add	r3, r6
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	2000      	movs	r0, #0
 800ebea:	e7db      	b.n	800eba4 <__ssputs_r+0x58>
 800ebec:	462a      	mov	r2, r5
 800ebee:	f000 fab9 	bl	800f164 <_realloc_r>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d1e1      	bne.n	800ebbc <__ssputs_r+0x70>
 800ebf8:	6921      	ldr	r1, [r4, #16]
 800ebfa:	4650      	mov	r0, sl
 800ebfc:	f7ff fe76 	bl	800e8ec <_free_r>
 800ec00:	e7c7      	b.n	800eb92 <__ssputs_r+0x46>
	...

0800ec04 <_svfiprintf_r>:
 800ec04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec08:	4698      	mov	r8, r3
 800ec0a:	898b      	ldrh	r3, [r1, #12]
 800ec0c:	061b      	lsls	r3, r3, #24
 800ec0e:	b09d      	sub	sp, #116	; 0x74
 800ec10:	4607      	mov	r7, r0
 800ec12:	460d      	mov	r5, r1
 800ec14:	4614      	mov	r4, r2
 800ec16:	d50e      	bpl.n	800ec36 <_svfiprintf_r+0x32>
 800ec18:	690b      	ldr	r3, [r1, #16]
 800ec1a:	b963      	cbnz	r3, 800ec36 <_svfiprintf_r+0x32>
 800ec1c:	2140      	movs	r1, #64	; 0x40
 800ec1e:	f7ff fed1 	bl	800e9c4 <_malloc_r>
 800ec22:	6028      	str	r0, [r5, #0]
 800ec24:	6128      	str	r0, [r5, #16]
 800ec26:	b920      	cbnz	r0, 800ec32 <_svfiprintf_r+0x2e>
 800ec28:	230c      	movs	r3, #12
 800ec2a:	603b      	str	r3, [r7, #0]
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec30:	e0d1      	b.n	800edd6 <_svfiprintf_r+0x1d2>
 800ec32:	2340      	movs	r3, #64	; 0x40
 800ec34:	616b      	str	r3, [r5, #20]
 800ec36:	2300      	movs	r3, #0
 800ec38:	9309      	str	r3, [sp, #36]	; 0x24
 800ec3a:	2320      	movs	r3, #32
 800ec3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec44:	2330      	movs	r3, #48	; 0x30
 800ec46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800edf0 <_svfiprintf_r+0x1ec>
 800ec4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec4e:	f04f 0901 	mov.w	r9, #1
 800ec52:	4623      	mov	r3, r4
 800ec54:	469a      	mov	sl, r3
 800ec56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec5a:	b10a      	cbz	r2, 800ec60 <_svfiprintf_r+0x5c>
 800ec5c:	2a25      	cmp	r2, #37	; 0x25
 800ec5e:	d1f9      	bne.n	800ec54 <_svfiprintf_r+0x50>
 800ec60:	ebba 0b04 	subs.w	fp, sl, r4
 800ec64:	d00b      	beq.n	800ec7e <_svfiprintf_r+0x7a>
 800ec66:	465b      	mov	r3, fp
 800ec68:	4622      	mov	r2, r4
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	f7ff ff6d 	bl	800eb4c <__ssputs_r>
 800ec72:	3001      	adds	r0, #1
 800ec74:	f000 80aa 	beq.w	800edcc <_svfiprintf_r+0x1c8>
 800ec78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec7a:	445a      	add	r2, fp
 800ec7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ec7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 80a2 	beq.w	800edcc <_svfiprintf_r+0x1c8>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec92:	f10a 0a01 	add.w	sl, sl, #1
 800ec96:	9304      	str	r3, [sp, #16]
 800ec98:	9307      	str	r3, [sp, #28]
 800ec9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec9e:	931a      	str	r3, [sp, #104]	; 0x68
 800eca0:	4654      	mov	r4, sl
 800eca2:	2205      	movs	r2, #5
 800eca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca8:	4851      	ldr	r0, [pc, #324]	; (800edf0 <_svfiprintf_r+0x1ec>)
 800ecaa:	f7f1 faa1 	bl	80001f0 <memchr>
 800ecae:	9a04      	ldr	r2, [sp, #16]
 800ecb0:	b9d8      	cbnz	r0, 800ecea <_svfiprintf_r+0xe6>
 800ecb2:	06d0      	lsls	r0, r2, #27
 800ecb4:	bf44      	itt	mi
 800ecb6:	2320      	movmi	r3, #32
 800ecb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecbc:	0711      	lsls	r1, r2, #28
 800ecbe:	bf44      	itt	mi
 800ecc0:	232b      	movmi	r3, #43	; 0x2b
 800ecc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecc6:	f89a 3000 	ldrb.w	r3, [sl]
 800ecca:	2b2a      	cmp	r3, #42	; 0x2a
 800eccc:	d015      	beq.n	800ecfa <_svfiprintf_r+0xf6>
 800ecce:	9a07      	ldr	r2, [sp, #28]
 800ecd0:	4654      	mov	r4, sl
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	f04f 0c0a 	mov.w	ip, #10
 800ecd8:	4621      	mov	r1, r4
 800ecda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecde:	3b30      	subs	r3, #48	; 0x30
 800ece0:	2b09      	cmp	r3, #9
 800ece2:	d94e      	bls.n	800ed82 <_svfiprintf_r+0x17e>
 800ece4:	b1b0      	cbz	r0, 800ed14 <_svfiprintf_r+0x110>
 800ece6:	9207      	str	r2, [sp, #28]
 800ece8:	e014      	b.n	800ed14 <_svfiprintf_r+0x110>
 800ecea:	eba0 0308 	sub.w	r3, r0, r8
 800ecee:	fa09 f303 	lsl.w	r3, r9, r3
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	9304      	str	r3, [sp, #16]
 800ecf6:	46a2      	mov	sl, r4
 800ecf8:	e7d2      	b.n	800eca0 <_svfiprintf_r+0x9c>
 800ecfa:	9b03      	ldr	r3, [sp, #12]
 800ecfc:	1d19      	adds	r1, r3, #4
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	9103      	str	r1, [sp, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	bfbb      	ittet	lt
 800ed06:	425b      	neglt	r3, r3
 800ed08:	f042 0202 	orrlt.w	r2, r2, #2
 800ed0c:	9307      	strge	r3, [sp, #28]
 800ed0e:	9307      	strlt	r3, [sp, #28]
 800ed10:	bfb8      	it	lt
 800ed12:	9204      	strlt	r2, [sp, #16]
 800ed14:	7823      	ldrb	r3, [r4, #0]
 800ed16:	2b2e      	cmp	r3, #46	; 0x2e
 800ed18:	d10c      	bne.n	800ed34 <_svfiprintf_r+0x130>
 800ed1a:	7863      	ldrb	r3, [r4, #1]
 800ed1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed1e:	d135      	bne.n	800ed8c <_svfiprintf_r+0x188>
 800ed20:	9b03      	ldr	r3, [sp, #12]
 800ed22:	1d1a      	adds	r2, r3, #4
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	9203      	str	r2, [sp, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	bfb8      	it	lt
 800ed2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed30:	3402      	adds	r4, #2
 800ed32:	9305      	str	r3, [sp, #20]
 800ed34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ee00 <_svfiprintf_r+0x1fc>
 800ed38:	7821      	ldrb	r1, [r4, #0]
 800ed3a:	2203      	movs	r2, #3
 800ed3c:	4650      	mov	r0, sl
 800ed3e:	f7f1 fa57 	bl	80001f0 <memchr>
 800ed42:	b140      	cbz	r0, 800ed56 <_svfiprintf_r+0x152>
 800ed44:	2340      	movs	r3, #64	; 0x40
 800ed46:	eba0 000a 	sub.w	r0, r0, sl
 800ed4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ed4e:	9b04      	ldr	r3, [sp, #16]
 800ed50:	4303      	orrs	r3, r0
 800ed52:	3401      	adds	r4, #1
 800ed54:	9304      	str	r3, [sp, #16]
 800ed56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed5a:	4826      	ldr	r0, [pc, #152]	; (800edf4 <_svfiprintf_r+0x1f0>)
 800ed5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed60:	2206      	movs	r2, #6
 800ed62:	f7f1 fa45 	bl	80001f0 <memchr>
 800ed66:	2800      	cmp	r0, #0
 800ed68:	d038      	beq.n	800eddc <_svfiprintf_r+0x1d8>
 800ed6a:	4b23      	ldr	r3, [pc, #140]	; (800edf8 <_svfiprintf_r+0x1f4>)
 800ed6c:	bb1b      	cbnz	r3, 800edb6 <_svfiprintf_r+0x1b2>
 800ed6e:	9b03      	ldr	r3, [sp, #12]
 800ed70:	3307      	adds	r3, #7
 800ed72:	f023 0307 	bic.w	r3, r3, #7
 800ed76:	3308      	adds	r3, #8
 800ed78:	9303      	str	r3, [sp, #12]
 800ed7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed7c:	4433      	add	r3, r6
 800ed7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed80:	e767      	b.n	800ec52 <_svfiprintf_r+0x4e>
 800ed82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed86:	460c      	mov	r4, r1
 800ed88:	2001      	movs	r0, #1
 800ed8a:	e7a5      	b.n	800ecd8 <_svfiprintf_r+0xd4>
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	3401      	adds	r4, #1
 800ed90:	9305      	str	r3, [sp, #20]
 800ed92:	4619      	mov	r1, r3
 800ed94:	f04f 0c0a 	mov.w	ip, #10
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed9e:	3a30      	subs	r2, #48	; 0x30
 800eda0:	2a09      	cmp	r2, #9
 800eda2:	d903      	bls.n	800edac <_svfiprintf_r+0x1a8>
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d0c5      	beq.n	800ed34 <_svfiprintf_r+0x130>
 800eda8:	9105      	str	r1, [sp, #20]
 800edaa:	e7c3      	b.n	800ed34 <_svfiprintf_r+0x130>
 800edac:	fb0c 2101 	mla	r1, ip, r1, r2
 800edb0:	4604      	mov	r4, r0
 800edb2:	2301      	movs	r3, #1
 800edb4:	e7f0      	b.n	800ed98 <_svfiprintf_r+0x194>
 800edb6:	ab03      	add	r3, sp, #12
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	462a      	mov	r2, r5
 800edbc:	4b0f      	ldr	r3, [pc, #60]	; (800edfc <_svfiprintf_r+0x1f8>)
 800edbe:	a904      	add	r1, sp, #16
 800edc0:	4638      	mov	r0, r7
 800edc2:	f3af 8000 	nop.w
 800edc6:	1c42      	adds	r2, r0, #1
 800edc8:	4606      	mov	r6, r0
 800edca:	d1d6      	bne.n	800ed7a <_svfiprintf_r+0x176>
 800edcc:	89ab      	ldrh	r3, [r5, #12]
 800edce:	065b      	lsls	r3, r3, #25
 800edd0:	f53f af2c 	bmi.w	800ec2c <_svfiprintf_r+0x28>
 800edd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edd6:	b01d      	add	sp, #116	; 0x74
 800edd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	462a      	mov	r2, r5
 800ede2:	4b06      	ldr	r3, [pc, #24]	; (800edfc <_svfiprintf_r+0x1f8>)
 800ede4:	a904      	add	r1, sp, #16
 800ede6:	4638      	mov	r0, r7
 800ede8:	f000 f87a 	bl	800eee0 <_printf_i>
 800edec:	e7eb      	b.n	800edc6 <_svfiprintf_r+0x1c2>
 800edee:	bf00      	nop
 800edf0:	0800f758 	.word	0x0800f758
 800edf4:	0800f762 	.word	0x0800f762
 800edf8:	00000000 	.word	0x00000000
 800edfc:	0800eb4d 	.word	0x0800eb4d
 800ee00:	0800f75e 	.word	0x0800f75e

0800ee04 <_printf_common>:
 800ee04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee08:	4616      	mov	r6, r2
 800ee0a:	4699      	mov	r9, r3
 800ee0c:	688a      	ldr	r2, [r1, #8]
 800ee0e:	690b      	ldr	r3, [r1, #16]
 800ee10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee14:	4293      	cmp	r3, r2
 800ee16:	bfb8      	it	lt
 800ee18:	4613      	movlt	r3, r2
 800ee1a:	6033      	str	r3, [r6, #0]
 800ee1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee20:	4607      	mov	r7, r0
 800ee22:	460c      	mov	r4, r1
 800ee24:	b10a      	cbz	r2, 800ee2a <_printf_common+0x26>
 800ee26:	3301      	adds	r3, #1
 800ee28:	6033      	str	r3, [r6, #0]
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	0699      	lsls	r1, r3, #26
 800ee2e:	bf42      	ittt	mi
 800ee30:	6833      	ldrmi	r3, [r6, #0]
 800ee32:	3302      	addmi	r3, #2
 800ee34:	6033      	strmi	r3, [r6, #0]
 800ee36:	6825      	ldr	r5, [r4, #0]
 800ee38:	f015 0506 	ands.w	r5, r5, #6
 800ee3c:	d106      	bne.n	800ee4c <_printf_common+0x48>
 800ee3e:	f104 0a19 	add.w	sl, r4, #25
 800ee42:	68e3      	ldr	r3, [r4, #12]
 800ee44:	6832      	ldr	r2, [r6, #0]
 800ee46:	1a9b      	subs	r3, r3, r2
 800ee48:	42ab      	cmp	r3, r5
 800ee4a:	dc26      	bgt.n	800ee9a <_printf_common+0x96>
 800ee4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee50:	1e13      	subs	r3, r2, #0
 800ee52:	6822      	ldr	r2, [r4, #0]
 800ee54:	bf18      	it	ne
 800ee56:	2301      	movne	r3, #1
 800ee58:	0692      	lsls	r2, r2, #26
 800ee5a:	d42b      	bmi.n	800eeb4 <_printf_common+0xb0>
 800ee5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee60:	4649      	mov	r1, r9
 800ee62:	4638      	mov	r0, r7
 800ee64:	47c0      	blx	r8
 800ee66:	3001      	adds	r0, #1
 800ee68:	d01e      	beq.n	800eea8 <_printf_common+0xa4>
 800ee6a:	6823      	ldr	r3, [r4, #0]
 800ee6c:	68e5      	ldr	r5, [r4, #12]
 800ee6e:	6832      	ldr	r2, [r6, #0]
 800ee70:	f003 0306 	and.w	r3, r3, #6
 800ee74:	2b04      	cmp	r3, #4
 800ee76:	bf08      	it	eq
 800ee78:	1aad      	subeq	r5, r5, r2
 800ee7a:	68a3      	ldr	r3, [r4, #8]
 800ee7c:	6922      	ldr	r2, [r4, #16]
 800ee7e:	bf0c      	ite	eq
 800ee80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee84:	2500      	movne	r5, #0
 800ee86:	4293      	cmp	r3, r2
 800ee88:	bfc4      	itt	gt
 800ee8a:	1a9b      	subgt	r3, r3, r2
 800ee8c:	18ed      	addgt	r5, r5, r3
 800ee8e:	2600      	movs	r6, #0
 800ee90:	341a      	adds	r4, #26
 800ee92:	42b5      	cmp	r5, r6
 800ee94:	d11a      	bne.n	800eecc <_printf_common+0xc8>
 800ee96:	2000      	movs	r0, #0
 800ee98:	e008      	b.n	800eeac <_printf_common+0xa8>
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	4652      	mov	r2, sl
 800ee9e:	4649      	mov	r1, r9
 800eea0:	4638      	mov	r0, r7
 800eea2:	47c0      	blx	r8
 800eea4:	3001      	adds	r0, #1
 800eea6:	d103      	bne.n	800eeb0 <_printf_common+0xac>
 800eea8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb0:	3501      	adds	r5, #1
 800eeb2:	e7c6      	b.n	800ee42 <_printf_common+0x3e>
 800eeb4:	18e1      	adds	r1, r4, r3
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	2030      	movs	r0, #48	; 0x30
 800eeba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eebe:	4422      	add	r2, r4
 800eec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eec8:	3302      	adds	r3, #2
 800eeca:	e7c7      	b.n	800ee5c <_printf_common+0x58>
 800eecc:	2301      	movs	r3, #1
 800eece:	4622      	mov	r2, r4
 800eed0:	4649      	mov	r1, r9
 800eed2:	4638      	mov	r0, r7
 800eed4:	47c0      	blx	r8
 800eed6:	3001      	adds	r0, #1
 800eed8:	d0e6      	beq.n	800eea8 <_printf_common+0xa4>
 800eeda:	3601      	adds	r6, #1
 800eedc:	e7d9      	b.n	800ee92 <_printf_common+0x8e>
	...

0800eee0 <_printf_i>:
 800eee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eee4:	7e0f      	ldrb	r7, [r1, #24]
 800eee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eee8:	2f78      	cmp	r7, #120	; 0x78
 800eeea:	4691      	mov	r9, r2
 800eeec:	4680      	mov	r8, r0
 800eeee:	460c      	mov	r4, r1
 800eef0:	469a      	mov	sl, r3
 800eef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eef6:	d807      	bhi.n	800ef08 <_printf_i+0x28>
 800eef8:	2f62      	cmp	r7, #98	; 0x62
 800eefa:	d80a      	bhi.n	800ef12 <_printf_i+0x32>
 800eefc:	2f00      	cmp	r7, #0
 800eefe:	f000 80d8 	beq.w	800f0b2 <_printf_i+0x1d2>
 800ef02:	2f58      	cmp	r7, #88	; 0x58
 800ef04:	f000 80a3 	beq.w	800f04e <_printf_i+0x16e>
 800ef08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef10:	e03a      	b.n	800ef88 <_printf_i+0xa8>
 800ef12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef16:	2b15      	cmp	r3, #21
 800ef18:	d8f6      	bhi.n	800ef08 <_printf_i+0x28>
 800ef1a:	a101      	add	r1, pc, #4	; (adr r1, 800ef20 <_printf_i+0x40>)
 800ef1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef20:	0800ef79 	.word	0x0800ef79
 800ef24:	0800ef8d 	.word	0x0800ef8d
 800ef28:	0800ef09 	.word	0x0800ef09
 800ef2c:	0800ef09 	.word	0x0800ef09
 800ef30:	0800ef09 	.word	0x0800ef09
 800ef34:	0800ef09 	.word	0x0800ef09
 800ef38:	0800ef8d 	.word	0x0800ef8d
 800ef3c:	0800ef09 	.word	0x0800ef09
 800ef40:	0800ef09 	.word	0x0800ef09
 800ef44:	0800ef09 	.word	0x0800ef09
 800ef48:	0800ef09 	.word	0x0800ef09
 800ef4c:	0800f099 	.word	0x0800f099
 800ef50:	0800efbd 	.word	0x0800efbd
 800ef54:	0800f07b 	.word	0x0800f07b
 800ef58:	0800ef09 	.word	0x0800ef09
 800ef5c:	0800ef09 	.word	0x0800ef09
 800ef60:	0800f0bb 	.word	0x0800f0bb
 800ef64:	0800ef09 	.word	0x0800ef09
 800ef68:	0800efbd 	.word	0x0800efbd
 800ef6c:	0800ef09 	.word	0x0800ef09
 800ef70:	0800ef09 	.word	0x0800ef09
 800ef74:	0800f083 	.word	0x0800f083
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	1d1a      	adds	r2, r3, #4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	602a      	str	r2, [r5, #0]
 800ef80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e0a3      	b.n	800f0d4 <_printf_i+0x1f4>
 800ef8c:	6820      	ldr	r0, [r4, #0]
 800ef8e:	6829      	ldr	r1, [r5, #0]
 800ef90:	0606      	lsls	r6, r0, #24
 800ef92:	f101 0304 	add.w	r3, r1, #4
 800ef96:	d50a      	bpl.n	800efae <_printf_i+0xce>
 800ef98:	680e      	ldr	r6, [r1, #0]
 800ef9a:	602b      	str	r3, [r5, #0]
 800ef9c:	2e00      	cmp	r6, #0
 800ef9e:	da03      	bge.n	800efa8 <_printf_i+0xc8>
 800efa0:	232d      	movs	r3, #45	; 0x2d
 800efa2:	4276      	negs	r6, r6
 800efa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efa8:	485e      	ldr	r0, [pc, #376]	; (800f124 <_printf_i+0x244>)
 800efaa:	230a      	movs	r3, #10
 800efac:	e019      	b.n	800efe2 <_printf_i+0x102>
 800efae:	680e      	ldr	r6, [r1, #0]
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800efb6:	bf18      	it	ne
 800efb8:	b236      	sxthne	r6, r6
 800efba:	e7ef      	b.n	800ef9c <_printf_i+0xbc>
 800efbc:	682b      	ldr	r3, [r5, #0]
 800efbe:	6820      	ldr	r0, [r4, #0]
 800efc0:	1d19      	adds	r1, r3, #4
 800efc2:	6029      	str	r1, [r5, #0]
 800efc4:	0601      	lsls	r1, r0, #24
 800efc6:	d501      	bpl.n	800efcc <_printf_i+0xec>
 800efc8:	681e      	ldr	r6, [r3, #0]
 800efca:	e002      	b.n	800efd2 <_printf_i+0xf2>
 800efcc:	0646      	lsls	r6, r0, #25
 800efce:	d5fb      	bpl.n	800efc8 <_printf_i+0xe8>
 800efd0:	881e      	ldrh	r6, [r3, #0]
 800efd2:	4854      	ldr	r0, [pc, #336]	; (800f124 <_printf_i+0x244>)
 800efd4:	2f6f      	cmp	r7, #111	; 0x6f
 800efd6:	bf0c      	ite	eq
 800efd8:	2308      	moveq	r3, #8
 800efda:	230a      	movne	r3, #10
 800efdc:	2100      	movs	r1, #0
 800efde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efe2:	6865      	ldr	r5, [r4, #4]
 800efe4:	60a5      	str	r5, [r4, #8]
 800efe6:	2d00      	cmp	r5, #0
 800efe8:	bfa2      	ittt	ge
 800efea:	6821      	ldrge	r1, [r4, #0]
 800efec:	f021 0104 	bicge.w	r1, r1, #4
 800eff0:	6021      	strge	r1, [r4, #0]
 800eff2:	b90e      	cbnz	r6, 800eff8 <_printf_i+0x118>
 800eff4:	2d00      	cmp	r5, #0
 800eff6:	d04d      	beq.n	800f094 <_printf_i+0x1b4>
 800eff8:	4615      	mov	r5, r2
 800effa:	fbb6 f1f3 	udiv	r1, r6, r3
 800effe:	fb03 6711 	mls	r7, r3, r1, r6
 800f002:	5dc7      	ldrb	r7, [r0, r7]
 800f004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f008:	4637      	mov	r7, r6
 800f00a:	42bb      	cmp	r3, r7
 800f00c:	460e      	mov	r6, r1
 800f00e:	d9f4      	bls.n	800effa <_printf_i+0x11a>
 800f010:	2b08      	cmp	r3, #8
 800f012:	d10b      	bne.n	800f02c <_printf_i+0x14c>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	07de      	lsls	r6, r3, #31
 800f018:	d508      	bpl.n	800f02c <_printf_i+0x14c>
 800f01a:	6923      	ldr	r3, [r4, #16]
 800f01c:	6861      	ldr	r1, [r4, #4]
 800f01e:	4299      	cmp	r1, r3
 800f020:	bfde      	ittt	le
 800f022:	2330      	movle	r3, #48	; 0x30
 800f024:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f02c:	1b52      	subs	r2, r2, r5
 800f02e:	6122      	str	r2, [r4, #16]
 800f030:	f8cd a000 	str.w	sl, [sp]
 800f034:	464b      	mov	r3, r9
 800f036:	aa03      	add	r2, sp, #12
 800f038:	4621      	mov	r1, r4
 800f03a:	4640      	mov	r0, r8
 800f03c:	f7ff fee2 	bl	800ee04 <_printf_common>
 800f040:	3001      	adds	r0, #1
 800f042:	d14c      	bne.n	800f0de <_printf_i+0x1fe>
 800f044:	f04f 30ff 	mov.w	r0, #4294967295
 800f048:	b004      	add	sp, #16
 800f04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f04e:	4835      	ldr	r0, [pc, #212]	; (800f124 <_printf_i+0x244>)
 800f050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f054:	6829      	ldr	r1, [r5, #0]
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	f851 6b04 	ldr.w	r6, [r1], #4
 800f05c:	6029      	str	r1, [r5, #0]
 800f05e:	061d      	lsls	r5, r3, #24
 800f060:	d514      	bpl.n	800f08c <_printf_i+0x1ac>
 800f062:	07df      	lsls	r7, r3, #31
 800f064:	bf44      	itt	mi
 800f066:	f043 0320 	orrmi.w	r3, r3, #32
 800f06a:	6023      	strmi	r3, [r4, #0]
 800f06c:	b91e      	cbnz	r6, 800f076 <_printf_i+0x196>
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	f023 0320 	bic.w	r3, r3, #32
 800f074:	6023      	str	r3, [r4, #0]
 800f076:	2310      	movs	r3, #16
 800f078:	e7b0      	b.n	800efdc <_printf_i+0xfc>
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	f043 0320 	orr.w	r3, r3, #32
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	2378      	movs	r3, #120	; 0x78
 800f084:	4828      	ldr	r0, [pc, #160]	; (800f128 <_printf_i+0x248>)
 800f086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f08a:	e7e3      	b.n	800f054 <_printf_i+0x174>
 800f08c:	0659      	lsls	r1, r3, #25
 800f08e:	bf48      	it	mi
 800f090:	b2b6      	uxthmi	r6, r6
 800f092:	e7e6      	b.n	800f062 <_printf_i+0x182>
 800f094:	4615      	mov	r5, r2
 800f096:	e7bb      	b.n	800f010 <_printf_i+0x130>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	6826      	ldr	r6, [r4, #0]
 800f09c:	6961      	ldr	r1, [r4, #20]
 800f09e:	1d18      	adds	r0, r3, #4
 800f0a0:	6028      	str	r0, [r5, #0]
 800f0a2:	0635      	lsls	r5, r6, #24
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	d501      	bpl.n	800f0ac <_printf_i+0x1cc>
 800f0a8:	6019      	str	r1, [r3, #0]
 800f0aa:	e002      	b.n	800f0b2 <_printf_i+0x1d2>
 800f0ac:	0670      	lsls	r0, r6, #25
 800f0ae:	d5fb      	bpl.n	800f0a8 <_printf_i+0x1c8>
 800f0b0:	8019      	strh	r1, [r3, #0]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	6123      	str	r3, [r4, #16]
 800f0b6:	4615      	mov	r5, r2
 800f0b8:	e7ba      	b.n	800f030 <_printf_i+0x150>
 800f0ba:	682b      	ldr	r3, [r5, #0]
 800f0bc:	1d1a      	adds	r2, r3, #4
 800f0be:	602a      	str	r2, [r5, #0]
 800f0c0:	681d      	ldr	r5, [r3, #0]
 800f0c2:	6862      	ldr	r2, [r4, #4]
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f7f1 f892 	bl	80001f0 <memchr>
 800f0cc:	b108      	cbz	r0, 800f0d2 <_printf_i+0x1f2>
 800f0ce:	1b40      	subs	r0, r0, r5
 800f0d0:	6060      	str	r0, [r4, #4]
 800f0d2:	6863      	ldr	r3, [r4, #4]
 800f0d4:	6123      	str	r3, [r4, #16]
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0dc:	e7a8      	b.n	800f030 <_printf_i+0x150>
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	4649      	mov	r1, r9
 800f0e4:	4640      	mov	r0, r8
 800f0e6:	47d0      	blx	sl
 800f0e8:	3001      	adds	r0, #1
 800f0ea:	d0ab      	beq.n	800f044 <_printf_i+0x164>
 800f0ec:	6823      	ldr	r3, [r4, #0]
 800f0ee:	079b      	lsls	r3, r3, #30
 800f0f0:	d413      	bmi.n	800f11a <_printf_i+0x23a>
 800f0f2:	68e0      	ldr	r0, [r4, #12]
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	4298      	cmp	r0, r3
 800f0f8:	bfb8      	it	lt
 800f0fa:	4618      	movlt	r0, r3
 800f0fc:	e7a4      	b.n	800f048 <_printf_i+0x168>
 800f0fe:	2301      	movs	r3, #1
 800f100:	4632      	mov	r2, r6
 800f102:	4649      	mov	r1, r9
 800f104:	4640      	mov	r0, r8
 800f106:	47d0      	blx	sl
 800f108:	3001      	adds	r0, #1
 800f10a:	d09b      	beq.n	800f044 <_printf_i+0x164>
 800f10c:	3501      	adds	r5, #1
 800f10e:	68e3      	ldr	r3, [r4, #12]
 800f110:	9903      	ldr	r1, [sp, #12]
 800f112:	1a5b      	subs	r3, r3, r1
 800f114:	42ab      	cmp	r3, r5
 800f116:	dcf2      	bgt.n	800f0fe <_printf_i+0x21e>
 800f118:	e7eb      	b.n	800f0f2 <_printf_i+0x212>
 800f11a:	2500      	movs	r5, #0
 800f11c:	f104 0619 	add.w	r6, r4, #25
 800f120:	e7f5      	b.n	800f10e <_printf_i+0x22e>
 800f122:	bf00      	nop
 800f124:	0800f769 	.word	0x0800f769
 800f128:	0800f77a 	.word	0x0800f77a

0800f12c <__retarget_lock_acquire_recursive>:
 800f12c:	4770      	bx	lr

0800f12e <__retarget_lock_release_recursive>:
 800f12e:	4770      	bx	lr

0800f130 <memmove>:
 800f130:	4288      	cmp	r0, r1
 800f132:	b510      	push	{r4, lr}
 800f134:	eb01 0402 	add.w	r4, r1, r2
 800f138:	d902      	bls.n	800f140 <memmove+0x10>
 800f13a:	4284      	cmp	r4, r0
 800f13c:	4623      	mov	r3, r4
 800f13e:	d807      	bhi.n	800f150 <memmove+0x20>
 800f140:	1e43      	subs	r3, r0, #1
 800f142:	42a1      	cmp	r1, r4
 800f144:	d008      	beq.n	800f158 <memmove+0x28>
 800f146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f14a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f14e:	e7f8      	b.n	800f142 <memmove+0x12>
 800f150:	4402      	add	r2, r0
 800f152:	4601      	mov	r1, r0
 800f154:	428a      	cmp	r2, r1
 800f156:	d100      	bne.n	800f15a <memmove+0x2a>
 800f158:	bd10      	pop	{r4, pc}
 800f15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f162:	e7f7      	b.n	800f154 <memmove+0x24>

0800f164 <_realloc_r>:
 800f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f168:	4680      	mov	r8, r0
 800f16a:	4614      	mov	r4, r2
 800f16c:	460e      	mov	r6, r1
 800f16e:	b921      	cbnz	r1, 800f17a <_realloc_r+0x16>
 800f170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f174:	4611      	mov	r1, r2
 800f176:	f7ff bc25 	b.w	800e9c4 <_malloc_r>
 800f17a:	b92a      	cbnz	r2, 800f188 <_realloc_r+0x24>
 800f17c:	f7ff fbb6 	bl	800e8ec <_free_r>
 800f180:	4625      	mov	r5, r4
 800f182:	4628      	mov	r0, r5
 800f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f188:	f000 f81b 	bl	800f1c2 <_malloc_usable_size_r>
 800f18c:	4284      	cmp	r4, r0
 800f18e:	4607      	mov	r7, r0
 800f190:	d802      	bhi.n	800f198 <_realloc_r+0x34>
 800f192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f196:	d812      	bhi.n	800f1be <_realloc_r+0x5a>
 800f198:	4621      	mov	r1, r4
 800f19a:	4640      	mov	r0, r8
 800f19c:	f7ff fc12 	bl	800e9c4 <_malloc_r>
 800f1a0:	4605      	mov	r5, r0
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d0ed      	beq.n	800f182 <_realloc_r+0x1e>
 800f1a6:	42bc      	cmp	r4, r7
 800f1a8:	4622      	mov	r2, r4
 800f1aa:	4631      	mov	r1, r6
 800f1ac:	bf28      	it	cs
 800f1ae:	463a      	movcs	r2, r7
 800f1b0:	f7ff fb86 	bl	800e8c0 <memcpy>
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	f7ff fb98 	bl	800e8ec <_free_r>
 800f1bc:	e7e1      	b.n	800f182 <_realloc_r+0x1e>
 800f1be:	4635      	mov	r5, r6
 800f1c0:	e7df      	b.n	800f182 <_realloc_r+0x1e>

0800f1c2 <_malloc_usable_size_r>:
 800f1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1c6:	1f18      	subs	r0, r3, #4
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	bfbc      	itt	lt
 800f1cc:	580b      	ldrlt	r3, [r1, r0]
 800f1ce:	18c0      	addlt	r0, r0, r3
 800f1d0:	4770      	bx	lr
	...

0800f1d4 <_init>:
 800f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d6:	bf00      	nop
 800f1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1da:	bc08      	pop	{r3}
 800f1dc:	469e      	mov	lr, r3
 800f1de:	4770      	bx	lr

0800f1e0 <_fini>:
 800f1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e2:	bf00      	nop
 800f1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e6:	bc08      	pop	{r3}
 800f1e8:	469e      	mov	lr, r3
 800f1ea:	4770      	bx	lr
